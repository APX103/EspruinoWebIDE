// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_HAS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// A web environment like Electron.js can have Node enabled, so we must
// distinguish between Node-enabled environments and Node environments per se.
// This will allow the former to do things like mount NODEFS.
// Extended check using process.versions fixes issue #8816.
// (Also makes redundant the original check that 'require' is a function.)
ENVIRONMENT_HAS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';


  read_ = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (ret) {
      return binary ? ret : ret.toString();
    }
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };




  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };


} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = {};
    console.log = print;
    console.warn = console.error = typeof printErr !== 'undefined' ? printErr : print;
  }
} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_HAS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {


  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary') } });
// TODO: add when SDL2 is fixed if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';


// TODO remove when SDL2 is fixed (also see above)



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort('failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};




// Wraps a JS function as a wasm function with a given signature.
// In the future, we may get a WebAssembly.Function constructor. Until then,
// we create a wasm module that takes the JS function as an import with a given
// signature, and re-exports that as a wasm function.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;
  var ret = table.length;

  // Grow the table
  try {
    table.grow(1);
  } catch (err) {
    if (!err instanceof RangeError) {
      throw err;
    }
    throw 'Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.';
  }

  // Insert new element
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!err instanceof TypeError) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  return ret;
}

function removeFunctionWasm(index) {
  // TODO(sbc): Look into implementing this to allow re-using of table slots
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

function removeFunction(index) {
  removeFunctionWasm(index);
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime') } });


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
var
WebAssembly = {
  Memory: function(opts) {
    return {
      buffer: new ArrayBuffer(opts['initial'] * 65536),
      grow: function(amount) {
        var oldBuffer = this.buffer;
        var ret = __growWasmMemory(amount);
        assert(this.buffer !== oldBuffer); // the call should have updated us
        return ret;
      }
    };
  },

  Table: function(opts) {
    var ret = new Array(opts['initial']);
    ret.grow = function(by) {
      if (ret.length >= 668 + 0) {
        abort('Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.')
      }
      ret.push(null);
    };
    ret.set = function(i, func) {
      ret[i] = func;
    };
    ret.get = function(i) {
      return ret[i];
    };
    return ret;
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
    return {};
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // XXX hack to get an atob implementation

// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


    var atob = decodeBase64;
    // This will be replaced by the actual wasm2js code.
    var exports = (
// EMSCRIPTEN_START_ASM
function instantiate(asmLibraryArg, wasmMemory, wasmTable) {


  var scratchBuffer = new ArrayBuffer(8);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function legalimport$wasm2js_scratch_store_i64(low, high) {
    i32ScratchView[0] = low;
    i32ScratchView[1] = high;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[0] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[0];
  }
      
function asmFunc(global, env, buffer) {
 var memory = env.memory;
 var FUNCTION_TABLE = wasmTable;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var abs = env.abs;
 var roundf = env.roundf;
 var abort = env.abort;
 var round = env.round;
 var exit = env.exit;
 var __wasi_fd_write = env.fd_write;
 var __lock = env.__lock;
 var __unlock = env.__unlock;
 var __wasi_fd_close = env.fd_close;
 var emscripten_resize_heap = env.emscripten_resize_heap;
 var emscripten_memcpy_big = env.emscripten_memcpy_big;
 var setTempRet0 = env.setTempRet0;
 var legalimport$__wasi_fd_seek = env.fd_seek;
 var emscripten_asm_const_iii = env.emscripten_asm_const_iii;
 var emscripten_asm_const_dii = env.emscripten_asm_const_dii;
 var global$0 = 5496560;
 var global$1 = 253672;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
function jswCallFunctionHack($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $5 = global$0 - 544 | 0;
 global$0 = $5;
 HEAP32[$5 + 536 >> 2] = $0;
 HEAP16[$5 + 534 >> 1] = $1;
 HEAP32[$5 + 528 >> 2] = $2;
 HEAP32[$5 + 524 >> 2] = $3;
 HEAP32[$5 + 520 >> 2] = $4;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             label$13 : {
              label$14 : {
               label$15 : {
                label$16 : {
                 label$17 : {
                  label$18 : {
                   label$19 : {
                    label$20 : {
                     label$21 : {
                      label$22 : {
                       label$23 : {
                        label$24 : {
                         label$25 : {
                          label$26 : {
                           label$27 : {
                            label$28 : {
                             label$29 : {
                              label$30 : {
                               label$31 : {
                                label$32 : {
                                 label$33 : {
                                  label$34 : {
                                   label$35 : {
                                    label$36 : {
                                     label$37 : {
                                      label$38 : {
                                       label$39 : {
                                        label$40 : {
                                         label$41 : {
                                          label$42 : {
                                           label$43 : {
                                            label$44 : {
                                             label$45 : {
                                              label$46 : {
                                               label$47 : {
                                                label$48 : {
                                                 label$49 : {
                                                  label$50 : {
                                                   label$51 : {
                                                    label$52 : {
                                                     label$53 : {
                                                      label$54 : {
                                                       label$55 : {
                                                        label$56 : {
                                                         label$57 : {
                                                          label$58 : {
                                                           label$59 : {
                                                            label$60 : {
                                                             label$61 : {
                                                              label$62 : {
                                                               label$63 : {
                                                                label$64 : {
                                                                 label$65 : {
                                                                  label$66 : {
                                                                   label$67 : {
                                                                    label$68 : {
                                                                     label$69 : {
                                                                      label$70 : {
                                                                       label$71 : {
                                                                        label$72 : {
                                                                         label$73 : {
                                                                          label$74 : {
                                                                           label$75 : {
                                                                            label$76 : {
                                                                             label$77 : {
                                                                              label$78 : {
                                                                               label$79 : {
                                                                                label$80 : {
                                                                                 label$81 : {
                                                                                  label$82 : {
                                                                                   label$83 : {
                                                                                    label$84 : {
                                                                                     label$85 : {
                                                                                      label$86 : {
                                                                                       label$87 : {
                                                                                        label$88 : {
                                                                                         label$89 : {
                                                                                          label$90 : {
                                                                                           label$91 : {
                                                                                            label$92 : {
                                                                                             label$93 : {
                                                                                              label$94 : {
                                                                                               label$95 : {
                                                                                                label$96 : {
                                                                                                 label$97 : {
                                                                                                  label$98 : {
                                                                                                   label$99 : {
                                                                                                    label$100 : {
                                                                                                     label$101 : {
                                                                                                      label$102 : {
                                                                                                       label$103 : {
                                                                                                        label$104 : {
                                                                                                         label$105 : {
                                                                                                          label$106 : {
                                                                                                           label$107 : {
                                                                                                            label$108 : {
                                                                                                             $0 = HEAPU16[$5 + 534 >> 1];
                                                                                                             if ($0) {
                                                                                                              label$110 : {
                                                                                                               label$111 : {
                                                                                                                label$112 : {
                                                                                                                 if (($0 | 0) != 1) {
                                                                                                                  label$114 : {
                                                                                                                   switch ($0 - 3 | 0) {
                                                                                                                   case 0:
                                                                                                                    break label$111;
                                                                                                                   case 1:
                                                                                                                    break label$57;
                                                                                                                   case 3:
                                                                                                                    break label$79;
                                                                                                                   default:
                                                                                                                    break label$114;
                                                                                                                   }
                                                                                                                  }
                                                                                                                  if (($0 | 0) != 8) {
                                                                                                                   label$116 : {
                                                                                                                    switch ($0 - 9 | 0) {
                                                                                                                    case 0:
                                                                                                                     break label$105;
                                                                                                                    case 13:
                                                                                                                     break label$17;
                                                                                                                    case 7:
                                                                                                                     break label$53;
                                                                                                                    case 3:
                                                                                                                     break label$62;
                                                                                                                    case 5:
                                                                                                                     break label$71;
                                                                                                                    case 2:
                                                                                                                     break label$88;
                                                                                                                    case 8:
                                                                                                                     break label$99;
                                                                                                                    default:
                                                                                                                     break label$116;
                                                                                                                    }
                                                                                                                   }
                                                                                                                   label$117 : {
                                                                                                                    if (($0 | 0) != 24) {
                                                                                                                     if (($0 | 0) == 32) {
                                                                                                                      break label$112;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 33) {
                                                                                                                      break label$85;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 36) {
                                                                                                                      break label$106;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 41) {
                                                                                                                      break label$46;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 46) {
                                                                                                                      break label$50;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 48) {
                                                                                                                      break label$117;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 49) {
                                                                                                                      break label$18;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 54) {
                                                                                                                      break label$20;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 72) {
                                                                                                                      break label$102;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 73) {
                                                                                                                      break label$101;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 75) {
                                                                                                                      break label$28;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 96) {
                                                                                                                      break label$110;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 97) {
                                                                                                                      break label$22;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 112) {
                                                                                                                      break label$65;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 136) {
                                                                                                                      break label$55;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 200) {
                                                                                                                      break label$63;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 201) {
                                                                                                                      break label$30;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 204) {
                                                                                                                      break label$60;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 264) {
                                                                                                                      break label$54;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 265) {
                                                                                                                      break label$61;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 288) {
                                                                                                                      break label$107;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 289) {
                                                                                                                      break label$104;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 392) {
                                                                                                                      break label$51;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 398) {
                                                                                                                      break label$68;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 417) {
                                                                                                                      break label$103;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 438) {
                                                                                                                      break label$19;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 584) {
                                                                                                                      break label$64;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 585) {
                                                                                                                      break label$44;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 609) {
                                                                                                                      break label$70;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 744) {
                                                                                                                      break label$48;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 841) {
                                                                                                                      break label$45;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 936) {
                                                                                                                      break label$49;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 1417) {
                                                                                                                      break label$52;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 1608) {
                                                                                                                      break label$66;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 1609) {
                                                                                                                      break label$58;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 1640) {
                                                                                                                      break label$47;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 2126) {
                                                                                                                      break label$67;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 2313) {
                                                                                                                      break label$83;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 3510) {
                                                                                                                      break label$69;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 6433) {
                                                                                                                      break label$16;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 15793) {
                                                                                                                      break label$56;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 16968) {
                                                                                                                      break label$59;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 18507) {
                                                                                                                      break label$29;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 28673) {
                                                                                                                      break label$100;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 28675) {
                                                                                                                      break label$108;
                                                                                                                     }
                                                                                                                     if (($0 | 0) == 28676) {
                                                                                                                      break label$36;
                                                                                                                     }
                                                                                                                     if (($0 | 0) != 28677) {
                                                                                                                      if (($0 | 0) == 28678) {
                                                                                                                       break label$38;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32768) {
                                                                                                                       break label$42;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32769) {
                                                                                                                       break label$93;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32771) {
                                                                                                                       break label$43;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32772) {
                                                                                                                       break label$78;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32774) {
                                                                                                                       break label$77;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32776) {
                                                                                                                       break label$39;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32777) {
                                                                                                                       break label$98;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32779) {
                                                                                                                       break label$35;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32780) {
                                                                                                                       break label$6;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32784) {
                                                                                                                       break label$31;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32785) {
                                                                                                                       break label$87;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32788) {
                                                                                                                       break label$94;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32792) {
                                                                                                                       break label$41;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32793) {
                                                                                                                       break label$15;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32801) {
                                                                                                                       break label$37;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32804) {
                                                                                                                       break label$25;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32806) {
                                                                                                                       break label$72;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32822) {
                                                                                                                       break label$76;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32840) {
                                                                                                                       break label$91;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32841) {
                                                                                                                       break label$92;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32843) {
                                                                                                                       break label$23;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32844) {
                                                                                                                       break label$24;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32865) {
                                                                                                                       break label$89;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32870) {
                                                                                                                       break label$73;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32904) {
                                                                                                                       break label$34;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32905) {
                                                                                                                       break label$33;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32968) {
                                                                                                                       break label$32;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32969) {
                                                                                                                       break label$4;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 32993) {
                                                                                                                       break label$81;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 33032) {
                                                                                                                       break label$82;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 33033) {
                                                                                                                       break label$96;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 33035) {
                                                                                                                       break label$95;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 33057) {
                                                                                                                       break label$5;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 33060) {
                                                                                                                       break label$12;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 33097) {
                                                                                                                       break label$27;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 33176) {
                                                                                                                       break label$40;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 33353) {
                                                                                                                       break label$9;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 33356) {
                                                                                                                       break label$10;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 33382) {
                                                                                                                       break label$74;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 33545) {
                                                                                                                       break label$86;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 33569) {
                                                                                                                       break label$11;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 33704) {
                                                                                                                       break label$21;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 33889) {
                                                                                                                       break label$90;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 34400) {
                                                                                                                       break label$80;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 35105) {
                                                                                                                       break label$13;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 37478) {
                                                                                                                       break label$75;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 39177) {
                                                                                                                       break label$3;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 47369) {
                                                                                                                       break label$7;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 49929) {
                                                                                                                       break label$8;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 51489) {
                                                                                                                       break label$14;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 55560) {
                                                                                                                       break label$26;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 61441) {
                                                                                                                       break label$97;
                                                                                                                      }
                                                                                                                      if (($0 | 0) == 61444) {
                                                                                                                       break label$84;
                                                                                                                      }
                                                                                                                      break label$2;
                                                                                                                     }
                                                                                                                     HEAP32[$5 + 516 >> 2] = 0;
                                                                                                                     HEAP32[$5 + 516 >> 2] = jsvNewFromPin(FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]]() & 255);
                                                                                                                     HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 516 >> 2];
                                                                                                                     break label$1;
                                                                                                                    }
                                                                                                                    HEAP32[$5 + 512 >> 2] = 0;
                                                                                                                    $0 = HEAP32[$5 + 536 >> 2];
                                                                                                                    if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                                                     $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                                                    } else {
                                                                                                                     $1 = 0;
                                                                                                                    }
                                                                                                                    FUNCTION_TABLE[$0](jsvGetBool($1) & 1);
                                                                                                                    HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 512 >> 2];
                                                                                                                    break label$1;
                                                                                                                   }
                                                                                                                   HEAP32[$5 + 508 >> 2] = 0;
                                                                                                                   $0 = HEAP32[$5 + 536 >> 2];
                                                                                                                   if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                                                    $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                                                   } else {
                                                                                                                    $1 = 0;
                                                                                                                   }
                                                                                                                   FUNCTION_TABLE[$0](jsvGetFloat($1));
                                                                                                                   HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 508 >> 2];
                                                                                                                   break label$1;
                                                                                                                  }
                                                                                                                  HEAP32[$5 + 504 >> 2] = 0;
                                                                                                                  $0 = HEAP32[$5 + 536 >> 2];
                                                                                                                  if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                                                   $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                                                  } else {
                                                                                                                   $1 = 0;
                                                                                                                  }
                                                                                                                  FUNCTION_TABLE[$0]($1);
                                                                                                                  HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 504 >> 2];
                                                                                                                  break label$1;
                                                                                                                 }
                                                                                                                 HEAP32[$5 + 500 >> 2] = 0;
                                                                                                                 HEAP32[$5 + 500 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]]();
                                                                                                                 HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 500 >> 2];
                                                                                                                 break label$1;
                                                                                                                }
                                                                                                                HEAP32[$5 + 496 >> 2] = 0;
                                                                                                                $0 = HEAP32[$5 + 536 >> 2];
                                                                                                                if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                                                 $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                                                } else {
                                                                                                                 $1 = 0;
                                                                                                                }
                                                                                                                FUNCTION_TABLE[$0](jsvGetInteger($1));
                                                                                                                HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 496 >> 2];
                                                                                                                break label$1;
                                                                                                               }
                                                                                                               HEAP32[$5 + 492 >> 2] = 0;
                                                                                                               HEAP32[$5 + 492 >> 2] = jsvNewFromBool(FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]]() & 1);
                                                                                                               HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 492 >> 2];
                                                                                                               break label$1;
                                                                                                              }
                                                                                                              HEAP32[$5 + 488 >> 2] = 0;
                                                                                                              $1 = HEAP32[$5 + 536 >> 2];
                                                                                                              if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                                               $0 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                                              } else {
                                                                                                               $0 = 0;
                                                                                                              }
                                                                                                              $0 = jsvGetInteger($0);
                                                                                                              if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                                                               $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                                                              } else {
                                                                                                               $2 = 0;
                                                                                                              }
                                                                                                              FUNCTION_TABLE[$1]($0, $2);
                                                                                                              HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 488 >> 2];
                                                                                                              break label$1;
                                                                                                             }
                                                                                                             HEAP32[$5 + 484 >> 2] = 0;
                                                                                                             FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]]();
                                                                                                             HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 484 >> 2];
                                                                                                             break label$1;
                                                                                                            }
                                                                                                            HEAP32[$5 + 480 >> 2] = 0;
                                                                                                            HEAP32[$5 + 480 >> 2] = jsvNewFromBool(FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]]() & 1);
                                                                                                            HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 480 >> 2];
                                                                                                            break label$1;
                                                                                                           }
                                                                                                           HEAP32[$5 + 476 >> 2] = 0;
                                                                                                           $1 = HEAP32[$5 + 536 >> 2];
                                                                                                           if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                                            $0 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                                           } else {
                                                                                                            $0 = 0;
                                                                                                           }
                                                                                                           $0 = jsvGetInteger($0);
                                                                                                           if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                                                            $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                                                           } else {
                                                                                                            $2 = 0;
                                                                                                           }
                                                                                                           FUNCTION_TABLE[$1]($0, jsvGetInteger($2));
                                                                                                           HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 476 >> 2];
                                                                                                           break label$1;
                                                                                                          }
                                                                                                          HEAP32[$5 + 472 >> 2] = 0;
                                                                                                          $1 = HEAP32[$5 + 536 >> 2];
                                                                                                          $0 = $5;
                                                                                                          if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                                           $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                                          } else {
                                                                                                           $2 = 0;
                                                                                                          }
                                                                                                          HEAP32[$0 + 472 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$1](jsvGetInteger($2)) | 0);
                                                                                                          HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 472 >> 2];
                                                                                                          break label$1;
                                                                                                         }
                                                                                                         HEAP32[$5 + 468 >> 2] = 0;
                                                                                                         $1 = HEAP32[$5 + 536 >> 2];
                                                                                                         $0 = $5;
                                                                                                         if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                                          $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                                         } else {
                                                                                                          $2 = 0;
                                                                                                         }
                                                                                                         HEAP32[$0 + 468 >> 2] = FUNCTION_TABLE[$1]($2);
                                                                                                         HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 468 >> 2];
                                                                                                         break label$1;
                                                                                                        }
                                                                                                        HEAP32[$5 + 464 >> 2] = 0;
                                                                                                        $2 = HEAP32[$5 + 536 >> 2];
                                                                                                        $0 = $5;
                                                                                                        if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                                         $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                                        } else {
                                                                                                         $1 = 0;
                                                                                                        }
                                                                                                        $1 = jsvGetInteger($1);
                                                                                                        if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                                                         $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                                                        } else {
                                                                                                         $3 = 0;
                                                                                                        }
                                                                                                        HEAP32[$0 + 464 >> 2] = FUNCTION_TABLE[$2]($1, jsvGetInteger($3));
                                                                                                        HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 464 >> 2];
                                                                                                        break label$1;
                                                                                                       }
                                                                                                       HEAP32[$5 + 460 >> 2] = 0;
                                                                                                       $2 = HEAP32[$5 + 536 >> 2];
                                                                                                       $0 = $5;
                                                                                                       if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                                        $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                                       } else {
                                                                                                        $1 = 0;
                                                                                                       }
                                                                                                       $1 = jsvGetInteger($1);
                                                                                                       if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                                                        $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                                                       } else {
                                                                                                        $3 = 0;
                                                                                                       }
                                                                                                       HEAP32[$0 + 460 >> 2] = FUNCTION_TABLE[$2]($1, jsvGetFloat($3));
                                                                                                       HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 460 >> 2];
                                                                                                       break label$1;
                                                                                                      }
                                                                                                      HEAP32[$5 + 456 >> 2] = 0;
                                                                                                      $1 = HEAP32[$5 + 536 >> 2];
                                                                                                      if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                                       $0 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                                      } else {
                                                                                                       $0 = 0;
                                                                                                      }
                                                                                                      if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                                                       $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                                                      } else {
                                                                                                       $2 = 0;
                                                                                                      }
                                                                                                      FUNCTION_TABLE[$1]($0, $2);
                                                                                                      HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 456 >> 2];
                                                                                                      break label$1;
                                                                                                     }
                                                                                                     HEAP32[$5 + 452 >> 2] = 0;
                                                                                                     $2 = HEAP32[$5 + 536 >> 2];
                                                                                                     $0 = $5;
                                                                                                     if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                                      $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                                     } else {
                                                                                                      $1 = 0;
                                                                                                     }
                                                                                                     if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                                                      $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                                                     } else {
                                                                                                      $3 = 0;
                                                                                                     }
                                                                                                     HEAP32[$0 + 452 >> 2] = FUNCTION_TABLE[$2]($1, $3);
                                                                                                     HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 452 >> 2];
                                                                                                     break label$1;
                                                                                                    }
                                                                                                    HEAP32[$5 + 448 >> 2] = 0;
                                                                                                    HEAP32[$5 + 448 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]]();
                                                                                                    HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 448 >> 2];
                                                                                                    break label$1;
                                                                                                   }
                                                                                                   HEAP32[$5 + 444 >> 2] = 0;
                                                                                                   $0 = $5;
                                                                                                   label$156 : {
                                                                                                    if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                                     $1 = jsvNewArray(HEAP32[$5 + 524 >> 2], HEAP32[$5 + 520 >> 2]);
                                                                                                     break label$156;
                                                                                                    }
                                                                                                    $1 = jsvNewWithFlags(3);
                                                                                                   }
                                                                                                   HEAP32[$0 + 440 >> 2] = $1;
                                                                                                   HEAP32[$5 + 444 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]](HEAP32[$5 + 440 >> 2]);
                                                                                                   jsvUnLock(HEAP32[$5 + 440 >> 2]);
                                                                                                   HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 444 >> 2];
                                                                                                   break label$1;
                                                                                                  }
                                                                                                  HEAP32[$5 + 436 >> 2] = 0;
                                                                                                  $2 = HEAP32[$5 + 536 >> 2];
                                                                                                  $0 = $5;
                                                                                                  $1 = HEAP32[$5 + 528 >> 2];
                                                                                                  if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                                   $3 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                                  } else {
                                                                                                   $3 = 0;
                                                                                                  }
                                                                                                  HEAP32[$0 + 436 >> 2] = FUNCTION_TABLE[$2]($1, $3);
                                                                                                  HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 436 >> 2];
                                                                                                  break label$1;
                                                                                                 }
                                                                                                 HEAP32[$5 + 432 >> 2] = 0;
                                                                                                 HEAP32[$5 + 432 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]](HEAP32[$5 + 528 >> 2]);
                                                                                                 HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 432 >> 2];
                                                                                                 break label$1;
                                                                                                }
                                                                                                HEAP32[$5 + 428 >> 2] = 0;
                                                                                                $3 = HEAP32[$5 + 536 >> 2];
                                                                                                $0 = $5;
                                                                                                $2 = HEAP32[$5 + 528 >> 2];
                                                                                                if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                                 $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                                } else {
                                                                                                 $1 = 0;
                                                                                                }
                                                                                                if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                                                 $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                                                } else {
                                                                                                 $4 = 0;
                                                                                                }
                                                                                                HEAP32[$0 + 428 >> 2] = FUNCTION_TABLE[$3]($2, $1, jsvGetInteger($4));
                                                                                                HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 428 >> 2];
                                                                                                break label$1;
                                                                                               }
                                                                                               HEAP32[$5 + 424 >> 2] = 0;
                                                                                               $3 = HEAP32[$5 + 536 >> 2];
                                                                                               $0 = $5;
                                                                                               $2 = HEAP32[$5 + 528 >> 2];
                                                                                               if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                                $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                               } else {
                                                                                                $1 = 0;
                                                                                               }
                                                                                               if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                                                $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                                               } else {
                                                                                                $4 = 0;
                                                                                               }
                                                                                               HEAP32[$0 + 424 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$3]($2, $1, jsvGetInteger($4)) & 1);
                                                                                               HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 424 >> 2];
                                                                                               break label$1;
                                                                                              }
                                                                                              HEAP32[$5 + 420 >> 2] = 0;
                                                                                              $0 = $5;
                                                                                              label$168 : {
                                                                                               if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                                $1 = jsvNewArray(HEAP32[$5 + 524 >> 2], HEAP32[$5 + 520 >> 2]);
                                                                                                break label$168;
                                                                                               }
                                                                                               $1 = jsvNewWithFlags(3);
                                                                                              }
                                                                                              HEAP32[$0 + 416 >> 2] = $1;
                                                                                              HEAP32[$5 + 420 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]](HEAP32[$5 + 528 >> 2], HEAP32[$5 + 416 >> 2]) | 0);
                                                                                              jsvUnLock(HEAP32[$5 + 416 >> 2]);
                                                                                              HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 420 >> 2];
                                                                                              break label$1;
                                                                                             }
                                                                                             HEAP32[$5 + 412 >> 2] = 0;
                                                                                             HEAP32[$5 + 412 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]](HEAP32[$5 + 528 >> 2]);
                                                                                             HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 412 >> 2];
                                                                                             break label$1;
                                                                                            }
                                                                                            HEAP32[$5 + 408 >> 2] = 0;
                                                                                            $3 = HEAP32[$5 + 536 >> 2];
                                                                                            $0 = $5;
                                                                                            $2 = HEAP32[$5 + 528 >> 2];
                                                                                            if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                             $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                            } else {
                                                                                             $1 = 0;
                                                                                            }
                                                                                            if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                                             $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                                            } else {
                                                                                             $4 = 0;
                                                                                            }
                                                                                            HEAP32[$0 + 408 >> 2] = FUNCTION_TABLE[$3]($2, $1, $4);
                                                                                            HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 408 >> 2];
                                                                                            break label$1;
                                                                                           }
                                                                                           HEAP32[$5 + 404 >> 2] = 0;
                                                                                           $2 = HEAP32[$5 + 536 >> 2];
                                                                                           $1 = HEAP32[$5 + 528 >> 2];
                                                                                           if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                            $0 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                           } else {
                                                                                            $0 = 0;
                                                                                           }
                                                                                           if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                                            $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                                           } else {
                                                                                            $3 = 0;
                                                                                           }
                                                                                           FUNCTION_TABLE[$2]($1, $0, $3);
                                                                                           HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 404 >> 2];
                                                                                           break label$1;
                                                                                          }
                                                                                          HEAP32[$5 + 400 >> 2] = 0;
                                                                                          $0 = $5;
                                                                                          label$178 : {
                                                                                           if (HEAP32[$5 + 520 >> 2] > 2) {
                                                                                            $1 = jsvNewArray(HEAP32[$5 + 524 >> 2] + 8 | 0, HEAP32[$5 + 520 >> 2] - 2 | 0);
                                                                                            break label$178;
                                                                                           }
                                                                                           $1 = jsvNewWithFlags(3);
                                                                                          }
                                                                                          HEAP32[$0 + 396 >> 2] = $1;
                                                                                          $3 = HEAP32[$5 + 536 >> 2];
                                                                                          $0 = $5;
                                                                                          $1 = HEAP32[$5 + 528 >> 2];
                                                                                          if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                           $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                          } else {
                                                                                           $2 = 0;
                                                                                          }
                                                                                          $2 = jsvGetInteger($2);
                                                                                          if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                                           $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                                          } else {
                                                                                           $4 = 0;
                                                                                          }
                                                                                          HEAP32[$0 + 400 >> 2] = FUNCTION_TABLE[$3]($1, $2, $4, HEAP32[$5 + 396 >> 2]);
                                                                                          jsvUnLock(HEAP32[$5 + 396 >> 2]);
                                                                                          HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 400 >> 2];
                                                                                          break label$1;
                                                                                         }
                                                                                         HEAP32[$5 + 392 >> 2] = 0;
                                                                                         $3 = HEAP32[$5 + 536 >> 2];
                                                                                         $0 = $5;
                                                                                         $1 = HEAP32[$5 + 528 >> 2];
                                                                                         if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                          $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                         } else {
                                                                                          $2 = 0;
                                                                                         }
                                                                                         $2 = jsvGetInteger($2);
                                                                                         if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                                          $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                                         } else {
                                                                                          $4 = 0;
                                                                                         }
                                                                                         HEAP32[$0 + 392 >> 2] = FUNCTION_TABLE[$3]($1, $2, $4);
                                                                                         HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 392 >> 2];
                                                                                         break label$1;
                                                                                        }
                                                                                        HEAP32[$5 + 388 >> 2] = 0;
                                                                                        $1 = HEAP32[$5 + 536 >> 2];
                                                                                        $0 = $5;
                                                                                        if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                         $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                        } else {
                                                                                         $2 = 0;
                                                                                        }
                                                                                        HEAP32[$0 + 388 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$1]($2) & 1);
                                                                                        HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 388 >> 2];
                                                                                        break label$1;
                                                                                       }
                                                                                       HEAP32[$5 + 384 >> 2] = 0;
                                                                                       $0 = $5;
                                                                                       label$190 : {
                                                                                        if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                         $1 = jsvNewArray(HEAP32[$5 + 524 >> 2], HEAP32[$5 + 520 >> 2]);
                                                                                         break label$190;
                                                                                        }
                                                                                        $1 = jsvNewWithFlags(3);
                                                                                       }
                                                                                       HEAP32[$0 + 380 >> 2] = $1;
                                                                                       HEAP32[$5 + 384 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]](HEAP32[$5 + 528 >> 2], HEAP32[$5 + 380 >> 2]);
                                                                                       jsvUnLock(HEAP32[$5 + 380 >> 2]);
                                                                                       HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 384 >> 2];
                                                                                       break label$1;
                                                                                      }
                                                                                      HEAP32[$5 + 376 >> 2] = 0;
                                                                                      $4 = HEAP32[$5 + 536 >> 2];
                                                                                      $0 = $5;
                                                                                      $2 = HEAP32[$5 + 528 >> 2];
                                                                                      if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                       $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                      } else {
                                                                                       $1 = 0;
                                                                                      }
                                                                                      if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                                       $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                                      } else {
                                                                                       $3 = 0;
                                                                                      }
                                                                                      $3 = jsvGetInteger($3);
                                                                                      if (HEAP32[$5 + 520 >> 2] > 2) {
                                                                                       $6 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                                                                                      } else {
                                                                                       $6 = 0;
                                                                                      }
                                                                                      HEAP32[$0 + 376 >> 2] = FUNCTION_TABLE[$4]($2, $1, $3, $6);
                                                                                      HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 376 >> 2];
                                                                                      break label$1;
                                                                                     }
                                                                                     HEAP32[$5 + 372 >> 2] = 0;
                                                                                     $1 = HEAP32[$5 + 536 >> 2];
                                                                                     $0 = $5;
                                                                                     if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                      $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                     } else {
                                                                                      $2 = 0;
                                                                                     }
                                                                                     HEAP32[$0 + 372 >> 2] = FUNCTION_TABLE[$1](jsvGetInteger($2));
                                                                                     HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 372 >> 2];
                                                                                     break label$1;
                                                                                    }
                                                                                    HEAP32[$5 + 368 >> 2] = 0;
                                                                                    HEAP32[$5 + 368 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]](HEAP32[$5 + 528 >> 2]) | 0);
                                                                                    HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 368 >> 2];
                                                                                    break label$1;
                                                                                   }
                                                                                   HEAP32[$5 + 364 >> 2] = 0;
                                                                                   $3 = HEAP32[$5 + 536 >> 2];
                                                                                   $0 = $5;
                                                                                   if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                    $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                   } else {
                                                                                    $1 = 0;
                                                                                   }
                                                                                   if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                                    $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                                   } else {
                                                                                    $2 = 0;
                                                                                   }
                                                                                   $2 = jsvGetInteger($2);
                                                                                   if (HEAP32[$5 + 520 >> 2] > 2) {
                                                                                    $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                                                                                   } else {
                                                                                    $4 = 0;
                                                                                   }
                                                                                   HEAP32[$0 + 364 >> 2] = FUNCTION_TABLE[$3]($1, $2, jsvGetInteger($4));
                                                                                   HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 364 >> 2];
                                                                                   break label$1;
                                                                                  }
                                                                                  HEAP32[$5 + 360 >> 2] = 0;
                                                                                  $2 = HEAP32[$5 + 536 >> 2];
                                                                                  $1 = HEAP32[$5 + 528 >> 2];
                                                                                  if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                   $0 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                  } else {
                                                                                   $0 = 0;
                                                                                  }
                                                                                  if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                                   $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                                  } else {
                                                                                   $3 = 0;
                                                                                  }
                                                                                  FUNCTION_TABLE[$2]($1, $0, jsvGetInteger($3));
                                                                                  HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 360 >> 2];
                                                                                  break label$1;
                                                                                 }
                                                                                 HEAP32[$5 + 356 >> 2] = 0;
                                                                                 $3 = HEAP32[$5 + 536 >> 2];
                                                                                 $0 = $5;
                                                                                 $1 = HEAP32[$5 + 528 >> 2];
                                                                                 if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                  $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                 } else {
                                                                                  $2 = 0;
                                                                                 }
                                                                                 $2 = jsvGetInteger($2);
                                                                                 if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                                  $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                                 } else {
                                                                                  $4 = 0;
                                                                                 }
                                                                                 HEAP32[$0 + 356 >> 2] = FUNCTION_TABLE[$3]($1, $2, jsvGetBool($4) & 1);
                                                                                 HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 356 >> 2];
                                                                                 break label$1;
                                                                                }
                                                                                HEAP32[$5 + 352 >> 2] = 0;
                                                                                $3 = HEAP32[$5 + 536 >> 2];
                                                                                $1 = HEAP32[$5 + 528 >> 2];
                                                                                if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                                 $0 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                                } else {
                                                                                 $0 = 0;
                                                                                }
                                                                                $2 = jsvGetInteger($0);
                                                                                if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                                 $0 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                                } else {
                                                                                 $0 = 0;
                                                                                }
                                                                                if (HEAP32[$5 + 520 >> 2] > 2) {
                                                                                 $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                                                                                } else {
                                                                                 $4 = 0;
                                                                                }
                                                                                FUNCTION_TABLE[$3]($1, $2, $0, jsvGetBool($4) & 1);
                                                                                HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 352 >> 2];
                                                                                break label$1;
                                                                               }
                                                                               HEAP32[$5 + 348 >> 2] = 0;
                                                                               HEAP32[$5 + 348 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]]());
                                                                               HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 348 >> 2];
                                                                               break label$1;
                                                                              }
                                                                              HEAP32[$5 + 344 >> 2] = 0;
                                                                              HEAP32[$5 + 344 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]](HEAP32[$5 + 528 >> 2]) | 0);
                                                                              HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 344 >> 2];
                                                                              break label$1;
                                                                             }
                                                                             HEAP32[$5 + 340 >> 2] = 0;
                                                                             HEAP32[$5 + 340 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]](HEAP32[$5 + 528 >> 2]));
                                                                             HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 340 >> 2];
                                                                             break label$1;
                                                                            }
                                                                            HEAP32[$5 + 336 >> 2] = 0;
                                                                            $2 = HEAP32[$5 + 536 >> 2];
                                                                            $0 = $5;
                                                                            $1 = HEAP32[$5 + 528 >> 2];
                                                                            if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                             $3 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                            } else {
                                                                             $3 = 0;
                                                                            }
                                                                            HEAP32[$0 + 336 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$2]($1, jsvGetFloat($3)));
                                                                            HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 336 >> 2];
                                                                            break label$1;
                                                                           }
                                                                           HEAP32[$5 + 332 >> 2] = 0;
                                                                           $0 = HEAP32[$5 + 536 >> 2];
                                                                           $1 = $5;
                                                                           $4 = HEAP32[$5 + 528 >> 2];
                                                                           if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                            $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                           } else {
                                                                            $2 = 0;
                                                                           }
                                                                           $6 = jsvGetInteger($2);
                                                                           if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                            $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                           } else {
                                                                            $2 = 0;
                                                                           }
                                                                           if (HEAP32[$5 + 520 >> 2] > 2) {
                                                                            $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                                                                           } else {
                                                                            $3 = 0;
                                                                           }
                                                                           if (HEAP32[$5 + 520 >> 2] > 3) {
                                                                            $7 = HEAP32[HEAP32[$5 + 524 >> 2] + 12 >> 2];
                                                                           } else {
                                                                            $7 = 0;
                                                                           }
                                                                           HEAP32[$1 + 332 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$0]($4, $6, $2, $3, $7));
                                                                           HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 332 >> 2];
                                                                           break label$1;
                                                                          }
                                                                          HEAP32[$5 + 328 >> 2] = 0;
                                                                          $4 = HEAP32[$5 + 536 >> 2];
                                                                          $0 = $5;
                                                                          $2 = HEAP32[$5 + 528 >> 2];
                                                                          if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                           $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                          } else {
                                                                           $1 = 0;
                                                                          }
                                                                          $3 = jsvGetInteger($1);
                                                                          if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                           $1 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                          } else {
                                                                           $1 = 0;
                                                                          }
                                                                          if (HEAP32[$5 + 520 >> 2] > 2) {
                                                                           $6 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                                                                          } else {
                                                                           $6 = 0;
                                                                          }
                                                                          HEAP32[$0 + 328 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$4]($2, $3, $1, $6));
                                                                          HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 328 >> 2];
                                                                          break label$1;
                                                                         }
                                                                         HEAP32[$5 + 324 >> 2] = 0;
                                                                         $3 = HEAP32[$5 + 536 >> 2];
                                                                         $0 = $5;
                                                                         $1 = HEAP32[$5 + 528 >> 2];
                                                                         if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                          $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                         } else {
                                                                          $2 = 0;
                                                                         }
                                                                         $2 = jsvGetInteger($2);
                                                                         if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                          $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                         } else {
                                                                          $4 = 0;
                                                                         }
                                                                         HEAP32[$0 + 324 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$3]($1, $2, $4));
                                                                         HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 324 >> 2];
                                                                         break label$1;
                                                                        }
                                                                        HEAP32[$5 + 320 >> 2] = 0;
                                                                        $2 = HEAP32[$5 + 536 >> 2];
                                                                        $0 = $5;
                                                                        $1 = HEAP32[$5 + 528 >> 2];
                                                                        if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                         $3 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                        } else {
                                                                         $3 = 0;
                                                                        }
                                                                        HEAP32[$0 + 320 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$2]($1, jsvGetInteger($3)));
                                                                        HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 320 >> 2];
                                                                        break label$1;
                                                                       }
                                                                       HEAP32[$5 + 316 >> 2] = 0;
                                                                       $1 = HEAP32[$5 + 536 >> 2];
                                                                       $0 = $5;
                                                                       if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                        $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                       } else {
                                                                        $2 = 0;
                                                                       }
                                                                       HEAP32[$0 + 316 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$1]($2));
                                                                       HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 316 >> 2];
                                                                       break label$1;
                                                                      }
                                                                      HEAP32[$5 + 312 >> 2] = 0;
                                                                      $3 = HEAP32[$5 + 536 >> 2];
                                                                      $0 = $5;
                                                                      if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                       $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                      } else {
                                                                       $1 = 0;
                                                                      }
                                                                      $2 = jsvGetInteger($1);
                                                                      if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                       $1 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                      } else {
                                                                       $1 = 0;
                                                                      }
                                                                      if (HEAP32[$5 + 520 >> 2] > 2) {
                                                                       $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                                                                      } else {
                                                                       $4 = 0;
                                                                      }
                                                                      HEAP32[$0 + 312 >> 2] = FUNCTION_TABLE[$3]($2, $1, $4);
                                                                      HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 312 >> 2];
                                                                      break label$1;
                                                                     }
                                                                     HEAP32[$5 + 308 >> 2] = 0;
                                                                     $1 = HEAP32[$5 + 536 >> 2];
                                                                     $0 = $5;
                                                                     if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                      $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                     } else {
                                                                      $2 = 0;
                                                                     }
                                                                     $8 = jsvGetFloat($2);
                                                                     if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                      $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                     } else {
                                                                      $2 = 0;
                                                                     }
                                                                     $9 = jsvGetFloat($2);
                                                                     if (HEAP32[$5 + 520 >> 2] > 2) {
                                                                      $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                                                                     } else {
                                                                      $2 = 0;
                                                                     }
                                                                     HEAP32[$0 + 308 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$1]($8, $9, jsvGetFloat($2)));
                                                                     HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 308 >> 2];
                                                                     break label$1;
                                                                    }
                                                                    HEAP32[$5 + 304 >> 2] = 0;
                                                                    $2 = HEAP32[$5 + 536 >> 2];
                                                                    $0 = $5;
                                                                    if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                     $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                    } else {
                                                                     $1 = 0;
                                                                    }
                                                                    if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                     $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                    } else {
                                                                     $3 = 0;
                                                                    }
                                                                    HEAP32[$0 + 304 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$2]($1, jsvGetFloat($3)));
                                                                    HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 304 >> 2];
                                                                    break label$1;
                                                                   }
                                                                   HEAP32[$5 + 300 >> 2] = 0;
                                                                   $3 = HEAP32[$5 + 536 >> 2];
                                                                   $0 = $5;
                                                                   if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                    $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                   } else {
                                                                    $1 = 0;
                                                                   }
                                                                   if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                    $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                   } else {
                                                                    $2 = 0;
                                                                   }
                                                                   if (HEAP32[$5 + 520 >> 2] > 2) {
                                                                    $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                                                                   } else {
                                                                    $4 = 0;
                                                                   }
                                                                   HEAP32[$0 + 300 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$3]($1, $2, jsvGetInteger($4)));
                                                                   HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 300 >> 2];
                                                                   break label$1;
                                                                  }
                                                                  HEAP32[$5 + 296 >> 2] = 0;
                                                                  $2 = HEAP32[$5 + 536 >> 2];
                                                                  if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                   $0 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                  } else {
                                                                   $0 = 0;
                                                                  }
                                                                  if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                   $1 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                  } else {
                                                                   $1 = 0;
                                                                  }
                                                                  if (HEAP32[$5 + 520 >> 2] > 2) {
                                                                   $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                                                                  } else {
                                                                   $3 = 0;
                                                                  }
                                                                  FUNCTION_TABLE[$2]($0, $1, jsvGetBool($3) & 1);
                                                                  HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 296 >> 2];
                                                                  break label$1;
                                                                 }
                                                                 HEAP32[$5 + 292 >> 2] = 0;
                                                                 $0 = HEAP32[$5 + 536 >> 2];
                                                                 if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                  $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                 } else {
                                                                  $1 = 0;
                                                                 }
                                                                 $8 = jsvGetFloat($1);
                                                                 if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                  $1 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                 } else {
                                                                  $1 = 0;
                                                                 }
                                                                 FUNCTION_TABLE[$0]($8, $1);
                                                                 HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 292 >> 2];
                                                                 break label$1;
                                                                }
                                                                HEAP32[$5 + 288 >> 2] = 0;
                                                                $2 = HEAP32[$5 + 536 >> 2];
                                                                if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                 $0 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                                } else {
                                                                 $0 = 0;
                                                                }
                                                                if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                 $1 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                                } else {
                                                                 $1 = 0;
                                                                }
                                                                if (HEAP32[$5 + 520 >> 2] > 2) {
                                                                 $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                                                                } else {
                                                                 $3 = 0;
                                                                }
                                                                FUNCTION_TABLE[$2]($0, $1, $3);
                                                                HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 288 >> 2];
                                                                break label$1;
                                                               }
                                                               HEAP32[$5 + 284 >> 2] = 0;
                                                               $1 = HEAP32[$5 + 536 >> 2];
                                                               if (HEAP32[$5 + 520 >> 2] > 0) {
                                                                $0 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                               } else {
                                                                $0 = 0;
                                                               }
                                                               if (HEAP32[$5 + 520 >> 2] > 1) {
                                                                $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                               } else {
                                                                $2 = 0;
                                                               }
                                                               FUNCTION_TABLE[$1]($0, jsvGetBool($2) & 1);
                                                               HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 284 >> 2];
                                                               break label$1;
                                                              }
                                                              HEAP32[$5 + 280 >> 2] = 0;
                                                              $1 = HEAP32[$5 + 536 >> 2];
                                                              $0 = $5;
                                                              if (HEAP32[$5 + 520 >> 2] > 0) {
                                                               $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                              } else {
                                                               $2 = 0;
                                                              }
                                                              HEAP32[$0 + 280 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$1]($2) | 0);
                                                              HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 280 >> 2];
                                                              break label$1;
                                                             }
                                                             HEAP32[$5 + 276 >> 2] = 0;
                                                             $2 = HEAP32[$5 + 536 >> 2];
                                                             $0 = $5;
                                                             if (HEAP32[$5 + 520 >> 2] > 0) {
                                                              $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                             } else {
                                                              $1 = 0;
                                                             }
                                                             if (HEAP32[$5 + 520 >> 2] > 1) {
                                                              $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                             } else {
                                                              $3 = 0;
                                                             }
                                                             HEAP32[$0 + 276 >> 2] = FUNCTION_TABLE[$2]($1, jsvGetInteger($3));
                                                             HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 276 >> 2];
                                                             break label$1;
                                                            }
                                                            HEAP32[$5 + 272 >> 2] = 0;
                                                            $2 = HEAP32[$5 + 536 >> 2];
                                                            $0 = $5;
                                                            if (HEAP32[$5 + 520 >> 2] > 0) {
                                                             $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                            } else {
                                                             $1 = 0;
                                                            }
                                                            if (HEAP32[$5 + 520 >> 2] > 1) {
                                                             $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                            } else {
                                                             $3 = 0;
                                                            }
                                                            HEAP32[$0 + 272 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$2]($1, jsvGetBool($3) & 1) | 0);
                                                            HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 272 >> 2];
                                                            break label$1;
                                                           }
                                                           HEAP32[$5 + 268 >> 2] = 0;
                                                           $3 = HEAP32[$5 + 536 >> 2];
                                                           if (HEAP32[$5 + 520 >> 2] > 0) {
                                                            $0 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                           } else {
                                                            $0 = 0;
                                                           }
                                                           if (HEAP32[$5 + 520 >> 2] > 1) {
                                                            $1 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                           } else {
                                                            $1 = 0;
                                                           }
                                                           if (HEAP32[$5 + 520 >> 2] > 2) {
                                                            $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                                                           } else {
                                                            $2 = 0;
                                                           }
                                                           if (HEAP32[$5 + 520 >> 2] > 3) {
                                                            $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 12 >> 2];
                                                           } else {
                                                            $4 = 0;
                                                           }
                                                           FUNCTION_TABLE[$3]($0, $1, $2, jsvGetInteger($4));
                                                           HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 268 >> 2];
                                                           break label$1;
                                                          }
                                                          HEAP32[$5 + 264 >> 2] = 0;
                                                          $3 = HEAP32[$5 + 536 >> 2];
                                                          $0 = $5;
                                                          if (HEAP32[$5 + 520 >> 2] > 0) {
                                                           $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                          } else {
                                                           $1 = 0;
                                                          }
                                                          if (HEAP32[$5 + 520 >> 2] > 1) {
                                                           $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                          } else {
                                                           $2 = 0;
                                                          }
                                                          if (HEAP32[$5 + 520 >> 2] > 2) {
                                                           $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                                                          } else {
                                                           $4 = 0;
                                                          }
                                                          HEAP32[$0 + 264 >> 2] = FUNCTION_TABLE[$3]($1, $2, jsvGetBool($4) & 1);
                                                          HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 264 >> 2];
                                                          break label$1;
                                                         }
                                                         HEAP32[$5 + 260 >> 2] = 0;
                                                         HEAP32[$5 + 260 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]]() | 0);
                                                         HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 260 >> 2];
                                                         break label$1;
                                                        }
                                                        HEAP32[$5 + 256 >> 2] = 0;
                                                        $1 = HEAP32[$5 + 536 >> 2];
                                                        $0 = $5;
                                                        if (HEAP32[$5 + 520 >> 2] > 0) {
                                                         $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                        } else {
                                                         $2 = 0;
                                                        }
                                                        $8 = jsvGetFloat($2);
                                                        if (HEAP32[$5 + 520 >> 2] > 1) {
                                                         $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                        } else {
                                                         $2 = 0;
                                                        }
                                                        $9 = jsvGetFloat($2);
                                                        if (HEAP32[$5 + 520 >> 2] > 2) {
                                                         $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                                                        } else {
                                                         $2 = 0;
                                                        }
                                                        $10 = jsvGetFloat($2);
                                                        if (HEAP32[$5 + 520 >> 2] > 3) {
                                                         $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 12 >> 2];
                                                        } else {
                                                         $2 = 0;
                                                        }
                                                        HEAP32[$0 + 256 >> 2] = FUNCTION_TABLE[$1]($8, $9, $10, jsvGetBool($2) & 1);
                                                        HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 256 >> 2];
                                                        break label$1;
                                                       }
                                                       HEAP32[$5 + 252 >> 2] = 0;
                                                       $0 = $5;
                                                       label$318 : {
                                                        if (HEAP32[$5 + 520 >> 2] > 1) {
                                                         $1 = jsvNewArray(HEAP32[$5 + 524 >> 2] + 4 | 0, HEAP32[$5 + 520 >> 2] - 1 | 0);
                                                         break label$318;
                                                        }
                                                        $1 = jsvNewWithFlags(3);
                                                       }
                                                       HEAP32[$0 + 248 >> 2] = $1;
                                                       $0 = HEAP32[$5 + 536 >> 2];
                                                       if (HEAP32[$5 + 520 >> 2] > 0) {
                                                        $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                       } else {
                                                        $1 = 0;
                                                       }
                                                       FUNCTION_TABLE[$0]($1, HEAP32[$5 + 248 >> 2]);
                                                       jsvUnLock(HEAP32[$5 + 248 >> 2]);
                                                       HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 252 >> 2];
                                                       break label$1;
                                                      }
                                                      HEAP32[$5 + 244 >> 2] = 0;
                                                      $1 = HEAP32[$5 + 536 >> 2];
                                                      if (HEAP32[$5 + 520 >> 2] > 0) {
                                                       $0 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                      } else {
                                                       $0 = 0;
                                                      }
                                                      if (HEAP32[$5 + 520 >> 2] > 1) {
                                                       $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                      } else {
                                                       $2 = 0;
                                                      }
                                                      FUNCTION_TABLE[$1]($0, jsvGetInteger($2));
                                                      HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 244 >> 2];
                                                      break label$1;
                                                     }
                                                     HEAP32[$5 + 240 >> 2] = 0;
                                                     $0 = $5;
                                                     label$326 : {
                                                      if (HEAP32[$5 + 520 >> 2] > 0) {
                                                       $1 = jsvNewArray(HEAP32[$5 + 524 >> 2], HEAP32[$5 + 520 >> 2]);
                                                       break label$326;
                                                      }
                                                      $1 = jsvNewWithFlags(3);
                                                     }
                                                     HEAP32[$0 + 236 >> 2] = $1;
                                                     FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]](HEAP32[$5 + 236 >> 2]);
                                                     jsvUnLock(HEAP32[$5 + 236 >> 2]);
                                                     HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 240 >> 2];
                                                     break label$1;
                                                    }
                                                    HEAP32[$5 + 232 >> 2] = 0;
                                                    $0 = $5;
                                                    label$328 : {
                                                     if (HEAP32[$5 + 520 >> 2] > 2) {
                                                      $1 = jsvNewArray(HEAP32[$5 + 524 >> 2] + 8 | 0, HEAP32[$5 + 520 >> 2] - 2 | 0);
                                                      break label$328;
                                                     }
                                                     $1 = jsvNewWithFlags(3);
                                                    }
                                                    HEAP32[$0 + 228 >> 2] = $1;
                                                    $2 = HEAP32[$5 + 536 >> 2];
                                                    $0 = $5;
                                                    if (HEAP32[$5 + 520 >> 2] > 0) {
                                                     $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                    } else {
                                                     $1 = 0;
                                                    }
                                                    if (HEAP32[$5 + 520 >> 2] > 1) {
                                                     $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                    } else {
                                                     $3 = 0;
                                                    }
                                                    HEAP32[$0 + 232 >> 2] = FUNCTION_TABLE[$2]($1, jsvGetFloat($3), HEAP32[$5 + 228 >> 2]);
                                                    jsvUnLock(HEAP32[$5 + 228 >> 2]);
                                                    HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 232 >> 2];
                                                    break label$1;
                                                   }
                                                   HEAP32[$5 + 224 >> 2] = 0;
                                                   $1 = HEAP32[$5 + 536 >> 2];
                                                   if (HEAP32[$5 + 520 >> 2] > 0) {
                                                    $0 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                   } else {
                                                    $0 = 0;
                                                   }
                                                   if (HEAP32[$5 + 520 >> 2] > 1) {
                                                    $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                   } else {
                                                    $2 = 0;
                                                   }
                                                   FUNCTION_TABLE[$1]($0, jsvGetFloat($2));
                                                   HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 224 >> 2];
                                                   break label$1;
                                                  }
                                                  HEAP32[$5 + 220 >> 2] = 0;
                                                  $1 = HEAP32[$5 + 536 >> 2];
                                                  $0 = $5;
                                                  if (HEAP32[$5 + 520 >> 2] > 0) {
                                                   $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                  } else {
                                                   $2 = 0;
                                                  }
                                                  HEAP32[$0 + 220 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$1](jshGetPinFromVar($2) & 255));
                                                  HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 220 >> 2];
                                                  break label$1;
                                                 }
                                                 HEAP32[$5 + 216 >> 2] = 0;
                                                 $1 = HEAP32[$5 + 536 >> 2];
                                                 if (HEAP32[$5 + 520 >> 2] > 0) {
                                                  $0 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                 } else {
                                                  $0 = 0;
                                                 }
                                                 $0 = jshGetPinFromVar($0) & 255;
                                                 if (HEAP32[$5 + 520 >> 2] > 1) {
                                                  $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                 } else {
                                                  $2 = 0;
                                                 }
                                                 $8 = jsvGetFloat($2);
                                                 if (HEAP32[$5 + 520 >> 2] > 2) {
                                                  $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                                                 } else {
                                                  $2 = 0;
                                                 }
                                                 FUNCTION_TABLE[$1]($0, $8, $2);
                                                 HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 216 >> 2];
                                                 break label$1;
                                                }
                                                HEAP32[$5 + 212 >> 2] = 0;
                                                $2 = HEAP32[$5 + 536 >> 2];
                                                if (HEAP32[$5 + 520 >> 2] > 0) {
                                                 $0 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                                } else {
                                                 $0 = 0;
                                                }
                                                $0 = jshGetPinFromVar($0) & 255;
                                                if (HEAP32[$5 + 520 >> 2] > 1) {
                                                 $1 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                                } else {
                                                 $1 = 0;
                                                }
                                                $1 = jsvGetBool($1) & 1;
                                                if (HEAP32[$5 + 520 >> 2] > 2) {
                                                 $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                                                } else {
                                                 $3 = 0;
                                                }
                                                FUNCTION_TABLE[$2]($0, $1, $3);
                                                HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 212 >> 2];
                                                break label$1;
                                               }
                                               HEAP32[$5 + 208 >> 2] = 0;
                                               $2 = HEAP32[$5 + 536 >> 2];
                                               if (HEAP32[$5 + 520 >> 2] > 0) {
                                                $0 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                               } else {
                                                $0 = 0;
                                               }
                                               $1 = jshGetPinFromVar($0) & 255;
                                               if (HEAP32[$5 + 520 >> 2] > 1) {
                                                $0 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                               } else {
                                                $0 = 0;
                                               }
                                               if (HEAP32[$5 + 520 >> 2] > 2) {
                                                $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                                               } else {
                                                $3 = 0;
                                               }
                                               FUNCTION_TABLE[$2]($1, $0, jsvGetBool($3) & 1);
                                               HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 208 >> 2];
                                               break label$1;
                                              }
                                              HEAP32[$5 + 204 >> 2] = 0;
                                              $1 = HEAP32[$5 + 536 >> 2];
                                              $0 = $5;
                                              if (HEAP32[$5 + 520 >> 2] > 0) {
                                               $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                              } else {
                                               $2 = 0;
                                              }
                                              HEAP32[$0 + 204 >> 2] = FUNCTION_TABLE[$1](jshGetPinFromVar($2) & 255);
                                              HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 204 >> 2];
                                              break label$1;
                                             }
                                             HEAP32[$5 + 200 >> 2] = 0;
                                             $3 = HEAP32[$5 + 536 >> 2];
                                             $0 = $5;
                                             if (HEAP32[$5 + 520 >> 2] > 0) {
                                              $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                             } else {
                                              $1 = 0;
                                             }
                                             if (HEAP32[$5 + 520 >> 2] > 1) {
                                              $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                             } else {
                                              $2 = 0;
                                             }
                                             $2 = jshGetPinFromVar($2) & 255;
                                             if (HEAP32[$5 + 520 >> 2] > 2) {
                                              $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                                             } else {
                                              $4 = 0;
                                             }
                                             HEAP32[$0 + 200 >> 2] = FUNCTION_TABLE[$3]($1, $2, $4);
                                             HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 200 >> 2];
                                             break label$1;
                                            }
                                            HEAP32[$5 + 196 >> 2] = 0;
                                            $3 = HEAP32[$5 + 536 >> 2];
                                            $0 = $5;
                                            if (HEAP32[$5 + 520 >> 2] > 0) {
                                             $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                            } else {
                                             $1 = 0;
                                            }
                                            if (HEAP32[$5 + 520 >> 2] > 1) {
                                             $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                            } else {
                                             $2 = 0;
                                            }
                                            if (HEAP32[$5 + 520 >> 2] > 2) {
                                             $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                                            } else {
                                             $4 = 0;
                                            }
                                            HEAP32[$0 + 196 >> 2] = FUNCTION_TABLE[$3]($1, $2, $4);
                                            HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 196 >> 2];
                                            break label$1;
                                           }
                                           HEAP32[$5 + 192 >> 2] = 0;
                                           HEAP32[$5 + 192 >> 2] = jsvNewFromBool(FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]](HEAP32[$5 + 528 >> 2]) & 1);
                                           HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 192 >> 2];
                                           break label$1;
                                          }
                                          HEAP32[$5 + 188 >> 2] = 0;
                                          FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]](HEAP32[$5 + 528 >> 2]);
                                          HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 188 >> 2];
                                          break label$1;
                                         }
                                         HEAP32[$5 + 184 >> 2] = 0;
                                         $1 = HEAP32[$5 + 536 >> 2];
                                         $0 = HEAP32[$5 + 528 >> 2];
                                         if (HEAP32[$5 + 520 >> 2] > 0) {
                                          $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                         } else {
                                          $2 = 0;
                                         }
                                         FUNCTION_TABLE[$1]($0, jsvGetBool($2) & 1);
                                         HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 184 >> 2];
                                         break label$1;
                                        }
                                        HEAP32[$5 + 180 >> 2] = 0;
                                        $2 = HEAP32[$5 + 536 >> 2];
                                        $0 = HEAP32[$5 + 528 >> 2];
                                        if (HEAP32[$5 + 520 >> 2] > 0) {
                                         $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                        } else {
                                         $1 = 0;
                                        }
                                        $1 = jsvGetBool($1) & 1;
                                        if (HEAP32[$5 + 520 >> 2] > 1) {
                                         $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                        } else {
                                         $3 = 0;
                                        }
                                        FUNCTION_TABLE[$2]($0, $1, jsvGetFloat($3));
                                        HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 180 >> 2];
                                        break label$1;
                                       }
                                       HEAP32[$5 + 176 >> 2] = 0;
                                       $1 = HEAP32[$5 + 536 >> 2];
                                       $0 = HEAP32[$5 + 528 >> 2];
                                       if (HEAP32[$5 + 520 >> 2] > 0) {
                                        $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                       } else {
                                        $2 = 0;
                                       }
                                       FUNCTION_TABLE[$1]($0, $2);
                                       HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 176 >> 2];
                                       break label$1;
                                      }
                                      HEAP32[$5 + 172 >> 2] = 0;
                                      HEAP32[$5 + 172 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]]());
                                      HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 172 >> 2];
                                      break label$1;
                                     }
                                     HEAP32[$5 + 168 >> 2] = 0;
                                     $2 = HEAP32[$5 + 536 >> 2];
                                     $0 = $5;
                                     $1 = HEAP32[$5 + 528 >> 2];
                                     if (HEAP32[$5 + 520 >> 2] > 0) {
                                      $3 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                     } else {
                                      $3 = 0;
                                     }
                                     HEAP32[$0 + 168 >> 2] = FUNCTION_TABLE[$2]($1, jsvGetInteger($3));
                                     HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 168 >> 2];
                                     break label$1;
                                    }
                                    HEAP32[$5 + 164 >> 2] = 0;
                                    HEAP32[$5 + 164 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]]() | 0);
                                    HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 164 >> 2];
                                    break label$1;
                                   }
                                   HEAP32[$5 + 160 >> 2] = 0;
                                   $2 = HEAP32[$5 + 536 >> 2];
                                   $0 = $5;
                                   $1 = HEAP32[$5 + 528 >> 2];
                                   if (HEAP32[$5 + 520 >> 2] > 0) {
                                    $3 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                   } else {
                                    $3 = 0;
                                   }
                                   HEAP32[$0 + 160 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$2]($1, $3) & 1);
                                   HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 160 >> 2];
                                   break label$1;
                                  }
                                  HEAP32[$5 + 156 >> 2] = 0;
                                  $0 = $5;
                                  label$384 : {
                                   if (HEAP32[$5 + 520 >> 2] > 1) {
                                    $1 = jsvNewArray(HEAP32[$5 + 524 >> 2] + 4 | 0, HEAP32[$5 + 520 >> 2] - 1 | 0);
                                    break label$384;
                                   }
                                   $1 = jsvNewWithFlags(3);
                                  }
                                  HEAP32[$0 + 152 >> 2] = $1;
                                  $1 = HEAP32[$5 + 536 >> 2];
                                  $0 = HEAP32[$5 + 528 >> 2];
                                  if (HEAP32[$5 + 520 >> 2] > 0) {
                                   $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                  } else {
                                   $2 = 0;
                                  }
                                  FUNCTION_TABLE[$1]($0, $2, HEAP32[$5 + 152 >> 2]);
                                  jsvUnLock(HEAP32[$5 + 152 >> 2]);
                                  HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 156 >> 2];
                                  break label$1;
                                 }
                                 HEAP32[$5 + 148 >> 2] = 0;
                                 $0 = $5;
                                 label$388 : {
                                  if (HEAP32[$5 + 520 >> 2] > 1) {
                                   $1 = jsvNewArray(HEAP32[$5 + 524 >> 2] + 4 | 0, HEAP32[$5 + 520 >> 2] - 1 | 0);
                                   break label$388;
                                  }
                                  $1 = jsvNewWithFlags(3);
                                 }
                                 HEAP32[$0 + 144 >> 2] = $1;
                                 $2 = HEAP32[$5 + 536 >> 2];
                                 $0 = $5;
                                 $1 = HEAP32[$5 + 528 >> 2];
                                 if (HEAP32[$5 + 520 >> 2] > 0) {
                                  $3 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                 } else {
                                  $3 = 0;
                                 }
                                 HEAP32[$0 + 148 >> 2] = FUNCTION_TABLE[$2]($1, $3, HEAP32[$5 + 144 >> 2]);
                                 jsvUnLock(HEAP32[$5 + 144 >> 2]);
                                 HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 148 >> 2];
                                 break label$1;
                                }
                                HEAP32[$5 + 140 >> 2] = 0;
                                $2 = HEAP32[$5 + 536 >> 2];
                                $1 = HEAP32[$5 + 528 >> 2];
                                if (HEAP32[$5 + 520 >> 2] > 0) {
                                 $0 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                                } else {
                                 $0 = 0;
                                }
                                if (HEAP32[$5 + 520 >> 2] > 1) {
                                 $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                                } else {
                                 $3 = 0;
                                }
                                FUNCTION_TABLE[$2]($1, $0, jsvGetBool($3) & 1);
                                HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 140 >> 2];
                                break label$1;
                               }
                               HEAP32[$5 + 136 >> 2] = 0;
                               $0 = $5;
                               label$396 : {
                                if (HEAP32[$5 + 520 >> 2] > 0) {
                                 $1 = jsvNewArray(HEAP32[$5 + 524 >> 2], HEAP32[$5 + 520 >> 2]);
                                 break label$396;
                                }
                                $1 = jsvNewWithFlags(3);
                               }
                               HEAP32[$0 + 132 >> 2] = $1;
                               FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]](HEAP32[$5 + 528 >> 2], HEAP32[$5 + 132 >> 2]);
                               jsvUnLock(HEAP32[$5 + 132 >> 2]);
                               HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 136 >> 2];
                               break label$1;
                              }
                              HEAP32[$5 + 128 >> 2] = 0;
                              $2 = HEAP32[$5 + 536 >> 2];
                              $0 = $5;
                              if (HEAP32[$5 + 520 >> 2] > 0) {
                               $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                              } else {
                               $1 = 0;
                              }
                              if (HEAP32[$5 + 520 >> 2] > 1) {
                               $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                              } else {
                               $3 = 0;
                              }
                              HEAP32[$0 + 128 >> 2] = FUNCTION_TABLE[$2]($1, jsvGetBool($3) & 1);
                              HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 128 >> 2];
                              break label$1;
                             }
                             HEAP32[$5 + 124 >> 2] = 0;
                             $4 = HEAP32[$5 + 536 >> 2];
                             $0 = $5;
                             if (HEAP32[$5 + 520 >> 2] > 0) {
                              $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                             } else {
                              $1 = 0;
                             }
                             if (HEAP32[$5 + 520 >> 2] > 1) {
                              $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                             } else {
                              $2 = 0;
                             }
                             if (HEAP32[$5 + 520 >> 2] > 2) {
                              $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                             } else {
                              $3 = 0;
                             }
                             $3 = jsvGetInteger($3);
                             if (HEAP32[$5 + 520 >> 2] > 3) {
                              $6 = HEAP32[HEAP32[$5 + 524 >> 2] + 12 >> 2];
                             } else {
                              $6 = 0;
                             }
                             HEAP32[$0 + 124 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$4]($1, $2, $3, jsvGetInteger($6)) & 1);
                             HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 124 >> 2];
                             break label$1;
                            }
                            HEAP32[$5 + 120 >> 2] = 0;
                            $2 = HEAP32[$5 + 536 >> 2];
                            $0 = $5;
                            if (HEAP32[$5 + 520 >> 2] > 0) {
                             $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                            } else {
                             $1 = 0;
                            }
                            if (HEAP32[$5 + 520 >> 2] > 1) {
                             $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                            } else {
                             $3 = 0;
                            }
                            HEAP32[$0 + 120 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$2]($1, $3) & 1);
                            HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 120 >> 2];
                            break label$1;
                           }
                           HEAP32[$5 + 116 >> 2] = 0;
                           $3 = HEAP32[$5 + 536 >> 2];
                           $0 = $5;
                           $2 = HEAP32[$5 + 528 >> 2];
                           if (HEAP32[$5 + 520 >> 2] > 0) {
                            $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                           } else {
                            $1 = 0;
                           }
                           if (HEAP32[$5 + 520 >> 2] > 1) {
                            $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                           } else {
                            $4 = 0;
                           }
                           HEAP32[$0 + 116 >> 2] = FUNCTION_TABLE[$3]($2, $1, jshGetPinFromVar($4) & 255);
                           HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 116 >> 2];
                           break label$1;
                          }
                          HEAP32[$5 + 112 >> 2] = 0;
                          $4 = HEAP32[$5 + 536 >> 2];
                          $1 = HEAP32[$5 + 528 >> 2];
                          if (HEAP32[$5 + 520 >> 2] > 0) {
                           $0 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                          } else {
                           $0 = 0;
                          }
                          if (HEAP32[$5 + 520 >> 2] > 1) {
                           $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                          } else {
                           $2 = 0;
                          }
                          $2 = jsvGetInteger($2);
                          if (HEAP32[$5 + 520 >> 2] > 2) {
                           $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                          } else {
                           $3 = 0;
                          }
                          $3 = jsvGetInteger($3);
                          if (HEAP32[$5 + 520 >> 2] > 3) {
                           $6 = HEAP32[HEAP32[$5 + 524 >> 2] + 12 >> 2];
                          } else {
                           $6 = 0;
                          }
                          FUNCTION_TABLE[$4]($1, $0, $2, $3, jshGetPinFromVar($6) & 255);
                          HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 112 >> 2];
                          break label$1;
                         }
                         HEAP32[$5 + 108 >> 2] = 0;
                         $2 = HEAP32[$5 + 536 >> 2];
                         $0 = $5;
                         $1 = HEAP32[$5 + 528 >> 2];
                         if (HEAP32[$5 + 520 >> 2] > 0) {
                          $3 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                         } else {
                          $3 = 0;
                         }
                         HEAP32[$0 + 108 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$2]($1, jsvGetInteger($3)) | 0);
                         HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 108 >> 2];
                         break label$1;
                        }
                        HEAP32[$5 + 104 >> 2] = 0;
                        $3 = HEAP32[$5 + 536 >> 2];
                        $0 = $5;
                        $2 = HEAP32[$5 + 528 >> 2];
                        if (HEAP32[$5 + 520 >> 2] > 0) {
                         $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                        } else {
                         $1 = 0;
                        }
                        if (HEAP32[$5 + 520 >> 2] > 1) {
                         $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                        } else {
                         $4 = 0;
                        }
                        HEAP32[$0 + 104 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$3]($2, $1, $4) | 0);
                        HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 104 >> 2];
                        break label$1;
                       }
                       HEAP32[$5 + 100 >> 2] = 0;
                       $3 = HEAP32[$5 + 536 >> 2];
                       $0 = $5;
                       $2 = HEAP32[$5 + 528 >> 2];
                       if (HEAP32[$5 + 520 >> 2] > 0) {
                        $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                       } else {
                        $1 = 0;
                       }
                       if (HEAP32[$5 + 520 >> 2] > 1) {
                        $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                       } else {
                        $4 = 0;
                       }
                       HEAP32[$0 + 100 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$3]($2, $1, $4) & 1);
                       HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 100 >> 2];
                       break label$1;
                      }
                      HEAP32[$5 + 96 >> 2] = 0;
                      $2 = HEAP32[$5 + 536 >> 2];
                      $0 = $5;
                      if (HEAP32[$5 + 520 >> 2] > 0) {
                       $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                      } else {
                       $1 = 0;
                      }
                      $1 = jsvGetInteger($1);
                      if (HEAP32[$5 + 520 >> 2] > 1) {
                       $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                      } else {
                       $3 = 0;
                      }
                      HEAP32[$0 + 96 >> 2] = FUNCTION_TABLE[$2]($1, $3);
                      HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 96 >> 2];
                      break label$1;
                     }
                     HEAP32[$5 + 92 >> 2] = 0;
                     $2 = HEAP32[$5 + 536 >> 2];
                     $0 = HEAP32[$5 + 528 >> 2];
                     if (HEAP32[$5 + 520 >> 2] > 0) {
                      $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                     } else {
                      $1 = 0;
                     }
                     $1 = jshGetPinFromVar($1) & 255;
                     if (HEAP32[$5 + 520 >> 2] > 1) {
                      $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                     } else {
                      $3 = 0;
                     }
                     $8 = jsvGetFloat($3);
                     if (HEAP32[$5 + 520 >> 2] > 2) {
                      $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                     } else {
                      $3 = 0;
                     }
                     FUNCTION_TABLE[$2]($0, $1, $8, $3);
                     HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 92 >> 2];
                     break label$1;
                    }
                    HEAP32[$5 + 88 >> 2] = 0;
                    $1 = HEAP32[$5 + 536 >> 2];
                    $0 = $5;
                    if (HEAP32[$5 + 520 >> 2] > 0) {
                     $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                    } else {
                     $2 = 0;
                    }
                    HEAP32[$0 + 88 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$1](jsvGetFloat($2)));
                    HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 88 >> 2];
                    break label$1;
                   }
                   HEAP32[$5 + 84 >> 2] = 0;
                   $1 = HEAP32[$5 + 536 >> 2];
                   $0 = $5;
                   if (HEAP32[$5 + 520 >> 2] > 0) {
                    $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                   } else {
                    $2 = 0;
                   }
                   $8 = jsvGetFloat($2);
                   if (HEAP32[$5 + 520 >> 2] > 1) {
                    $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                   } else {
                    $2 = 0;
                   }
                   HEAP32[$0 + 84 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$1]($8, jsvGetFloat($2)));
                   HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 84 >> 2];
                   break label$1;
                  }
                  HEAP32[$5 + 80 >> 2] = 0;
                  $1 = HEAP32[$5 + 536 >> 2];
                  $0 = $5;
                  if (HEAP32[$5 + 520 >> 2] > 0) {
                   $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                  } else {
                   $2 = 0;
                  }
                  HEAP32[$0 + 80 >> 2] = FUNCTION_TABLE[$1](jsvGetFloat($2));
                  HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 80 >> 2];
                  break label$1;
                 }
                 HEAP32[$5 + 76 >> 2] = 0;
                 $0 = $5;
                 label$454 : {
                  if (HEAP32[$5 + 520 >> 2] > 0) {
                   $1 = jsvNewArray(HEAP32[$5 + 524 >> 2], HEAP32[$5 + 520 >> 2]);
                   break label$454;
                  }
                  $1 = jsvNewWithFlags(3);
                 }
                 HEAP32[$0 + 72 >> 2] = $1;
                 HEAP32[$5 + 76 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[HEAP32[$5 + 536 >> 2]](HEAP32[$5 + 72 >> 2]));
                 jsvUnLock(HEAP32[$5 + 72 >> 2]);
                 HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 76 >> 2];
                 break label$1;
                }
                HEAP32[$5 + 68 >> 2] = 0;
                $4 = HEAP32[$5 + 536 >> 2];
                $0 = $5;
                if (HEAP32[$5 + 520 >> 2] > 0) {
                 $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
                } else {
                 $1 = 0;
                }
                $1 = jsvGetInteger($1);
                if (HEAP32[$5 + 520 >> 2] > 1) {
                 $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
                } else {
                 $2 = 0;
                }
                $2 = jsvGetInteger($2);
                if (HEAP32[$5 + 520 >> 2] > 2) {
                 $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
                } else {
                 $3 = 0;
                }
                $3 = jsvGetInteger($3);
                if (HEAP32[$5 + 520 >> 2] > 3) {
                 $6 = HEAP32[HEAP32[$5 + 524 >> 2] + 12 >> 2];
                } else {
                 $6 = 0;
                }
                HEAP32[$0 + 68 >> 2] = FUNCTION_TABLE[$4]($1, $2, $3, $6);
                HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 68 >> 2];
                break label$1;
               }
               HEAP32[$5 + 64 >> 2] = 0;
               $2 = HEAP32[$5 + 536 >> 2];
               $0 = $5;
               $1 = HEAP32[$5 + 528 >> 2];
               if (HEAP32[$5 + 520 >> 2] > 0) {
                $3 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
               } else {
                $3 = 0;
               }
               HEAP32[$0 + 64 >> 2] = FUNCTION_TABLE[$2]($1, jsvGetBool($3) & 1);
               HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 64 >> 2];
               break label$1;
              }
              HEAP32[$5 + 60 >> 2] = 0;
              $0 = HEAP32[$5 + 536 >> 2];
              $1 = $5;
              $2 = HEAP32[$5 + 528 >> 2];
              if (HEAP32[$5 + 520 >> 2] > 0) {
               $3 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
              } else {
               $3 = 0;
              }
              $3 = jsvGetInteger($3);
              if (HEAP32[$5 + 520 >> 2] > 1) {
               $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
              } else {
               $4 = 0;
              }
              $4 = jsvGetInteger($4);
              if (HEAP32[$5 + 520 >> 2] > 2) {
               $6 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
              } else {
               $6 = 0;
              }
              $6 = jsvGetInteger($6);
              if (HEAP32[$5 + 520 >> 2] > 3) {
               $7 = HEAP32[HEAP32[$5 + 524 >> 2] + 12 >> 2];
              } else {
               $7 = 0;
              }
              HEAP32[$1 + 60 >> 2] = FUNCTION_TABLE[$0]($2, $3, $4, $6, jsvGetInteger($7));
              HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 60 >> 2];
              break label$1;
             }
             HEAP32[$5 + 56 >> 2] = 0;
             $4 = HEAP32[$5 + 536 >> 2];
             $0 = $5;
             $1 = HEAP32[$5 + 528 >> 2];
             if (HEAP32[$5 + 520 >> 2] > 0) {
              $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
             } else {
              $2 = 0;
             }
             $2 = jsvGetInteger($2);
             if (HEAP32[$5 + 520 >> 2] > 1) {
              $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
             } else {
              $3 = 0;
             }
             $3 = jsvGetInteger($3);
             if (HEAP32[$5 + 520 >> 2] > 2) {
              $6 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
             } else {
              $6 = 0;
             }
             HEAP32[$0 + 56 >> 2] = FUNCTION_TABLE[$4]($1, $2, $3, jsvGetInteger($6));
             HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 56 >> 2];
             break label$1;
            }
            HEAP32[$5 + 52 >> 2] = 0;
            $3 = HEAP32[$5 + 536 >> 2];
            $0 = $5;
            $1 = HEAP32[$5 + 528 >> 2];
            if (HEAP32[$5 + 520 >> 2] > 0) {
             $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
            } else {
             $2 = 0;
            }
            $2 = jsvGetInteger($2);
            if (HEAP32[$5 + 520 >> 2] > 1) {
             $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
            } else {
             $4 = 0;
            }
            HEAP32[$0 + 52 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$3]($1, $2, jsvGetInteger($4)) | 0);
            HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 52 >> 2];
            break label$1;
           }
           HEAP32[$5 + 48 >> 2] = 0;
           $4 = HEAP32[$5 + 536 >> 2];
           $0 = $5;
           $1 = HEAP32[$5 + 528 >> 2];
           if (HEAP32[$5 + 520 >> 2] > 0) {
            $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
           } else {
            $2 = 0;
           }
           $2 = jsvGetInteger($2);
           if (HEAP32[$5 + 520 >> 2] > 1) {
            $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
           } else {
            $3 = 0;
           }
           $3 = jsvGetInteger($3);
           if (HEAP32[$5 + 520 >> 2] > 2) {
            $6 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
           } else {
            $6 = 0;
           }
           HEAP32[$0 + 48 >> 2] = FUNCTION_TABLE[$4]($1, $2, $3, $6);
           HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 48 >> 2];
           break label$1;
          }
          HEAP32[$5 + 44 >> 2] = 0;
          $4 = HEAP32[$5 + 536 >> 2];
          $0 = $5;
          $3 = HEAP32[$5 + 528 >> 2];
          if (HEAP32[$5 + 520 >> 2] > 0) {
           $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
          } else {
           $1 = 0;
          }
          if (HEAP32[$5 + 520 >> 2] > 1) {
           $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
          } else {
           $2 = 0;
          }
          if (HEAP32[$5 + 520 >> 2] > 2) {
           $6 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
          } else {
           $6 = 0;
          }
          HEAP32[$0 + 44 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$4]($3, $1, $2, $6) | 0);
          HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 44 >> 2];
          break label$1;
         }
         HEAP32[$5 + 40 >> 2] = 0;
         $4 = HEAP32[$5 + 536 >> 2];
         $0 = $5;
         $3 = HEAP32[$5 + 528 >> 2];
         if (HEAP32[$5 + 520 >> 2] > 0) {
          $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
         } else {
          $1 = 0;
         }
         if (HEAP32[$5 + 520 >> 2] > 1) {
          $2 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
         } else {
          $2 = 0;
         }
         if (HEAP32[$5 + 520 >> 2] > 2) {
          $6 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
         } else {
          $6 = 0;
         }
         HEAP32[$0 + 40 >> 2] = FUNCTION_TABLE[$4]($3, $1, $2, $6);
         HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 40 >> 2];
         break label$1;
        }
        HEAP32[$5 + 36 >> 2] = 0;
        $0 = HEAP32[$5 + 536 >> 2];
        $1 = $5;
        $4 = HEAP32[$5 + 528 >> 2];
        if (HEAP32[$5 + 520 >> 2] > 0) {
         $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
        } else {
         $2 = 0;
        }
        if (HEAP32[$5 + 520 >> 2] > 1) {
         $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
        } else {
         $3 = 0;
        }
        $6 = jsvGetInteger($3);
        if (HEAP32[$5 + 520 >> 2] > 2) {
         $3 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
        } else {
         $3 = 0;
        }
        if (HEAP32[$5 + 520 >> 2] > 3) {
         $7 = HEAP32[HEAP32[$5 + 524 >> 2] + 12 >> 2];
        } else {
         $7 = 0;
        }
        HEAP32[$1 + 36 >> 2] = FUNCTION_TABLE[$0]($4, $2, $6, $3, jsvGetInteger($7));
        HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 36 >> 2];
        break label$1;
       }
       HEAP32[$5 + 32 >> 2] = 0;
       $0 = HEAP32[$5 + 536 >> 2];
       $1 = $5;
       $3 = HEAP32[$5 + 528 >> 2];
       if (HEAP32[$5 + 520 >> 2] > 0) {
        $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
       } else {
        $2 = 0;
       }
       if (HEAP32[$5 + 520 >> 2] > 1) {
        $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
       } else {
        $4 = 0;
       }
       $4 = jsvGetInteger($4);
       if (HEAP32[$5 + 520 >> 2] > 2) {
        $6 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
       } else {
        $6 = 0;
       }
       $6 = jsvGetInteger($6);
       if (HEAP32[$5 + 520 >> 2] > 3) {
        $7 = HEAP32[HEAP32[$5 + 524 >> 2] + 12 >> 2];
       } else {
        $7 = 0;
       }
       HEAP32[$1 + 32 >> 2] = FUNCTION_TABLE[$0]($3, $2, $4, $6, jsvGetBool($7) & 1);
       HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 32 >> 2];
       break label$1;
      }
      HEAP32[$5 + 28 >> 2] = 0;
      $2 = HEAP32[$5 + 536 >> 2];
      $0 = $5;
      $1 = HEAP32[$5 + 528 >> 2];
      if (HEAP32[$5 + 520 >> 2] > 0) {
       $3 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
      } else {
       $3 = 0;
      }
      HEAP32[$0 + 28 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$2]($1, $3) | 0);
      HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 28 >> 2];
      break label$1;
     }
     HEAP32[$5 + 24 >> 2] = 0;
     $3 = HEAP32[$5 + 536 >> 2];
     $0 = $5;
     $1 = HEAP32[$5 + 528 >> 2];
     if (HEAP32[$5 + 520 >> 2] > 0) {
      $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
     } else {
      $2 = 0;
     }
     $2 = jsvGetInteger($2);
     if (HEAP32[$5 + 520 >> 2] > 1) {
      $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
     } else {
      $4 = 0;
     }
     HEAP32[$0 + 24 >> 2] = FUNCTION_TABLE[$3]($1, $2, jsvGetInteger($4));
     HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 24 >> 2];
     break label$1;
    }
    HEAP32[$5 + 20 >> 2] = 0;
    $3 = HEAP32[$5 + 536 >> 2];
    $0 = $5;
    $2 = HEAP32[$5 + 528 >> 2];
    if (HEAP32[$5 + 520 >> 2] > 0) {
     $1 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
    } else {
     $1 = 0;
    }
    if (HEAP32[$5 + 520 >> 2] > 1) {
     $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
    } else {
     $4 = 0;
    }
    HEAP32[$0 + 20 >> 2] = FUNCTION_TABLE[$3]($2, $1, jsvGetBool($4) & 1);
    HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 20 >> 2];
    break label$1;
   }
   HEAP32[$5 + 16 >> 2] = 0;
   $0 = HEAP32[$5 + 536 >> 2];
   $1 = $5;
   $3 = HEAP32[$5 + 528 >> 2];
   if (HEAP32[$5 + 520 >> 2] > 0) {
    $2 = HEAP32[HEAP32[$5 + 524 >> 2] >> 2];
   } else {
    $2 = 0;
   }
   if (HEAP32[$5 + 520 >> 2] > 1) {
    $4 = HEAP32[HEAP32[$5 + 524 >> 2] + 4 >> 2];
   } else {
    $4 = 0;
   }
   $4 = jsvGetInteger($4);
   if (HEAP32[$5 + 520 >> 2] > 2) {
    $6 = HEAP32[HEAP32[$5 + 524 >> 2] + 8 >> 2];
   } else {
    $6 = 0;
   }
   $6 = jsvGetInteger($6);
   if (HEAP32[$5 + 520 >> 2] > 3) {
    $7 = HEAP32[HEAP32[$5 + 524 >> 2] + 12 >> 2];
   } else {
    $7 = 0;
   }
   HEAP32[$1 + 16 >> 2] = FUNCTION_TABLE[$0]($3, $2, $4, $6, $7);
   HEAP32[$5 + 540 >> 2] = HEAP32[$5 + 16 >> 2];
   break label$1;
  }
  HEAP32[$5 >> 2] = HEAPU16[$5 + 534 >> 1];
  jsExceptionHere(1, 18522, $5);
  HEAP32[$5 + 540 >> 2] = 0;
 }
 global$0 = $5 + 544 | 0;
 return HEAP32[$5 + 540 >> 2];
}
function tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = Math_fround(0);
 $5 = global$0 - 848 | 0;
 global$0 = $5;
 HEAP32[$5 + 840 >> 2] = $0;
 HEAP32[$5 + 836 >> 2] = $1;
 HEAP32[$5 + 832 >> 2] = $2;
 HEAP32[$5 + 828 >> 2] = $3;
 HEAP32[$5 + 824 >> 2] = $4;
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($5 + 784 | 0, HEAP32[$5 + 828 >> 2]);
 HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = 0;
 $0 = HEAP32[$5 + 836 >> 2];
 label$1 : {
  label$2 : {
   if ($0 >>> 0 > 121) {
    break label$2;
   }
   label$3 : {
    switch ($0 - 1 | 0) {
    case 2:
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteConvParams__28_29($5 + 776 | 0, $5 + 784 | 0);
     HEAP32[$5 + 772 >> 2] = tflite__Operator__builtin_options_as_Conv2DOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 772 >> 2]) {
      $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_0__operator_28_29_28tflite__Padding_29_20const($5 + 816 | 0, tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$5 + 772 >> 2]));
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 776 | 0) >> 2] = $0;
      $0 = tflite__Conv2DOptions__stride_w_28_29_20const(HEAP32[$5 + 772 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 776 | 0) + 4 >> 2] = $0;
      $0 = tflite__Tensor__buffer_28_29_20const(HEAP32[$5 + 772 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 776 | 0) + 8 >> 2] = $0;
      $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_1__operator_28_29_28tflite__ActivationFunctionType_29_20const($5 + 808 | 0, tflite__Conv2DOptions__fused_activation_function_28_29_20const(HEAP32[$5 + 772 >> 2]));
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 776 | 0) + 20 >> 2] = $0;
      $0 = tflite__Conv2DOptions__dilation_w_factor_28_29_20const(HEAP32[$5 + 772 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 776 | 0) + 12 >> 2] = $0;
      $0 = tflite__Conv2DOptions__dilation_h_factor_28_29_20const(HEAP32[$5 + 772 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 776 | 0) + 16 >> 2] = $0;
     }
     $0 = $5 + 776 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 52:
     std____2__unique_ptr_TfLiteCastParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteCastParams__28_29($5 + 752 | 0, $5 + 784 | 0);
     HEAP32[$5 + 748 >> 2] = tflite__Operator__builtin_options_as_CastOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     label$55 : {
      if (HEAP32[$5 + 748 >> 2]) {
       HEAP32[$5 + 744 >> 2] = tflite__ConvertTensorType_28tflite__TensorType_2c_20TfLiteType__2c_20tflite__ErrorReporter__29(tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$5 + 748 >> 2]), std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 752 | 0), HEAP32[$5 + 832 >> 2]);
       HEAP32[$5 + 740 >> 2] = tflite__ConvertTensorType_28tflite__TensorType_2c_20TfLiteType__2c_20tflite__ErrorReporter__29(tflite__Tensor__type_28_29_20const(HEAP32[$5 + 748 >> 2]), std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 752 | 0) + 4 | 0, HEAP32[$5 + 832 >> 2]);
       if (!(HEAP32[$5 + 740 >> 2] ? 0 : !HEAP32[$5 + 744 >> 2])) {
        HEAP32[$5 + 844 >> 2] = 1;
        HEAP32[$5 + 736 >> 2] = 1;
        break label$55;
       }
      }
      $0 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($5 + 752 | 0);
      HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $0;
      HEAP32[$5 + 736 >> 2] = 2;
     }
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($5 + 752 | 0);
     if (HEAP32[$5 + 736 >> 2] + -2) {
      break label$1;
     }
     break label$2;
    case 14:
     std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($5 + 728 | 0, $5 + 784 | 0);
     HEAP32[$5 + 724 >> 2] = tflite__Operator__builtin_options_as_LSHProjectionOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 724 >> 2]) {
      $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_2__operator_28_29_28tflite__LSHProjectionType_29_20const($5 + 800 | 0, tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$5 + 724 >> 2]));
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 728 | 0) >> 2] = $0;
     }
     $0 = $5 + 728 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 0:
    case 11:
    case 16:
     std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLitePoolParams__28_29($5 + 712 | 0, $5 + 784 | 0);
     HEAP32[$5 + 708 >> 2] = tflite__Operator__builtin_options_as_Pool2DOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 708 >> 2]) {
      $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_0__operator_28_29_28tflite__Padding_29_20const($5 + 816 | 0, tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$5 + 708 >> 2]));
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 712 | 0) >> 2] = $0;
      $0 = tflite__Conv2DOptions__stride_w_28_29_20const(HEAP32[$5 + 708 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 712 | 0) + 4 >> 2] = $0;
      $0 = tflite__Tensor__buffer_28_29_20const(HEAP32[$5 + 708 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 712 | 0) + 8 >> 2] = $0;
      $0 = tflite__Pool2DOptions__filter_width_28_29_20const(HEAP32[$5 + 708 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 712 | 0) + 12 >> 2] = $0;
      $0 = tflite__Pool2DOptions__filter_height_28_29_20const(HEAP32[$5 + 708 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 712 | 0) + 16 >> 2] = $0;
      $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_1__operator_28_29_28tflite__ActivationFunctionType_29_20const($5 + 808 | 0, tflite__Pool2DOptions__fused_activation_function_28_29_20const(HEAP32[$5 + 708 >> 2]));
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 712 | 0) + 20 >> 2] = $0;
     }
     $0 = $5 + 712 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 3:
     std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteDepthwiseConvParams__28_29($5 + 696 | 0, $5 + 784 | 0);
     HEAP32[$5 + 692 >> 2] = tflite__Operator__builtin_options_as_DepthwiseConv2DOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 692 >> 2]) {
      $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_0__operator_28_29_28tflite__Padding_29_20const($5 + 816 | 0, tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$5 + 692 >> 2]));
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 696 | 0) >> 2] = $0;
      $0 = tflite__Conv2DOptions__stride_w_28_29_20const(HEAP32[$5 + 692 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 696 | 0) + 4 >> 2] = $0;
      $0 = tflite__Tensor__buffer_28_29_20const(HEAP32[$5 + 692 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 696 | 0) + 8 >> 2] = $0;
      $0 = tflite__Pool2DOptions__filter_width_28_29_20const(HEAP32[$5 + 692 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 696 | 0) + 12 >> 2] = $0;
      $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_1__operator_28_29_28tflite__ActivationFunctionType_29_20const($5 + 808 | 0, tflite__DepthwiseConv2DOptions__fused_activation_function_28_29_20const(HEAP32[$5 + 692 >> 2]));
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 696 | 0) + 16 >> 2] = $0;
      $0 = tflite__Conv2DOptions__dilation_h_factor_28_29_20const(HEAP32[$5 + 692 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 696 | 0) + 20 >> 2] = $0;
      $0 = tflite__DepthwiseConv2DOptions__dilation_h_factor_28_29_20const(HEAP32[$5 + 692 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 696 | 0) + 24 >> 2] = $0;
     }
     $0 = $5 + 696 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 26:
     std____2__unique_ptr_TfLiteCastParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteCastParams__28_29($5 + 680 | 0, $5 + 784 | 0);
     HEAP32[$5 + 676 >> 2] = tflite__Operator__builtin_options_as_SVDFOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 676 >> 2]) {
      $0 = tflite__Operator__opcode_index_28_29_20const(HEAP32[$5 + 676 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 680 | 0) >> 2] = $0;
      $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_1__operator_28_29_28tflite__ActivationFunctionType_29_20const($5 + 808 | 0, tflite__Tensor__type_28_29_20const(HEAP32[$5 + 676 >> 2]));
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 680 | 0) + 4 >> 2] = $0;
     }
     $0 = $5 + 680 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 34:
     std____2__unique_ptr_TfLiteCastParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteCastParams__28_29($5 + 664 | 0, $5 + 784 | 0);
     HEAP32[$5 + 660 >> 2] = tflite__Operator__builtin_options_as_SequenceRNNOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 660 >> 2]) {
      $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_1__operator_28_29_28tflite__ActivationFunctionType_29_20const($5 + 808 | 0, tflite__Tensor__type_28_29_20const(HEAP32[$5 + 660 >> 2]));
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 664 | 0) + 4 >> 2] = $0;
      $0 = tflite__SequenceRNNOptions__time_major_28_29_20const(HEAP32[$5 + 660 >> 2]);
      HEAP8[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 664 | 0) | 0] = $0 & 1;
     }
     $0 = $5 + 664 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 45:
     std____2__unique_ptr_TfLiteBidirectionalSequenceRNNParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteBidirectionalSequenceRNNParams__28_29($5 + 648 | 0, $5 + 784 | 0);
     HEAP32[$5 + 644 >> 2] = tflite__Operator__builtin_options_as_BidirectionalSequenceRNNOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 644 >> 2]) {
      $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_1__operator_28_29_28tflite__ActivationFunctionType_29_20const($5 + 808 | 0, tflite__Tensor__type_28_29_20const(HEAP32[$5 + 644 >> 2]));
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 648 | 0) + 4 >> 2] = $0;
      $0 = tflite__SequenceRNNOptions__time_major_28_29_20const(HEAP32[$5 + 644 >> 2]);
      HEAP8[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 648 | 0) | 0] = $0 & 1;
      $0 = tflite__BidirectionalSequenceRNNOptions__merge_outputs_28_29_20const(HEAP32[$5 + 644 >> 2]);
      HEAP8[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 648 | 0) + 8 | 0] = $0 & 1;
     }
     $0 = $5 + 648 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 23:
     std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($5 + 632 | 0, $5 + 784 | 0);
     HEAP32[$5 + 628 >> 2] = tflite__Operator__builtin_options_as_RNNOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 628 >> 2]) {
      $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_1__operator_28_29_28tflite__ActivationFunctionType_29_20const($5 + 808 | 0, tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$5 + 628 >> 2]));
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 632 | 0) >> 2] = $0;
     }
     $0 = $5 + 632 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 32:
     std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($5 + 616 | 0, $5 + 784 | 0);
     HEAP32[$5 + 612 >> 2] = tflite__Operator__builtin_options_as_EmbeddingLookupSparseOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 612 >> 2]) {
      $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_3__operator_28_29_28tflite__CombinerType_29_20const($5 + 792 | 0, tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$5 + 612 >> 2]));
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 616 | 0) >> 2] = $0;
     }
     $0 = $5 + 616 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 8:
     std____2__unique_ptr_TfLiteBidirectionalSequenceRNNParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteBidirectionalSequenceRNNParams__28_29($5 + 600 | 0, $5 + 784 | 0);
     HEAP32[$5 + 596 >> 2] = tflite__Operator__builtin_options_as_FullyConnectedOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     label$67 : {
      if (HEAP32[$5 + 596 >> 2]) {
       $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_1__operator_28_29_28tflite__ActivationFunctionType_29_20const($5 + 808 | 0, tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$5 + 596 >> 2]));
       HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 600 | 0) >> 2] = $0;
       $0 = tflite__BidirectionalSequenceRNNOptions__merge_outputs_28_29_20const(HEAP32[$5 + 596 >> 2]);
       HEAP8[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 600 | 0) + 8 | 0] = $0 & 1;
       $0 = tflite__Tensor__type_28_29_20const(HEAP32[$5 + 596 >> 2]);
       $1 = $0;
       label$69 : {
        if ($0 >>> 0 <= 1) {
         if ($1 - 1) {
          HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 600 | 0) + 4 >> 2] = 0;
          break label$69;
         }
         HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 600 | 0) + 4 >> 2] = 1;
         break label$69;
        }
        tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$5 + 832 >> 2], 48638, 0);
        HEAP32[$5 + 844 >> 2] = 1;
        HEAP32[$5 + 736 >> 2] = 1;
        break label$67;
       }
      }
      $0 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($5 + 600 | 0);
      HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $0;
      HEAP32[$5 + 736 >> 2] = 2;
     }
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($5 + 600 | 0);
     if (HEAP32[$5 + 736 >> 2] + -2) {
      break label$1;
     }
     break label$2;
    case 24:
     std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($5 + 584 | 0, $5 + 784 | 0);
     HEAP32[$5 + 580 >> 2] = tflite__Operator__builtin_options_as_SoftmaxOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 580 >> 2]) {
      $6 = tflite__SoftmaxOptions__beta_28_29_20const(HEAP32[$5 + 580 >> 2]);
      HEAPF32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 584 | 0) >> 2] = $6;
     }
     $0 = $5 + 584 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 1:
     std____2__unique_ptr_TfLiteCastParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteCastParams__28_29($5 + 568 | 0, $5 + 784 | 0);
     HEAP32[$5 + 564 >> 2] = tflite__Operator__builtin_options_as_ConcatenationOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 564 >> 2]) {
      $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_1__operator_28_29_28tflite__ActivationFunctionType_29_20const($5 + 808 | 0, tflite__Tensor__type_28_29_20const(HEAP32[$5 + 564 >> 2]));
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 568 | 0) + 4 >> 2] = $0;
      $0 = tflite__Operator__opcode_index_28_29_20const(HEAP32[$5 + 564 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 568 | 0) >> 2] = $0;
     }
     $0 = $5 + 568 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 17:
     std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($5 + 552 | 0, $5 + 784 | 0);
     HEAP32[$5 + 548 >> 2] = tflite__Operator__builtin_options_as_MulOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 548 >> 2]) {
      $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_1__operator_28_29_28tflite__ActivationFunctionType_29_20const($5 + 808 | 0, tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$5 + 548 >> 2]));
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 552 | 0) >> 2] = $0;
     }
     $0 = $5 + 552 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    default:
     std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($5 + 536 | 0, $5 + 784 | 0);
     HEAP32[$5 + 532 >> 2] = tflite__Operator__builtin_options_as_AddOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 532 >> 2]) {
      $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_1__operator_28_29_28tflite__ActivationFunctionType_29_20const($5 + 808 | 0, tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$5 + 532 >> 2]));
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 536 | 0) >> 2] = $0;
     }
     $0 = $5 + 536 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 41:
     std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($5 + 520 | 0, $5 + 784 | 0);
     HEAP32[$5 + 516 >> 2] = tflite__Operator__builtin_options_as_DivOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 516 >> 2]) {
      $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_1__operator_28_29_28tflite__ActivationFunctionType_29_20const($5 + 808 | 0, tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$5 + 516 >> 2]));
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 520 | 0) >> 2] = $0;
     }
     $0 = $5 + 520 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 40:
     std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($5 + 504 | 0, $5 + 784 | 0);
     HEAP32[$5 + 500 >> 2] = tflite__Operator__builtin_options_as_SubOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 500 >> 2]) {
      $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_1__operator_28_29_28tflite__ActivationFunctionType_29_20const($5 + 808 | 0, tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$5 + 500 >> 2]));
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 504 | 0) >> 2] = $0;
     }
     $0 = $5 + 504 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 10:
     std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($5 + 488 | 0, $5 + 784 | 0);
     HEAP32[$5 + 484 >> 2] = tflite__Operator__builtin_options_as_L2NormOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 484 >> 2]) {
      $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_1__operator_28_29_28tflite__ActivationFunctionType_29_20const($5 + 808 | 0, tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$5 + 484 >> 2]));
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 488 | 0) >> 2] = $0;
     }
     $0 = $5 + 488 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 12:
     std____2__unique_ptr_TfLiteLocalResponseNormParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLocalResponseNormParams__28_29($5 + 472 | 0, $5 + 784 | 0);
     HEAP32[$5 + 468 >> 2] = tflite__Operator__builtin_options_as_LocalResponseNormalizationOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 468 >> 2]) {
      $0 = tflite__Operator__opcode_index_28_29_20const(HEAP32[$5 + 468 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 472 | 0) >> 2] = $0;
      $6 = tflite__LocalResponseNormalizationOptions__bias_28_29_20const(HEAP32[$5 + 468 >> 2]);
      HEAPF32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 472 | 0) + 4 >> 2] = $6;
      $6 = tflite__LocalResponseNormalizationOptions__alpha_28_29_20const(HEAP32[$5 + 468 >> 2]);
      HEAPF32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 472 | 0) + 8 >> 2] = $6;
      $6 = tflite__LocalResponseNormalizationOptions__beta_28_29_20const(HEAP32[$5 + 468 >> 2]);
      HEAPF32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 472 | 0) + 12 >> 2] = $6;
     }
     $0 = $5 + 472 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 15:
     std____2__unique_ptr_TfLiteLocalResponseNormParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLocalResponseNormParams__28_29($5 + 456 | 0, $5 + 784 | 0);
     HEAP32[$5 + 452 >> 2] = tflite__Operator__builtin_options_as_LSTMOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     label$80 : {
      label$81 : {
       if (HEAP32[$5 + 452 >> 2]) {
        $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_1__operator_28_29_28tflite__ActivationFunctionType_29_20const($5 + 808 | 0, tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$5 + 452 >> 2]));
        HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 456 | 0) >> 2] = $0;
        $6 = tflite__LocalResponseNormalizationOptions__bias_28_29_20const(HEAP32[$5 + 452 >> 2]);
        HEAPF32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 456 | 0) + 4 >> 2] = $6;
        $6 = tflite__LocalResponseNormalizationOptions__alpha_28_29_20const(HEAP32[$5 + 452 >> 2]);
        HEAPF32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 456 | 0) + 8 >> 2] = $6;
        $0 = tflite__Conv2DOptions__fused_activation_function_28_29_20const(HEAP32[$5 + 452 >> 2]);
        $1 = $0;
        label$83 : {
         if ($0 >>> 0 <= 1) {
          if ($1 - 1) {
           HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 456 | 0) + 12 >> 2] = 0;
           break label$83;
          }
          HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 456 | 0) + 12 >> 2] = 1;
          break label$83;
         }
         $0 = HEAP32[$5 + 832 >> 2];
         HEAP32[$5 >> 2] = tflite__Conv2DOptions__fused_activation_function_28_29_20const(HEAP32[$5 + 452 >> 2]);
         tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 48680, $5);
         HEAP32[$5 + 844 >> 2] = 1;
         HEAP32[$5 + 736 >> 2] = 1;
         break label$80;
        }
        break label$81;
       }
       tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$5 + 832 >> 2], 48711, 0);
       HEAP32[$5 + 844 >> 2] = 1;
       HEAP32[$5 + 736 >> 2] = 1;
       break label$80;
      }
      $0 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($5 + 456 | 0);
      HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $0;
      HEAP32[$5 + 736 >> 2] = 2;
     }
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($5 + 456 | 0);
     if (HEAP32[$5 + 736 >> 2] + -2) {
      break label$1;
     }
     break label$2;
    case 43:
     std____2__unique_ptr_TfLiteLocalResponseNormParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLocalResponseNormParams__28_29($5 + 440 | 0, $5 + 784 | 0);
     HEAP32[$5 + 436 >> 2] = tflite__Operator__builtin_options_as_UnidirectionalSequenceLSTMOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 436 >> 2]) {
      $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_1__operator_28_29_28tflite__ActivationFunctionType_29_20const($5 + 808 | 0, tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$5 + 436 >> 2]));
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 440 | 0) >> 2] = $0;
      $6 = tflite__LocalResponseNormalizationOptions__bias_28_29_20const(HEAP32[$5 + 436 >> 2]);
      HEAPF32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 440 | 0) + 4 >> 2] = $6;
      $6 = tflite__LocalResponseNormalizationOptions__alpha_28_29_20const(HEAP32[$5 + 436 >> 2]);
      HEAPF32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 440 | 0) + 8 >> 2] = $6;
      $0 = tflite__UnidirectionalSequenceLSTMOptions__time_major_28_29_20const(HEAP32[$5 + 436 >> 2]);
      HEAP8[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 440 | 0) + 12 | 0] = $0 & 1;
     }
     $0 = $5 + 440 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 51:
     std____2__unique_ptr_TfLiteLocalResponseNormParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLocalResponseNormParams__28_29($5 + 424 | 0, $5 + 784 | 0);
     HEAP32[$5 + 420 >> 2] = tflite__Operator__builtin_options_as_BidirectionalSequenceLSTMOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 420 >> 2]) {
      $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_1__operator_28_29_28tflite__ActivationFunctionType_29_20const($5 + 808 | 0, tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$5 + 420 >> 2]));
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 424 | 0) >> 2] = $0;
      $6 = tflite__LocalResponseNormalizationOptions__bias_28_29_20const(HEAP32[$5 + 420 >> 2]);
      HEAPF32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 424 | 0) + 4 >> 2] = $6;
      $6 = tflite__LocalResponseNormalizationOptions__alpha_28_29_20const(HEAP32[$5 + 420 >> 2]);
      HEAPF32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 424 | 0) + 8 >> 2] = $6;
      $0 = tflite__UnidirectionalSequenceLSTMOptions__time_major_28_29_20const(HEAP32[$5 + 420 >> 2]);
      HEAP8[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 424 | 0) + 12 | 0] = $0 & 1;
      $0 = tflite__BidirectionalSequenceLSTMOptions__time_major_28_29_20const(HEAP32[$5 + 420 >> 2]);
      HEAP8[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 424 | 0) + 13 | 0] = $0 & 1;
     }
     $0 = $5 + 424 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 22:
     std____2__unique_ptr_TfLiteResizeBilinearParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteResizeBilinearParams__28_29($5 + 408 | 0, $5 + 784 | 0);
     HEAP32[$5 + 404 >> 2] = tflite__Operator__builtin_options_as_ResizeBilinearOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 404 >> 2]) {
      $0 = tflite__BidirectionalSequenceRNNOptions__merge_outputs_28_29_20const(HEAP32[$5 + 404 >> 2]);
      HEAP8[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 408 | 0) | 0] = $0 & 1;
     }
     $0 = $5 + 408 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 96:
     HEAP32[$5 + 392 >> 2] = $5 + 784;
     HEAP32[$5 + 396 >> 2] = $5 + 840;
     HEAP32[$5 + 400 >> 2] = $5 + 824;
     tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_4__operator_28_29_28_29_20const($5 + 392 | 0);
     break label$2;
    case 21:
     std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteReshapeParams__28_29($5 + 384 | 0, $5 + 784 | 0);
     HEAP32[$5 + 380 >> 2] = tflite__Operator__builtin_options_as_ReshapeOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     label$89 : {
      if (HEAP32[$5 + 380 >> 2]) {
       HEAP32[$5 + 376 >> 2] = tflite__Tensor__shape_28_29_20const(HEAP32[$5 + 380 >> 2]);
       if (tflite___28anonymous_20namespace_29__FlatBufferIntVectorToArray_28int_2c_20flatbuffers__Vector_int__20const__2c_20int__2c_20tflite__ErrorReporter__2c_20char_20const__29(HEAP32[$5 + 376 >> 2], std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 384 | 0), HEAP32[$5 + 832 >> 2], 48747)) {
        HEAP32[$5 + 844 >> 2] = 1;
        HEAP32[$5 + 736 >> 2] = 1;
        break label$89;
       }
       $0 = flatbuffers__Vector_int___size_28_29_20const(HEAP32[$5 + 376 >> 2]);
       HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 384 | 0) + 32 >> 2] = $0;
      }
      $0 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($5 + 384 | 0);
      HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $0;
      HEAP32[$5 + 736 >> 2] = 2;
     }
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($5 + 384 | 0);
     if (HEAP32[$5 + 736 >> 2] + -2) {
      break label$1;
     }
     break label$2;
    case 29:
     std____2__unique_ptr_TfLiteBidirectionalSequenceRNNParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteBidirectionalSequenceRNNParams__28_29($5 + 368 | 0, $5 + 784 | 0);
     HEAP32[$5 + 364 >> 2] = tflite__Operator__builtin_options_as_SkipGramOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 364 >> 2]) {
      $0 = tflite__Operator__opcode_index_28_29_20const(HEAP32[$5 + 364 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 368 | 0) >> 2] = $0;
      $0 = tflite__Conv2DOptions__stride_w_28_29_20const(HEAP32[$5 + 364 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 368 | 0) + 4 >> 2] = $0;
      $0 = tflite__BidirectionalSequenceRNNOptions__merge_outputs_28_29_20const(HEAP32[$5 + 364 >> 2]);
      HEAP8[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 368 | 0) + 8 | 0] = $0 & 1;
     }
     $0 = $5 + 368 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 25:
     std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($5 + 352 | 0, $5 + 784 | 0);
     HEAP32[$5 + 348 >> 2] = tflite__Operator__builtin_options_as_SpaceToDepthOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 348 >> 2]) {
      $0 = tflite__Operator__opcode_index_28_29_20const(HEAP32[$5 + 348 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 352 | 0) >> 2] = $0;
     }
     $0 = $5 + 352 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 4:
     std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($5 + 336 | 0, $5 + 784 | 0);
     HEAP32[$5 + 332 >> 2] = tflite__Operator__builtin_options_as_DepthToSpaceOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 332 >> 2]) {
      $0 = tflite__Operator__opcode_index_28_29_20const(HEAP32[$5 + 332 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 336 | 0) >> 2] = $0;
     }
     $0 = $5 + 336 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 35:
     $0 = $5 + 320 | 0;
     std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($0, $5 + 784 | 0);
     HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($0) >> 2] = 0;
     HEAP32[$5 + 316 >> 2] = tflite__Operator__builtin_options_as_GatherOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 316 >> 2]) {
      $0 = tflite__Operator__opcode_index_28_29_20const(HEAP32[$5 + 316 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 320 | 0) >> 2] = $0;
     }
     $0 = $5 + 320 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 39:
    case 73:
    case 80:
    case 81:
    case 88:
    case 90:
     std____2__unique_ptr_TfLiteResizeBilinearParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteResizeBilinearParams__28_29($5 + 304 | 0, $5 + 784 | 0);
     HEAP32[$5 + 300 >> 2] = tflite__Operator__builtin_options_as_ReducerOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 300 >> 2]) {
      $0 = tflite__SequenceRNNOptions__time_major_28_29_20const(HEAP32[$5 + 300 >> 2]);
      HEAP8[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 304 | 0) | 0] = $0 & 1;
     }
     $0 = $5 + 304 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 48:
     std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($5 + 288 | 0, $5 + 784 | 0);
     HEAP32[$5 + 284 >> 2] = tflite__Operator__builtin_options_as_SplitOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 284 >> 2]) {
      $0 = tflite__Operator__opcode_index_28_29_20const(HEAP32[$5 + 284 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 288 | 0) >> 2] = $0;
     }
     $0 = $5 + 288 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 101:
     std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($5 + 272 | 0, $5 + 784 | 0);
     HEAP32[$5 + 268 >> 2] = tflite__Operator__builtin_options_as_SplitVOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 268 >> 2]) {
      $0 = tflite__Operator__opcode_index_28_29_20const(HEAP32[$5 + 268 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 272 | 0) >> 2] = $0;
     }
     $0 = $5 + 272 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 42:
     std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteReshapeParams__28_29($5 + 256 | 0, $5 + 784 | 0);
     HEAP32[$5 + 252 >> 2] = tflite__Operator__builtin_options_as_SqueezeOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     label$99 : {
      if (HEAP32[$5 + 252 >> 2]) {
       HEAP32[$5 + 244 >> 2] = tflite__Tensor__shape_28_29_20const(HEAP32[$5 + 252 >> 2]);
       HEAP32[$5 + 248 >> 2] = $5 + 244;
       if (tflite___28anonymous_20namespace_29__FlatBufferIntVectorToArray_28int_2c_20flatbuffers__Vector_int__20const__2c_20int__2c_20tflite__ErrorReporter__2c_20char_20const__29(HEAP32[HEAP32[$5 + 248 >> 2] >> 2], std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 256 | 0), HEAP32[$5 + 832 >> 2], 48755)) {
        HEAP32[$5 + 844 >> 2] = 1;
        HEAP32[$5 + 736 >> 2] = 1;
        break label$99;
       }
       $0 = flatbuffers__Vector_int___size_28_29_20const(HEAP32[HEAP32[$5 + 248 >> 2] >> 2]);
       HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 256 | 0) + 32 >> 2] = $0;
      }
      $0 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($5 + 256 | 0);
      HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $0;
      HEAP32[$5 + 736 >> 2] = 2;
     }
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($5 + 256 | 0);
     if (HEAP32[$5 + 736 >> 2] + -2) {
      break label$1;
     }
     break label$2;
    case 44:
     std____2__unique_ptr_TfLiteStridedSliceParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteStridedSliceParams__28_29($5 + 232 | 0, $5 + 784 | 0);
     HEAP32[$5 + 228 >> 2] = tflite__Operator__builtin_options_as_StridedSliceOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 228 >> 2]) {
      $0 = tflite__Operator__opcode_index_28_29_20const(HEAP32[$5 + 228 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 232 | 0) >> 2] = $0;
      $0 = tflite__Conv2DOptions__stride_w_28_29_20const(HEAP32[$5 + 228 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 232 | 0) + 4 >> 2] = $0;
      $0 = tflite__Tensor__buffer_28_29_20const(HEAP32[$5 + 228 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 232 | 0) + 8 >> 2] = $0;
      $0 = tflite__Pool2DOptions__filter_width_28_29_20const(HEAP32[$5 + 228 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 232 | 0) + 12 >> 2] = $0;
      $0 = tflite__Pool2DOptions__filter_height_28_29_20const(HEAP32[$5 + 228 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 232 | 0) + 16 >> 2] = $0;
     }
     $0 = $5 + 232 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 55:
     std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($5 + 216 | 0, $5 + 784 | 0);
     HEAP32[$5 + 212 >> 2] = tflite__Operator__builtin_options_as_ArgMaxOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 212 >> 2]) {
      tflite__ConvertTensorType_28tflite__TensorType_2c_20TfLiteType__2c_20tflite__ErrorReporter__29(tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$5 + 212 >> 2]), std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 216 | 0), HEAP32[$5 + 832 >> 2]);
     }
     $0 = $5 + 216 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 78:
     std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($5 + 200 | 0, $5 + 784 | 0);
     HEAP32[$5 + 196 >> 2] = tflite__Operator__builtin_options_as_ArgMinOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 196 >> 2]) {
      tflite__ConvertTensorType_28tflite__TensorType_2c_20TfLiteType__2c_20tflite__ErrorReporter__29(tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$5 + 196 >> 2]), std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 200 | 0), HEAP32[$5 + 832 >> 2]);
     }
     $0 = $5 + 200 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 66:
     std____2__unique_ptr_TfLiteBidirectionalSequenceRNNParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteBidirectionalSequenceRNNParams__28_29($5 + 184 | 0, $5 + 784 | 0);
     HEAP32[$5 + 180 >> 2] = tflite__Operator__builtin_options_as_TransposeConvOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 180 >> 2]) {
      $0 = tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_0__operator_28_29_28tflite__Padding_29_20const($5 + 816 | 0, tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$5 + 180 >> 2]));
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 184 | 0) >> 2] = $0;
      $0 = tflite__Conv2DOptions__stride_w_28_29_20const(HEAP32[$5 + 180 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 184 | 0) + 4 >> 2] = $0;
      $0 = tflite__Tensor__buffer_28_29_20const(HEAP32[$5 + 180 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 184 | 0) + 8 >> 2] = $0;
     }
     $0 = $5 + 184 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 67:
     std____2__unique_ptr_TfLiteResizeBilinearParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteResizeBilinearParams__28_29($5 + 168 | 0, $5 + 784 | 0);
     HEAP32[$5 + 164 >> 2] = tflite__Operator__builtin_options_as_SparseToDenseOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 164 >> 2]) {
      $0 = tflite__SequenceRNNOptions__time_major_28_29_20const(HEAP32[$5 + 164 >> 2]);
      HEAP8[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 168 | 0) | 0] = $0 & 1;
     }
     $0 = $5 + 168 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 76:
     std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($5 + 152 | 0, $5 + 784 | 0);
     HEAP32[$5 + 148 >> 2] = tflite__Operator__builtin_options_as_ShapeOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 148 >> 2]) {
      tflite__ConvertTensorType_28tflite__TensorType_2c_20TfLiteType__2c_20tflite__ErrorReporter__29(tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$5 + 148 >> 2]), std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 152 | 0), HEAP32[$5 + 832 >> 2]);
     }
     $0 = $5 + 152 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 82:
     std____2__unique_ptr_TfLiteCastParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteCastParams__28_29($5 + 136 | 0, $5 + 784 | 0);
     HEAP32[$5 + 132 >> 2] = tflite__Operator__builtin_options_as_PackOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 132 >> 2]) {
      $0 = tflite__Operator__opcode_index_28_29_20const(HEAP32[$5 + 132 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 136 | 0) >> 2] = $0;
      $0 = tflite__Conv2DOptions__stride_w_28_29_20const(HEAP32[$5 + 132 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 136 | 0) + 4 >> 2] = $0;
     }
     $0 = $5 + 136 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 50:
     tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$5 + 832 >> 2], 48763, 0);
     HEAP32[$5 + 844 >> 2] = 1;
     break label$1;
    case 79:
     std____2__unique_ptr_TfLiteLocalResponseNormParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLocalResponseNormParams__28_29($5 + 120 | 0, $5 + 784 | 0);
     HEAP32[$5 + 116 >> 2] = tflite__Operator__builtin_options_as_FakeQuantOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 116 >> 2]) {
      $6 = tflite__SoftmaxOptions__beta_28_29_20const(HEAP32[$5 + 116 >> 2]);
      HEAPF32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 120 | 0) >> 2] = $6;
      $6 = tflite__LocalResponseNormalizationOptions__bias_28_29_20const(HEAP32[$5 + 116 >> 2]);
      HEAPF32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 120 | 0) + 4 >> 2] = $6;
      $0 = tflite__Tensor__buffer_28_29_20const(HEAP32[$5 + 116 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 120 | 0) + 8 >> 2] = $0;
      $0 = tflite__UnidirectionalSequenceLSTMOptions__time_major_28_29_20const(HEAP32[$5 + 116 >> 2]);
      HEAP8[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 120 | 0) + 12 | 0] = $0 & 1;
     }
     $0 = $5 + 120 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 84:
     std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($5 + 104 | 0, $5 + 784 | 0);
     HEAP32[$5 + 100 >> 2] = tflite__Operator__builtin_options_as_OneHotOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 100 >> 2]) {
      $0 = tflite__Operator__opcode_index_28_29_20const(HEAP32[$5 + 100 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 104 | 0) >> 2] = $0;
     }
     $0 = $5 + 104 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 87:
     std____2__unique_ptr_TfLiteCastParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteCastParams__28_29($5 + 88 | 0, $5 + 784 | 0);
     HEAP32[$5 + 84 >> 2] = tflite__Operator__builtin_options_as_UnpackOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 84 >> 2]) {
      $0 = tflite__Operator__opcode_index_28_29_20const(HEAP32[$5 + 84 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 88 | 0) >> 2] = $0;
      $0 = tflite__Conv2DOptions__stride_w_28_29_20const(HEAP32[$5 + 84 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 88 | 0) + 4 >> 2] = $0;
     }
     $0 = $5 + 88 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 97:
     std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($5 + 72 | 0, $5 + 784 | 0);
     HEAP32[$5 + 68 >> 2] = tflite__Operator__builtin_options_as_LeakyReluOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 68 >> 2]) {
      $6 = tflite__SoftmaxOptions__beta_28_29_20const(HEAP32[$5 + 68 >> 2]);
      HEAPF32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 72 | 0) >> 2] = $6;
     }
     $0 = $5 + 72 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 99:
     std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($5 + 56 | 0, $5 + 784 | 0);
     HEAP32[$5 + 52 >> 2] = tflite__Operator__builtin_options_as_MirrorPadOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 52 >> 2]) {
      $0 = tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$5 + 52 >> 2]) ? 2 : 1;
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 56 | 0) >> 2] = $0;
     }
     $0 = $5 + 56 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 102:
     std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($5 + 40 | 0, $5 + 784 | 0);
     HEAP32[$5 + 36 >> 2] = tflite__Operator__builtin_options_as_UniqueOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 36 >> 2]) {
      $0 = (tflite__UniqueOptions__idx_out_type_28_29_20const(HEAP32[$5 + 36 >> 2]) | 0) == 4 ? 4 : 2;
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 40 | 0) >> 2] = $0;
     }
     $0 = $5 + 40 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 111:
     std____2__unique_ptr_TfLiteCastParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteCastParams__28_29($5 + 24 | 0, $5 + 784 | 0);
     HEAP32[$5 + 20 >> 2] = tflite__Operator__builtin_options_as_ReverseSequenceOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 20 >> 2]) {
      $0 = tflite__Operator__opcode_index_28_29_20const(HEAP32[$5 + 20 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 24 | 0) >> 2] = $0;
      $0 = tflite__Conv2DOptions__stride_w_28_29_20const(HEAP32[$5 + 20 >> 2]);
      HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($5 + 24 | 0) + 4 >> 2] = $0;
     }
     $0 = $5 + 24 | 0;
     $1 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0);
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = $1;
     HEAP32[$5 + 736 >> 2] = 2;
     std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0);
     break label$2;
    case 117:
     HEAP32[$5 + 16 >> 2] = TfLiteIfParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteIfParams__28_29(HEAP32[$5 + 828 >> 2]);
     HEAP32[$5 + 12 >> 2] = tflite__Operator__builtin_options_as_IfOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 12 >> 2]) {
      $0 = tflite__Operator__opcode_index_28_29_20const(HEAP32[$5 + 12 >> 2]);
      HEAP32[HEAP32[$5 + 16 >> 2] >> 2] = $0;
      $0 = tflite__Conv2DOptions__stride_w_28_29_20const(HEAP32[$5 + 12 >> 2]);
      HEAP32[HEAP32[$5 + 16 >> 2] + 4 >> 2] = $0;
     }
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = HEAP32[$5 + 16 >> 2];
     break label$2;
    case 118:
     HEAP32[$5 + 8 >> 2] = TfLiteIfParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteIfParams__28_29(HEAP32[$5 + 828 >> 2]);
     HEAP32[$5 + 4 >> 2] = tflite__Operator__builtin_options_as_WhileOptions_28_29_20const(HEAP32[$5 + 840 >> 2]);
     if (HEAP32[$5 + 4 >> 2]) {
      $0 = tflite__Operator__opcode_index_28_29_20const(HEAP32[$5 + 4 >> 2]);
      HEAP32[HEAP32[$5 + 8 >> 2] >> 2] = $0;
      $0 = tflite__Conv2DOptions__stride_w_28_29_20const(HEAP32[$5 + 4 >> 2]);
      HEAP32[HEAP32[$5 + 8 >> 2] + 4 >> 2] = $0;
     }
     HEAP32[HEAP32[$5 + 824 >> 2] >> 2] = HEAP32[$5 + 8 >> 2];
     break;
    case 9:
     break label$2;
    case 5:
    case 6:
    case 7:
    case 13:
    case 18:
    case 19:
    case 20:
    case 27:
    case 28:
    case 30:
    case 31:
    case 33:
    case 36:
    case 37:
    case 38:
    case 46:
    case 47:
    case 49:
    case 53:
    case 54:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 74:
    case 75:
    case 77:
    case 83:
    case 85:
    case 86:
    case 89:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 98:
    case 100:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 119:
    case 120:
     break label$3;
    }
   }
  }
  HEAP32[$5 + 844 >> 2] = 0;
 }
 global$0 = $5 + 848 | 0;
 return HEAP32[$5 + 844 >> 2];
}
function dlmalloc($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $12 = global$0 - 16 | 0;
 global$0 = $12;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     if ($0 >>> 0 <= 244) {
      $4 = HEAP32[63292];
      $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
      $0 = $6 >>> 3;
      $1 = $4 >>> $0;
      if ($1 & 3) {
       $2 = $0 + (($1 ^ -1) & 1) | 0;
       $3 = $2 << 3;
       $1 = HEAP32[$3 + 253216 >> 2];
       $0 = HEAP32[$1 + 8 >> 2];
       $3 = $3 + 253208 | 0;
       label$7 : {
        if (($0 | 0) == ($3 | 0)) {
         HEAP32[63292] = __wasm_rotl_i32($2) & $4;
         break label$7;
        }
        if (($1 | 0) != HEAP32[$0 + 12 >> 2] | HEAPU32[63296] > $0 >>> 0) {
         break label$3;
        }
        HEAP32[$0 + 12 >> 2] = $3;
        HEAP32[$3 + 8 >> 2] = $0;
       }
       $0 = $1 + 8 | 0;
       $2 = $2 << 3;
       HEAP32[$1 + 4 >> 2] = $2 | 3;
       $1 = $1 + $2 | 0;
       HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
       break label$1;
      }
      $9 = HEAP32[63294];
      if ($6 >>> 0 <= $9 >>> 0) {
       break label$4;
      }
      if ($1) {
       $2 = 2 << $0;
       $0 = (0 - $2 | $2) & $1 << $0;
       $0 = (0 - $0 & $0) + -1 | 0;
       $1 = $0 >>> 12 & 16;
       $2 = $1;
       $0 = $0 >>> $1;
       $1 = $0 >>> 5 & 8;
       $2 = $2 | $1;
       $0 = $0 >>> $1;
       $1 = $0 >>> 2 & 4;
       $2 = $2 | $1;
       $0 = $0 >>> $1;
       $1 = $0 >>> 1 & 2;
       $2 = $2 | $1;
       $0 = $0 >>> $1;
       $1 = $0 >>> 1 & 1;
       $2 = ($2 | $1) + ($0 >>> $1) | 0;
       $3 = $2 << 3;
       $1 = HEAP32[$3 + 253216 >> 2];
       $0 = HEAP32[$1 + 8 >> 2];
       $3 = $3 + 253208 | 0;
       label$10 : {
        if (($0 | 0) == ($3 | 0)) {
         $4 = __wasm_rotl_i32($2) & $4;
         HEAP32[63292] = $4;
         break label$10;
        }
        if (($1 | 0) != HEAP32[$0 + 12 >> 2] | HEAPU32[63296] > $0 >>> 0) {
         break label$3;
        }
        HEAP32[$0 + 12 >> 2] = $3;
        HEAP32[$3 + 8 >> 2] = $0;
       }
       HEAP32[$1 + 4 >> 2] = $6 | 3;
       $7 = $1 + $6 | 0;
       $0 = $2 << 3;
       $3 = $0 - $6 | 0;
       HEAP32[$7 + 4 >> 2] = $3 | 1;
       HEAP32[$0 + $1 >> 2] = $3;
       if ($9) {
        $5 = $9 >>> 3;
        $0 = ($5 << 3) + 253208 | 0;
        $2 = HEAP32[63297];
        $5 = 1 << $5;
        label$13 : {
         if (!($5 & $4)) {
          HEAP32[63292] = $5 | $4;
          $5 = $0;
          break label$13;
         }
         $5 = HEAP32[$0 + 8 >> 2];
         if (HEAPU32[63296] > $5 >>> 0) {
          break label$3;
         }
        }
        HEAP32[$0 + 8 >> 2] = $2;
        HEAP32[$5 + 12 >> 2] = $2;
        HEAP32[$2 + 12 >> 2] = $0;
        HEAP32[$2 + 8 >> 2] = $5;
       }
       $0 = $1 + 8 | 0;
       HEAP32[63297] = $7;
       HEAP32[63294] = $3;
       break label$1;
      }
      $10 = HEAP32[63293];
      if (!$10) {
       break label$4;
      }
      $0 = ($10 & 0 - $10) + -1 | 0;
      $1 = $0 >>> 12 & 16;
      $2 = $1;
      $0 = $0 >>> $1;
      $1 = $0 >>> 5 & 8;
      $2 = $2 | $1;
      $0 = $0 >>> $1;
      $1 = $0 >>> 2 & 4;
      $2 = $2 | $1;
      $0 = $0 >>> $1;
      $1 = $0 >>> 1 & 2;
      $2 = $2 | $1;
      $0 = $0 >>> $1;
      $1 = $0 >>> 1 & 1;
      $1 = HEAP32[(($2 | $1) + ($0 >>> $1) << 2) + 253472 >> 2];
      $3 = (HEAP32[$1 + 4 >> 2] & -8) - $6 | 0;
      $2 = $1;
      while (1) {
       label$16 : {
        $0 = HEAP32[$2 + 16 >> 2];
        if (!$0) {
         $0 = HEAP32[$2 + 20 >> 2];
         if (!$0) {
          break label$16;
         }
        }
        $5 = (HEAP32[$0 + 4 >> 2] & -8) - $6 | 0;
        $2 = $5 >>> 0 < $3 >>> 0;
        $3 = $2 ? $5 : $3;
        $1 = $2 ? $0 : $1;
        $2 = $0;
        continue;
       }
       break;
      }
      $13 = HEAP32[63296];
      if ($13 >>> 0 > $1 >>> 0) {
       break label$3;
      }
      $11 = $1 + $6 | 0;
      if ($11 >>> 0 <= $1 >>> 0) {
       break label$3;
      }
      $8 = HEAP32[$1 + 24 >> 2];
      $5 = HEAP32[$1 + 12 >> 2];
      label$18 : {
       if (($5 | 0) != ($1 | 0)) {
        $0 = HEAP32[$1 + 8 >> 2];
        if ($13 >>> 0 > $0 >>> 0 | HEAP32[$0 + 12 >> 2] != ($1 | 0) | HEAP32[$5 + 8 >> 2] != ($1 | 0)) {
         break label$3;
        }
        HEAP32[$0 + 12 >> 2] = $5;
        HEAP32[$5 + 8 >> 2] = $0;
        break label$18;
       }
       label$20 : {
        $2 = $1 + 20 | 0;
        $0 = HEAP32[$2 >> 2];
        if (!$0) {
         $0 = HEAP32[$1 + 16 >> 2];
         if (!$0) {
          break label$20;
         }
         $2 = $1 + 16 | 0;
        }
        while (1) {
         $7 = $2;
         $5 = $0;
         $2 = $0 + 20 | 0;
         $0 = HEAP32[$2 >> 2];
         if ($0) {
          continue;
         }
         $2 = $5 + 16 | 0;
         $0 = HEAP32[$5 + 16 >> 2];
         if ($0) {
          continue;
         }
         break;
        }
        if ($13 >>> 0 > $7 >>> 0) {
         break label$3;
        }
        HEAP32[$7 >> 2] = 0;
        break label$18;
       }
       $5 = 0;
      }
      label$23 : {
       if (!$8) {
        break label$23;
       }
       $0 = HEAP32[$1 + 28 >> 2];
       $2 = ($0 << 2) + 253472 | 0;
       label$24 : {
        if (HEAP32[$2 >> 2] == ($1 | 0)) {
         HEAP32[$2 >> 2] = $5;
         if ($5) {
          break label$24;
         }
         HEAP32[63293] = __wasm_rotl_i32($0) & $10;
         break label$23;
        }
        if (HEAPU32[63296] > $8 >>> 0) {
         break label$3;
        }
        HEAP32[$8 + (HEAP32[$8 + 16 >> 2] == ($1 | 0) ? 16 : 20) >> 2] = $5;
        if (!$5) {
         break label$23;
        }
       }
       $2 = HEAP32[63296];
       if ($2 >>> 0 > $5 >>> 0) {
        break label$3;
       }
       HEAP32[$5 + 24 >> 2] = $8;
       $0 = HEAP32[$1 + 16 >> 2];
       if ($0) {
        if ($2 >>> 0 > $0 >>> 0) {
         break label$3;
        }
        HEAP32[$5 + 16 >> 2] = $0;
        HEAP32[$0 + 24 >> 2] = $5;
       }
       $0 = HEAP32[$1 + 20 >> 2];
       if (!$0) {
        break label$23;
       }
       if (HEAPU32[63296] > $0 >>> 0) {
        break label$3;
       }
       HEAP32[$5 + 20 >> 2] = $0;
       HEAP32[$0 + 24 >> 2] = $5;
      }
      label$27 : {
       if ($3 >>> 0 <= 15) {
        $0 = $3 + $6 | 0;
        HEAP32[$1 + 4 >> 2] = $0 | 3;
        $0 = $0 + $1 | 0;
        HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
        break label$27;
       }
       HEAP32[$1 + 4 >> 2] = $6 | 3;
       HEAP32[$11 + 4 >> 2] = $3 | 1;
       HEAP32[$3 + $11 >> 2] = $3;
       if ($9) {
        $5 = $9 >>> 3;
        $0 = ($5 << 3) + 253208 | 0;
        $2 = HEAP32[63297];
        $5 = 1 << $5;
        label$30 : {
         if (!($5 & $4)) {
          HEAP32[63292] = $5 | $4;
          $6 = $0;
          break label$30;
         }
         $6 = HEAP32[$0 + 8 >> 2];
         if (HEAPU32[63296] > $6 >>> 0) {
          break label$3;
         }
        }
        HEAP32[$0 + 8 >> 2] = $2;
        HEAP32[$6 + 12 >> 2] = $2;
        HEAP32[$2 + 12 >> 2] = $0;
        HEAP32[$2 + 8 >> 2] = $6;
       }
       HEAP32[63297] = $11;
       HEAP32[63294] = $3;
      }
      $0 = $1 + 8 | 0;
      break label$1;
     }
     $6 = -1;
     if ($0 >>> 0 > 4294967231) {
      break label$4;
     }
     $1 = $0 + 11 | 0;
     $6 = $1 & -8;
     $8 = HEAP32[63293];
     if (!$8) {
      break label$4;
     }
     $2 = 0 - $6 | 0;
     $1 = $1 >>> 8;
     $4 = 0;
     label$35 : {
      if (!$1) {
       break label$35;
      }
      $4 = 31;
      if ($6 >>> 0 > 16777215) {
       break label$35;
      }
      $3 = $1 + 1048320 >>> 16 & 8;
      $1 = $1 << $3;
      $0 = $1 + 520192 >>> 16 & 4;
      $4 = $1 << $0;
      $1 = $4 + 245760 >>> 16 & 2;
      $0 = ($4 << $1 >>> 15) - ($1 | ($0 | $3)) | 0;
      $4 = ($0 << 1 | $6 >>> $0 + 21 & 1) + 28 | 0;
     }
     $3 = HEAP32[($4 << 2) + 253472 >> 2];
     label$32 : {
      label$33 : {
       label$34 : {
        if (!$3) {
         $0 = 0;
         break label$34;
        }
        $1 = $6 << (($4 | 0) == 31 ? 0 : 25 - ($4 >>> 1) | 0);
        $0 = 0;
        while (1) {
         label$38 : {
          $7 = (HEAP32[$3 + 4 >> 2] & -8) - $6 | 0;
          if ($7 >>> 0 >= $2 >>> 0) {
           break label$38;
          }
          $5 = $3;
          $2 = $7;
          if ($2) {
           break label$38;
          }
          $2 = 0;
          $0 = $3;
          break label$33;
         }
         $7 = HEAP32[$3 + 20 >> 2];
         $3 = HEAP32[(($1 >>> 29 & 4) + $3 | 0) + 16 >> 2];
         $0 = $7 ? ($7 | 0) == ($3 | 0) ? $0 : $7 : $0;
         $1 = $1 << (($3 | 0) != 0);
         if ($3) {
          continue;
         }
         break;
        }
       }
       if (!($0 | $5)) {
        $0 = 2 << $4;
        $0 = (0 - $0 | $0) & $8;
        if (!$0) {
         break label$4;
        }
        $0 = ($0 & 0 - $0) + -1 | 0;
        $1 = $0 >>> 12 & 16;
        $3 = $1;
        $0 = $0 >>> $1;
        $1 = $0 >>> 5 & 8;
        $3 = $3 | $1;
        $0 = $0 >>> $1;
        $1 = $0 >>> 2 & 4;
        $3 = $3 | $1;
        $0 = $0 >>> $1;
        $1 = $0 >>> 1 & 2;
        $3 = $3 | $1;
        $0 = $0 >>> $1;
        $1 = $0 >>> 1 & 1;
        $0 = HEAP32[(($3 | $1) + ($0 >>> $1) << 2) + 253472 >> 2];
       }
       if (!$0) {
        break label$32;
       }
      }
      while (1) {
       $3 = (HEAP32[$0 + 4 >> 2] & -8) - $6 | 0;
       $1 = $3 >>> 0 < $2 >>> 0;
       $2 = $1 ? $3 : $2;
       $5 = $1 ? $0 : $5;
       $1 = HEAP32[$0 + 16 >> 2];
       if ($1) {
        $0 = $1;
       } else {
        $0 = HEAP32[$0 + 20 >> 2];
       }
       if ($0) {
        continue;
       }
       break;
      }
     }
     if (!$5 | $2 >>> 0 >= HEAP32[63294] - $6 >>> 0) {
      break label$4;
     }
     $10 = HEAP32[63296];
     if ($10 >>> 0 > $5 >>> 0) {
      break label$3;
     }
     $4 = $5 + $6 | 0;
     if ($4 >>> 0 <= $5 >>> 0) {
      break label$3;
     }
     $9 = HEAP32[$5 + 24 >> 2];
     $1 = HEAP32[$5 + 12 >> 2];
     label$43 : {
      if (($5 | 0) != ($1 | 0)) {
       $0 = HEAP32[$5 + 8 >> 2];
       if ($10 >>> 0 > $0 >>> 0 | HEAP32[$0 + 12 >> 2] != ($5 | 0) | HEAP32[$1 + 8 >> 2] != ($5 | 0)) {
        break label$3;
       }
       HEAP32[$0 + 12 >> 2] = $1;
       HEAP32[$1 + 8 >> 2] = $0;
       break label$43;
      }
      label$45 : {
       $3 = $5 + 20 | 0;
       $0 = HEAP32[$3 >> 2];
       if (!$0) {
        $0 = HEAP32[$5 + 16 >> 2];
        if (!$0) {
         break label$45;
        }
        $3 = $5 + 16 | 0;
       }
       while (1) {
        $7 = $3;
        $1 = $0;
        $3 = $0 + 20 | 0;
        $0 = HEAP32[$3 >> 2];
        if ($0) {
         continue;
        }
        $3 = $1 + 16 | 0;
        $0 = HEAP32[$1 + 16 >> 2];
        if ($0) {
         continue;
        }
        break;
       }
       if ($10 >>> 0 > $7 >>> 0) {
        break label$3;
       }
       HEAP32[$7 >> 2] = 0;
       break label$43;
      }
      $1 = 0;
     }
     label$48 : {
      if (!$9) {
       break label$48;
      }
      $0 = HEAP32[$5 + 28 >> 2];
      $3 = ($0 << 2) + 253472 | 0;
      label$49 : {
       if (HEAP32[$3 >> 2] == ($5 | 0)) {
        HEAP32[$3 >> 2] = $1;
        if ($1) {
         break label$49;
        }
        $8 = __wasm_rotl_i32($0) & $8;
        HEAP32[63293] = $8;
        break label$48;
       }
       if (HEAPU32[63296] > $9 >>> 0) {
        break label$3;
       }
       HEAP32[$9 + (HEAP32[$9 + 16 >> 2] == ($5 | 0) ? 16 : 20) >> 2] = $1;
       if (!$1) {
        break label$48;
       }
      }
      $3 = HEAP32[63296];
      if ($3 >>> 0 > $1 >>> 0) {
       break label$3;
      }
      HEAP32[$1 + 24 >> 2] = $9;
      $0 = HEAP32[$5 + 16 >> 2];
      if ($0) {
       if ($3 >>> 0 > $0 >>> 0) {
        break label$3;
       }
       HEAP32[$1 + 16 >> 2] = $0;
       HEAP32[$0 + 24 >> 2] = $1;
      }
      $0 = HEAP32[$5 + 20 >> 2];
      if (!$0) {
       break label$48;
      }
      if (HEAPU32[63296] > $0 >>> 0) {
       break label$3;
      }
      HEAP32[$1 + 20 >> 2] = $0;
      HEAP32[$0 + 24 >> 2] = $1;
     }
     label$52 : {
      if ($2 >>> 0 <= 15) {
       $0 = $2 + $6 | 0;
       HEAP32[$5 + 4 >> 2] = $0 | 3;
       $0 = $0 + $5 | 0;
       HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
       break label$52;
      }
      HEAP32[$5 + 4 >> 2] = $6 | 3;
      HEAP32[$4 + 4 >> 2] = $2 | 1;
      HEAP32[$2 + $4 >> 2] = $2;
      if ($2 >>> 0 <= 255) {
       $1 = $2 >>> 3;
       $0 = ($1 << 3) + 253208 | 0;
       $2 = HEAP32[63292];
       $1 = 1 << $1;
       label$55 : {
        if (!($2 & $1)) {
         HEAP32[63292] = $1 | $2;
         $3 = $0;
         break label$55;
        }
        $3 = HEAP32[$0 + 8 >> 2];
        if (HEAPU32[63296] > $3 >>> 0) {
         break label$3;
        }
       }
       HEAP32[$0 + 8 >> 2] = $4;
       HEAP32[$3 + 12 >> 2] = $4;
       HEAP32[$4 + 12 >> 2] = $0;
       HEAP32[$4 + 8 >> 2] = $3;
       break label$52;
      }
      $1 = $4;
      $3 = $2 >>> 8;
      $0 = 0;
      label$57 : {
       if (!$3) {
        break label$57;
       }
       $0 = 31;
       if ($2 >>> 0 > 16777215) {
        break label$57;
       }
       $6 = $3 + 1048320 >>> 16 & 8;
       $3 = $3 << $6;
       $0 = $3 + 520192 >>> 16 & 4;
       $7 = $3 << $0;
       $3 = $7 + 245760 >>> 16 & 2;
       $0 = ($7 << $3 >>> 15) - ($3 | ($0 | $6)) | 0;
       $0 = ($0 << 1 | $2 >>> $0 + 21 & 1) + 28 | 0;
      }
      HEAP32[$1 + 28 >> 2] = $0;
      HEAP32[$4 + 16 >> 2] = 0;
      HEAP32[$4 + 20 >> 2] = 0;
      $1 = ($0 << 2) + 253472 | 0;
      label$58 : {
       $3 = 1 << $0;
       label$59 : {
        if (!($3 & $8)) {
         HEAP32[63293] = $3 | $8;
         HEAP32[$1 >> 2] = $4;
         break label$59;
        }
        $0 = $2 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1) | 0);
        $6 = HEAP32[$1 >> 2];
        while (1) {
         $1 = $6;
         if ((HEAP32[$1 + 4 >> 2] & -8) == ($2 | 0)) {
          break label$58;
         }
         $3 = $0 >>> 29;
         $0 = $0 << 1;
         $3 = (($3 & 4) + $1 | 0) + 16 | 0;
         $6 = HEAP32[$3 >> 2];
         if ($6) {
          continue;
         }
         break;
        }
        if (HEAPU32[63296] > $3 >>> 0) {
         break label$3;
        }
        HEAP32[$3 >> 2] = $4;
       }
       HEAP32[$4 + 24 >> 2] = $1;
       HEAP32[$4 + 12 >> 2] = $4;
       HEAP32[$4 + 8 >> 2] = $4;
       break label$52;
      }
      $2 = HEAP32[63296];
      $0 = HEAP32[$1 + 8 >> 2];
      if ($2 >>> 0 > $0 >>> 0 | $2 >>> 0 > $1 >>> 0) {
       break label$3;
      }
      HEAP32[$0 + 12 >> 2] = $4;
      HEAP32[$1 + 8 >> 2] = $4;
      HEAP32[$4 + 24 >> 2] = 0;
      HEAP32[$4 + 12 >> 2] = $1;
      HEAP32[$4 + 8 >> 2] = $0;
     }
     $0 = $5 + 8 | 0;
     break label$1;
    }
    $1 = HEAP32[63294];
    if ($1 >>> 0 >= $6 >>> 0) {
     $0 = HEAP32[63297];
     $2 = $1 - $6 | 0;
     label$63 : {
      if ($2 >>> 0 >= 16) {
       HEAP32[63294] = $2;
       $3 = $0 + $6 | 0;
       HEAP32[63297] = $3;
       HEAP32[$3 + 4 >> 2] = $2 | 1;
       HEAP32[$0 + $1 >> 2] = $2;
       HEAP32[$0 + 4 >> 2] = $6 | 3;
       break label$63;
      }
      HEAP32[63297] = 0;
      HEAP32[63294] = 0;
      HEAP32[$0 + 4 >> 2] = $1 | 3;
      $1 = $0 + $1 | 0;
      HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
     }
     $0 = $0 + 8 | 0;
     break label$1;
    }
    $3 = HEAP32[63295];
    if ($3 >>> 0 > $6 >>> 0) {
     $1 = $3 - $6 | 0;
     HEAP32[63295] = $1;
     $0 = HEAP32[63298];
     $2 = $0 + $6 | 0;
     HEAP32[63298] = $2;
     HEAP32[$2 + 4 >> 2] = $1 | 1;
     HEAP32[$0 + 4 >> 2] = $6 | 3;
     $0 = $0 + 8 | 0;
     break label$1;
    }
    $0 = 0;
    $5 = $6 + 47 | 0;
    $2 = $5;
    if (HEAP32[63410]) {
     $1 = HEAP32[63412];
    } else {
     HEAP32[63413] = -1;
     HEAP32[63414] = -1;
     HEAP32[63411] = 4096;
     HEAP32[63412] = 4096;
     HEAP32[63410] = $12 + 12 & -16 ^ 1431655768;
     HEAP32[63415] = 0;
     HEAP32[63403] = 0;
     $1 = 4096;
    }
    $4 = $2 + $1 | 0;
    $7 = 0 - $1 | 0;
    $2 = $4 & $7;
    if ($2 >>> 0 <= $6 >>> 0) {
     break label$1;
    }
    $1 = HEAP32[63402];
    if ($1) {
     $8 = HEAP32[63400];
     $9 = $8 + $2 | 0;
     if ($9 >>> 0 <= $8 >>> 0 | $9 >>> 0 > $1 >>> 0) {
      break label$1;
     }
    }
    label$69 : {
     if (!(HEAPU8[253612] & 4)) {
      label$71 : {
       label$72 : {
        label$73 : {
         label$74 : {
          $1 = HEAP32[63298];
          if ($1) {
           $0 = 253616;
           while (1) {
            $8 = HEAP32[$0 >> 2];
            if ($8 + HEAP32[$0 + 4 >> 2] >>> 0 > $1 >>> 0 ? $8 >>> 0 <= $1 >>> 0 : 0) {
             break label$74;
            }
            $0 = HEAP32[$0 + 8 >> 2];
            if ($0) {
             continue;
            }
            break;
           }
          }
          $1 = sbrk(0);
          if (($1 | 0) == -1) {
           break label$71;
          }
          $4 = $2;
          $0 = HEAP32[63411];
          $3 = $0 + -1 | 0;
          if ($3 & $1) {
           $4 = ($2 - $1 | 0) + ($1 + $3 & 0 - $0) | 0;
          }
          if ($4 >>> 0 <= $6 >>> 0 | $4 >>> 0 > 2147483646) {
           break label$71;
          }
          $0 = HEAP32[63402];
          if ($0) {
           $3 = HEAP32[63400];
           $7 = $3 + $4 | 0;
           if ($7 >>> 0 <= $3 >>> 0 | $7 >>> 0 > $0 >>> 0) {
            break label$71;
           }
          }
          $0 = sbrk($4);
          if (($1 | 0) != ($0 | 0)) {
           break label$73;
          }
          break label$69;
         }
         $4 = $7 & $4 - $3;
         if ($4 >>> 0 > 2147483646) {
          break label$71;
         }
         $1 = sbrk($4);
         if (($1 | 0) == (HEAP32[$0 >> 2] + HEAP32[$0 + 4 >> 2] | 0)) {
          break label$72;
         }
         $0 = $1;
        }
        $1 = $0;
        if (!($6 + 48 >>> 0 <= $4 >>> 0 | $4 >>> 0 > 2147483646 | ($0 | 0) == -1)) {
         $0 = HEAP32[63412];
         $0 = $0 + ($5 - $4 | 0) & 0 - $0;
         if ($0 >>> 0 > 2147483646) {
          break label$69;
         }
         if ((sbrk($0) | 0) != -1) {
          $4 = $0 + $4 | 0;
          break label$69;
         }
         sbrk(0 - $4 | 0);
         break label$71;
        }
        if (($1 | 0) != -1) {
         break label$69;
        }
        break label$71;
       }
       if (($1 | 0) != -1) {
        break label$69;
       }
      }
      HEAP32[63403] = HEAP32[63403] | 4;
     }
     if ($2 >>> 0 > 2147483646) {
      break label$2;
     }
     $1 = sbrk($2);
     $0 = sbrk(0);
     if ($1 >>> 0 >= $0 >>> 0 | ($1 | 0) == -1 | ($0 | 0) == -1) {
      break label$2;
     }
     $4 = $0 - $1 | 0;
     if ($4 >>> 0 <= $6 + 40 >>> 0) {
      break label$2;
     }
    }
    $0 = HEAP32[63400] + $4 | 0;
    HEAP32[63400] = $0;
    if ($0 >>> 0 > HEAPU32[63401]) {
     HEAP32[63401] = $0;
    }
    label$83 : {
     label$84 : {
      label$85 : {
       $3 = HEAP32[63298];
       if ($3) {
        $0 = 253616;
        while (1) {
         $2 = HEAP32[$0 >> 2];
         $5 = HEAP32[$0 + 4 >> 2];
         if (($2 + $5 | 0) == ($1 | 0)) {
          break label$85;
         }
         $0 = HEAP32[$0 + 8 >> 2];
         if ($0) {
          continue;
         }
         break;
        }
        break label$84;
       }
       $0 = HEAP32[63296];
       if (!($1 >>> 0 >= $0 >>> 0 ? $0 : 0)) {
        HEAP32[63296] = $1;
       }
       $0 = 0;
       HEAP32[63405] = $4;
       HEAP32[63404] = $1;
       HEAP32[63300] = -1;
       HEAP32[63301] = HEAP32[63410];
       HEAP32[63407] = 0;
       while (1) {
        $2 = $0 << 3;
        $3 = $2 + 253208 | 0;
        HEAP32[$2 + 253216 >> 2] = $3;
        HEAP32[$2 + 253220 >> 2] = $3;
        $0 = $0 + 1 | 0;
        if (($0 | 0) != 32) {
         continue;
        }
        break;
       }
       $0 = $4 + -40 | 0;
       $2 = $1 + 8 & 7 ? -8 - $1 & 7 : 0;
       $3 = $0 - $2 | 0;
       HEAP32[63295] = $3;
       $2 = $1 + $2 | 0;
       HEAP32[63298] = $2;
       HEAP32[$2 + 4 >> 2] = $3 | 1;
       HEAP32[($0 + $1 | 0) + 4 >> 2] = 40;
       HEAP32[63299] = HEAP32[63414];
       break label$83;
      }
      if (HEAPU8[$0 + 12 | 0] & 8 | $1 >>> 0 <= $3 >>> 0 | $2 >>> 0 > $3 >>> 0) {
       break label$84;
      }
      HEAP32[$0 + 4 >> 2] = $5 + $4;
      $0 = $3 + 8 & 7 ? -8 - $3 & 7 : 0;
      $1 = $0 + $3 | 0;
      HEAP32[63298] = $1;
      $2 = HEAP32[63295] + $4 | 0;
      $0 = $2 - $0 | 0;
      HEAP32[63295] = $0;
      HEAP32[$1 + 4 >> 2] = $0 | 1;
      HEAP32[($2 + $3 | 0) + 4 >> 2] = 40;
      HEAP32[63299] = HEAP32[63414];
      break label$83;
     }
     $5 = HEAP32[63296];
     if ($1 >>> 0 < $5 >>> 0) {
      HEAP32[63296] = $1;
      $5 = $1;
     }
     $2 = $1 + $4 | 0;
     $0 = 253616;
     label$91 : {
      label$92 : {
       label$93 : {
        while (1) {
         if (($2 | 0) != HEAP32[$0 >> 2]) {
          $0 = HEAP32[$0 + 8 >> 2];
          if ($0) {
           continue;
          }
          break label$93;
         }
         break;
        }
        if (!(HEAPU8[$0 + 12 | 0] & 8)) {
         break label$92;
        }
       }
       $0 = 253616;
       while (1) {
        $2 = HEAP32[$0 >> 2];
        if ($2 >>> 0 <= $3 >>> 0) {
         $5 = $2 + HEAP32[$0 + 4 >> 2] | 0;
         if ($5 >>> 0 > $3 >>> 0) {
          break label$91;
         }
        }
        $0 = HEAP32[$0 + 8 >> 2];
        continue;
       }
      }
      HEAP32[$0 >> 2] = $1;
      HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + $4;
      $9 = ($1 + 8 & 7 ? -8 - $1 & 7 : 0) + $1 | 0;
      HEAP32[$9 + 4 >> 2] = $6 | 3;
      $1 = $2 + ($2 + 8 & 7 ? -8 - $2 & 7 : 0) | 0;
      $0 = ($1 - $9 | 0) - $6 | 0;
      $7 = $6 + $9 | 0;
      label$98 : {
       if (($1 | 0) == ($3 | 0)) {
        HEAP32[63298] = $7;
        $0 = HEAP32[63295] + $0 | 0;
        HEAP32[63295] = $0;
        HEAP32[$7 + 4 >> 2] = $0 | 1;
        break label$98;
       }
       if (HEAP32[63297] == ($1 | 0)) {
        HEAP32[63297] = $7;
        $0 = HEAP32[63294] + $0 | 0;
        HEAP32[63294] = $0;
        HEAP32[$7 + 4 >> 2] = $0 | 1;
        HEAP32[$0 + $7 >> 2] = $0;
        break label$98;
       }
       $10 = HEAP32[$1 + 4 >> 2];
       if (($10 & 3) == 1) {
        label$102 : {
         if ($10 >>> 0 <= 255) {
          $2 = HEAP32[$1 + 12 >> 2];
          $3 = HEAP32[$1 + 8 >> 2];
          $6 = $10 >>> 3;
          $4 = ($6 << 3) + 253208 | 0;
          if (HEAP32[$3 + 12 >> 2] != ($1 | 0) | $5 >>> 0 > $3 >>> 0 ? ($3 | 0) != ($4 | 0) : 0) {
           break label$3;
          }
          if (($2 | 0) == ($3 | 0)) {
           HEAP32[63292] = HEAP32[63292] & __wasm_rotl_i32($6);
           break label$102;
          }
          if (HEAP32[$2 + 8 >> 2] != ($1 | 0) | $5 >>> 0 > $2 >>> 0 ? ($2 | 0) != ($4 | 0) : 0) {
           break label$3;
          }
          HEAP32[$3 + 12 >> 2] = $2;
          HEAP32[$2 + 8 >> 2] = $3;
          break label$102;
         }
         $8 = HEAP32[$1 + 24 >> 2];
         $4 = HEAP32[$1 + 12 >> 2];
         label$107 : {
          if (($4 | 0) != ($1 | 0)) {
           $2 = HEAP32[$1 + 8 >> 2];
           if ($5 >>> 0 > $2 >>> 0 | HEAP32[$2 + 12 >> 2] != ($1 | 0) | HEAP32[$4 + 8 >> 2] != ($1 | 0)) {
            break label$3;
           }
           HEAP32[$2 + 12 >> 2] = $4;
           HEAP32[$4 + 8 >> 2] = $2;
           break label$107;
          }
          label$109 : {
           $3 = $1 + 20 | 0;
           $6 = HEAP32[$3 >> 2];
           if ($6) {
            break label$109;
           }
           $3 = $1 + 16 | 0;
           $6 = HEAP32[$3 >> 2];
           if ($6) {
            break label$109;
           }
           $4 = 0;
           break label$107;
          }
          while (1) {
           $2 = $3;
           $4 = $6;
           $3 = $4 + 20 | 0;
           $6 = HEAP32[$3 >> 2];
           if ($6) {
            continue;
           }
           $3 = $4 + 16 | 0;
           $6 = HEAP32[$4 + 16 >> 2];
           if ($6) {
            continue;
           }
           break;
          }
          if ($5 >>> 0 > $2 >>> 0) {
           break label$3;
          }
          HEAP32[$2 >> 2] = 0;
         }
         if (!$8) {
          break label$102;
         }
         $2 = HEAP32[$1 + 28 >> 2];
         $3 = ($2 << 2) + 253472 | 0;
         label$111 : {
          if (HEAP32[$3 >> 2] == ($1 | 0)) {
           HEAP32[$3 >> 2] = $4;
           if ($4) {
            break label$111;
           }
           HEAP32[63293] = HEAP32[63293] & __wasm_rotl_i32($2);
           break label$102;
          }
          if (HEAPU32[63296] > $8 >>> 0) {
           break label$3;
          }
          HEAP32[$8 + (HEAP32[$8 + 16 >> 2] == ($1 | 0) ? 16 : 20) >> 2] = $4;
          if (!$4) {
           break label$102;
          }
         }
         $3 = HEAP32[63296];
         if ($3 >>> 0 > $4 >>> 0) {
          break label$3;
         }
         HEAP32[$4 + 24 >> 2] = $8;
         $2 = HEAP32[$1 + 16 >> 2];
         if ($2) {
          if ($3 >>> 0 > $2 >>> 0) {
           break label$3;
          }
          HEAP32[$4 + 16 >> 2] = $2;
          HEAP32[$2 + 24 >> 2] = $4;
         }
         $2 = HEAP32[$1 + 20 >> 2];
         if (!$2) {
          break label$102;
         }
         if (HEAPU32[63296] > $2 >>> 0) {
          break label$3;
         }
         HEAP32[$4 + 20 >> 2] = $2;
         HEAP32[$2 + 24 >> 2] = $4;
        }
        $2 = $10 & -8;
        $0 = $2 + $0 | 0;
        $1 = $1 + $2 | 0;
       }
       HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] & -2;
       HEAP32[$7 + 4 >> 2] = $0 | 1;
       HEAP32[$0 + $7 >> 2] = $0;
       if ($0 >>> 0 <= 255) {
        $1 = $0 >>> 3;
        $0 = ($1 << 3) + 253208 | 0;
        $2 = HEAP32[63292];
        $1 = 1 << $1;
        label$115 : {
         if (!($2 & $1)) {
          HEAP32[63292] = $1 | $2;
          $3 = $0;
          break label$115;
         }
         $3 = HEAP32[$0 + 8 >> 2];
         if (HEAPU32[63296] > $3 >>> 0) {
          break label$3;
         }
        }
        HEAP32[$0 + 8 >> 2] = $7;
        HEAP32[$3 + 12 >> 2] = $7;
        HEAP32[$7 + 12 >> 2] = $0;
        HEAP32[$7 + 8 >> 2] = $3;
        break label$98;
       }
       $2 = $7;
       $3 = $0 >>> 8;
       $1 = 0;
       label$117 : {
        if (!$3) {
         break label$117;
        }
        $1 = 31;
        if ($0 >>> 0 > 16777215) {
         break label$117;
        }
        $5 = $3 + 1048320 >>> 16 & 8;
        $3 = $3 << $5;
        $1 = $3 + 520192 >>> 16 & 4;
        $6 = $3 << $1;
        $3 = $6 + 245760 >>> 16 & 2;
        $1 = ($6 << $3 >>> 15) - ($3 | ($1 | $5)) | 0;
        $1 = ($1 << 1 | $0 >>> $1 + 21 & 1) + 28 | 0;
       }
       HEAP32[$2 + 28 >> 2] = $1;
       HEAP32[$7 + 16 >> 2] = 0;
       HEAP32[$7 + 20 >> 2] = 0;
       $2 = ($1 << 2) + 253472 | 0;
       label$118 : {
        $3 = HEAP32[63293];
        $5 = 1 << $1;
        label$119 : {
         if (!($3 & $5)) {
          HEAP32[63293] = $3 | $5;
          HEAP32[$2 >> 2] = $7;
          break label$119;
         }
         $3 = $0 << (($1 | 0) == 31 ? 0 : 25 - ($1 >>> 1) | 0);
         $1 = HEAP32[$2 >> 2];
         while (1) {
          $2 = $1;
          if ((HEAP32[$1 + 4 >> 2] & -8) == ($0 | 0)) {
           break label$118;
          }
          $1 = $3 >>> 29;
          $3 = $3 << 1;
          $5 = (($1 & 4) + $2 | 0) + 16 | 0;
          $1 = HEAP32[$5 >> 2];
          if ($1) {
           continue;
          }
          break;
         }
         if (HEAPU32[63296] > $5 >>> 0) {
          break label$3;
         }
         HEAP32[$5 >> 2] = $7;
        }
        HEAP32[$7 + 24 >> 2] = $2;
        HEAP32[$7 + 12 >> 2] = $7;
        HEAP32[$7 + 8 >> 2] = $7;
        break label$98;
       }
       $1 = HEAP32[63296];
       $0 = HEAP32[$2 + 8 >> 2];
       if ($1 >>> 0 > $0 >>> 0 | $1 >>> 0 > $2 >>> 0) {
        break label$3;
       }
       HEAP32[$0 + 12 >> 2] = $7;
       HEAP32[$2 + 8 >> 2] = $7;
       HEAP32[$7 + 24 >> 2] = 0;
       HEAP32[$7 + 12 >> 2] = $2;
       HEAP32[$7 + 8 >> 2] = $0;
      }
      $0 = $9 + 8 | 0;
      break label$1;
     }
     $0 = $4 + -40 | 0;
     $2 = $1 + 8 & 7 ? -8 - $1 & 7 : 0;
     $7 = $0 - $2 | 0;
     HEAP32[63295] = $7;
     $2 = $1 + $2 | 0;
     HEAP32[63298] = $2;
     HEAP32[$2 + 4 >> 2] = $7 | 1;
     HEAP32[($0 + $1 | 0) + 4 >> 2] = 40;
     HEAP32[63299] = HEAP32[63414];
     $0 = ($5 + ($5 + -39 & 7 ? 39 - $5 & 7 : 0) | 0) + -47 | 0;
     $2 = $0 >>> 0 < $3 + 16 >>> 0 ? $3 : $0;
     HEAP32[$2 + 4 >> 2] = 27;
     $0 = HEAP32[63407];
     HEAP32[$2 + 16 >> 2] = HEAP32[63406];
     HEAP32[$2 + 20 >> 2] = $0;
     $0 = HEAP32[63405];
     HEAP32[$2 + 8 >> 2] = HEAP32[63404];
     HEAP32[$2 + 12 >> 2] = $0;
     HEAP32[63406] = $2 + 8;
     HEAP32[63405] = $4;
     HEAP32[63404] = $1;
     HEAP32[63407] = 0;
     $0 = $2 + 24 | 0;
     while (1) {
      HEAP32[$0 + 4 >> 2] = 7;
      $1 = $0 + 8 | 0;
      $0 = $0 + 4 | 0;
      if ($1 >>> 0 < $5 >>> 0) {
       continue;
      }
      break;
     }
     if (($2 | 0) == ($3 | 0)) {
      break label$83;
     }
     HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] & -2;
     $5 = $2 - $3 | 0;
     HEAP32[$3 + 4 >> 2] = $5 | 1;
     HEAP32[$2 >> 2] = $5;
     if ($5 >>> 0 <= 255) {
      $1 = $5 >>> 3;
      $0 = ($1 << 3) + 253208 | 0;
      $2 = HEAP32[63292];
      $1 = 1 << $1;
      label$124 : {
       if (!($2 & $1)) {
        HEAP32[63292] = $1 | $2;
        $2 = $0;
        break label$124;
       }
       $2 = HEAP32[$0 + 8 >> 2];
       if (HEAPU32[63296] > $2 >>> 0) {
        break label$3;
       }
      }
      HEAP32[$0 + 8 >> 2] = $3;
      HEAP32[$2 + 12 >> 2] = $3;
      HEAP32[$3 + 12 >> 2] = $0;
      HEAP32[$3 + 8 >> 2] = $2;
      break label$83;
     }
     HEAP32[$3 + 16 >> 2] = 0;
     HEAP32[$3 + 20 >> 2] = 0;
     $1 = $3;
     $2 = $5 >>> 8;
     $0 = 0;
     label$126 : {
      if (!$2) {
       break label$126;
      }
      $0 = 31;
      if ($5 >>> 0 > 16777215) {
       break label$126;
      }
      $4 = $2 + 1048320 >>> 16 & 8;
      $2 = $2 << $4;
      $0 = $2 + 520192 >>> 16 & 4;
      $7 = $2 << $0;
      $2 = $7 + 245760 >>> 16 & 2;
      $0 = ($7 << $2 >>> 15) - ($2 | ($0 | $4)) | 0;
      $0 = ($0 << 1 | $5 >>> $0 + 21 & 1) + 28 | 0;
     }
     HEAP32[$1 + 28 >> 2] = $0;
     $1 = ($0 << 2) + 253472 | 0;
     label$127 : {
      $2 = HEAP32[63293];
      $4 = 1 << $0;
      label$128 : {
       if (!($2 & $4)) {
        HEAP32[63293] = $2 | $4;
        HEAP32[$1 >> 2] = $3;
        HEAP32[$3 + 24 >> 2] = $1;
        break label$128;
       }
       $0 = $5 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1) | 0);
       $1 = HEAP32[$1 >> 2];
       while (1) {
        $2 = $1;
        if (($5 | 0) == (HEAP32[$1 + 4 >> 2] & -8)) {
         break label$127;
        }
        $1 = $0 >>> 29;
        $0 = $0 << 1;
        $4 = ($2 + ($1 & 4) | 0) + 16 | 0;
        $1 = HEAP32[$4 >> 2];
        if ($1) {
         continue;
        }
        break;
       }
       if (HEAPU32[63296] > $4 >>> 0) {
        break label$3;
       }
       HEAP32[$4 >> 2] = $3;
       HEAP32[$3 + 24 >> 2] = $2;
      }
      HEAP32[$3 + 12 >> 2] = $3;
      HEAP32[$3 + 8 >> 2] = $3;
      break label$83;
     }
     $1 = HEAP32[63296];
     $0 = HEAP32[$2 + 8 >> 2];
     if ($1 >>> 0 > $0 >>> 0 | $1 >>> 0 > $2 >>> 0) {
      break label$3;
     }
     HEAP32[$0 + 12 >> 2] = $3;
     HEAP32[$2 + 8 >> 2] = $3;
     HEAP32[$3 + 24 >> 2] = 0;
     HEAP32[$3 + 12 >> 2] = $2;
     HEAP32[$3 + 8 >> 2] = $0;
    }
    $0 = HEAP32[63295];
    if ($0 >>> 0 <= $6 >>> 0) {
     break label$2;
    }
    $1 = $0 - $6 | 0;
    HEAP32[63295] = $1;
    $0 = HEAP32[63298];
    $2 = $0 + $6 | 0;
    HEAP32[63298] = $2;
    HEAP32[$2 + 4 >> 2] = $1 | 1;
    HEAP32[$0 + 4 >> 2] = $6 | 3;
    $0 = $0 + 8 | 0;
    break label$1;
   }
   abort();
   abort();
  }
  HEAP32[63273] = 48;
  $0 = 0;
 }
 global$0 = $12 + 16 | 0;
 return $0 | 0;
}
function tflite__ops__micro__svdf__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 1248 | 0;
 global$0 = $2;
 HEAP32[$2 + 1240 >> 2] = $0;
 HEAP32[$2 + 1236 >> 2] = $1;
 HEAP32[$2 + 1232 >> 2] = HEAP32[HEAP32[$2 + 1236 >> 2] + 20 >> 2];
 label$1 : {
  if (HEAP32[HEAP32[HEAP32[$2 + 1236 >> 2] >> 2] >> 2] != 6) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = HEAP32[HEAP32[HEAP32[$2 + 1236 >> 2] >> 2] >> 2];
   HEAP32[$2 + 20 >> 2] = 6;
   HEAP32[$2 + 16 >> 2] = $3;
   HEAP32[$2 + 12 >> 2] = 45827;
   HEAP32[$2 + 8 >> 2] = 45808;
   HEAP32[$2 + 4 >> 2] = 318;
   HEAP32[$2 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 1228 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 1240 >> 2], HEAP32[$2 + 1236 >> 2], 0);
  HEAP32[$2 + 1224 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 1240 >> 2], HEAP32[$2 + 1236 >> 2], 1);
  HEAP32[$2 + 1220 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 1240 >> 2], HEAP32[$2 + 1236 >> 2], 2);
  HEAP32[$2 + 1216 >> 2] = tflite__GetOptionalInputTensor_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 1240 >> 2], HEAP32[$2 + 1236 >> 2], 3);
  HEAP32[$2 + 1212 >> 2] = HEAP32[HEAP32[$2 + 1240 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$2 + 1236 >> 2] >> 2] + 20 >> 2], 56);
  HEAP32[$2 + 1208 >> 2] = HEAP32[HEAP32[$2 + 1232 >> 2] >> 2];
  HEAP32[$2 + 1204 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 1228 >> 2] + 8 >> 2] + 8 >> 2];
  HEAP32[$2 + 1200 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 1228 >> 2] + 8 >> 2] + 4 >> 2];
  HEAP32[$2 + 1196 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 1224 >> 2] + 8 >> 2] + 4 >> 2];
  if (HEAP32[$2 + 1196 >> 2] % HEAP32[$2 + 1208 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = HEAP32[$2 + 1196 >> 2] % HEAP32[$2 + 1208 >> 2] | 0;
   HEAP32[$2 + 52 >> 2] = 0;
   HEAP32[$2 + 48 >> 2] = $3;
   HEAP32[$2 + 44 >> 2] = 45848;
   HEAP32[$2 + 40 >> 2] = 45829;
   HEAP32[$2 + 36 >> 2] = 333;
   HEAP32[$2 + 32 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2 + 32 | 0);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 1192 >> 2] = HEAP32[$2 + 1196 >> 2] / HEAP32[$2 + 1208 >> 2];
  HEAP32[$2 + 1188 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 1220 >> 2] + 8 >> 2] + 8 >> 2];
  if (HEAP32[HEAP32[$2 + 1228 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = HEAP32[HEAP32[$2 + 1228 >> 2] >> 2];
   HEAP32[$2 + 84 >> 2] = 1;
   HEAP32[$2 + 80 >> 2] = $3;
   HEAP32[$2 + 76 >> 2] = 45862;
   HEAP32[$2 + 72 >> 2] = 45850;
   HEAP32[$2 + 68 >> 2] = 338;
   HEAP32[$2 + 64 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2 - -64 | 0);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  if ((tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 1228 >> 2]) | 0) != 2) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 1228 >> 2]);
   HEAP32[$2 + 116 >> 2] = 2;
   HEAP32[$2 + 112 >> 2] = $3;
   HEAP32[$2 + 108 >> 2] = 45898;
   HEAP32[$2 + 104 >> 2] = 45877;
   HEAP32[$2 + 100 >> 2] = 339;
   HEAP32[$2 + 96 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2 + 96 | 0);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  if ((tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 1224 >> 2]) | 0) != 2) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 1224 >> 2]);
   HEAP32[$2 + 148 >> 2] = 2;
   HEAP32[$2 + 144 >> 2] = $3;
   HEAP32[$2 + 140 >> 2] = 45898;
   HEAP32[$2 + 136 >> 2] = 45900;
   HEAP32[$2 + 132 >> 2] = 342;
   HEAP32[$2 + 128 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2 + 128 | 0);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[HEAP32[$2 + 1224 >> 2] + 8 >> 2] + 8 >> 2] != HEAP32[$2 + 1204 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = HEAP32[HEAP32[HEAP32[$2 + 1224 >> 2] + 8 >> 2] + 8 >> 2];
   HEAP32[$2 + 180 >> 2] = HEAP32[$2 + 1204 >> 2];
   HEAP32[$2 + 176 >> 2] = $3;
   HEAP32[$2 + 172 >> 2] = 45962;
   HEAP32[$2 + 168 >> 2] = 45931;
   HEAP32[$2 + 164 >> 2] = 343;
   HEAP32[$2 + 160 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2 + 160 | 0);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  if ((tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 1220 >> 2]) | 0) != 2) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 1220 >> 2]);
   HEAP32[$2 + 212 >> 2] = 2;
   HEAP32[$2 + 208 >> 2] = $3;
   HEAP32[$2 + 204 >> 2] = 45898;
   HEAP32[$2 + 200 >> 2] = 45973;
   HEAP32[$2 + 196 >> 2] = 346;
   HEAP32[$2 + 192 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2 + 192 | 0);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[HEAP32[$2 + 1220 >> 2] + 8 >> 2] + 4 >> 2] != HEAP32[$2 + 1196 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = HEAP32[HEAP32[HEAP32[$2 + 1220 >> 2] + 8 >> 2] + 4 >> 2];
   HEAP32[$2 + 244 >> 2] = HEAP32[$2 + 1196 >> 2];
   HEAP32[$2 + 240 >> 2] = $3;
   HEAP32[$2 + 236 >> 2] = 46029;
   HEAP32[$2 + 232 >> 2] = 46001;
   HEAP32[$2 + 228 >> 2] = 347;
   HEAP32[$2 + 224 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2 + 224 | 0);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[HEAP32[$2 + 1220 >> 2] + 8 >> 2] + 8 >> 2] != HEAP32[$2 + 1188 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = HEAP32[HEAP32[HEAP32[$2 + 1220 >> 2] + 8 >> 2] + 8 >> 2];
   HEAP32[$2 + 276 >> 2] = HEAP32[$2 + 1188 >> 2];
   HEAP32[$2 + 272 >> 2] = $3;
   HEAP32[$2 + 268 >> 2] = 46069;
   HEAP32[$2 + 264 >> 2] = 46041;
   HEAP32[$2 + 260 >> 2] = 348;
   HEAP32[$2 + 256 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2 + 256 | 0);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[$2 + 1216 >> 2]) {
   if (HEAP32[HEAP32[HEAP32[$2 + 1216 >> 2] + 8 >> 2] + 4 >> 2] != HEAP32[$2 + 1192 >> 2]) {
    $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 1240 >> 2];
    $3 = HEAP32[HEAP32[HEAP32[$2 + 1216 >> 2] + 8 >> 2] + 4 >> 2];
    HEAP32[$2 + 308 >> 2] = HEAP32[$2 + 1192 >> 2];
    HEAP32[$2 + 304 >> 2] = $3;
    HEAP32[$2 + 300 >> 2] = 46101;
    HEAP32[$2 + 296 >> 2] = 46081;
    HEAP32[$2 + 292 >> 2] = 352;
    HEAP32[$2 + 288 >> 2] = 45713;
    FUNCTION_TABLE[$0]($1, 45687, $2 + 288 | 0);
    HEAP32[$2 + 1244 >> 2] = 1;
    break label$1;
   }
   if (HEAP32[HEAP32[$2 + 1216 >> 2] >> 2] != 1) {
    $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 1240 >> 2];
    $3 = HEAP32[HEAP32[$2 + 1216 >> 2] >> 2];
    HEAP32[$2 + 340 >> 2] = 1;
    HEAP32[$2 + 336 >> 2] = $3;
    HEAP32[$2 + 332 >> 2] = 45862;
    HEAP32[$2 + 328 >> 2] = 46111;
    HEAP32[$2 + 324 >> 2] = 353;
    HEAP32[$2 + 320 >> 2] = 45713;
    FUNCTION_TABLE[$0]($1, 45687, $2 + 320 | 0);
    HEAP32[$2 + 1244 >> 2] = 1;
    break label$1;
   }
  }
  if (HEAP32[HEAP32[$2 + 1212 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = HEAP32[HEAP32[$2 + 1212 >> 2] >> 2];
   HEAP32[$2 + 372 >> 2] = 1;
   HEAP32[$2 + 368 >> 2] = $3;
   HEAP32[$2 + 364 >> 2] = 45862;
   HEAP32[$2 + 360 >> 2] = 46122;
   HEAP32[$2 + 356 >> 2] = 357;
   HEAP32[$2 + 352 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2 + 352 | 0);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  if ((tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 1212 >> 2]) | 0) != 2) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 1212 >> 2]);
   HEAP32[$2 + 404 >> 2] = 2;
   HEAP32[$2 + 400 >> 2] = $3;
   HEAP32[$2 + 396 >> 2] = 45898;
   HEAP32[$2 + 392 >> 2] = 46145;
   HEAP32[$2 + 388 >> 2] = 358;
   HEAP32[$2 + 384 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2 + 384 | 0);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[HEAP32[$2 + 1212 >> 2] + 8 >> 2] + 4 >> 2] != HEAP32[$2 + 1200 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = HEAP32[HEAP32[HEAP32[$2 + 1212 >> 2] + 8 >> 2] + 4 >> 2];
   HEAP32[$2 + 436 >> 2] = HEAP32[$2 + 1200 >> 2];
   HEAP32[$2 + 432 >> 2] = $3;
   HEAP32[$2 + 428 >> 2] = 46209;
   HEAP32[$2 + 424 >> 2] = 46177;
   HEAP32[$2 + 420 >> 2] = 359;
   HEAP32[$2 + 416 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2 + 416 | 0);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[HEAP32[$2 + 1212 >> 2] + 8 >> 2] + 8 >> 2] != (Math_imul(HEAP32[$2 + 1188 >> 2], HEAP32[$2 + 1196 >> 2]) | 0)) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = HEAP32[HEAP32[HEAP32[$2 + 1212 >> 2] + 8 >> 2] + 8 >> 2];
   HEAP32[$2 + 468 >> 2] = Math_imul(HEAP32[$2 + 1188 >> 2], HEAP32[$2 + 1196 >> 2]);
   HEAP32[$2 + 464 >> 2] = $3;
   HEAP32[$2 + 460 >> 2] = 46252;
   HEAP32[$2 + 456 >> 2] = 46220;
   HEAP32[$2 + 452 >> 2] = 361;
   HEAP32[$2 + 448 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2 + 448 | 0);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 1184 >> 2] = HEAP32[HEAP32[$2 + 1240 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$2 + 1236 >> 2] >> 2] + 24 >> 2], 56);
  if (HEAP32[HEAP32[$2 + 1184 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = HEAP32[HEAP32[$2 + 1184 >> 2] >> 2];
   HEAP32[$2 + 500 >> 2] = 1;
   HEAP32[$2 + 496 >> 2] = $3;
   HEAP32[$2 + 492 >> 2] = 45862;
   HEAP32[$2 + 488 >> 2] = 46278;
   HEAP32[$2 + 484 >> 2] = 372;
   HEAP32[$2 + 480 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2 + 480 | 0);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  if ((tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 1184 >> 2]) | 0) != 2) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 1184 >> 2]);
   HEAP32[$2 + 532 >> 2] = 2;
   HEAP32[$2 + 528 >> 2] = $3;
   HEAP32[$2 + 524 >> 2] = 45898;
   HEAP32[$2 + 520 >> 2] = 46299;
   HEAP32[$2 + 516 >> 2] = 373;
   HEAP32[$2 + 512 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2 + 512 | 0);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[HEAP32[$2 + 1184 >> 2] + 8 >> 2] + 4 >> 2] != HEAP32[$2 + 1200 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = HEAP32[HEAP32[HEAP32[$2 + 1184 >> 2] + 8 >> 2] + 4 >> 2];
   HEAP32[$2 + 564 >> 2] = HEAP32[$2 + 1200 >> 2];
   HEAP32[$2 + 560 >> 2] = $3;
   HEAP32[$2 + 556 >> 2] = 46209;
   HEAP32[$2 + 552 >> 2] = 46329;
   HEAP32[$2 + 548 >> 2] = 374;
   HEAP32[$2 + 544 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2 + 544 | 0);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[HEAP32[$2 + 1184 >> 2] + 8 >> 2] + 8 >> 2] != HEAP32[$2 + 1196 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = HEAP32[HEAP32[HEAP32[$2 + 1184 >> 2] + 8 >> 2] + 8 >> 2];
   HEAP32[$2 + 596 >> 2] = HEAP32[$2 + 1196 >> 2];
   HEAP32[$2 + 592 >> 2] = $3;
   HEAP32[$2 + 588 >> 2] = 46029;
   HEAP32[$2 + 584 >> 2] = 46359;
   HEAP32[$2 + 580 >> 2] = 375;
   HEAP32[$2 + 576 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2 + 576 | 0);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  HEAP8[$2 + 1183 | 0] = tflite__IsHybridOp_28TfLiteTensor_20const__2c_20TfLiteTensor_20const__29(HEAP32[$2 + 1228 >> 2], HEAP32[$2 + 1224 >> 2]) & 1;
  label$22 : {
   if (HEAP8[$2 + 1183 | 0] & 1) {
    if (!(HEAP32[HEAP32[$2 + 1224 >> 2] >> 2] == 3 | HEAP32[HEAP32[$2 + 1224 >> 2] >> 2] == 9)) {
     $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
     $1 = HEAP32[$2 + 1240 >> 2];
     HEAP32[$2 + 1096 >> 2] = 46412;
     HEAP32[$2 + 1092 >> 2] = 383;
     HEAP32[$2 + 1088 >> 2] = 45713;
     FUNCTION_TABLE[$0]($1, 46389, $2 + 1088 | 0);
     HEAP32[$2 + 1244 >> 2] = 1;
     break label$1;
    }
    if (!(HEAP32[HEAP32[$2 + 1220 >> 2] >> 2] == 3 | HEAP32[HEAP32[$2 + 1220 >> 2] >> 2] == 9)) {
     $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
     $1 = HEAP32[$2 + 1240 >> 2];
     HEAP32[$2 + 1080 >> 2] = 46490;
     HEAP32[$2 + 1076 >> 2] = 385;
     HEAP32[$2 + 1072 >> 2] = 45713;
     FUNCTION_TABLE[$0]($1, 46389, $2 + 1072 | 0);
     HEAP32[$2 + 1244 >> 2] = 1;
     break label$1;
    }
    if (HEAP32[HEAP32[HEAP32[$2 + 1236 >> 2] + 12 >> 2] >> 2] != 4) {
     $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
     $1 = HEAP32[$2 + 1240 >> 2];
     $3 = HEAP32[HEAP32[HEAP32[$2 + 1236 >> 2] + 12 >> 2] >> 2];
     HEAP32[$2 + 628 >> 2] = 4;
     HEAP32[$2 + 624 >> 2] = $3;
     HEAP32[$2 + 620 >> 2] = 46586;
     HEAP32[$2 + 616 >> 2] = 46562;
     HEAP32[$2 + 612 >> 2] = 392;
     HEAP32[$2 + 608 >> 2] = 45713;
     FUNCTION_TABLE[$0]($1, 45687, $2 + 608 | 0);
     HEAP32[$2 + 1244 >> 2] = 1;
     break label$1;
    }
    HEAP32[$2 + 1176 >> 2] = tflite__GetTemporary_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 1240 >> 2], HEAP32[$2 + 1236 >> 2], 1);
    HEAP32[$2 + 1172 >> 2] = tflite__GetTemporary_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 1240 >> 2], HEAP32[$2 + 1236 >> 2], 2);
    HEAP32[$2 + 1168 >> 2] = tflite__GetTemporary_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 1240 >> 2], HEAP32[$2 + 1236 >> 2], 3);
    if (!(HEAP32[HEAP32[$2 + 1176 >> 2] >> 2] == 3 | HEAP32[HEAP32[$2 + 1176 >> 2] >> 2] == 9)) {
     $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
     $1 = HEAP32[$2 + 1240 >> 2];
     HEAP32[$2 + 1064 >> 2] = 46588;
     HEAP32[$2 + 1060 >> 2] = 399;
     HEAP32[$2 + 1056 >> 2] = 45713;
     FUNCTION_TABLE[$0]($1, 46389, $2 + 1056 | 0);
     HEAP32[$2 + 1244 >> 2] = 1;
     break label$1;
    }
    if (HEAP32[HEAP32[HEAP32[$2 + 1176 >> 2] + 8 >> 2] + 4 >> 2] != HEAP32[$2 + 1200 >> 2]) {
     $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
     $1 = HEAP32[$2 + 1240 >> 2];
     $3 = HEAP32[HEAP32[HEAP32[$2 + 1176 >> 2] + 8 >> 2] + 4 >> 2];
     HEAP32[$2 + 660 >> 2] = HEAP32[$2 + 1200 >> 2];
     HEAP32[$2 + 656 >> 2] = $3;
     HEAP32[$2 + 652 >> 2] = 46209;
     HEAP32[$2 + 648 >> 2] = 46682;
     HEAP32[$2 + 644 >> 2] = 401;
     HEAP32[$2 + 640 >> 2] = 45713;
     FUNCTION_TABLE[$0]($1, 45687, $2 + 640 | 0);
     HEAP32[$2 + 1244 >> 2] = 1;
     break label$1;
    }
    if (HEAP32[HEAP32[$2 + 1172 >> 2] >> 2] != 1) {
     $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
     $1 = HEAP32[$2 + 1240 >> 2];
     $3 = HEAP32[HEAP32[$2 + 1172 >> 2] >> 2];
     HEAP32[$2 + 692 >> 2] = 1;
     HEAP32[$2 + 688 >> 2] = $3;
     HEAP32[$2 + 684 >> 2] = 45862;
     HEAP32[$2 + 680 >> 2] = 46721;
     HEAP32[$2 + 676 >> 2] = 404;
     HEAP32[$2 + 672 >> 2] = 45713;
     FUNCTION_TABLE[$0]($1, 45687, $2 + 672 | 0);
     HEAP32[$2 + 1244 >> 2] = 1;
     break label$1;
    }
    if ((tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 1172 >> 2]) | 0) != 1) {
     $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
     $1 = HEAP32[$2 + 1240 >> 2];
     $3 = tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 1172 >> 2]);
     HEAP32[$2 + 724 >> 2] = 1;
     HEAP32[$2 + 720 >> 2] = $3;
     HEAP32[$2 + 716 >> 2] = 46790;
     HEAP32[$2 + 712 >> 2] = 46751;
     HEAP32[$2 + 708 >> 2] = 405;
     HEAP32[$2 + 704 >> 2] = 45713;
     FUNCTION_TABLE[$0]($1, 45687, $2 + 704 | 0);
     HEAP32[$2 + 1244 >> 2] = 1;
     break label$1;
    }
    if (HEAP32[HEAP32[HEAP32[$2 + 1172 >> 2] + 8 >> 2] + 4 >> 2] != HEAP32[$2 + 1200 >> 2]) {
     $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
     $1 = HEAP32[$2 + 1240 >> 2];
     $3 = HEAP32[HEAP32[HEAP32[$2 + 1172 >> 2] + 8 >> 2] + 4 >> 2];
     HEAP32[$2 + 756 >> 2] = HEAP32[$2 + 1200 >> 2];
     HEAP32[$2 + 752 >> 2] = $3;
     HEAP32[$2 + 748 >> 2] = 46209;
     HEAP32[$2 + 744 >> 2] = 46792;
     HEAP32[$2 + 740 >> 2] = 407;
     HEAP32[$2 + 736 >> 2] = 45713;
     FUNCTION_TABLE[$0]($1, 45687, $2 + 736 | 0);
     HEAP32[$2 + 1244 >> 2] = 1;
     break label$1;
    }
    if (HEAP32[HEAP32[$2 + 1168 >> 2] >> 2] != 1) {
     $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
     $1 = HEAP32[$2 + 1240 >> 2];
     $3 = HEAP32[HEAP32[$2 + 1168 >> 2] >> 2];
     HEAP32[$2 + 788 >> 2] = 1;
     HEAP32[$2 + 784 >> 2] = $3;
     HEAP32[$2 + 780 >> 2] = 45862;
     HEAP32[$2 + 776 >> 2] = 46831;
     HEAP32[$2 + 772 >> 2] = 411;
     HEAP32[$2 + 768 >> 2] = 45713;
     FUNCTION_TABLE[$0]($1, 45687, $2 + 768 | 0);
     HEAP32[$2 + 1244 >> 2] = 1;
     break label$1;
    }
    if ((tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 1168 >> 2]) | 0) != 2) {
     $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
     $1 = HEAP32[$2 + 1240 >> 2];
     $3 = tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 1168 >> 2]);
     HEAP32[$2 + 820 >> 2] = 2;
     HEAP32[$2 + 816 >> 2] = $3;
     HEAP32[$2 + 812 >> 2] = 45898;
     HEAP32[$2 + 808 >> 2] = 46864;
     HEAP32[$2 + 804 >> 2] = 412;
     HEAP32[$2 + 800 >> 2] = 45713;
     FUNCTION_TABLE[$0]($1, 45687, $2 + 800 | 0);
     HEAP32[$2 + 1244 >> 2] = 1;
     break label$1;
    }
    if (HEAP32[HEAP32[HEAP32[$2 + 1168 >> 2] + 8 >> 2] + 4 >> 2] != HEAP32[$2 + 1196 >> 2]) {
     $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
     $1 = HEAP32[$2 + 1240 >> 2];
     $3 = HEAP32[HEAP32[HEAP32[$2 + 1168 >> 2] + 8 >> 2] + 4 >> 2];
     HEAP32[$2 + 852 >> 2] = HEAP32[$2 + 1196 >> 2];
     HEAP32[$2 + 848 >> 2] = $3;
     HEAP32[$2 + 844 >> 2] = 46029;
     HEAP32[$2 + 840 >> 2] = 46906;
     HEAP32[$2 + 836 >> 2] = 414;
     HEAP32[$2 + 832 >> 2] = 45713;
     FUNCTION_TABLE[$0]($1, 45687, $2 + 832 | 0);
     HEAP32[$2 + 1244 >> 2] = 1;
     break label$1;
    }
    if (HEAP32[HEAP32[HEAP32[$2 + 1168 >> 2] + 8 >> 2] + 8 >> 2] != HEAP32[$2 + 1188 >> 2]) {
     $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
     $1 = HEAP32[$2 + 1240 >> 2];
     $3 = HEAP32[HEAP32[HEAP32[$2 + 1168 >> 2] + 8 >> 2] + 8 >> 2];
     HEAP32[$2 + 884 >> 2] = HEAP32[$2 + 1188 >> 2];
     HEAP32[$2 + 880 >> 2] = $3;
     HEAP32[$2 + 876 >> 2] = 46069;
     HEAP32[$2 + 872 >> 2] = 46948;
     HEAP32[$2 + 868 >> 2] = 416;
     HEAP32[$2 + 864 >> 2] = 45713;
     FUNCTION_TABLE[$0]($1, 45687, $2 + 864 | 0);
     HEAP32[$2 + 1244 >> 2] = 1;
     break label$1;
    }
    HEAP32[$2 + 1164 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 1220 >> 2]);
    tflite__SymmetricDequantize_28signed_20char_20const__2c_20int_2c_20float_2c_20float__29(HEAP32[$2 + 1164 >> 2], tflite__NumElements_28TfLiteTensor_20const__29(HEAP32[$2 + 1168 >> 2]), HEAPF32[HEAP32[$2 + 1220 >> 2] + 12 >> 2], float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 1168 >> 2]));
    break label$22;
   }
   if (HEAP32[HEAP32[$2 + 1224 >> 2] >> 2] != 1) {
    $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 1240 >> 2];
    $3 = HEAP32[HEAP32[$2 + 1224 >> 2] >> 2];
    HEAP32[$2 + 1124 >> 2] = 1;
    HEAP32[$2 + 1120 >> 2] = $3;
    HEAP32[$2 + 1116 >> 2] = 45862;
    HEAP32[$2 + 1112 >> 2] = 46990;
    HEAP32[$2 + 1108 >> 2] = 436;
    HEAP32[$2 + 1104 >> 2] = 45713;
    FUNCTION_TABLE[$0]($1, 45687, $2 + 1104 | 0);
    HEAP32[$2 + 1244 >> 2] = 1;
    break label$1;
   }
   if (HEAP32[HEAP32[$2 + 1220 >> 2] >> 2] != 1) {
    $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 1240 >> 2];
    $3 = HEAP32[HEAP32[$2 + 1220 >> 2] >> 2];
    HEAP32[$2 + 1156 >> 2] = 1;
    HEAP32[$2 + 1152 >> 2] = $3;
    HEAP32[$2 + 1148 >> 2] = 45862;
    HEAP32[$2 + 1144 >> 2] = 47012;
    HEAP32[$2 + 1140 >> 2] = 437;
    HEAP32[$2 + 1136 >> 2] = 45713;
    FUNCTION_TABLE[$0]($1, 45687, $2 + 1136 | 0);
    HEAP32[$2 + 1244 >> 2] = 1;
    break label$1;
   }
  }
  if (HEAP32[HEAP32[HEAP32[$2 + 1236 >> 2] + 4 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = HEAP32[HEAP32[HEAP32[$2 + 1236 >> 2] + 4 >> 2] >> 2];
   HEAP32[$2 + 916 >> 2] = 1;
   HEAP32[$2 + 912 >> 2] = $3;
   HEAP32[$2 + 908 >> 2] = 46790;
   HEAP32[$2 + 904 >> 2] = 47031;
   HEAP32[$2 + 900 >> 2] = 448;
   HEAP32[$2 + 896 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2 + 896 | 0);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 1160 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 1240 >> 2], HEAP32[$2 + 1236 >> 2]);
  if (HEAP32[HEAP32[$2 + 1160 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = HEAP32[HEAP32[$2 + 1160 >> 2] >> 2];
   HEAP32[$2 + 948 >> 2] = 1;
   HEAP32[$2 + 944 >> 2] = $3;
   HEAP32[$2 + 940 >> 2] = 45862;
   HEAP32[$2 + 936 >> 2] = 47051;
   HEAP32[$2 + 932 >> 2] = 450;
   HEAP32[$2 + 928 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2 + 928 | 0);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  if ((tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 1160 >> 2]) | 0) != 2) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 1160 >> 2]);
   HEAP32[$2 + 980 >> 2] = 2;
   HEAP32[$2 + 976 >> 2] = $3;
   HEAP32[$2 + 972 >> 2] = 45898;
   HEAP32[$2 + 968 >> 2] = 47064;
   HEAP32[$2 + 964 >> 2] = 451;
   HEAP32[$2 + 960 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2 + 960 | 0);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[HEAP32[$2 + 1160 >> 2] + 8 >> 2] + 4 >> 2] != HEAP32[$2 + 1200 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = HEAP32[HEAP32[HEAP32[$2 + 1160 >> 2] + 8 >> 2] + 4 >> 2];
   HEAP32[$2 + 1012 >> 2] = HEAP32[$2 + 1200 >> 2];
   HEAP32[$2 + 1008 >> 2] = $3;
   HEAP32[$2 + 1004 >> 2] = 46209;
   HEAP32[$2 + 1e3 >> 2] = 47086;
   HEAP32[$2 + 996 >> 2] = 452;
   HEAP32[$2 + 992 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2 + 992 | 0);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[HEAP32[$2 + 1160 >> 2] + 8 >> 2] + 8 >> 2] != HEAP32[$2 + 1192 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 1240 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 1240 >> 2];
   $3 = HEAP32[HEAP32[HEAP32[$2 + 1160 >> 2] + 8 >> 2] + 8 >> 2];
   HEAP32[$2 + 1044 >> 2] = HEAP32[$2 + 1192 >> 2];
   HEAP32[$2 + 1040 >> 2] = $3;
   HEAP32[$2 + 1036 >> 2] = 46101;
   HEAP32[$2 + 1032 >> 2] = 47108;
   HEAP32[$2 + 1028 >> 2] = 453;
   HEAP32[$2 + 1024 >> 2] = 45713;
   FUNCTION_TABLE[$0]($1, 45687, $2 + 1024 | 0);
   HEAP32[$2 + 1244 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 1244 >> 2] = 0;
 }
 global$0 = $2 + 1248 | 0;
 return HEAP32[$2 + 1244 >> 2];
}
function printf_core($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 $5 = global$0 - 80 | 0;
 global$0 = $5;
 HEAP32[$5 + 76 >> 2] = 50300;
 $19 = $5 + 55 | 0;
 $16 = $5 + 56 | 0;
 label$1 : {
  label$2 : {
   label$3 : while (1) {
    label$4 : {
     if (($14 | 0) < 0) {
      break label$4;
     }
     if (($4 | 0) > (2147483647 - $14 | 0)) {
      HEAP32[63273] = 61;
      $14 = -1;
      break label$4;
     }
     $14 = $4 + $14 | 0;
    }
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           label$13 : {
            label$14 : {
             label$15 : {
              label$16 : {
               label$17 : {
                label$18 : {
                 $9 = HEAP32[$5 + 76 >> 2];
                 $4 = $9;
                 $8 = HEAPU8[$4 | 0];
                 if ($8) {
                  while (1) {
                   label$21 : {
                    label$22 : {
                     $6 = $8 & 255;
                     label$23 : {
                      if (!$6) {
                       $8 = $4;
                       break label$23;
                      }
                      if (($6 | 0) != 37) {
                       break label$22;
                      }
                      $8 = $4;
                      while (1) {
                       if (HEAPU8[$4 + 1 | 0] != 37) {
                        break label$23;
                       }
                       $6 = $4 + 2 | 0;
                       HEAP32[$5 + 76 >> 2] = $6;
                       $8 = $8 + 1 | 0;
                       $7 = HEAPU8[$4 + 2 | 0];
                       $4 = $6;
                       if (($7 | 0) == 37) {
                        continue;
                       }
                       break;
                      }
                     }
                     $4 = $8 - $9 | 0;
                     if ($0) {
                      out($0, $9, $4);
                     }
                     if ($4) {
                      continue label$3;
                     }
                     $6 = isdigit(HEAP8[HEAP32[$5 + 76 >> 2] + 1 | 0]);
                     $15 = -1;
                     $8 = 1;
                     $10 = $5;
                     $4 = HEAP32[$5 + 76 >> 2];
                     if (!(!$6 | HEAPU8[$4 + 2 | 0] != 36)) {
                      $15 = HEAP8[$4 + 1 | 0] + -48 | 0;
                      $17 = 1;
                      $8 = 3;
                     }
                     $4 = $8 + $4 | 0;
                     HEAP32[$10 + 76 >> 2] = $4;
                     $8 = 0;
                     $12 = HEAP8[$4 | 0];
                     $7 = $12 + -32 | 0;
                     label$28 : {
                      if ($7 >>> 0 > 31) {
                       $6 = $4;
                       break label$28;
                      }
                      $6 = $4;
                      $7 = 1 << $7;
                      if (!($7 & 75913)) {
                       break label$28;
                      }
                      while (1) {
                       $6 = $4 + 1 | 0;
                       HEAP32[$5 + 76 >> 2] = $6;
                       $8 = $7 | $8;
                       $12 = HEAP8[$4 + 1 | 0];
                       $7 = $12 + -32 | 0;
                       if ($7 >>> 0 > 31) {
                        break label$28;
                       }
                       $4 = $6;
                       $7 = 1 << $7;
                       if ($7 & 75913) {
                        continue;
                       }
                       break;
                      }
                     }
                     label$31 : {
                      if (($12 | 0) == 42) {
                       $10 = $5;
                       label$33 : {
                        label$34 : {
                         if (!isdigit(HEAP8[$6 + 1 | 0])) {
                          break label$34;
                         }
                         $4 = HEAP32[$5 + 76 >> 2];
                         if (HEAPU8[$4 + 2 | 0] != 36) {
                          break label$34;
                         }
                         HEAP32[((HEAP8[$4 + 1 | 0] << 2) + $3 | 0) + -192 >> 2] = 10;
                         $13 = HEAP32[((HEAP8[$4 + 1 | 0] << 3) + $2 | 0) + -384 >> 2];
                         $17 = 1;
                         $4 = $4 + 3 | 0;
                         break label$33;
                        }
                        if ($17) {
                         break label$2;
                        }
                        $17 = 0;
                        $13 = 0;
                        if ($0) {
                         $4 = HEAP32[$1 >> 2];
                         HEAP32[$1 >> 2] = $4 + 4;
                         $13 = HEAP32[$4 >> 2];
                        }
                        $4 = HEAP32[$5 + 76 >> 2] + 1 | 0;
                       }
                       HEAP32[$10 + 76 >> 2] = $4;
                       if (($13 | 0) > -1) {
                        break label$31;
                       }
                       $13 = 0 - $13 | 0;
                       $8 = $8 | 8192;
                       break label$31;
                      }
                      $13 = getint($5 + 76 | 0);
                      if (($13 | 0) < 0) {
                       break label$2;
                      }
                      $4 = HEAP32[$5 + 76 >> 2];
                     }
                     $7 = -1;
                     label$36 : {
                      if (HEAPU8[$4 | 0] != 46) {
                       break label$36;
                      }
                      if (HEAPU8[$4 + 1 | 0] == 42) {
                       label$38 : {
                        if (!isdigit(HEAP8[$4 + 2 | 0])) {
                         break label$38;
                        }
                        $4 = HEAP32[$5 + 76 >> 2];
                        if (HEAPU8[$4 + 3 | 0] != 36) {
                         break label$38;
                        }
                        HEAP32[((HEAP8[$4 + 2 | 0] << 2) + $3 | 0) + -192 >> 2] = 10;
                        $7 = HEAP32[((HEAP8[$4 + 2 | 0] << 3) + $2 | 0) + -384 >> 2];
                        $4 = $4 + 4 | 0;
                        HEAP32[$5 + 76 >> 2] = $4;
                        break label$36;
                       }
                       if ($17) {
                        break label$2;
                       }
                       if ($0) {
                        $4 = HEAP32[$1 >> 2];
                        HEAP32[$1 >> 2] = $4 + 4;
                        $7 = HEAP32[$4 >> 2];
                       } else {
                        $7 = 0;
                       }
                       $4 = HEAP32[$5 + 76 >> 2] + 2 | 0;
                       HEAP32[$5 + 76 >> 2] = $4;
                       break label$36;
                      }
                      HEAP32[$5 + 76 >> 2] = $4 + 1;
                      $7 = getint($5 + 76 | 0);
                      $4 = HEAP32[$5 + 76 >> 2];
                     }
                     $6 = 0;
                     while (1) {
                      $18 = $6;
                      $11 = -1;
                      if (HEAP8[$4 | 0] + -65 >>> 0 > 57) {
                       break label$1;
                      }
                      $12 = $4 + 1 | 0;
                      HEAP32[$5 + 76 >> 2] = $12;
                      $6 = HEAP8[$4 | 0];
                      $4 = $12;
                      $6 = HEAPU8[($6 + Math_imul($18, 58) | 0) + 49711 | 0];
                      if ($6 + -1 >>> 0 < 8) {
                       continue;
                      }
                      break;
                     }
                     if (!$6) {
                      break label$1;
                     }
                     label$42 : {
                      label$43 : {
                       label$44 : {
                        if (($6 | 0) == 19) {
                         if (($15 | 0) <= -1) {
                          break label$44;
                         }
                         break label$1;
                        }
                        if (($15 | 0) < 0) {
                         break label$43;
                        }
                        HEAP32[($15 << 2) + $3 >> 2] = $6;
                        $4 = ($15 << 3) + $2 | 0;
                        $6 = HEAP32[$4 + 4 >> 2];
                        HEAP32[$5 + 64 >> 2] = HEAP32[$4 >> 2];
                        HEAP32[$5 + 68 >> 2] = $6;
                       }
                       $4 = 0;
                       if (!$0) {
                        continue label$3;
                       }
                       break label$42;
                      }
                      if (!$0) {
                       break label$6;
                      }
                      pop_arg($5 - -64 | 0, $6, $1);
                      $12 = HEAP32[$5 + 76 >> 2];
                     }
                     $10 = $8 & -65537;
                     $8 = $8 & 8192 ? $10 : $8;
                     $11 = 0;
                     $15 = 49747;
                     $6 = $16;
                     $4 = HEAP8[$12 + -1 | 0];
                     $4 = $18 ? ($4 & 15) == 3 ? $4 & -33 : $4 : $4;
                     $12 = $4 + -88 | 0;
                     if ($12 >>> 0 <= 32) {
                      break label$21;
                     }
                     label$46 : {
                      label$47 : {
                       label$48 : {
                        label$49 : {
                         $10 = $4 + -65 | 0;
                         if ($10 >>> 0 > 6) {
                          if (($4 | 0) != 83) {
                           break label$7;
                          }
                          if (!$7) {
                           break label$49;
                          }
                          $6 = HEAP32[$5 + 64 >> 2];
                          break label$47;
                         }
                         switch ($10 - 1 | 0) {
                         case 1:
                          break label$48;
                         case 0:
                         case 2:
                          break label$7;
                         default:
                          break label$18;
                         }
                        }
                        $4 = 0;
                        pad($0, 32, $13, 0, $8);
                        break label$46;
                       }
                       HEAP32[$5 + 12 >> 2] = 0;
                       HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 64 >> 2];
                       HEAP32[$5 + 64 >> 2] = $5 + 8;
                       $7 = -1;
                       $6 = $5 + 8 | 0;
                      }
                      $4 = 0;
                      label$51 : {
                       while (1) {
                        $9 = HEAP32[$6 >> 2];
                        if (!$9) {
                         break label$51;
                        }
                        $9 = wctomb($5 + 4 | 0, $9);
                        $10 = ($9 | 0) < 0;
                        if (!($10 | $9 >>> 0 > $7 - $4 >>> 0)) {
                         $6 = $6 + 4 | 0;
                         $4 = $4 + $9 | 0;
                         if ($7 >>> 0 > $4 >>> 0) {
                          continue;
                         }
                         break label$51;
                        }
                        break;
                       }
                       $11 = -1;
                       if ($10) {
                        break label$1;
                       }
                      }
                      pad($0, 32, $13, $4, $8);
                      if (!$4) {
                       $4 = 0;
                       break label$46;
                      }
                      $7 = 0;
                      $6 = HEAP32[$5 + 64 >> 2];
                      while (1) {
                       $9 = HEAP32[$6 >> 2];
                       if (!$9) {
                        break label$46;
                       }
                       $9 = wctomb($5 + 4 | 0, $9);
                       $7 = $9 + $7 | 0;
                       if (($7 | 0) > ($4 | 0)) {
                        break label$46;
                       }
                       out($0, $5 + 4 | 0, $9);
                       $6 = $6 + 4 | 0;
                       if ($7 >>> 0 < $4 >>> 0) {
                        continue;
                       }
                       break;
                      }
                     }
                     pad($0, 32, $13, $4, $8 ^ 8192);
                     $4 = ($13 | 0) > ($4 | 0) ? $13 : $4;
                     continue label$3;
                    }
                    $6 = $4 + 1 | 0;
                    HEAP32[$5 + 76 >> 2] = $6;
                    $8 = HEAPU8[$4 + 1 | 0];
                    $4 = $6;
                    continue;
                   }
                   break;
                  }
                  switch ($12 - 1 | 0) {
                  case 28:
                   break label$10;
                  case 21:
                   break label$11;
                  case 23:
                   break label$13;
                  case 22:
                   break label$14;
                  case 11:
                  case 16:
                   break label$15;
                  case 10:
                   break label$16;
                  case 26:
                   break label$17;
                  case 8:
                  case 12:
                  case 13:
                  case 14:
                   break label$18;
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 9:
                  case 15:
                  case 17:
                  case 18:
                  case 19:
                  case 20:
                  case 24:
                  case 25:
                  case 27:
                  case 29:
                  case 30:
                   break label$7;
                  default:
                   break label$12;
                  }
                 }
                 $11 = $14;
                 if ($0) {
                  break label$1;
                 }
                 if (!$17) {
                  break label$6;
                 }
                 $4 = 1;
                 while (1) {
                  $0 = HEAP32[($4 << 2) + $3 >> 2];
                  if ($0) {
                   pop_arg(($4 << 3) + $2 | 0, $0, $1);
                   $11 = 1;
                   $4 = $4 + 1 | 0;
                   if (($4 | 0) != 10) {
                    continue;
                   }
                   break label$1;
                  }
                  break;
                 }
                 $11 = 1;
                 if ($4 >>> 0 > 9) {
                  break label$1;
                 }
                 $11 = -1;
                 if (HEAP32[($4 << 2) + $3 >> 2]) {
                  break label$1;
                 }
                 while (1) {
                  $4 = $4 + 1 | 0;
                  if (HEAP32[($4 << 2) + $3 >> 2] ? 0 : ($4 | 0) != 10) {
                   continue;
                  }
                  break;
                 }
                 $11 = $4 >>> 0 < 10 ? -1 : 1;
                 break label$1;
                }
                $4 = FUNCTION_TABLE[664]($0, HEAPF64[$5 + 64 >> 3], $13, $7, $8, $4) | 0;
                continue;
               }
               $4 = HEAP32[$5 + 64 >> 2];
               $9 = $4 ? $4 : 49757;
               $4 = memchr($9, $7);
               $6 = $4 ? $4 : $7 + $9 | 0;
               $8 = $10;
               $7 = $4 ? $4 - $9 | 0 : $7;
               break label$7;
              }
              HEAP8[$5 + 55 | 0] = HEAP32[$5 + 64 >> 2];
              $7 = 1;
              $9 = $19;
              $8 = $10;
              break label$7;
             }
             $10 = HEAP32[$5 + 68 >> 2];
             $4 = $10;
             $9 = HEAP32[$5 + 64 >> 2];
             if (($4 | 0) < -1 ? 1 : ($4 | 0) <= -1 ? $9 >>> 0 > 4294967295 ? 0 : 1 : 0) {
              $4 = 0 - ($4 + (0 < $9 >>> 0) | 0) | 0;
              $9 = 0 - $9 | 0;
              HEAP32[$5 + 64 >> 2] = $9;
              HEAP32[$5 + 68 >> 2] = $4;
              $11 = 1;
              $15 = 49747;
              break label$9;
             }
             if ($8 & 2048) {
              $11 = 1;
              $15 = 49748;
              break label$9;
             }
             $11 = $8 & 1;
             $15 = $11 ? 49749 : 49747;
             break label$9;
            }
            $9 = fmt_o(HEAP32[$5 + 64 >> 2], HEAP32[$5 + 68 >> 2], $16);
            if (!($8 & 8)) {
             break label$8;
            }
            $4 = $16 - $9 | 0;
            $7 = ($7 | 0) > ($4 | 0) ? $7 : $4 + 1 | 0;
            break label$8;
           }
           $7 = $7 >>> 0 > 8 ? $7 : 8;
           $8 = $8 | 8;
           $4 = 120;
          }
          $9 = fmt_x(HEAP32[$5 + 64 >> 2], HEAP32[$5 + 68 >> 2], $16, $4 & 32);
          if (!($8 & 8) | !(HEAP32[$5 + 64 >> 2] | HEAP32[$5 + 68 >> 2])) {
           break label$8;
          }
          $15 = ($4 >>> 4) + 49747 | 0;
          $11 = 2;
          break label$8;
         }
         $4 = 0;
         $6 = $18 & 255;
         if ($6 >>> 0 > 7) {
          continue;
         }
         label$62 : {
          switch ($6 - 1 | 0) {
          default:
           HEAP32[HEAP32[$5 + 64 >> 2] >> 2] = $14;
           continue;
          case 0:
           HEAP32[HEAP32[$5 + 64 >> 2] >> 2] = $14;
           continue;
          case 1:
           $6 = HEAP32[$5 + 64 >> 2];
           HEAP32[$6 >> 2] = $14;
           HEAP32[$6 + 4 >> 2] = $14 >> 31;
           continue;
          case 2:
           HEAP16[HEAP32[$5 + 64 >> 2] >> 1] = $14;
           continue;
          case 3:
           HEAP8[HEAP32[$5 + 64 >> 2]] = $14;
           continue;
          case 5:
           HEAP32[HEAP32[$5 + 64 >> 2] >> 2] = $14;
           continue;
          case 4:
           continue;
          case 6:
           break label$62;
          }
         }
         $6 = HEAP32[$5 + 64 >> 2];
         HEAP32[$6 >> 2] = $14;
         HEAP32[$6 + 4 >> 2] = $14 >> 31;
         continue;
        }
        $9 = HEAP32[$5 + 64 >> 2];
        $4 = HEAP32[$5 + 68 >> 2];
        $15 = 49747;
       }
       $9 = fmt_u($9, $4, $16);
      }
      $8 = ($7 | 0) > -1 ? $8 & -65537 : $8;
      $4 = HEAP32[$5 + 68 >> 2];
      $10 = $4;
      $12 = HEAP32[$5 + 64 >> 2];
      label$69 : {
       if (!(!!($4 | $12) | $7)) {
        $9 = $16;
        $7 = 0;
        break label$69;
       }
       $4 = !($10 | $12) + ($16 - $9 | 0) | 0;
       $7 = ($7 | 0) > ($4 | 0) ? $7 : $4;
      }
     }
     $10 = $6 - $9 | 0;
     $7 = ($7 | 0) < ($10 | 0) ? $10 : $7;
     $6 = $7 + $11 | 0;
     $4 = ($13 | 0) < ($6 | 0) ? $6 : $13;
     pad($0, 32, $4, $6, $8);
     out($0, $15, $11);
     pad($0, 48, $4, $6, $8 ^ 65536);
     pad($0, 48, $7, $10, 0);
     out($0, $9, $10);
     pad($0, 32, $4, $6, $8 ^ 8192);
     continue;
    }
    break;
   }
   $11 = 0;
   break label$1;
  }
  $11 = -1;
 }
 global$0 = $5 + 80 | 0;
 return $11;
}
function jswrap_graphics_drawImage($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0;
 $5 = global$0 - 480 | 0;
 global$0 = $5;
 HEAP32[$5 + 472 >> 2] = $0;
 HEAP32[$5 + 468 >> 2] = $1;
 HEAP32[$5 + 464 >> 2] = $2;
 HEAP32[$5 + 460 >> 2] = $3;
 HEAP32[$5 + 456 >> 2] = $4;
 label$1 : {
  if (!(graphicsGetFromVar($5 + 384 | 0, HEAP32[$5 + 472 >> 2]) & 1)) {
   HEAP32[$5 + 476 >> 2] = 0;
   break label$1;
  }
  if (!(_jswrap_graphics_parseImage($5 + 384 | 0, HEAP32[$5 + 468 >> 2], $5 + 328 | 0) & 1)) {
   HEAP32[$5 + 476 >> 2] = 0;
   break label$1;
  }
  HEAP32[$5 + 324 >> 2] = 0;
  HEAP32[$5 + 320 >> 2] = 0;
  HEAP32[$5 + 316 >> 2] = 0;
  HEAP32[$5 + 312 >> 2] = 0;
  jsvStringIteratorNew($5 + 288 | 0, HEAP32[$5 + 348 >> 2], HEAP32[$5 + 352 >> 2]);
  label$4 : {
   if (jsvIsUndefined(HEAP32[$5 + 456 >> 2]) & 1) {
    HEAP8[$5 + 287 | 0] = !((HEAPU8[$5 + 392 | 0] | HEAPU8[$5 + 393 | 0] << 8 | (HEAPU8[$5 + 394 | 0] << 16 | HEAPU8[$5 + 395 | 0] << 24)) & 112);
    label$6 : {
     label$7 : {
      if (!(HEAP8[$5 + 287 | 0] & 1) | (HEAPU8[$5 + 388 | 0] | HEAPU8[$5 + 389 | 0] << 8 | (HEAPU8[$5 + 390 | 0] << 16 | HEAPU8[$5 + 391 | 0] << 24)) != 5 | (HEAPU8[$5 + 400 | 0] != 16 | (HEAP32[$5 + 336 >> 2] != 1 ? HEAP32[$5 + 336 >> 2] != 8 : 0))) {
       break label$7;
      }
      if (HEAP8[$5 + 340 | 0] & 1 | HEAP32[$5 + 464 >> 2] < 0 | (HEAP32[$5 + 460 >> 2] < 0 | (HEAP32[$5 + 464 >> 2] + HEAP32[$5 + 328 >> 2] | 0) > 240)) {
       break label$7;
      }
      if ((HEAP32[$5 + 460 >> 2] + HEAP32[$5 + 332 >> 2] | 0) > 240) {
       break label$7;
      }
      label$9 : {
       if (HEAP32[$5 + 336 >> 2] == 1) {
        lcdST7789_blit1Bit(HEAP32[$5 + 464 >> 2], HEAP32[$5 + 460 >> 2], HEAP32[$5 + 328 >> 2], HEAP32[$5 + 332 >> 2], 1, $5 + 288 | 0, HEAP32[$5 + 356 >> 2]);
        break label$9;
       }
       if (HEAP32[$5 + 336 >> 2] == 8) {
        lcdST7789_blit8Bit(HEAP32[$5 + 464 >> 2], HEAP32[$5 + 460 >> 2], HEAP32[$5 + 328 >> 2], HEAP32[$5 + 332 >> 2], 1, $5 + 288 | 0, HEAP32[$5 + 356 >> 2]);
       }
      }
      break label$6;
     }
     label$12 : {
      if (HEAP8[$5 + 287 | 0] & 1) {
       HEAP32[$5 + 272 >> 2] = HEAP32[$5 + 460 >> 2];
       HEAP32[$5 + 320 >> 2] = 0;
       while (1) {
        if (HEAP32[$5 + 320 >> 2] < HEAP32[$5 + 332 >> 2]) {
         HEAP32[$5 + 268 >> 2] = HEAP32[$5 + 464 >> 2];
         HEAP32[$5 + 324 >> 2] = 0;
         while (1) {
          if (HEAP32[$5 + 324 >> 2] < HEAP32[$5 + 328 >> 2]) {
           while (1) {
            if (HEAP32[$5 + 316 >> 2] < HEAP32[$5 + 336 >> 2]) {
             HEAP32[$5 + 312 >> 2] = HEAP32[$5 + 312 >> 2] << 8 | jsvStringIteratorGetCharAndNext($5 + 288 | 0) & 255;
             HEAP32[$5 + 316 >> 2] = HEAP32[$5 + 316 >> 2] + 8;
             continue;
            }
            break;
           }
           HEAP32[$5 + 264 >> 2] = HEAP32[$5 + 364 >> 2] & HEAP32[$5 + 312 >> 2] >>> HEAP32[$5 + 316 >> 2] - HEAP32[$5 + 336 >> 2];
           HEAP32[$5 + 316 >> 2] = HEAP32[$5 + 316 >> 2] - HEAP32[$5 + 336 >> 2];
           if (HEAP32[$5 + 344 >> 2] != HEAP32[$5 + 264 >> 2]) {
            if (HEAP32[$5 + 356 >> 2]) {
             HEAP32[$5 + 264 >> 2] = HEAPU16[HEAP32[$5 + 356 >> 2] + ((HEAP32[$5 + 264 >> 2] & HEAP32[$5 + 360 >> 2]) << 1) >> 1];
            }
            if (!(HEAP32[$5 + 268 >> 2] < (HEAPU8[$5 + 416 | 0] | HEAPU8[$5 + 417 | 0] << 8) | HEAP32[$5 + 268 >> 2] > (HEAPU8[$5 + 420 | 0] | HEAPU8[$5 + 421 | 0] << 8) | (HEAP32[$5 + 272 >> 2] < (HEAPU8[$5 + 418 | 0] | HEAPU8[$5 + 419 | 0] << 8) | HEAP32[$5 + 272 >> 2] > (HEAPU8[$5 + 422 | 0] | HEAPU8[$5 + 423 | 0] << 8)))) {
             FUNCTION_TABLE[HEAPU8[$5 + 436 | 0] | HEAPU8[$5 + 437 | 0] << 8 | (HEAPU8[$5 + 438 | 0] << 16 | HEAPU8[$5 + 439 | 0] << 24)]($5 + 384 | 0, HEAP32[$5 + 268 >> 2], HEAP32[$5 + 272 >> 2], HEAP32[$5 + 264 >> 2]);
            }
           }
           HEAP32[$5 + 268 >> 2] = HEAP32[$5 + 268 >> 2] + 1;
           HEAP32[$5 + 324 >> 2] = HEAP32[$5 + 324 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAP32[$5 + 272 >> 2] = HEAP32[$5 + 272 >> 2] + 1;
         HEAP32[$5 + 320 >> 2] = HEAP32[$5 + 320 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$5 + 260 >> 2] = HEAP32[$5 + 464 >> 2];
       HEAP32[$5 + 256 >> 2] = HEAP32[$5 + 460 >> 2];
       HEAP32[$5 + 252 >> 2] = HEAP32[$5 + 464 >> 2] + HEAP32[$5 + 328 >> 2];
       HEAP32[$5 + 248 >> 2] = HEAP32[$5 + 460 >> 2] + HEAP32[$5 + 332 >> 2];
       if (HEAP32[$5 + 260 >> 2] < (HEAPU8[$5 + 416 | 0] | HEAPU8[$5 + 417 | 0] << 8)) {
        HEAP32[$5 + 260 >> 2] = HEAPU8[$5 + 416 | 0] | HEAPU8[$5 + 417 | 0] << 8;
       }
       if (HEAP32[$5 + 256 >> 2] < (HEAPU8[$5 + 418 | 0] | HEAPU8[$5 + 419 | 0] << 8)) {
        HEAP32[$5 + 256 >> 2] = HEAPU8[$5 + 418 | 0] | HEAPU8[$5 + 419 | 0] << 8;
       }
       if (HEAP32[$5 + 252 >> 2] > (HEAPU8[$5 + 420 | 0] | HEAPU8[$5 + 421 | 0] << 8)) {
        HEAP32[$5 + 252 >> 2] = HEAPU8[$5 + 420 | 0] | HEAPU8[$5 + 421 | 0] << 8;
       }
       if (HEAP32[$5 + 248 >> 2] > (HEAPU8[$5 + 422 | 0] | HEAPU8[$5 + 423 | 0] << 8)) {
        HEAP32[$5 + 248 >> 2] = HEAPU8[$5 + 422 | 0] | HEAPU8[$5 + 423 | 0] << 8;
       }
       if (HEAP32[$5 + 260 >> 2] < (HEAPU8[$5 + 424 | 0] | HEAPU8[$5 + 425 | 0] << 8) << 16 >> 16) {
        $0 = HEAP32[$5 + 260 >> 2];
        HEAP8[$5 + 424 | 0] = $0;
        HEAP8[$5 + 425 | 0] = $0 >>> 8;
       }
       if (HEAP32[$5 + 252 >> 2] > (HEAPU8[$5 + 428 | 0] | HEAPU8[$5 + 429 | 0] << 8) << 16 >> 16) {
        $0 = HEAP32[$5 + 252 >> 2];
        HEAP8[$5 + 428 | 0] = $0;
        HEAP8[$5 + 429 | 0] = $0 >>> 8;
       }
       if (HEAP32[$5 + 256 >> 2] < (HEAPU8[$5 + 426 | 0] | HEAPU8[$5 + 427 | 0] << 8) << 16 >> 16) {
        $0 = HEAP32[$5 + 256 >> 2];
        HEAP8[$5 + 426 | 0] = $0;
        HEAP8[$5 + 427 | 0] = $0 >>> 8;
       }
       if (HEAP32[$5 + 248 >> 2] > (HEAPU8[$5 + 430 | 0] | HEAPU8[$5 + 431 | 0] << 8) << 16 >> 16) {
        $0 = HEAP32[$5 + 248 >> 2];
        HEAP8[$5 + 430 | 0] = $0;
        HEAP8[$5 + 431 | 0] = $0 >>> 8;
       }
       break label$12;
      }
      HEAP32[$5 + 320 >> 2] = 0;
      while (1) {
       if (HEAP32[$5 + 320 >> 2] < HEAP32[$5 + 332 >> 2]) {
        HEAP32[$5 + 324 >> 2] = 0;
        while (1) {
         if (HEAP32[$5 + 324 >> 2] < HEAP32[$5 + 328 >> 2]) {
          while (1) {
           if (HEAP32[$5 + 316 >> 2] < HEAP32[$5 + 336 >> 2]) {
            HEAP32[$5 + 312 >> 2] = HEAP32[$5 + 312 >> 2] << 8 | jsvStringIteratorGetCharAndNext($5 + 288 | 0) & 255;
            HEAP32[$5 + 316 >> 2] = HEAP32[$5 + 316 >> 2] + 8;
            continue;
           }
           break;
          }
          HEAP32[$5 + 244 >> 2] = HEAP32[$5 + 364 >> 2] & HEAP32[$5 + 312 >> 2] >>> HEAP32[$5 + 316 >> 2] - HEAP32[$5 + 336 >> 2];
          HEAP32[$5 + 316 >> 2] = HEAP32[$5 + 316 >> 2] - HEAP32[$5 + 336 >> 2];
          if (HEAP32[$5 + 344 >> 2] != HEAP32[$5 + 244 >> 2]) {
           if (HEAP32[$5 + 356 >> 2]) {
            HEAP32[$5 + 244 >> 2] = HEAPU16[HEAP32[$5 + 356 >> 2] + ((HEAP32[$5 + 244 >> 2] & HEAP32[$5 + 360 >> 2]) << 1) >> 1];
           }
           graphicsSetPixel($5 + 384 | 0, HEAP32[$5 + 324 >> 2] + HEAP32[$5 + 464 >> 2] | 0, HEAP32[$5 + 320 >> 2] + HEAP32[$5 + 460 >> 2] | 0, HEAP32[$5 + 244 >> 2]);
          }
          HEAP32[$5 + 324 >> 2] = HEAP32[$5 + 324 >> 2] + 1;
          continue;
         }
         break;
        }
        HEAP32[$5 + 320 >> 2] = HEAP32[$5 + 320 >> 2] + 1;
        continue;
       }
       break;
      }
     }
    }
    break label$4;
   }
   if (jsvIsObject(HEAP32[$5 + 456 >> 2]) & 1) {
    HEAPF64[$5 + 232 >> 3] = jsvGetFloatAndUnLock(jsvObjectGetChild(HEAP32[$5 + 456 >> 2], 39114, 0));
    $0 = __DOUBLE_BITS(HEAPF64[$5 + 232 >> 3]);
    $1 = i64toi32_i32$HIGH_BITS & 2147483647;
    if (!(HEAPF64[$5 + 232 >> 3] <= 0 ? 0 : !(($1 | 0) == 2146435072 & $0 >>> 0 >= 0 | $1 >>> 0 > 2146435072))) {
     HEAPF64[$5 + 232 >> 3] = 1;
    }
    HEAPF64[$5 + 224 >> 3] = jsvGetFloatAndUnLock(jsvObjectGetChild(HEAP32[$5 + 456 >> 2], 39120, 0));
    $0 = __DOUBLE_BITS(HEAPF64[$5 + 224 >> 3]);
    $1 = i64toi32_i32$HIGH_BITS & 2147483647;
    HEAP8[$5 + 223 | 0] = ($1 | 0) == 2146435072 & $0 >>> 0 < 0 | $1 >>> 0 < 2146435072;
    if (!(HEAP8[$5 + 223 | 0] & 1)) {
     HEAPF64[$5 + 224 >> 3] = 0;
    }
    $0 = $5;
    $1 = 0;
    label$44 : {
     if (HEAP8[$5 + 223 | 0] & 1) {
      break label$44;
     }
     $1 = 0;
     if (HEAPF64[$5 + 232 >> 3] - Math_floor(HEAPF64[$5 + 232 >> 3]) != 0) {
      break label$44;
     }
     $1 = !((HEAPU8[$5 + 392 | 0] | HEAPU8[$5 + 393 | 0] << 8 | (HEAPU8[$5 + 394 | 0] << 16 | HEAPU8[$5 + 395 | 0] << 24)) & 112);
    }
    HEAP8[$0 + 222 | 0] = $1;
    label$45 : {
     if (HEAP8[$5 + 222 | 0] & 1) {
      $0 = $5;
      $6 = HEAPF64[$5 + 232 >> 3];
      label$47 : {
       if (Math_abs($6) < 2147483648) {
        $1 = ~~$6;
        break label$47;
       }
       $1 = -2147483648;
      }
      HEAP32[$0 + 216 >> 2] = $1;
      label$49 : {
       label$50 : {
        if ((HEAPU8[$5 + 388 | 0] | HEAPU8[$5 + 389 | 0] << 8 | (HEAPU8[$5 + 390 | 0] << 16 | HEAPU8[$5 + 391 | 0] << 24)) != 5 | HEAPU8[$5 + 400 | 0] != 16 | (HEAP32[$5 + 216 >> 2] < 1 | (HEAP32[$5 + 336 >> 2] != 1 ? HEAP32[$5 + 336 >> 2] != 8 : 0))) {
         break label$50;
        }
        if (HEAP8[$5 + 340 | 0] & 1 | HEAP32[$5 + 464 >> 2] < 0 | (HEAP32[$5 + 460 >> 2] < 0 | (HEAP32[$5 + 464 >> 2] + Math_imul(HEAP32[$5 + 328 >> 2], HEAP32[$5 + 216 >> 2]) | 0) > 240)) {
         break label$50;
        }
        if ((HEAP32[$5 + 460 >> 2] + Math_imul(HEAP32[$5 + 332 >> 2], HEAP32[$5 + 216 >> 2]) | 0) > 240) {
         break label$50;
        }
        label$52 : {
         if (HEAP32[$5 + 336 >> 2] == 1) {
          lcdST7789_blit1Bit(HEAP32[$5 + 464 >> 2], HEAP32[$5 + 460 >> 2], HEAP32[$5 + 328 >> 2], HEAP32[$5 + 332 >> 2], HEAP32[$5 + 216 >> 2], $5 + 288 | 0, HEAP32[$5 + 356 >> 2]);
          break label$52;
         }
         lcdST7789_blit8Bit(HEAP32[$5 + 464 >> 2], HEAP32[$5 + 460 >> 2], HEAP32[$5 + 328 >> 2], HEAP32[$5 + 332 >> 2], HEAP32[$5 + 216 >> 2], $5 + 288 | 0, HEAP32[$5 + 356 >> 2]);
        }
        break label$49;
       }
       HEAP32[$5 + 204 >> 2] = HEAP32[$5 + 460 >> 2];
       HEAP32[$5 + 320 >> 2] = 0;
       while (1) {
        if (HEAP32[$5 + 320 >> 2] < HEAP32[$5 + 332 >> 2]) {
         HEAP32[$5 + 200 >> 2] = jsvStringIteratorGetIndex($5 + 288 | 0);
         HEAP32[$5 + 196 >> 2] = HEAP32[$5 + 316 >> 2];
         HEAP32[$5 + 192 >> 2] = HEAP32[$5 + 312 >> 2];
         HEAP32[$5 + 188 >> 2] = 0;
         while (1) {
          if (HEAP32[$5 + 188 >> 2] < HEAP32[$5 + 216 >> 2]) {
           if (HEAP32[$5 + 188 >> 2]) {
            jsvStringIteratorGoto($5 + 288 | 0, HEAP32[$5 + 348 >> 2], HEAP32[$5 + 200 >> 2]);
            HEAP32[$5 + 316 >> 2] = HEAP32[$5 + 196 >> 2];
            HEAP32[$5 + 312 >> 2] = HEAP32[$5 + 192 >> 2];
           }
           HEAP32[$5 + 184 >> 2] = HEAP32[$5 + 464 >> 2];
           HEAP32[$5 + 324 >> 2] = 0;
           while (1) {
            if (HEAP32[$5 + 324 >> 2] < HEAP32[$5 + 328 >> 2]) {
             while (1) {
              if (HEAP32[$5 + 316 >> 2] < HEAP32[$5 + 336 >> 2]) {
               HEAP32[$5 + 312 >> 2] = HEAP32[$5 + 312 >> 2] << 8 | jsvStringIteratorGetCharAndNext($5 + 288 | 0) & 255;
               HEAP32[$5 + 316 >> 2] = HEAP32[$5 + 316 >> 2] + 8;
               continue;
              }
              break;
             }
             HEAP32[$5 + 180 >> 2] = HEAP32[$5 + 364 >> 2] & HEAP32[$5 + 312 >> 2] >>> HEAP32[$5 + 316 >> 2] - HEAP32[$5 + 336 >> 2];
             HEAP32[$5 + 316 >> 2] = HEAP32[$5 + 316 >> 2] - HEAP32[$5 + 336 >> 2];
             label$63 : {
              if (!(HEAP32[$5 + 344 >> 2] == HEAP32[$5 + 180 >> 2] | HEAP32[$5 + 204 >> 2] < (HEAPU8[$5 + 418 | 0] | HEAPU8[$5 + 419 | 0] << 8) | HEAP32[$5 + 204 >> 2] > (HEAPU8[$5 + 422 | 0] | HEAPU8[$5 + 423 | 0] << 8))) {
               if (HEAP32[$5 + 356 >> 2]) {
                HEAP32[$5 + 180 >> 2] = HEAPU16[HEAP32[$5 + 356 >> 2] + ((HEAP32[$5 + 180 >> 2] & HEAP32[$5 + 360 >> 2]) << 1) >> 1];
               }
               HEAP32[$5 + 176 >> 2] = 0;
               while (1) {
                if (HEAP32[$5 + 176 >> 2] < HEAP32[$5 + 216 >> 2]) {
                 if (!(HEAP32[$5 + 184 >> 2] < (HEAPU8[$5 + 416 | 0] | HEAPU8[$5 + 417 | 0] << 8) | HEAP32[$5 + 184 >> 2] > (HEAPU8[$5 + 420 | 0] | HEAPU8[$5 + 421 | 0] << 8))) {
                  FUNCTION_TABLE[HEAPU8[$5 + 436 | 0] | HEAPU8[$5 + 437 | 0] << 8 | (HEAPU8[$5 + 438 | 0] << 16 | HEAPU8[$5 + 439 | 0] << 24)]($5 + 384 | 0, HEAP32[$5 + 184 >> 2], HEAP32[$5 + 204 >> 2], HEAP32[$5 + 180 >> 2]);
                 }
                 HEAP32[$5 + 184 >> 2] = HEAP32[$5 + 184 >> 2] + 1;
                 HEAP32[$5 + 176 >> 2] = HEAP32[$5 + 176 >> 2] + 1;
                 continue;
                }
                break;
               }
               break label$63;
              }
              HEAP32[$5 + 184 >> 2] = HEAP32[$5 + 216 >> 2] + HEAP32[$5 + 184 >> 2];
             }
             HEAP32[$5 + 324 >> 2] = HEAP32[$5 + 324 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 204 >> 2] = HEAP32[$5 + 204 >> 2] + 1;
           HEAP32[$5 + 188 >> 2] = HEAP32[$5 + 188 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAP32[$5 + 320 >> 2] = HEAP32[$5 + 320 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$5 + 172 >> 2] = HEAP32[$5 + 464 >> 2];
       HEAP32[$5 + 168 >> 2] = HEAP32[$5 + 460 >> 2];
       HEAP32[$5 + 164 >> 2] = HEAP32[$5 + 464 >> 2] + Math_imul(HEAP32[$5 + 216 >> 2], HEAP32[$5 + 328 >> 2]);
       HEAP32[$5 + 160 >> 2] = HEAP32[$5 + 460 >> 2] + Math_imul(HEAP32[$5 + 216 >> 2], HEAP32[$5 + 332 >> 2]);
       if (HEAP32[$5 + 172 >> 2] < (HEAPU8[$5 + 416 | 0] | HEAPU8[$5 + 417 | 0] << 8)) {
        HEAP32[$5 + 172 >> 2] = HEAPU8[$5 + 416 | 0] | HEAPU8[$5 + 417 | 0] << 8;
       }
       if (HEAP32[$5 + 168 >> 2] < (HEAPU8[$5 + 418 | 0] | HEAPU8[$5 + 419 | 0] << 8)) {
        HEAP32[$5 + 168 >> 2] = HEAPU8[$5 + 418 | 0] | HEAPU8[$5 + 419 | 0] << 8;
       }
       if (HEAP32[$5 + 164 >> 2] > (HEAPU8[$5 + 420 | 0] | HEAPU8[$5 + 421 | 0] << 8)) {
        HEAP32[$5 + 164 >> 2] = HEAPU8[$5 + 420 | 0] | HEAPU8[$5 + 421 | 0] << 8;
       }
       if (HEAP32[$5 + 160 >> 2] > (HEAPU8[$5 + 422 | 0] | HEAPU8[$5 + 423 | 0] << 8)) {
        HEAP32[$5 + 160 >> 2] = HEAPU8[$5 + 422 | 0] | HEAPU8[$5 + 423 | 0] << 8;
       }
       if (HEAP32[$5 + 172 >> 2] < (HEAPU8[$5 + 424 | 0] | HEAPU8[$5 + 425 | 0] << 8) << 16 >> 16) {
        $0 = HEAP32[$5 + 172 >> 2];
        HEAP8[$5 + 424 | 0] = $0;
        HEAP8[$5 + 425 | 0] = $0 >>> 8;
       }
       if (HEAP32[$5 + 164 >> 2] > (HEAPU8[$5 + 428 | 0] | HEAPU8[$5 + 429 | 0] << 8) << 16 >> 16) {
        $0 = HEAP32[$5 + 164 >> 2];
        HEAP8[$5 + 428 | 0] = $0;
        HEAP8[$5 + 429 | 0] = $0 >>> 8;
       }
       if (HEAP32[$5 + 168 >> 2] < (HEAPU8[$5 + 426 | 0] | HEAPU8[$5 + 427 | 0] << 8) << 16 >> 16) {
        $0 = HEAP32[$5 + 168 >> 2];
        HEAP8[$5 + 426 | 0] = $0;
        HEAP8[$5 + 427 | 0] = $0 >>> 8;
       }
       if (HEAP32[$5 + 160 >> 2] > (HEAPU8[$5 + 430 | 0] | HEAPU8[$5 + 431 | 0] << 8) << 16 >> 16) {
        $0 = HEAP32[$5 + 160 >> 2];
        HEAP8[$5 + 430 | 0] = $0;
        HEAP8[$5 + 431 | 0] = $0 >>> 8;
       }
      }
      break label$45;
     }
     HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 464 >> 2];
     HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 460 >> 2];
     $1 = $5 + 328 | 0;
     $3 = HEAP32[$1 + 4 >> 2];
     $0 = $5 + 16 | 0;
     HEAP32[$0 + 36 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$0 + 40 >> 2] = $3;
     $2 = HEAP32[$1 + 52 >> 2];
     HEAP32[$0 + 84 >> 2] = HEAP32[$1 + 48 >> 2];
     HEAP32[$0 + 88 >> 2] = $2;
     $2 = HEAP32[$1 + 44 >> 2];
     HEAP32[$0 + 76 >> 2] = HEAP32[$1 + 40 >> 2];
     HEAP32[$0 + 80 >> 2] = $2;
     $2 = HEAP32[$1 + 36 >> 2];
     HEAP32[$0 + 68 >> 2] = HEAP32[$1 + 32 >> 2];
     HEAP32[$0 + 72 >> 2] = $2;
     $2 = HEAP32[$1 + 28 >> 2];
     HEAP32[$0 + 60 >> 2] = HEAP32[$1 + 24 >> 2];
     HEAP32[$0 + 64 >> 2] = $2;
     $2 = HEAP32[$1 + 20 >> 2];
     HEAP32[$0 + 52 >> 2] = HEAP32[$1 + 16 >> 2];
     HEAP32[$0 + 56 >> 2] = $2;
     $2 = HEAP32[$1 + 12 >> 2];
     HEAP32[$0 + 44 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$0 + 48 >> 2] = $2;
     $1 = $5 + 288 | 0;
     $2 = HEAP32[$1 + 4 >> 2];
     HEAP32[$0 + 92 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$0 + 96 >> 2] = $2;
     HEAP32[$0 + 108 >> 2] = HEAP32[$1 + 16 >> 2];
     $2 = HEAP32[$1 + 12 >> 2];
     HEAP32[$0 + 100 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$0 + 104 >> 2] = $2;
     HEAPF64[$5 + 32 >> 3] = HEAPF64[$5 + 224 >> 3];
     HEAPF64[$5 + 40 >> 3] = HEAPF64[$5 + 232 >> 3];
     HEAP8[$5 + 48 | 0] = HEAP8[$5 + 223 | 0] & 1;
     HEAP8[$5 + 49 | 0] = 0;
     _jswrap_drawImageLayerInit($0);
     HEAP32[$5 + 320 >> 2] = HEAP32[$5 + 20 >> 2];
     while (1) {
      if (HEAP32[$5 + 320 >> 2] < HEAP32[$5 + 28 >> 2]) {
       _jswrap_drawImageLayerStartX($5 + 16 | 0);
       HEAP32[$5 + 324 >> 2] = HEAP32[$5 + 16 >> 2];
       while (1) {
        if (HEAP32[$5 + 324 >> 2] < HEAP32[$5 + 24 >> 2]) {
         if (_jswrap_drawImageLayerGetPixel($5 + 16 | 0, $5 + 312 | 0) & 1) {
          graphicsSetPixel($5 + 384 | 0, HEAP32[$5 + 324 >> 2], HEAP32[$5 + 320 >> 2], HEAP32[$5 + 312 >> 2]);
         }
         _jswrap_drawImageLayerNextX($5 + 16 | 0);
         HEAP32[$5 + 324 >> 2] = HEAP32[$5 + 324 >> 2] + 1;
         continue;
        }
        break;
       }
       _jswrap_drawImageLayerNextY($5 + 16 | 0);
       HEAP32[$5 + 320 >> 2] = HEAP32[$5 + 320 >> 2] + 1;
       continue;
      }
      break;
     }
     $0 = $5 + 16 | 0;
     $3 = HEAP32[$0 + 96 >> 2];
     $1 = $5 + 288 | 0;
     HEAP32[$1 >> 2] = HEAP32[$0 + 92 >> 2];
     HEAP32[$1 + 4 >> 2] = $3;
     HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 108 >> 2];
     $2 = HEAP32[$0 + 104 >> 2];
     HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 100 >> 2];
     HEAP32[$1 + 12 >> 2] = $2;
    }
   }
  }
  $0 = $5 + 384 | 0;
  jsvStringIteratorFree($5 + 288 | 0);
  jsvUnLock(HEAP32[$5 + 348 >> 2]);
  graphicsSetVar($0);
  HEAP32[$5 + 476 >> 2] = jsvLockAgain(HEAP32[$5 + 472 >> 2]);
 }
 global$0 = $5 + 480 | 0;
 return HEAP32[$5 + 476 >> 2];
}
function jsiIdle() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $0 = global$0 - 304 | 0;
 global$0 = $0;
 if (HEAPU8[95150] < 255) {
  HEAP8[95150] = HEAPU8[95150] + 1;
 }
 HEAP8[$0 + 303 | 0] = 0;
 HEAP32[$0 + 292 >> 2] = jshGetEventsUsed();
 while (1) {
  $1 = HEAP32[$0 + 292 >> 2];
  HEAP32[$0 + 292 >> 2] = $1 + -1;
  if (($1 | 0) > 0) {
   $2 = jshPopIOEvent($0 + 296 | 0);
  } else {
   $2 = 0;
  }
  if ($2 & 1) {
   jsiSetBusy(1, 1);
   HEAP8[$0 + 303 | 0] = 1;
   HEAP8[$0 + 291 | 0] = HEAPU8[$0 + 296 | 0] & 31;
   HEAP8[95150] = 0;
   label$6 : {
    if (HEAPU8[$0 + 291 | 0] == HEAPU8[53360]) {
     jsiHandleIOEventForConsole($0 + 296 | 0);
     break label$6;
    }
    label$8 : {
     if (!(HEAPU8[$0 + 291 | 0] < 17 | HEAPU8[$0 + 291 | 0] > 22)) {
      HEAP32[$0 + 284 >> 2] = jsvSkipNameAndUnLock(jsiGetClassNameFromDevice(HEAPU8[$0 + 296 | 0] & 31));
      if (jsvIsObject(HEAP32[$0 + 284 >> 2]) & 1) {
       $1 = jsiHandleIOEventForUSART(HEAP32[$0 + 284 >> 2], $0 + 296 | 0);
       HEAP32[$0 + 292 >> 2] = HEAP32[$0 + 292 >> 2] - $1;
      }
      jsvUnLock(HEAP32[$0 + 284 >> 2]);
      break label$8;
     }
     label$11 : {
      if (!(HEAPU8[$0 + 291 | 0] < 23 | HEAPU8[$0 + 291 | 0] > 23)) {
       HEAP32[$0 + 280 >> 2] = jsvSkipNameAndUnLock(jsiGetClassNameFromDevice(HEAPU8[$0 + 296 | 0] + -1 & 31));
       if (jsvIsObject(HEAP32[$0 + 280 >> 2]) & 1) {
        if (HEAPU8[$0 + 296 | 0] & 32) {
         jsiExecuteObjectCallbacks(HEAP32[$0 + 280 >> 2], 6019);
        }
        if (HEAPU8[$0 + 296 | 0] & 64) {
         jsiExecuteObjectCallbacks(HEAP32[$0 + 280 >> 2], 6030);
        }
       }
       jsvUnLock(HEAP32[$0 + 280 >> 2]);
       break label$11;
      }
      if (!(HEAPU8[$0 + 291 | 0] < 1 | HEAPU8[$0 + 291 | 0] > 16)) {
       $1 = $0 + 272 | 0;
       HEAP32[$0 + 276 >> 2] = jsvLock(HEAPU16[47565]);
       jsvObjectIteratorNew($1, HEAP32[$0 + 276 >> 2]);
       while (1) {
        if (jsvObjectIteratorHasValue($0 + 272 | 0) & 1) {
         $1 = $0 + 296 | 0;
         HEAP8[$0 + 271 | 0] = 0;
         HEAP32[$0 + 264 >> 2] = jsvObjectIteratorGetValue($0 + 272 | 0);
         HEAP8[$0 + 263 | 0] = jshGetPinFromVarAndUnLock(jsvObjectGetChild(HEAP32[$0 + 264 >> 2], 5263, 0));
         if (jshIsEventForPin($1, HEAPU8[$0 + 263 | 0]) & 1) {
          HEAP32[$0 + 248 >> 2] = jshGetSystemTime();
          HEAP32[$0 + 252 >> 2] = i64toi32_i32$HIGH_BITS;
          if (HEAPU32[$0 + 248 >> 2] < (HEAPU8[$0 + 297 | 0] | HEAPU8[$0 + 298 | 0] << 8 | (HEAPU8[$0 + 299 | 0] << 16 | HEAPU8[$0 + 300 | 0] << 24)) >>> 0) {
           $1 = HEAP32[$0 + 248 >> 2];
           $2 = HEAP32[$0 + 252 >> 2] - (($1 >>> 0 < 0) + 1 | 0) | 0;
           HEAP32[$0 + 248 >> 2] = $1;
           HEAP32[$0 + 252 >> 2] = $2;
          }
          $1 = HEAP32[$0 + 252 >> 2];
          HEAP32[$0 + 240 >> 2] = HEAPU8[$0 + 297 | 0] | HEAPU8[$0 + 298 | 0] << 8 | (HEAPU8[$0 + 299 | 0] << 16 | HEAPU8[$0 + 300 | 0] << 24);
          HEAP32[$0 + 244 >> 2] = $1;
          HEAP8[$0 + 239 | 0] = (HEAPU8[$0 + 296 | 0] & 32) != 0;
          HEAP8[$0 + 238 | 0] = 0;
          HEAP32[$0 + 232 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$0 + 264 >> 2], 6040, 0));
          label$21 : {
           if (HEAP32[$0 + 232 >> 2] <= 0) {
            HEAP8[$0 + 238 | 0] = 1;
            break label$21;
           }
           HEAP8[$0 + 231 | 0] = jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$0 + 264 >> 2], 6049, 0)) & 1;
           jsvObjectSetChildAndUnLock(HEAP32[$0 + 264 >> 2], 6049, jsvNewFromBool(HEAP8[$0 + 239 | 0] & 1));
           HEAP32[$0 + 224 >> 2] = jsvObjectGetChild(HEAP32[$0 + 264 >> 2], 6055, 0);
           label$23 : {
            if (HEAP32[$0 + 224 >> 2]) {
             $4 = HEAP32[23796];
             $3 = HEAP32[23797];
             $1 = jsvGetLongIntegerAndUnLock(jsvObjectGetChild(HEAP32[$0 + 224 >> 2], 6063, 0));
             $3 = i64toi32_i32$HIGH_BITS + $3 | 0;
             $4 = $1 + $4 | 0;
             if ($4 >>> 0 < $1 >>> 0) {
              $3 = $3 + 1 | 0;
             }
             HEAP32[$0 + 216 >> 2] = $4;
             HEAP32[$0 + 220 >> 2] = $3;
             $1 = HEAP32[$0 + 232 >> 2];
             $3 = HEAP32[$0 + 240 >> 2];
             $4 = HEAP32[23796];
             $5 = $3 - $4 | 0;
             $2 = $1 + $5 | 0;
             $1 = (HEAP32[$0 + 244 >> 2] - (HEAP32[23797] + ($3 >>> 0 < $4 >>> 0) | 0) | 0) + ($1 >> 31) | 0;
             jsvUnLock(jsvObjectSetChild(HEAP32[$0 + 224 >> 2], 6063, jsvNewFromLongInteger($2, $2 >>> 0 < $5 >>> 0 ? $1 + 1 | 0 : $1)));
             $1 = HEAP32[$0 + 244 >> 2];
             $2 = HEAP32[$0 + 220 >> 2];
             if (($1 | 0) > ($2 | 0) ? 1 : ($1 | 0) >= ($2 | 0) ? HEAPU32[$0 + 240 >> 2] <= HEAPU32[$0 + 216 >> 2] ? 0 : 1 : 0) {
              HEAP8[$0 + 238 | 0] = 1;
              $2 = HEAP32[$0 + 232 >> 2];
              $1 = $2;
              $2 = HEAP32[$0 + 216 >> 2];
              $3 = HEAP32[$0 + 220 >> 2] - (($1 >> 31) + ($2 >>> 0 < $1 >>> 0) | 0) | 0;
              HEAP32[$0 + 240 >> 2] = $2 - $1;
              HEAP32[$0 + 244 >> 2] = $3;
              HEAP8[$0 + 239 | 0] = HEAP8[$0 + 231 | 0] & 1;
             }
             break label$23;
            }
            HEAP32[$0 + 224 >> 2] = jsvNewWithFlags(5);
            if (HEAP32[$0 + 224 >> 2]) {
             jsvObjectSetChild(HEAP32[$0 + 224 >> 2], 6068, HEAP32[$0 + 264 >> 2]);
             $2 = HEAP32[$0 + 232 >> 2];
             $3 = HEAP32[$0 + 240 >> 2];
             $4 = HEAP32[23796];
             $5 = $3 - $4 | 0;
             $1 = $2 + $5 | 0;
             $3 = (HEAP32[$0 + 244 >> 2] - (HEAP32[23797] + ($3 >>> 0 < $4 >>> 0) | 0) | 0) + ($2 >> 31) | 0;
             jsvObjectSetChildAndUnLock(HEAP32[$0 + 224 >> 2], 6063, jsvNewFromLongInteger($1, $1 >>> 0 < $5 >>> 0 ? $3 + 1 | 0 : $3));
             jsvObjectSetChildAndUnLock(HEAP32[$0 + 224 >> 2], 6074, jsvObjectGetChild(HEAP32[$0 + 264 >> 2], 6074, 0));
             jsvObjectSetChildAndUnLock(HEAP32[$0 + 224 >> 2], 6083, jsvObjectGetChild(HEAP32[$0 + 264 >> 2], 6083, 0));
             jsvObjectSetChildAndUnLock(HEAP32[$0 + 224 >> 2], 5263, jsvNewFromPin(HEAPU8[$0 + 263 | 0]));
             jsiTimerAdd(HEAP32[$0 + 224 >> 2]);
             jsvObjectSetChild(HEAP32[$0 + 264 >> 2], 6055, HEAP32[$0 + 224 >> 2]);
            }
           }
           jsvUnLock(HEAP32[$0 + 224 >> 2]);
          }
          if (HEAP8[$0 + 238 | 0] & 1) {
           HEAP32[$0 + 212 >> 2] = jsvNewFromFloat(jshGetMillisecondsFromTime(HEAP32[$0 + 240 >> 2], HEAP32[$0 + 244 >> 2]) / 1e3);
           if (jsiShouldExecuteWatch(HEAP32[$0 + 264 >> 2], HEAP8[$0 + 239 | 0] & 1) & 1) {
            HEAP32[$0 + 208 >> 2] = jsvObjectGetChild(HEAP32[$0 + 264 >> 2], 6074, 0);
            HEAP8[$0 + 207 | 0] = jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$0 + 264 >> 2], 6092, 0)) & 1;
            HEAP32[$0 + 200 >> 2] = jsvNewWithFlags(5);
            if (HEAP32[$0 + 200 >> 2]) {
             jsvObjectSetChildAndUnLock(HEAP32[$0 + 200 >> 2], 6083, jsvObjectGetChild(HEAP32[$0 + 264 >> 2], 6083, 0));
             jsvObjectSetChild(HEAP32[$0 + 200 >> 2], 6063, HEAP32[$0 + 212 >> 2]);
             jsvObjectSetChildAndUnLock(HEAP32[$0 + 200 >> 2], 5263, jsvNewFromPin(HEAPU8[$0 + 263 | 0]));
             jsvObjectSetChildAndUnLock(HEAP32[$0 + 200 >> 2], 6049, jsvNewFromBool(HEAP8[$0 + 239 | 0] & 1));
             HEAP8[$0 + 199 | 0] = jshGetEventDataPin(HEAPU8[$0 + 291 | 0]);
             if (jshIsPinValid(HEAPU8[$0 + 199 | 0]) & 1) {
              jsvObjectSetChildAndUnLock(HEAP32[$0 + 200 >> 2], 6098, jsvNewFromBool((HEAPU8[$0 + 296 | 0] & 64) != 0));
             }
            }
            if (!(jsiExecuteEventCallback(0, HEAP32[$0 + 208 >> 2], 1, $0 + 200 | 0) & 1 | !(HEAP8[$0 + 207 | 0] & 1))) {
             jsError(6103, 0);
             HEAP8[95095] = HEAPU8[95095] | 4;
             HEAP8[$0 + 207 | 0] = 0;
            }
            jsvUnLock(HEAP32[$0 + 200 >> 2]);
            if (!(HEAP8[$0 + 207 | 0] & 1)) {
             jsvObjectIteratorRemoveAndGotoNext($0 + 272 | 0, HEAP32[$0 + 276 >> 2]);
             HEAP8[$0 + 271 | 0] = 1;
             if (!(jsiIsWatchingPin(HEAPU8[$0 + 263 | 0]) & 1)) {
              jshPinWatch(HEAPU8[$0 + 263 | 0], 0);
             }
            }
            jsvUnLock(HEAP32[$0 + 208 >> 2]);
           }
           jsvObjectSetChildAndUnLock(HEAP32[$0 + 264 >> 2], 6083, HEAP32[$0 + 212 >> 2]);
          }
         }
         jsvUnLock(HEAP32[$0 + 264 >> 2]);
         if (!(HEAP8[$0 + 271 | 0] & 1)) {
          jsvObjectIteratorNext($0 + 272 | 0);
         }
         continue;
        }
        break;
       }
       jsvObjectIteratorFree($0 + 272 | 0);
       jsvUnLock(HEAP32[$0 + 276 >> 2]);
      }
     }
    }
   }
   continue;
  }
  break;
 }
 if ((jshGetEventsUsed() | 0) < 95) {
  jshSetFlowControlAllReady();
 }
 HEAP32[$0 + 184 >> 2] = -1;
 HEAP32[$0 + 188 >> 2] = 2147483647;
 HEAP32[$0 + 176 >> 2] = jshGetSystemTime();
 HEAP32[$0 + 180 >> 2] = i64toi32_i32$HIGH_BITS;
 $1 = HEAP32[$0 + 176 >> 2];
 $2 = HEAP32[23796];
 $3 = HEAP32[$0 + 180 >> 2] - (HEAP32[23797] + ($1 >>> 0 < $2 >>> 0) | 0) | 0;
 HEAP32[$0 + 168 >> 2] = $1 - $2;
 HEAP32[$0 + 172 >> 2] = $3;
 $1 = HEAP32[$0 + 180 >> 2];
 HEAP32[23796] = HEAP32[$0 + 176 >> 2];
 HEAP32[23797] = $1;
 HEAP32[$0 + 164 >> 2] = HEAP32[23798];
 HEAP32[23798] = HEAP32[23798] + HEAP32[$0 + 168 >> 2];
 if (HEAPU32[$0 + 164 >> 2] > HEAPU32[23798]) {
  HEAP32[23798] = -1;
 }
 $1 = $0 + 152 | 0;
 HEAP16[47566] = HEAPU16[47566] & -5;
 HEAP32[$0 + 160 >> 2] = jsvLock(HEAPU16[47564]);
 jsvObjectIteratorNew($1, HEAP32[$0 + 160 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue($0 + 152 | 0) & 1) {
   $2 = (HEAPU16[47566] & 4) != 0 ^ -1;
  } else {
   $2 = 0;
  }
  if ($2 & 1) {
   HEAP8[$0 + 151 | 0] = 0;
   HEAP32[$0 + 144 >> 2] = jsvObjectIteratorGetValue($0 + 152 | 0);
   HEAP32[$0 + 136 >> 2] = jsvGetLongIntegerAndUnLock(jsvObjectGetChild(HEAP32[$0 + 144 >> 2], 6063, 0));
   HEAP32[$0 + 140 >> 2] = i64toi32_i32$HIGH_BITS;
   $1 = HEAP32[$0 + 136 >> 2];
   $2 = HEAP32[$0 + 168 >> 2];
   $3 = HEAP32[$0 + 140 >> 2] - (HEAP32[$0 + 172 >> 2] + ($1 >>> 0 < $2 >>> 0) | 0) | 0;
   HEAP32[$0 + 128 >> 2] = $1 - $2;
   HEAP32[$0 + 132 >> 2] = $3;
   $1 = HEAP32[$0 + 132 >> 2];
   if (($1 | 0) < 0 ? 1 : ($1 | 0) <= 0 ? HEAPU32[$0 + 128 >> 2] > 0 ? 0 : 1 : 0) {
    jsiSetBusy(1, 1);
    HEAP8[$0 + 303 | 0] = 1;
    HEAP32[$0 + 124 >> 2] = jsvObjectGetChild(HEAP32[$0 + 144 >> 2], 6074, 0);
    HEAP32[$0 + 120 >> 2] = jsvObjectGetChild(HEAP32[$0 + 144 >> 2], 6068, 0);
    HEAP8[$0 + 119 | 0] = 1;
    HEAP32[$0 + 112 >> 2] = 0;
    if (HEAP32[$0 + 120 >> 2]) {
     HEAP32[$0 + 112 >> 2] = jsvNewWithFlags(5);
     if (HEAP32[$0 + 112 >> 2]) {
      HEAP32[$0 + 108 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$0 + 120 >> 2], 6040, 0));
      $4 = $0;
      $1 = HEAP32[23797] + HEAP32[$0 + 132 >> 2] | 0;
      $2 = HEAP32[$0 + 128 >> 2];
      $3 = $2 + HEAP32[23796] | 0;
      if ($3 >>> 0 < $2 >>> 0) {
       $1 = $1 + 1 | 0;
      }
      $2 = $3;
      $3 = HEAP32[$0 + 108 >> 2];
      HEAP32[$4 + 104 >> 2] = jsvNewFromFloat(jshGetMillisecondsFromTime($2 - $3 | 0, $1 - (($3 >> 31) + ($2 >>> 0 < $3 >>> 0) | 0) | 0) / 1e3);
      HEAP8[$0 + 103 | 0] = jsvGetBoolAndUnLock(jsvObjectSetChild(HEAP32[$0 + 112 >> 2], 6049, jsvObjectGetChild(HEAP32[$0 + 120 >> 2], 6049, 0))) & 1;
      HEAP8[$0 + 119 | 0] = jsiShouldExecuteWatch(HEAP32[$0 + 120 >> 2], HEAP8[$0 + 103 | 0] & 1) & 1;
      jsvObjectSetChildAndUnLock(HEAP32[$0 + 112 >> 2], 6083, jsvObjectGetChild(HEAP32[$0 + 120 >> 2], 6083, 0));
      jsvObjectSetChild(HEAP32[$0 + 120 >> 2], 6083, HEAP32[$0 + 104 >> 2]);
      jsvObjectSetChildAndUnLock(HEAP32[$0 + 112 >> 2], 6063, HEAP32[$0 + 104 >> 2]);
     }
    }
    HEAP8[$0 + 102 | 0] = 0;
    if (HEAP8[$0 + 119 | 0] & 1) {
     label$45 : {
      if (HEAP32[$0 + 112 >> 2]) {
       HEAP8[$0 + 101 | 0] = jsiExecuteEventCallback(0, HEAP32[$0 + 124 >> 2], 1, $0 + 112 | 0) & 1;
       break label$45;
      }
      HEAP32[$0 + 96 >> 2] = jsvObjectGetChild(HEAP32[$0 + 144 >> 2], 5964, 0);
      HEAP8[$0 + 101 | 0] = jsiExecuteEventCallbackArgsArray(0, HEAP32[$0 + 124 >> 2], HEAP32[$0 + 96 >> 2]) & 1;
      jsvUnLock(HEAP32[$0 + 96 >> 2]);
     }
     if (!(HEAP8[$0 + 101 | 0] & 1)) {
      HEAP32[$0 + 92 >> 2] = jsvObjectGetChild(HEAP32[$0 + 144 >> 2], 6148, 0);
      if (HEAP32[$0 + 92 >> 2]) {
       jsvUnLock(HEAP32[$0 + 92 >> 2]);
       jsError(6157, 0);
       HEAP8[95095] = HEAPU8[95095] | 4;
       HEAP8[$0 + 102 | 0] = 1;
      }
     }
    }
    jsvUnLock(HEAP32[$0 + 112 >> 2]);
    if (HEAP32[$0 + 120 >> 2]) {
     jsvObjectRemoveChild(HEAP32[$0 + 120 >> 2], 6055);
     if (HEAP8[$0 + 119 | 0] & 1) {
      HEAP8[$0 + 91 | 0] = jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$0 + 120 >> 2], 6092, 0)) & 1;
      if (!(HEAP8[$0 + 91 | 0] & 1)) {
       HEAP32[$0 + 84 >> 2] = jsvLock(HEAPU16[47565]);
       HEAP32[$0 + 80 >> 2] = jsvGetIndexOf(HEAP32[$0 + 84 >> 2], HEAP32[$0 + 120 >> 2], 1);
       if (HEAP32[$0 + 80 >> 2]) {
        jsvRemoveChild(HEAP32[$0 + 84 >> 2], HEAP32[$0 + 80 >> 2]);
        jsvUnLock(HEAP32[$0 + 80 >> 2]);
       }
       jsvUnLock(HEAP32[$0 + 84 >> 2]);
       HEAP8[$0 + 79 | 0] = jshGetPinFromVarAndUnLock(jsvObjectGetChild(HEAP32[$0 + 120 >> 2], 5263, 0));
       if (!(jsiIsWatchingPin(HEAPU8[$0 + 79 | 0]) & 1)) {
        jshPinWatch(HEAPU8[$0 + 79 | 0], 0);
       }
      }
     }
     jsvUnLock(HEAP32[$0 + 120 >> 2]);
    }
    HEAP32[$0 + 72 >> 2] = jsvObjectGetChild(HEAP32[$0 + 144 >> 2], 6148, 0);
    label$54 : {
     if (!(!HEAP32[$0 + 72 >> 2] | HEAP8[$0 + 102 | 0] & 1)) {
      $4 = HEAP32[$0 + 128 >> 2];
      $3 = HEAP32[$0 + 132 >> 2];
      $1 = jsvGetLongInteger(HEAP32[$0 + 72 >> 2]);
      $3 = i64toi32_i32$HIGH_BITS + $3 | 0;
      $4 = $1 + $4 | 0;
      if ($4 >>> 0 < $1 >>> 0) {
       $3 = $3 + 1 | 0;
      }
      HEAP32[$0 + 128 >> 2] = $4;
      HEAP32[$0 + 132 >> 2] = $3;
      break label$54;
     }
     jsvObjectIteratorRemoveAndGotoNext($0 + 152 | 0, HEAP32[$0 + 160 >> 2]);
     HEAP8[$0 + 151 | 0] = 1;
     HEAP32[$0 + 128 >> 2] = -1;
     HEAP32[$0 + 132 >> 2] = -1;
    }
    jsvUnLock2(HEAP32[$0 + 124 >> 2], HEAP32[$0 + 72 >> 2]);
   }
   $1 = HEAP32[$0 + 132 >> 2];
   label$56 : {
    if (($1 | 0) < 0 ? 1 : ($1 | 0) <= 0 ? HEAPU32[$0 + 128 >> 2] >= 0 ? 0 : 1 : 0) {
     break label$56;
    }
    $1 = HEAP32[$0 + 132 >> 2];
    $2 = HEAP32[$0 + 188 >> 2];
    if (($1 | 0) > ($2 | 0) ? 1 : ($1 | 0) >= ($2 | 0) ? HEAPU32[$0 + 128 >> 2] < HEAPU32[$0 + 184 >> 2] ? 0 : 1 : 0) {
     break label$56;
    }
    $1 = HEAP32[$0 + 132 >> 2];
    HEAP32[$0 + 184 >> 2] = HEAP32[$0 + 128 >> 2];
    HEAP32[$0 + 188 >> 2] = $1;
   }
   if (!(HEAP8[$0 + 151 | 0] & 1)) {
    $1 = $0 + 152 | 0;
    jsvObjectSetChildAndUnLock(HEAP32[$0 + 144 >> 2], 6063, jsvNewFromLongInteger(HEAP32[$0 + 128 >> 2], HEAP32[$0 + 132 >> 2]));
    jsvObjectIteratorNext($1);
   }
   jsvUnLock(HEAP32[$0 + 144 >> 2]);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree($0 + 152 | 0);
 jsvUnLock(HEAP32[$0 + 160 >> 2]);
 if (jswIdle() & 1) {
  HEAP8[$0 + 303 | 0] = 1;
 }
 label$59 : {
  if (!(HEAP8[$0 + 303 | 0] & 1)) {
   if (jsvArrayIsEmpty(HEAP32[23781]) & 1) {
    break label$59;
   }
  }
  HEAP8[95150] = 0;
 }
 if (HEAP8[$0 + 303 | 0] & 1) {
  jsiSetBusy(1, 0);
 }
 if (!(jspIsInterrupted() & 1)) {
  jsiExecuteEvents();
 }
 if (HEAPU16[47566] & 224) {
  jsiSetBusy(1, 1);
  HEAP16[$0 + 70 >> 1] = HEAPU16[47566];
  if ((HEAPU16[$0 + 70 >> 1] & 128) == 128) {
   jsiKill();
   jshResetDevices();
   jsvInit();
   jsiSemiInit(0);
   HEAP16[47566] = HEAPU16[47566] & 65407;
  }
  if ((HEAPU16[$0 + 70 >> 1] & 32) == 32) {
   jsvGarbageCollect();
   jsiSoftKill();
   jspSoftKill();
   jsvClearEmptyVarList();
   jsfSaveToFlash();
   jshResetDevices();
   jsvCreateEmptyVarList();
   jspSoftInit();
   jsiSoftInit(0);
   HEAP16[47566] = HEAPU16[47566] & 65503;
  }
  if ((HEAPU16[$0 + 70 >> 1] & 64) == 64) {
   HEAP32[$0 + 64 >> 2] = jsvObjectGetChild(HEAP32[23775], 6205, 0);
   label$67 : {
    if (HEAP32[$0 + 64 >> 2]) {
     jsfNameFromVarAndUnLock($0 + 32 | 0, HEAP32[$0 + 64 >> 2]);
     jsiKill();
     jshResetDevices();
     jsvInit();
     jsiSemiInit(0);
     HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 56 >> 2];
     $1 = HEAP32[$0 + 52 >> 2];
     HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 48 >> 2];
     HEAP32[$0 + 20 >> 2] = $1;
     $1 = HEAP32[$0 + 44 >> 2];
     HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 40 >> 2];
     HEAP32[$0 + 12 >> 2] = $1;
     $1 = HEAP32[$0 + 36 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$0 + 32 >> 2];
     HEAP32[$0 + 4 >> 2] = $1;
     HEAP32[$0 + 28 >> 2] = jsfReadFile($0, 0, 0);
     if (HEAP32[$0 + 28 >> 2]) {
      jsvUnLock2(jspEvaluateVar(HEAP32[$0 + 28 >> 2], 0, 0), HEAP32[$0 + 28 >> 2]);
     }
     break label$67;
    }
    jsiSoftKill();
    jspSoftKill();
    jsvClearEmptyVarList();
    jshResetDevices();
    jsvInit();
    jsfLoadStateFromFlash();
    jsvCreateEmptyVarList();
    jspSoftInit();
    jsiSoftInit(0);
   }
   HEAP16[47566] = HEAPU16[47566] & 65471;
  }
  jsiSetBusy(1, 0);
 }
 label$70 : {
  if (HEAPU8[95150] != 1) {
   break label$70;
  }
  $1 = HEAP32[$0 + 188 >> 2];
  $3 = HEAPU32[$0 + 184 >> 2] > jshGetTimeFromMilliseconds(10) >>> 0 ? 0 : 1;
  $2 = i64toi32_i32$HIGH_BITS;
  if (($1 | 0) < ($2 | 0) ? 1 : ($1 | 0) <= ($2 | 0) ? $3 : 0) {
   break label$70;
  }
  if (jsvMoreFreeVariablesThan() & 1) {
   break label$70;
  }
  jsiSetBusy(1, 1);
  jsvGarbageCollect();
  HEAP8[95150] = 0;
  jsiSetBusy(1, 0);
 }
 label$71 : {
  if (HEAPU8[95150] < 1) {
   break label$71;
  }
  if (jshHasEvents() & 1) {
   break label$71;
  }
  if (jshHasTransmitData() & 1) {
   break label$71;
  }
  jshSleep(HEAP32[$0 + 184 >> 2], HEAP32[$0 + 188 >> 2]);
 }
 global$0 = $0 + 304 | 0;
}
function jsvMathsOp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 80 | 0;
 global$0 = $3;
 HEAP32[$3 + 72 >> 2] = $0;
 HEAP32[$3 + 68 >> 2] = $1;
 HEAP32[$3 + 64 >> 2] = $2;
 label$1 : {
  if (!(HEAP32[$3 + 64 >> 2] != 141 ? HEAP32[$3 + 64 >> 2] != 139 : 0)) {
   HEAP8[$3 + 63 | 0] = jsvMathsOpTypeEqual(HEAP32[$3 + 72 >> 2], HEAP32[$3 + 68 >> 2]) & 1;
   if (HEAP32[$3 + 64 >> 2] == 139) {
    HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP8[$3 + 63 | 0] & 1);
    break label$1;
   }
   HEAP32[$3 + 76 >> 2] = jsvNewFromBool((HEAPU8[$3 + 63 | 0] ^ -1) & 1);
   break label$1;
  }
  $0 = $3;
  $1 = 1;
  label$5 : {
   if (HEAP32[$3 + 64 >> 2] == 38) {
    break label$5;
   }
   $1 = 1;
   if (HEAP32[$3 + 64 >> 2] == 124) {
    break label$5;
   }
   $1 = 1;
   if (HEAP32[$3 + 64 >> 2] == 94) {
    break label$5;
   }
   $1 = 1;
   if (HEAP32[$3 + 64 >> 2] == 143) {
    break label$5;
   }
   $1 = 1;
   if (HEAP32[$3 + 64 >> 2] == 146) {
    break label$5;
   }
   $1 = HEAP32[$3 + 64 >> 2] == 147;
  }
  HEAP8[$0 + 62 | 0] = $1;
  $0 = $3;
  $1 = 1;
  label$6 : {
   if (HEAP8[$3 + 62 | 0] & 1) {
    break label$6;
   }
   $1 = 1;
   if (HEAP32[$3 + 64 >> 2] == 42) {
    break label$6;
   }
   $1 = 1;
   if (HEAP32[$3 + 64 >> 2] == 47) {
    break label$6;
   }
   $1 = 1;
   if (HEAP32[$3 + 64 >> 2] == 37) {
    break label$6;
   }
   $1 = HEAP32[$3 + 64 >> 2] == 45;
  }
  HEAP8[$0 + 61 | 0] = $1;
  $0 = $3;
  $1 = 1;
  label$7 : {
   if (HEAP32[$3 + 64 >> 2] == 138) {
    break label$7;
   }
   $1 = 1;
   if (HEAP32[$3 + 64 >> 2] == 140) {
    break label$7;
   }
   $1 = 1;
   if (HEAP32[$3 + 64 >> 2] == 60) {
    break label$7;
   }
   $1 = 1;
   if (HEAP32[$3 + 64 >> 2] == 142) {
    break label$7;
   }
   $1 = 1;
   if (HEAP32[$3 + 64 >> 2] == 62) {
    break label$7;
   }
   $1 = HEAP32[$3 + 64 >> 2] == 145;
  }
  HEAP8[$0 + 60 | 0] = $1;
  if (HEAP8[$3 + 60 | 0] & 1) {
   label$9 : {
    label$10 : {
     if (!(jsvIsNumeric(HEAP32[$3 + 72 >> 2]) & 1)) {
      break label$10;
     }
     if (!(jsvIsString(HEAP32[$3 + 68 >> 2]) & 1)) {
      break label$10;
     }
     HEAP8[$3 + 61 | 0] = 1;
     $1 = jsvIsIntegerish(HEAP32[$3 + 72 >> 2]) & 1;
     $0 = $3;
     if ($1) {
      $1 = jsvIsStringNumericInt(HEAP32[$3 + 68 >> 2], 0);
     } else {
      $1 = 0;
     }
     HEAP8[$0 + 62 | 0] = $1 & 1;
     break label$9;
    }
    label$13 : {
     if (!(jsvIsNumeric(HEAP32[$3 + 68 >> 2]) & 1)) {
      break label$13;
     }
     if (!(jsvIsString(HEAP32[$3 + 72 >> 2]) & 1)) {
      break label$13;
     }
     HEAP8[$3 + 61 | 0] = 1;
     $1 = jsvIsIntegerish(HEAP32[$3 + 68 >> 2]) & 1;
     $0 = $3;
     if ($1) {
      $1 = jsvIsStringNumericInt(HEAP32[$3 + 72 >> 2], 0);
     } else {
      $1 = 0;
     }
     HEAP8[$0 + 62 | 0] = $1 & 1;
    }
   }
  }
  label$16 : {
   if (!(jsvIsUndefined(HEAP32[$3 + 72 >> 2]) & 1)) {
    break label$16;
   }
   if (!(jsvIsUndefined(HEAP32[$3 + 68 >> 2]) & 1)) {
    break label$16;
   }
   if (HEAP32[$3 + 64 >> 2] == 138) {
    HEAP32[$3 + 76 >> 2] = jsvNewFromBool(1);
    break label$1;
   }
   if (HEAP32[$3 + 64 >> 2] == 140) {
    HEAP32[$3 + 76 >> 2] = jsvNewFromBool(0);
    break label$1;
   }
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  label$19 : {
   label$20 : {
    if (HEAP8[$3 + 61 | 0] & 1) {
     break label$20;
    }
    label$21 : {
     if (jsvIsNumeric(HEAP32[$3 + 72 >> 2]) & 1) {
      break label$21;
     }
     if (jsvIsUndefined(HEAP32[$3 + 72 >> 2]) & 1) {
      break label$21;
     }
     if (!(jsvIsNull(HEAP32[$3 + 72 >> 2]) & 1)) {
      break label$19;
     }
    }
    if (jsvIsNumeric(HEAP32[$3 + 68 >> 2]) & 1) {
     break label$20;
    }
    if (jsvIsUndefined(HEAP32[$3 + 68 >> 2]) & 1) {
     break label$20;
    }
    if (!(jsvIsNull(HEAP32[$3 + 68 >> 2]) & 1)) {
     break label$19;
    }
   }
   label$22 : {
    if (!(HEAP8[$3 + 62 | 0] & 1)) {
     if (!(jsvIsIntegerish(HEAP32[$3 + 72 >> 2]) & 1)) {
      break label$22;
     }
     if (!(jsvIsIntegerish(HEAP32[$3 + 68 >> 2]) & 1)) {
      break label$22;
     }
    }
    HEAP32[$3 + 56 >> 2] = jsvGetInteger(HEAP32[$3 + 72 >> 2]);
    HEAP32[$3 + 52 >> 2] = jsvGetInteger(HEAP32[$3 + 68 >> 2]);
    label$24 : {
     $0 = HEAP32[$3 + 64 >> 2] + -37 | 0;
     if ($0 >>> 0 > 110) {
      break label$24;
     }
     label$25 : {
      switch ($0 - 1 | 0) {
      case 5:
       $0 = HEAP32[$3 + 56 >> 2];
       $2 = HEAP32[$3 + 52 >> 2];
       $1 = $0 + $2 | 0;
       $0 = ($0 >> 31) + ($2 >> 31) | 0;
       HEAP32[$3 + 76 >> 2] = jsvNewFromLongInteger($1, $1 >>> 0 < $2 >>> 0 ? $0 + 1 | 0 : $0);
       break label$1;
      case 7:
       $0 = HEAP32[$3 + 56 >> 2];
       $2 = HEAP32[$3 + 52 >> 2];
       HEAP32[$3 + 76 >> 2] = jsvNewFromLongInteger($0 - $2 | 0, ($0 >> 31) - (($2 >> 31) + ($0 >>> 0 < $2 >>> 0) | 0) | 0);
       break label$1;
      case 4:
       $0 = HEAP32[$3 + 56 >> 2];
       $1 = $0;
       $2 = $0 >> 31;
       $0 = HEAP32[$3 + 52 >> 2];
       HEAP32[$3 + 76 >> 2] = jsvNewFromLongInteger(__wasm_i64_mul($1, $2, $0, $0 >> 31), i64toi32_i32$HIGH_BITS);
       break label$1;
      case 9:
       HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(+HEAP32[$3 + 56 >> 2] / +HEAP32[$3 + 52 >> 2]);
       break label$1;
      case 0:
       HEAP32[$3 + 76 >> 2] = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] & HEAP32[$3 + 52 >> 2]);
       break label$1;
      case 86:
       HEAP32[$3 + 76 >> 2] = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] | HEAP32[$3 + 52 >> 2]);
       break label$1;
      case 56:
       HEAP32[$3 + 76 >> 2] = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] ^ HEAP32[$3 + 52 >> 2]);
       break label$1;
      default:
       $0 = $3;
       label$42 : {
        if (HEAP32[$3 + 52 >> 2]) {
         $1 = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] % HEAP32[$3 + 52 >> 2] | 0);
         break label$42;
        }
        $1 = jsvNewFromFloat(nan);
       }
       HEAP32[$0 + 76 >> 2] = $1;
       break label$1;
      case 105:
       HEAP32[$3 + 76 >> 2] = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] << HEAP32[$3 + 52 >> 2]);
       break label$1;
      case 108:
       HEAP32[$3 + 76 >> 2] = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] >> HEAP32[$3 + 52 >> 2]);
       break label$1;
      case 109:
       HEAP32[$3 + 76 >> 2] = jsvNewFromLongInteger(HEAP32[$3 + 56 >> 2] >>> HEAP32[$3 + 52 >> 2], 0);
       break label$1;
      case 100:
       $0 = $3;
       if (HEAP32[$3 + 56 >> 2] == HEAP32[$3 + 52 >> 2]) {
        $1 = (jsvIsNull(HEAP32[$3 + 72 >> 2]) & 1) == (jsvIsNull(HEAP32[$3 + 68 >> 2]) & 1);
       } else {
        $1 = 0;
       }
       HEAP32[$0 + 76 >> 2] = jsvNewFromBool($1);
       break label$1;
      case 102:
       $0 = $3;
       if (HEAP32[$3 + 56 >> 2] == HEAP32[$3 + 52 >> 2]) {
        $1 = (jsvIsNull(HEAP32[$3 + 72 >> 2]) & 1) != (jsvIsNull(HEAP32[$3 + 68 >> 2]) & 1);
       } else {
        $1 = 1;
       }
       HEAP32[$0 + 76 >> 2] = jsvNewFromBool($1);
       break label$1;
      case 22:
       HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 56 >> 2] < HEAP32[$3 + 52 >> 2]);
       break label$1;
      case 104:
       HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 56 >> 2] <= HEAP32[$3 + 52 >> 2]);
       break label$1;
      case 24:
       HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 56 >> 2] > HEAP32[$3 + 52 >> 2]);
       break label$1;
      case 1:
      case 2:
      case 3:
      case 6:
      case 8:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 23:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 101:
      case 103:
      case 106:
       break label$24;
      case 107:
       break label$25;
      }
     }
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 56 >> 2] >= HEAP32[$3 + 52 >> 2]);
     break label$1;
    }
    HEAP32[$3 + 76 >> 2] = jsvMathsOpError(HEAP32[$3 + 64 >> 2], 2953);
    break label$1;
   }
   HEAPF64[$3 + 40 >> 3] = jsvGetFloat(HEAP32[$3 + 72 >> 2]);
   HEAPF64[$3 + 32 >> 3] = jsvGetFloat(HEAP32[$3 + 68 >> 2]);
   label$48 : {
    $0 = HEAP32[$3 + 64 >> 2] + -37 | 0;
    if ($0 >>> 0 > 108) {
     break label$48;
    }
    label$49 : {
     switch ($0 - 1 | 0) {
     case 5:
      HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(HEAPF64[$3 + 40 >> 3] + HEAPF64[$3 + 32 >> 3]);
      break label$1;
     case 7:
      HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(HEAPF64[$3 + 40 >> 3] - HEAPF64[$3 + 32 >> 3]);
      break label$1;
     case 4:
      HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(HEAPF64[$3 + 40 >> 3] * HEAPF64[$3 + 32 >> 3]);
      break label$1;
     case 9:
      HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(HEAPF64[$3 + 40 >> 3] / HEAPF64[$3 + 32 >> 3]);
      break label$1;
     default:
      HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(jswrap_math_mod(HEAPF64[$3 + 40 >> 3], HEAPF64[$3 + 32 >> 3]));
      break label$1;
     case 100:
     case 102:
      HEAP8[$3 + 31 | 0] = HEAPF64[$3 + 40 >> 3] == HEAPF64[$3 + 32 >> 3];
      label$59 : {
       label$60 : {
        if (jsvIsNull(HEAP32[$3 + 72 >> 2]) & 1) {
         if (jsvIsUndefined(HEAP32[$3 + 68 >> 2]) & 1) {
          break label$60;
         }
        }
        if (!(jsvIsNull(HEAP32[$3 + 68 >> 2]) & 1)) {
         break label$59;
        }
        if (!(jsvIsUndefined(HEAP32[$3 + 72 >> 2]) & 1)) {
         break label$59;
        }
       }
       HEAP8[$3 + 31 | 0] = 1;
      }
      $0 = $3;
      if (HEAP32[$3 + 64 >> 2] == 138) {
       $1 = HEAP8[$3 + 31 | 0] & 1;
      } else {
       $1 = (HEAPU8[$3 + 31 | 0] ^ -1) & 1;
      }
      HEAP32[$0 + 76 >> 2] = jsvNewFromBool(($1 | 0) != 0);
      break label$1;
     case 22:
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAPF64[$3 + 40 >> 3] < HEAPF64[$3 + 32 >> 3]);
      break label$1;
     case 104:
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAPF64[$3 + 40 >> 3] <= HEAPF64[$3 + 32 >> 3]);
      break label$1;
     case 24:
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAPF64[$3 + 40 >> 3] > HEAPF64[$3 + 32 >> 3]);
      break label$1;
     case 0:
     case 1:
     case 2:
     case 3:
     case 6:
     case 8:
     case 10:
     case 11:
     case 12:
     case 13:
     case 14:
     case 15:
     case 16:
     case 17:
     case 18:
     case 19:
     case 20:
     case 21:
     case 23:
     case 25:
     case 26:
     case 27:
     case 28:
     case 29:
     case 30:
     case 31:
     case 32:
     case 33:
     case 34:
     case 35:
     case 36:
     case 37:
     case 38:
     case 39:
     case 40:
     case 41:
     case 42:
     case 43:
     case 44:
     case 45:
     case 46:
     case 47:
     case 48:
     case 49:
     case 50:
     case 51:
     case 52:
     case 53:
     case 54:
     case 55:
     case 56:
     case 57:
     case 58:
     case 59:
     case 60:
     case 61:
     case 62:
     case 63:
     case 64:
     case 65:
     case 66:
     case 67:
     case 68:
     case 69:
     case 70:
     case 71:
     case 72:
     case 73:
     case 74:
     case 75:
     case 76:
     case 77:
     case 78:
     case 79:
     case 80:
     case 81:
     case 82:
     case 83:
     case 84:
     case 85:
     case 86:
     case 87:
     case 88:
     case 89:
     case 90:
     case 91:
     case 92:
     case 93:
     case 94:
     case 95:
     case 96:
     case 97:
     case 98:
     case 99:
     case 101:
     case 103:
     case 105:
     case 106:
      break label$48;
     case 107:
      break label$49;
     }
    }
    HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAPF64[$3 + 40 >> 3] >= HEAPF64[$3 + 32 >> 3]);
    break label$1;
   }
   HEAP32[$3 + 76 >> 2] = jsvMathsOpError(HEAP32[$3 + 64 >> 2], 2961);
   break label$1;
  }
  label$64 : {
   label$65 : {
    if (jsvIsArray(HEAP32[$3 + 72 >> 2]) & 1) {
     break label$65;
    }
    if (jsvIsObject(HEAP32[$3 + 72 >> 2]) & 1) {
     break label$65;
    }
    if (jsvIsFunction(HEAP32[$3 + 72 >> 2]) & 1) {
     break label$65;
    }
    if (jsvIsArray(HEAP32[$3 + 68 >> 2]) & 1) {
     break label$65;
    }
    if (jsvIsObject(HEAP32[$3 + 68 >> 2]) & 1) {
     break label$65;
    }
    if (!(jsvIsFunction(HEAP32[$3 + 68 >> 2]) & 1)) {
     break label$64;
    }
   }
   if ((jsvIsArray(HEAP32[$3 + 72 >> 2]) & 1) != (jsvIsArray(HEAP32[$3 + 68 >> 2]) & 1) | (HEAP32[$3 + 64 >> 2] != 140 ? HEAP32[$3 + 64 >> 2] != 138 : 0)) {
    break label$64;
   }
   HEAP8[$3 + 30 | 0] = HEAP32[$3 + 72 >> 2] == HEAP32[$3 + 68 >> 2];
   label$67 : {
    if (!(jsvIsNativeFunction(HEAP32[$3 + 72 >> 2]) & 1)) {
     if (!(jsvIsNativeFunction(HEAP32[$3 + 68 >> 2]) & 1)) {
      break label$67;
     }
    }
    $0 = $3;
    $1 = 0;
    label$69 : {
     if (!HEAP32[$3 + 72 >> 2]) {
      break label$69;
     }
     $1 = 0;
     if (!HEAP32[$3 + 68 >> 2]) {
      break label$69;
     }
     $1 = 0;
     if (HEAP32[HEAP32[$3 + 72 >> 2] >> 2] != HEAP32[HEAP32[$3 + 68 >> 2] >> 2]) {
      break label$69;
     }
     $1 = 0;
     if (HEAPU16[HEAP32[$3 + 72 >> 2] + 4 >> 1] != HEAPU16[HEAP32[$3 + 68 >> 2] + 4 >> 1]) {
      break label$69;
     }
     $1 = (jsvGetFirstChild(HEAP32[$3 + 72 >> 2]) & 65535) == (jsvGetFirstChild(HEAP32[$3 + 68 >> 2]) & 65535);
    }
    HEAP8[$0 + 30 | 0] = $1;
   }
   label$70 : {
    $0 = HEAP32[$3 + 64 >> 2] + -138 | 0;
    if ($0 >>> 0 > 2) {
     break label$70;
    }
    label$71 : {
     switch ($0 - 1 | 0) {
     default:
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP8[$3 + 30 | 0] & 1);
      break label$1;
     case 0:
      break label$70;
     case 1:
      break label$71;
     }
    }
    HEAP32[$3 + 76 >> 2] = jsvNewFromBool((HEAPU8[$3 + 30 | 0] ^ -1) & 1);
    break label$1;
   }
   HEAP32[$3 + 76 >> 2] = jsvMathsOpError(HEAP32[$3 + 64 >> 2], jsvIsArray(HEAP32[$3 + 72 >> 2]) & 1 ? 2968 : 2974);
   break label$1;
  }
  HEAP32[$3 + 24 >> 2] = jsvAsString(HEAP32[$3 + 72 >> 2]);
  HEAP32[$3 + 20 >> 2] = jsvAsString(HEAP32[$3 + 68 >> 2]);
  if (!(HEAP32[$3 + 20 >> 2] ? HEAP32[$3 + 24 >> 2] : 0)) {
   jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$3 + 64 >> 2] == 43) {
   label$76 : {
    label$77 : {
     if (!(jsvIsBasicString(HEAP32[$3 + 24 >> 2]) & 1)) {
      break label$77;
     }
     if ((jsvGetLocks(HEAP32[$3 + 24 >> 2]) & 255) != 1) {
      break label$77;
     }
     if (jsvGetRefs(HEAP32[$3 + 24 >> 2]) & 65535) {
      break label$77;
     }
     HEAP32[$3 + 16 >> 2] = jsvLockAgain(HEAP32[$3 + 24 >> 2]);
     break label$76;
    }
    HEAP32[$3 + 16 >> 2] = jsvCopy(HEAP32[$3 + 24 >> 2], 0);
   }
   if (HEAP32[$3 + 16 >> 2]) {
    jsvAppendStringVarComplete(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 20 >> 2]);
   }
   jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 16 >> 2];
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvCompareString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], 0, 0);
  jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
  label$79 : {
   label$80 : {
    label$81 : {
     label$82 : {
      $0 = HEAP32[$3 + 64 >> 2];
      if (($0 | 0) != 60) {
       if (($0 | 0) == 62) {
        break label$81;
       }
       label$84 : {
        if (($0 | 0) != 138) {
         switch ($0 - 140 | 0) {
         case 5:
          break label$80;
         case 2:
          break label$82;
         case 0:
          break label$84;
         default:
          break label$79;
         }
        }
        HEAP32[$3 + 76 >> 2] = jsvNewFromBool(!HEAP32[$3 + 12 >> 2]);
        break label$1;
       }
       HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 12 >> 2] != 0);
       break label$1;
      }
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 12 >> 2] < 0);
      break label$1;
     }
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 12 >> 2] <= 0);
     break label$1;
    }
    HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 12 >> 2] > 0);
    break label$1;
   }
   HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 12 >> 2] >= 0);
   break label$1;
  }
  HEAP32[$3 + 76 >> 2] = jsvMathsOpError(HEAP32[$3 + 64 >> 2], 2981);
 }
 global$0 = $3 + 80 | 0;
 return HEAP32[$3 + 76 >> 2];
}
function jspeFunctionCall($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $7 = global$0 - 416 | 0;
 $6 = $7;
 global$0 = $6;
 HEAP32[$6 + 408 >> 2] = $0;
 HEAP32[$6 + 404 >> 2] = $1;
 HEAP32[$6 + 400 >> 2] = $2;
 HEAP8[$6 + 399 | 0] = $3;
 HEAP32[$6 + 392 >> 2] = $4;
 HEAP32[$6 + 388 >> 2] = $5;
 label$1 : {
  if (!(HEAP32[$6 + 408 >> 2] | (HEAP32[23778] & 63) != 1)) {
   label$3 : {
    if (HEAP32[$6 + 404 >> 2]) {
     HEAP32[$6 + 64 >> 2] = HEAP32[$6 + 404 >> 2];
     jsExceptionHere(1, 3867, $6 - -64 | 0);
     break label$3;
    }
    HEAP32[$6 + 80 >> 2] = HEAP32[$6 + 404 >> 2];
    jsExceptionHere(1, 3890, $6 + 80 | 0);
   }
   HEAP32[$6 + 412 >> 2] = 0;
   break label$1;
  }
  if ((HEAP32[23778] & 63) == 1) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$6 + 412 >> 2] = 0;
    break label$1;
   }
  }
  if (!(!HEAP32[$6 + 408 >> 2] | (HEAP32[23778] & 63) != 1)) {
   HEAP32[$6 + 384 >> 2] = 0;
   if (!(jsvIsFunction(HEAP32[$6 + 408 >> 2]) & 1)) {
    HEAP32[$6 + 48 >> 2] = HEAP32[$6 + 408 >> 2];
    jsExceptionHere(1, 3910, $6 + 48 | 0);
    HEAP32[$6 + 412 >> 2] = 0;
    break label$1;
   }
   HEAP32[$6 + 380 >> 2] = jsvLockAgainSafe(HEAP32[$6 + 400 >> 2]);
   if (HEAP8[$6 + 399 | 0] & 1) {
    if (!(jslMatch(40) & 1)) {
     HEAP32[$6 + 412 >> 2] = 0;
     break label$1;
    }
   }
   label$11 : {
    if (jsvIsNative(HEAP32[$6 + 408 >> 2]) & 1) {
     HEAP32[$6 + 376 >> 2] = 0;
     HEAP32[$6 + 372 >> 2] = 0;
     $0 = $6 + 368 | 0;
     jsvObjectIteratorNew($0, HEAP32[$6 + 408 >> 2]);
     HEAP32[$6 + 364 >> 2] = jsvObjectIteratorGetKey($0);
     while (1) {
      if (jsvIsFunctionParameter(HEAP32[$6 + 364 >> 2]) & 1) {
       if (HEAPU32[$6 + 392 >> 2] >= HEAPU32[$6 + 376 >> 2]) {
        $0 = $6;
        if (HEAP32[$6 + 376 >> 2]) {
         $1 = HEAP32[$6 + 376 >> 2];
        } else {
         $1 = HEAP32[$6 + 392 >> 2];
        }
        HEAP32[$0 + 360 >> 2] = $1 << 2;
        HEAP32[$6 + 356 >> 2] = HEAP32[$6 + 360 >> 2] << 2;
        if (1e6 < HEAP32[$6 + 356 >> 2] + 256 >>> 0) {
         jsExceptionHere(1, 3947, 0);
         jsvUnLock(HEAP32[$6 + 380 >> 2]);
         HEAP32[$6 + 412 >> 2] = 0;
         break label$1;
        }
        $0 = $7 - (HEAP32[$6 + 356 >> 2] + 15 & -16) | 0;
        $7 = $0;
        global$0 = $0;
        HEAP32[$6 + 352 >> 2] = $0;
        memcpy(HEAP32[$6 + 352 >> 2], HEAP32[$6 + 388 >> 2], HEAP32[$6 + 392 >> 2] << 2);
        HEAP32[$6 + 388 >> 2] = HEAP32[$6 + 352 >> 2];
        HEAP32[$6 + 376 >> 2] = HEAP32[$6 + 360 >> 2];
       }
       HEAP32[$6 + 348 >> 2] = HEAP32[$6 + 392 >> 2] - 1;
       while (1) {
        if (HEAP32[$6 + 348 >> 2] >= HEAP32[$6 + 372 >> 2]) {
         HEAP32[HEAP32[$6 + 388 >> 2] + (HEAP32[$6 + 348 >> 2] + 1 << 2) >> 2] = HEAP32[HEAP32[$6 + 388 >> 2] + (HEAP32[$6 + 348 >> 2] << 2) >> 2];
         HEAP32[$6 + 348 >> 2] = HEAP32[$6 + 348 >> 2] + -1;
         continue;
        }
        break;
       }
       $0 = $6 + 368 | 0;
       $1 = jsvSkipName(HEAP32[$6 + 364 >> 2]);
       HEAP32[HEAP32[$6 + 388 >> 2] + (HEAP32[$6 + 372 >> 2] << 2) >> 2] = $1;
       HEAP32[$6 + 392 >> 2] = HEAP32[$6 + 392 >> 2] + 1;
       HEAP32[$6 + 372 >> 2] = HEAP32[$6 + 372 >> 2] + 1;
       jsvUnLock(HEAP32[$6 + 364 >> 2]);
       jsvObjectIteratorNext($0);
       HEAP32[$6 + 364 >> 2] = jsvObjectIteratorGetKey($0);
       continue;
      }
      break;
     }
     while (1) {
      label$22 : {
       if (!HEAP32[$6 + 364 >> 2]) {
        break label$22;
       }
       if (jsvIsStringEqual(HEAP32[$6 + 364 >> 2], 3990) & 1) {
        jsvUnLock(HEAP32[$6 + 380 >> 2]);
        HEAP32[$6 + 380 >> 2] = jsvSkipName(HEAP32[$6 + 364 >> 2]);
        break label$22;
       }
       $0 = $6 + 368 | 0;
       jsvUnLock(HEAP32[$6 + 364 >> 2]);
       jsvObjectIteratorNext($0);
       HEAP32[$6 + 364 >> 2] = jsvObjectIteratorGetKey($0);
       continue;
      }
      break;
     }
     $0 = $6 + 368 | 0;
     jsvUnLock(HEAP32[$6 + 364 >> 2]);
     jsvObjectIteratorFree($0);
     HEAP32[$6 + 344 >> 2] = HEAP32[$6 + 372 >> 2];
     if (HEAP8[$6 + 399 | 0] & 1) {
      while (1) {
       $0 = 0;
       label$26 : {
        if (HEAP32[23778] & 112) {
         break label$26;
        }
        $0 = 0;
        if (HEAP16[HEAP32[13768] + 2 >> 1] == 41) {
         break label$26;
        }
        $0 = HEAP16[HEAP32[13768] + 2 >> 1];
       }
       if ($0) {
        if (HEAPU32[$6 + 392 >> 2] >= HEAPU32[$6 + 376 >> 2]) {
         $0 = $6;
         if (HEAP32[$6 + 376 >> 2]) {
          $1 = HEAP32[$6 + 376 >> 2] << 2;
         } else {
          $1 = 16;
         }
         HEAP32[$0 + 340 >> 2] = $1;
         $0 = $7 - ((HEAP32[$6 + 340 >> 2] << 2) + 15 & -16) | 0;
         $7 = $0;
         global$0 = $0;
         HEAP32[$6 + 336 >> 2] = $0;
         memcpy(HEAP32[$6 + 336 >> 2], HEAP32[$6 + 388 >> 2], HEAP32[$6 + 392 >> 2] << 2);
         HEAP32[$6 + 388 >> 2] = HEAP32[$6 + 336 >> 2];
         HEAP32[$6 + 376 >> 2] = HEAP32[$6 + 340 >> 2];
        }
        $0 = jsvSkipNameAndUnLock(__jspeAssignmentExpression(jspeConditionalExpression()));
        $1 = HEAP32[$6 + 388 >> 2];
        $2 = HEAP32[$6 + 392 >> 2];
        HEAP32[$6 + 392 >> 2] = $2 + 1;
        HEAP32[$1 + ($2 << 2) >> 2] = $0;
        if (HEAP16[HEAP32[13768] + 2 >> 1] != 41) {
         if (!(jslMatch(44) & 1)) {
          jsvUnLockMany(HEAP32[$6 + 392 >> 2], HEAP32[$6 + 388 >> 2]);
          jsvUnLock(HEAP32[$6 + 380 >> 2]);
          HEAP32[$6 + 412 >> 2] = 0;
          break label$1;
         }
        }
        continue;
       }
       break;
      }
      if (!(jslMatch(41) & 1)) {
       HEAP32[$6 + 412 >> 2] = 0;
       break label$1;
      }
      HEAP32[$6 + 344 >> 2] = HEAP32[$6 + 392 >> 2];
     }
     HEAP32[$6 + 332 >> 2] = jsvGetNativeFunctionPtr(HEAP32[$6 + 408 >> 2]);
     HEAP32[$6 + 328 >> 2] = HEAP32[23777];
     label$34 : {
      if (HEAP32[$6 + 380 >> 2]) {
       HEAP32[23777] = jsvRef(HEAP32[$6 + 380 >> 2]);
       break label$34;
      }
      label$36 : {
       if (HEAP32[$6 + 332 >> 2] == 11) {
        if (HEAP32[23777]) {
         HEAP32[23777] = jsvRef(HEAP32[23777]);
        }
        break label$36;
       }
       HEAP32[23777] = jsvRef(HEAP32[23774]);
      }
     }
     label$39 : {
      if (!(!HEAP32[$6 + 332 >> 2] | HEAP32[23778] & 112)) {
       HEAP32[$6 + 384 >> 2] = jsnCallFunction(HEAP32[$6 + 332 >> 2], HEAPU16[HEAP32[$6 + 408 >> 2] + 4 >> 1], HEAP32[$6 + 380 >> 2], HEAP32[$6 + 388 >> 2], HEAP32[$6 + 392 >> 2]);
       break label$39;
      }
      HEAP32[$6 + 384 >> 2] = 0;
     }
     jsvUnLockMany(HEAP32[$6 + 344 >> 2], HEAP32[$6 + 388 >> 2]);
     if (HEAP32[23777]) {
      jsvUnRef(HEAP32[23777]);
     }
     HEAP32[23777] = HEAP32[$6 + 328 >> 2];
     break label$11;
    }
    HEAP32[$6 + 324 >> 2] = jsvNewWithFlags(7);
    if (!HEAP32[$6 + 324 >> 2]) {
     jspSetError();
     jsvUnLock(HEAP32[$6 + 380 >> 2]);
     HEAP32[$6 + 412 >> 2] = 0;
     break label$1;
    }
    HEAP32[$6 + 320 >> 2] = 0;
    HEAP32[$6 + 316 >> 2] = 0;
    HEAP32[$6 + 312 >> 2] = 0;
    HEAP16[$6 + 310 >> 1] = 0;
    $0 = $6 + 304 | 0;
    jsvObjectIteratorNew($0, HEAP32[$6 + 408 >> 2]);
    HEAP32[$6 + 300 >> 2] = jsvObjectIteratorGetKey($0);
    HEAP32[$6 + 296 >> 2] = jsvObjectIteratorGetValue($0);
    while (1) {
     if (jsvIsFunctionParameter(HEAP32[$6 + 300 >> 2]) & 1) {
      $0 = HEAP32[$6 + 296 >> 2];
     } else {
      $0 = 0;
     }
     if ($0) {
      $0 = $6 + 304 | 0;
      jsvAddFunctionParameter(HEAP32[$6 + 324 >> 2], jsvNewFromStringVar(HEAP32[$6 + 300 >> 2], 1, 2147483647), HEAP32[$6 + 296 >> 2]);
      jsvUnLock2(HEAP32[$6 + 296 >> 2], HEAP32[$6 + 300 >> 2]);
      jsvObjectIteratorNext($0);
      HEAP32[$6 + 300 >> 2] = jsvObjectIteratorGetKey($0);
      HEAP32[$6 + 296 >> 2] = jsvObjectIteratorGetValue($0);
      continue;
     }
     break;
    }
    jsvUnLock2(HEAP32[$6 + 296 >> 2], HEAP32[$6 + 300 >> 2]);
    label$47 : {
     if (HEAP8[$6 + 399 | 0] & 1) {
      HEAP32[$6 + 292 >> 2] = 0;
      while (1) {
       if (HEAP32[23778] & 80 ? 0 : HEAP16[HEAP32[13768] + 2 >> 1] != 41) {
        HEAP32[$6 + 288 >> 2] = jsvObjectIteratorGetKey($6 + 304 | 0);
        HEAP8[$6 + 287 | 0] = jsvIsFunctionParameter(HEAP32[$6 + 288 >> 2]) & 1;
        if (!(HEAP8[$6 + 287 | 0] & 1 ? 0 : HEAP16[HEAP32[13768] + 2 >> 1] == 41)) {
         HEAP32[$6 + 292 >> 2] = HEAP32[$6 + 292 >> 2] + 1;
         HEAP32[$6 + 280 >> 2] = 0;
         if (HEAP16[HEAP32[13768] + 2 >> 1] != 41) {
          HEAP32[$6 + 280 >> 2] = __jspeAssignmentExpression(jspeConditionalExpression());
         }
         HEAP32[$6 + 280 >> 2] = jsvSkipNameAndUnLock(HEAP32[$6 + 280 >> 2]);
         $1 = HEAP32[$6 + 324 >> 2];
         label$56 : {
          if (HEAP8[$6 + 287 | 0] & 1) {
           $0 = jsvNewFromStringVar(HEAP32[$6 + 288 >> 2], 1, 2147483647);
           break label$56;
          }
          $0 = 0;
         }
         jsvAddFunctionParameter($1, $0, HEAP32[$6 + 280 >> 2]);
         jsvUnLock(HEAP32[$6 + 280 >> 2]);
         if (HEAP16[HEAP32[13768] + 2 >> 1] != 41) {
          if (!(jslMatch(44) & 1)) {
           HEAP32[$6 + 412 >> 2] = 0;
           break label$1;
          }
         }
        }
        jsvUnLock(HEAP32[$6 + 288 >> 2]);
        if (HEAP8[$6 + 287 | 0] & 1) {
         jsvObjectIteratorNext($6 + 304 | 0);
        }
        continue;
       }
       break;
      }
      if (!(jslMatch(41) & 1)) {
       HEAP32[$6 + 412 >> 2] = 0;
       break label$1;
      }
      break label$47;
     }
     HEAP32[$6 + 276 >> 2] = 0;
     while (1) {
      if (HEAP32[$6 + 276 >> 2] < HEAP32[$6 + 392 >> 2]) {
       HEAP32[$6 + 272 >> 2] = jsvObjectIteratorGetKey($6 + 304 | 0);
       HEAP8[$6 + 271 | 0] = jsvIsFunctionParameter(HEAP32[$6 + 272 >> 2]) & 1;
       $1 = HEAP32[$6 + 324 >> 2];
       label$64 : {
        if (HEAP8[$6 + 271 | 0] & 1) {
         $0 = jsvNewFromStringVar(HEAP32[$6 + 272 >> 2], 1, 2147483647);
         break label$64;
        }
        $0 = 0;
       }
       jsvAddFunctionParameter($1, $0, HEAP32[HEAP32[$6 + 388 >> 2] + (HEAP32[$6 + 276 >> 2] << 2) >> 2]);
       HEAP32[$6 + 276 >> 2] = HEAP32[$6 + 276 >> 2] + 1;
       jsvUnLock(HEAP32[$6 + 272 >> 2]);
       if (HEAP8[$6 + 271 | 0] & 1) {
        jsvObjectIteratorNext($6 + 304 | 0);
       }
       continue;
      }
      break;
     }
    }
    while (1) {
     if (jsvObjectIteratorHasValue($6 + 304 | 0) & 1) {
      HEAP32[$6 + 264 >> 2] = jsvObjectIteratorGetKey($6 + 304 | 0);
      if (jsvIsString(HEAP32[$6 + 264 >> 2]) & 1) {
       label$70 : {
        if (jsvIsStringEqual(HEAP32[$6 + 264 >> 2], 3852) & 1) {
         HEAP32[$6 + 320 >> 2] = jsvSkipName(HEAP32[$6 + 264 >> 2]);
         break label$70;
        }
        label$72 : {
         if (jsvIsStringEqual(HEAP32[$6 + 264 >> 2], 3847) & 1) {
          HEAP32[$6 + 316 >> 2] = jsvSkipName(HEAP32[$6 + 264 >> 2]);
          break label$72;
         }
         label$74 : {
          if (jsvIsStringEqual(HEAP32[$6 + 264 >> 2], 3862) & 1) {
           HEAP32[$6 + 312 >> 2] = jsvSkipName(HEAP32[$6 + 264 >> 2]);
           break label$74;
          }
          label$76 : {
           if (jsvIsStringEqual(HEAP32[$6 + 264 >> 2], 3990) & 1) {
            jsvUnLock(HEAP32[$6 + 380 >> 2]);
            HEAP32[$6 + 380 >> 2] = jsvSkipName(HEAP32[$6 + 264 >> 2]);
            break label$76;
           }
           label$78 : {
            if (jsvIsStringEqual(HEAP32[$6 + 264 >> 2], 3857) & 1) {
             HEAP16[$6 + 310 >> 1] = jsvGetIntegerAndUnLock(jsvSkipName(HEAP32[$6 + 264 >> 2]));
             break label$78;
            }
            if (jsvIsFunctionParameter(HEAP32[$6 + 264 >> 2]) & 1) {
             HEAP32[$6 + 260 >> 2] = jsvSkipName(HEAP32[$6 + 264 >> 2]);
             jsvAddFunctionParameter(HEAP32[$6 + 324 >> 2], jsvNewFromStringVar(HEAP32[$6 + 264 >> 2], 1, 2147483647), HEAP32[$6 + 260 >> 2]);
             jsvUnLock(HEAP32[$6 + 260 >> 2]);
            }
           }
          }
         }
        }
       }
      }
      $0 = $6 + 304 | 0;
      jsvUnLock(HEAP32[$6 + 264 >> 2]);
      jsvObjectIteratorNext($0);
      continue;
     }
     break;
    }
    jsvObjectIteratorFree($6 + 304 | 0);
    if (HEAP32[$6 + 312 >> 2]) {
     HEAP32[$6 + 256 >> 2] = jsvMakeIntoVariableName(jsvNewFromStringVar(HEAP32[$6 + 312 >> 2], 0, 2147483647), HEAP32[$6 + 408 >> 2]);
     jsvAddName(HEAP32[$6 + 324 >> 2], HEAP32[$6 + 256 >> 2]);
     jsvUnLock2(HEAP32[$6 + 256 >> 2], HEAP32[$6 + 312 >> 2]);
    }
    if (!(HEAP32[23778] & 112)) {
     HEAP32[$6 + 252 >> 2] = HEAP32[23776];
     HEAP32[23776] = 0;
     if (HEAP32[$6 + 320 >> 2]) {
      jspeiLoadScopesFromVar(HEAP32[$6 + 320 >> 2]);
      jsvUnLock(HEAP32[$6 + 320 >> 2]);
     }
     if (jspeiAddScope(HEAP32[$6 + 324 >> 2]) & 1) {
      HEAP32[$6 + 248 >> 2] = HEAP32[23777];
      label$85 : {
       if (HEAP32[$6 + 380 >> 2]) {
        HEAP32[23777] = jsvRef(HEAP32[$6 + 380 >> 2]);
        break label$85;
       }
       HEAP32[23777] = jsvRef(HEAP32[23774]);
      }
      if (HEAP32[$6 + 316 >> 2]) {
       HEAP8[$6 + 247 | 0] = 0;
       label$88 : {
        if (HEAP32[23778] & 16384) {
         if (HEAP32[$6 + 404 >> 2]) {
          HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 404 >> 2];
          jsiConsolePrintf(3995, $6 + 16 | 0);
          break label$88;
         }
         HEAP32[$6 + 32 >> 2] = HEAP32[$6 + 404 >> 2];
         jsiConsolePrintf(4013, $6 + 32 | 0);
         break label$88;
        }
        HEAP8[$6 + 247 | 0] = (HEAP32[23778] & 8192) != 0;
        if (HEAP8[$6 + 247 | 0] & 1) {
         HEAP32[23778] = HEAP32[23778] & -8193;
        }
       }
       HEAP32[$6 + 108 >> 2] = jslSetLex($6 + 112 | 0);
       jslInit(HEAP32[$6 + 316 >> 2]);
       HEAP16[$6 + 214 >> 1] = HEAPU16[$6 + 310 >> 1];
       HEAP32[$6 + 104 >> 2] = HEAP32[23778];
       HEAP32[23778] = HEAP32[23778] & 14448 | 1;
       label$92 : {
        if (jsvIsFunctionReturn(HEAP32[$6 + 408 >> 2]) & 1) {
         if (!(!(HEAP32[23778] & 8192) | (HEAP32[23778] & 63) != 1)) {
          $0 = jsvStringIteratorGetIndex(HEAP32[13768] + 4 | 0);
          HEAP32[HEAP32[13768] + 28 >> 2] = $0 - 1;
          jsiDebuggerLoop();
         }
         if (!(HEAP16[HEAP32[13768] + 2 >> 1] == 59 | HEAP16[HEAP32[13768] + 2 >> 1] == 125)) {
          HEAP32[$6 + 384 >> 2] = jsvSkipNameAndUnLock(jspeExpression());
         }
         break label$92;
        }
        HEAP32[$6 + 100 >> 2] = jsvAddNamedChild(HEAP32[$6 + 324 >> 2], 0, 4037);
        jspeBlockNoBrackets();
        HEAP32[$6 + 384 >> 2] = jsvSkipNameAndUnLock(HEAP32[$6 + 100 >> 2]);
        if (HEAP32[$6 + 100 >> 2]) {
         jsvSetValueOfName(HEAP32[$6 + 100 >> 2], 0);
        }
       }
       HEAP32[$6 + 96 >> 2] = HEAP32[23778] & 112;
       HEAP32[23778] = HEAP32[23778] & -1664 | HEAP32[$6 + 104 >> 2] & 1663;
       HEAP8[$6 + 95 | 0] = 0;
       if (HEAP32[23778] & 57344) {
        jsiConsolePrintString(4044);
        jsfPrintJSON(HEAP32[$6 + 384 >> 2], 45);
        jsiConsolePrintChar(10);
        if (HEAP32[23778] & 32768) {
         HEAP8[$6 + 95 | 0] = 1;
         jsiDebuggerLoop();
        }
       }
       if (!(!(HEAP8[$6 + 247 | 0] & 1) | HEAP8[$6 + 95 | 0] & 1)) {
        HEAP32[23778] = HEAP32[23778] | 8192;
       }
       jslKill();
       jslSetLex(HEAP32[$6 + 108 >> 2]);
       if (HEAP32[$6 + 96 >> 2]) {
        HEAP32[23778] = HEAP32[$6 + 96 >> 2] | HEAP32[23778];
        HEAP32[$6 + 88 >> 2] = jsvObjectGetChild(HEAP32[23775], 3760, 27);
        if (HEAP32[$6 + 88 >> 2]) {
         $0 = HEAP32[$6 + 88 >> 2];
         $1 = jsvIsString(HEAP32[$6 + 404 >> 2]);
         HEAP32[$6 >> 2] = HEAP32[$6 + 404 >> 2];
         jsvAppendPrintf($0, $1 & 1 ? 4064 : 4092, $6);
         label$102 : {
          if (HEAP32[13768]) {
           jspAppendStackTrace(HEAP32[$6 + 88 >> 2]);
           break label$102;
          }
          jsvAppendPrintf(HEAP32[$6 + 88 >> 2], 4117, 0);
         }
         jsvUnLock(HEAP32[$6 + 88 >> 2]);
        }
       }
      }
      if (HEAP32[23777]) {
       jsvUnRef(HEAP32[23777]);
      }
      HEAP32[23777] = HEAP32[$6 + 248 >> 2];
      jspeiRemoveScope();
     }
     jsvUnLock(HEAP32[23776]);
     HEAP32[23776] = HEAP32[$6 + 252 >> 2];
    }
    jsvUnLock(HEAP32[$6 + 316 >> 2]);
    jsvUnLock(HEAP32[$6 + 324 >> 2]);
   }
   jsvUnLock(HEAP32[$6 + 380 >> 2]);
   HEAP32[$6 + 412 >> 2] = HEAP32[$6 + 384 >> 2];
   break label$1;
  }
  if (HEAP8[$6 + 399 | 0] & 1) {
   jspeParseFunctionCallBrackets();
   HEAP32[$6 + 412 >> 2] = 0;
   break label$1;
  }
  HEAP32[$6 + 412 >> 2] = 0;
 }
 global$0 = $6 + 416 | 0;
 return HEAP32[$6 + 412 >> 2];
}
function jslGetNextToken() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 label$1 : {
  while (1) {
   while (1) {
    if (isWhitespace(HEAP8[HEAP32[13768]]) & 1) {
     jslGetNextCh();
     continue;
    }
    break;
   }
   label$3 : {
    if (HEAP8[HEAP32[13768]] != 47) {
     break label$3;
    }
    if ((jslNextCh() & 255) == 47) {
     while (1) {
      if (HEAP8[HEAP32[13768]] ? HEAP8[HEAP32[13768]] != 10 : 0) {
       jslGetNextCh();
       continue;
      }
      break;
     }
     jslGetNextCh();
     continue;
    }
    if ((jslNextCh() & 255) == 42) {
     jslGetNextCh();
     jslGetNextCh();
     while (1) {
      if (HEAP8[HEAP32[13768]]) {
       if (HEAP8[HEAP32[13768]] == 42) {
        $1 = (jslNextCh() & 255) == 47;
       } else {
        $1 = 0;
       }
       $1 = $1 ^ -1;
      } else {
       $1 = 0;
      }
      if ($1 & 1) {
       jslGetNextCh();
       continue;
      }
      break;
     }
     if (!HEAPU8[HEAP32[13768]]) {
      HEAP16[HEAP32[13768] + 2 >> 1] = 137;
      break label$1;
     }
     jslGetNextCh();
     jslGetNextCh();
     continue;
    }
   }
   break;
  }
  HEAP32[$0 + 12 >> 2] = HEAP16[HEAP32[13768] + 2 >> 1];
  HEAP16[HEAP32[13768] + 2 >> 1] = 0;
  HEAP8[HEAP32[13768] + 100 | 0] = 0;
  if (HEAP32[HEAP32[13768] + 96 >> 2]) {
   jsvUnLock(HEAP32[HEAP32[13768] + 96 >> 2]);
   HEAP32[HEAP32[13768] + 96 >> 2] = 0;
  }
  $1 = jsvStringIteratorGetIndex(HEAP32[13768] + 4 | 0) - 1 | 0;
  HEAP32[HEAP32[13768] + 28 >> 2] = $1;
  $2 = HEAP32[13768];
  $3 = HEAP32[$2 + 112 >> 2];
  $1 = HEAP32[13768];
  HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 108 >> 2];
  HEAP32[$1 + 8 >> 2] = $3;
  HEAP32[$1 + 20 >> 2] = HEAP32[$2 + 124 >> 2];
  $3 = HEAP32[$2 + 120 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAP32[$2 + 116 >> 2];
  HEAP32[$1 + 16 >> 2] = $3;
  HEAP8[HEAP32[13768] + 24 | 0] = HEAPU8[HEAP32[13768]];
  if (!(HEAPU8[HEAP32[13768]] <= 124 ? HEAPU8[HEAP32[13768]] >= 33 : 0)) {
   jslSingleChar();
   break label$1;
  }
  $1 = HEAPU8[HEAPU8[HEAP32[13768]] + 1039 | 0];
  label$22 : {
   if ($1 >>> 0 > 15) {
    break label$22;
   }
   label$23 : {
    switch ($1 - 1 | 0) {
    default:
     while (1) {
      $2 = isAlpha(HEAP8[HEAP32[13768]]) & 1;
      $1 = 1;
      label$40 : {
       if ($2) {
        break label$40;
       }
       $2 = isNumeric(HEAP8[HEAP32[13768]]) & 1;
       $1 = 1;
       if ($2) {
        break label$40;
       }
       $1 = HEAP8[HEAP32[13768]] == 36;
      }
      if ($1) {
       jslTokenAppendChar(HEAP8[HEAP32[13768]]);
       jslGetNextCh();
       continue;
      }
      break;
     }
     HEAP16[HEAP32[13768] + 2 >> 1] = 128;
     $1 = HEAP8[HEAP32[13768] + 32 | 0] + -98 | 0;
     label$42 : {
      if ($1 >>> 0 > 21) {
       break label$42;
      }
      label$43 : {
       switch ($1 - 1 | 0) {
       default:
        if (jslIsToken(1164) & 1) {
         HEAP16[HEAP32[13768] + 2 >> 1] = 168;
        }
        break label$42;
       case 0:
        label$59 : {
         if (jslIsToken(1170) & 1) {
          HEAP16[HEAP32[13768] + 2 >> 1] = 188;
          break label$59;
         }
         label$61 : {
          if (jslIsToken(1175) & 1) {
           HEAP16[HEAP32[13768] + 2 >> 1] = 178;
           break label$61;
          }
          label$63 : {
           if (jslIsToken(1181) & 1) {
            HEAP16[HEAP32[13768] + 2 >> 1] = 194;
            break label$63;
           }
           label$65 : {
            if (jslIsToken(1187) & 1) {
             HEAP16[HEAP32[13768] + 2 >> 1] = 174;
             break label$65;
            }
            if (jslIsToken(1193) & 1) {
             HEAP16[HEAP32[13768] + 2 >> 1] = 169;
            }
           }
          }
         }
        }
        break label$42;
       case 1:
        label$68 : {
         if (jslIsToken(1202) & 1) {
          HEAP16[HEAP32[13768] + 2 >> 1] = 189;
          break label$68;
         }
         label$70 : {
          if (jslIsToken(1210) & 1) {
           HEAP16[HEAP32[13768] + 2 >> 1] = 190;
           break label$70;
          }
          label$72 : {
           if (jslIsToken(1217) & 1) {
            HEAP16[HEAP32[13768] + 2 >> 1] = 165;
            break label$72;
           }
           if (jslIsToken(1220) & 1) {
            HEAP16[HEAP32[13768] + 2 >> 1] = 193;
           }
          }
         }
        }
        break label$42;
       case 2:
        label$75 : {
         if (jslIsToken(1229) & 1) {
          HEAP16[HEAP32[13768] + 2 >> 1] = 164;
          break label$75;
         }
         if (jslIsToken(1234) & 1) {
          HEAP16[HEAP32[13768] + 2 >> 1] = 195;
         }
        }
        break label$42;
       case 3:
        label$78 : {
         if (jslIsToken(1242) & 1) {
          HEAP16[HEAP32[13768] + 2 >> 1] = 181;
          break label$78;
         }
         label$80 : {
          if (jslIsToken(1248) & 1) {
           HEAP16[HEAP32[13768] + 2 >> 1] = 179;
           break label$80;
          }
          label$82 : {
           if (jslIsToken(1256) & 1) {
            HEAP16[HEAP32[13768] + 2 >> 1] = 167;
            break label$82;
           }
           if (jslIsToken(1260) & 1) {
            HEAP16[HEAP32[13768] + 2 >> 1] = 170;
           }
          }
         }
        }
        break label$42;
       case 6:
        label$85 : {
         if (jslIsToken(1269) & 1) {
          HEAP16[HEAP32[13768] + 2 >> 1] = 163;
          break label$85;
         }
         label$87 : {
          if (jslIsToken(1272) & 1) {
           HEAP16[HEAP32[13768] + 2 >> 1] = 185;
           break label$87;
          }
          if (jslIsToken(1275) & 1) {
           HEAP16[HEAP32[13768] + 2 >> 1] = 186;
          }
         }
        }
        break label$42;
       case 9:
        if (jslIsToken(1286) & 1) {
         HEAP16[HEAP32[13768] + 2 >> 1] = 173;
        }
        break label$42;
       case 11:
        label$91 : {
         if (jslIsToken(1290) & 1) {
          HEAP16[HEAP32[13768] + 2 >> 1] = 184;
          break label$91;
         }
         if (jslIsToken(1294) & 1) {
          HEAP16[HEAP32[13768] + 2 >> 1] = 182;
         }
        }
        break label$42;
       case 12:
        if (jslIsToken(1299) & 1) {
         HEAP16[HEAP32[13768] + 2 >> 1] = 198;
        }
        break label$42;
       case 15:
        if (jslIsToken(1302) & 1) {
         HEAP16[HEAP32[13768] + 2 >> 1] = 171;
        }
        break label$42;
       case 16:
        label$96 : {
         if (jslIsToken(1309) & 1) {
          HEAP16[HEAP32[13768] + 2 >> 1] = 197;
          break label$96;
         }
         label$98 : {
          if (jslIsToken(1316) & 1) {
           HEAP16[HEAP32[13768] + 2 >> 1] = 196;
           break label$98;
          }
          if (jslIsToken(1322) & 1) {
           HEAP16[HEAP32[13768] + 2 >> 1] = 187;
          }
         }
        }
        break label$42;
       case 17:
        label$101 : {
         if (jslIsToken(1329) & 1) {
          HEAP16[HEAP32[13768] + 2 >> 1] = 175;
          break label$101;
         }
         label$103 : {
          if (jslIsToken(1334) & 1) {
           HEAP16[HEAP32[13768] + 2 >> 1] = 176;
           break label$103;
          }
          label$105 : {
           if (jslIsToken(1340) & 1) {
            HEAP16[HEAP32[13768] + 2 >> 1] = 180;
            break label$105;
           }
           label$107 : {
            if (jslIsToken(1345) & 1) {
             HEAP16[HEAP32[13768] + 2 >> 1] = 177;
             break label$107;
            }
            if (jslIsToken(1349) & 1) {
             HEAP16[HEAP32[13768] + 2 >> 1] = 191;
            }
           }
          }
         }
        }
        break label$42;
       case 18:
        if (jslIsToken(1356) & 1) {
         HEAP16[HEAP32[13768] + 2 >> 1] = 183;
        }
        break label$42;
       case 20:
        if (jslIsToken(1366) & 1) {
         HEAP16[HEAP32[13768] + 2 >> 1] = 166;
        }
        break label$42;
       case 4:
       case 5:
       case 7:
       case 8:
       case 10:
       case 13:
       case 14:
        break label$42;
       case 19:
        break label$43;
       }
      }
      label$112 : {
       if (jslIsToken(1372) & 1) {
        HEAP16[HEAP32[13768] + 2 >> 1] = 172;
        break label$112;
       }
       if (jslIsToken(1376) & 1) {
        HEAP16[HEAP32[13768] + 2 >> 1] = 192;
       }
      }
     }
     break label$22;
    case 0:
     HEAP8[$0 + 11 | 0] = 1;
     label$115 : {
      if (HEAP8[HEAP32[13768]] == 46) {
       jslGetNextCh();
       label$117 : {
        if (isNumeric(HEAP8[HEAP32[13768]]) & 1) {
         HEAP16[HEAP32[13768] + 2 >> 1] = 130;
         jslTokenAppendChar(46);
         break label$117;
        }
        HEAP16[HEAP32[13768] + 2 >> 1] = 46;
        break label$22;
       }
       break label$115;
      }
      if (HEAP8[HEAP32[13768]] == 48) {
       jslTokenAppendChar(HEAP8[HEAP32[13768]]);
       jslGetNextCh();
       label$120 : {
        label$121 : {
         if (HEAP8[HEAP32[13768]] == 120 | HEAP8[HEAP32[13768]] == 88 | (HEAP8[HEAP32[13768]] == 98 | HEAP8[HEAP32[13768]] == 66)) {
          break label$121;
         }
         if (HEAP8[HEAP32[13768]] == 111) {
          break label$121;
         }
         if (HEAP8[HEAP32[13768]] != 79) {
          break label$120;
         }
        }
        HEAP8[$0 + 11 | 0] = 0;
        jslTokenAppendChar(HEAP8[HEAP32[13768]]);
        jslGetNextCh();
       }
      }
      HEAP16[HEAP32[13768] + 2 >> 1] = 129;
      while (1) {
       if (isNumeric(HEAP8[HEAP32[13768]]) & 1) {
        $1 = 1;
       } else {
        if (HEAP8[$0 + 11 | 0] & 1) {
         $1 = 0;
        } else {
         $1 = isHexadecimal(HEAP8[HEAP32[13768]]);
        }
       }
       if ($1 & 1) {
        jslTokenAppendChar(HEAP8[HEAP32[13768]]);
        jslGetNextCh();
        continue;
       }
       break;
      }
      if (!(!(HEAP8[$0 + 11 | 0] & 1) | HEAP8[HEAP32[13768]] != 46)) {
       HEAP16[HEAP32[13768] + 2 >> 1] = 130;
       jslTokenAppendChar(46);
       jslGetNextCh();
      }
     }
     if (HEAP16[HEAP32[13768] + 2 >> 1] == 130) {
      while (1) {
       if (isNumeric(HEAP8[HEAP32[13768]]) & 1) {
        jslTokenAppendChar(HEAP8[HEAP32[13768]]);
        jslGetNextCh();
        continue;
       }
       break;
      }
     }
     if (!(!(HEAP8[$0 + 11 | 0] & 1) | (HEAP8[HEAP32[13768]] != 69 ? HEAP8[HEAP32[13768]] != 101 : 0))) {
      HEAP16[HEAP32[13768] + 2 >> 1] = 130;
      jslTokenAppendChar(HEAP8[HEAP32[13768]]);
      jslGetNextCh();
      if (!(HEAP8[HEAP32[13768]] != 43 ? HEAP8[HEAP32[13768]] != 45 : 0)) {
       jslTokenAppendChar(HEAP8[HEAP32[13768]]);
       jslGetNextCh();
      }
      while (1) {
       if (isNumeric(HEAP8[HEAP32[13768]]) & 1) {
        jslTokenAppendChar(HEAP8[HEAP32[13768]]);
        jslGetNextCh();
        continue;
       }
       break;
      }
     }
     break label$22;
    case 1:
     jslLexString();
     break label$22;
    case 3:
     jslSingleChar();
     if (HEAP8[HEAP32[13768]] == 61) {
      HEAP16[HEAP32[13768] + 2 >> 1] = 140;
      jslGetNextCh();
      if (HEAP8[HEAP32[13768]] == 61) {
       HEAP16[HEAP32[13768] + 2 >> 1] = 141;
       jslGetNextCh();
      }
     }
     break label$22;
    case 4:
     jslSingleChar();
     label$140 : {
      if (HEAP8[HEAP32[13768]] == 61) {
       HEAP16[HEAP32[13768] + 2 >> 1] = 150;
       jslGetNextCh();
       break label$140;
      }
      if (HEAP8[HEAP32[13768]] == 43) {
       HEAP16[HEAP32[13768] + 2 >> 1] = 152;
       jslGetNextCh();
      }
     }
     break label$22;
    case 5:
     jslSingleChar();
     label$143 : {
      if (HEAP8[HEAP32[13768]] == 61) {
       HEAP16[HEAP32[13768] + 2 >> 1] = 151;
       jslGetNextCh();
       break label$143;
      }
      if (HEAP8[HEAP32[13768]] == 45) {
       HEAP16[HEAP32[13768] + 2 >> 1] = 153;
       jslGetNextCh();
      }
     }
     break label$22;
    case 6:
     jslSingleChar();
     label$146 : {
      if (HEAP8[HEAP32[13768]] == 61) {
       HEAP16[HEAP32[13768] + 2 >> 1] = 157;
       jslGetNextCh();
       break label$146;
      }
      if (HEAP8[HEAP32[13768]] == 38) {
       HEAP16[HEAP32[13768] + 2 >> 1] = 158;
       jslGetNextCh();
      }
     }
     break label$22;
    case 7:
     jslSingleChar();
     label$149 : {
      if (HEAP8[HEAP32[13768]] == 61) {
       HEAP16[HEAP32[13768] + 2 >> 1] = 159;
       jslGetNextCh();
       break label$149;
      }
      if (HEAP8[HEAP32[13768]] == 124) {
       HEAP16[HEAP32[13768] + 2 >> 1] = 160;
       jslGetNextCh();
      }
     }
     break label$22;
    case 10:
     jslSingleChar();
     if (HEAP8[HEAP32[13768]] == 61) {
      HEAP16[HEAP32[13768] + 2 >> 1] = 161;
      jslGetNextCh();
     }
     break label$22;
    case 9:
     jslSingleChar();
     if (HEAP8[HEAP32[13768]] == 61) {
      HEAP16[HEAP32[13768] + 2 >> 1] = 154;
      jslGetNextCh();
     }
     break label$22;
    case 11:
     label$154 : {
      label$155 : {
       label$156 : {
        if (!HEAP32[$0 + 12 >> 2] | HEAP32[$0 + 12 >> 2] == 33 | (HEAP32[$0 + 12 >> 2] == 37 | HEAP32[$0 + 12 >> 2] == 38)) {
         break label$156;
        }
        if (HEAP32[$0 + 12 >> 2] == 42 | HEAP32[$0 + 12 >> 2] == 43 | (HEAP32[$0 + 12 >> 2] == 45 | HEAP32[$0 + 12 >> 2] == 47)) {
         break label$156;
        }
        if (HEAP32[$0 + 12 >> 2] == 60 | HEAP32[$0 + 12 >> 2] == 61 | (HEAP32[$0 + 12 >> 2] == 62 | HEAP32[$0 + 12 >> 2] == 63)) {
         break label$156;
        }
        if ((HEAP32[$0 + 12 >> 2] <= 161 ? HEAP32[$0 + 12 >> 2] >= 138 : 0) | (HEAP32[$0 + 12 >> 2] <= 198 ? HEAP32[$0 + 12 >> 2] >= 163 : 0) | (HEAP32[$0 + 12 >> 2] == 188 | HEAP32[$0 + 12 >> 2] == 184)) {
         break label$156;
        }
        if (HEAP32[$0 + 12 >> 2] == 91 | HEAP32[$0 + 12 >> 2] == 123 | (HEAP32[$0 + 12 >> 2] == 125 | HEAP32[$0 + 12 >> 2] == 40)) {
         break label$156;
        }
        if (HEAP32[$0 + 12 >> 2] == 44 | HEAP32[$0 + 12 >> 2] == 59 | HEAP32[$0 + 12 >> 2] == 58) {
         break label$156;
        }
        if (HEAP32[$0 + 12 >> 2] != 162) {
         break label$155;
        }
       }
       jslLexRegex();
       break label$154;
      }
      jslSingleChar();
      if (HEAP8[HEAP32[13768]] == 61) {
       HEAP16[HEAP32[13768] + 2 >> 1] = 155;
       jslGetNextCh();
      }
     }
     break label$22;
    case 8:
     jslSingleChar();
     if (HEAP8[HEAP32[13768]] == 61) {
      HEAP16[HEAP32[13768] + 2 >> 1] = 156;
      jslGetNextCh();
     }
     break label$22;
    case 13:
     jslSingleChar();
     label$161 : {
      if (HEAP8[HEAP32[13768]] == 61) {
       HEAP16[HEAP32[13768] + 2 >> 1] = 138;
       jslGetNextCh();
       if (HEAP8[HEAP32[13768]] == 61) {
        HEAP16[HEAP32[13768] + 2 >> 1] = 139;
        jslGetNextCh();
       }
       break label$161;
      }
      if (HEAP8[HEAP32[13768]] == 62) {
       HEAP16[HEAP32[13768] + 2 >> 1] = 162;
       jslGetNextCh();
      }
     }
     break label$22;
    case 12:
     jslSingleChar();
     label$165 : {
      if (HEAP8[HEAP32[13768]] == 61) {
       HEAP16[HEAP32[13768] + 2 >> 1] = 142;
       jslGetNextCh();
       break label$165;
      }
      if (HEAP8[HEAP32[13768]] == 60) {
       HEAP16[HEAP32[13768] + 2 >> 1] = 143;
       jslGetNextCh();
       if (HEAP8[HEAP32[13768]] == 61) {
        HEAP16[HEAP32[13768] + 2 >> 1] = 144;
        jslGetNextCh();
       }
      }
     }
     break label$22;
    case 14:
     jslSingleChar();
     label$169 : {
      if (HEAP8[HEAP32[13768]] == 61) {
       HEAP16[HEAP32[13768] + 2 >> 1] = 145;
       jslGetNextCh();
       break label$169;
      }
      if (HEAP8[HEAP32[13768]] == 62) {
       HEAP16[HEAP32[13768] + 2 >> 1] = 146;
       jslGetNextCh();
       label$172 : {
        if (HEAP8[HEAP32[13768]] == 61) {
         HEAP16[HEAP32[13768] + 2 >> 1] = 148;
         jslGetNextCh();
         break label$172;
        }
        if (HEAP8[HEAP32[13768]] == 62) {
         jslGetNextCh();
         label$175 : {
          if (HEAP8[HEAP32[13768]] == 61) {
           HEAP16[HEAP32[13768] + 2 >> 1] = 149;
           jslGetNextCh();
           break label$175;
          }
          HEAP16[HEAP32[13768] + 2 >> 1] = 147;
         }
        }
       }
      }
     }
     break label$22;
    case 2:
     break label$23;
    }
   }
   jslSingleChar();
  }
 }
 global$0 = $0 + 16 | 0;
}
function jsfGetJSONWithCallback($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 304 | 0;
 global$0 = $6;
 HEAP32[$6 + 300 >> 2] = $0;
 HEAP32[$6 + 296 >> 2] = $1;
 HEAP32[$6 + 292 >> 2] = $2;
 HEAP32[$6 + 288 >> 2] = $3;
 HEAP32[$6 + 284 >> 2] = $4;
 HEAP32[$6 + 280 >> 2] = $5;
 HEAP32[$6 + 276 >> 2] = HEAP32[$6 + 292 >> 2] + 4096;
 if (!HEAP32[$6 + 288 >> 2]) {
  HEAP32[$6 + 288 >> 2] = 34268;
 }
 label$2 : {
  if (jsvIsUndefined(HEAP32[$6 + 300 >> 2]) & 1) {
   cbprintf(HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2], 34271, 0);
   break label$2;
  }
  if (HEAPU16[HEAP32[$6 + 300 >> 2] + 14 >> 1] & 256) {
   cbprintf(HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2], 34167, 0);
   break label$2;
  }
  $0 = HEAP32[$6 + 300 >> 2];
  HEAP16[$0 + 14 >> 1] = HEAPU16[$0 + 14 >> 1] | 256;
  label$5 : {
   if (jsvIsArray(HEAP32[$6 + 300 >> 2]) & 1) {
    HEAP32[$6 + 272 >> 2] = jsvGetArrayLength(HEAP32[$6 + 300 >> 2]);
    HEAP8[$6 + 271 | 0] = HEAP32[$6 + 292 >> 2] & 8 ? HEAP32[$6 + 272 >> 2] > 15 : 0;
    HEAP8[$6 + 270 | 0] = 0;
    cbprintf(HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2], HEAP32[$6 + 292 >> 2] & 4 ? 34281 : 34284, 0);
    HEAP32[$6 + 264 >> 2] = -1;
    HEAP8[$6 + 263 | 0] = 1;
    HEAP8[$6 + 262 | 0] = 1;
    jsvObjectIteratorNew($6 + 256 | 0, HEAP32[$6 + 300 >> 2]);
    while (1) {
     $0 = 0;
     label$10 : {
      if ((HEAP32[$6 + 264 >> 2] + 1 | 0) >= HEAP32[$6 + 272 >> 2]) {
       break label$10;
      }
      $0 = 0;
      if (!(HEAP8[$6 + 263 | 0] & 1)) {
       break label$10;
      }
      $0 = jspIsInterrupted() ^ -1;
     }
     if ($0 & 1) {
      $0 = $6 + 256 | 0;
      HEAP32[$6 + 252 >> 2] = jsvObjectIteratorGetKey($0);
      label$12 : {
       label$13 : {
        if (jsvObjectIteratorHasValue($0) & 1) {
         if (!(jsvIsNumeric(HEAP32[$6 + 252 >> 2]) & 1)) {
          break label$13;
         }
        }
        $0 = $6;
        label$15 : {
         if (jsvObjectIteratorHasValue($6 + 256 | 0) & 1) {
          $1 = jsvGetInteger(HEAP32[$6 + 252 >> 2]);
          break label$15;
         }
         $1 = HEAP32[$6 + 272 >> 2] - 1 | 0;
        }
        HEAP32[$0 + 248 >> 2] = $1;
        HEAP32[$6 + 244 >> 2] = jsvObjectIteratorGetValue($6 + 256 | 0);
        while (1) {
         if (HEAP32[$6 + 264 >> 2] < HEAP32[$6 + 248 >> 2]) {
          HEAP32[$6 + 264 >> 2] = HEAP32[$6 + 264 >> 2] + 1;
          if (!(HEAP32[$6 + 264 >> 2] < (HEAP32[$6 + 272 >> 2] - 5 | 0) ? !(!(HEAP8[$6 + 271 | 0] & 1) | HEAP32[$6 + 264 >> 2] < 5) : 0)) {
           if (!(HEAP8[$6 + 262 | 0] & 1)) {
            cbprintf(HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2], HEAP32[$6 + 292 >> 2] & 4 ? 34286 : 34207, 0);
           }
           HEAP8[$6 + 262 | 0] = 0;
           if (!(!(HEAP8[$6 + 271 | 0] & 1) | HEAP32[$6 + 264 >> 2] != (HEAP32[$6 + 272 >> 2] - 5 | 0))) {
            cbprintf(HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2], HEAP32[13355], 0);
           }
           $0 = $6;
           if (HEAP32[$6 + 292 >> 2] & 1) {
            $1 = jsonNeedsNewLine(HEAP32[$6 + 244 >> 2]);
           } else {
            $1 = 0;
           }
           HEAP8[$0 + 243 | 0] = $1 & 1;
           if (HEAP32[$6 + 292 >> 2] & 2) {
            HEAP8[$6 + 270 | 0] = 1;
            HEAP8[$6 + 243 | 0] = 1;
           }
           if (!(HEAP8[$6 + 243 | 0] & 1 ? 0 : !(HEAP8[$6 + 270 | 0] & 1))) {
            jsonNewLine(HEAP32[$6 + 276 >> 2], HEAP32[$6 + 288 >> 2], HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2]);
            HEAP8[$6 + 270 | 0] = 0;
           }
           label$28 : {
            if (HEAP32[$6 + 264 >> 2] == HEAP32[$6 + 248 >> 2]) {
             HEAP32[$6 + 236 >> 2] = jsvNewFromInteger(HEAP32[$6 + 248 >> 2]);
             jsfGetJSONWithCallback(HEAP32[$6 + 244 >> 2], HEAP32[$6 + 236 >> 2], HEAP32[$6 + 276 >> 2], HEAP32[$6 + 288 >> 2], HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2]);
             jsvUnLock(HEAP32[$6 + 236 >> 2]);
             break label$28;
            }
            cbprintf(HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2], HEAP32[$6 + 292 >> 2] & 64 ? 34289 : 34271, 0);
           }
           HEAP8[$6 + 270 | 0] = HEAP8[$6 + 243 | 0] & 1;
          }
          continue;
         }
         break;
        }
        $0 = $6 + 256 | 0;
        jsvUnLock(HEAP32[$6 + 244 >> 2]);
        jsvObjectIteratorNext($0);
        break label$12;
       }
       HEAP8[$6 + 263 | 0] = 0;
      }
      jsvUnLock(HEAP32[$6 + 252 >> 2]);
      continue;
     }
     break;
    }
    if (HEAP32[$6 + 292 >> 2] & 4) {
     jsfGetJSONForObjectItWithCallback($6 + 256 | 0, HEAP32[$6 + 292 >> 2], HEAP32[$6 + 288 >> 2], HEAP32[$6 + 276 >> 2], HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2], HEAP8[$6 + 262 | 0] & 1);
    }
    jsvObjectIteratorFree($6 + 256 | 0);
    if (HEAP8[$6 + 270 | 0] & 1) {
     jsonNewLine(HEAP32[$6 + 292 >> 2], HEAP32[$6 + 288 >> 2], HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2]);
    }
    cbprintf(HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2], HEAP32[$6 + 292 >> 2] & 4 ? 34294 : 34297, 0);
    break label$5;
   }
   label$32 : {
    if (jsvIsArrayBuffer(HEAP32[$6 + 300 >> 2]) & 1) {
     HEAP8[$6 + 191 | 0] = 1;
     jsvArrayBufferIteratorNew($6 + 192 | 0, HEAP32[$6 + 300 >> 2], 0);
     while (1) {
      if (jsvArrayBufferIteratorHasElement($6 + 192 | 0) & 1) {
       if (jsvArrayBufferIteratorGetFloatValue($6 + 192 | 0) != 0) {
        HEAP8[$6 + 191 | 0] = 0;
       }
       jsvArrayBufferIteratorNext($6 + 192 | 0);
       continue;
      }
      break;
     }
     jsvArrayBufferIteratorFree($6 + 192 | 0);
     HEAP8[$6 + 190 | 0] = (HEAP32[$6 + 292 >> 2] & 128) != 0;
     label$37 : {
      if (!(!(HEAP8[$6 + 191 | 0] & 1) | HEAP8[$6 + 190 | 0] & 1)) {
       $0 = HEAP32[$6 + 284 >> 2];
       $1 = HEAP32[$6 + 280 >> 2];
       $2 = jswGetBasicObjectName(HEAP32[$6 + 300 >> 2]);
       HEAP32[$6 + 20 >> 2] = jsvGetArrayBufferLength(HEAP32[$6 + 300 >> 2]);
       HEAP32[$6 + 16 >> 2] = $2;
       cbprintf($0, $1, 34299, $6 + 16 | 0);
       break label$37;
      }
      HEAP32[$6 + 184 >> 2] = jswGetBasicObjectName(HEAP32[$6 + 300 >> 2]);
      HEAP8[$6 + 183 | 0] = !strcmp(HEAP32[$6 + 184 >> 2], 34310);
      if (HEAP8[$6 + 183 | 0] & 1) {
       HEAP32[$6 + 184 >> 2] = 34322;
      }
      $0 = HEAP32[$6 + 284 >> 2];
      $1 = HEAP32[$6 + 280 >> 2];
      $2 = HEAP8[$6 + 190 | 0] & 1 ? 34284 : 34333;
      HEAP32[$6 >> 2] = HEAP32[$6 + 184 >> 2];
      cbprintf($0, $1, $2, $6);
      if (HEAP32[$6 + 292 >> 2] & 2) {
       jsonNewLine(HEAP32[$6 + 276 >> 2], HEAP32[$6 + 288 >> 2], HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2]);
      }
      HEAP32[$6 + 176 >> 2] = jsvGetArrayBufferLength(HEAP32[$6 + 300 >> 2]);
      HEAP8[$6 + 175 | 0] = HEAP32[$6 + 292 >> 2] & 8 ? HEAPU32[$6 + 176 >> 2] > 15 : 0;
      jsvArrayBufferIteratorNew($6 + 192 | 0, HEAP32[$6 + 300 >> 2], 0);
      while (1) {
       if (jsvArrayBufferIteratorHasElement($6 + 192 | 0) & 1) {
        $0 = jspIsInterrupted() ^ -1;
       } else {
        $0 = 0;
       }
       if ($0 & 1) {
        if (!(HEAPU32[$6 + 224 >> 2] < HEAP32[$6 + 176 >> 2] - 5 >>> 0 ? !(!(HEAP8[$6 + 175 | 0] & 1) | HEAPU32[$6 + 224 >> 2] < 5) : 0)) {
         if (HEAPU32[$6 + 224 >> 2] > 0) {
          cbprintf(HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2], HEAP32[$6 + 292 >> 2] & 4 ? 34286 : 34207, 0);
         }
         if (HEAP32[$6 + 292 >> 2] & 2) {
          jsonNewLine(HEAP32[$6 + 276 >> 2], HEAP32[$6 + 288 >> 2], HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2]);
         }
         if (!(!(HEAP8[$6 + 175 | 0] & 1) | HEAP32[$6 + 224 >> 2] != (HEAP32[$6 + 176 >> 2] - 5 | 0))) {
          cbprintf(HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2], HEAP32[13355], 0);
         }
         HEAP32[$6 + 168 >> 2] = jsvArrayBufferIteratorGetValue($6 + 192 | 0);
         jsfGetJSONWithCallback(HEAP32[$6 + 168 >> 2], 0, HEAP32[$6 + 276 >> 2], HEAP32[$6 + 288 >> 2], HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2]);
         jsvUnLock(HEAP32[$6 + 168 >> 2]);
        }
        jsvArrayBufferIteratorNext($6 + 192 | 0);
        continue;
       }
       break;
      }
      if (HEAP32[$6 + 292 >> 2] & 2) {
       jsonNewLine(HEAP32[$6 + 292 >> 2], HEAP32[$6 + 288 >> 2], HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2]);
      }
      jsvArrayBufferIteratorFree($6 + 192 | 0);
      cbprintf(HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2], HEAP8[$6 + 190 | 0] & 1 ? 34297 : 34342, 0);
      if (!(!(HEAP8[$6 + 183 | 0] & 1) | HEAP8[$6 + 190 | 0] & 1)) {
       cbprintf(HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2], 34345, 0);
      }
     }
     break label$32;
    }
    label$54 : {
     if (jsvIsObject(HEAP32[$6 + 300 >> 2]) & 1) {
      $0 = $6;
      label$56 : {
       if (HEAP32[$6 + 292 >> 2] & 32) {
        $1 = jsiGetDeviceFromClass(HEAP32[$6 + 300 >> 2]) & 255;
        break label$56;
       }
       $1 = 0;
      }
      HEAP8[$0 + 167 | 0] = $1;
      label$58 : {
       if (HEAPU8[$6 + 167 | 0]) {
        $0 = HEAP32[$6 + 284 >> 2];
        $1 = HEAP32[$6 + 280 >> 2];
        HEAP32[$6 + 32 >> 2] = jshGetDeviceString(HEAPU8[$6 + 167 | 0]);
        cbprintf($0, $1, 34353, $6 + 32 | 0);
        break label$58;
       }
       HEAP8[$6 + 166 | 0] = 1;
       if (HEAP32[$6 + 292 >> 2] & 256) {
        HEAP32[$6 + 160 >> 2] = jsvObjectGetChild(HEAP32[$6 + 300 >> 2], 34356, 0);
        if (jsvHasChildren(HEAP32[$6 + 160 >> 2]) & 1) {
         HEAP32[$6 + 156 >> 2] = jsvObjectGetChild(HEAP32[$6 + 160 >> 2], 34366, 0);
         if (HEAP32[$6 + 156 >> 2]) {
          HEAP32[$6 + 152 >> 2] = jsvGetIndexOf(HEAP32[23774], HEAP32[$6 + 156 >> 2], 1);
          if (HEAP32[$6 + 152 >> 2]) {
           $0 = HEAP32[$6 + 284 >> 2];
           $1 = HEAP32[$6 + 280 >> 2];
           HEAP32[$6 + 64 >> 2] = HEAP32[$6 + 152 >> 2];
           cbprintf($0, $1, 34378, $6 - -64 | 0);
          }
          jsvUnLock2(HEAP32[$6 + 152 >> 2], HEAP32[$6 + 156 >> 2]);
          HEAP32[$6 + 148 >> 2] = jspGetNamedField(HEAP32[$6 + 300 >> 2], 34383, 0);
          if (!(!(jsvIsFunction(HEAP32[$6 + 148 >> 2]) & 1) | HEAP32[HEAP32[$6 + 148 >> 2] >> 2] == 3)) {
           HEAP32[$6 + 144 >> 2] = jspExecuteFunction(HEAP32[$6 + 148 >> 2], HEAP32[$6 + 300 >> 2], 0, 0);
           $0 = HEAP32[$6 + 284 >> 2];
           $1 = HEAP32[$6 + 280 >> 2];
           HEAP32[$6 + 48 >> 2] = HEAP32[$6 + 144 >> 2];
           cbprintf($0, $1, 34209, $6 + 48 | 0);
           jsvUnLock(HEAP32[$6 + 144 >> 2]);
           HEAP8[$6 + 166 | 0] = 0;
          }
          jsvUnLock(HEAP32[$6 + 148 >> 2]);
         }
        }
        jsvUnLock(HEAP32[$6 + 160 >> 2]);
       }
       if (HEAP8[$6 + 166 | 0] & 1) {
        HEAP32[$6 + 140 >> 2] = 0;
        if (HEAP32[$6 + 292 >> 2] & 2048) {
         HEAP32[$6 + 140 >> 2] = jspGetNamedField(HEAP32[$6 + 300 >> 2], 34392, 0);
        }
        label$67 : {
         if (jsvIsFunction(HEAP32[$6 + 140 >> 2]) & 1) {
          $0 = $6;
          label$69 : {
           if (HEAP32[$6 + 296 >> 2]) {
            $1 = jsvAsString(HEAP32[$6 + 296 >> 2]);
            break label$69;
           }
           $1 = 0;
          }
          HEAP32[$0 + 136 >> 2] = $1;
          HEAP32[$6 + 132 >> 2] = jspExecuteFunction(HEAP32[$6 + 140 >> 2], HEAP32[$6 + 300 >> 2], 1, $6 + 136 | 0);
          jsvUnLock(HEAP32[$6 + 136 >> 2]);
          if (HEAP32[$6 + 132 >> 2] == HEAP32[$6 + 300 >> 2]) {
           $0 = HEAP32[$6 + 300 >> 2];
           HEAP16[$0 + 14 >> 1] = HEAPU16[$0 + 14 >> 1] & -257;
          }
          jsfGetJSONWithCallback(HEAP32[$6 + 132 >> 2], 0, HEAP32[$6 + 292 >> 2] & -2049, HEAP32[$6 + 288 >> 2], HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2]);
          jsvUnLock(HEAP32[$6 + 132 >> 2]);
          break label$67;
         }
         jsvObjectIteratorNew($6 + 128 | 0, HEAP32[$6 + 300 >> 2]);
         cbprintf(HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2], HEAP32[$6 + 292 >> 2] & 4 ? 34399 : 34248, 0);
         $0 = $6 + 128 | 0;
         HEAP8[$6 + 127 | 0] = jsfGetJSONForObjectItWithCallback($0, HEAP32[$6 + 292 >> 2], HEAP32[$6 + 288 >> 2], HEAP32[$6 + 276 >> 2], HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2], 1) & 1;
         jsvObjectIteratorFree($0);
         if (HEAP8[$6 + 127 | 0] & 1) {
          jsonNewLine(HEAP32[$6 + 292 >> 2], HEAP32[$6 + 288 >> 2], HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2]);
         }
         cbprintf(HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2], HEAP32[$6 + 292 >> 2] & 4 ? 34402 : 34261, 0);
        }
        jsvUnLock(HEAP32[$6 + 140 >> 2]);
       }
      }
      break label$54;
     }
     label$73 : {
      if (jsvIsFunction(HEAP32[$6 + 300 >> 2]) & 1) {
       if (HEAP32[$6 + 292 >> 2] & 16) {
        cbprintf(HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2], 34271, 0);
        break label$73;
       }
       cbprintf(HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2], 34405, 0);
       jsfGetJSONForFunctionWithCallback(HEAP32[$6 + 300 >> 2], HEAP32[$6 + 276 >> 2], HEAP32[$6 + 284 >> 2], HEAP32[$6 + 280 >> 2]);
       break label$73;
      }
      label$76 : {
       label$77 : {
        if (!(jsvIsString(HEAP32[$6 + 300 >> 2]) & 1)) {
         break label$77;
        }
        if (jsvIsName(HEAP32[$6 + 300 >> 2]) & 1) {
         break label$77;
        }
        label$78 : {
         label$79 : {
          if (!(HEAP32[$6 + 292 >> 2] & 8)) {
           break label$79;
          }
          if (jsvGetStringLength(HEAP32[$6 + 300 >> 2]) >>> 0 <= 40) {
           break label$79;
          }
          HEAP32[$6 + 120 >> 2] = jsvNewFromStringVar(HEAP32[$6 + 300 >> 2], 0, 17);
          HEAP32[$6 + 116 >> 2] = jsvNewFromStringVar(HEAP32[$6 + 300 >> 2], jsvGetStringLength(HEAP32[$6 + 300 >> 2]) - 17 | 0, 17);
          $0 = HEAP32[$6 + 284 >> 2];
          $1 = HEAP32[$6 + 280 >> 2];
          $2 = HEAP32[$6 + 120 >> 2];
          $3 = HEAP32[13355];
          HEAP32[$6 + 104 >> 2] = HEAP32[$6 + 116 >> 2];
          HEAP32[$6 + 100 >> 2] = $3;
          HEAP32[$6 + 96 >> 2] = $2;
          cbprintf($0, $1, 34415, $6 + 96 | 0);
          jsvUnLock2(HEAP32[$6 + 120 >> 2], HEAP32[$6 + 116 >> 2]);
          break label$78;
         }
         $0 = HEAP32[$6 + 284 >> 2];
         $1 = HEAP32[$6 + 280 >> 2];
         $2 = HEAP32[$6 + 292 >> 2] & 1024 ? 34422 : 34425;
         HEAP32[$6 + 112 >> 2] = HEAP32[$6 + 300 >> 2];
         cbprintf($0, $1, $2, $6 + 112 | 0);
        }
        break label$76;
       }
       $0 = HEAP32[$6 + 284 >> 2];
       $1 = HEAP32[$6 + 280 >> 2];
       HEAP32[$6 + 80 >> 2] = HEAP32[$6 + 300 >> 2];
       cbprintf($0, $1, 34209, $6 + 80 | 0);
      }
     }
    }
   }
  }
  $0 = HEAP32[$6 + 300 >> 2];
  HEAP16[$0 + 14 >> 1] = HEAPU16[$0 + 14 >> 1] & -257;
 }
 global$0 = $6 + 304 | 0;
}
function jswrap_banglejs_idle() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $4 = global$0 - 448 | 0;
 $0 = $4;
 global$0 = $0;
 if (HEAP32[62816]) {
  HEAP32[$0 + 440 >> 2] = jsvObjectGetChild(HEAP32[23774], 28004, 0);
  if (HEAP32[62816] & 2) {
   jswrap_banglejs_setLCDPower(0);
  }
  if (HEAP32[62816] & 1) {
   jswrap_banglejs_setLCDPower(1);
  }
  if (HEAP32[62816] & 4) {
   label$5 : {
    if (!HEAP32[$0 + 440 >> 2]) {
     break label$5;
    }
    if (!(jsiObjectHasCallbacks(HEAP32[$0 + 440 >> 2], 28546) & 1)) {
     break label$5;
    }
    HEAP32[$0 + 436 >> 2] = jswrap_banglejs_getAccel();
    if (HEAP32[$0 + 436 >> 2]) {
     jsiQueueObjectCallbacks(HEAP32[$0 + 440 >> 2], 28546, $0 + 436 | 0, 1);
     jsvUnLock(HEAP32[$0 + 436 >> 2]);
    }
   }
   $2 = $0;
   $1 = 0;
   label$7 : {
    if (HEAP16[125656] >= -6700) {
     break label$7;
    }
    $1 = 0;
    if (HEAP16[125656] <= -9e3) {
     break label$7;
    }
    $3 = (abs(HEAP16[125654]) | 0) >= 2048;
    $1 = 0;
    if ($3) {
     break label$7;
    }
    $1 = (abs(HEAP16[125655]) | 0) < 2048;
   }
   HEAP8[$2 + 435 | 0] = $1;
   if ((HEAP8[$0 + 435 | 0] & 1) != (HEAP8[251344] & 1)) {
    HEAP8[251345] = 0;
    HEAP8[251344] = HEAP8[$0 + 435 | 0] & 1;
   }
   if (HEAPU8[251345] < 255) {
    HEAP8[251345] = HEAPU8[251345] + 1;
   }
   if (HEAPU8[251345] == 3) {
    if (HEAP32[$0 + 440 >> 2]) {
     $1 = $0 + 428 | 0;
     HEAP32[$0 + 428 >> 2] = jsvNewFromBool(HEAP8[$0 + 435 | 0] & 1);
     jsiQueueObjectCallbacks(HEAP32[$0 + 440 >> 2], 28555, $1, 1);
     jsvUnLock(HEAP32[$0 + 428 >> 2]);
    }
    if (!(!(HEAP8[$0 + 435 | 0] & 1) | !HEAP32[62813] | (!(HEAP32[62815] & 1) | HEAP8[251256] & 1))) {
     jswrap_banglejs_setLCDPower(1);
     HEAP16[125629] = 0;
    }
   }
  }
  if (!(!HEAP32[$0 + 440 >> 2] | !(HEAP32[62816] & 8))) {
   HEAP32[$0 + 424 >> 2] = jsvNewWithFlags(5);
   if (HEAP32[$0 + 424 >> 2]) {
    HEAP32[$0 + 420 >> 2] = 28481;
    if (HEAP8[251346] & 1) {
     HEAP32[$0 + 420 >> 2] = 28565;
    }
    if (HEAPU8[251346] & 2) {
     HEAP32[$0 + 420 >> 2] = 28571;
    }
    if (HEAPU8[251346] & 4) {
     HEAP32[$0 + 420 >> 2] = 28576;
    }
    if (HEAPU8[251346] & 8) {
     HEAP32[$0 + 420 >> 2] = 28583;
    }
    if (HEAPU8[251346] & 16) {
     HEAP32[$0 + 420 >> 2] = 28587;
    }
    if (HEAPU8[251346] & 32) {
     HEAP32[$0 + 420 >> 2] = 28593;
    }
    HEAP32[$0 + 416 >> 2] = HEAPU8[251346] & 128 ? 2 : 1;
    jsvObjectSetChildAndUnLock(HEAP32[$0 + 424 >> 2], 28598, jsvNewFromString(HEAP32[$0 + 420 >> 2]));
    jsvObjectSetChildAndUnLock(HEAP32[$0 + 424 >> 2], 28602, jsvNewFromBool((HEAPU8[251346] & 128) != 0));
    $1 = HEAP32[$0 + 424 >> 2];
    if (HEAPU8[251346] & 16) {
     $2 = 0 - HEAP32[$0 + 416 >> 2] | 0;
    } else {
     if (HEAPU8[251346] & 32) {
      $2 = HEAP32[$0 + 416 >> 2];
     } else {
      $2 = 0;
     }
    }
    jsvObjectSetChildAndUnLock($1, 28425, jsvNewFromInteger($2));
    $1 = HEAP32[$0 + 424 >> 2];
    if (HEAPU8[251346] & 4) {
     $2 = 0 - HEAP32[$0 + 416 >> 2] | 0;
    } else {
     if (HEAPU8[251346] & 8) {
      $2 = HEAP32[$0 + 416 >> 2];
     } else {
      $2 = 0;
     }
    }
    jsvObjectSetChildAndUnLock($1, 28427, jsvNewFromInteger($2));
    $1 = $0 + 424 | 0;
    $3 = HEAP32[$0 + 424 >> 2];
    if (HEAP8[251346] & 1) {
     $2 = 0 - HEAP32[$0 + 416 >> 2] | 0;
    } else {
     if (HEAPU8[251346] & 2) {
      $2 = HEAP32[$0 + 416 >> 2];
     } else {
      $2 = 0;
     }
    }
    jsvObjectSetChildAndUnLock($3, 28429, jsvNewFromInteger($2));
    jsiQueueObjectCallbacks(HEAP32[$0 + 440 >> 2], 28609, $1, 1);
    jsvUnLock(HEAP32[$0 + 424 >> 2]);
   }
  }
  if (!(!HEAP32[$0 + 440 >> 2] | !(HEAP32[62816] & 16))) {
   HEAP32[$0 + 412 >> 2] = nmea_to_jsVar();
   if (HEAP32[$0 + 412 >> 2]) {
    jsiQueueObjectCallbacks(HEAP32[$0 + 440 >> 2], 28616, $0 + 412 | 0, 1);
    jsvUnLock(HEAP32[$0 + 412 >> 2]);
   }
  }
  if (!(!HEAP32[$0 + 440 >> 2] | !(HEAP32[62816] & 32))) {
   HEAP32[$0 + 408 >> 2] = jsvNewFromString(251424);
   if (HEAP32[$0 + 408 >> 2]) {
    jsiQueueObjectCallbacks(HEAP32[$0 + 440 >> 2], 28623, $0 + 408 | 0, 1);
   }
   jsvUnLock(HEAP32[$0 + 408 >> 2]);
  }
  if (!(!HEAP32[$0 + 440 >> 2] | !(HEAP32[62816] & 64))) {
   label$38 : {
    if (!HEAP32[$0 + 440 >> 2]) {
     break label$38;
    }
    if (!(jsiObjectHasCallbacks(HEAP32[$0 + 440 >> 2], 28634) & 1)) {
     break label$38;
    }
    HEAP32[$0 + 404 >> 2] = jswrap_banglejs_getCompass();
    if (HEAP32[$0 + 404 >> 2]) {
     jsiQueueObjectCallbacks(HEAP32[$0 + 440 >> 2], 28634, $0 + 404 | 0, 1);
     jsvUnLock(HEAP32[$0 + 404 >> 2]);
    }
   }
  }
  if (!(!HEAP32[$0 + 440 >> 2] | !(HEAP32[62816] & 32768))) {
   HEAP32[$0 + 400 >> 2] = jsvNewWithFlags(5);
   if (HEAP32[$0 + 400 >> 2]) {
    HEAP32[$0 + 396 >> 2] = 40;
    HEAP32[$0 + 392 >> 2] = 200;
    HEAP32[$0 + 388 >> 2] = 15;
    HEAP32[$0 + 384 >> 2] = 75;
    HEAP32[$0 + 300 >> 2] = 2147483647;
    HEAP32[$0 + 296 >> 2] = 0;
    HEAP32[$0 + 292 >> 2] = 0;
    HEAP32[$0 + 288 >> 2] = 15;
    while (1) {
     if (HEAP32[$0 + 288 >> 2] < 75) {
      HEAP32[$0 + 284 >> 2] = 0;
      HEAP32[$0 + 280 >> 2] = 75;
      while (1) {
       if (HEAP32[$0 + 280 >> 2] < 256) {
        HEAP32[$0 + 276 >> 2] = HEAP8[HEAP32[$0 + 280 >> 2] + 251520 | 0] - HEAP8[(HEAP32[$0 + 280 >> 2] - HEAP32[$0 + 288 >> 2] | 0) + 251520 | 0];
        HEAP32[$0 + 284 >> 2] = HEAP32[$0 + 284 >> 2] + Math_imul(HEAP32[$0 + 276 >> 2], HEAP32[$0 + 276 >> 2]);
        HEAP32[$0 + 280 >> 2] = HEAP32[$0 + 280 >> 2] + 1;
        continue;
       }
       break;
      }
      if (HEAP32[$0 + 284 >> 2] < HEAP32[$0 + 300 >> 2]) {
       HEAP32[$0 + 300 >> 2] = HEAP32[$0 + 284 >> 2];
       HEAP32[$0 + 292 >> 2] = HEAP32[$0 + 288 >> 2];
      }
      if (HEAP32[$0 + 284 >> 2] > HEAP32[$0 + 296 >> 2]) {
       HEAP32[$0 + 296 >> 2] = HEAP32[$0 + 284 >> 2];
      }
      HEAP32[$0 + 284 >> 2] = HEAP32[$0 + 284 >> 2] >> 10;
      if (HEAP32[$0 + 284 >> 2] > 255) {
       HEAP32[$0 + 284 >> 2] = 255;
      }
      HEAP8[HEAP32[$0 + 288 >> 2] + ($0 + 304 | 0) | 0] = HEAP32[$0 + 284 >> 2];
      HEAP32[$0 + 288 >> 2] = HEAP32[$0 + 288 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$0 + 272 >> 2] = 0;
    while (1) {
     if (HEAP32[$0 + 272 >> 2] < 15) {
      HEAP8[HEAP32[$0 + 272 >> 2] + ($0 + 304 | 0) | 0] = HEAPU8[$0 + 319 | 0];
      HEAP32[$0 + 272 >> 2] = HEAP32[$0 + 272 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$0 + 268 >> 2] = 120 - (HEAP32[$0 + 300 >> 2] / 600 | 0);
    if (HEAP32[$0 + 296 >> 2] < 1e4) {
     HEAP32[$0 + 268 >> 2] = HEAP32[$0 + 268 >> 2] - ((1e4 - HEAP32[$0 + 296 >> 2] | 0) / 50 | 0);
    }
    if (HEAP32[$0 + 268 >> 2] < 0) {
     HEAP32[$0 + 268 >> 2] = 0;
    }
    if (HEAP32[$0 + 268 >> 2] > 100) {
     HEAP32[$0 + 268 >> 2] = 100;
    }
    $1 = $0 + 400 | 0;
    jsvObjectSetChildAndUnLock(HEAP32[$0 + 400 >> 2], 28641, jsvNewFromInteger(6e4 / (Math_imul(HEAP32[$0 + 292 >> 2], 20) | 0) | 0));
    jsvObjectSetChildAndUnLock(HEAP32[$0 + 400 >> 2], 28645, jsvNewFromInteger(HEAP32[$0 + 268 >> 2]));
    HEAP32[$0 + 264 >> 2] = jsvNewNativeString(251520, 256);
    HEAP32[$0 + 260 >> 2] = jsvNewArrayBufferFromString(HEAP32[$0 + 264 >> 2], 0);
    jsvObjectSetChildAndUnLock(HEAP32[$0 + 400 >> 2], 28656, jswrap_typedarray_constructor(17, HEAP32[$0 + 260 >> 2], 0, 0));
    jsvUnLock2(HEAP32[$0 + 260 >> 2], HEAP32[$0 + 264 >> 2]);
    jsiQueueObjectCallbacks(HEAP32[$0 + 440 >> 2], 28660, $1, 1);
    jsvUnLock(HEAP32[$0 + 400 >> 2]);
   }
  }
  if (!(!HEAP32[$0 + 440 >> 2] | !(HEAP32[62816] & 256))) {
   label$55 : {
    if (!HEAP32[$0 + 440 >> 2]) {
     break label$55;
    }
    if (!(jsiObjectHasCallbacks(HEAP32[$0 + 440 >> 2], 28667) & 1)) {
     break label$55;
    }
    HEAP32[$0 + 256 >> 2] = jsvNewTypedArray(17, Math_imul(HEAPU8[251776], 3));
    if (HEAP32[$0 + 256 >> 2]) {
     HEAP32[$0 + 252 >> 2] = HEAPU8[251777] - Math_imul(HEAPU8[251776], 3);
     while (1) {
      if (HEAP32[$0 + 252 >> 2] < 0) {
       HEAP32[$0 + 252 >> 2] = HEAP32[$0 + 252 >> 2] + 150;
       continue;
      }
      break;
     }
     jsvArrayBufferIteratorNew($0 + 208 | 0, HEAP32[$0 + 256 >> 2], 0);
     HEAP32[$0 + 204 >> 2] = 0;
     while (1) {
      if (HEAP32[$0 + 204 >> 2] < (Math_imul(HEAPU8[251776], 3) | 0)) {
       $3 = HEAP32[$0 + 252 >> 2];
       HEAP32[$0 + 252 >> 2] = $3 + 1;
       $1 = $0 + 208 | 0;
       jsvArrayBufferIteratorSetByteValue($1, HEAP8[$3 + 251792 | 0]);
       jsvArrayBufferIteratorNext($1);
       if (HEAP32[$0 + 252 >> 2] >= 150) {
        HEAP32[$0 + 252 >> 2] = HEAP32[$0 + 252 >> 2] - 150;
       }
       HEAP32[$0 + 204 >> 2] = HEAP32[$0 + 204 >> 2] + 1;
       continue;
      }
      break;
     }
     $1 = $0 + 256 | 0;
     jsvArrayBufferIteratorFree($0 + 208 | 0);
     jsiQueueObjectCallbacks(HEAP32[$0 + 440 >> 2], 28667, $1, 1);
     jsvUnLock(HEAP32[$0 + 256 >> 2]);
    }
   }
   label$62 : {
    if (!HEAP32[$0 + 440 >> 2]) {
     break label$62;
    }
    if (!(jsiObjectHasCallbacks(HEAP32[$0 + 440 >> 2], 28678) & 1)) {
     break label$62;
    }
    jsfNameFromString($0 + 136 | 0, 28691);
    HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 160 >> 2];
    $1 = HEAP32[$0 + 156 >> 2];
    HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 152 >> 2];
    HEAP32[$0 + 20 >> 2] = $1;
    $1 = HEAP32[$0 + 148 >> 2];
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 144 >> 2];
    HEAP32[$0 + 12 >> 2] = $1;
    $1 = HEAP32[$0 + 140 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$0 + 136 >> 2];
    HEAP32[$0 + 4 >> 2] = $1;
    HEAP32[$0 + 164 >> 2] = jsfFindFile($0, $0 + 168 | 0);
    label$63 : {
     if (!HEAP32[$0 + 164 >> 2]) {
      jsiConsolePrintf(28700, 0);
      break label$63;
     }
     HEAP32[$0 + 132 >> 2] = jsfGetFileSize($0 + 168 | 0);
     $1 = $4 - (HEAP32[$0 + 132 >> 2] + 15 & -16) | 0;
     global$0 = $1;
     HEAP32[$0 + 128 >> 2] = $1;
     jshFlashRead(HEAP32[$0 + 128 >> 2], HEAP32[$0 + 164 >> 2], HEAP32[$0 + 132 >> 2]);
     HEAP32[$0 + 124 >> 2] = jsvNewNativeString(HEAP32[$0 + 128 >> 2], HEAP32[$0 + 132 >> 2]);
     while (1) {
      if (jsiFreeMoreMemory() & 1) {
       continue;
      }
      break;
     }
     jsvGarbageCollect();
     HEAP32[$0 + 120 >> 2] = jswrap_tensorflow_create(4e3, HEAP32[$0 + 124 >> 2]);
     jsvUnLock(HEAP32[$0 + 124 >> 2]);
     if (HEAP32[$0 + 120 >> 2]) {
      $1 = $0 + 72 | 0;
      HEAP32[$0 + 116 >> 2] = jswrap_tfmicrointerpreter_getInput(HEAP32[$0 + 120 >> 2]);
      jsvArrayBufferIteratorNew($1, HEAP32[$0 + 116 >> 2], 0);
      HEAP32[$0 + 68 >> 2] = HEAPU8[251777] - Math_imul(HEAPU8[251776], 3);
      while (1) {
       if (HEAP32[$0 + 68 >> 2] < 0) {
        HEAP32[$0 + 68 >> 2] = HEAP32[$0 + 68 >> 2] + 150;
        continue;
       }
       break;
      }
      HEAP32[$0 + 64 >> 2] = 0;
      while (1) {
       if (HEAP32[$0 + 64 >> 2] < (Math_imul(HEAPU8[251776], 3) | 0)) {
        $3 = HEAP32[$0 + 68 >> 2];
        HEAP32[$0 + 68 >> 2] = $3 + 1;
        $1 = $0 + 72 | 0;
        jsvArrayBufferIteratorSetIntegerValue($1, HEAP8[$3 + 251792 | 0]);
        jsvArrayBufferIteratorNext($1);
        if (HEAP32[$0 + 68 >> 2] >= 150) {
         HEAP32[$0 + 68 >> 2] = HEAP32[$0 + 68 >> 2] - 150;
        }
        HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 64 >> 2] + 1;
        continue;
       }
       break;
      }
      $3 = $0 + 48 | 0;
      $1 = $0 + 60 | 0;
      jsvArrayBufferIteratorFree($0 + 72 | 0);
      jsvUnLock(HEAP32[$0 + 116 >> 2]);
      jswrap_tfmicrointerpreter_invoke(HEAP32[$0 + 120 >> 2]);
      HEAP32[$0 + 116 >> 2] = jswrap_tfmicrointerpreter_getOutput(HEAP32[$0 + 120 >> 2]);
      HEAP32[$0 + 60 >> 2] = jswrap_array_slice(HEAP32[$0 + 116 >> 2], 0, 0);
      jsvUnLock2(HEAP32[$0 + 116 >> 2], HEAP32[$0 + 120 >> 2]);
      HEAP32[$0 + 56 >> 2] = jspExecuteJSFunction(28721, 1, $1);
      HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 56 >> 2];
      HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 60 >> 2];
      jsiQueueObjectCallbacks(HEAP32[$0 + 440 >> 2], 28678, $3, 2);
      jsvUnLock2(HEAP32[$0 + 56 >> 2], HEAP32[$0 + 60 >> 2]);
     }
    }
   }
  }
  if (!(!HEAP32[$0 + 440 >> 2] | !(HEAP32[62816] & 512))) {
   $1 = $0 + 44 | 0;
   HEAP32[$0 + 44 >> 2] = jsvNewFromBool(HEAP8[251942] & 1);
   jsiQueueObjectCallbacks(HEAP32[$0 + 440 >> 2], 28889, $1, 1);
   jsvUnLock(HEAP32[$0 + 44 >> 2]);
  }
  if (!(!HEAP32[$0 + 440 >> 2] | !(HEAP32[62816] & 1024))) {
   $1 = $0 + 40 | 0;
   HEAP32[$0 + 40 >> 2] = jsvNewFromInteger(HEAP32[62831]);
   jsiQueueObjectCallbacks(HEAP32[$0 + 440 >> 2], 28901, $1, 1);
   jsvUnLock(HEAP32[$0 + 40 >> 2]);
  }
  if (!(!HEAP32[$0 + 440 >> 2] | !(HEAP32[62816] & 65536))) {
   jsiQueueObjectCallbacks(HEAP32[$0 + 440 >> 2], 28909, 0, 0);
  }
  if (!(!HEAP32[$0 + 440 >> 2] | !(HEAP32[62816] & 6144))) {
   $1 = $0 + 36 | 0;
   HEAP32[$0 + 36 >> 2] = jsvNewFromInteger(HEAP32[62816] & 2048 ? -1 : 1);
   jsiQueueObjectCallbacks(HEAP32[$0 + 440 >> 2], 28918, $1, 1);
   jsvUnLock(HEAP32[$0 + 36 >> 2]);
  }
  if (!(!HEAP32[$0 + 440 >> 2] | !(HEAP32[62816] & 24576))) {
   $1 = $0 + 32 | 0;
   HEAP32[$0 + 32 >> 2] = jsvNewFromInteger((HEAP32[62816] & 8192 ? 1 : 0) | (HEAP32[62816] & 16384 ? 2 : 0));
   jsiQueueObjectCallbacks(HEAP32[$0 + 440 >> 2], 28927, $1, 1);
   jsvUnLock(HEAP32[$0 + 32 >> 2]);
  }
  if (HEAP32[62816] & 128) {
   HEAP16[47566] = HEAPU16[47566] | 64;
  }
  jsvUnLock(HEAP32[$0 + 440 >> 2]);
  HEAP32[62816] = 0;
 }
 HEAP8[$0 + 447 | 0] = 0;
 global$0 = $0 + 448 | 0;
 return HEAP8[$0 + 447 | 0] & 1;
}
function fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
 $11 = global$0 - 560 | 0;
 global$0 = $11;
 HEAP32[$11 + 44 >> 2] = 0;
 wasm2js_scratch_store_f64(+$1);
 $6 = wasm2js_scratch_load_i32(1) | 0;
 label$1 : {
  if (wasm2js_i32$0 = 1, wasm2js_i32$1 = (wasm2js_i32$3 = wasm2js_scratch_load_i32(0) >>> 0 > 4294967295 ? 0 : 1, wasm2js_i32$4 = 0, wasm2js_i32$5 = ($6 | 0) <= -1, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$2 = ($6 | 0) < -1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
   $1 = -$1;
   wasm2js_scratch_store_f64(+$1);
   $6 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_load_i32(0) | 0;
   $21 = 1;
   $22 = 50256;
   break label$1;
  }
  if ($4 & 2048) {
   $21 = 1;
   $22 = 50259;
   break label$1;
  }
  $21 = $4 & 1;
  $22 = $21 ? 50262 : 50257;
 }
 label$4 : {
  if (($6 & 2146435072) == 2146435072) {
   $10 = $21 + 3 | 0;
   pad($0, 32, $2, $10, $4 & -65537);
   out($0, $22, $21);
   $3 = $5 >>> 5 & 1;
   out($0, $1 != $1 ? $3 ? 50283 : 50287 : $3 ? 50275 : 50279, 3);
   break label$4;
  }
  $1 = frexp($1, $11 + 44 | 0);
  $1 = $1 + $1;
  if ($1 != 0) {
   HEAP32[$11 + 44 >> 2] = HEAP32[$11 + 44 >> 2] + -1;
  }
  $17 = $11 + 16 | 0;
  $23 = $5 | 32;
  if (($23 | 0) == 97) {
   $16 = $5 & 32;
   $15 = $16 ? $22 + 9 | 0 : $22;
   label$8 : {
    if ($3 >>> 0 > 11) {
     break label$8;
    }
    $6 = 12 - $3 | 0;
    if (!$6) {
     break label$8;
    }
    $18 = 8;
    while (1) {
     $18 = $18 * 16;
     $6 = $6 + -1 | 0;
     if ($6) {
      continue;
     }
     break;
    }
    if (HEAPU8[$15 | 0] == 45) {
     $1 = -($18 + (-$1 - $18));
     break label$8;
    }
    $1 = $1 + $18 - $18;
   }
   $6 = HEAP32[$11 + 44 >> 2];
   $8 = $6 >> 31;
   $6 = fmt_u($8 ^ $6 + $8, 0, $17);
   if (($17 | 0) == ($6 | 0)) {
    HEAP8[$11 + 15 | 0] = 48;
    $6 = $11 + 15 | 0;
   }
   $12 = $21 | 2;
   $8 = HEAP32[$11 + 44 >> 2];
   $14 = $6 + -2 | 0;
   HEAP8[$14 | 0] = $5 + 15;
   HEAP8[$6 + -1 | 0] = ($8 | 0) < 0 ? 45 : 43;
   $6 = $4 & 8;
   $7 = $11 + 16 | 0;
   while (1) {
    $5 = $7;
    $10 = $16;
    if (Math_abs($1) < 2147483648) {
     $8 = ~~$1;
    } else {
     $8 = -2147483648;
    }
    HEAP8[$7 | 0] = $10 | HEAPU8[$8 + 50240 | 0];
    $7 = $5 + 1 | 0;
    $1 = ($1 - +($8 | 0)) * 16;
    if (!(($7 - ($11 + 16 | 0) | 0) != 1 | ($1 == 0 ? !($6 | ($3 | 0) > 0) : 0))) {
     HEAP8[$5 + 1 | 0] = 46;
     $7 = $5 + 2 | 0;
    }
    if ($1 != 0) {
     continue;
    }
    break;
   }
   $5 = !$3 | (($7 - $11 | 0) + -18 | 0) >= ($3 | 0) ? (($17 - ($11 + 16 | 0) | 0) - $14 | 0) + $7 | 0 : (($3 + $17 | 0) - $14 | 0) + 2 | 0;
   $10 = $5 + $12 | 0;
   pad($0, 32, $2, $10, $4);
   out($0, $15, $12);
   pad($0, 48, $2, $10, $4 ^ 65536);
   $3 = $7 - ($11 + 16 | 0) | 0;
   out($0, $11 + 16 | 0, $3);
   $6 = $3;
   $3 = $17 - $14 | 0;
   pad($0, 48, $5 - ($6 + $3 | 0) | 0, 0, 0);
   out($0, $14, $3);
   break label$4;
  }
  $6 = ($3 | 0) < 0;
  label$16 : {
   if ($1 == 0) {
    $9 = HEAP32[$11 + 44 >> 2];
    break label$16;
   }
   $9 = HEAP32[$11 + 44 >> 2] + -28 | 0;
   HEAP32[$11 + 44 >> 2] = $9;
   $1 = $1 * 268435456;
  }
  $13 = $6 ? 6 : $3;
  $16 = ($9 | 0) < 0 ? $11 + 48 | 0 : $11 + 336 | 0;
  $8 = $16;
  while (1) {
   $3 = $8;
   if ($1 < 4294967296 & $1 >= 0) {
    $6 = ~~$1 >>> 0;
   } else {
    $6 = 0;
   }
   HEAP32[$3 >> 2] = $6;
   $8 = $8 + 4 | 0;
   $1 = ($1 - +($6 >>> 0)) * 1e9;
   if ($1 != 0) {
    continue;
   }
   break;
  }
  label$21 : {
   if (($9 | 0) < 1) {
    $6 = $8;
    $7 = $16;
    break label$21;
   }
   $7 = $16;
   while (1) {
    $19 = ($9 | 0) < 29 ? $9 : 29;
    $6 = $8 + -4 | 0;
    label$24 : {
     if ($6 >>> 0 < $7 >>> 0) {
      break label$24;
     }
     $3 = $19;
     $10 = 0;
     while (1) {
      $15 = 0;
      $14 = $10;
      $10 = HEAP32[$6 >> 2];
      $12 = $3 & 31;
      if (32 <= ($3 & 63) >>> 0) {
       $9 = $10 << $12;
       $12 = 0;
      } else {
       $9 = (1 << $12) - 1 & $10 >>> 32 - $12;
       $12 = $10 << $12;
      }
      $10 = $14 + $12 | 0;
      $9 = $9 + $15 | 0;
      $9 = $10 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
      $15 = $10;
      $10 = __wasm_i64_udiv($10, $9, 1e9, 0);
      $12 = __wasm_i64_mul($10, i64toi32_i32$HIGH_BITS, 1e9, 0);
      HEAP32[$6 >> 2] = $15 - $12;
      $6 = $6 + -4 | 0;
      if ($6 >>> 0 >= $7 >>> 0) {
       continue;
      }
      break;
     }
     $3 = $10;
     if (!$3) {
      break label$24;
     }
     $7 = $7 + -4 | 0;
     HEAP32[$7 >> 2] = $3;
    }
    while (1) {
     $6 = $8;
     if ($6 >>> 0 > $7 >>> 0) {
      $8 = $6 + -4 | 0;
      if (!HEAP32[$8 >> 2]) {
       continue;
      }
     }
     break;
    }
    $9 = HEAP32[$11 + 44 >> 2] - $19 | 0;
    HEAP32[$11 + 44 >> 2] = $9;
    $8 = $6;
    if (($9 | 0) > 0) {
     continue;
    }
    break;
   }
  }
  if (($9 | 0) <= -1) {
   $20 = (($13 + 25 | 0) / 9 | 0) + 1 | 0;
   $14 = ($23 | 0) == 102;
   while (1) {
    $19 = ($9 | 0) < -9 ? 9 : 0 - $9 | 0;
    label$30 : {
     if ($7 >>> 0 >= $6 >>> 0) {
      $7 = HEAP32[$7 >> 2] ? $7 : $7 + 4 | 0;
      break label$30;
     }
     $15 = 1e9 >>> $19;
     $12 = -1 << $19 ^ -1;
     $9 = 0;
     $8 = $7;
     while (1) {
      $3 = HEAP32[$8 >> 2];
      HEAP32[$8 >> 2] = ($3 >>> $19) + $9;
      $9 = Math_imul($15, $3 & $12);
      $8 = $8 + 4 | 0;
      if ($8 >>> 0 < $6 >>> 0) {
       continue;
      }
      break;
     }
     $7 = HEAP32[$7 >> 2] ? $7 : $7 + 4 | 0;
     if (!$9) {
      break label$30;
     }
     HEAP32[$6 >> 2] = $9;
     $6 = $6 + 4 | 0;
    }
    $9 = $19 + HEAP32[$11 + 44 >> 2] | 0;
    HEAP32[$11 + 44 >> 2] = $9;
    $3 = $14 ? $16 : $7;
    $6 = $6 - $3 >> 2 > ($20 | 0) ? $3 + ($20 << 2) | 0 : $6;
    if (($9 | 0) < 0) {
     continue;
    }
    break;
   }
  }
  $8 = 0;
  label$33 : {
   if ($7 >>> 0 >= $6 >>> 0) {
    break label$33;
   }
   $8 = Math_imul($16 - $7 >> 2, 9);
   $9 = 10;
   $3 = HEAP32[$7 >> 2];
   if ($3 >>> 0 < 10) {
    break label$33;
   }
   while (1) {
    $8 = $8 + 1 | 0;
    $9 = Math_imul($9, 10);
    if ($3 >>> 0 >= $9 >>> 0) {
     continue;
    }
    break;
   }
  }
  $3 = ($13 - (($23 | 0) == 102 ? 0 : $8) | 0) - (($23 | 0) == 103 & ($13 | 0) != 0) | 0;
  if (($3 | 0) < (Math_imul($6 - $16 >> 2, 9) + -9 | 0)) {
   $12 = $3 + 9216 | 0;
   $3 = ($12 | 0) / 9 | 0;
   $10 = ($16 + ($3 << 2) | 0) + -4092 | 0;
   $9 = 10;
   $3 = ($12 - Math_imul($3, 9) | 0) + 1 | 0;
   if (($3 | 0) <= 8) {
    while (1) {
     $9 = Math_imul($9, 10);
     $3 = $3 + 1 | 0;
     if (($3 | 0) != 9) {
      continue;
     }
     break;
    }
   }
   $15 = HEAP32[$10 >> 2];
   $12 = ($15 >>> 0) / ($9 >>> 0) | 0;
   $20 = $10 + 4 | 0;
   $14 = $15 - Math_imul($9, $12) | 0;
   label$38 : {
    if ($14 ? 0 : ($20 | 0) == ($6 | 0)) {
     break label$38;
    }
    $3 = $9 >>> 1;
    $18 = $14 >>> 0 < $3 >>> 0 ? .5 : ($6 | 0) == ($20 | 0) ? ($3 | 0) == ($14 | 0) ? 1 : 1.5 : 1.5;
    $1 = $12 & 1 ? 9007199254740994 : 9007199254740992;
    if (!(!$21 | HEAPU8[$22 | 0] != 45)) {
     $18 = -$18;
     $1 = -$1;
    }
    $3 = $15 - $14 | 0;
    HEAP32[$10 >> 2] = $3;
    if ($1 + $18 == $1) {
     break label$38;
    }
    $3 = $3 + $9 | 0;
    HEAP32[$10 >> 2] = $3;
    if ($3 >>> 0 >= 1e9) {
     while (1) {
      HEAP32[$10 >> 2] = 0;
      $10 = $10 + -4 | 0;
      if ($10 >>> 0 < $7 >>> 0) {
       $7 = $7 + -4 | 0;
       HEAP32[$7 >> 2] = 0;
      }
      $3 = HEAP32[$10 >> 2] + 1 | 0;
      HEAP32[$10 >> 2] = $3;
      if ($3 >>> 0 > 999999999) {
       continue;
      }
      break;
     }
    }
    $8 = Math_imul($16 - $7 >> 2, 9);
    $9 = 10;
    $3 = HEAP32[$7 >> 2];
    if ($3 >>> 0 < 10) {
     break label$38;
    }
    while (1) {
     $8 = $8 + 1 | 0;
     $9 = Math_imul($9, 10);
     if ($3 >>> 0 >= $9 >>> 0) {
      continue;
     }
     break;
    }
   }
   $3 = $10 + 4 | 0;
   $6 = $6 >>> 0 > $3 >>> 0 ? $3 : $6;
  }
  label$44 : {
   while (1) {
    $14 = $6;
    $15 = 0;
    if ($6 >>> 0 <= $7 >>> 0) {
     break label$44;
    }
    $6 = $14 + -4 | 0;
    if (!HEAP32[$6 >> 2]) {
     continue;
    }
    break;
   }
   $15 = 1;
  }
  label$46 : {
   if (($23 | 0) != 103) {
    $12 = $4 & 8;
    break label$46;
   }
   $6 = $13 ? $13 : 1;
   $3 = ($6 | 0) > ($8 | 0) & ($8 | 0) > -5;
   $13 = ($3 ? $8 ^ -1 : -1) + $6 | 0;
   $5 = ($3 ? -1 : -2) + $5 | 0;
   $12 = $4 & 8;
   if ($12) {
    break label$46;
   }
   $6 = 9;
   label$48 : {
    if (!$15) {
     break label$48;
    }
    $12 = HEAP32[$14 + -4 >> 2];
    if (!$12) {
     break label$48;
    }
    $3 = 10;
    $6 = 0;
    if (($12 >>> 0) % 10) {
     break label$48;
    }
    while (1) {
     $6 = $6 + 1 | 0;
     $3 = Math_imul($3, 10);
     if (!(($12 >>> 0) % ($3 >>> 0))) {
      continue;
     }
     break;
    }
   }
   $3 = Math_imul($14 - $16 >> 2, 9) + -9 | 0;
   if (($5 | 32) == 102) {
    $12 = 0;
    $3 = $3 - $6 | 0;
    $3 = ($3 | 0) > 0 ? $3 : 0;
    $13 = ($13 | 0) < ($3 | 0) ? $13 : $3;
    break label$46;
   }
   $12 = 0;
   $3 = ($3 + $8 | 0) - $6 | 0;
   $3 = ($3 | 0) > 0 ? $3 : 0;
   $13 = ($13 | 0) < ($3 | 0) ? $13 : $3;
  }
  $9 = $12 | $13;
  $10 = ($9 | 0) != 0;
  $3 = $0;
  $23 = $2;
  $19 = $5 | 32;
  $6 = ($8 | 0) > 0 ? $8 : 0;
  label$51 : {
   if (($19 | 0) == 102) {
    break label$51;
   }
   $6 = $8 >> 31;
   $6 = fmt_u($6 + $8 ^ $6, 0, $17);
   if (($17 - $6 | 0) <= 1) {
    while (1) {
     $6 = $6 + -1 | 0;
     HEAP8[$6 | 0] = 48;
     if (($17 - $6 | 0) < 2) {
      continue;
     }
     break;
    }
   }
   $20 = $6 + -2 | 0;
   HEAP8[$20 | 0] = $5;
   HEAP8[$6 + -1 | 0] = ($8 | 0) < 0 ? 45 : 43;
   $6 = $17 - $20 | 0;
  }
  $10 = ($6 + ($10 + ($13 + $21 | 0) | 0) | 0) + 1 | 0;
  pad($3, 32, $23, $10, $4);
  out($0, $22, $21);
  pad($0, 48, $2, $10, $4 ^ 65536);
  label$54 : {
   if (($19 | 0) == 102) {
    $3 = $11 + 16 | 8;
    $8 = $11 + 16 | 9;
    $5 = $7 >>> 0 > $16 >>> 0 ? $16 : $7;
    $7 = $5;
    while (1) {
     $6 = fmt_u(HEAP32[$7 >> 2], 0, $8);
     label$57 : {
      if (($5 | 0) != ($7 | 0)) {
       if ($6 >>> 0 <= $11 + 16 >>> 0) {
        break label$57;
       }
       while (1) {
        $6 = $6 + -1 | 0;
        HEAP8[$6 | 0] = 48;
        if ($6 >>> 0 > $11 + 16 >>> 0) {
         continue;
        }
        break;
       }
       break label$57;
      }
      if (($6 | 0) != ($8 | 0)) {
       break label$57;
      }
      HEAP8[$11 + 24 | 0] = 48;
      $6 = $3;
     }
     out($0, $6, $8 - $6 | 0);
     $7 = $7 + 4 | 0;
     if ($7 >>> 0 <= $16 >>> 0) {
      continue;
     }
     break;
    }
    if ($9) {
     out($0, 50291, 1);
    }
    label$61 : {
     if (($13 | 0) < 1 | $7 >>> 0 >= $14 >>> 0) {
      break label$61;
     }
     while (1) {
      $6 = fmt_u(HEAP32[$7 >> 2], 0, $8);
      if ($6 >>> 0 > $11 + 16 >>> 0) {
       while (1) {
        $6 = $6 + -1 | 0;
        HEAP8[$6 | 0] = 48;
        if ($6 >>> 0 > $11 + 16 >>> 0) {
         continue;
        }
        break;
       }
      }
      out($0, $6, ($13 | 0) < 9 ? $13 : 9);
      $13 = $13 + -9 | 0;
      $7 = $7 + 4 | 0;
      if ($7 >>> 0 >= $14 >>> 0) {
       break label$61;
      }
      if (($13 | 0) > 0) {
       continue;
      }
      break;
     }
    }
    pad($0, 48, $13 + 9 | 0, 9, 0);
    break label$54;
   }
   label$65 : {
    if (($13 | 0) < 0) {
     break label$65;
    }
    $5 = $15 ? $14 : $7 + 4 | 0;
    $3 = $11 + 16 | 8;
    $16 = $11 + 16 | 9;
    $8 = $7;
    while (1) {
     $6 = fmt_u(HEAP32[$8 >> 2], 0, $16);
     if (($16 | 0) == ($6 | 0)) {
      HEAP8[$11 + 24 | 0] = 48;
      $6 = $3;
     }
     label$68 : {
      if (($7 | 0) != ($8 | 0)) {
       if ($6 >>> 0 <= $11 + 16 >>> 0) {
        break label$68;
       }
       while (1) {
        $6 = $6 + -1 | 0;
        HEAP8[$6 | 0] = 48;
        if ($6 >>> 0 > $11 + 16 >>> 0) {
         continue;
        }
        break;
       }
       break label$68;
      }
      out($0, $6, 1);
      $6 = $6 + 1 | 0;
      if (($13 | 0) < 1 ? !$12 : 0) {
       break label$68;
      }
      out($0, 50291, 1);
     }
     $15 = $6;
     $6 = $16 - $6 | 0;
     out($0, $15, ($13 | 0) > ($6 | 0) ? $6 : $13);
     $13 = $13 - $6 | 0;
     $8 = $8 + 4 | 0;
     if ($8 >>> 0 >= $5 >>> 0) {
      break label$65;
     }
     if (($13 | 0) > -1) {
      continue;
     }
     break;
    }
   }
   pad($0, 48, $13 + 18 | 0, 18, 0);
   out($0, $20, $17 - $20 | 0);
  }
 }
 pad($0, 32, $2, $10, $4 ^ 8192);
 global$0 = $11 + 560 | 0;
 return (($10 | 0) < ($2 | 0) ? $2 : $10) | 0;
}
function jswrap_graphics_drawString($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0;
 $5 = global$0 - 256 | 0;
 global$0 = $5;
 HEAP32[$5 + 248 >> 2] = $0;
 HEAP32[$5 + 244 >> 2] = $1;
 HEAP32[$5 + 240 >> 2] = $2;
 HEAP32[$5 + 236 >> 2] = $3;
 HEAP8[$5 + 235 | 0] = $4;
 label$1 : {
  if (!(graphicsGetFromVar($5 + 160 | 0, HEAP32[$5 + 248 >> 2]) & 1)) {
   HEAP32[$5 + 252 >> 2] = 0;
   break label$1;
  }
  HEAP32[$5 + 156 >> 2] = 0;
  HEAP32[$5 + 152 >> 2] = 0;
  HEAP32[$5 + 148 >> 2] = jswrap_graphics_getFontHeightInternal($5 + 160 | 0);
  HEAP32[$5 + 144 >> 2] = 0;
  HEAP32[$5 + 140 >> 2] = (HEAPU8[$5 + 185 | 0] | HEAPU8[$5 + 186 | 0] << 8) & 57344;
  HEAP16[$5 + 138 >> 1] = (HEAPU8[$5 + 185 | 0] | HEAPU8[$5 + 186 | 0] << 8) & 8191;
  if (HEAP32[$5 + 140 >> 2] == 24576) {
   HEAP32[$5 + 156 >> 2] = jsvObjectGetChild(HEAP32[$5 + 248 >> 2], 38877, 0);
   HEAP32[$5 + 152 >> 2] = jsvObjectGetChild(HEAP32[$5 + 248 >> 2], 38882, 0);
   HEAP32[$5 + 144 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$5 + 248 >> 2], 38892, 0));
  }
  HEAP32[$5 + 132 >> 2] = HEAPU8[$5 + 168 | 0] | HEAPU8[$5 + 169 | 0] << 8 | (HEAPU8[$5 + 170 | 0] << 16 | HEAPU8[$5 + 171 | 0] << 24);
  label$4 : {
   if ((HEAPU8[$5 + 191 | 0] >>> 4 & 3) == 1) {
    $0 = (HEAPU8[$5 + 168 | 0] | HEAPU8[$5 + 169 | 0] << 8 | (HEAPU8[$5 + 170 | 0] << 16 | HEAPU8[$5 + 171 | 0] << 24)) ^ 48;
    HEAP8[$5 + 168 | 0] = $0;
    HEAP8[$5 + 169 | 0] = $0 >>> 8;
    HEAP8[$5 + 170 | 0] = $0 >>> 16;
    HEAP8[$5 + 171 | 0] = $0 >>> 24;
    HEAP32[$5 + 128 >> 2] = (HEAPU8[$5 + 172 | 0] | HEAPU8[$5 + 173 | 0] << 8) - (HEAP32[$5 + 240 >> 2] + 1 | 0);
    HEAP32[$5 + 240 >> 2] = HEAP32[$5 + 236 >> 2];
    HEAP32[$5 + 236 >> 2] = HEAP32[$5 + 128 >> 2];
    break label$4;
   }
   label$6 : {
    if ((HEAPU8[$5 + 191 | 0] >>> 4 & 3) == 2) {
     $0 = (HEAPU8[$5 + 168 | 0] | HEAPU8[$5 + 169 | 0] << 8 | (HEAPU8[$5 + 170 | 0] << 16 | HEAPU8[$5 + 171 | 0] << 24)) ^ 96;
     HEAP8[$5 + 168 | 0] = $0;
     HEAP8[$5 + 169 | 0] = $0 >>> 8;
     HEAP8[$5 + 170 | 0] = $0 >>> 16;
     HEAP8[$5 + 171 | 0] = $0 >>> 24;
     HEAP32[$5 + 240 >> 2] = (HEAPU8[$5 + 172 | 0] | HEAPU8[$5 + 173 | 0] << 8) - (HEAP32[$5 + 240 >> 2] + 1 | 0);
     HEAP32[$5 + 236 >> 2] = (HEAPU8[$5 + 174 | 0] | HEAPU8[$5 + 175 | 0] << 8) - (HEAP32[$5 + 236 >> 2] + 1 | 0);
     break label$6;
    }
    if ((HEAPU8[$5 + 191 | 0] >>> 4 & 3) == 3) {
     $0 = (HEAPU8[$5 + 168 | 0] | HEAPU8[$5 + 169 | 0] << 8 | (HEAPU8[$5 + 170 | 0] << 16 | HEAPU8[$5 + 171 | 0] << 24)) ^ 80;
     HEAP8[$5 + 168 | 0] = $0;
     HEAP8[$5 + 169 | 0] = $0 >>> 8;
     HEAP8[$5 + 170 | 0] = $0 >>> 16;
     HEAP8[$5 + 171 | 0] = $0 >>> 24;
     HEAP32[$5 + 124 >> 2] = (HEAPU8[$5 + 174 | 0] | HEAPU8[$5 + 175 | 0] << 8) - (HEAP32[$5 + 236 >> 2] + 1 | 0);
     HEAP32[$5 + 236 >> 2] = HEAP32[$5 + 240 >> 2];
     HEAP32[$5 + 240 >> 2] = HEAP32[$5 + 124 >> 2];
    }
   }
  }
  if ((HEAPU8[$5 + 191 | 0] & 3) < 2) {
   $0 = jswrap_graphics_stringWidth(HEAP32[$5 + 248 >> 2], HEAP32[$5 + 244 >> 2]);
   HEAP32[$5 + 240 >> 2] = HEAP32[$5 + 240 >> 2] - ((Math_imul($0, (HEAPU8[$5 + 191 | 0] & 3) + 1 | 0) | 0) / 2 | 0);
  }
  if ((HEAPU8[$5 + 191 | 0] >>> 2 & 3) < 2) {
   HEAP32[$5 + 236 >> 2] = HEAP32[$5 + 236 >> 2] - ((Math_imul(HEAP32[$5 + 148 >> 2], (HEAPU8[$5 + 191 | 0] >>> 2 & 3) + 1 | 0) | 0) / 2 | 0);
  }
  $0 = $5;
  if ((HEAPU8[$5 + 168 | 0] | HEAPU8[$5 + 169 | 0] << 8 | (HEAPU8[$5 + 170 | 0] << 16 | HEAPU8[$5 + 171 | 0] << 24)) & 16) {
   $1 = HEAPU8[$5 + 194 | 0] | HEAPU8[$5 + 195 | 0] << 8;
  } else {
   $1 = HEAPU8[$5 + 192 | 0] | HEAPU8[$5 + 193 | 0] << 8;
  }
  HEAP32[$0 + 120 >> 2] = $1;
  $0 = $5;
  if ((HEAPU8[$5 + 168 | 0] | HEAPU8[$5 + 169 | 0] << 8 | (HEAPU8[$5 + 170 | 0] << 16 | HEAPU8[$5 + 171 | 0] << 24)) & 16) {
   $1 = HEAPU8[$5 + 192 | 0] | HEAPU8[$5 + 193 | 0] << 8;
  } else {
   $1 = HEAPU8[$5 + 194 | 0] | HEAPU8[$5 + 195 | 0] << 8;
  }
  HEAP32[$0 + 116 >> 2] = $1;
  $0 = $5;
  if ((HEAPU8[$5 + 168 | 0] | HEAPU8[$5 + 169 | 0] << 8 | (HEAPU8[$5 + 170 | 0] << 16 | HEAPU8[$5 + 171 | 0] << 24)) & 16) {
   $1 = HEAPU8[$5 + 198 | 0] | HEAPU8[$5 + 199 | 0] << 8;
  } else {
   $1 = HEAPU8[$5 + 196 | 0] | HEAPU8[$5 + 197 | 0] << 8;
  }
  HEAP32[$0 + 112 >> 2] = $1;
  $2 = $5 + 80 | 0;
  $0 = $5;
  if ((HEAPU8[$5 + 168 | 0] | HEAPU8[$5 + 169 | 0] << 8 | (HEAPU8[$5 + 170 | 0] << 16 | HEAPU8[$5 + 171 | 0] << 24)) & 16) {
   $1 = HEAPU8[$5 + 196 | 0] | HEAPU8[$5 + 197 | 0] << 8;
  } else {
   $1 = HEAPU8[$5 + 198 | 0] | HEAPU8[$5 + 199 | 0] << 8;
  }
  HEAP32[$0 + 108 >> 2] = $1;
  HEAP32[$5 + 104 >> 2] = HEAP32[$5 + 240 >> 2];
  HEAP32[$5 + 100 >> 2] = jsvAsString(HEAP32[$5 + 244 >> 2]);
  jsvStringIteratorNew($2, HEAP32[$5 + 100 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar($5 + 80 | 0) & 1) {
    HEAP8[$5 + 79 | 0] = jsvStringIteratorGetCharAndNext($5 + 80 | 0);
    if (HEAP8[$5 + 79 | 0] == 10) {
     HEAP32[$5 + 240 >> 2] = HEAP32[$5 + 104 >> 2];
     HEAP32[$5 + 236 >> 2] = HEAP32[$5 + 148 >> 2] + HEAP32[$5 + 236 >> 2];
     continue;
    }
    label$22 : {
     if (!HEAP32[$5 + 140 >> 2]) {
      HEAP32[$5 + 72 >> 2] = graphicsVectorCharWidth($5 + 160 | 0, HEAPU8[$5 + 185 | 0] | HEAPU8[$5 + 186 | 0] << 8, HEAP8[$5 + 79 | 0]);
      if (!(HEAP32[$5 + 240 >> 2] <= (HEAP32[$5 + 120 >> 2] - HEAP32[$5 + 72 >> 2] | 0) | HEAP32[$5 + 240 >> 2] >= HEAP32[$5 + 112 >> 2] | (HEAP32[$5 + 236 >> 2] <= (HEAP32[$5 + 116 >> 2] - (HEAPU8[$5 + 185 | 0] | HEAPU8[$5 + 186 | 0] << 8) | 0) | HEAP32[$5 + 236 >> 2] >= HEAP32[$5 + 108 >> 2]))) {
       graphicsFillVectorChar($5 + 160 | 0, HEAP32[$5 + 240 >> 2], HEAP32[$5 + 236 >> 2], HEAPU8[$5 + 185 | 0] | HEAPU8[$5 + 186 | 0] << 8, HEAP8[$5 + 79 | 0]);
      }
      HEAP32[$5 + 240 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 240 >> 2];
      break label$22;
     }
     label$25 : {
      if (HEAP32[$5 + 140 >> 2] == 8192) {
       if (!(HEAP32[$5 + 240 >> 2] <= (HEAP32[$5 + 120 >> 2] - 4 | 0) | HEAP32[$5 + 240 >> 2] >= HEAP32[$5 + 112 >> 2] | (HEAP32[$5 + 236 >> 2] <= (HEAP32[$5 + 116 >> 2] - 6 | 0) | HEAP32[$5 + 236 >> 2] >= HEAP32[$5 + 108 >> 2]))) {
        graphicsDrawChar4x6($5 + 160 | 0, HEAP32[$5 + 240 >> 2], HEAP32[$5 + 236 >> 2], HEAP8[$5 + 79 | 0], HEAPU16[$5 + 138 >> 1], HEAP8[$5 + 235 | 0] & 1);
       }
       HEAP32[$5 + 240 >> 2] = HEAP32[$5 + 240 >> 2] + (HEAPU16[$5 + 138 >> 1] << 2);
       break label$25;
      }
      label$28 : {
       if (HEAP32[$5 + 140 >> 2] == 16384) {
        if (!(HEAP32[$5 + 240 >> 2] <= (HEAP32[$5 + 120 >> 2] - 6 | 0) | HEAP32[$5 + 240 >> 2] >= HEAP32[$5 + 112 >> 2] | (HEAP32[$5 + 236 >> 2] <= (HEAP32[$5 + 116 >> 2] - 8 | 0) | HEAP32[$5 + 236 >> 2] >= HEAP32[$5 + 108 >> 2]))) {
         graphicsDrawChar6x8($5 + 160 | 0, HEAP32[$5 + 240 >> 2], HEAP32[$5 + 236 >> 2], HEAP8[$5 + 79 | 0], HEAPU16[$5 + 138 >> 1], HEAP8[$5 + 235 | 0] & 1);
        }
        HEAP32[$5 + 240 >> 2] = HEAP32[$5 + 240 >> 2] + Math_imul(HEAPU16[$5 + 138 >> 1], 6);
        break label$28;
       }
       if (HEAP32[$5 + 140 >> 2] == 24576) {
        HEAP32[$5 + 68 >> 2] = 0;
        HEAP32[$5 + 64 >> 2] = 0;
        label$32 : {
         if (jsvIsString(HEAP32[$5 + 152 >> 2]) & 1) {
          if (HEAP8[$5 + 79 | 0] >= HEAP32[$5 + 144 >> 2]) {
           jsvStringIteratorNew($5 + 40 | 0, HEAP32[$5 + 152 >> 2], 0);
           while (1) {
            if (jsvStringIteratorHasChar($5 + 40 | 0) & 1) {
             $0 = (jsvStringIteratorGetIndex($5 + 40 | 0) | 0) < (HEAP8[$5 + 79 | 0] - HEAP32[$5 + 144 >> 2] | 0);
            } else {
             $0 = 0;
            }
            if ($0) {
             HEAP32[$5 + 64 >> 2] = (jsvStringIteratorGetCharAndNext($5 + 40 | 0) & 255) + HEAP32[$5 + 64 >> 2];
             continue;
            }
            break;
           }
           $0 = $5 + 40 | 0;
           HEAP32[$5 + 68 >> 2] = jsvStringIteratorGetChar($0) & 255;
           jsvStringIteratorFree($0);
          }
          break label$32;
         }
         HEAP32[$5 + 68 >> 2] = jsvGetInteger(HEAP32[$5 + 152 >> 2]);
         HEAP32[$5 + 64 >> 2] = Math_imul(HEAP32[$5 + 68 >> 2], HEAP8[$5 + 79 | 0] - HEAP32[$5 + 144 >> 2] | 0);
        }
        label$39 : {
         if (HEAP8[$5 + 79 | 0] < HEAP32[$5 + 144 >> 2] | HEAP32[$5 + 240 >> 2] <= (HEAP32[$5 + 120 >> 2] - HEAP32[$5 + 68 >> 2] | 0) | (HEAP32[$5 + 236 >> 2] <= (HEAP32[$5 + 116 >> 2] - HEAP32[$5 + 148 >> 2] | 0) | HEAP32[$5 + 240 >> 2] >= HEAP32[$5 + 112 >> 2])) {
          break label$39;
         }
         if (HEAP32[$5 + 236 >> 2] >= HEAP32[$5 + 108 >> 2]) {
          break label$39;
         }
         HEAP32[$5 + 36 >> 2] = HEAP32[$5 + 148 >> 2] / HEAPU16[$5 + 138 >> 1];
         HEAP32[$5 + 64 >> 2] = Math_imul(HEAP32[$5 + 36 >> 2], HEAP32[$5 + 64 >> 2]);
         jsvStringIteratorNew($5 + 16 | 0, HEAP32[$5 + 156 >> 2], HEAP32[$5 + 64 >> 2] >>> 3);
         HEAP32[$5 + 64 >> 2] = HEAP32[$5 + 64 >> 2] & 7;
         HEAP32[$5 + 12 >> 2] = 0;
         while (1) {
          if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 68 >> 2]) {
           HEAP32[$5 + 8 >> 2] = 0;
           while (1) {
            if (HEAP32[$5 + 8 >> 2] < HEAP32[$5 + 36 >> 2]) {
             HEAP8[$5 + 7 | 0] = (jsvStringIteratorGetChar($5 + 16 | 0) << 24 >> 24 << HEAP32[$5 + 64 >> 2] & 128) != 0;
             if (!(HEAP8[$5 + 7 | 0] & 1 ? 0 : !(HEAP8[$5 + 235 | 0] & 1))) {
              $0 = $5 + 160 | 0;
              $1 = HEAP32[$5 + 240 >> 2] + Math_imul(HEAP32[$5 + 12 >> 2], HEAPU16[$5 + 138 >> 1]) | 0;
              $2 = HEAP32[$5 + 236 >> 2] + Math_imul(HEAP32[$5 + 8 >> 2], HEAPU16[$5 + 138 >> 1]) | 0;
              $3 = (HEAPU16[$5 + 138 >> 1] + (HEAP32[$5 + 240 >> 2] + Math_imul(HEAP32[$5 + 12 >> 2], HEAPU16[$5 + 138 >> 1]) | 0) | 0) - 1 | 0;
              $4 = (HEAPU16[$5 + 138 >> 1] + (HEAP32[$5 + 236 >> 2] + Math_imul(HEAP32[$5 + 8 >> 2], HEAPU16[$5 + 138 >> 1]) | 0) | 0) - 1 | 0;
              if (HEAP8[$5 + 7 | 0] & 1) {
               $6 = HEAPU8[$5 + 177 | 0] | HEAPU8[$5 + 178 | 0] << 8 | (HEAPU8[$5 + 179 | 0] << 16 | HEAPU8[$5 + 180 | 0] << 24);
              } else {
               $6 = HEAPU8[$5 + 181 | 0] | HEAPU8[$5 + 182 | 0] << 8 | (HEAPU8[$5 + 183 | 0] << 16 | HEAPU8[$5 + 184 | 0] << 24);
              }
              graphicsFillRect($0, $1, $2, $3, $4, $6);
             }
             HEAP32[$5 + 64 >> 2] = HEAP32[$5 + 64 >> 2] + 1;
             if (HEAP32[$5 + 64 >> 2] == 8) {
              HEAP32[$5 + 64 >> 2] = 0;
              jsvStringIteratorNext($5 + 16 | 0);
             }
             HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
           continue;
          }
          break;
         }
         jsvStringIteratorFree($5 + 16 | 0);
        }
        HEAP32[$5 + 240 >> 2] = HEAP32[$5 + 240 >> 2] + Math_imul(HEAP32[$5 + 68 >> 2], HEAPU16[$5 + 138 >> 1]);
       }
      }
     }
    }
    if (!(jspIsInterrupted() & 1)) {
     continue;
    }
   }
   break;
  }
  $1 = $5 + 160 | 0;
  jsvStringIteratorFree($5 + 80 | 0);
  jsvUnLock3(HEAP32[$5 + 100 >> 2], HEAP32[$5 + 156 >> 2], HEAP32[$5 + 152 >> 2]);
  $0 = HEAP32[$5 + 132 >> 2];
  HEAP8[$5 + 168 | 0] = $0;
  HEAP8[$5 + 169 | 0] = $0 >>> 8;
  HEAP8[$5 + 170 | 0] = $0 >>> 16;
  HEAP8[$5 + 171 | 0] = $0 >>> 24;
  graphicsSetVar($1);
  HEAP32[$5 + 252 >> 2] = jsvLockAgain(HEAP32[$5 + 248 >> 2]);
 }
 global$0 = $5 + 256 | 0;
 return HEAP32[$5 + 252 >> 2];
}
function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_negative_values_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 $1 = global$0 - 496 | 0;
 global$0 = $1;
 $6 = $1 + 24 | 0;
 $2 = $1 + 488 | 0;
 $3 = $1 + 480 | 0;
 $7 = $1 + 16 | 0;
 $8 = $1 - -64 | 0;
 $9 = $1 + 32 | 0;
 $10 = $1 + 72 | 0;
 $11 = $1 + 40 | 0;
 $12 = $1 + 48 | 0;
 $13 = $1 + 112 | 0;
 $14 = $1 + 80 | 0;
 $15 = $1 + 120 | 0;
 $16 = $1 + 88 | 0;
 $17 = $1 + 96 | 0;
 $18 = $1 + 160 | 0;
 $19 = $1 + 128 | 0;
 $20 = $1 + 168 | 0;
 $21 = $1 + 136 | 0;
 $22 = $1 + 144 | 0;
 $23 = $1 + 208 | 0;
 $24 = $1 + 176 | 0;
 $25 = $1 + 216 | 0;
 $26 = $1 + 184 | 0;
 $27 = $1 + 192 | 0;
 $28 = $1 + 256 | 0;
 $29 = $1 + 224 | 0;
 $30 = $1 + 264 | 0;
 $31 = $1 + 232 | 0;
 $32 = $1 + 240 | 0;
 $33 = $1 + 304 | 0;
 $34 = $1 + 272 | 0;
 $35 = $1 + 312 | 0;
 $36 = $1 + 280 | 0;
 $37 = $1 + 288 | 0;
 $38 = $1 + 352 | 0;
 $39 = $1 + 320 | 0;
 $40 = $1 + 360 | 0;
 $41 = $1 + 328 | 0;
 $42 = $1 + 336 | 0;
 $43 = $1 + 384 | 0;
 $44 = $1 + 368 | 0;
 $4 = $1 + 440 | 0;
 $45 = $1 + 376 | 0;
 $46 = $1 + 392 | 0;
 $5 = $1 + 472 | 0;
 $47 = $1 + 408 | 0;
 $48 = $1 + 464 | 0;
 $49 = $1 + 416 | 0;
 $50 = $1 + 424 | 0;
 $51 = $1 + 456 | 0;
 HEAP32[$1 + 480 >> 2] = $0;
 HEAP32[$1 + 472 >> 2] = gemmlowp__FixedPoint_int_2c_205__20gemmlowp__FixedPoint_int_2c_205___ConstantPOT__2__28_29();
 HEAP32[$51 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$1 + 448 >> 2] = gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29(1);
 HEAP32[$1 + 464 >> 2] = gemmlowp__FixedPoint_int_2c_205__20gemmlowp__operator__int_2c_205__28gemmlowp__FixedPoint_int_2c_205__2c_20gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$1 + 456 >> 2], HEAP32[$1 + 448 >> 2]);
 HEAP32[$50 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$49 >> 2] = HEAP32[$48 >> 2];
 HEAP32[$1 + 432 >> 2] = gemmlowp__FixedPoint_int_2c_205__20gemmlowp__operator__int_2c_205__28gemmlowp__FixedPoint_int_2c_205__2c_20gemmlowp__FixedPoint_int_2c_205__29_1(HEAP32[$1 + 424 >> 2], HEAP32[$1 + 416 >> 2]);
 HEAP32[$47 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$1 + 440 >> 2] = gemmlowp__FixedPoint_int_2c_205__20gemmlowp__operator__int_2c_205__28gemmlowp__FixedPoint_int_2c_205__2c_20gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$1 + 432 >> 2], HEAP32[$1 + 408 >> 2]);
 HEAP32[$46 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$1 + 400 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__Rescale_0_2c_20int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$1 + 392 >> 2]);
 HEAP32[$1 + 488 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_interval_between_negative_one_quarter_and_0_excl_int__28gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 400 >> 2]);
 HEAP32[$45 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$44 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 + 384 >> 2] = gemmlowp__FixedPoint_int_2c_205__20gemmlowp__operator__int_2c_205__28gemmlowp__FixedPoint_int_2c_205__2c_20gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$1 + 376 >> 2], HEAP32[$1 + 368 >> 2]);
 HEAP32[$1 + 388 >> 2] = HEAP32[jshFlashGetMemMapAddress($43) >> 2];
 HEAP32[$1 + 360 >> 2] = gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200__20__28int_29(1672461947));
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$1 + 388 >> 2], jshFlashGetMemMapAddress(16777216)));
 HEAP32[$42 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$41 >> 2] = HEAP32[$40 >> 2];
 HEAP32[$1 + 344 >> 2] = gemmlowp__FixedPoint_int_2c_20_280_29_20__20_280_29__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 336 >> 2], HEAP32[$1 + 328 >> 2]);
 HEAP32[$39 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 352 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 344 >> 2], HEAP32[$1 + 320 >> 2]);
 HEAP32[$2 >> 2] = HEAP32[$38 >> 2];
 HEAP32[$1 + 312 >> 2] = gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200__20__28int_29(1302514674));
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$1 + 388 >> 2], jshFlashGetMemMapAddress(33554432)));
 HEAP32[$37 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$36 >> 2] = HEAP32[$35 >> 2];
 HEAP32[$1 + 296 >> 2] = gemmlowp__FixedPoint_int_2c_20_280_29_20__20_280_29__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 288 >> 2], HEAP32[$1 + 280 >> 2]);
 HEAP32[$34 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 304 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 296 >> 2], HEAP32[$1 + 272 >> 2]);
 HEAP32[$2 >> 2] = HEAP32[$33 >> 2];
 HEAP32[$1 + 264 >> 2] = gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200__20__28int_29(790015084));
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$1 + 388 >> 2], jshFlashGetMemMapAddress(67108864)));
 HEAP32[$32 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$31 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$1 + 248 >> 2] = gemmlowp__FixedPoint_int_2c_20_280_29_20__20_280_29__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 240 >> 2], HEAP32[$1 + 232 >> 2]);
 HEAP32[$29 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 256 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 248 >> 2], HEAP32[$1 + 224 >> 2]);
 HEAP32[$2 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$1 + 216 >> 2] = gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200__20__28int_29(290630308));
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$1 + 388 >> 2], jshFlashGetMemMapAddress(134217728)));
 HEAP32[$27 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$26 >> 2] = HEAP32[$25 >> 2];
 HEAP32[$1 + 200 >> 2] = gemmlowp__FixedPoint_int_2c_20_280_29_20__20_280_29__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 192 >> 2], HEAP32[$1 + 184 >> 2]);
 HEAP32[$24 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 208 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 200 >> 2], HEAP32[$1 + 176 >> 2]);
 HEAP32[$2 >> 2] = HEAP32[$23 >> 2];
 HEAP32[$1 + 168 >> 2] = gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200__20__28int_29(39332535));
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$1 + 388 >> 2], jshFlashGetMemMapAddress(268435456)));
 HEAP32[$22 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$21 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$1 + 152 >> 2] = gemmlowp__FixedPoint_int_2c_20_280_29_20__20_280_29__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 144 >> 2], HEAP32[$1 + 136 >> 2]);
 HEAP32[$19 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 160 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 152 >> 2], HEAP32[$1 + 128 >> 2]);
 HEAP32[$2 >> 2] = HEAP32[$18 >> 2];
 HEAP32[$1 + 120 >> 2] = gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200__20__28int_29(720401));
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$1 + 388 >> 2], jshFlashGetMemMapAddress(536870912)));
 HEAP32[$17 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$16 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$1 + 104 >> 2] = gemmlowp__FixedPoint_int_2c_20_280_29_20__20_280_29__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 96 >> 2], HEAP32[$1 + 88 >> 2]);
 HEAP32[$14 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 112 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 104 >> 2], HEAP32[$1 + 80 >> 2]);
 HEAP32[$2 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$1 + 72 >> 2] = gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200__20__28int_29(242));
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$1 + 388 >> 2], jshFlashGetMemMapAddress(1073741824)));
 HEAP32[$12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$11 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$1 + 56 >> 2] = gemmlowp__FixedPoint_int_2c_20_280_29_20__20_280_29__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 48 >> 2], HEAP32[$1 + 40 >> 2]);
 HEAP32[$9 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 64 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 56 >> 2], HEAP32[$1 + 32 >> 2]);
 HEAP32[$2 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$3 >> 2];
 $0 = int_20gemmlowp__MaskIfZero_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$1 + 16 >> 2]);
 HEAP32[$1 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_200___One_28_29();
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 8 >> 2], HEAP32[$1 >> 2]);
 HEAP32[$2 >> 2] = HEAP32[$6 >> 2];
 global$0 = $1 + 496 | 0;
 return HEAP32[$1 + 488 >> 2];
}
function jsiHandleChar($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP8[$1 + 31 | 0] = $0;
 label$1 : {
  if (jsiPasswordProtected() & 1) {
   if (!(HEAP8[$1 + 31 | 0] != 10 ? HEAP8[$1 + 31 | 0] != 13 : 0)) {
    HEAP32[$1 + 24 >> 2] = jsvObjectGetChild(HEAP32[23775], 5529, 0);
    label$5 : {
     if (!HEAP32[$1 + 24 >> 2]) {
      break label$5;
     }
     if (jsvCompareString(HEAP32[23784], HEAP32[$1 + 24 >> 2], 0, 0)) {
      break label$5;
     }
     HEAP16[47566] = HEAPU16[47566] & -1025;
    }
    jsvUnLock(HEAP32[$1 + 24 >> 2]);
    jsiClearInputLine(0);
    label$6 : {
     if (jsiPasswordProtected() & 1) {
      jsiConsolePrintString(5909);
      break label$6;
     }
     jsiConsolePrintString(5939);
     HEAP8[95140] = 1;
     jsiConsoleReturnInputLine();
    }
    break label$1;
   }
   HEAP8[$1 + 22 | 0] = HEAPU8[$1 + 31 | 0];
   HEAP8[$1 + 23 | 0] = 0;
   if (jsvGetStringLength(HEAP32[23784]) >>> 0 < 20) {
    jsiAppendToInputLine($1 + 22 | 0);
   }
   break label$1;
  }
  if (!HEAP8[$1 + 31 | 0]) {
   HEAP8[95148] = 0;
   break label$1;
  }
  label$10 : {
   if (HEAP8[$1 + 31 | 0] == 1) {
    jsiHandleHome();
    break label$10;
   }
   label$12 : {
    if (HEAP8[$1 + 31 | 0] == 4) {
     jsiHandleDelete(0);
     break label$12;
    }
    label$14 : {
     if (HEAP8[$1 + 31 | 0] == 5) {
      jsiHandleEnd();
      break label$14;
     }
     label$16 : {
      if (!(HEAP8[$1 + 31 | 0] != 23 ? HEAP8[$1 + 31 | 0] != 21 : 0)) {
       jsiClearInputLine(1);
       break label$16;
      }
      label$19 : {
       if (HEAP8[$1 + 31 | 0] == 27) {
        HEAP8[95148] = 2;
        break label$19;
       }
       label$21 : {
        if (HEAPU8[95148] == 2) {
         HEAP8[95148] = 0;
         label$23 : {
          if (HEAP8[$1 + 31 | 0] == 79) {
           HEAP8[95148] = 3;
           break label$23;
          }
          label$25 : {
           if (HEAP8[$1 + 31 | 0] == 91) {
            HEAP8[95148] = 4;
            break label$25;
           }
           if (HEAP8[$1 + 31 | 0] == 10) {
            jsiHandleNewLine(0);
           }
          }
         }
         break label$21;
        }
        label$28 : {
         if (HEAPU8[95148] == 3) {
          HEAP8[95148] = 0;
          label$30 : {
           if (HEAP8[$1 + 31 | 0] == 70) {
            jsiHandleEnd();
            break label$30;
           }
           label$32 : {
            if (HEAP8[$1 + 31 | 0] == 72) {
             jsiHandleHome();
             break label$32;
            }
            label$34 : {
             if (HEAP8[$1 + 31 | 0] == 111) {
              jsiHandleChar(47);
              break label$34;
             }
             label$36 : {
              if (HEAP8[$1 + 31 | 0] == 106) {
               jsiHandleChar(42);
               break label$36;
              }
              label$38 : {
               if (HEAP8[$1 + 31 | 0] == 109) {
                jsiHandleChar(45);
                break label$38;
               }
               label$40 : {
                if (HEAP8[$1 + 31 | 0] == 107) {
                 jsiHandleChar(43);
                 break label$40;
                }
                if (HEAP8[$1 + 31 | 0] == 77) {
                 jsiHandleChar(13);
                }
               }
              }
             }
            }
           }
          }
          break label$28;
         }
         label$43 : {
          if (HEAPU8[95148] == 4) {
           HEAP8[95148] = 0;
           label$45 : {
            if (!(HEAP8[$1 + 31 | 0] < 48 | HEAP8[$1 + 31 | 0] > 57)) {
             HEAP16[47599] = HEAP8[$1 + 31 | 0] - 48;
             HEAP8[95148] = 5;
             break label$45;
            }
            label$47 : {
             if (HEAP8[$1 + 31 | 0] == 68) {
              if (HEAPU32[23786] <= 0) {
               break label$47;
              }
              if ((jsvGetCharInString(HEAP32[23784], HEAP32[23786] - 1 | 0) & 255) == 10) {
               break label$47;
              }
              HEAP32[23786] = HEAP32[23786] + -1;
              if (jsiShowInputLine() & 1) {
               jsiConsolePrintString(5210);
              }
              break label$47;
             }
             label$50 : {
              if (HEAP8[$1 + 31 | 0] == 67) {
               if (HEAPU32[23786] >= jsvGetStringLength(HEAP32[23784]) >>> 0) {
                break label$50;
               }
               if ((jsvGetCharInString(HEAP32[23784], HEAP32[23786]) & 255) == 10) {
                break label$50;
               }
               HEAP32[23786] = HEAP32[23786] + 1;
               if (jsiShowInputLine() & 1) {
                jsiConsolePrintString(5206);
               }
               break label$50;
              }
              label$53 : {
               if (HEAP8[$1 + 31 | 0] == 65) {
                HEAP32[$1 + 16 >> 2] = jsvGetStringLength(HEAP32[23784]);
                label$55 : {
                 label$56 : {
                  if (HEAP32[$1 + 16 >> 2]) {
                   if (!(jsiIsInHistory(HEAP32[23784]) & 1)) {
                    break label$56;
                   }
                  }
                  if (HEAP32[23786] != HEAP32[$1 + 16 >> 2]) {
                   break label$56;
                  }
                  jsiChangeToHistory(1);
                  break label$55;
                 }
                 jsiHandleMoveUpDown(-1);
                }
                break label$53;
               }
               label$58 : {
                if (HEAP8[$1 + 31 | 0] == 66) {
                 HEAP32[$1 + 12 >> 2] = jsvGetStringLength(HEAP32[23784]);
                 label$60 : {
                  label$61 : {
                   if (HEAP32[$1 + 12 >> 2]) {
                    if (!(jsiIsInHistory(HEAP32[23784]) & 1)) {
                     break label$61;
                    }
                   }
                   if (HEAP32[23786] != HEAP32[$1 + 12 >> 2]) {
                    break label$61;
                   }
                   jsiChangeToHistory(0);
                   break label$60;
                  }
                  jsiHandleMoveUpDown(1);
                 }
                 break label$58;
                }
                label$63 : {
                 if (HEAP8[$1 + 31 | 0] == 70) {
                  jsiHandleEnd();
                  break label$63;
                 }
                 if (HEAP8[$1 + 31 | 0] == 72) {
                  jsiHandleHome();
                 }
                }
               }
              }
             }
            }
           }
           break label$43;
          }
          label$66 : {
           if (HEAPU8[95148] == 5) {
            if (!(HEAP8[$1 + 31 | 0] < 48 | HEAP8[$1 + 31 | 0] > 57)) {
             HEAP16[47599] = (HEAP8[$1 + 31 | 0] + Math_imul(HEAPU16[47599], 10) | 0) - 48;
             break label$66;
            }
            label$69 : {
             if (HEAP8[$1 + 31 | 0] == 100) {
              HEAP16[47578] = HEAPU16[47599];
              break label$69;
             }
             label$71 : {
              if (HEAP8[$1 + 31 | 0] == 72) {
               if (HEAPU16[47599] == 2) {
                jsiClearInputLine(1);
               }
               break label$71;
              }
              if (HEAP8[$1 + 31 | 0] == 126) {
               label$75 : {
                if (HEAPU16[47599] == 1) {
                 jsiHandleHome();
                 break label$75;
                }
                label$77 : {
                 if (HEAPU16[47599] == 3) {
                  jsiHandleDelete(0);
                  break label$77;
                 }
                 label$79 : {
                  if (HEAPU16[47599] == 4) {
                   jsiHandleEnd();
                   break label$79;
                  }
                  label$81 : {
                   if (HEAPU16[47599] == 5) {
                    jsiHandlePageUpDown(0);
                    break label$81;
                   }
                   if (HEAPU16[47599] == 6) {
                    jsiHandlePageUpDown(1);
                   }
                  }
                 }
                }
               }
              }
             }
            }
            HEAP8[95148] = 0;
            break label$66;
           }
           label$84 : {
            label$85 : {
             if (HEAP8[$1 + 31 | 0] != 16) {
              break label$85;
             }
             if (jsvGetStringLength(HEAP32[23784])) {
              break label$85;
             }
             HEAP16[47566] = HEAPU16[47566] | 2;
             break label$84;
            }
            HEAP8[95148] = 0;
            label$86 : {
             if (!(HEAP8[$1 + 31 | 0] != 127 ? HEAP8[$1 + 31 | 0] != 8 : 0)) {
              jsiHandleDelete(1);
              break label$86;
             }
             label$89 : {
              if (!(HEAP8[$1 + 31 | 0] != 10 | HEAPU8[95148] != 1)) {
               HEAP8[95148] = 0;
               break label$89;
              }
              label$91 : {
               if (!(HEAP8[$1 + 31 | 0] != 10 ? HEAP8[$1 + 31 | 0] != 13 : 0)) {
                if (HEAP8[$1 + 31 | 0] == 13) {
                 HEAP8[95148] = 1;
                }
                jsiHandleNewLine(1);
                break label$91;
               }
               label$95 : {
                label$96 : {
                 if (HEAP8[$1 + 31 | 0] != 9) {
                  break label$96;
                 }
                 if (!(jsiEcho() & 1)) {
                  break label$96;
                 }
                 jsiTabComplete();
                 break label$95;
                }
                if (!(HEAP8[$1 + 31 | 0] != 9 ? HEAPU8[$1 + 31 | 0] < 32 : 0)) {
                 HEAP8[$1 + 10 | 0] = HEAPU8[$1 + 31 | 0];
                 HEAP8[$1 + 11 | 0] = 0;
                 $0 = $1;
                 if (HEAP8[$1 + 31 | 0] == 9) {
                  $2 = 5954;
                 } else {
                  $2 = $1 + 10 | 0;
                 }
                 HEAP32[$0 + 4 >> 2] = $2;
                 jsiAppendStringToInputLine(HEAP32[$1 + 4 >> 2]);
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 global$0 = $1 + 32 | 0;
}
function tflite__MicroAllocator__AllocateTensors_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 224 | 0;
 global$0 = $1;
 HEAP32[$1 + 216 >> 2] = $0;
 $2 = HEAP32[$1 + 216 >> 2];
 HEAP32[$1 + 212 >> 2] = flatbuffers__Vector_int___size_28_29_20const(HEAP32[$2 + 40 >> 2]);
 HEAP32[$1 + 208 >> 2] = tflite__SimpleMemoryAllocator__AllocateFromTail_28unsigned_20long_2c_20unsigned_20long_29($2 + 4 | 0, Math_imul(HEAP32[$1 + 212 >> 2], 20), 20);
 HEAP32[$1 + 204 >> 2] = tflite__Model__buffers_28_29_20const(HEAP32[$2 >> 2]);
 HEAP32[$1 + 200 >> 2] = 0;
 label$1 : {
  while (1) {
   if (HEAPU32[$1 + 200 >> 2] < HEAPU32[$1 + 212 >> 2]) {
    HEAP32[$1 + 196 >> 2] = HEAP32[$1 + 208 >> 2] + Math_imul(HEAP32[$1 + 200 >> 2], 20);
    $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph__20___Get_28unsigned_20int_29_20const(HEAP32[$2 + 40 >> 2], HEAP32[$1 + 200 >> 2]);
    HEAP32[HEAP32[$1 + 196 >> 2] >> 2] = $0;
    HEAP32[HEAP32[$1 + 196 >> 2] + 4 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2] + Math_imul(HEAP32[$1 + 200 >> 2], 56);
    HEAP8[$1 + 195 | 0] = tflite__Tensor__is_variable_28_29_20const(HEAP32[HEAP32[$1 + 196 >> 2] >> 2]) & 1;
    label$4 : {
     if (HEAP8[$1 + 195 | 0] & 1) {
      HEAP32[HEAP32[$1 + 196 >> 2] + 8 >> 2] = 0;
      $0 = flatbuffers__Vector_int___size_28_29_20const(HEAP32[$2 + 36 >> 2]);
      HEAP32[HEAP32[$1 + 196 >> 2] + 12 >> 2] = $0;
      break label$4;
     }
     HEAP32[HEAP32[$1 + 196 >> 2] + 8 >> 2] = -1;
     HEAP32[HEAP32[$1 + 196 >> 2] + 12 >> 2] = -1;
    }
    HEAP8[HEAP32[$1 + 196 >> 2] + 16 | 0] = 0;
    HEAP8[$1 + 194 | 0] = HEAP32[HEAP32[HEAP32[$1 + 196 >> 2] + 4 >> 2] + 4 >> 2] != 0;
    if (!(HEAP8[$1 + 194 | 0] & 1)) {
     if (tflite__MicroAllocator__InitializeRuntimeTensor_28tflite__Tensor_20const__2c_20flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer__20__20const__2c_20tflite__ErrorReporter__2c_20TfLiteTensor__2c_20unsigned_20char__29($2, HEAP32[HEAP32[$1 + 196 >> 2] >> 2], HEAP32[$1 + 204 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[HEAP32[$1 + 196 >> 2] + 4 >> 2])) {
      HEAP32[$1 + 220 >> 2] = 1;
      break label$1;
     }
    }
    HEAP32[$1 + 200 >> 2] = HEAP32[$1 + 200 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$1 + 188 >> 2] = 0;
  while (1) {
   if (HEAPU32[$1 + 188 >> 2] < flatbuffers__Vector_int___size_28_29_20const(tflite__Model__operator_codes_28_29_20const(HEAP32[$2 + 32 >> 2])) >>> 0) {
    HEAP32[$1 + 184 >> 2] = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__Model__operator_codes_28_29_20const(HEAP32[$2 + 32 >> 2]), HEAP32[$1 + 188 >> 2]);
    HEAP32[$1 + 180 >> 2] = HEAP32[$1 + 208 >> 2] + Math_imul(HEAP32[$1 + 184 >> 2], 20);
    HEAP8[HEAP32[$1 + 180 >> 2] + 16 | 0] = !HEAP32[HEAP32[HEAP32[$1 + 180 >> 2] + 4 >> 2] + 4 >> 2];
    HEAP32[HEAP32[$1 + 180 >> 2] + 8 >> 2] = 0;
    HEAP32[$1 + 188 >> 2] = HEAP32[$1 + 188 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$1 + 176 >> 2] = 0;
  while (1) {
   if (HEAPU32[$1 + 176 >> 2] < flatbuffers__Vector_int___size_28_29_20const(tflite__Model__subgraphs_28_29_20const(HEAP32[$2 + 32 >> 2])) >>> 0) {
    HEAP32[$1 + 172 >> 2] = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__Model__subgraphs_28_29_20const(HEAP32[$2 + 32 >> 2]), HEAP32[$1 + 176 >> 2]);
    HEAP32[$1 + 168 >> 2] = HEAP32[$1 + 208 >> 2] + Math_imul(HEAP32[$1 + 172 >> 2], 20);
    $0 = flatbuffers__Vector_int___size_28_29_20const(HEAP32[$2 + 36 >> 2]);
    HEAP32[HEAP32[$1 + 168 >> 2] + 12 >> 2] = $0 - 1;
    HEAP32[$1 + 176 >> 2] = HEAP32[$1 + 176 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$1 + 164 >> 2] = flatbuffers__Vector_int___size_28_29_20const(HEAP32[$2 + 36 >> 2]) - 1;
  while (1) {
   if (HEAP32[$1 + 164 >> 2] >= 0) {
    HEAP32[$1 + 160 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph__20___Get_28unsigned_20int_29_20const(HEAP32[$2 + 36 >> 2], HEAP32[$1 + 164 >> 2]);
    HEAP32[$1 + 156 >> 2] = 0;
    while (1) {
     if (HEAPU32[$1 + 156 >> 2] < flatbuffers__Vector_int___size_28_29_20const(tflite__Model__operator_codes_28_29_20const(HEAP32[$1 + 160 >> 2])) >>> 0) {
      HEAP32[$1 + 152 >> 2] = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__Model__operator_codes_28_29_20const(HEAP32[$1 + 160 >> 2]), HEAP32[$1 + 156 >> 2]);
      HEAP32[$1 + 148 >> 2] = HEAP32[$1 + 208 >> 2] + Math_imul(HEAP32[$1 + 152 >> 2], 20);
      if (!(HEAP32[HEAP32[$1 + 148 >> 2] + 12 >> 2] <= HEAP32[$1 + 164 >> 2] ? HEAP32[HEAP32[$1 + 148 >> 2] + 12 >> 2] != -1 : 0)) {
       HEAP32[HEAP32[$1 + 148 >> 2] + 12 >> 2] = HEAP32[$1 + 164 >> 2];
      }
      HEAP32[$1 + 156 >> 2] = HEAP32[$1 + 156 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$1 + 144 >> 2] = 0;
    while (1) {
     if (HEAPU32[$1 + 144 >> 2] < flatbuffers__Vector_int___size_28_29_20const(tflite__Model__subgraphs_28_29_20const(HEAP32[$1 + 160 >> 2])) >>> 0) {
      HEAP32[$1 + 140 >> 2] = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__Model__subgraphs_28_29_20const(HEAP32[$1 + 160 >> 2]), HEAP32[$1 + 144 >> 2]);
      HEAP32[$1 + 136 >> 2] = HEAP32[$1 + 208 >> 2] + Math_imul(HEAP32[$1 + 140 >> 2], 20);
      if (!(HEAP32[HEAP32[$1 + 136 >> 2] + 8 >> 2] >= HEAP32[$1 + 164 >> 2] ? HEAP32[HEAP32[$1 + 136 >> 2] + 8 >> 2] != -1 : 0)) {
       HEAP32[HEAP32[$1 + 136 >> 2] + 8 >> 2] = HEAP32[$1 + 164 >> 2];
      }
      HEAP32[$1 + 144 >> 2] = HEAP32[$1 + 144 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$1 + 164 >> 2] = HEAP32[$1 + 164 >> 2] + -1;
    continue;
   }
   break;
  }
  HEAP32[$1 + 132 >> 2] = 0;
  while (1) {
   if (HEAPU32[$1 + 132 >> 2] < flatbuffers__Vector_int___size_28_29_20const(HEAP32[$2 + 40 >> 2]) >>> 0) {
    HEAP32[$1 + 128 >> 2] = HEAP32[$1 + 208 >> 2] + Math_imul(HEAP32[$1 + 132 >> 2], 20);
    HEAP8[$1 + 127 | 0] = HEAP32[HEAP32[$1 + 128 >> 2] + 8 >> 2] == -1 ? HEAP32[HEAP32[$1 + 128 >> 2] + 12 >> 2] != -1 : 0;
    HEAP8[$1 + 126 | 0] = HEAP32[HEAP32[HEAP32[$1 + 128 >> 2] + 4 >> 2] + 4 >> 2] != 0;
    HEAP8[$1 + 125 | 0] = (HEAP8[$1 + 127 | 0] & 1 ? 0 : HEAP32[HEAP32[$1 + 128 >> 2] + 8 >> 2] != -1 ? HEAP32[HEAP32[$1 + 128 >> 2] + 12 >> 2] == -1 : 1) & 1;
    if (HEAP8[$1 + 125 | 0] & 1) {
     $0 = HEAP32[$2 + 16 >> 2];
     HEAP32[$1 >> 2] = HEAP32[$1 + 132 >> 2];
     tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 42161, $1);
     HEAP32[$1 + 220 >> 2] = 1;
     break label$1;
    } else {
     if (!(HEAP8[$1 + 127 | 0] & 1 | HEAP8[$1 + 126 | 0] & 1)) {
      HEAP8[HEAP32[$1 + 128 >> 2] + 16 | 0] = 1;
     }
     HEAP32[$1 + 132 >> 2] = HEAP32[$1 + 132 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  $0 = $1 + 72 | 0;
  HEAP32[$1 + 120 >> 2] = tflite__AlignPointerUp_28unsigned_20char__2c_20unsigned_20long_29(HEAP32[$2 + 24 >> 2]);
  HEAP32[$1 + 116 >> 2] = HEAP32[$1 + 120 >> 2] - HEAP32[$2 + 24 >> 2];
  HEAP32[$1 + 112 >> 2] = HEAP32[$2 + 28 >> 2] - (tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const($2 + 4 | 0) + HEAP32[$1 + 116 >> 2] | 0);
  tflite__GreedyMemoryPlanner__GreedyMemoryPlanner_28unsigned_20char__2c_20int_29($0, HEAP32[$1 + 120 >> 2], HEAP32[$1 + 112 >> 2]);
  HEAP32[$1 + 68 >> 2] = 0;
  label$33 : {
   while (1) {
    if (HEAPU32[$1 + 68 >> 2] < flatbuffers__Vector_int___size_28_29_20const(HEAP32[$2 + 40 >> 2]) >>> 0) {
     HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 208 >> 2] + Math_imul(HEAP32[$1 + 68 >> 2], 20);
     if (HEAP8[HEAP32[$1 + 56 >> 2] + 16 | 0] & 1) {
      if (tflite__BytesRequiredForTensor_28tflite__Tensor_20const__2c_20unsigned_20long__2c_20unsigned_20long__2c_20tflite__ErrorReporter__29(HEAP32[HEAP32[$1 + 56 >> 2] >> 2], $1 + 52 | 0, $1 + 48 | 0, HEAP32[$2 + 16 >> 2])) {
       HEAP32[$1 + 220 >> 2] = 1;
       break label$33;
      }
      HEAP32[$1 + 40 >> 2] = tflite__AlignSizeUp_28unsigned_20long_2c_20unsigned_20long_29(HEAP32[$1 + 52 >> 2]);
      tflite__GreedyMemoryPlanner__AddBuffer_28tflite__ErrorReporter__2c_20int_2c_20int_2c_20int_29($1 + 72 | 0, HEAP32[$2 + 16 >> 2], HEAP32[$1 + 40 >> 2], HEAP32[HEAP32[$1 + 56 >> 2] + 8 >> 2], HEAP32[HEAP32[$1 + 56 >> 2] + 12 >> 2]);
     }
     HEAP32[$1 + 68 >> 2] = HEAP32[$1 + 68 >> 2] + 1;
     continue;
    }
    break;
   }
   if ((tflite__GreedyMemoryPlanner__GetMaximumMemorySize_28_29($1 + 72 | 0) | 0) > HEAP32[$1 + 112 >> 2]) {
    $0 = HEAP32[$2 + 16 >> 2];
    $2 = tflite__GreedyMemoryPlanner__GetMaximumMemorySize_28_29($1 + 72 | 0);
    HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 112 >> 2];
    HEAP32[$1 + 16 >> 2] = $2;
    tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 42226, $1 + 16 | 0);
    HEAP32[$1 + 220 >> 2] = 1;
    break label$33;
   }
   HEAP32[$1 + 36 >> 2] = 0;
   HEAP32[$1 + 32 >> 2] = 0;
   while (1) {
    if (HEAPU32[$1 + 32 >> 2] < flatbuffers__Vector_int___size_28_29_20const(HEAP32[$2 + 40 >> 2]) >>> 0) {
     HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 208 >> 2] + Math_imul(HEAP32[$1 + 32 >> 2], 20);
     if (HEAP8[HEAP32[$1 + 28 >> 2] + 16 | 0] & 1) {
      if (tflite__GreedyMemoryPlanner__GetOffsetForBuffer_28tflite__ErrorReporter__2c_20int_2c_20int__29($1 + 72 | 0, HEAP32[$2 + 16 >> 2], HEAP32[$1 + 36 >> 2], $1 + 24 | 0)) {
       HEAP32[$1 + 220 >> 2] = 1;
       break label$33;
      }
      HEAP32[HEAP32[HEAP32[$1 + 28 >> 2] + 4 >> 2] + 4 >> 2] = HEAP32[$1 + 120 >> 2] + HEAP32[$1 + 24 >> 2];
      HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 36 >> 2] + 1;
     }
     if (tflite__Tensor__is_variable_28_29_20const(HEAP32[HEAP32[$1 + 28 >> 2] >> 2]) & 1) {
      if (!HEAP32[HEAP32[HEAP32[$1 + 28 >> 2] + 4 >> 2] + 4 >> 2]) {
       tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$2 + 16 >> 2], 42311, 0);
       HEAP32[$1 + 220 >> 2] = 1;
       break label$33;
      }
      tflite__ResetVariableTensor_28TfLiteTensor__29(HEAP32[HEAP32[$1 + 28 >> 2] + 4 >> 2]);
     }
     HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 32 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$1 + 220 >> 2] = 0;
  }
  HEAP32[$1 + 44 >> 2] = 1;
  tflite__MicroMutableOpResolver___MicroMutableOpResolver_28_29($1 + 72 | 0);
 }
 global$0 = $1 + 224 | 0;
 return HEAP32[$1 + 220 >> 2];
}
function dlfree($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 label$1 : {
  label$2 : {
   if (!$0) {
    break label$2;
   }
   $3 = $0 + -8 | 0;
   $8 = HEAP32[63296];
   if ($3 >>> 0 < $8 >>> 0) {
    break label$1;
   }
   $2 = HEAP32[$0 + -4 >> 2];
   $1 = $2 & 3;
   if (($1 | 0) == 1) {
    break label$1;
   }
   $0 = $2 & -8;
   $6 = $3 + $0 | 0;
   label$3 : {
    if ($2 & 1) {
     break label$3;
    }
    if (!$1) {
     break label$2;
    }
    $1 = HEAP32[$3 >> 2];
    $3 = $3 - $1 | 0;
    if ($3 >>> 0 < $8 >>> 0) {
     break label$1;
    }
    $0 = $0 + $1 | 0;
    if (HEAP32[63297] != ($3 | 0)) {
     if ($1 >>> 0 <= 255) {
      $5 = HEAP32[$3 + 12 >> 2];
      $4 = HEAP32[$3 + 8 >> 2];
      $2 = $1 >>> 3;
      $1 = ($2 << 3) + 253208 | 0;
      if (HEAP32[$4 + 12 >> 2] != ($3 | 0) | $8 >>> 0 > $4 >>> 0 ? ($4 | 0) != ($1 | 0) : 0) {
       break label$1;
      }
      if (($4 | 0) == ($5 | 0)) {
       HEAP32[63292] = HEAP32[63292] & __wasm_rotl_i32($2);
       break label$3;
      }
      if (HEAP32[$5 + 8 >> 2] != ($3 | 0) | $8 >>> 0 > $5 >>> 0 ? ($1 | 0) != ($5 | 0) : 0) {
       break label$1;
      }
      HEAP32[$4 + 12 >> 2] = $5;
      HEAP32[$5 + 8 >> 2] = $4;
      break label$3;
     }
     $7 = HEAP32[$3 + 24 >> 2];
     $2 = HEAP32[$3 + 12 >> 2];
     label$9 : {
      if (($3 | 0) != ($2 | 0)) {
       $1 = HEAP32[$3 + 8 >> 2];
       if ($8 >>> 0 > $1 >>> 0 | HEAP32[$1 + 12 >> 2] != ($3 | 0) | HEAP32[$2 + 8 >> 2] != ($3 | 0)) {
        break label$1;
       }
       HEAP32[$1 + 12 >> 2] = $2;
       HEAP32[$2 + 8 >> 2] = $1;
       break label$9;
      }
      label$11 : {
       $1 = $3 + 20 | 0;
       $4 = HEAP32[$1 >> 2];
       if ($4) {
        break label$11;
       }
       $1 = $3 + 16 | 0;
       $4 = HEAP32[$1 >> 2];
       if ($4) {
        break label$11;
       }
       $2 = 0;
       break label$9;
      }
      while (1) {
       $5 = $1;
       $2 = $4;
       $1 = $2 + 20 | 0;
       $4 = HEAP32[$1 >> 2];
       if ($4) {
        continue;
       }
       $1 = $2 + 16 | 0;
       $4 = HEAP32[$2 + 16 >> 2];
       if ($4) {
        continue;
       }
       break;
      }
      if ($8 >>> 0 > $5 >>> 0) {
       break label$1;
      }
      HEAP32[$5 >> 2] = 0;
     }
     if (!$7) {
      break label$3;
     }
     $4 = HEAP32[$3 + 28 >> 2];
     $1 = ($4 << 2) + 253472 | 0;
     label$13 : {
      if (HEAP32[$1 >> 2] == ($3 | 0)) {
       HEAP32[$1 >> 2] = $2;
       if ($2) {
        break label$13;
       }
       HEAP32[63293] = HEAP32[63293] & __wasm_rotl_i32($4);
       break label$3;
      }
      if (HEAPU32[63296] > $7 >>> 0) {
       break label$1;
      }
      HEAP32[$7 + (HEAP32[$7 + 16 >> 2] == ($3 | 0) ? 16 : 20) >> 2] = $2;
      if (!$2) {
       break label$3;
      }
     }
     $1 = HEAP32[63296];
     if ($1 >>> 0 > $2 >>> 0) {
      break label$1;
     }
     HEAP32[$2 + 24 >> 2] = $7;
     $4 = HEAP32[$3 + 16 >> 2];
     if ($4) {
      if ($1 >>> 0 > $4 >>> 0) {
       break label$1;
      }
      HEAP32[$2 + 16 >> 2] = $4;
      HEAP32[$4 + 24 >> 2] = $2;
     }
     $1 = HEAP32[$3 + 20 >> 2];
     if (!$1) {
      break label$3;
     }
     if (HEAPU32[63296] > $1 >>> 0) {
      break label$1;
     }
     HEAP32[$2 + 20 >> 2] = $1;
     HEAP32[$1 + 24 >> 2] = $2;
     break label$3;
    }
    $1 = HEAP32[$6 + 4 >> 2];
    if (($1 & 3) != 3) {
     break label$3;
    }
    HEAP32[63294] = $0;
    HEAP32[$6 + 4 >> 2] = $1 & -2;
    HEAP32[$3 + 4 >> 2] = $0 | 1;
    HEAP32[$0 + $3 >> 2] = $0;
    return;
   }
   if ($6 >>> 0 <= $3 >>> 0) {
    break label$1;
   }
   $8 = HEAP32[$6 + 4 >> 2];
   if (!($8 & 1)) {
    break label$1;
   }
   label$16 : {
    if (!($8 & 2)) {
     if (HEAP32[63298] == ($6 | 0)) {
      HEAP32[63298] = $3;
      $0 = HEAP32[63295] + $0 | 0;
      HEAP32[63295] = $0;
      HEAP32[$3 + 4 >> 2] = $0 | 1;
      if (HEAP32[63297] != ($3 | 0)) {
       break label$2;
      }
      HEAP32[63294] = 0;
      HEAP32[63297] = 0;
      return;
     }
     if (HEAP32[63297] == ($6 | 0)) {
      HEAP32[63297] = $3;
      $0 = HEAP32[63294] + $0 | 0;
      HEAP32[63294] = $0;
      HEAP32[$3 + 4 >> 2] = $0 | 1;
      HEAP32[$0 + $3 >> 2] = $0;
      return;
     }
     label$20 : {
      if ($8 >>> 0 <= 255) {
       $5 = HEAP32[$6 + 12 >> 2];
       $4 = HEAP32[$6 + 8 >> 2];
       $2 = $8 >>> 3;
       $1 = ($2 << 3) + 253208 | 0;
       if (HEAP32[$4 + 12 >> 2] != ($6 | 0) | HEAPU32[63296] > $4 >>> 0 ? ($4 | 0) != ($1 | 0) : 0) {
        break label$1;
       }
       if (($4 | 0) == ($5 | 0)) {
        HEAP32[63292] = HEAP32[63292] & __wasm_rotl_i32($2);
        break label$20;
       }
       if (HEAP32[$5 + 8 >> 2] != ($6 | 0) | HEAPU32[63296] > $5 >>> 0 ? ($1 | 0) != ($5 | 0) : 0) {
        break label$1;
       }
       HEAP32[$4 + 12 >> 2] = $5;
       HEAP32[$5 + 8 >> 2] = $4;
       break label$20;
      }
      $7 = HEAP32[$6 + 24 >> 2];
      $2 = HEAP32[$6 + 12 >> 2];
      label$25 : {
       if (($6 | 0) != ($2 | 0)) {
        $1 = HEAP32[$6 + 8 >> 2];
        if (HEAPU32[63296] > $1 >>> 0 | HEAP32[$1 + 12 >> 2] != ($6 | 0) | HEAP32[$2 + 8 >> 2] != ($6 | 0)) {
         break label$1;
        }
        HEAP32[$1 + 12 >> 2] = $2;
        HEAP32[$2 + 8 >> 2] = $1;
        break label$25;
       }
       label$27 : {
        $1 = $6 + 20 | 0;
        $4 = HEAP32[$1 >> 2];
        if ($4) {
         break label$27;
        }
        $1 = $6 + 16 | 0;
        $4 = HEAP32[$1 >> 2];
        if ($4) {
         break label$27;
        }
        $2 = 0;
        break label$25;
       }
       while (1) {
        $5 = $1;
        $2 = $4;
        $1 = $2 + 20 | 0;
        $4 = HEAP32[$1 >> 2];
        if ($4) {
         continue;
        }
        $1 = $2 + 16 | 0;
        $4 = HEAP32[$2 + 16 >> 2];
        if ($4) {
         continue;
        }
        break;
       }
       if (HEAPU32[63296] > $5 >>> 0) {
        break label$1;
       }
       HEAP32[$5 >> 2] = 0;
      }
      if (!$7) {
       break label$20;
      }
      $4 = HEAP32[$6 + 28 >> 2];
      $1 = ($4 << 2) + 253472 | 0;
      label$29 : {
       if (HEAP32[$1 >> 2] == ($6 | 0)) {
        HEAP32[$1 >> 2] = $2;
        if ($2) {
         break label$29;
        }
        HEAP32[63293] = HEAP32[63293] & __wasm_rotl_i32($4);
        break label$20;
       }
       if (HEAPU32[63296] > $7 >>> 0) {
        break label$1;
       }
       HEAP32[$7 + (HEAP32[$7 + 16 >> 2] == ($6 | 0) ? 16 : 20) >> 2] = $2;
       if (!$2) {
        break label$20;
       }
      }
      $1 = HEAP32[63296];
      if ($1 >>> 0 > $2 >>> 0) {
       break label$1;
      }
      HEAP32[$2 + 24 >> 2] = $7;
      $4 = HEAP32[$6 + 16 >> 2];
      if ($4) {
       if ($1 >>> 0 > $4 >>> 0) {
        break label$1;
       }
       HEAP32[$2 + 16 >> 2] = $4;
       HEAP32[$4 + 24 >> 2] = $2;
      }
      $1 = HEAP32[$6 + 20 >> 2];
      if (!$1) {
       break label$20;
      }
      if (HEAPU32[63296] > $1 >>> 0) {
       break label$1;
      }
      HEAP32[$2 + 20 >> 2] = $1;
      HEAP32[$1 + 24 >> 2] = $2;
     }
     $0 = ($8 & -8) + $0 | 0;
     HEAP32[$3 + 4 >> 2] = $0 | 1;
     HEAP32[$0 + $3 >> 2] = $0;
     if (HEAP32[63297] != ($3 | 0)) {
      break label$16;
     }
     HEAP32[63294] = $0;
     return;
    }
    HEAP32[$6 + 4 >> 2] = $8 & -2;
    HEAP32[$3 + 4 >> 2] = $0 | 1;
    HEAP32[$0 + $3 >> 2] = $0;
   }
   if ($0 >>> 0 <= 255) {
    $1 = $0 >>> 3;
    $0 = ($1 << 3) + 253208 | 0;
    $2 = HEAP32[63292];
    $1 = 1 << $1;
    label$33 : {
     if (!($2 & $1)) {
      HEAP32[63292] = $1 | $2;
      $1 = $0;
      break label$33;
     }
     $1 = HEAP32[$0 + 8 >> 2];
     if (HEAPU32[63296] > $1 >>> 0) {
      break label$1;
     }
    }
    HEAP32[$0 + 8 >> 2] = $3;
    HEAP32[$1 + 12 >> 2] = $3;
    HEAP32[$3 + 12 >> 2] = $0;
    HEAP32[$3 + 8 >> 2] = $1;
    return;
   }
   HEAP32[$3 + 16 >> 2] = 0;
   HEAP32[$3 + 20 >> 2] = 0;
   $1 = $3;
   $4 = $0 >>> 8;
   $2 = 0;
   label$35 : {
    if (!$4) {
     break label$35;
    }
    $2 = 31;
    if ($0 >>> 0 > 16777215) {
     break label$35;
    }
    $2 = $4;
    $4 = $4 + 1048320 >>> 16 & 8;
    $2 = $2 << $4;
    $7 = $2 + 520192 >>> 16 & 4;
    $2 = $2 << $7;
    $5 = $2 + 245760 >>> 16 & 2;
    $2 = ($2 << $5 >>> 15) - ($5 | ($4 | $7)) | 0;
    $2 = ($2 << 1 | $0 >>> $2 + 21 & 1) + 28 | 0;
   }
   HEAP32[$1 + 28 >> 2] = $2;
   $5 = ($2 << 2) + 253472 | 0;
   $4 = HEAP32[63293];
   $1 = 1 << $2;
   label$36 : {
    if (!($4 & $1)) {
     HEAP32[63293] = $1 | $4;
     HEAP32[$5 >> 2] = $3;
     HEAP32[$3 + 12 >> 2] = $3;
     HEAP32[$3 + 24 >> 2] = $5;
     HEAP32[$3 + 8 >> 2] = $3;
     break label$36;
    }
    $1 = $0 << (($2 | 0) == 31 ? 0 : 25 - ($2 >>> 1) | 0);
    $2 = HEAP32[$5 >> 2];
    label$38 : {
     while (1) {
      $4 = $2;
      if ((HEAP32[$2 + 4 >> 2] & -8) == ($0 | 0)) {
       break label$38;
      }
      $2 = $1 >>> 29;
      $1 = $1 << 1;
      $5 = ($4 + ($2 & 4) | 0) + 16 | 0;
      $2 = HEAP32[$5 >> 2];
      if ($2) {
       continue;
      }
      break;
     }
     if (HEAPU32[63296] > $5 >>> 0) {
      break label$1;
     }
     HEAP32[$5 >> 2] = $3;
     HEAP32[$3 + 12 >> 2] = $3;
     HEAP32[$3 + 24 >> 2] = $4;
     HEAP32[$3 + 8 >> 2] = $3;
     break label$36;
    }
    $0 = HEAP32[63296];
    $1 = HEAP32[$4 + 8 >> 2];
    if ($0 >>> 0 > $1 >>> 0 | $0 >>> 0 > $4 >>> 0) {
     break label$1;
    }
    HEAP32[$1 + 12 >> 2] = $3;
    HEAP32[$4 + 8 >> 2] = $3;
    HEAP32[$3 + 24 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = $4;
    HEAP32[$3 + 8 >> 2] = $1;
   }
   $0 = HEAP32[63300] + -1 | 0;
   HEAP32[63300] = $0;
   if ($0) {
    break label$2;
   }
   $3 = 253624;
   while (1) {
    $0 = HEAP32[$3 >> 2];
    $3 = $0 + 8 | 0;
    if ($0) {
     continue;
    }
    break;
   }
   HEAP32[63300] = -1;
  }
  return;
 }
 abort();
 abort();
}
function __rem_pio2_large($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 $7 = global$0 - 560 | 0;
 global$0 = $7;
 $6 = $2;
 $2 = ($2 + -3 | 0) / 24 | 0;
 $18 = ($2 | 0) > 0 ? $2 : 0;
 $15 = $6 + Math_imul($18, -24) | 0;
 $13 = HEAP32[($4 << 2) + 50336 >> 2];
 $9 = $3 + -1 | 0;
 if (($13 + $9 | 0) >= 0) {
  $6 = $3 + $13 | 0;
  $2 = $18 - $9 | 0;
  while (1) {
   HEAPF64[($7 + 320 | 0) + ($8 << 3) >> 3] = ($2 | 0) < 0 ? 0 : +HEAP32[($2 << 2) + 50352 >> 2];
   $2 = $2 + 1 | 0;
   $8 = $8 + 1 | 0;
   if (($6 | 0) != ($8 | 0)) {
    continue;
   }
   break;
  }
 }
 $11 = $15 + -24 | 0;
 $6 = 0;
 $8 = ($3 | 0) < 1;
 while (1) {
  label$6 : {
   if ($8) {
    $5 = 0;
    break label$6;
   }
   $10 = $6 + $9 | 0;
   $2 = 0;
   $5 = 0;
   while (1) {
    $5 = $5 + HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($7 + 320 | 0) + ($10 - $2 << 3) >> 3];
    $2 = $2 + 1 | 0;
    if (($3 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
  }
  HEAPF64[($6 << 3) + $7 >> 3] = $5;
  $2 = ($6 | 0) < ($13 | 0);
  $6 = $6 + 1 | 0;
  if ($2) {
   continue;
  }
  break;
 }
 $23 = 23 - $11 | 0;
 $19 = 24 - $11 | 0;
 $6 = $13;
 label$9 : {
  while (1) {
   $5 = HEAPF64[($6 << 3) + $7 >> 3];
   $2 = 0;
   $8 = $6;
   $16 = ($6 | 0) < 1;
   if (!$16) {
    while (1) {
     $9 = ($7 + 480 | 0) + ($2 << 2) | 0;
     $12 = $5;
     $5 = $5 * 5.960464477539063e-8;
     label$14 : {
      if (Math_abs($5) < 2147483648) {
       $10 = ~~$5;
       break label$14;
      }
      $10 = -2147483648;
     }
     $5 = +($10 | 0);
     $12 = $12 + $5 * -16777216;
     label$13 : {
      if (Math_abs($12) < 2147483648) {
       $10 = ~~$12;
       break label$13;
      }
      $10 = -2147483648;
     }
     HEAP32[$9 >> 2] = $10;
     $8 = $8 + -1 | 0;
     $5 = HEAPF64[($8 << 3) + $7 >> 3] + $5;
     $2 = $2 + 1 | 0;
     if (($6 | 0) != ($2 | 0)) {
      continue;
     }
     break;
    }
   }
   $5 = scalbn($5, $11);
   $5 = $5 + Math_floor($5 * .125) * -8;
   label$17 : {
    if (Math_abs($5) < 2147483648) {
     $10 = ~~$5;
     break label$17;
    }
    $10 = -2147483648;
   }
   $5 = $5 - +($10 | 0);
   label$19 : {
    label$20 : {
     label$21 : {
      $20 = ($11 | 0) < 1;
      label$22 : {
       if (!$20) {
        $8 = ($6 << 2) + $7 | 0;
        $9 = HEAP32[$8 + 476 >> 2];
        $2 = $9 >> $19;
        $17 = $8;
        $8 = $9 - ($2 << $19) | 0;
        HEAP32[$17 + 476 >> 2] = $8;
        $10 = $2 + $10 | 0;
        $9 = $8 >> $23;
        break label$22;
       }
       if ($11) {
        break label$21;
       }
       $9 = HEAP32[(($6 << 2) + $7 | 0) + 476 >> 2] >> 23;
      }
      if (($9 | 0) < 1) {
       break label$19;
      }
      break label$20;
     }
     $9 = 2;
     if (!!($5 >= .5)) {
      break label$20;
     }
     $9 = 0;
     break label$19;
    }
    $2 = 0;
    $8 = 0;
    if (!$16) {
     while (1) {
      $21 = ($7 + 480 | 0) + ($2 << 2) | 0;
      $16 = HEAP32[$21 >> 2];
      $17 = 16777215;
      label$26 : {
       label$27 : {
        if (!$8) {
         if (!$16) {
          break label$27;
         }
         $17 = 16777216;
         $8 = 1;
        }
        HEAP32[$21 >> 2] = $17 - $16;
        break label$26;
       }
       $8 = 0;
      }
      $2 = $2 + 1 | 0;
      if (($6 | 0) != ($2 | 0)) {
       continue;
      }
      break;
     }
    }
    label$29 : {
     if ($20) {
      break label$29;
     }
     $2 = $11 + -1 | 0;
     if ($2 >>> 0 > 1) {
      break label$29;
     }
     if ($2 - 1) {
      $2 = ($6 << 2) + $7 | 0;
      HEAP32[$2 + 476 >> 2] = HEAP32[$2 + 476 >> 2] & 8388607;
      break label$29;
     }
     $2 = ($6 << 2) + $7 | 0;
     HEAP32[$2 + 476 >> 2] = HEAP32[$2 + 476 >> 2] & 4194303;
    }
    $10 = $10 + 1 | 0;
    if (($9 | 0) != 2) {
     break label$19;
    }
    $5 = 1 - $5;
    $9 = 2;
    if (!$8) {
     break label$19;
    }
    $5 = $5 - scalbn(1, $11);
   }
   if ($5 == 0) {
    $8 = 0;
    label$32 : {
     $2 = $6;
     if (($2 | 0) <= ($13 | 0)) {
      break label$32;
     }
     while (1) {
      $2 = $2 + -1 | 0;
      $8 = HEAP32[($7 + 480 | 0) + ($2 << 2) >> 2] | $8;
      if (($2 | 0) > ($13 | 0)) {
       continue;
      }
      break;
     }
     if (!$8) {
      break label$32;
     }
     $15 = $11;
     while (1) {
      $15 = $15 + -24 | 0;
      $6 = $6 + -1 | 0;
      if (!HEAP32[($7 + 480 | 0) + ($6 << 2) >> 2]) {
       continue;
      }
      break;
     }
     break label$9;
    }
    $2 = 1;
    while (1) {
     $8 = $2;
     $2 = $2 + 1 | 0;
     if (!HEAP32[($7 + 480 | 0) + ($13 - $8 << 2) >> 2]) {
      continue;
     }
     break;
    }
    $8 = $6 + $8 | 0;
    while (1) {
     $9 = $3 + $6 | 0;
     $6 = $6 + 1 | 0;
     HEAPF64[($7 + 320 | 0) + ($9 << 3) >> 3] = HEAP32[($18 + $6 << 2) + 50352 >> 2];
     $2 = 0;
     $5 = 0;
     if (($3 | 0) >= 1) {
      while (1) {
       $5 = $5 + HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($7 + 320 | 0) + ($9 - $2 << 3) >> 3];
       $2 = $2 + 1 | 0;
       if (($3 | 0) != ($2 | 0)) {
        continue;
       }
       break;
      }
     }
     HEAPF64[($6 << 3) + $7 >> 3] = $5;
     if (($6 | 0) < ($8 | 0)) {
      continue;
     }
     break;
    }
    $6 = $8;
    continue;
   }
   break;
  }
  $5 = scalbn($5, 0 - $11 | 0);
  label$39 : {
   if (!!($5 >= 16777216)) {
    $0 = ($7 + 480 | 0) + ($6 << 2) | 0;
    $12 = $5;
    $5 = $5 * 5.960464477539063e-8;
    label$42 : {
     if (Math_abs($5) < 2147483648) {
      $2 = ~~$5;
      break label$42;
     }
     $2 = -2147483648;
    }
    $5 = $12 + +($2 | 0) * -16777216;
    label$41 : {
     if (Math_abs($5) < 2147483648) {
      $3 = ~~$5;
      break label$41;
     }
     $3 = -2147483648;
    }
    HEAP32[$0 >> 2] = $3;
    $6 = $6 + 1 | 0;
    break label$39;
   }
   if (Math_abs($5) < 2147483648) {
    $2 = ~~$5;
   } else {
    $2 = -2147483648;
   }
   $15 = $11;
  }
  HEAP32[($7 + 480 | 0) + ($6 << 2) >> 2] = $2;
 }
 $5 = scalbn(1, $15);
 label$47 : {
  if (($6 | 0) <= -1) {
   break label$47;
  }
  $2 = $6;
  while (1) {
   HEAPF64[($2 << 3) + $7 >> 3] = $5 * +HEAP32[($7 + 480 | 0) + ($2 << 2) >> 2];
   $5 = $5 * 5.960464477539063e-8;
   $0 = ($2 | 0) > 0;
   $2 = $2 + -1 | 0;
   if ($0) {
    continue;
   }
   break;
  }
  if (($6 | 0) <= -1) {
   break label$47;
  }
  $2 = $6;
  while (1) {
   $0 = $2;
   $3 = $6 - $2 | 0;
   $5 = 0;
   $2 = 0;
   while (1) {
    $5 = $5 + HEAPF64[($2 << 3) + 53120 >> 3] * HEAPF64[($0 + $2 << 3) + $7 >> 3];
    label$51 : {
     if (($2 | 0) >= ($13 | 0)) {
      break label$51;
     }
     $11 = $2 >>> 0 < $3 >>> 0;
     $2 = $2 + 1 | 0;
     if ($11) {
      continue;
     }
    }
    break;
   }
   HEAPF64[($7 + 160 | 0) + ($3 << 3) >> 3] = $5;
   $2 = $0 + -1 | 0;
   if (($0 | 0) > 0) {
    continue;
   }
   break;
  }
 }
 label$52 : {
  if ($4 >>> 0 > 3) {
   break label$52;
  }
  label$53 : {
   label$54 : {
    switch ($4 - 1 | 0) {
    case 2:
     label$57 : {
      if (($6 | 0) < 1) {
       break label$57;
      }
      $5 = HEAPF64[($7 + 160 | 0) + ($6 << 3) >> 3];
      $2 = $6;
      while (1) {
       $0 = ($7 + 160 | 0) + ($2 << 3) | 0;
       $12 = $5;
       $2 = $2 + -1 | 0;
       $3 = ($7 + 160 | 0) + ($2 << 3) | 0;
       $22 = HEAPF64[$3 >> 3];
       $5 = $22 + $5;
       HEAPF64[$0 >> 3] = $12 + ($22 - $5);
       HEAPF64[$3 >> 3] = $5;
       if (($2 | 0) > 0) {
        continue;
       }
       break;
      }
      if (($6 | 0) < 2) {
       break label$57;
      }
      $5 = HEAPF64[($7 + 160 | 0) + ($6 << 3) >> 3];
      $2 = $6;
      while (1) {
       $0 = ($7 + 160 | 0) + ($2 << 3) | 0;
       $12 = $5;
       $2 = $2 + -1 | 0;
       $3 = ($7 + 160 | 0) + ($2 << 3) | 0;
       $14 = HEAPF64[$3 >> 3];
       $5 = $14 + $5;
       HEAPF64[$0 >> 3] = $12 + ($14 - $5);
       HEAPF64[$3 >> 3] = $5;
       if (($2 | 0) > 1) {
        continue;
       }
       break;
      }
      $14 = 0;
      if (($6 | 0) <= 1) {
       break label$57;
      }
      while (1) {
       $14 = $14 + HEAPF64[($7 + 160 | 0) + ($6 << 3) >> 3];
       $6 = $6 + -1 | 0;
       if (($6 | 0) > 1) {
        continue;
       }
       break;
      }
     }
     $5 = HEAPF64[$7 + 160 >> 3];
     if ($9) {
      break label$53;
     }
     HEAPF64[$1 >> 3] = $5;
     $0 = HEAP32[$7 + 172 >> 2];
     $2 = HEAP32[$7 + 168 >> 2];
     HEAPF64[$1 + 16 >> 3] = $14;
     HEAP32[$1 + 8 >> 2] = $2;
     HEAP32[$1 + 12 >> 2] = $0;
     break label$52;
    default:
     $5 = 0;
     if (($6 | 0) >= 0) {
      while (1) {
       $5 = $5 + HEAPF64[($7 + 160 | 0) + ($6 << 3) >> 3];
       $0 = ($6 | 0) > 0;
       $6 = $6 + -1 | 0;
       if ($0) {
        continue;
       }
       break;
      }
     }
     HEAPF64[$1 >> 3] = $9 ? -$5 : $5;
     break label$52;
    case 0:
    case 1:
     break label$54;
    }
   }
   $5 = 0;
   if (($6 | 0) >= 0) {
    $2 = $6;
    while (1) {
     $5 = $5 + HEAPF64[($7 + 160 | 0) + ($2 << 3) >> 3];
     $0 = ($2 | 0) > 0;
     $2 = $2 + -1 | 0;
     if ($0) {
      continue;
     }
     break;
    }
   }
   HEAPF64[$1 >> 3] = $9 ? -$5 : $5;
   $5 = HEAPF64[$7 + 160 >> 3] - $5;
   $2 = 1;
   if (($6 | 0) >= 1) {
    while (1) {
     $5 = $5 + HEAPF64[($7 + 160 | 0) + ($2 << 3) >> 3];
     $0 = ($2 | 0) != ($6 | 0);
     $2 = $2 + 1 | 0;
     if ($0) {
      continue;
     }
     break;
    }
   }
   HEAPF64[$1 + 8 >> 3] = $9 ? -$5 : $5;
   break label$52;
  }
  HEAPF64[$1 >> 3] = -$5;
  $5 = HEAPF64[$7 + 168 >> 3];
  HEAPF64[$1 + 16 >> 3] = -$14;
  HEAPF64[$1 + 8 >> 3] = -$5;
 }
 global$0 = $7 + 560 | 0;
 return $10 & 7;
}
function jspeStatementFor() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $0 = global$0 - 320 | 0;
 global$0 = $0;
 jslGetNextToken();
 label$1 : {
  if (!(jslMatch(40) & 1)) {
   break label$1;
  }
  HEAP8[$0 + 315 | 0] = (HEAP32[23778] & 512) != 0;
  HEAP32[23778] = HEAP32[23778] | 256;
  HEAP32[$0 + 308 >> 2] = 0;
  if (HEAP16[HEAP32[13768] + 2 >> 1] != 59) {
   HEAP32[$0 + 308 >> 2] = jspeStatement();
  }
  if (jspIsInterrupted() & 1) {
   jsvUnLock(HEAP32[$0 + 308 >> 2]);
   break label$1;
  }
  HEAP32[23778] = HEAP32[23778] & -257;
  label$4 : {
   if (!(HEAP16[HEAP32[13768] + 2 >> 1] != 198 ? HEAP16[HEAP32[13768] + 2 >> 1] != 185 : 0)) {
    HEAP8[$0 + 307 | 0] = HEAP16[HEAP32[13768] + 2 >> 1] == 198;
    label$7 : {
     if ((HEAP32[23778] & 63) != 1) {
      break label$7;
     }
     if (jsvIsName(HEAP32[$0 + 308 >> 2]) & 1) {
      break label$7;
     }
     jsvUnLock(HEAP32[$0 + 308 >> 2]);
     $1 = HEAP8[$0 + 307 | 0] & 1 ? 4828 : 4831;
     HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 308 >> 2];
     HEAP32[$0 + 16 >> 2] = $1;
     jsExceptionHere(1, 4778, $0 + 16 | 0);
     break label$1;
    }
    jslGetNextToken();
    HEAP32[$0 + 300 >> 2] = jsvSkipNameAndUnLock(jspeExpression());
    if (!(jslMatch(41) & 1)) {
     jsvUnLock2(HEAP32[$0 + 308 >> 2], HEAP32[$0 + 300 >> 2]);
     break label$1;
    }
    $1 = $0 + 240 | 0;
    jslCharPosClone($0 + 272 | 0, HEAP32[13768] + 4 | 0);
    HEAP32[$0 + 268 >> 2] = HEAP32[23778];
    jspSetNoExecute();
    HEAP32[23778] = HEAP32[23778] | 512;
    jsvUnLock(jspeBlockOrStatement());
    jslCharPosClone($1, HEAP32[13768] + 4 | 0);
    if (!(HEAP8[$0 + 315 | 0] & 1)) {
     HEAP32[23778] = HEAP32[23778] & -513;
    }
    HEAP32[23778] = HEAP32[23778] & -1664 | HEAP32[$0 + 268 >> 2] & 1663;
    if ((HEAP32[23778] & 63) == 1) {
     label$11 : {
      if (jsvIsIterable(HEAP32[$0 + 300 >> 2]) & 1) {
       HEAP32[$0 + 236 >> 2] = jsvGetInternalFunctionCheckerFor(HEAP32[$0 + 300 >> 2]);
       HEAP32[$0 + 232 >> 2] = 0;
       if (!(HEAP8[$0 + 307 | 0] & 1)) {
        HEAP32[$0 + 232 >> 2] = jspGetBuiltinPrototype(HEAP32[$0 + 300 >> 2]);
       }
       jsvIteratorNew($0 + 184 | 0, HEAP32[$0 + 300 >> 2], HEAP8[$0 + 307 | 0] & 1 ? 1 : 0);
       HEAP8[$0 + 183 | 0] = 0;
       while (1) {
        $1 = 0;
        label$15 : {
         if ((HEAP32[23778] & 63) != 1) {
          break label$15;
         }
         $2 = !(jsvIteratorHasElement($0 + 184 | 0) & 1);
         $1 = 0;
         if ($2) {
          break label$15;
         }
         $1 = HEAPU8[$0 + 183 | 0] ^ -1;
        }
        if ($1 & 1) {
         HEAP32[$0 + 176 >> 2] = jsvIteratorGetKey($0 + 184 | 0);
         HEAP8[$0 + 175 | 0] = 0;
         label$17 : {
          if (!HEAP32[$0 + 236 >> 2]) {
           break label$17;
          }
          if (!(FUNCTION_TABLE[HEAP32[$0 + 236 >> 2]](HEAP32[$0 + 176 >> 2]) & 1)) {
           break label$17;
          }
          HEAP8[$0 + 175 | 0] = 1;
          label$18 : {
           if (!(jsvIsString(HEAP32[$0 + 176 >> 2]) & 1)) {
            break label$18;
           }
           if (!(jsvIsStringEqual(HEAP32[$0 + 176 >> 2], 3684) & 1)) {
            break label$18;
           }
           HEAP32[$0 + 232 >> 2] = jsvSkipName(HEAP32[$0 + 176 >> 2]);
          }
         }
         if (!(HEAP8[$0 + 175 | 0] & 1)) {
          label$20 : {
           if (HEAP8[$0 + 307 | 0] & 1) {
            HEAP32[$0 + 168 >> 2] = jsvIteratorGetValue($0 + 184 | 0);
            break label$20;
           }
           $1 = $0;
           label$22 : {
            if (jsvIsName(HEAP32[$0 + 176 >> 2]) & 1) {
             $2 = jsvCopyNameOnly(HEAP32[$0 + 176 >> 2], 0, 0);
             break label$22;
            }
            $2 = HEAP32[$0 + 176 >> 2];
           }
           HEAP32[$1 + 168 >> 2] = $2;
          }
          if (!(HEAP32[$0 + 168 >> 2] ? 0 : !(HEAP8[$0 + 307 | 0] & 1))) {
           jsvReplaceWithOrAddToRoot(HEAP32[$0 + 308 >> 2], HEAP32[$0 + 168 >> 2]);
           if (HEAP32[$0 + 168 >> 2] != HEAP32[$0 + 176 >> 2]) {
            jsvUnLock(HEAP32[$0 + 168 >> 2]);
           }
           jslSeekToP($0 + 272 | 0);
           HEAP32[23778] = HEAP32[23778] | 512;
           jspDebuggerLoopIfCtrlC();
           jsvUnLock(jspeBlockOrStatement());
           if (!(HEAP8[$0 + 315 | 0] & 1)) {
            HEAP32[23778] = HEAP32[23778] & -513;
           }
           label$28 : {
            if (HEAP32[23778] & 4) {
             HEAP32[23778] = 1;
             break label$28;
            }
            if (HEAP32[23778] & 2) {
             HEAP32[23778] = 1;
             HEAP8[$0 + 183 | 0] = 1;
            }
           }
          }
         }
         $1 = $0 + 184 | 0;
         jsvIteratorNext($1);
         jsvUnLock(HEAP32[$0 + 176 >> 2]);
         if (!(jsvIteratorHasElement($1) & 1 | HEAP8[$0 + 307 | 0] & 1 | !HEAP32[$0 + 232 >> 2])) {
          $1 = $0 + 184 | 0;
          jsvIteratorFree($1);
          HEAP32[$0 + 164 >> 2] = HEAP32[$0 + 232 >> 2];
          jsvIteratorNew($1, HEAP32[$0 + 164 >> 2], 0);
          HEAP32[$0 + 236 >> 2] = jsvGetInternalFunctionCheckerFor(HEAP32[$0 + 164 >> 2]);
          HEAP32[$0 + 232 >> 2] = jspGetBuiltinPrototype(HEAP32[$0 + 164 >> 2]);
          jsvUnLock(HEAP32[$0 + 164 >> 2]);
         }
         continue;
        }
        break;
       }
       jsvIteratorFree($0 + 184 | 0);
       break label$11;
      }
      if (!(jsvIsUndefined(HEAP32[$0 + 300 >> 2]) & 1)) {
       HEAP32[$0 >> 2] = HEAP32[$0 + 300 >> 2];
       jsExceptionHere(1, 4834, $0);
      }
     }
    }
    $1 = $0 + 272 | 0;
    $2 = $0 + 240 | 0;
    jslSeekToP($2);
    jslCharPosFree($1);
    jslCharPosFree($2);
    jsvUnLock2(HEAP32[$0 + 308 >> 2], HEAP32[$0 + 300 >> 2]);
    break label$4;
   }
   HEAP8[$0 + 163 | 0] = 1;
   HEAP8[$0 + 162 | 0] = 0;
   jsvUnLock(HEAP32[$0 + 308 >> 2]);
   if (!(jslMatch(59) & 1)) {
    break label$1;
   }
   jslCharPosClone($0 + 136 | 0, HEAP32[13768] + 4 | 0);
   if (HEAP16[HEAP32[13768] + 2 >> 1] != 59) {
    HEAP32[$0 + 132 >> 2] = __jspeAssignmentExpression(jspeConditionalExpression());
    $1 = $0;
    if ((HEAP32[23778] & 63) == 1) {
     $2 = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$0 + 132 >> 2]));
    } else {
     $2 = 0;
    }
    HEAP8[$1 + 163 | 0] = $2 & 1;
    jsvUnLock(HEAP32[$0 + 132 >> 2]);
   }
   if (!(jslMatch(59) & 1)) {
    jslCharPosFree($0 + 136 | 0);
    break label$1;
   }
   jslCharPosClone($0 + 104 | 0, HEAP32[13768] + 4 | 0);
   if (HEAP16[HEAP32[13768] + 2 >> 1] != 41) {
    HEAP32[$0 + 100 >> 2] = HEAP32[23778];
    jspSetNoExecute();
    jsvUnLock(jspeExpression());
    HEAP32[23778] = HEAP32[23778] & -1664 | HEAP32[$0 + 100 >> 2] & 1663;
   }
   if (!(jslMatch(41) & 1)) {
    $1 = $0 + 104 | 0;
    jslCharPosFree($0 + 136 | 0);
    jslCharPosFree($1);
    break label$1;
   }
   jslCharPosClone($0 + 72 | 0, HEAP32[13768] + 4 | 0);
   HEAP32[$0 + 68 >> 2] = HEAP32[23778];
   if (!(HEAP8[$0 + 163 | 0] & 1)) {
    jspSetNoExecute();
   }
   $1 = $0 + 40 | 0;
   HEAP32[23778] = HEAP32[23778] | 512;
   jsvUnLock(jspeBlockOrStatement());
   jslCharPosClone($1, HEAP32[13768] + 4 | 0);
   if (!(HEAP8[$0 + 315 | 0] & 1)) {
    HEAP32[23778] = HEAP32[23778] & -513;
   }
   if (!((HEAP32[23778] & 63) == 1 ? !(HEAP8[$0 + 163 | 0] & 1) : 0)) {
    label$43 : {
     if (HEAP32[23778] & 4) {
      HEAP32[23778] = 1;
      break label$43;
     }
     if (HEAP32[23778] & 2) {
      HEAP32[23778] = 1;
      HEAP8[$0 + 162 | 0] = 1;
     }
    }
   }
   if (!(HEAP8[$0 + 163 | 0] & 1)) {
    HEAP32[23778] = HEAP32[23778] & -1664 | HEAP32[$0 + 68 >> 2] & 1663;
   }
   if (HEAP8[$0 + 163 | 0] & 1) {
    jslSeekToP($0 + 104 | 0);
    if (HEAP16[HEAP32[13768] + 2 >> 1] != 41) {
     jsvUnLock(jspeExpression());
    }
   }
   while (1) {
    $1 = 0;
    label$50 : {
     if (HEAP8[$0 + 162 | 0] & 1) {
      break label$50;
     }
     $1 = 0;
     if ((HEAP32[23778] & 63) != 1) {
      break label$50;
     }
     $1 = HEAPU8[$0 + 163 | 0];
    }
    if ($1 & 1) {
     jslSeekToP($0 + 136 | 0);
     label$52 : {
      if (HEAP16[HEAP32[13768] + 2 >> 1] == 59) {
       HEAP8[$0 + 163 | 0] = 1;
       break label$52;
      }
      HEAP32[$0 + 36 >> 2] = __jspeAssignmentExpression(jspeConditionalExpression());
      HEAP8[$0 + 163 | 0] = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$0 + 36 >> 2])) & 1;
      jsvUnLock(HEAP32[$0 + 36 >> 2]);
     }
     if (!(!(HEAP8[$0 + 163 | 0] & 1) | (HEAP32[23778] & 63) != 1)) {
      jslSeekToP($0 + 72 | 0);
      HEAP32[23778] = HEAP32[23778] | 512;
      jspDebuggerLoopIfCtrlC();
      jsvUnLock(jspeBlockOrStatement());
      if (!(HEAP8[$0 + 315 | 0] & 1)) {
       HEAP32[23778] = HEAP32[23778] & -513;
      }
      label$56 : {
       if (HEAP32[23778] & 4) {
        HEAP32[23778] = 1;
        break label$56;
       }
       if (HEAP32[23778] & 2) {
        HEAP32[23778] = 1;
        HEAP8[$0 + 162 | 0] = 1;
       }
      }
     }
     if (!(HEAP8[$0 + 162 | 0] & 1 | (!(HEAP8[$0 + 163 | 0] & 1) | (HEAP32[23778] & 63) != 1))) {
      jslSeekToP($0 + 104 | 0);
      if (HEAP16[HEAP32[13768] + 2 >> 1] != 41) {
       jsvUnLock(jspeExpression());
      }
     }
     continue;
    }
    break;
   }
   $1 = $0 + 72 | 0;
   $2 = $0 + 104 | 0;
   $4 = $0 + 136 | 0;
   $3 = $0 + 40 | 0;
   jslSeekToP($3);
   jslCharPosFree($4);
   jslCharPosFree($2);
   jslCharPosFree($1);
   jslCharPosFree($3);
  }
 }
 HEAP32[$0 + 316 >> 2] = 0;
 global$0 = $0 + 320 | 0;
 return HEAP32[$0 + 316 >> 2];
}
function jswrap_graphics_drawImages($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 832 | 0;
 global$0 = $3;
 HEAP32[$3 + 824 >> 2] = $0;
 HEAP32[$3 + 820 >> 2] = $1;
 HEAP32[$3 + 816 >> 2] = $2;
 HEAP32[$3 + 812 >> 2] = 4;
 label$1 : {
  if (!(graphicsGetFromVar($3 + 744 | 0, HEAP32[$3 + 824 >> 2]) & 1)) {
   HEAP32[$3 + 828 >> 2] = 0;
   break label$1;
  }
  label$3 : {
   if (jsvIsArray(HEAP32[$3 + 820 >> 2]) & 1) {
    $0 = jsvGetArrayLength(HEAP32[$3 + 820 >> 2]);
    HEAP32[$3 + 152 >> 2] = $0;
    if (($0 | 0) <= 4) {
     break label$3;
    }
   }
   HEAP32[$3 + 32 >> 2] = 4;
   jsExceptionHere(3, 39127, $3 + 32 | 0);
   HEAP32[$3 + 828 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 148 >> 2] = 1e4;
  HEAP32[$3 + 144 >> 2] = 1e4;
  HEAP32[$3 + 140 >> 2] = 1e4;
  HEAP32[$3 + 136 >> 2] = 1e4;
  HEAP8[$3 + 135 | 0] = 1;
  HEAP32[$3 + 156 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 156 >> 2] < HEAP32[$3 + 152 >> 2]) {
    HEAP32[$3 + 128 >> 2] = jsvGetArrayItem(HEAP32[$3 + 820 >> 2], HEAP32[$3 + 156 >> 2]);
    label$7 : {
     if (jsvIsObject(HEAP32[$3 + 128 >> 2]) & 1) {
      $0 = $3 + 744 | 0;
      $1 = $3 + 160 | 0;
      HEAP32[$3 + 124 >> 2] = jsvObjectGetChild(HEAP32[$3 + 128 >> 2], 39179, 0);
      label$9 : {
       if (_jswrap_graphics_parseImage($0, HEAP32[$3 + 124 >> 2], ($1 + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0) + 36 | 0) & 1) {
        $0 = $3 + 160 | 0;
        $1 = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$3 + 128 >> 2], 39185, 0));
        HEAP32[$0 + Math_imul(HEAP32[$3 + 156 >> 2], 144) >> 2] = $1;
        $1 = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$3 + 128 >> 2], 39187, 0));
        HEAP32[($0 + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0) + 4 >> 2] = $1;
        $4 = jsvGetFloatAndUnLock(jsvObjectGetChild(HEAP32[$3 + 128 >> 2], 39114, 0));
        HEAPF64[($0 + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0) + 24 >> 3] = $4;
        $0 = __DOUBLE_BITS(HEAPF64[(($3 + 160 | 0) + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0) + 24 >> 3]);
        $1 = i64toi32_i32$HIGH_BITS & 2147483647;
        if (!(HEAPF64[(($3 + 160 | 0) + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0) + 24 >> 3] <= 0 ? 0 : !(($1 | 0) == 2146435072 & $0 >>> 0 >= 0 | $1 >>> 0 > 2146435072))) {
         HEAPF64[(($3 + 160 | 0) + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0) + 24 >> 3] = 1;
        }
        $0 = $3 + 160 | 0;
        $4 = jsvGetFloatAndUnLock(jsvObjectGetChild(HEAP32[$3 + 128 >> 2], 39120, 0));
        HEAPF64[($0 + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0) + 16 >> 3] = $4;
        $0 = __DOUBLE_BITS(HEAPF64[(($3 + 160 | 0) + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0) + 16 >> 3]);
        $1 = i64toi32_i32$HIGH_BITS & 2147483647;
        if (($1 | 0) == 2146435072 & $0 >>> 0 >= 0 | $1 >>> 0 > 2146435072) {
         HEAPF64[(($3 + 160 | 0) + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0) + 16 >> 3] = 0;
        }
        $0 = $3 + 160 | 0;
        $1 = jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$3 + 128 >> 2], 39189, 0));
        HEAP8[($0 + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0) + 32 | 0] = $1 & 1;
        $1 = jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$3 + 128 >> 2], 39196, 0));
        HEAP8[($0 + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0) + 33 | 0] = $1 & 1;
        _jswrap_drawImageLayerInit($0 + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0);
        if (!(jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$3 + 128 >> 2], 39203, 0)) & 1)) {
         if (HEAP32[($3 + 160 | 0) + Math_imul(HEAP32[$3 + 156 >> 2], 144) >> 2] < HEAP32[$3 + 148 >> 2]) {
          HEAP32[$3 + 148 >> 2] = HEAP32[($3 + 160 | 0) + Math_imul(HEAP32[$3 + 156 >> 2], 144) >> 2];
         }
         if (HEAP32[(($3 + 160 | 0) + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0) + 4 >> 2] < HEAP32[$3 + 144 >> 2]) {
          HEAP32[$3 + 144 >> 2] = HEAP32[(($3 + 160 | 0) + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0) + 4 >> 2];
         }
         if (HEAP32[(($3 + 160 | 0) + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0) + 8 >> 2] > (HEAP32[$3 + 148 >> 2] + HEAP32[$3 + 140 >> 2] | 0)) {
          HEAP32[$3 + 140 >> 2] = HEAP32[(($3 + 160 | 0) + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0) + 8 >> 2] - HEAP32[$3 + 148 >> 2];
         }
         if (HEAP32[(($3 + 160 | 0) + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0) + 12 >> 2] > (HEAP32[$3 + 144 >> 2] + HEAP32[$3 + 136 >> 2] | 0)) {
          HEAP32[$3 + 136 >> 2] = HEAP32[(($3 + 160 | 0) + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0) + 12 >> 2] - HEAP32[$3 + 144 >> 2];
         }
        }
        break label$9;
       }
       HEAP8[$3 + 135 | 0] = 0;
      }
      jsvUnLock(HEAP32[$3 + 124 >> 2]);
      break label$7;
     }
     HEAP8[$3 + 135 | 0] = 0;
    }
    jsvUnLock(HEAP32[$3 + 128 >> 2]);
    HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 156 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$3 + 64 >> 2] = 39185;
  HEAP16[$3 + 68 >> 1] = 9;
  HEAP32[$3 + 72 >> 2] = $3 + 148;
  HEAP32[$3 + 76 >> 2] = 39187;
  HEAP16[$3 + 80 >> 1] = 9;
  HEAP32[$3 + 84 >> 2] = $3 + 144;
  HEAP32[$3 + 88 >> 2] = 38802;
  HEAP16[$3 + 92 >> 1] = 9;
  HEAP32[$3 + 96 >> 2] = $3 + 140;
  HEAP32[$3 + 100 >> 2] = 38808;
  HEAP16[$3 + 104 >> 1] = 9;
  HEAP32[$3 + 108 >> 2] = $3 + 136;
  if (!(jsvReadConfigObject(HEAP32[$3 + 816 >> 2], $3 - -64 | 0, 4) & 1)) {
   HEAP8[$3 + 135 | 0] = 0;
  }
  if (HEAP32[$3 + 148 >> 2] < 0) {
   HEAP32[$3 + 140 >> 2] = HEAP32[$3 + 148 >> 2] + HEAP32[$3 + 140 >> 2];
   HEAP32[$3 + 148 >> 2] = 0;
  }
  if (HEAP32[$3 + 144 >> 2] < 0) {
   HEAP32[$3 + 136 >> 2] = HEAP32[$3 + 144 >> 2] + HEAP32[$3 + 136 >> 2];
   HEAP32[$3 + 144 >> 2] = 0;
  }
  if ((HEAP32[$3 + 148 >> 2] + HEAP32[$3 + 140 >> 2] | 0) > (graphicsGetWidth($3 + 744 | 0) & 65535)) {
   HEAP32[$3 + 140 >> 2] = (graphicsGetWidth($3 + 744 | 0) & 65535) - HEAP32[$3 + 148 >> 2];
  }
  if ((HEAP32[$3 + 144 >> 2] + HEAP32[$3 + 136 >> 2] | 0) > (graphicsGetHeight($3 + 744 | 0) & 65535)) {
   HEAP32[$3 + 136 >> 2] = (graphicsGetHeight($3 + 744 | 0) & 65535) - HEAP32[$3 + 144 >> 2];
  }
  if (HEAP8[$3 + 135 | 0] & 1) {
   HEAP32[$3 + 156 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 156 >> 2] < HEAP32[$3 + 152 >> 2]) {
     $0 = $3 + 160 | 0;
     jsvStringIteratorNew(($0 + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0) + 92 | 0, HEAP32[($0 + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0) + 56 >> 2], HEAP32[($0 + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0) + 60 >> 2]);
     _jswrap_drawImageLayerSetStart($0 + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0, HEAP32[$3 + 148 >> 2], HEAP32[$3 + 144 >> 2]);
     HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 156 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$3 + 60 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 60 >> 2] < HEAP32[$3 + 136 >> 2]) {
     HEAP32[$3 + 156 >> 2] = 0;
     while (1) {
      if (HEAP32[$3 + 156 >> 2] < HEAP32[$3 + 152 >> 2]) {
       _jswrap_drawImageLayerStartX(($3 + 160 | 0) + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0);
       HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 156 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$3 + 56 >> 2] = 0;
     while (1) {
      if (HEAP32[$3 + 56 >> 2] < HEAP32[$3 + 140 >> 2]) {
       HEAP8[$3 + 55 | 0] = 0;
       HEAP32[$3 + 48 >> 2] = 0;
       HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 152 >> 2] - 1;
       while (1) {
        if (HEAP32[$3 + 156 >> 2] >= 0) {
         if (_jswrap_drawImageLayerGetPixel(($3 + 160 | 0) + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0, $3 + 48 | 0) & 1) {
          HEAP8[$3 + 55 | 0] = 1;
         } else {
          HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 156 >> 2] + -1;
          continue;
         }
        }
        break;
       }
       if (HEAP8[$3 + 55 | 0] & 1) {
        graphicsSetPixel($3 + 744 | 0, HEAP32[$3 + 56 >> 2] + HEAP32[$3 + 148 >> 2] | 0, HEAP32[$3 + 60 >> 2] + HEAP32[$3 + 144 >> 2] | 0, HEAP32[$3 + 48 >> 2]);
       }
       HEAP32[$3 + 156 >> 2] = 0;
       while (1) {
        if (HEAP32[$3 + 156 >> 2] < HEAP32[$3 + 152 >> 2]) {
         $0 = $3 + 160 | 0;
         _jswrap_drawImageLayerNextX($0 + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0);
         _jswrap_drawImageLayerNextXRepeat($0 + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0);
         HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 156 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$3 + 56 >> 2] = HEAP32[$3 + 56 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$3 + 156 >> 2] = 0;
     while (1) {
      if (HEAP32[$3 + 156 >> 2] < HEAP32[$3 + 152 >> 2]) {
       _jswrap_drawImageLayerNextY(($3 + 160 | 0) + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0);
       HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 156 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$3 + 60 >> 2] = HEAP32[$3 + 60 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$3 + 156 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 156 >> 2] < HEAP32[$3 + 152 >> 2]) {
     jsvStringIteratorFree((Math_imul(HEAP32[$3 + 156 >> 2], 144) + $3 | 0) + 252 | 0);
     HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 156 >> 2] + 1;
     continue;
    }
    break;
   }
  }
  HEAP32[$3 + 156 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 156 >> 2] < HEAP32[$3 + 152 >> 2]) {
    jsvUnLock(HEAP32[(($3 + 160 | 0) + Math_imul(HEAP32[$3 + 156 >> 2], 144) | 0) + 56 >> 2]);
    HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 156 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$3 + 828 >> 2] = jsvLockAgain(HEAP32[$3 + 824 >> 2]);
 }
 global$0 = $3 + 832 | 0;
 return HEAP32[$3 + 828 >> 2];
}
function dispose_chunk($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $5 = $0 + $1 | 0;
 label$1 : {
  label$2 : {
   label$3 : {
    $2 = HEAP32[$0 + 4 >> 2];
    if ($2 & 1) {
     break label$3;
    }
    if (!($2 & 3)) {
     break label$2;
    }
    $4 = HEAP32[$0 >> 2];
    $0 = $0 - $4 | 0;
    $7 = HEAP32[63296];
    if ($0 >>> 0 < $7 >>> 0) {
     break label$1;
    }
    $1 = $1 + $4 | 0;
    if (HEAP32[63297] != ($0 | 0)) {
     if ($4 >>> 0 <= 255) {
      $2 = HEAP32[$0 + 12 >> 2];
      $3 = HEAP32[$0 + 8 >> 2];
      $4 = $4 >>> 3;
      $6 = ($4 << 3) + 253208 | 0;
      if (HEAP32[$3 + 12 >> 2] != ($0 | 0) | $7 >>> 0 > $3 >>> 0 ? ($3 | 0) != ($6 | 0) : 0) {
       break label$1;
      }
      if (($2 | 0) == ($3 | 0)) {
       HEAP32[63292] = HEAP32[63292] & __wasm_rotl_i32($4);
       break label$3;
      }
      if (HEAP32[$2 + 8 >> 2] != ($0 | 0) | $7 >>> 0 > $2 >>> 0 ? ($2 | 0) != ($6 | 0) : 0) {
       break label$1;
      }
      HEAP32[$3 + 12 >> 2] = $2;
      HEAP32[$2 + 8 >> 2] = $3;
      break label$3;
     }
     $8 = HEAP32[$0 + 24 >> 2];
     $2 = HEAP32[$0 + 12 >> 2];
     label$9 : {
      if (($2 | 0) != ($0 | 0)) {
       $3 = HEAP32[$0 + 8 >> 2];
       if ($7 >>> 0 > $3 >>> 0 | HEAP32[$3 + 12 >> 2] != ($0 | 0) | HEAP32[$2 + 8 >> 2] != ($0 | 0)) {
        break label$1;
       }
       HEAP32[$3 + 12 >> 2] = $2;
       HEAP32[$2 + 8 >> 2] = $3;
       break label$9;
      }
      label$11 : {
       $3 = $0 + 20 | 0;
       $4 = HEAP32[$3 >> 2];
       if ($4) {
        break label$11;
       }
       $3 = $0 + 16 | 0;
       $4 = HEAP32[$3 >> 2];
       if ($4) {
        break label$11;
       }
       $2 = 0;
       break label$9;
      }
      while (1) {
       $6 = $3;
       $2 = $4;
       $3 = $2 + 20 | 0;
       $4 = HEAP32[$3 >> 2];
       if ($4) {
        continue;
       }
       $3 = $2 + 16 | 0;
       $4 = HEAP32[$2 + 16 >> 2];
       if ($4) {
        continue;
       }
       break;
      }
      if ($7 >>> 0 > $6 >>> 0) {
       break label$1;
      }
      HEAP32[$6 >> 2] = 0;
     }
     if (!$8) {
      break label$3;
     }
     $3 = HEAP32[$0 + 28 >> 2];
     $4 = ($3 << 2) + 253472 | 0;
     label$13 : {
      if (HEAP32[$4 >> 2] == ($0 | 0)) {
       HEAP32[$4 >> 2] = $2;
       if ($2) {
        break label$13;
       }
       HEAP32[63293] = HEAP32[63293] & __wasm_rotl_i32($3);
       break label$3;
      }
      if (HEAPU32[63296] > $8 >>> 0) {
       break label$1;
      }
      HEAP32[$8 + (HEAP32[$8 + 16 >> 2] == ($0 | 0) ? 16 : 20) >> 2] = $2;
      if (!$2) {
       break label$3;
      }
     }
     $4 = HEAP32[63296];
     if ($4 >>> 0 > $2 >>> 0) {
      break label$1;
     }
     HEAP32[$2 + 24 >> 2] = $8;
     $3 = HEAP32[$0 + 16 >> 2];
     if ($3) {
      if ($4 >>> 0 > $3 >>> 0) {
       break label$1;
      }
      HEAP32[$2 + 16 >> 2] = $3;
      HEAP32[$3 + 24 >> 2] = $2;
     }
     $3 = HEAP32[$0 + 20 >> 2];
     if (!$3) {
      break label$3;
     }
     if (HEAPU32[63296] > $3 >>> 0) {
      break label$1;
     }
     HEAP32[$2 + 20 >> 2] = $3;
     HEAP32[$3 + 24 >> 2] = $2;
     break label$3;
    }
    $2 = HEAP32[$5 + 4 >> 2];
    if (($2 & 3) != 3) {
     break label$3;
    }
    HEAP32[63294] = $1;
    HEAP32[$5 + 4 >> 2] = $2 & -2;
    HEAP32[$0 + 4 >> 2] = $1 | 1;
    HEAP32[$5 >> 2] = $1;
    return;
   }
   $7 = HEAP32[63296];
   if ($5 >>> 0 < $7 >>> 0) {
    break label$1;
   }
   $9 = HEAP32[$5 + 4 >> 2];
   label$16 : {
    if (!($9 & 2)) {
     if (HEAP32[63298] == ($5 | 0)) {
      HEAP32[63298] = $0;
      $1 = HEAP32[63295] + $1 | 0;
      HEAP32[63295] = $1;
      HEAP32[$0 + 4 >> 2] = $1 | 1;
      if (HEAP32[63297] != ($0 | 0)) {
       break label$2;
      }
      HEAP32[63294] = 0;
      HEAP32[63297] = 0;
      return;
     }
     if (HEAP32[63297] == ($5 | 0)) {
      HEAP32[63297] = $0;
      $1 = HEAP32[63294] + $1 | 0;
      HEAP32[63294] = $1;
      HEAP32[$0 + 4 >> 2] = $1 | 1;
      HEAP32[$0 + $1 >> 2] = $1;
      return;
     }
     label$20 : {
      if ($9 >>> 0 <= 255) {
       $2 = HEAP32[$5 + 12 >> 2];
       $3 = HEAP32[$5 + 8 >> 2];
       $4 = $9 >>> 3;
       $6 = ($4 << 3) + 253208 | 0;
       if (HEAP32[$3 + 12 >> 2] != ($5 | 0) | $7 >>> 0 > $3 >>> 0 ? ($3 | 0) != ($6 | 0) : 0) {
        break label$1;
       }
       if (($2 | 0) == ($3 | 0)) {
        HEAP32[63292] = HEAP32[63292] & __wasm_rotl_i32($4);
        break label$20;
       }
       if (HEAP32[$2 + 8 >> 2] != ($5 | 0) | $7 >>> 0 > $2 >>> 0 ? ($2 | 0) != ($6 | 0) : 0) {
        break label$1;
       }
       HEAP32[$3 + 12 >> 2] = $2;
       HEAP32[$2 + 8 >> 2] = $3;
       break label$20;
      }
      $8 = HEAP32[$5 + 24 >> 2];
      $2 = HEAP32[$5 + 12 >> 2];
      label$25 : {
       if (($5 | 0) != ($2 | 0)) {
        $3 = HEAP32[$5 + 8 >> 2];
        if ($7 >>> 0 > $3 >>> 0 | HEAP32[$3 + 12 >> 2] != ($5 | 0) | HEAP32[$2 + 8 >> 2] != ($5 | 0)) {
         break label$1;
        }
        HEAP32[$3 + 12 >> 2] = $2;
        HEAP32[$2 + 8 >> 2] = $3;
        break label$25;
       }
       label$27 : {
        $3 = $5 + 20 | 0;
        $4 = HEAP32[$3 >> 2];
        if ($4) {
         break label$27;
        }
        $3 = $5 + 16 | 0;
        $4 = HEAP32[$3 >> 2];
        if ($4) {
         break label$27;
        }
        $2 = 0;
        break label$25;
       }
       while (1) {
        $6 = $3;
        $2 = $4;
        $3 = $2 + 20 | 0;
        $4 = HEAP32[$3 >> 2];
        if ($4) {
         continue;
        }
        $3 = $2 + 16 | 0;
        $4 = HEAP32[$2 + 16 >> 2];
        if ($4) {
         continue;
        }
        break;
       }
       if ($7 >>> 0 > $6 >>> 0) {
        break label$1;
       }
       HEAP32[$6 >> 2] = 0;
      }
      if (!$8) {
       break label$20;
      }
      $3 = HEAP32[$5 + 28 >> 2];
      $4 = ($3 << 2) + 253472 | 0;
      label$29 : {
       if (HEAP32[$4 >> 2] == ($5 | 0)) {
        HEAP32[$4 >> 2] = $2;
        if ($2) {
         break label$29;
        }
        HEAP32[63293] = HEAP32[63293] & __wasm_rotl_i32($3);
        break label$20;
       }
       if (HEAPU32[63296] > $8 >>> 0) {
        break label$1;
       }
       HEAP32[$8 + (HEAP32[$8 + 16 >> 2] == ($5 | 0) ? 16 : 20) >> 2] = $2;
       if (!$2) {
        break label$20;
       }
      }
      $4 = HEAP32[63296];
      if ($4 >>> 0 > $2 >>> 0) {
       break label$1;
      }
      HEAP32[$2 + 24 >> 2] = $8;
      $3 = HEAP32[$5 + 16 >> 2];
      if ($3) {
       if ($4 >>> 0 > $3 >>> 0) {
        break label$1;
       }
       HEAP32[$2 + 16 >> 2] = $3;
       HEAP32[$3 + 24 >> 2] = $2;
      }
      $3 = HEAP32[$5 + 20 >> 2];
      if (!$3) {
       break label$20;
      }
      if (HEAPU32[63296] > $3 >>> 0) {
       break label$1;
      }
      HEAP32[$2 + 20 >> 2] = $3;
      HEAP32[$3 + 24 >> 2] = $2;
     }
     $1 = ($9 & -8) + $1 | 0;
     HEAP32[$0 + 4 >> 2] = $1 | 1;
     HEAP32[$0 + $1 >> 2] = $1;
     if (HEAP32[63297] != ($0 | 0)) {
      break label$16;
     }
     HEAP32[63294] = $1;
     return;
    }
    HEAP32[$5 + 4 >> 2] = $9 & -2;
    HEAP32[$0 + 4 >> 2] = $1 | 1;
    HEAP32[$0 + $1 >> 2] = $1;
   }
   if ($1 >>> 0 <= 255) {
    $2 = $1 >>> 3;
    $1 = ($2 << 3) + 253208 | 0;
    $3 = HEAP32[63292];
    $2 = 1 << $2;
    label$33 : {
     if (!($3 & $2)) {
      HEAP32[63292] = $2 | $3;
      $3 = $1;
      break label$33;
     }
     $3 = HEAP32[$1 + 8 >> 2];
     if (HEAPU32[63296] > $3 >>> 0) {
      break label$1;
     }
    }
    HEAP32[$1 + 8 >> 2] = $0;
    HEAP32[$3 + 12 >> 2] = $0;
    HEAP32[$0 + 12 >> 2] = $1;
    HEAP32[$0 + 8 >> 2] = $3;
    return;
   }
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   $3 = $0;
   $4 = $1 >>> 8;
   $2 = 0;
   label$35 : {
    if (!$4) {
     break label$35;
    }
    $2 = 31;
    if ($1 >>> 0 > 16777215) {
     break label$35;
    }
    $6 = $4 + 1048320 >>> 16 & 8;
    $4 = $4 << $6;
    $2 = $4 + 520192 >>> 16 & 4;
    $5 = $4 << $2;
    $4 = $5 + 245760 >>> 16 & 2;
    $2 = ($5 << $4 >>> 15) - ($4 | ($2 | $6)) | 0;
    $2 = ($2 << 1 | $1 >>> $2 + 21 & 1) + 28 | 0;
   }
   HEAP32[$3 + 28 >> 2] = $2;
   $4 = ($2 << 2) + 253472 | 0;
   label$36 : {
    $3 = HEAP32[63293];
    $6 = 1 << $2;
    label$37 : {
     if (!($3 & $6)) {
      HEAP32[63293] = $3 | $6;
      HEAP32[$4 >> 2] = $0;
      break label$37;
     }
     $3 = $1 << (($2 | 0) == 31 ? 0 : 25 - ($2 >>> 1) | 0);
     $2 = HEAP32[$4 >> 2];
     while (1) {
      $4 = $2;
      if ((HEAP32[$2 + 4 >> 2] & -8) == ($1 | 0)) {
       break label$36;
      }
      $2 = $3 >>> 29;
      $3 = $3 << 1;
      $6 = ($4 + ($2 & 4) | 0) + 16 | 0;
      $2 = HEAP32[$6 >> 2];
      if ($2) {
       continue;
      }
      break;
     }
     if (HEAPU32[63296] > $6 >>> 0) {
      break label$1;
     }
     HEAP32[$6 >> 2] = $0;
    }
    HEAP32[$0 + 24 >> 2] = $4;
    HEAP32[$0 + 12 >> 2] = $0;
    HEAP32[$0 + 8 >> 2] = $0;
    return;
   }
   $2 = HEAP32[63296];
   $1 = HEAP32[$4 + 8 >> 2];
   if ($2 >>> 0 > $1 >>> 0 | $2 >>> 0 > $4 >>> 0) {
    break label$1;
   }
   HEAP32[$1 + 12 >> 2] = $0;
   HEAP32[$4 + 8 >> 2] = $0;
   HEAP32[$0 + 24 >> 2] = 0;
   HEAP32[$0 + 12 >> 2] = $4;
   HEAP32[$0 + 8 >> 2] = $1;
  }
  return;
 }
 abort();
 abort();
}
function jswrap_graphics_toColor($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 288 | 0;
 global$0 = $4;
 HEAP32[$4 + 280 >> 2] = $0;
 HEAP32[$4 + 276 >> 2] = $1;
 HEAP32[$4 + 272 >> 2] = $2;
 HEAP32[$4 + 268 >> 2] = $3;
 label$1 : {
  if (!(graphicsGetFromVar($4 + 200 | 0, HEAP32[$4 + 280 >> 2]) & 1)) {
   HEAP32[$4 + 284 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 196 >> 2] = 0;
  label$3 : {
   if (jsvIsString(HEAP32[$4 + 276 >> 2]) & 1) {
    $0 = $4 + 159 | 0;
    HEAP8[$0 | 0] = 0;
    HEAP8[$0 + 1 | 0] = 0;
    HEAP8[$0 + 2 | 0] = 0;
    HEAP8[$0 + 3 | 0] = 0;
    HEAP8[$0 + 4 | 0] = 0;
    HEAP8[$0 + 5 | 0] = 0;
    HEAP8[$0 + 6 | 0] = 0;
    HEAP8[$0 + 7 | 0] = 0;
    HEAP8[$0 + 8 | 0] = 0;
    jsvGetString(HEAP32[$4 + 276 >> 2], $0, 9);
    HEAPF64[$4 + 184 >> 3] = +(hexToByte(HEAP8[$4 + 160 | 0], HEAP8[$4 + 161 | 0]) | 0) / 256;
    HEAPF64[$4 + 176 >> 3] = +(hexToByte(HEAP8[$4 + 162 | 0], HEAP8[$4 + 163 | 0]) | 0) / 256;
    HEAPF64[$4 + 168 >> 3] = +(hexToByte(HEAP8[$4 + 164 | 0], HEAP8[$4 + 165 | 0]) | 0) / 256;
    label$5 : {
     if (!(HEAPF64[$4 + 184 >> 3] < 0 | HEAPF64[$4 + 176 >> 3] < 0 | HEAPF64[$4 + 168 >> 3] < 0)) {
      if (!HEAP8[$4 + 166 | 0]) {
       break label$5;
      }
     }
     jsExceptionHere(1, 38822, 0);
     HEAP32[$4 + 284 >> 2] = 0;
     break label$1;
    }
    break label$3;
   }
   HEAPF64[$4 + 184 >> 3] = jsvGetFloat(HEAP32[$4 + 276 >> 2]);
   HEAPF64[$4 + 176 >> 3] = jsvGetFloat(HEAP32[$4 + 272 >> 2]);
   HEAPF64[$4 + 168 >> 3] = jsvGetFloat(HEAP32[$4 + 268 >> 2]);
  }
  $0 = __DOUBLE_BITS(HEAPF64[$4 + 184 >> 3]);
  label$7 : {
   label$8 : {
    $1 = i64toi32_i32$HIGH_BITS & 2147483647;
    if (($1 | 0) == 2146435072 & $0 >>> 0 >= 0 | $1 >>> 0 > 2146435072) {
     break label$8;
    }
    $0 = __DOUBLE_BITS(HEAPF64[$4 + 176 >> 3]);
    $1 = i64toi32_i32$HIGH_BITS & 2147483647;
    if (($1 | 0) == 2146435072 & $0 >>> 0 >= 0 | $1 >>> 0 > 2146435072) {
     break label$8;
    }
    $0 = __DOUBLE_BITS(HEAPF64[$4 + 168 >> 3]);
    $1 = i64toi32_i32$HIGH_BITS & 2147483647;
    if (($1 | 0) == 2146435072 & $0 >>> 0 >= 0 | $1 >>> 0 > 2146435072) {
     break label$8;
    }
    $0 = $4;
    $5 = HEAPF64[$4 + 184 >> 3] * 256;
    label$12 : {
     if (Math_abs($5) < 2147483648) {
      $1 = ~~$5;
      break label$12;
     }
     $1 = -2147483648;
    }
    HEAP32[$0 + 152 >> 2] = $1;
    $0 = $4;
    $5 = HEAPF64[$4 + 176 >> 3] * 256;
    label$14 : {
     if (Math_abs($5) < 2147483648) {
      $1 = ~~$5;
      break label$14;
     }
     $1 = -2147483648;
    }
    HEAP32[$0 + 148 >> 2] = $1;
    $0 = $4;
    $5 = HEAPF64[$4 + 168 >> 3] * 256;
    label$16 : {
     if (Math_abs($5) < 2147483648) {
      $1 = ~~$5;
      break label$16;
     }
     $1 = -2147483648;
    }
    HEAP32[$0 + 144 >> 2] = $1;
    if (HEAP32[$4 + 152 >> 2] > 255) {
     HEAP32[$4 + 152 >> 2] = 255;
    }
    if (HEAP32[$4 + 148 >> 2] > 255) {
     HEAP32[$4 + 148 >> 2] = 255;
    }
    if (HEAP32[$4 + 144 >> 2] > 255) {
     HEAP32[$4 + 144 >> 2] = 255;
    }
    if (HEAP32[$4 + 152 >> 2] < 0) {
     HEAP32[$4 + 152 >> 2] = 0;
    }
    if (HEAP32[$4 + 148 >> 2] < 0) {
     HEAP32[$4 + 148 >> 2] = 0;
    }
    if (HEAP32[$4 + 144 >> 2] < 0) {
     HEAP32[$4 + 144 >> 2] = 0;
    }
    HEAP32[$4 + 140 >> 2] = (HEAPU8[$4 + 208 | 0] | HEAPU8[$4 + 209 | 0] << 8 | (HEAPU8[$4 + 210 | 0] << 16 | HEAPU8[$4 + 211 | 0] << 24)) & 896;
    if (HEAP32[$4 + 140 >> 2]) {
     HEAP32[$4 + 136 >> 2] = HEAP32[$4 + 152 >> 2];
     HEAP32[$4 + 132 >> 2] = HEAP32[$4 + 148 >> 2];
     HEAP32[$4 + 128 >> 2] = HEAP32[$4 + 144 >> 2];
     label$25 : {
      label$26 : {
       label$27 : {
        label$28 : {
         label$29 : {
          $0 = HEAP32[$4 + 140 >> 2];
          if (($0 | 0) != 128) {
           if (($0 | 0) == 256) {
            break label$29;
           }
           if (($0 | 0) == 384) {
            break label$28;
           }
           if (($0 | 0) == 512) {
            break label$27;
           }
           if (($0 | 0) == 640) {
            break label$26;
           }
           break label$25;
          }
          HEAP32[$4 + 152 >> 2] = HEAP32[$4 + 128 >> 2];
          HEAP32[$4 + 148 >> 2] = HEAP32[$4 + 136 >> 2];
          HEAP32[$4 + 144 >> 2] = HEAP32[$4 + 132 >> 2];
          break label$25;
         }
         HEAP32[$4 + 152 >> 2] = HEAP32[$4 + 128 >> 2];
         HEAP32[$4 + 144 >> 2] = HEAP32[$4 + 136 >> 2];
         break label$25;
        }
        HEAP32[$4 + 152 >> 2] = HEAP32[$4 + 132 >> 2];
        HEAP32[$4 + 148 >> 2] = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 144 >> 2] = HEAP32[$4 + 136 >> 2];
        break label$25;
       }
       HEAP32[$4 + 152 >> 2] = HEAP32[$4 + 132 >> 2];
       HEAP32[$4 + 148 >> 2] = HEAP32[$4 + 136 >> 2];
       break label$25;
      }
      HEAP32[$4 + 148 >> 2] = HEAP32[$4 + 128 >> 2];
      HEAP32[$4 + 144 >> 2] = HEAP32[$4 + 132 >> 2];
     }
    }
    label$31 : {
     if (HEAPU8[$4 + 216 | 0] == 16) {
      HEAP32[$4 + 196 >> 2] = HEAP32[$4 + 148 >> 2] >> 2 << 5 | HEAP32[$4 + 144 >> 2] >> 3 | HEAP32[$4 + 152 >> 2] >> 3 << 11;
      break label$31;
     }
     label$33 : {
      if (HEAPU8[$4 + 216 | 0] == 32) {
       HEAP32[$4 + 196 >> 2] = HEAP32[$4 + 144 >> 2] | HEAP32[$4 + 148 >> 2] << 8 | HEAP32[$4 + 152 >> 2] << 16 | -16777216;
       break label$33;
      }
      label$35 : {
       if (HEAPU8[$4 + 216 | 0] == 24) {
        HEAP32[$4 + 196 >> 2] = HEAP32[$4 + 144 >> 2] | HEAP32[$4 + 148 >> 2] << 8 | HEAP32[$4 + 152 >> 2] << 16;
        break label$35;
       }
       label$37 : {
        if (HEAPU8[$4 + 216 | 0] == 4) {
         HEAP32[$4 + 124 >> 2] = 2147483647;
         HEAP32[$4 + 196 >> 2] = 0;
         HEAP32[$4 + 120 >> 2] = 0;
         while (1) {
          if (HEAPU32[$4 + 120 >> 2] < 16) {
           HEAP32[$4 + 116 >> 2] = HEAPU16[(HEAP32[$4 + 120 >> 2] << 1) + 37888 >> 1];
           HEAP32[$4 + 112 >> 2] = HEAP32[$4 + 116 >> 2] >> 8 & 248;
           HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 116 >> 2] >> 3 & 252;
           HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 116 >> 2] << 3 & 248;
           HEAP32[$4 + 112 >> 2] = HEAP32[$4 + 112 >> 2] | HEAP32[$4 + 112 >> 2] >> 5;
           HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 108 >> 2] | HEAP32[$4 + 104 >> 2] >> 6;
           HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 104 >> 2] | HEAP32[$4 + 104 >> 2] >> 5;
           HEAP32[$4 + 100 >> 2] = HEAP32[$4 + 112 >> 2] - HEAP32[$4 + 152 >> 2];
           HEAP32[$4 + 96 >> 2] = HEAP32[$4 + 108 >> 2] - HEAP32[$4 + 148 >> 2];
           HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 104 >> 2] - HEAP32[$4 + 144 >> 2];
           HEAP32[$4 + 88 >> 2] = (Math_imul(HEAP32[$4 + 100 >> 2], HEAP32[$4 + 100 >> 2]) + Math_imul(HEAP32[$4 + 96 >> 2], HEAP32[$4 + 96 >> 2]) | 0) + Math_imul(HEAP32[$4 + 92 >> 2], HEAP32[$4 + 92 >> 2]);
           if (HEAP32[$4 + 88 >> 2] < HEAP32[$4 + 124 >> 2]) {
            HEAP32[$4 + 124 >> 2] = HEAP32[$4 + 88 >> 2];
            HEAP32[$4 + 196 >> 2] = HEAP32[$4 + 120 >> 2];
           }
           HEAP32[$4 + 120 >> 2] = HEAP32[$4 + 120 >> 2] + 1;
           continue;
          }
          break;
         }
         break label$37;
        }
        label$42 : {
         if (HEAPU8[$4 + 216 | 0] == 8) {
          HEAP32[$4 + 84 >> 2] = 2147483647;
          HEAP32[$4 + 196 >> 2] = 0;
          HEAP32[$4 + 80 >> 2] = 0;
          while (1) {
           if (HEAP32[$4 + 80 >> 2] < 255) {
            HEAP32[$4 + 76 >> 2] = HEAPU16[(HEAP32[$4 + 80 >> 2] << 1) + 37920 >> 1];
            HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 76 >> 2] >> 8 & 248;
            HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 76 >> 2] >> 3 & 252;
            HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 76 >> 2] << 3 & 248;
            HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 72 >> 2] | HEAP32[$4 + 72 >> 2] >> 5;
            HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 68 >> 2] | HEAP32[$4 + 64 >> 2] >> 6;
            HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 64 >> 2] | HEAP32[$4 + 64 >> 2] >> 5;
            HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 72 >> 2] - HEAP32[$4 + 152 >> 2];
            HEAP32[$4 + 56 >> 2] = HEAP32[$4 + 68 >> 2] - HEAP32[$4 + 148 >> 2];
            HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 64 >> 2] - HEAP32[$4 + 144 >> 2];
            HEAP32[$4 + 48 >> 2] = (Math_imul(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 60 >> 2]) + Math_imul(HEAP32[$4 + 56 >> 2], HEAP32[$4 + 56 >> 2]) | 0) + Math_imul(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 52 >> 2]);
            if (HEAP32[$4 + 48 >> 2] < HEAP32[$4 + 84 >> 2]) {
             HEAP32[$4 + 84 >> 2] = HEAP32[$4 + 48 >> 2];
             HEAP32[$4 + 196 >> 2] = HEAP32[$4 + 80 >> 2];
            }
            HEAP32[$4 + 80 >> 2] = HEAP32[$4 + 80 >> 2] + 1;
            continue;
           }
           break;
          }
          break label$42;
         }
         HEAP32[$4 + 196 >> 2] = (HEAP32[$4 + 144 >> 2] + (HEAP32[$4 + 152 >> 2] + HEAP32[$4 + 148 >> 2] | 0) | 0) >= 384 ? -1 : 0;
        }
       }
      }
     }
    }
    break label$7;
   }
   HEAP32[$4 + 196 >> 2] = jsvGetInteger(HEAP32[$4 + 276 >> 2]);
  }
  HEAP32[$4 + 284 >> 2] = HEAP32[$4 + 196 >> 2];
 }
 global$0 = $4 + 288 | 0;
 return HEAP32[$4 + 284 >> 2];
}
function _jswrap_graphics_parseImage($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 80 | 0;
 global$0 = $3;
 HEAP32[$3 + 72 >> 2] = $0;
 HEAP32[$3 + 68 >> 2] = $1;
 HEAP32[$3 + 64 >> 2] = $2;
 $0 = HEAP32[$3 + 64 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 label$1 : {
  label$2 : {
   if (jsvIsObject(HEAP32[$3 + 68 >> 2]) & 1) {
    $0 = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$3 + 68 >> 2], 38802, 0));
    HEAP32[HEAP32[$3 + 64 >> 2] >> 2] = $0;
    $0 = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$3 + 68 >> 2], 38808, 0));
    HEAP32[HEAP32[$3 + 64 >> 2] + 4 >> 2] = $0;
    $0 = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$3 + 68 >> 2], 39248, 0));
    HEAP32[HEAP32[$3 + 64 >> 2] + 8 >> 2] = $0;
    if (HEAP32[HEAP32[$3 + 64 >> 2] + 8 >> 2] <= 0) {
     HEAP32[HEAP32[$3 + 64 >> 2] + 8 >> 2] = 1;
    }
    HEAP32[$3 + 60 >> 2] = jsvObjectGetChild(HEAP32[$3 + 68 >> 2], 39337, 0);
    HEAP8[HEAP32[$3 + 64 >> 2] + 12 | 0] = HEAP32[$3 + 60 >> 2] != 0;
    $0 = jsvGetIntegerAndUnLock(HEAP32[$3 + 60 >> 2]);
    HEAP32[HEAP32[$3 + 64 >> 2] + 16 >> 2] = $0;
    HEAP32[$3 + 60 >> 2] = jsvObjectGetChild(HEAP32[$3 + 68 >> 2], 39349, 0);
    if (HEAP32[$3 + 60 >> 2]) {
     label$6 : {
      if (!(!(jsvIsArrayBuffer(HEAP32[$3 + 60 >> 2]) & 1) | HEAPU16[HEAP32[$3 + 60 >> 2] + 4 >> 1] != 2)) {
       HEAP32[$3 + 56 >> 2] = 0;
       $0 = jsvGetDataPointer(HEAP32[$3 + 60 >> 2], $3 + 56 | 0);
       HEAP32[HEAP32[$3 + 64 >> 2] + 28 >> 2] = $0;
       jsvUnLock(HEAP32[$3 + 60 >> 2]);
       label$8 : {
        label$9 : {
         if (!(HEAP32[$3 + 56 >> 2] == 2 | HEAP32[$3 + 56 >> 2] == 4 | HEAP32[$3 + 56 >> 2] == 16)) {
          if (HEAP32[$3 + 56 >> 2] != 256) {
           break label$9;
          }
         }
         HEAP32[HEAP32[$3 + 64 >> 2] + 32 >> 2] = HEAP32[$3 + 56 >> 2] - 1;
         break label$8;
        }
        HEAP32[HEAP32[$3 + 64 >> 2] + 28 >> 2] = 0;
       }
       break label$6;
      }
      jsvUnLock(HEAP32[$3 + 60 >> 2]);
     }
     if (!HEAP32[HEAP32[$3 + 64 >> 2] + 28 >> 2]) {
      jsExceptionHere(1, 39357, 0);
      HEAP8[$3 + 79 | 0] = 0;
      break label$1;
     }
    }
    HEAP32[$3 + 52 >> 2] = jsvObjectGetChild(HEAP32[$3 + 68 >> 2], 38815, 0);
    $0 = jsvGetArrayBufferBackingString(HEAP32[$3 + 52 >> 2]);
    HEAP32[HEAP32[$3 + 64 >> 2] + 20 >> 2] = $0;
    jsvUnLock(HEAP32[$3 + 52 >> 2]);
    HEAP32[HEAP32[$3 + 64 >> 2] + 24 >> 2] = 0;
    break label$2;
   }
   label$12 : {
    label$13 : {
     if (!(jsvIsString(HEAP32[$3 + 68 >> 2]) & 1)) {
      if (!(jsvIsArrayBuffer(HEAP32[$3 + 68 >> 2]) & 1)) {
       break label$13;
      }
     }
     label$15 : {
      if (jsvIsArrayBuffer(HEAP32[$3 + 68 >> 2]) & 1) {
       $0 = jsvGetArrayBufferBackingString(HEAP32[$3 + 68 >> 2]);
       break label$15;
      }
      $0 = jsvLockAgain(HEAP32[$3 + 68 >> 2]);
     }
     HEAP32[HEAP32[$3 + 64 >> 2] + 20 >> 2] = $0;
     $0 = jsvGetCharInString(HEAP32[HEAP32[$3 + 64 >> 2] + 20 >> 2], 0) & 255;
     HEAP32[HEAP32[$3 + 64 >> 2] >> 2] = $0;
     $0 = jsvGetCharInString(HEAP32[HEAP32[$3 + 64 >> 2] + 20 >> 2], 1) & 255;
     HEAP32[HEAP32[$3 + 64 >> 2] + 4 >> 2] = $0;
     $0 = jsvGetCharInString(HEAP32[HEAP32[$3 + 64 >> 2] + 20 >> 2], 2) & 255;
     HEAP32[HEAP32[$3 + 64 >> 2] + 8 >> 2] = $0;
     label$17 : {
      if (HEAP32[HEAP32[$3 + 64 >> 2] + 8 >> 2] & 128) {
       HEAP32[HEAP32[$3 + 64 >> 2] + 8 >> 2] = HEAP32[HEAP32[$3 + 64 >> 2] + 8 >> 2] & 127;
       HEAP8[HEAP32[$3 + 64 >> 2] + 12 | 0] = 1;
       $0 = jsvGetCharInString(HEAP32[HEAP32[$3 + 64 >> 2] + 20 >> 2], 3) & 255;
       HEAP32[HEAP32[$3 + 64 >> 2] + 16 >> 2] = $0;
       HEAP32[HEAP32[$3 + 64 >> 2] + 24 >> 2] = 4;
       break label$17;
      }
      HEAP32[HEAP32[$3 + 64 >> 2] + 24 >> 2] = 3;
     }
     break label$12;
    }
    jsExceptionHere(1, 39430, 0);
    HEAP8[$3 + 79 | 0] = 0;
    break label$1;
   }
  }
  if (!(HEAP8[HEAP32[$3 + 64 >> 2] + 12 | 0] & 1)) {
   HEAP32[HEAP32[$3 + 64 >> 2] + 16 >> 2] = -1;
  }
  if (!HEAP32[HEAP32[$3 + 64 >> 2] + 28 >> 2]) {
   label$21 : {
    if (HEAP32[HEAP32[$3 + 64 >> 2] + 8 >> 2] == 1) {
     $0 = HEAP32[$3 + 72 >> 2];
     HEAP16[HEAP32[$3 + 64 >> 2] + 48 >> 1] = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
     $0 = HEAP32[$3 + 72 >> 2];
     HEAP16[HEAP32[$3 + 64 >> 2] + 50 >> 1] = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
     HEAP32[HEAP32[$3 + 64 >> 2] + 28 >> 2] = HEAP32[$3 + 64 >> 2] + 48;
     HEAP32[HEAP32[$3 + 64 >> 2] + 32 >> 2] = 1;
     break label$21;
    }
    label$23 : {
     if (!(HEAPU8[HEAP32[$3 + 72 >> 2] + 16 | 0] != 16 | HEAP32[HEAP32[$3 + 64 >> 2] + 8 >> 2] != 2)) {
      $0 = HEAP32[$3 + 72 >> 2];
      HEAP32[$3 + 48 >> 2] = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
      HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 48 >> 2] >>> 8 & 248;
      HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 48 >> 2] >>> 3 & 252;
      HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 48 >> 2] << 3 & 248;
      $0 = HEAP32[$3 + 72 >> 2];
      HEAP32[$3 + 32 >> 2] = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
      HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 32 >> 2] >>> 8 & 248;
      HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 32 >> 2] >>> 3 & 252;
      HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 32 >> 2] << 3 & 248;
      $0 = HEAP32[$3 + 72 >> 2];
      HEAP16[HEAP32[$3 + 64 >> 2] + 48 >> 1] = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
      HEAP32[$3 + 16 >> 2] = (HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 44 >> 2] << 1) >>> 0) / 3;
      HEAP32[$3 + 12 >> 2] = (HEAP32[$3 + 24 >> 2] + (HEAP32[$3 + 40 >> 2] << 1) >>> 0) / 3;
      HEAP32[$3 + 8 >> 2] = (HEAP32[$3 + 20 >> 2] + (HEAP32[$3 + 36 >> 2] << 1) >>> 0) / 3;
      HEAP16[HEAP32[$3 + 64 >> 2] + 50 >> 1] = HEAP32[$3 + 12 >> 2] >>> 2 << 5 | HEAP32[$3 + 8 >> 2] >>> 3 | HEAP32[$3 + 16 >> 2] >>> 3 << 11;
      HEAP32[$3 + 16 >> 2] = (HEAP32[$3 + 44 >> 2] + (HEAP32[$3 + 28 >> 2] << 1) >>> 0) / 3;
      HEAP32[$3 + 12 >> 2] = (HEAP32[$3 + 40 >> 2] + (HEAP32[$3 + 24 >> 2] << 1) >>> 0) / 3;
      HEAP32[$3 + 8 >> 2] = (HEAP32[$3 + 36 >> 2] + (HEAP32[$3 + 20 >> 2] << 1) >>> 0) / 3;
      HEAP16[HEAP32[$3 + 64 >> 2] + 52 >> 1] = HEAP32[$3 + 12 >> 2] >>> 2 << 5 | HEAP32[$3 + 8 >> 2] >>> 3 | HEAP32[$3 + 16 >> 2] >>> 3 << 11;
      $0 = HEAP32[$3 + 72 >> 2];
      HEAP16[HEAP32[$3 + 64 >> 2] + 54 >> 1] = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
      HEAP32[HEAP32[$3 + 64 >> 2] + 28 >> 2] = HEAP32[$3 + 64 >> 2] + 48;
      HEAP32[HEAP32[$3 + 64 >> 2] + 32 >> 2] = 3;
      break label$23;
     }
     label$25 : {
      if (!(HEAPU8[HEAP32[$3 + 72 >> 2] + 16 | 0] != 16 | HEAP32[HEAP32[$3 + 64 >> 2] + 8 >> 2] != 4)) {
       HEAP32[HEAP32[$3 + 64 >> 2] + 28 >> 2] = 37888;
       HEAP32[HEAP32[$3 + 64 >> 2] + 32 >> 2] = 15;
       break label$25;
      }
      label$27 : {
       if (!(HEAPU8[HEAP32[$3 + 72 >> 2] + 16 | 0] != 16 | HEAP32[HEAP32[$3 + 64 >> 2] + 8 >> 2] != 8)) {
        HEAP32[HEAP32[$3 + 64 >> 2] + 28 >> 2] = 37920;
        HEAP32[HEAP32[$3 + 64 >> 2] + 32 >> 2] = 255;
        break label$27;
       }
       if (!(HEAPU8[HEAP32[$3 + 72 >> 2] + 16 | 0] != 8 | HEAP32[HEAP32[$3 + 64 >> 2] + 8 >> 2] != 4)) {
        HEAP32[HEAP32[$3 + 64 >> 2] + 28 >> 2] = 38432;
        HEAP32[HEAP32[$3 + 64 >> 2] + 32 >> 2] = 15;
       }
      }
     }
    }
   }
  }
  label$30 : {
   if (!(!(jsvIsString(HEAP32[HEAP32[$3 + 64 >> 2] + 20 >> 2]) & 1) | HEAP32[HEAP32[$3 + 64 >> 2] >> 2] <= 0 | HEAP32[HEAP32[$3 + 64 >> 2] + 4 >> 2] <= 0)) {
    if (HEAP32[HEAP32[$3 + 64 >> 2] + 8 >> 2] <= 32) {
     break label$30;
    }
   }
   jsExceptionHere(1, 39483, 0);
   jsvUnLock(HEAP32[HEAP32[$3 + 64 >> 2] + 20 >> 2]);
   HEAP8[$3 + 79 | 0] = 0;
   break label$1;
  }
  HEAP32[HEAP32[$3 + 64 >> 2] + 36 >> 2] = (1 << HEAP32[HEAP32[$3 + 64 >> 2] + 8 >> 2]) - 1;
  $0 = HEAP32[$3 + 64 >> 2];
  if (HEAP32[HEAP32[$3 + 64 >> 2] + 8 >> 2] < 8) {
   $1 = (8 / HEAP32[HEAP32[$3 + 64 >> 2] + 8 >> 2] | 0) - 1 | 0;
  } else {
   $1 = 0;
  }
  HEAP32[$0 + 40 >> 2] = $1;
  HEAP32[HEAP32[$3 + 64 >> 2] + 44 >> 2] = Math_imul(HEAP32[HEAP32[$3 + 64 >> 2] >> 2], HEAP32[HEAP32[$3 + 64 >> 2] + 8 >> 2]) + 7 >> 3;
  HEAP8[$3 + 79 | 0] = 1;
 }
 global$0 = $3 + 80 | 0;
 return HEAP8[$3 + 79 | 0] & 1;
}
function _jsvTrace($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 320 | 0;
 global$0 = $4;
 HEAP32[$4 + 316 >> 2] = $0;
 HEAP32[$4 + 312 >> 2] = $1;
 HEAP32[$4 + 308 >> 2] = $2;
 HEAP32[$4 + 304 >> 2] = $3;
 HEAP32[$4 + 300 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 300 >> 2] < HEAP32[$4 + 312 >> 2]) {
   jsiConsolePrintString(3002);
   HEAP32[$4 + 300 >> 2] = HEAP32[$4 + 300 >> 2] + 1;
   continue;
  }
  break;
 }
 label$3 : {
  if (!HEAP32[$4 + 316 >> 2]) {
   jsiConsolePrintString(2529);
   break label$3;
  }
  jsvTraceLockInfo(HEAP32[$4 + 316 >> 2]);
  HEAP32[$4 + 296 >> 2] = _jsvTraceGetLowestLevel(HEAP32[$4 + 308 >> 2], HEAP32[$4 + 316 >> 2]);
  if (HEAP32[$4 + 296 >> 2] < HEAP32[$4 + 304 >> 2]) {
   jsiConsolePrintString(3004);
   break label$3;
  }
  label$6 : {
   if (jsvIsNewChild(HEAP32[$4 + 316 >> 2]) & 1) {
    jsiConsolePrintString(3009);
    HEAP32[$4 + 292 >> 2] = jsvGetAddressOf(jsvGetNextSibling(HEAP32[$4 + 316 >> 2]) & 65535);
    _jsvTrace(HEAP32[$4 + 292 >> 2], HEAP32[$4 + 312 >> 2] + 2 | 0, HEAP32[$4 + 308 >> 2], HEAP32[$4 + 304 >> 2] + 1 | 0);
    jsiConsolePrintString(3026);
    break label$6;
   }
   if (jsvIsName(HEAP32[$4 + 316 >> 2]) & 1) {
    jsiConsolePrintString(3034);
   }
  }
  HEAP8[$4 + 291 | 0] = 32;
  label$9 : {
   if (jsvIsObject(HEAP32[$4 + 316 >> 2]) & 1) {
    jsiConsolePrintString(3040);
    HEAP8[$4 + 291 | 0] = 125;
    break label$9;
   }
   label$11 : {
    if (jsvIsGetterOrSetter(HEAP32[$4 + 316 >> 2]) & 1) {
     jsiConsolePrintString(3050);
     HEAP8[$4 + 291 | 0] = 125;
     break label$11;
    }
    label$13 : {
     if (jsvIsArray(HEAP32[$4 + 316 >> 2]) & 1) {
      HEAP32[$4 + 48 >> 2] = HEAP32[HEAP32[$4 + 316 >> 2] >> 2];
      jsiConsolePrintf(3067, $4 + 48 | 0);
      HEAP8[$4 + 291 | 0] = 93;
      break label$13;
     }
     label$15 : {
      if (jsvIsNativeFunction(HEAP32[$4 + 316 >> 2]) & 1) {
       $0 = HEAP32[HEAP32[$4 + 316 >> 2] >> 2];
       HEAP32[$4 + 68 >> 2] = HEAPU16[HEAP32[$4 + 316 >> 2] + 4 >> 1];
       HEAP32[$4 + 64 >> 2] = $0;
       jsiConsolePrintf(3080, $4 - -64 | 0);
       HEAP8[$4 + 291 | 0] = 125;
       break label$15;
      }
      label$17 : {
       if (jsvIsFunction(HEAP32[$4 + 316 >> 2]) & 1) {
        jsiConsolePrintString(3108);
        if (jsvIsFunctionReturn(HEAP32[$4 + 316 >> 2]) & 1) {
         jsiConsolePrintString(3120);
        }
        HEAP8[$4 + 291 | 0] = 125;
        break label$17;
       }
       label$20 : {
        if (jsvIsPin(HEAP32[$4 + 316 >> 2]) & 1) {
         HEAP32[$4 + 80 >> 2] = jsvGetInteger(HEAP32[$4 + 316 >> 2]);
         jsiConsolePrintf(3128, $4 + 80 | 0);
         break label$20;
        }
        label$22 : {
         if (jsvIsInt(HEAP32[$4 + 316 >> 2]) & 1) {
          HEAP32[$4 + 96 >> 2] = jsvGetInteger(HEAP32[$4 + 316 >> 2]);
          jsiConsolePrintf(3135, $4 + 96 | 0);
          break label$22;
         }
         label$24 : {
          if (jsvIsBoolean(HEAP32[$4 + 316 >> 2]) & 1) {
           HEAP32[$4 + 112 >> 2] = jsvGetBool(HEAP32[$4 + 316 >> 2]) & 1 ? 2544 : 2549;
           jsiConsolePrintf(3146, $4 + 112 | 0);
           break label$24;
          }
          label$26 : {
           if (jsvIsFloat(HEAP32[$4 + 316 >> 2]) & 1) {
            HEAPF64[$4 + 128 >> 3] = jsvGetFloat(HEAP32[$4 + 316 >> 2]);
            jsiConsolePrintf(3154, $4 + 128 | 0);
            break label$26;
           }
           label$28 : {
            if (jsvIsFunctionParameter(HEAP32[$4 + 316 >> 2]) & 1) {
             HEAP32[$4 + 144 >> 2] = HEAP32[$4 + 316 >> 2];
             jsiConsolePrintf(3164, $4 + 144 | 0);
             break label$28;
            }
            label$30 : {
             if (jsvIsArrayBufferName(HEAP32[$4 + 316 >> 2]) & 1) {
              HEAP32[$4 + 160 >> 2] = jsvGetInteger(HEAP32[$4 + 316 >> 2]);
              jsiConsolePrintf(3174, $4 + 160 | 0);
              break label$30;
             }
             label$32 : {
              if (jsvIsArrayBuffer(HEAP32[$4 + 316 >> 2]) & 1) {
               label$34 : {
                if (jswGetBasicObjectName(HEAP32[$4 + 316 >> 2])) {
                 $0 = jswGetBasicObjectName(HEAP32[$4 + 316 >> 2]);
                 break label$34;
                }
                $0 = 3216;
               }
               $1 = HEAPU16[HEAP32[$4 + 316 >> 2] >> 1];
               HEAP32[$4 + 184 >> 2] = HEAPU16[HEAP32[$4 + 316 >> 2] + 2 >> 1];
               HEAP32[$4 + 180 >> 2] = $1;
               HEAP32[$4 + 176 >> 2] = $0;
               jsiConsolePrintf(3195, $4 + 176 | 0);
               break label$32;
              }
              label$36 : {
               if (jsvIsString(HEAP32[$4 + 316 >> 2]) & 1) {
                HEAP32[$4 + 284 >> 2] = 1;
                if (jsvGetLastChild(HEAP32[$4 + 316 >> 2]) & 65535) {
                 HEAP32[$4 + 280 >> 2] = jsvGetAddressOf(jsvGetLastChild(HEAP32[$4 + 316 >> 2]) & 65535);
                 HEAP32[$4 + 284 >> 2] = jsvCountJsVarsUsed(HEAP32[$4 + 280 >> 2]) + HEAP32[$4 + 284 >> 2];
                }
                if (jsvIsFlatString(HEAP32[$4 + 316 >> 2]) & 1) {
                 HEAP32[$4 + 284 >> 2] = jsvGetFlatStringBlocks(HEAP32[$4 + 316 >> 2]) + HEAP32[$4 + 284 >> 2];
                }
                HEAP32[$4 + 276 >> 2] = 3236;
                if (jsvIsFlatString(HEAP32[$4 + 316 >> 2]) & 1) {
                 HEAP32[$4 + 276 >> 2] = 3237;
                }
                if (jsvIsNativeString(HEAP32[$4 + 316 >> 2]) & 1) {
                 HEAP32[$4 + 276 >> 2] = 3242;
                }
                if (jsvIsFlashString(HEAP32[$4 + 316 >> 2]) & 1) {
                 HEAP32[$4 + 276 >> 2] = 3249;
                }
                $0 = HEAP32[$4 + 276 >> 2];
                $1 = HEAP32[$4 + 284 >> 2];
                HEAP32[$4 + 200 >> 2] = HEAP32[$4 + 316 >> 2];
                HEAP32[$4 + 196 >> 2] = $1;
                HEAP32[$4 + 192 >> 2] = $0;
                jsiConsolePrintf(3255, $4 + 192 | 0);
                break label$36;
               }
               HEAP32[$4 + 208 >> 2] = HEAPU16[HEAP32[$4 + 316 >> 2] + 14 >> 1] & 57855;
               jsiConsolePrintf(3279, $4 + 208 | 0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
  if (jsvIsNameInt(HEAP32[$4 + 316 >> 2]) & 1) {
   HEAP32[$4 >> 2] = jsvGetFirstChildSigned(HEAP32[$4 + 316 >> 2]) << 16 >> 16;
   jsiConsolePrintf(3290, $4);
   break label$3;
  }
  if (jsvIsNameIntBool(HEAP32[$4 + 316 >> 2]) & 1) {
   HEAP32[$4 + 16 >> 2] = jsvGetFirstChild(HEAP32[$4 + 316 >> 2]) & 65535 ? 2544 : 2549;
   jsiConsolePrintf(3300, $4 + 16 | 0);
   break label$3;
  }
  label$45 : {
   if (jsvHasSingleChild(HEAP32[$4 + 316 >> 2]) & 1) {
    $0 = $4;
    label$47 : {
     if (jsvGetFirstChild(HEAP32[$4 + 316 >> 2]) & 65535) {
      $1 = jsvGetAddressOf(jsvGetFirstChild(HEAP32[$4 + 316 >> 2]) & 65535);
      break label$47;
     }
     $1 = 0;
    }
    HEAP32[$0 + 272 >> 2] = $1;
    _jsvTrace(HEAP32[$4 + 272 >> 2], HEAP32[$4 + 312 >> 2] + 2 | 0, HEAP32[$4 + 308 >> 2], HEAP32[$4 + 304 >> 2] + 1 | 0);
    break label$45;
   }
   if (jsvHasChildren(HEAP32[$4 + 316 >> 2]) & 1) {
    jsvIteratorNew($4 + 224 | 0, HEAP32[$4 + 316 >> 2], 0);
    HEAP8[$4 + 223 | 0] = 1;
    while (1) {
     if (jsvIteratorHasElement($4 + 224 | 0) & 1) {
      $0 = jspIsInterrupted() ^ -1;
     } else {
      $0 = 0;
     }
     if ($0 & 1) {
      if (HEAP8[$4 + 223 | 0] & 1) {
       jsiConsolePrintf(3311, 0);
      }
      HEAP8[$4 + 223 | 0] = 0;
      HEAP32[$4 + 216 >> 2] = jsvIteratorGetKey($4 + 224 | 0);
      _jsvTrace(HEAP32[$4 + 216 >> 2], HEAP32[$4 + 312 >> 2] + 2 | 0, HEAP32[$4 + 308 >> 2], HEAP32[$4 + 304 >> 2] + 1 | 0);
      jsvUnLock(HEAP32[$4 + 216 >> 2]);
      jsiConsolePrintf(3311, 0);
      jsvIteratorNext($4 + 224 | 0);
      continue;
     }
     break;
    }
    jsvIteratorFree($4 + 224 | 0);
    if (!(HEAP8[$4 + 223 | 0] & 1)) {
     HEAP32[$4 + 300 >> 2] = 0;
     while (1) {
      if (HEAP32[$4 + 300 >> 2] < HEAP32[$4 + 312 >> 2]) {
       jsiConsolePrintString(3002);
       HEAP32[$4 + 300 >> 2] = HEAP32[$4 + 300 >> 2] + 1;
       continue;
      }
      break;
     }
    }
   }
  }
  HEAP32[$4 + 32 >> 2] = HEAP8[$4 + 291 | 0];
  jsiConsolePrintf(3313, $4 + 32 | 0);
 }
 global$0 = $4 + 320 | 0;
}
function tflite__reference_integer_ops__DepthwiseConvPerChannel_28tflite__DepthwiseParams_20const__2c_20int_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0;
 $11 = global$0 - 192 | 0;
 global$0 = $11;
 HEAP32[$11 + 188 >> 2] = $0;
 HEAP32[$11 + 184 >> 2] = $1;
 HEAP32[$11 + 180 >> 2] = $2;
 HEAP32[$11 + 176 >> 2] = $3;
 HEAP32[$11 + 172 >> 2] = $4;
 HEAP32[$11 + 168 >> 2] = $5;
 HEAP32[$11 + 164 >> 2] = $6;
 HEAP32[$11 + 160 >> 2] = $7;
 HEAP32[$11 + 156 >> 2] = $8;
 HEAP32[$11 + 152 >> 2] = $9;
 HEAP32[$11 + 148 >> 2] = $10;
 HEAP32[$11 + 144 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 10 >> 1];
 HEAP32[$11 + 140 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 12 >> 1];
 HEAP32[$11 + 136 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 14 >> 1];
 HEAP32[$11 + 132 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 16 >> 1];
 HEAP32[$11 + 128 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 2 >> 1];
 HEAP32[$11 + 124 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 4 >> 1];
 HEAP32[$11 + 120 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 18 >> 1];
 HEAP32[$11 + 116 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 20 >> 2];
 HEAP32[$11 + 112 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 28 >> 2];
 HEAP32[$11 + 108 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 40 >> 2];
 HEAP32[$11 + 104 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 44 >> 2];
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$11 + 176 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$11 + 168 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$11 + 152 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 label$4 : {
  if (HEAP32[$11 + 108 >> 2] > HEAP32[$11 + 104 >> 2]) {
   break label$4;
  }
 }
 HEAP32[$11 + 100 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 176 >> 2], 0, HEAP32[$11 + 152 >> 2], 0);
 HEAP32[$11 + 96 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 168 >> 2], 3, HEAP32[$11 + 152 >> 2], 3);
 HEAP32[$11 + 92 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 176 >> 2], 1);
 HEAP32[$11 + 88 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 176 >> 2], 2);
 HEAP32[$11 + 84 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 176 >> 2], 3);
 HEAP32[$11 + 80 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 168 >> 2], 1);
 HEAP32[$11 + 76 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 168 >> 2], 2);
 HEAP32[$11 + 72 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 152 >> 2], 1);
 HEAP32[$11 + 68 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 152 >> 2], 2);
 label$5 : {
  if (HEAP32[$11 + 96 >> 2] != (Math_imul(HEAP32[$11 + 84 >> 2], HEAP32[$11 + 120 >> 2]) | 0)) {
   break label$5;
  }
 }
 label$6 : {
  if ((tflite__RuntimeShape__FlatSize_28_29_20const(HEAP32[$11 + 160 >> 2]) | 0) != HEAP32[$11 + 96 >> 2]) {
   break label$6;
  }
 }
 HEAP32[$11 + 64 >> 2] = 0;
 while (1) {
  if (HEAP32[$11 + 64 >> 2] < HEAP32[$11 + 100 >> 2]) {
   HEAP32[$11 + 60 >> 2] = 0;
   while (1) {
    if (HEAP32[$11 + 60 >> 2] < HEAP32[$11 + 72 >> 2]) {
     HEAP32[$11 + 56 >> 2] = 0;
     while (1) {
      if (HEAP32[$11 + 56 >> 2] < HEAP32[$11 + 68 >> 2]) {
       HEAP32[$11 + 52 >> 2] = 0;
       while (1) {
        if (HEAP32[$11 + 52 >> 2] < HEAP32[$11 + 84 >> 2]) {
         HEAP32[$11 + 48 >> 2] = 0;
         while (1) {
          if (HEAP32[$11 + 48 >> 2] < HEAP32[$11 + 120 >> 2]) {
           HEAP32[$11 + 44 >> 2] = HEAP32[$11 + 48 >> 2] + Math_imul(HEAP32[$11 + 52 >> 2], HEAP32[$11 + 120 >> 2]);
           HEAP32[$11 + 40 >> 2] = Math_imul(HEAP32[$11 + 56 >> 2], HEAP32[$11 + 144 >> 2]) - HEAP32[$11 + 128 >> 2];
           HEAP32[$11 + 36 >> 2] = Math_imul(HEAP32[$11 + 60 >> 2], HEAP32[$11 + 140 >> 2]) - HEAP32[$11 + 124 >> 2];
           HEAP32[$11 + 32 >> 2] = 0;
           HEAP32[$11 + 28 >> 2] = 0;
           while (1) {
            if (HEAP32[$11 + 28 >> 2] < HEAP32[$11 + 80 >> 2]) {
             HEAP32[$11 + 24 >> 2] = 0;
             while (1) {
              if (HEAP32[$11 + 24 >> 2] < HEAP32[$11 + 76 >> 2]) {
               HEAP32[$11 + 20 >> 2] = HEAP32[$11 + 40 >> 2] + Math_imul(HEAP32[$11 + 136 >> 2], HEAP32[$11 + 24 >> 2]);
               HEAP32[$11 + 16 >> 2] = HEAP32[$11 + 36 >> 2] + Math_imul(HEAP32[$11 + 132 >> 2], HEAP32[$11 + 28 >> 2]);
               $0 = $11;
               $1 = 0;
               label$21 : {
                if (HEAP32[$11 + 20 >> 2] < 0) {
                 break label$21;
                }
                $1 = 0;
                if (HEAP32[$11 + 20 >> 2] >= HEAP32[$11 + 88 >> 2]) {
                 break label$21;
                }
                $1 = 0;
                if (HEAP32[$11 + 16 >> 2] < 0) {
                 break label$21;
                }
                $1 = HEAP32[$11 + 16 >> 2] < HEAP32[$11 + 92 >> 2];
               }
               HEAP8[$0 + 15 | 0] = $1;
               if (HEAP8[$11 + 15 | 0] & 1) {
                HEAP32[$11 + 8 >> 2] = HEAP8[HEAP32[$11 + 172 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 176 >> 2], HEAP32[$11 + 64 >> 2], HEAP32[$11 + 16 >> 2], HEAP32[$11 + 20 >> 2], HEAP32[$11 + 52 >> 2]) | 0];
                HEAP32[$11 + 4 >> 2] = HEAP8[HEAP32[$11 + 164 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 168 >> 2], 0, HEAP32[$11 + 28 >> 2], HEAP32[$11 + 24 >> 2], HEAP32[$11 + 44 >> 2]) | 0];
                HEAP32[$11 + 32 >> 2] = HEAP32[$11 + 32 >> 2] + Math_imul(HEAP32[$11 + 4 >> 2], HEAP32[$11 + 8 >> 2] + HEAP32[$11 + 116 >> 2] | 0);
               }
               HEAP32[$11 + 24 >> 2] = HEAP32[$11 + 24 >> 2] + 1;
               continue;
              }
              break;
             }
             HEAP32[$11 + 28 >> 2] = HEAP32[$11 + 28 >> 2] + 1;
             continue;
            }
            break;
           }
           if (HEAP32[$11 + 156 >> 2]) {
            HEAP32[$11 + 32 >> 2] = HEAP32[HEAP32[$11 + 156 >> 2] + (HEAP32[$11 + 44 >> 2] << 2) >> 2] + HEAP32[$11 + 32 >> 2];
           }
           $0 = $11 + 32 | 0;
           $1 = $11 + 104 | 0;
           $2 = $11 + 108 | 0;
           HEAP32[$11 + 32 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$11 + 32 >> 2], HEAP32[HEAP32[$11 + 184 >> 2] + (HEAP32[$11 + 44 >> 2] << 2) >> 2], HEAP32[HEAP32[$11 + 180 >> 2] + (HEAP32[$11 + 44 >> 2] << 2) >> 2]);
           HEAP32[$11 + 32 >> 2] = HEAP32[$11 + 112 >> 2] + HEAP32[$11 + 32 >> 2];
           HEAP32[$11 + 32 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, $2) >> 2];
           HEAP32[$11 + 32 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0, $1) >> 2];
           $0 = HEAP32[$11 + 32 >> 2];
           HEAP8[HEAP32[$11 + 148 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 152 >> 2], HEAP32[$11 + 64 >> 2], HEAP32[$11 + 60 >> 2], HEAP32[$11 + 56 >> 2], HEAP32[$11 + 44 >> 2]) | 0] = $0;
           HEAP32[$11 + 48 >> 2] = HEAP32[$11 + 48 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAP32[$11 + 52 >> 2] = HEAP32[$11 + 52 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$11 + 56 >> 2] = HEAP32[$11 + 56 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$11 + 60 >> 2] = HEAP32[$11 + 60 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$11 + 64 >> 2] = HEAP32[$11 + 64 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $11 + 192 | 0;
}
function vcbprintf($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 128 | 0;
 global$0 = $4;
 HEAP32[$4 + 124 >> 2] = $0;
 HEAP32[$4 + 120 >> 2] = $1;
 HEAP32[$4 + 116 >> 2] = $2;
 HEAP32[$4 + 112 >> 2] = $3;
 while (1) {
  label$2 : {
   if (!HEAPU8[HEAP32[$4 + 116 >> 2]]) {
    break label$2;
   }
   label$3 : {
    if (HEAP8[HEAP32[$4 + 116 >> 2]] == 37) {
     HEAP32[$4 + 116 >> 2] = HEAP32[$4 + 116 >> 2] + 1;
     $0 = HEAP32[$4 + 116 >> 2];
     HEAP32[$4 + 116 >> 2] = $0 + 1;
     HEAP8[$4 + 79 | 0] = HEAPU8[$0 | 0];
     $0 = HEAP8[$4 + 79 | 0] + -32 | 0;
     if ($0 >>> 0 > 88) {
      break label$2;
     }
     label$5 : {
      label$6 : {
       switch ($0 - 1 | 0) {
       default:
        HEAP32[$4 + 72 >> 2] = 3639;
        if (HEAP8[$4 + 79 | 0] == 48) {
         HEAP32[$4 + 72 >> 2] = 3641;
         $0 = HEAP32[$4 + 116 >> 2];
         HEAP32[$4 + 116 >> 2] = $0 + 1;
         HEAP8[$4 + 79 | 0] = HEAPU8[$0 | 0];
        }
        HEAP32[$4 + 68 >> 2] = HEAP8[$4 + 79 | 0] - 48;
        $0 = HEAP32[$4 + 112 >> 2];
        HEAP32[$4 + 112 >> 2] = $0 + 4;
        HEAP32[$4 + 64 >> 2] = HEAP32[$0 >> 2];
        label$18 : {
         if (HEAP8[HEAP32[$4 + 116 >> 2]] == 120) {
          itostr_extra(HEAP32[$4 + 64 >> 2], $4 + 80 | 0, 0, 16);
          break label$18;
         }
         itostr(HEAP32[$4 + 64 >> 2], $4 + 80 | 0, 10);
        }
        HEAP32[$4 + 116 >> 2] = HEAP32[$4 + 116 >> 2] + 1;
        HEAP32[$4 + 60 >> 2] = strlen($4 + 80 | 0);
        while (1) {
         if (HEAP32[$4 + 60 >> 2] < HEAP32[$4 + 68 >> 2]) {
          FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]](HEAP32[$4 + 72 >> 2], HEAP32[$4 + 120 >> 2]);
          HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 60 >> 2] + 1;
          continue;
         }
         break;
        }
        FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]]($4 + 80 | 0, HEAP32[$4 + 120 >> 2]);
        break label$5;
       case 67:
        $0 = HEAP32[$4 + 112 >> 2];
        HEAP32[$4 + 112 >> 2] = $0 + 4;
        $1 = HEAP32[$0 >> 2];
        $0 = $4 + 80 | 0;
        itostr($1, $0, 10);
        FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]]($0, HEAP32[$4 + 120 >> 2]);
        break label$5;
       case 87:
        $0 = HEAP32[$4 + 112 >> 2];
        HEAP32[$4 + 112 >> 2] = $0 + 4;
        $1 = HEAP32[$0 >> 2];
        $0 = $4 + 80 | 0;
        itostr_extra($1, $0, 0, 16);
        FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]]($0, HEAP32[$4 + 120 >> 2]);
        break label$5;
       case 43:
        HEAP32[$4 + 56 >> 2] = 10;
        HEAP8[$4 + 55 | 0] = 1;
        if (HEAP8[HEAP32[$4 + 116 >> 2]] == 120) {
         HEAP32[$4 + 56 >> 2] = 16;
         HEAP32[$4 + 116 >> 2] = HEAP32[$4 + 116 >> 2] + 1;
         HEAP8[$4 + 55 | 0] = 0;
        }
        $0 = HEAP32[$4 + 112 >> 2];
        HEAP32[$4 + 112 >> 2] = $0 + 4;
        $1 = HEAP32[$0 >> 2];
        $0 = $4 + 80 | 0;
        itostr_extra($1, $0, HEAP8[$4 + 55 | 0] & 1, HEAP32[$4 + 56 >> 2]);
        FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]]($0, HEAP32[$4 + 120 >> 2]);
        break label$5;
       case 69:
        $0 = HEAP32[$4 + 112 >> 2] + 7 & -8;
        HEAP32[$4 + 112 >> 2] = $0 + 8;
        $5 = HEAPF64[$0 >> 3];
        $0 = $4 + 80 | 0;
        ftoa_bounded($5, $0, 32);
        FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]]($0, HEAP32[$4 + 120 >> 2]);
        break label$5;
       case 82:
        $0 = HEAP32[$4 + 124 >> 2];
        $1 = HEAP32[$4 + 112 >> 2];
        HEAP32[$4 + 112 >> 2] = $1 + 4;
        FUNCTION_TABLE[$0](HEAP32[$1 >> 2], HEAP32[$4 + 120 >> 2]);
        break label$5;
       case 66:
        $0 = HEAP32[$4 + 112 >> 2];
        HEAP32[$4 + 112 >> 2] = $0 + 4;
        HEAP8[$4 + 80 | 0] = HEAP32[$0 >> 2];
        HEAP8[$4 + 81 | 0] = 0;
        FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]]($4 + 80 | 0, HEAP32[$4 + 120 >> 2]);
        break label$5;
       case 48:
       case 80:
       case 85:
        HEAP8[$4 + 54 | 0] = HEAP8[$4 + 79 | 0] != 118;
        HEAP8[$4 + 53 | 0] = HEAP8[$4 + 79 | 0] == 81;
        if (HEAP8[$4 + 54 | 0] & 1) {
         FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]](3643, HEAP32[$4 + 120 >> 2]);
        }
        $0 = HEAP32[$4 + 112 >> 2];
        HEAP32[$4 + 112 >> 2] = $0 + 4;
        HEAP32[$4 + 48 >> 2] = jsvAsString(HEAP32[$0 >> 2]);
        HEAP8[$4 + 81 | 0] = 0;
        if (jsvIsString(HEAP32[$4 + 48 >> 2]) & 1) {
         jsvStringIteratorNew($4 + 24 | 0, HEAP32[$4 + 48 >> 2], 0);
         while (1) {
          if (jsvStringIteratorHasChar($4 + 24 | 0) & 1) {
           HEAP8[$4 + 80 | 0] = jsvStringIteratorGetCharAndNext($4 + 24 | 0);
           label$27 : {
            if (HEAP8[$4 + 54 | 0] & 1) {
             $0 = HEAP32[$4 + 124 >> 2];
             FUNCTION_TABLE[$0](escapeCharacter(HEAP8[$4 + 80 | 0], HEAP8[$4 + 53 | 0] & 1), HEAP32[$4 + 120 >> 2]);
             break label$27;
            }
            FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]]($4 + 80 | 0, HEAP32[$4 + 120 >> 2]);
           }
           continue;
          }
          break;
         }
         jsvStringIteratorFree($4 + 24 | 0);
         jsvUnLock(HEAP32[$4 + 48 >> 2]);
        }
        if (HEAP8[$4 + 54 | 0] & 1) {
         FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]](3643, HEAP32[$4 + 120 >> 2]);
        }
        break label$5;
       case 73:
        $0 = HEAP32[$4 + 112 >> 2];
        HEAP32[$4 + 112 >> 2] = $0 + 4;
        HEAP32[$4 + 20 >> 2] = HEAP32[$0 >> 2];
        jsfGetJSONWithCallback(HEAP32[$4 + 20 >> 2], 0, 2085, 0, HEAP32[$4 + 124 >> 2], HEAP32[$4 + 120 >> 2]);
        break label$5;
       case 83:
        $0 = HEAP32[$4 + 112 >> 2];
        HEAP32[$4 + 112 >> 2] = $0 + 4;
        HEAP32[$4 + 16 >> 2] = HEAP32[$0 >> 2];
        $0 = $4;
        $2 = jsvIsNull(HEAP32[$4 + 16 >> 2]) & 1;
        $1 = 3645;
        label$30 : {
         if ($2) {
          break label$30;
         }
         $1 = jswGetBasicObjectName(HEAP32[$4 + 16 >> 2]);
        }
        HEAP32[$0 + 12 >> 2] = $1;
        if (!HEAP32[$4 + 12 >> 2]) {
         HEAP32[$4 + 12 >> 2] = jsvGetTypeOf(HEAP32[$4 + 16 >> 2]);
        }
        FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]](HEAP32[$4 + 12 >> 2], HEAP32[$4 + 120 >> 2]);
        break label$5;
       case 0:
       case 1:
       case 2:
       case 3:
       case 4:
       case 5:
       case 6:
       case 7:
       case 8:
       case 9:
       case 10:
       case 11:
       case 12:
       case 13:
       case 14:
       case 25:
       case 26:
       case 27:
       case 28:
       case 29:
       case 30:
       case 31:
       case 32:
       case 33:
       case 34:
       case 35:
       case 36:
       case 37:
       case 38:
       case 39:
       case 40:
       case 41:
       case 42:
       case 44:
       case 45:
       case 46:
       case 47:
       case 49:
       case 50:
       case 51:
       case 52:
       case 53:
       case 54:
       case 55:
       case 56:
       case 57:
       case 58:
       case 59:
       case 60:
       case 61:
       case 62:
       case 63:
       case 64:
       case 65:
       case 68:
       case 70:
       case 71:
       case 72:
       case 74:
       case 75:
       case 76:
       case 77:
       case 78:
       case 81:
       case 84:
       case 86:
        break label$2;
       case 79:
        break label$6;
       }
      }
      $0 = HEAP32[$4 + 112 >> 2];
      HEAP32[$4 + 112 >> 2] = $0 + 4;
      $1 = $4 + 80 | 0;
      jshGetPinString($1, HEAP32[$0 >> 2] & 255);
      FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]]($1, HEAP32[$4 + 120 >> 2]);
     }
     break label$3;
    }
    $0 = HEAP32[$4 + 116 >> 2];
    HEAP32[$4 + 116 >> 2] = $0 + 1;
    HEAP8[$4 + 80 | 0] = HEAPU8[$0 | 0];
    HEAP8[$4 + 81 | 0] = 0;
    FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]]($4 + 80 | 0, HEAP32[$4 + 120 >> 2]);
   }
   continue;
  }
  break;
 }
 global$0 = $4 + 128 | 0;
}
function tflite__reference_integer_ops__ConvPerChannel_28tflite__ConvParams_20const__2c_20int_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0;
 $11 = global$0 - 192 | 0;
 global$0 = $11;
 HEAP32[$11 + 188 >> 2] = $0;
 HEAP32[$11 + 184 >> 2] = $1;
 HEAP32[$11 + 180 >> 2] = $2;
 HEAP32[$11 + 176 >> 2] = $3;
 HEAP32[$11 + 172 >> 2] = $4;
 HEAP32[$11 + 168 >> 2] = $5;
 HEAP32[$11 + 164 >> 2] = $6;
 HEAP32[$11 + 160 >> 2] = $7;
 HEAP32[$11 + 156 >> 2] = $8;
 HEAP32[$11 + 152 >> 2] = $9;
 HEAP32[$11 + 148 >> 2] = $10;
 HEAP32[$11 + 144 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 20 >> 2];
 HEAP32[$11 + 140 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 10 >> 1];
 HEAP32[$11 + 136 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 12 >> 1];
 HEAP32[$11 + 132 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 14 >> 1];
 HEAP32[$11 + 128 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 16 >> 1];
 HEAP32[$11 + 124 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 2 >> 1];
 HEAP32[$11 + 120 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 4 >> 1];
 HEAP32[$11 + 116 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 28 >> 2];
 HEAP32[$11 + 112 >> 2] = -128;
 HEAP32[$11 + 108 >> 2] = 127;
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$11 + 176 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$11 + 168 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$11 + 152 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 HEAP32[$11 + 104 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 176 >> 2], 0, HEAP32[$11 + 152 >> 2], 0);
 HEAP32[$11 + 100 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 176 >> 2], 3, HEAP32[$11 + 168 >> 2], 3);
 HEAP32[$11 + 96 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 168 >> 2], 0, HEAP32[$11 + 152 >> 2], 3);
 if (HEAP32[$11 + 156 >> 2]) {
  label$5 : {
   if ((tflite__RuntimeShape__FlatSize_28_29_20const(HEAP32[$11 + 160 >> 2]) | 0) != HEAP32[$11 + 96 >> 2]) {
    break label$5;
   }
  }
 }
 HEAP32[$11 + 92 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 176 >> 2], 1);
 HEAP32[$11 + 88 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 176 >> 2], 2);
 HEAP32[$11 + 84 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 168 >> 2], 1);
 HEAP32[$11 + 80 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 168 >> 2], 2);
 HEAP32[$11 + 76 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 152 >> 2], 1);
 HEAP32[$11 + 72 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 152 >> 2], 2);
 HEAP32[$11 + 68 >> 2] = 0;
 while (1) {
  if (HEAP32[$11 + 68 >> 2] < HEAP32[$11 + 104 >> 2]) {
   HEAP32[$11 + 64 >> 2] = 0;
   while (1) {
    if (HEAP32[$11 + 64 >> 2] < HEAP32[$11 + 76 >> 2]) {
     HEAP32[$11 + 60 >> 2] = 0;
     while (1) {
      if (HEAP32[$11 + 60 >> 2] < HEAP32[$11 + 72 >> 2]) {
       HEAP32[$11 + 56 >> 2] = 0;
       while (1) {
        if (HEAP32[$11 + 56 >> 2] < HEAP32[$11 + 96 >> 2]) {
         HEAP32[$11 + 52 >> 2] = Math_imul(HEAP32[$11 + 60 >> 2], HEAP32[$11 + 140 >> 2]) - HEAP32[$11 + 124 >> 2];
         HEAP32[$11 + 48 >> 2] = Math_imul(HEAP32[$11 + 64 >> 2], HEAP32[$11 + 136 >> 2]) - HEAP32[$11 + 120 >> 2];
         HEAP32[$11 + 44 >> 2] = 0;
         HEAP32[$11 + 40 >> 2] = 0;
         while (1) {
          if (HEAP32[$11 + 40 >> 2] < HEAP32[$11 + 84 >> 2]) {
           HEAP32[$11 + 36 >> 2] = 0;
           while (1) {
            if (HEAP32[$11 + 36 >> 2] < HEAP32[$11 + 80 >> 2]) {
             HEAP32[$11 + 32 >> 2] = 0;
             while (1) {
              if (HEAP32[$11 + 32 >> 2] < HEAP32[$11 + 100 >> 2]) {
               HEAP32[$11 + 28 >> 2] = HEAP32[$11 + 52 >> 2] + Math_imul(HEAP32[$11 + 132 >> 2], HEAP32[$11 + 36 >> 2]);
               HEAP32[$11 + 24 >> 2] = HEAP32[$11 + 48 >> 2] + Math_imul(HEAP32[$11 + 128 >> 2], HEAP32[$11 + 40 >> 2]);
               $0 = $11;
               $1 = 0;
               label$20 : {
                if (HEAP32[$11 + 28 >> 2] < 0) {
                 break label$20;
                }
                $1 = 0;
                if (HEAP32[$11 + 28 >> 2] >= HEAP32[$11 + 88 >> 2]) {
                 break label$20;
                }
                $1 = 0;
                if (HEAP32[$11 + 24 >> 2] < 0) {
                 break label$20;
                }
                $1 = HEAP32[$11 + 24 >> 2] < HEAP32[$11 + 92 >> 2];
               }
               HEAP8[$0 + 23 | 0] = $1;
               if (HEAP8[$11 + 23 | 0] & 1) {
                HEAP32[$11 + 16 >> 2] = HEAP8[HEAP32[$11 + 172 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 176 >> 2], HEAP32[$11 + 68 >> 2], HEAP32[$11 + 24 >> 2], HEAP32[$11 + 28 >> 2], HEAP32[$11 + 32 >> 2]) | 0];
                HEAP32[$11 + 12 >> 2] = HEAP8[HEAP32[$11 + 164 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 168 >> 2], HEAP32[$11 + 56 >> 2], HEAP32[$11 + 40 >> 2], HEAP32[$11 + 36 >> 2], HEAP32[$11 + 32 >> 2]) | 0];
                HEAP32[$11 + 44 >> 2] = HEAP32[$11 + 44 >> 2] + Math_imul(HEAP32[$11 + 12 >> 2], HEAP32[$11 + 16 >> 2] + HEAP32[$11 + 144 >> 2] | 0);
               }
               HEAP32[$11 + 32 >> 2] = HEAP32[$11 + 32 >> 2] + 1;
               continue;
              }
              break;
             }
             HEAP32[$11 + 36 >> 2] = HEAP32[$11 + 36 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$11 + 40 >> 2] = HEAP32[$11 + 40 >> 2] + 1;
           continue;
          }
          break;
         }
         if (HEAP32[$11 + 156 >> 2]) {
          HEAP32[$11 + 44 >> 2] = HEAP32[HEAP32[$11 + 156 >> 2] + (HEAP32[$11 + 56 >> 2] << 2) >> 2] + HEAP32[$11 + 44 >> 2];
         }
         $0 = $11 + 44 | 0;
         $1 = $11 + 108 | 0;
         $2 = $11 + 112 | 0;
         HEAP32[$11 + 44 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$11 + 44 >> 2], HEAP32[HEAP32[$11 + 184 >> 2] + (HEAP32[$11 + 56 >> 2] << 2) >> 2], HEAP32[HEAP32[$11 + 180 >> 2] + (HEAP32[$11 + 56 >> 2] << 2) >> 2]);
         HEAP32[$11 + 44 >> 2] = HEAP32[$11 + 116 >> 2] + HEAP32[$11 + 44 >> 2];
         HEAP32[$11 + 44 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, $2) >> 2];
         HEAP32[$11 + 44 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0, $1) >> 2];
         $0 = HEAP32[$11 + 44 >> 2];
         HEAP8[HEAP32[$11 + 148 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 152 >> 2], HEAP32[$11 + 68 >> 2], HEAP32[$11 + 64 >> 2], HEAP32[$11 + 60 >> 2], HEAP32[$11 + 56 >> 2]) | 0] = $0;
         HEAP32[$11 + 56 >> 2] = HEAP32[$11 + 56 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$11 + 60 >> 2] = HEAP32[$11 + 60 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$11 + 64 >> 2] = HEAP32[$11 + 64 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$11 + 68 >> 2] = HEAP32[$11 + 68 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $11 + 192 | 0;
}
function jspeFactor() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = global$0 - 96 | 0;
 global$0 = $0;
 label$1 : {
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 128) {
   HEAP32[$0 + 88 >> 2] = jspGetNamedVariable(jslGetTokenValueAsString());
   jslGetNextToken();
   label$3 : {
    if (HEAP16[HEAP32[13768] + 2 >> 1] == 133) {
     jsExceptionHere(2, 4531, 0);
     break label$3;
    }
    label$5 : {
     if (HEAP16[HEAP32[13768] + 2 >> 1] != 162) {
      break label$5;
     }
     if (!(jsvIsName(HEAP32[$0 + 88 >> 2]) & 1)) {
      break label$5;
     }
     HEAP32[$0 + 84 >> 2] = jspeArrowFunction(0, HEAP32[$0 + 88 >> 2]);
     jsvUnLock(HEAP32[$0 + 88 >> 2]);
     HEAP32[$0 + 88 >> 2] = HEAP32[$0 + 84 >> 2];
    }
   }
   HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 88 >> 2];
   break label$1;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 129) {
   HEAP32[$0 + 80 >> 2] = 0;
   if ((HEAP32[23778] & 63) == 1) {
    HEAP32[$0 + 80 >> 2] = jsvNewFromLongInteger(stringToInt(jslGetTokenValueAsString()), i64toi32_i32$HIGH_BITS);
   }
   jslGetNextToken();
   HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 80 >> 2];
   break label$1;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 130) {
   HEAP32[$0 + 76 >> 2] = 0;
   if ((HEAP32[23778] & 63) == 1) {
    HEAP32[$0 + 76 >> 2] = jsvNewFromFloat(stringToFloat(jslGetTokenValueAsString()));
   }
   jslGetNextToken();
   HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 76 >> 2];
   break label$1;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 40) {
   jslGetNextToken();
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   HEAP32[$0 + 92 >> 2] = jspeExpressionOrArrowFunction();
   break label$1;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 180) {
   jslGetNextToken();
   $2 = $0;
   label$13 : {
    if ((HEAP32[23778] & 63) == 1) {
     $1 = jsvNewFromBool(1);
     break label$13;
    }
    $1 = 0;
   }
   HEAP32[$2 + 92 >> 2] = $1;
   break label$1;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 181) {
   jslGetNextToken();
   $2 = $0;
   label$16 : {
    if ((HEAP32[23778] & 63) == 1) {
     $1 = jsvNewFromBool(0);
     break label$16;
    }
    $1 = 0;
   }
   HEAP32[$2 + 92 >> 2] = $1;
   break label$1;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 182) {
   jslGetNextToken();
   $2 = $0;
   label$19 : {
    if ((HEAP32[23778] & 63) == 1) {
     $1 = jsvNewWithFlags(2);
     break label$19;
    }
    $1 = 0;
   }
   HEAP32[$2 + 92 >> 2] = $1;
   break label$1;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 183) {
   jslGetNextToken();
   HEAP32[$0 + 92 >> 2] = 0;
   break label$1;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 131) {
   HEAP32[$0 + 72 >> 2] = 0;
   if ((HEAP32[23778] & 63) == 1) {
    HEAP32[$0 + 72 >> 2] = jslGetTokenValueAsVar();
   }
   jslGetNextToken();
   HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 72 >> 2];
   break label$1;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 133) {
   HEAP32[$0 + 92 >> 2] = jspeTemplateLiteral();
   break label$1;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 135) {
   $2 = $0 + 32 | 0;
   HEAP32[$0 + 68 >> 2] = 0;
   HEAP32[$0 + 64 >> 2] = jslGetTokenValueAsVar();
   HEAP32[$0 + 60 >> 2] = 0;
   HEAP32[$0 + 56 >> 2] = 0;
   jsvStringIteratorNew($2, HEAP32[$0 + 64 >> 2], 0);
   while (1) {
    if (jsvStringIteratorHasChar($0 + 32 | 0) & 1) {
     HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 56 >> 2] + 1;
     if ((jsvStringIteratorGetCharAndNext($0 + 32 | 0) & 255) == 47) {
      HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 56 >> 2];
     }
     continue;
    }
    break;
   }
   jsvStringIteratorFree($0 + 32 | 0);
   HEAP32[$0 + 28 >> 2] = 0;
   if (HEAPU32[$0 + 60 >> 2] < HEAPU32[$0 + 56 >> 2]) {
    HEAP32[$0 + 28 >> 2] = jsvNewFromStringVar(HEAP32[$0 + 64 >> 2], HEAP32[$0 + 60 >> 2], 2147483647);
   }
   HEAP32[$0 + 24 >> 2] = jsvNewFromStringVar(HEAP32[$0 + 64 >> 2], 1, HEAP32[$0 + 60 >> 2] - 2 | 0);
   HEAP32[$0 + 68 >> 2] = jswrap_regexp_constructor(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2]);
   jsvUnLock3(HEAP32[$0 + 64 >> 2], HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
   jslGetNextToken();
   HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 68 >> 2];
   break label$1;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 123) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   HEAP32[$0 + 92 >> 2] = jspeFactorObject();
   break label$1;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 91) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   HEAP32[$0 + 92 >> 2] = jspeFactorArray();
   break label$1;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 170) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   jslGetNextToken();
   HEAP32[$0 + 92 >> 2] = jspeFunctionDefinition(1);
   break label$1;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 194) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   jslGetNextToken();
   HEAP32[$0 + 92 >> 2] = jspeClassDefinition(1);
   break label$1;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 196) {
   jslGetNextToken();
   if (jsvIsObject(HEAP32[23777]) & 1) {
    HEAP32[$0 + 20 >> 2] = jsvObjectGetChild(HEAP32[23777], 3684, 0);
    $2 = $0;
    label$40 : {
     if (jsvIsObject(HEAP32[$0 + 20 >> 2]) & 1) {
      $1 = jsvObjectGetChild(HEAP32[$0 + 20 >> 2], 3684, 0);
      break label$40;
     }
     $1 = 0;
    }
    HEAP32[$2 + 16 >> 2] = $1;
    jsvUnLock(HEAP32[$0 + 20 >> 2]);
    if (!HEAP32[$0 + 16 >> 2]) {
     jsExceptionHere(2, 4570, 0);
     HEAP32[$0 + 92 >> 2] = 0;
     break label$1;
    }
    if (HEAP16[HEAP32[13768] + 2 >> 1] == 40) {
     HEAP32[$0 + 12 >> 2] = jsvObjectGetChild(HEAP32[$0 + 16 >> 2], 4362, 0);
     jsvUnLock(HEAP32[$0 + 16 >> 2]);
     HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 12 >> 2];
     break label$1;
    }
    HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 16 >> 2];
    break label$1;
   }
   if (jsvIsFunction(HEAP32[23777]) & 1) {
    HEAP32[$0 + 8 >> 2] = jsvObjectGetChild(HEAP32[23777], 3674, 0);
    $2 = $0;
    label$45 : {
     if (jsvIsObject(HEAP32[$0 + 8 >> 2]) & 1) {
      $1 = jsvObjectGetChild(HEAP32[$0 + 8 >> 2], 3684, 0);
      break label$45;
     }
     $1 = 0;
    }
    HEAP32[$2 + 4 >> 2] = $1;
    jsvUnLock(HEAP32[$0 + 8 >> 2]);
    if (!HEAP32[$0 + 4 >> 2]) {
     jsExceptionHere(2, 4570, 0);
     HEAP32[$0 + 92 >> 2] = 0;
     break label$1;
    }
    HEAP32[$0 >> 2] = jsvObjectGetChild(HEAP32[$0 + 4 >> 2], 4362, 0);
    jsvUnLock(HEAP32[$0 + 4 >> 2]);
    HEAP32[$0 + 92 >> 2] = HEAP32[$0 >> 2];
    break label$1;
   }
   jsExceptionHere(2, 4570, 0);
   HEAP32[$0 + 92 >> 2] = 0;
   break label$1;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 175) {
   jslGetNextToken();
   $2 = $0;
   if (HEAP32[23777]) {
    $1 = HEAP32[23777];
   } else {
    $1 = HEAP32[23774];
   }
   HEAP32[$2 + 92 >> 2] = jsvLockAgain($1);
   break label$1;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 190) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   HEAP32[$0 + 92 >> 2] = jspeFactorDelete();
   break label$1;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 191) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   HEAP32[$0 + 92 >> 2] = jspeFactorTypeOf();
   break label$1;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 192) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   jslGetNextToken();
   jsvUnLock(jspeUnaryExpression());
   HEAP32[$0 + 92 >> 2] = 0;
   break label$1;
  }
  if (!(jslMatch(0) & 1)) {
   HEAP32[$0 + 92 >> 2] = 0;
   break label$1;
  }
  jsExceptionHere(2, 4603, 0);
  HEAP32[$0 + 92 >> 2] = 0;
 }
 global$0 = $0 + 96 | 0;
 return HEAP32[$0 + 92 >> 2];
}
function tflite__reference_ops__depthwise_conv__DepthwiseConvBasicKernel__28tflite__DepthwiseConvOutputRounding_291___Run_28tflite__DepthwiseParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = global$0 - 192 | 0;
 global$0 = $9;
 HEAP32[$9 + 188 >> 2] = $0;
 HEAP32[$9 + 184 >> 2] = $1;
 HEAP32[$9 + 180 >> 2] = $2;
 HEAP32[$9 + 176 >> 2] = $3;
 HEAP32[$9 + 172 >> 2] = $4;
 HEAP32[$9 + 168 >> 2] = $5;
 HEAP32[$9 + 164 >> 2] = $6;
 HEAP32[$9 + 160 >> 2] = $7;
 HEAP32[$9 + 156 >> 2] = $8;
 HEAP32[$9 + 152 >> 2] = HEAP16[HEAP32[$9 + 188 >> 2] + 10 >> 1];
 HEAP32[$9 + 148 >> 2] = HEAP16[HEAP32[$9 + 188 >> 2] + 12 >> 1];
 HEAP32[$9 + 144 >> 2] = HEAP16[HEAP32[$9 + 188 >> 2] + 14 >> 1];
 HEAP32[$9 + 140 >> 2] = HEAP16[HEAP32[$9 + 188 >> 2] + 16 >> 1];
 HEAP32[$9 + 136 >> 2] = HEAP16[HEAP32[$9 + 188 >> 2] + 2 >> 1];
 HEAP32[$9 + 132 >> 2] = HEAP16[HEAP32[$9 + 188 >> 2] + 4 >> 1];
 HEAP32[$9 + 128 >> 2] = HEAP16[HEAP32[$9 + 188 >> 2] + 18 >> 1];
 HEAP32[$9 + 124 >> 2] = HEAP32[HEAP32[$9 + 188 >> 2] + 40 >> 2];
 HEAP32[$9 + 120 >> 2] = HEAP32[HEAP32[$9 + 188 >> 2] + 44 >> 2];
 HEAP32[$9 + 116 >> 2] = HEAP32[HEAP32[$9 + 188 >> 2] + 20 >> 2];
 HEAP32[$9 + 112 >> 2] = HEAP32[HEAP32[$9 + 188 >> 2] + 24 >> 2];
 HEAP32[$9 + 108 >> 2] = HEAP32[HEAP32[$9 + 188 >> 2] + 28 >> 2];
 HEAP32[$9 + 104 >> 2] = HEAP32[HEAP32[$9 + 188 >> 2] + 32 >> 2];
 HEAP32[$9 + 100 >> 2] = HEAP32[HEAP32[$9 + 188 >> 2] + 36 >> 2];
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$9 + 184 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$9 + 176 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$9 + 160 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 label$4 : {
  if (HEAP32[$9 + 124 >> 2] > HEAP32[$9 + 120 >> 2]) {
   break label$4;
  }
 }
 HEAP32[$9 + 96 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 184 >> 2], 0, HEAP32[$9 + 160 >> 2], 0);
 HEAP32[$9 + 92 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 176 >> 2], 3, HEAP32[$9 + 160 >> 2], 3);
 HEAP32[$9 + 88 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 184 >> 2], 1);
 HEAP32[$9 + 84 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 184 >> 2], 2);
 HEAP32[$9 + 80 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 184 >> 2], 3);
 HEAP32[$9 + 76 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 176 >> 2], 1);
 HEAP32[$9 + 72 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 176 >> 2], 2);
 HEAP32[$9 + 68 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 160 >> 2], 1);
 HEAP32[$9 + 64 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 160 >> 2], 2);
 label$5 : {
  if (HEAP32[$9 + 92 >> 2] != (Math_imul(HEAP32[$9 + 80 >> 2], HEAP32[$9 + 128 >> 2]) | 0)) {
   break label$5;
  }
 }
 label$6 : {
  if ((tflite__RuntimeShape__FlatSize_28_29_20const(HEAP32[$9 + 168 >> 2]) | 0) != HEAP32[$9 + 92 >> 2]) {
   break label$6;
  }
 }
 HEAP32[$9 + 60 >> 2] = 0;
 while (1) {
  if (HEAP32[$9 + 60 >> 2] < HEAP32[$9 + 96 >> 2]) {
   HEAP32[$9 + 56 >> 2] = 0;
   while (1) {
    if (HEAP32[$9 + 56 >> 2] < HEAP32[$9 + 68 >> 2]) {
     HEAP32[$9 + 52 >> 2] = 0;
     while (1) {
      if (HEAP32[$9 + 52 >> 2] < HEAP32[$9 + 64 >> 2]) {
       HEAP32[$9 + 48 >> 2] = 0;
       while (1) {
        if (HEAP32[$9 + 48 >> 2] < HEAP32[$9 + 80 >> 2]) {
         HEAP32[$9 + 44 >> 2] = 0;
         while (1) {
          if (HEAP32[$9 + 44 >> 2] < HEAP32[$9 + 128 >> 2]) {
           HEAP32[$9 + 40 >> 2] = HEAP32[$9 + 44 >> 2] + Math_imul(HEAP32[$9 + 48 >> 2], HEAP32[$9 + 128 >> 2]);
           HEAP32[$9 + 36 >> 2] = Math_imul(HEAP32[$9 + 52 >> 2], HEAP32[$9 + 152 >> 2]) - HEAP32[$9 + 136 >> 2];
           HEAP32[$9 + 32 >> 2] = Math_imul(HEAP32[$9 + 56 >> 2], HEAP32[$9 + 148 >> 2]) - HEAP32[$9 + 132 >> 2];
           HEAP32[$9 + 28 >> 2] = 0;
           HEAP32[$9 + 24 >> 2] = 0;
           while (1) {
            if (HEAP32[$9 + 24 >> 2] < HEAP32[$9 + 76 >> 2]) {
             HEAP32[$9 + 20 >> 2] = 0;
             while (1) {
              if (HEAP32[$9 + 20 >> 2] < HEAP32[$9 + 72 >> 2]) {
               HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 36 >> 2] + Math_imul(HEAP32[$9 + 144 >> 2], HEAP32[$9 + 20 >> 2]);
               HEAP32[$9 + 12 >> 2] = HEAP32[$9 + 32 >> 2] + Math_imul(HEAP32[$9 + 140 >> 2], HEAP32[$9 + 24 >> 2]);
               if (!(HEAP32[$9 + 16 >> 2] < 0 | HEAP32[$9 + 16 >> 2] >= HEAP32[$9 + 84 >> 2] | (HEAP32[$9 + 12 >> 2] < 0 | HEAP32[$9 + 12 >> 2] >= HEAP32[$9 + 88 >> 2]))) {
                HEAP32[$9 + 8 >> 2] = HEAPU8[HEAP32[$9 + 180 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$9 + 184 >> 2], HEAP32[$9 + 60 >> 2], HEAP32[$9 + 12 >> 2], HEAP32[$9 + 16 >> 2], HEAP32[$9 + 48 >> 2]) | 0];
                HEAP32[$9 + 4 >> 2] = HEAPU8[HEAP32[$9 + 172 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$9 + 176 >> 2], 0, HEAP32[$9 + 24 >> 2], HEAP32[$9 + 20 >> 2], HEAP32[$9 + 40 >> 2]) | 0];
                HEAP32[$9 + 28 >> 2] = HEAP32[$9 + 28 >> 2] + Math_imul(HEAP32[$9 + 4 >> 2] + HEAP32[$9 + 112 >> 2] | 0, HEAP32[$9 + 8 >> 2] + HEAP32[$9 + 116 >> 2] | 0);
               }
               HEAP32[$9 + 20 >> 2] = HEAP32[$9 + 20 >> 2] + 1;
               continue;
              }
              break;
             }
             HEAP32[$9 + 24 >> 2] = HEAP32[$9 + 24 >> 2] + 1;
             continue;
            }
            break;
           }
           if (HEAP32[$9 + 164 >> 2]) {
            HEAP32[$9 + 28 >> 2] = HEAP32[HEAP32[$9 + 164 >> 2] + (HEAP32[$9 + 40 >> 2] << 2) >> 2] + HEAP32[$9 + 28 >> 2];
           }
           $0 = $9 + 28 | 0;
           $1 = $9 + 120 | 0;
           $2 = $9 + 124 | 0;
           HEAP32[$9 + 28 >> 2] = int_20tflite__reference_ops__depthwise_conv__DepthwiseConvRound__28tflite__DepthwiseConvOutputRounding_291__28int_2c_20int_2c_20int_29(HEAP32[$9 + 28 >> 2], HEAP32[$9 + 104 >> 2], HEAP32[$9 + 100 >> 2]);
           HEAP32[$9 + 28 >> 2] = HEAP32[$9 + 108 >> 2] + HEAP32[$9 + 28 >> 2];
           HEAP32[$9 + 28 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, $2) >> 2];
           HEAP32[$9 + 28 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0, $1) >> 2];
           $0 = HEAP32[$9 + 28 >> 2];
           HEAP8[HEAP32[$9 + 156 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$9 + 160 >> 2], HEAP32[$9 + 60 >> 2], HEAP32[$9 + 56 >> 2], HEAP32[$9 + 52 >> 2], HEAP32[$9 + 40 >> 2]) | 0] = $0;
           HEAP32[$9 + 44 >> 2] = HEAP32[$9 + 44 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAP32[$9 + 48 >> 2] = HEAP32[$9 + 48 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$9 + 52 >> 2] = HEAP32[$9 + 52 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$9 + 56 >> 2] = HEAP32[$9 + 56 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$9 + 60 >> 2] = HEAP32[$9 + 60 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $9 + 192 | 0;
}
function tflite__reference_ops__Conv_28tflite__ConvParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__2c_20void__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0;
 $11 = global$0 - 192 | 0;
 global$0 = $11;
 HEAP32[$11 + 188 >> 2] = $0;
 HEAP32[$11 + 184 >> 2] = $1;
 HEAP32[$11 + 180 >> 2] = $2;
 HEAP32[$11 + 176 >> 2] = $3;
 HEAP32[$11 + 172 >> 2] = $4;
 HEAP32[$11 + 168 >> 2] = $5;
 HEAP32[$11 + 164 >> 2] = $6;
 HEAP32[$11 + 160 >> 2] = $7;
 HEAP32[$11 + 156 >> 2] = $8;
 HEAP32[$11 + 152 >> 2] = $9;
 HEAP32[$11 + 148 >> 2] = $10;
 HEAP32[$11 + 144 >> 2] = 0;
 HEAP32[$11 + 140 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 10 >> 1];
 HEAP32[$11 + 136 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 12 >> 1];
 HEAP32[$11 + 132 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 14 >> 1];
 HEAP32[$11 + 128 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 16 >> 1];
 HEAP32[$11 + 124 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 2 >> 1];
 HEAP32[$11 + 120 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 4 >> 1];
 HEAP32[$11 + 116 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 20 >> 2];
 HEAP32[$11 + 112 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 24 >> 2];
 HEAP32[$11 + 108 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 28 >> 2];
 HEAP32[$11 + 104 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 32 >> 2];
 HEAP32[$11 + 100 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 36 >> 2];
 HEAP32[$11 + 96 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 40 >> 2];
 HEAP32[$11 + 92 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 44 >> 2];
 label$1 : {
  if (HEAP32[$11 + 96 >> 2] > HEAP32[$11 + 92 >> 2]) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$11 + 184 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$11 + 176 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 label$4 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$11 + 160 >> 2]) | 0) != 4) {
   break label$4;
  }
 }
 HEAP32[$11 + 88 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 184 >> 2], 0, HEAP32[$11 + 160 >> 2], 0);
 HEAP32[$11 + 84 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 184 >> 2], 3, HEAP32[$11 + 176 >> 2], 3);
 HEAP32[$11 + 80 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 176 >> 2], 0, HEAP32[$11 + 160 >> 2], 3);
 if (HEAP32[$11 + 164 >> 2]) {
  label$6 : {
   if ((tflite__RuntimeShape__FlatSize_28_29_20const(HEAP32[$11 + 168 >> 2]) | 0) != HEAP32[$11 + 80 >> 2]) {
    break label$6;
   }
  }
 }
 HEAP32[$11 + 76 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 184 >> 2], 1);
 HEAP32[$11 + 72 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 184 >> 2], 2);
 HEAP32[$11 + 68 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 176 >> 2], 1);
 HEAP32[$11 + 64 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 176 >> 2], 2);
 HEAP32[$11 + 60 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 160 >> 2], 1);
 HEAP32[$11 + 56 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 160 >> 2], 2);
 HEAP32[$11 + 52 >> 2] = 0;
 while (1) {
  if (HEAP32[$11 + 52 >> 2] < HEAP32[$11 + 88 >> 2]) {
   HEAP32[$11 + 48 >> 2] = 0;
   while (1) {
    if (HEAP32[$11 + 48 >> 2] < HEAP32[$11 + 60 >> 2]) {
     HEAP32[$11 + 44 >> 2] = 0;
     while (1) {
      if (HEAP32[$11 + 44 >> 2] < HEAP32[$11 + 56 >> 2]) {
       HEAP32[$11 + 40 >> 2] = 0;
       while (1) {
        if (HEAP32[$11 + 40 >> 2] < HEAP32[$11 + 80 >> 2]) {
         HEAP32[$11 + 36 >> 2] = Math_imul(HEAP32[$11 + 44 >> 2], HEAP32[$11 + 140 >> 2]) - HEAP32[$11 + 124 >> 2];
         HEAP32[$11 + 32 >> 2] = Math_imul(HEAP32[$11 + 48 >> 2], HEAP32[$11 + 136 >> 2]) - HEAP32[$11 + 120 >> 2];
         HEAP32[$11 + 28 >> 2] = 0;
         HEAP32[$11 + 24 >> 2] = 0;
         while (1) {
          if (HEAP32[$11 + 24 >> 2] < HEAP32[$11 + 68 >> 2]) {
           HEAP32[$11 + 20 >> 2] = 0;
           while (1) {
            if (HEAP32[$11 + 20 >> 2] < HEAP32[$11 + 64 >> 2]) {
             HEAP32[$11 + 16 >> 2] = 0;
             while (1) {
              if (HEAP32[$11 + 16 >> 2] < HEAP32[$11 + 84 >> 2]) {
               HEAP32[$11 + 12 >> 2] = HEAP32[$11 + 36 >> 2] + Math_imul(HEAP32[$11 + 132 >> 2], HEAP32[$11 + 20 >> 2]);
               HEAP32[$11 + 8 >> 2] = HEAP32[$11 + 32 >> 2] + Math_imul(HEAP32[$11 + 128 >> 2], HEAP32[$11 + 24 >> 2]);
               if (!(HEAP32[$11 + 12 >> 2] < 0 | HEAP32[$11 + 12 >> 2] >= HEAP32[$11 + 72 >> 2] | (HEAP32[$11 + 8 >> 2] < 0 | HEAP32[$11 + 8 >> 2] >= HEAP32[$11 + 76 >> 2]))) {
                HEAP32[$11 + 4 >> 2] = HEAPU8[HEAP32[$11 + 180 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 184 >> 2], HEAP32[$11 + 52 >> 2], HEAP32[$11 + 8 >> 2], HEAP32[$11 + 12 >> 2], HEAP32[$11 + 16 >> 2]) | 0];
                HEAP32[$11 >> 2] = HEAPU8[HEAP32[$11 + 172 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 176 >> 2], HEAP32[$11 + 40 >> 2], HEAP32[$11 + 24 >> 2], HEAP32[$11 + 20 >> 2], HEAP32[$11 + 16 >> 2]) | 0];
                HEAP32[$11 + 28 >> 2] = HEAP32[$11 + 28 >> 2] + Math_imul(HEAP32[$11 >> 2] + HEAP32[$11 + 112 >> 2] | 0, HEAP32[$11 + 4 >> 2] + HEAP32[$11 + 116 >> 2] | 0);
               }
               HEAP32[$11 + 16 >> 2] = HEAP32[$11 + 16 >> 2] + 1;
               continue;
              }
              break;
             }
             HEAP32[$11 + 20 >> 2] = HEAP32[$11 + 20 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$11 + 24 >> 2] = HEAP32[$11 + 24 >> 2] + 1;
           continue;
          }
          break;
         }
         if (HEAP32[$11 + 164 >> 2]) {
          HEAP32[$11 + 28 >> 2] = HEAP32[HEAP32[$11 + 164 >> 2] + (HEAP32[$11 + 40 >> 2] << 2) >> 2] + HEAP32[$11 + 28 >> 2];
         }
         $0 = $11 + 28 | 0;
         $1 = $11 + 92 | 0;
         $2 = $11 + 96 | 0;
         HEAP32[$11 + 28 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$11 + 28 >> 2], HEAP32[$11 + 104 >> 2], HEAP32[$11 + 100 >> 2]);
         HEAP32[$11 + 28 >> 2] = HEAP32[$11 + 108 >> 2] + HEAP32[$11 + 28 >> 2];
         HEAP32[$11 + 28 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, $2) >> 2];
         HEAP32[$11 + 28 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0, $1) >> 2];
         $0 = HEAP32[$11 + 28 >> 2];
         HEAP8[HEAP32[$11 + 156 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 160 >> 2], HEAP32[$11 + 52 >> 2], HEAP32[$11 + 48 >> 2], HEAP32[$11 + 44 >> 2], HEAP32[$11 + 40 >> 2]) | 0] = $0;
         HEAP32[$11 + 40 >> 2] = HEAP32[$11 + 40 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$11 + 44 >> 2] = HEAP32[$11 + 44 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$11 + 48 >> 2] = HEAP32[$11 + 48 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$11 + 52 >> 2] = HEAP32[$11 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $11 + 192 | 0;
}
function jsiDumpState($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = global$0 - 272 | 0;
 global$0 = $2;
 HEAP32[$2 + 268 >> 2] = $0;
 HEAP32[$2 + 264 >> 2] = $1;
 jsvObjectIteratorNew($2 + 256 | 0, HEAP32[23774]);
 while (1) {
  if (jsvObjectIteratorHasValue($2 + 256 | 0) & 1) {
   $0 = $2 + 176 | 0;
   $1 = $2 + 256 | 0;
   HEAP32[$2 + 252 >> 2] = jsvObjectIteratorGetKey($1);
   HEAP32[$2 + 248 >> 2] = jsvObjectIteratorGetValue($1);
   jsvGetString(HEAP32[$2 + 252 >> 2], $0, 64);
   HEAP8[$2 + 175 | 0] = 0;
   HEAP32[$2 + 168 >> 2] = 6210;
   while (1) {
    if (HEAPU8[HEAP32[$2 + 168 >> 2]]) {
     if (!strcmp(HEAP32[$2 + 168 >> 2], $2 + 176 | 0)) {
      HEAP8[$2 + 175 | 0] = 1;
     }
     HEAP32[$2 + 168 >> 2] = (strlen(HEAP32[$2 + 168 >> 2]) + 1 | 0) + HEAP32[$2 + 168 >> 2];
     continue;
    }
    break;
   }
   if (!(HEAP8[$2 + 175 | 0] & 1)) {
    label$7 : {
     if (jswIsBuiltInObject($2 + 176 | 0) & 1) {
      jsiDumpObjectState(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 252 >> 2], HEAP32[$2 + 248 >> 2]);
      break label$7;
     }
     if (!(jsvIsStringEqualOrStartsWith(HEAP32[$2 + 252 >> 2], 5329, 1) & 1)) {
      if (!(jsvIsStringEqual(HEAP32[$2 + 252 >> 2], 5237) & 1)) {
       if (!(jsvIsStringEqual(HEAP32[$2 + 252 >> 2], 5244) & 1)) {
        label$12 : {
         if (HEAP8[HEAP32[$2 + 252 >> 2]] == -1) {
          break label$12;
         }
         if (jshFromDeviceString($2 + 176 | 0) & 255) {
          break label$12;
         }
         if (!(jsvIsNative(HEAP32[$2 + 248 >> 2]) & 1)) {
          label$15 : {
           if (jsvIsFunction(HEAP32[$2 + 248 >> 2]) & 1) {
            $0 = HEAP32[$2 + 268 >> 2];
            $1 = HEAP32[$2 + 264 >> 2];
            HEAP32[$2 >> 2] = HEAP32[$2 + 252 >> 2];
            cbprintf($0, $1, 6213, $2);
            jsfGetJSONForFunctionWithCallback(HEAP32[$2 + 248 >> 2], 32, HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2]);
            FUNCTION_TABLE[HEAP32[$2 + 268 >> 2]](5719, HEAP32[$2 + 264 >> 2]);
            jsiDumpObjectState(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 252 >> 2], HEAP32[$2 + 248 >> 2]);
            break label$15;
           }
           $0 = HEAP32[$2 + 268 >> 2];
           $1 = HEAP32[$2 + 264 >> 2];
           HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 252 >> 2];
           cbprintf($0, $1, 6225, $2 + 32 | 0);
           HEAP8[$2 + 167 | 0] = 0;
           if (jsvIsObject(HEAP32[$2 + 248 >> 2]) & 1) {
            HEAP32[$2 + 160 >> 2] = jsvObjectGetChild(HEAP32[$2 + 248 >> 2], 6235, 0);
            if (HEAP32[$2 + 160 >> 2]) {
             HEAP32[$2 + 156 >> 2] = jsvGetPathTo(HEAP32[23774], HEAP32[$2 + 160 >> 2], HEAP32[$2 + 248 >> 2]);
             if (HEAP32[$2 + 156 >> 2]) {
              $0 = HEAP32[$2 + 268 >> 2];
              $1 = HEAP32[$2 + 264 >> 2];
              HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 156 >> 2];
              cbprintf($0, $1, 6245, $2 + 16 | 0);
              jsiDumpObjectState(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 252 >> 2], HEAP32[$2 + 248 >> 2]);
              HEAP8[$2 + 167 | 0] = 1;
             }
            }
           }
           if (!(HEAP8[$2 + 167 | 0] & 1)) {
            jsiDumpJSON(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 248 >> 2], HEAP32[$2 + 252 >> 2]);
            FUNCTION_TABLE[HEAP32[$2 + 268 >> 2]](5342, HEAP32[$2 + 264 >> 2]);
           }
          }
         }
        }
       }
      }
     }
    }
   }
   $0 = $2 + 256 | 0;
   jsvUnLock2(HEAP32[$2 + 248 >> 2], HEAP32[$2 + 252 >> 2]);
   jsvObjectIteratorNext($0);
   continue;
  }
  break;
 }
 $0 = $2 + 256 | 0;
 jsvObjectIteratorFree($0);
 HEAP32[$2 + 152 >> 2] = jsvLock(HEAPU16[47564]);
 jsvObjectIteratorNew($0, HEAP32[$2 + 152 >> 2]);
 jsvUnLock(HEAP32[$2 + 152 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue($2 + 256 | 0) & 1) {
   $0 = $2 + 256 | 0;
   HEAP32[$2 + 148 >> 2] = jsvObjectIteratorGetValue($0);
   HEAP32[$2 + 144 >> 2] = jsvObjectIteratorGetKey($0);
   HEAP32[$2 + 140 >> 2] = jsvSkipOneNameAndUnLock(jsvFindChildFromString(HEAP32[$2 + 148 >> 2], 6074, 0));
   HEAP32[$2 + 136 >> 2] = jsvObjectGetChild(HEAP32[$2 + 148 >> 2], 6148, 0);
   FUNCTION_TABLE[HEAP32[$2 + 268 >> 2]](HEAP32[$2 + 136 >> 2] ? 6265 : 6278, HEAP32[$2 + 264 >> 2]);
   jsiDumpJSON(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 140 >> 2], 0);
   $3 = HEAP32[$2 + 268 >> 2];
   $4 = HEAP32[$2 + 264 >> 2];
   label$23 : {
    if (HEAP32[$2 + 136 >> 2]) {
     $0 = jsvGetLongInteger(HEAP32[$2 + 136 >> 2]);
     $1 = i64toi32_i32$HIGH_BITS;
     break label$23;
    }
    $0 = jsvGetLongIntegerAndUnLock(jsvObjectGetChild(HEAP32[$2 + 148 >> 2], 6063, 0));
    $1 = i64toi32_i32$HIGH_BITS;
   }
   $6 = jshGetMillisecondsFromTime($0, $1);
   HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 144 >> 2];
   HEAPF64[$2 + 48 >> 3] = $6;
   cbprintf($3, $4, 6290, $2 + 48 | 0);
   $0 = $2 + 256 | 0;
   jsvUnLock3(HEAP32[$2 + 136 >> 2], HEAP32[$2 + 140 >> 2], HEAP32[$2 + 144 >> 2]);
   jsvUnLock(HEAP32[$2 + 148 >> 2]);
   jsvObjectIteratorNext($0);
   continue;
  }
  break;
 }
 $0 = $2 + 256 | 0;
 jsvObjectIteratorFree($0);
 HEAP32[$2 + 132 >> 2] = jsvLock(HEAPU16[47565]);
 jsvObjectIteratorNew($0, HEAP32[$2 + 132 >> 2]);
 jsvUnLock(HEAP32[$2 + 132 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue($2 + 256 | 0) & 1) {
   HEAP32[$2 + 128 >> 2] = jsvObjectIteratorGetValue($2 + 256 | 0);
   HEAP32[$2 + 124 >> 2] = jsvSkipOneNameAndUnLock(jsvFindChildFromString(HEAP32[$2 + 128 >> 2], 6074, 0));
   HEAP8[$2 + 123 | 0] = jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$2 + 128 >> 2], 6092, 0)) & 1;
   HEAP32[$2 + 116 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$2 + 128 >> 2], 6014, 0));
   HEAP32[$2 + 112 >> 2] = jsvObjectGetChild(HEAP32[$2 + 128 >> 2], 5263, 0);
   HEAP32[$2 + 108 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$2 + 128 >> 2], 6040, 0));
   FUNCTION_TABLE[HEAP32[$2 + 268 >> 2]](6304, HEAP32[$2 + 264 >> 2]);
   jsiDumpJSON(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 124 >> 2], 0);
   $3 = HEAP32[$2 + 268 >> 2];
   $4 = HEAP32[$2 + 264 >> 2];
   $0 = HEAP32[$2 + 112 >> 2];
   $1 = HEAP8[$2 + 123 | 0] & 1 ? 6343 : 6348;
   $7 = $2;
   if (HEAP32[$2 + 116 >> 2] < 0) {
    $5 = 6354;
   } else {
    $5 = HEAP32[$2 + 116 >> 2] > 0 ? 6362 : 6369;
   }
   HEAP32[$7 + 88 >> 2] = $5;
   HEAP32[$2 + 84 >> 2] = $1;
   HEAP32[$2 + 80 >> 2] = $0;
   cbprintf($3, $4, 6314, $2 + 80 | 0);
   if (HEAP32[$2 + 108 >> 2] > 0) {
    $0 = HEAP32[$2 + 268 >> 2];
    $1 = HEAP32[$2 + 264 >> 2];
    $3 = HEAP32[$2 + 108 >> 2];
    HEAPF64[$2 + 64 >> 3] = jshGetMillisecondsFromTime($3, $3 >> 31);
    cbprintf($0, $1, 6374, $2 - -64 | 0);
   }
   $0 = $2 + 256 | 0;
   FUNCTION_TABLE[HEAP32[$2 + 268 >> 2]](6390, HEAP32[$2 + 264 >> 2]);
   jsvUnLock2(HEAP32[$2 + 112 >> 2], HEAP32[$2 + 124 >> 2]);
   jsvUnLock(HEAP32[$2 + 128 >> 2]);
   jsvObjectIteratorNext($0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree($2 + 256 | 0);
 jsiDumpHardwareInitialisation(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], 1);
 HEAP32[$2 + 104 >> 2] = jsfGetBootCodeFromFlash(0);
 if (HEAP32[$2 + 104 >> 2]) {
  cbprintf(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], 6396, 0);
  jslPrintTokenisedString(HEAP32[$2 + 104 >> 2], HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2]);
  jsvUnLock(HEAP32[$2 + 104 >> 2]);
 }
 global$0 = $2 + 272 | 0;
}
function tflite__MicroInterpreter__Invoke_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = global$0 - 432 | 0;
 global$0 = $1;
 HEAP32[$1 + 424 >> 2] = $0;
 $0 = HEAP32[$1 + 424 >> 2];
 label$1 : {
  if (HEAP32[$0 + 116 >> 2]) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 8 >> 2], 39929, 0);
   HEAP32[$1 + 428 >> 2] = 1;
   break label$1;
  }
  if (!(HEAP8[$0 + 112 | 0] & 1)) {
   tflite__MicroInterpreter__AllocateTensors_28_29($0);
  }
  HEAP32[$1 + 420 >> 2] = 0;
  HEAP32[$1 + 416 >> 2] = tflite__Model__operator_codes_28_29_20const(HEAP32[$0 >> 2]);
  HEAP32[$1 + 412 >> 2] = 0;
  while (1) {
   if (HEAPU32[$1 + 412 >> 2] < flatbuffers__Vector_int___size_28_29_20const(HEAP32[$0 + 124 >> 2]) >>> 0) {
    HEAP32[$1 + 408 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph__20___Get_28unsigned_20int_29_20const(HEAP32[$0 + 124 >> 2], HEAP32[$1 + 412 >> 2]);
    HEAP32[$1 + 404 >> 2] = tflite__Operator__opcode_index_28_29_20const(HEAP32[$1 + 408 >> 2]);
    label$6 : {
     if (HEAPU32[$1 + 404 >> 2] >= 0) {
      if (HEAPU32[$1 + 404 >> 2] < flatbuffers__Vector_int___size_28_29_20const(HEAP32[$1 + 416 >> 2]) >>> 0) {
       break label$6;
      }
     }
     $0 = HEAP32[$0 + 8 >> 2];
     HEAP32[$1 >> 2] = HEAP32[$1 + 404 >> 2];
     tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 39974, $1);
     HEAP32[$1 + 428 >> 2] = 1;
     break label$1;
    }
    $2 = $1 + 396 | 0;
    HEAP32[$1 + 400 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph__20___operator_5b_5d_28unsigned_20int_29_20const(HEAP32[$1 + 416 >> 2], HEAP32[$1 + 404 >> 2]);
    HEAP32[$1 + 396 >> 2] = 0;
    HEAP32[$1 + 420 >> 2] = tflite__GetRegistrationFromOpCode_28tflite__OperatorCode_20const__2c_20tflite__OpResolver_20const__2c_20tflite__ErrorReporter__2c_20TfLiteRegistration_20const___29(HEAP32[$1 + 400 >> 2], HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2], $2);
    if (HEAP32[$1 + 420 >> 2]) {
     HEAP32[$1 + 428 >> 2] = HEAP32[$1 + 420 >> 2];
     break label$1;
    }
    if (!HEAP32[$1 + 396 >> 2]) {
     $0 = HEAP32[$0 + 8 >> 2];
     HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 404 >> 2];
     tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 40016, $1 + 16 | 0);
     HEAP32[$1 + 428 >> 2] = 1;
     break label$1;
    }
    HEAP32[$1 + 392 >> 2] = HEAP32[HEAP32[$1 + 396 >> 2] + 20 >> 2];
    label$10 : {
     if (HEAP32[$1 + 392 >> 2] == 32) {
      break label$10;
     }
     if (!tflite__Operator__custom_options_28_29_20const(HEAP32[$1 + 408 >> 2])) {
      break label$10;
     }
     $0 = HEAP32[$0 + 8 >> 2];
     HEAP32[$1 + 32 >> 2] = tflite__EnumNameBuiltinOperator_28tflite__BuiltinOperator_29(HEAP32[$1 + 392 >> 2]);
     tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 40049, $1 + 32 | 0);
     HEAP32[$1 + 428 >> 2] = 1;
     break label$1;
    }
    tflite___28anonymous_20namespace_29__StackDataAllocator__StackDataAllocator_28_29($1 + 256 | 0);
    HEAP32[$1 + 252 >> 2] = 0;
    HEAP32[$1 + 248 >> 2] = 0;
    HEAP32[$1 + 244 >> 2] = 0;
    label$11 : {
     label$12 : {
      if (tflite__Operator__custom_options_28_29_20const(HEAP32[$1 + 408 >> 2])) {
       HEAP32[$1 + 252 >> 2] = flatbuffers__Vector_unsigned_20char___data_28_29_20const(tflite__Operator__custom_options_28_29_20const(HEAP32[$1 + 408 >> 2]));
       HEAP32[$1 + 248 >> 2] = flatbuffers__Vector_int___size_28_29_20const(tflite__Operator__custom_options_28_29_20const(HEAP32[$1 + 408 >> 2]));
       break label$12;
      }
      if (tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29(HEAP32[$1 + 408 >> 2], HEAP32[$1 + 392 >> 2], HEAP32[$0 + 8 >> 2], $1 + 256 | 0, $1 + 244 | 0)) {
       HEAP32[$1 + 428 >> 2] = 1;
       HEAP32[$1 + 232 >> 2] = 1;
       break label$11;
      }
     }
     label$15 : {
      if (HEAP32[HEAP32[$1 + 396 >> 2] + 20 >> 2] == 32) {
       HEAP32[$1 + 228 >> 2] = HEAP32[$1 + 252 >> 2];
       HEAP32[$1 + 224 >> 2] = HEAP32[$1 + 248 >> 2];
       break label$15;
      }
      HEAP32[$1 + 228 >> 2] = HEAP32[$1 + 244 >> 2];
      HEAP32[$1 + 224 >> 2] = 0;
     }
     HEAP32[$1 + 220 >> 2] = 0;
     if (HEAP32[HEAP32[$1 + 396 >> 2] >> 2]) {
      HEAP32[$1 + 220 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 + 396 >> 2] >> 2]]($0 + 12 | 0, HEAP32[$1 + 228 >> 2], HEAP32[$1 + 224 >> 2]);
     }
     HEAP32[$1 + 216 >> 2] = tflite__Model__operator_codes_28_29_20const(HEAP32[$1 + 408 >> 2]);
     HEAP32[$1 + 212 >> 2] = tflite__Model__subgraphs_28_29_20const(HEAP32[$1 + 408 >> 2]);
     HEAP32[$1 + 208 >> 2] = 16;
     HEAP32[$1 + 124 >> 2] = $1 + 128;
     HEAP32[HEAP32[$1 + 124 >> 2] >> 2] = 0;
     HEAP32[$1 + 88 >> 2] = HEAP32[$1 + 216 >> 2];
     HEAP32[$1 + 92 >> 2] = HEAP32[$1 + 212 >> 2];
     HEAP32[$1 + 100 >> 2] = HEAP32[$1 + 124 >> 2];
     HEAP32[$1 + 104 >> 2] = HEAP32[$1 + 220 >> 2];
     HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 244 >> 2];
     HEAP32[$1 + 112 >> 2] = HEAP32[$1 + 252 >> 2];
     HEAP32[$1 + 116 >> 2] = HEAP32[$1 + 248 >> 2];
     HEAP32[$1 + 120 >> 2] = 0;
     if (HEAP32[HEAP32[$1 + 396 >> 2] + 8 >> 2]) {
      HEAP32[$1 + 84 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 + 396 >> 2] + 8 >> 2]]($0 + 12 | 0, $1 + 88 | 0);
      if (HEAP32[$1 + 84 >> 2]) {
       $2 = HEAP32[$0 + 8 >> 2];
       $3 = tflite___28anonymous_20namespace_29__OpNameFromRegistration_28TfLiteRegistration_20const__29(HEAP32[$1 + 396 >> 2]);
       $4 = HEAP32[$1 + 412 >> 2];
       HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 84 >> 2];
       HEAP32[$1 + 52 >> 2] = $4;
       HEAP32[$1 + 48 >> 2] = $3;
       tflite__ErrorReporter__Report_28char_20const__2c_20____29($2, 40119, $1 + 48 | 0);
       HEAP32[$1 + 428 >> 2] = 1;
       HEAP32[$1 + 232 >> 2] = 1;
       break label$11;
      }
     }
     if (HEAP32[HEAP32[$1 + 396 >> 2] + 12 >> 2]) {
      HEAP32[$1 + 80 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 + 396 >> 2] + 12 >> 2]]($0 + 12 | 0, $1 + 88 | 0);
      if (HEAP32[$1 + 80 >> 2]) {
       $2 = HEAP32[$0 + 8 >> 2];
       $3 = tflite___28anonymous_20namespace_29__OpNameFromRegistration_28TfLiteRegistration_20const__29(HEAP32[$1 + 396 >> 2]);
       $4 = HEAP32[$1 + 412 >> 2];
       HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 80 >> 2];
       HEAP32[$1 + 68 >> 2] = $4;
       HEAP32[$1 + 64 >> 2] = $3;
       tflite__ErrorReporter__Report_28char_20const__2c_20____29($2, 40172, $1 - -64 | 0);
       HEAP32[$1 + 428 >> 2] = 1;
       HEAP32[$1 + 232 >> 2] = 1;
       break label$11;
      }
     }
     if (HEAP32[HEAP32[$1 + 396 >> 2] + 4 >> 2]) {
      FUNCTION_TABLE[HEAP32[HEAP32[$1 + 396 >> 2] + 4 >> 2]]($0 + 12 | 0, HEAP32[$1 + 220 >> 2]);
     }
     HEAP32[$1 + 232 >> 2] = 0;
    }
    tflite__MicroMutableOpResolver___MicroMutableOpResolver_28_29($1 + 256 | 0);
    if (!(HEAP32[$1 + 232 >> 2] - 1)) {
     break label$1;
    }
    HEAP32[$1 + 412 >> 2] = HEAP32[$1 + 412 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$1 + 428 >> 2] = HEAP32[$1 + 420 >> 2];
 }
 global$0 = $1 + 432 | 0;
 return HEAP32[$1 + 428 >> 2];
}
function tflite__ops__micro__svdf___28anonymous_20namespace_29__ApplyTimeWeightsBiasAndActivation_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteFusedActivation_2c_20TfLiteTensor__2c_20TfLiteTensor__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0, $12 = Math_fround(0);
 $11 = global$0 - 160 | 0;
 global$0 = $11;
 HEAP32[$11 + 156 >> 2] = $0;
 HEAP32[$11 + 152 >> 2] = $1;
 HEAP32[$11 + 148 >> 2] = $2;
 HEAP32[$11 + 144 >> 2] = $3;
 HEAP32[$11 + 140 >> 2] = $4;
 HEAP32[$11 + 136 >> 2] = $5;
 HEAP32[$11 + 132 >> 2] = $6;
 HEAP32[$11 + 128 >> 2] = $7;
 HEAP32[$11 + 124 >> 2] = $8;
 HEAP32[$11 + 120 >> 2] = $9;
 HEAP32[$11 + 116 >> 2] = $10;
 HEAP32[$11 + 112 >> 2] = 0;
 while (1) {
  if (HEAP32[$11 + 112 >> 2] < HEAP32[$11 + 156 >> 2]) {
   HEAP32[$11 + 108 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$11 + 120 >> 2]) + (Math_imul(HEAP32[$11 + 112 >> 2], HEAP32[$11 + 148 >> 2]) << 2);
   HEAP32[$11 + 104 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$11 + 136 >> 2]);
   HEAP32[$11 + 100 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$11 + 124 >> 2]) + (Math_imul(HEAP32[$11 + 148 >> 2], Math_imul(HEAP32[$11 + 112 >> 2], HEAP32[$11 + 152 >> 2])) << 2);
   HEAP32[$11 + 96 >> 2] = 0;
   while (1) {
    if (HEAP32[$11 + 96 >> 2] < HEAP32[$11 + 148 >> 2]) {
     HEAPF32[HEAP32[$11 + 108 >> 2] >> 2] = 0;
     HEAP32[$11 + 92 >> 2] = 0;
     while (1) {
      if (HEAP32[$11 + 92 >> 2] < HEAP32[$11 + 152 >> 2]) {
       $0 = HEAP32[$11 + 104 >> 2];
       HEAP32[$11 + 104 >> 2] = $0 + 4;
       $12 = HEAPF32[$0 >> 2];
       $0 = HEAP32[$11 + 100 >> 2];
       HEAP32[$11 + 100 >> 2] = $0 + 4;
       $1 = HEAP32[$11 + 108 >> 2];
       HEAPF32[$1 >> 2] = HEAPF32[$1 >> 2] + Math_fround($12 * HEAPF32[$0 >> 2]);
       HEAP32[$11 + 92 >> 2] = HEAP32[$11 + 92 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$11 + 108 >> 2] = HEAP32[$11 + 108 >> 2] + 4;
     HEAP32[$11 + 96 >> 2] = HEAP32[$11 + 96 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$11 + 112 >> 2] = HEAP32[$11 + 112 >> 2] + 1;
   continue;
  }
  break;
 }
 label$7 : {
  if (HEAP32[$11 + 132 >> 2]) {
   HEAP32[$11 + 88 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$11 + 132 >> 2]);
   HEAP32[$11 + 84 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$11 + 116 >> 2]);
   HEAP32[$11 + 80 >> 2] = 0;
   while (1) {
    if (HEAP32[$11 + 80 >> 2] < HEAP32[$11 + 156 >> 2]) {
     HEAP32[$11 + 76 >> 2] = HEAP32[$11 + 84 >> 2] + (Math_imul(HEAP32[$11 + 80 >> 2], HEAP32[$11 + 144 >> 2]) << 2);
     HEAP32[$11 + 72 >> 2] = HEAP32[$11 + 88 >> 2];
     HEAP32[$11 + 68 >> 2] = 0;
     while (1) {
      if (HEAP32[$11 + 68 >> 2] < HEAP32[$11 + 144 >> 2]) {
       $0 = HEAP32[$11 + 72 >> 2];
       HEAP32[$11 + 72 >> 2] = $0 + 4;
       $12 = HEAPF32[$0 >> 2];
       $0 = HEAP32[$11 + 76 >> 2];
       HEAP32[$11 + 76 >> 2] = $0 + 4;
       HEAPF32[$0 >> 2] = $12;
       HEAP32[$11 + 68 >> 2] = HEAP32[$11 + 68 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$11 + 80 >> 2] = HEAP32[$11 + 80 >> 2] + 1;
     continue;
    }
    break;
   }
   break label$7;
  }
  HEAP32[$11 + 64 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$11 + 116 >> 2]);
  HEAP32[$11 + 60 >> 2] = 0;
  while (1) {
   if (HEAP32[$11 + 60 >> 2] < (Math_imul(HEAP32[$11 + 156 >> 2], HEAP32[$11 + 144 >> 2]) | 0)) {
    $0 = HEAP32[$11 + 64 >> 2];
    HEAP32[$11 + 64 >> 2] = $0 + 4;
    HEAPF32[$0 >> 2] = 0;
    HEAP32[$11 + 60 >> 2] = HEAP32[$11 + 60 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 HEAP32[$11 + 56 >> 2] = 0;
 while (1) {
  if (HEAP32[$11 + 56 >> 2] < HEAP32[$11 + 156 >> 2]) {
   HEAP32[$11 + 52 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$11 + 116 >> 2]) + (Math_imul(HEAP32[$11 + 56 >> 2], HEAP32[$11 + 144 >> 2]) << 2);
   HEAP32[$11 + 48 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$11 + 120 >> 2]) + (Math_imul(HEAP32[$11 + 56 >> 2], HEAP32[$11 + 148 >> 2]) << 2);
   HEAP32[$11 + 44 >> 2] = HEAP32[$11 + 48 >> 2];
   HEAP32[$11 + 40 >> 2] = 0;
   while (1) {
    if (HEAP32[$11 + 40 >> 2] < HEAP32[$11 + 144 >> 2]) {
     HEAP32[$11 + 36 >> 2] = 0;
     while (1) {
      if (HEAP32[$11 + 36 >> 2] < HEAP32[$11 + 140 >> 2]) {
       $0 = HEAP32[$11 + 44 >> 2];
       HEAP32[$11 + 44 >> 2] = $0 + 4;
       $1 = HEAP32[$11 + 52 >> 2] + (HEAP32[$11 + 40 >> 2] << 2) | 0;
       HEAPF32[$1 >> 2] = HEAPF32[$1 >> 2] + HEAPF32[$0 >> 2];
       HEAP32[$11 + 36 >> 2] = HEAP32[$11 + 36 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$11 + 40 >> 2] = HEAP32[$11 + 40 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$11 + 56 >> 2] = HEAP32[$11 + 56 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$11 + 32 >> 2] = 0;
 while (1) {
  if (HEAP32[$11 + 32 >> 2] < HEAP32[$11 + 156 >> 2]) {
   HEAP32[$11 + 28 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$11 + 116 >> 2]) + (Math_imul(HEAP32[$11 + 32 >> 2], HEAP32[$11 + 144 >> 2]) << 2);
   HEAP32[$11 + 24 >> 2] = 0;
   while (1) {
    if (HEAP32[$11 + 24 >> 2] < HEAP32[$11 + 144 >> 2]) {
     $12 = tflite__ops__micro__ActivationValFloat_28TfLiteFusedActivation_2c_20float_29(HEAP32[$11 + 128 >> 2], HEAPF32[HEAP32[$11 + 28 >> 2] >> 2]);
     HEAPF32[HEAP32[$11 + 28 >> 2] >> 2] = $12;
     HEAP32[$11 + 28 >> 2] = HEAP32[$11 + 28 >> 2] + 4;
     HEAP32[$11 + 24 >> 2] = HEAP32[$11 + 24 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$11 + 32 >> 2] = HEAP32[$11 + 32 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$11 + 20 >> 2] = 0;
 while (1) {
  if (HEAP32[$11 + 20 >> 2] < HEAP32[$11 + 156 >> 2]) {
   HEAP32[$11 + 16 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$11 + 124 >> 2]) + (Math_imul(HEAP32[$11 + 148 >> 2], Math_imul(HEAP32[$11 + 20 >> 2], HEAP32[$11 + 152 >> 2])) << 2);
   HEAP32[$11 + 12 >> 2] = 0;
   while (1) {
    if (HEAP32[$11 + 12 >> 2] < HEAP32[$11 + 148 >> 2]) {
     HEAP32[$11 + 8 >> 2] = HEAP32[$11 + 16 >> 2];
     HEAP32[$11 + 4 >> 2] = HEAP32[$11 + 16 >> 2] + 4;
     HEAP32[$11 >> 2] = HEAP32[$11 + 16 >> 2] + (HEAP32[$11 + 152 >> 2] << 2);
     while (1) {
      if (HEAP32[$11 + 4 >> 2] != HEAP32[$11 >> 2]) {
       $0 = HEAP32[$11 + 4 >> 2];
       HEAP32[$11 + 4 >> 2] = $0 + 4;
       $12 = HEAPF32[$0 >> 2];
       $0 = HEAP32[$11 + 8 >> 2];
       HEAP32[$11 + 8 >> 2] = $0 + 4;
       HEAPF32[$0 >> 2] = $12;
       continue;
      }
      break;
     }
     HEAPF32[HEAP32[$11 + 16 >> 2] + (HEAP32[$11 + 152 >> 2] - 1 << 2) >> 2] = 0;
     HEAP32[$11 + 16 >> 2] = HEAP32[$11 + 16 >> 2] + (HEAP32[$11 + 152 >> 2] << 2);
     HEAP32[$11 + 12 >> 2] = HEAP32[$11 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$11 + 20 >> 2] = HEAP32[$11 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $11 + 160 | 0;
}
function tflite__MicroAllocator__InitializeRuntimeTensor_28tflite__Tensor_20const__2c_20flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer__20__20const__2c_20tflite__ErrorReporter__2c_20TfLiteTensor__2c_20unsigned_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = Math_fround(0);
 $5 = global$0 - 96 | 0;
 global$0 = $5;
 HEAP32[$5 + 88 >> 2] = $0;
 HEAP32[$5 + 84 >> 2] = $1;
 HEAP32[$5 + 80 >> 2] = $2;
 HEAP32[$5 + 76 >> 2] = $3;
 HEAP32[$5 + 72 >> 2] = $4;
 HEAP32[$5 + 68 >> 2] = 0;
 $0 = HEAP32[$5 + 88 >> 2];
 label$1 : {
  if (tflite__ConvertTensorType_28tflite__TensorType_2c_20TfLiteType__2c_20tflite__ErrorReporter__29(tflite__Tensor__type_28_29_20const(HEAP32[$5 + 84 >> 2]), HEAP32[$5 + 72 >> 2], HEAP32[$5 + 76 >> 2])) {
   HEAP32[$5 + 92 >> 2] = 1;
   break label$1;
  }
  $1 = tflite__Tensor__is_variable_28_29_20const(HEAP32[$5 + 84 >> 2]);
  HEAP8[HEAP32[$5 + 72 >> 2] + 45 | 0] = $1 & 1;
  HEAP32[HEAP32[$5 + 72 >> 2] + 4 >> 2] = 0;
  HEAP32[HEAP32[$5 + 72 >> 2] + 24 >> 2] = 0;
  HEAP32[$5 + 64 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph__20___operator_5b_5d_28unsigned_20int_29_20const(HEAP32[$5 + 80 >> 2], tflite__Tensor__buffer_28_29_20const(HEAP32[$5 + 84 >> 2]));
  if (HEAP32[$5 + 64 >> 2]) {
   HEAP32[$5 + 60 >> 2] = tflite__Tensor__shape_28_29_20const(HEAP32[$5 + 64 >> 2]);
   if (HEAP32[$5 + 60 >> 2]) {
    HEAP32[$5 + 56 >> 2] = flatbuffers__Vector_int___size_28_29_20const(HEAP32[$5 + 60 >> 2]);
    if (HEAP32[$5 + 56 >> 2]) {
     $1 = flatbuffers__Vector_unsigned_20char___data_28_29_20const(HEAP32[$5 + 60 >> 2]);
     HEAP32[HEAP32[$5 + 72 >> 2] + 4 >> 2] = $1;
     HEAP32[HEAP32[$5 + 72 >> 2] + 20 >> 2] = 1;
    }
   }
  }
  if (!HEAP32[HEAP32[$5 + 72 >> 2] + 4 >> 2]) {
   HEAP32[HEAP32[$5 + 72 >> 2] + 20 >> 2] = 2;
   if (HEAP32[$5 + 68 >> 2]) {
    HEAP32[HEAP32[$5 + 72 >> 2] + 4 >> 2] = HEAP32[$5 + 68 >> 2];
   }
  }
  if (tflite__BytesRequiredForTensor_28tflite__Tensor_20const__2c_20unsigned_20long__2c_20unsigned_20long__2c_20tflite__ErrorReporter__29(HEAP32[$5 + 84 >> 2], HEAP32[$5 + 72 >> 2] + 24 | 0, $5 + 52 | 0, HEAP32[$5 + 76 >> 2])) {
   HEAP32[$5 + 92 >> 2] = 1;
   break label$1;
  }
  $1 = tflite__SimpleMemoryAllocator__AllocateFromTail_28unsigned_20long_2c_20unsigned_20long_29($0 + 4 | 0, flatbuffers__Vector_int___Length_28_29_20const(tflite__Tensor__shape_28_29_20const(HEAP32[$5 + 84 >> 2])) + 1 << 2, 4);
  HEAP32[HEAP32[$5 + 72 >> 2] + 8 >> 2] = $1;
  $1 = flatbuffers__Vector_int___Length_28_29_20const(tflite__Tensor__shape_28_29_20const(HEAP32[$5 + 84 >> 2]));
  HEAP32[HEAP32[HEAP32[$5 + 72 >> 2] + 8 >> 2] >> 2] = $1;
  HEAP32[$5 + 48 >> 2] = 0;
  while (1) {
   if (HEAPU32[$5 + 48 >> 2] < flatbuffers__Vector_int___Length_28_29_20const(tflite__Tensor__shape_28_29_20const(HEAP32[$5 + 84 >> 2])) >>> 0) {
    $1 = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__Tensor__shape_28_29_20const(HEAP32[$5 + 84 >> 2]), HEAP32[$5 + 48 >> 2]);
    HEAP32[(HEAP32[HEAP32[$5 + 72 >> 2] + 8 >> 2] + 4 | 0) + (HEAP32[$5 + 48 >> 2] << 2) >> 2] = $1;
    HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 48 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$5 + 44 >> 2] = tflite__Model__buffers_28_29_20const(HEAP32[$5 + 84 >> 2]);
  label$11 : {
   if (!HEAP32[$5 + 44 >> 2]) {
    break label$11;
   }
   if (!tflite__Model__subgraphs_28_29_20const(HEAP32[$5 + 44 >> 2])) {
    break label$11;
   }
   if (flatbuffers__Vector_int___size_28_29_20const(tflite__Model__subgraphs_28_29_20const(HEAP32[$5 + 44 >> 2])) >>> 0 <= 0) {
    break label$11;
   }
   if (!tflite__SubGraph__operators_28_29_20const(HEAP32[$5 + 44 >> 2])) {
    break label$11;
   }
   if (flatbuffers__Vector_int___size_28_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$5 + 44 >> 2])) >>> 0 <= 0) {
    break label$11;
   }
   $6 = flatbuffers__Vector_float___Get_28unsigned_20int_29_20const(tflite__Model__subgraphs_28_29_20const(HEAP32[$5 + 44 >> 2]), 0);
   HEAPF32[HEAP32[$5 + 72 >> 2] + 12 >> 2] = $6;
   HEAP32[$5 + 40 >> 2] = 0;
   while (1) {
    if (HEAPU32[$5 + 40 >> 2] < 8) {
     $1 = flatbuffers__Vector_int___Data_28_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$5 + 44 >> 2]));
     HEAP8[HEAP32[$5 + 40 >> 2] + (HEAP32[$5 + 72 >> 2] + 16 | 0) | 0] = HEAPU8[$1 + HEAP32[$5 + 40 >> 2] | 0];
     HEAP32[$5 + 40 >> 2] = HEAP32[$5 + 40 >> 2] + 1;
     continue;
    }
    break;
   }
   $1 = jshFlashGetMemMapAddress(HEAP32[HEAP32[$5 + 72 >> 2] + 16 >> 2]);
   HEAP32[HEAP32[$5 + 72 >> 2] + 16 >> 2] = $1;
   HEAP32[$5 + 36 >> 2] = flatbuffers__Vector_int___size_28_29_20const(tflite__Model__subgraphs_28_29_20const(HEAP32[$5 + 44 >> 2]));
   HEAP32[$5 + 32 >> 2] = tflite__SimpleMemoryAllocator__AllocateFromTail_28unsigned_20long_2c_20unsigned_20long_29($0 + 4 | 0, 12, 4);
   HEAP32[$5 + 28 >> 2] = tflite__SimpleMemoryAllocator__AllocateFromTail_28unsigned_20long_2c_20unsigned_20long_29($0 + 4 | 0, (HEAP32[$5 + 36 >> 2] << 2) + 4 | 0, 4);
   HEAP32[$5 + 24 >> 2] = tflite__SimpleMemoryAllocator__AllocateFromTail_28unsigned_20long_2c_20unsigned_20long_29($0 + 4 | 0, (HEAP32[$5 + 36 >> 2] << 2) + 4 | 0, 4);
   HEAP32[HEAP32[$5 + 28 >> 2] >> 2] = HEAP32[$5 + 36 >> 2];
   HEAP32[HEAP32[$5 + 24 >> 2] >> 2] = HEAP32[$5 + 36 >> 2];
   HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 28 >> 2] + 4;
   HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 24 >> 2] + 4;
   HEAP32[$5 + 12 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 36 >> 2]) {
     $0 = flatbuffers__Vector_long_20long___Get_28unsigned_20int_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$5 + 44 >> 2]), HEAP32[$5 + 12 >> 2]);
     HEAP32[HEAP32[$5 + 20 >> 2] + (HEAP32[$5 + 12 >> 2] << 2) >> 2] = $0;
     $6 = flatbuffers__Vector_float___Get_28unsigned_20int_29_20const(tflite__Model__subgraphs_28_29_20const(HEAP32[$5 + 44 >> 2]), HEAP32[$5 + 12 >> 2]);
     HEAPF32[HEAP32[$5 + 16 >> 2] + (HEAP32[$5 + 12 >> 2] << 2) >> 2] = $6;
     HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[HEAP32[$5 + 32 >> 2] >> 2] = HEAP32[$5 + 24 >> 2];
   HEAP32[HEAP32[$5 + 32 >> 2] + 4 >> 2] = HEAP32[$5 + 28 >> 2];
   HEAP32[$5 >> 2] = 1;
   HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 32 >> 2];
   $1 = HEAP32[$5 + 4 >> 2];
   $0 = HEAP32[$5 + 72 >> 2];
   HEAP32[$0 + 48 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$0 + 52 >> 2] = $1;
  }
  label$16 : {
   if (flatbuffers__Vector_unsigned_20char___data_28_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$5 + 84 >> 2]))) {
    $0 = flatbuffers__Vector_unsigned_20char___data_28_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$5 + 84 >> 2]));
    HEAP32[HEAP32[$5 + 72 >> 2] + 32 >> 2] = $0;
    break label$16;
   }
   HEAP32[HEAP32[$5 + 72 >> 2] + 32 >> 2] = 42337;
  }
  HEAP32[HEAP32[$5 + 72 >> 2] + 28 >> 2] = 0;
  HEAP32[HEAP32[$5 + 72 >> 2] + 36 >> 2] = 0;
  HEAP32[HEAP32[$5 + 72 >> 2] + 40 >> 2] = 0;
  HEAP8[HEAP32[$5 + 72 >> 2] + 44 | 0] = 0;
  HEAP32[$5 + 92 >> 2] = 0;
 }
 global$0 = $5 + 96 | 0;
 return HEAP32[$5 + 92 >> 2];
}
function tflite__reference_ops__Conv_28tflite__ConvParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0, $12 = Math_fround(0);
 $11 = global$0 - 176 | 0;
 global$0 = $11;
 HEAP32[$11 + 172 >> 2] = $0;
 HEAP32[$11 + 168 >> 2] = $1;
 HEAP32[$11 + 164 >> 2] = $2;
 HEAP32[$11 + 160 >> 2] = $3;
 HEAP32[$11 + 156 >> 2] = $4;
 HEAP32[$11 + 152 >> 2] = $5;
 HEAP32[$11 + 148 >> 2] = $6;
 HEAP32[$11 + 144 >> 2] = $7;
 HEAP32[$11 + 140 >> 2] = $8;
 HEAP32[$11 + 136 >> 2] = $9;
 HEAP32[$11 + 132 >> 2] = $10;
 HEAP32[$11 + 128 >> 2] = HEAP16[HEAP32[$11 + 172 >> 2] + 10 >> 1];
 HEAP32[$11 + 124 >> 2] = HEAP16[HEAP32[$11 + 172 >> 2] + 12 >> 1];
 HEAP32[$11 + 120 >> 2] = HEAP16[HEAP32[$11 + 172 >> 2] + 14 >> 1];
 HEAP32[$11 + 116 >> 2] = HEAP16[HEAP32[$11 + 172 >> 2] + 16 >> 1];
 HEAP32[$11 + 112 >> 2] = HEAP16[HEAP32[$11 + 172 >> 2] + 2 >> 1];
 HEAP32[$11 + 108 >> 2] = HEAP16[HEAP32[$11 + 172 >> 2] + 4 >> 1];
 HEAPF32[$11 + 104 >> 2] = HEAPF32[HEAP32[$11 + 172 >> 2] + 48 >> 2];
 HEAPF32[$11 + 100 >> 2] = HEAPF32[HEAP32[$11 + 172 >> 2] + 52 >> 2];
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$11 + 168 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$11 + 160 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$11 + 144 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 HEAP32[$11 + 96 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 168 >> 2], 0, HEAP32[$11 + 144 >> 2], 0);
 HEAP32[$11 + 92 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 168 >> 2], 3, HEAP32[$11 + 160 >> 2], 3);
 HEAP32[$11 + 88 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 160 >> 2], 0, HEAP32[$11 + 144 >> 2], 3);
 if (HEAP32[$11 + 148 >> 2]) {
  label$5 : {
   if ((tflite__RuntimeShape__FlatSize_28_29_20const(HEAP32[$11 + 152 >> 2]) | 0) != HEAP32[$11 + 88 >> 2]) {
    break label$5;
   }
  }
 }
 HEAP32[$11 + 84 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 168 >> 2], 1);
 HEAP32[$11 + 80 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 168 >> 2], 2);
 HEAP32[$11 + 76 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 160 >> 2], 1);
 HEAP32[$11 + 72 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 160 >> 2], 2);
 HEAP32[$11 + 68 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 144 >> 2], 1);
 HEAP32[$11 + 64 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 144 >> 2], 2);
 HEAP32[$11 + 60 >> 2] = 0;
 while (1) {
  if (HEAP32[$11 + 60 >> 2] < HEAP32[$11 + 96 >> 2]) {
   HEAP32[$11 + 56 >> 2] = 0;
   while (1) {
    if (HEAP32[$11 + 56 >> 2] < HEAP32[$11 + 68 >> 2]) {
     HEAP32[$11 + 52 >> 2] = 0;
     while (1) {
      if (HEAP32[$11 + 52 >> 2] < HEAP32[$11 + 64 >> 2]) {
       HEAP32[$11 + 48 >> 2] = 0;
       while (1) {
        if (HEAP32[$11 + 48 >> 2] < HEAP32[$11 + 88 >> 2]) {
         HEAP32[$11 + 44 >> 2] = Math_imul(HEAP32[$11 + 52 >> 2], HEAP32[$11 + 128 >> 2]) - HEAP32[$11 + 112 >> 2];
         HEAP32[$11 + 40 >> 2] = Math_imul(HEAP32[$11 + 56 >> 2], HEAP32[$11 + 124 >> 2]) - HEAP32[$11 + 108 >> 2];
         HEAPF32[$11 + 36 >> 2] = 0;
         HEAP32[$11 + 32 >> 2] = 0;
         while (1) {
          if (HEAP32[$11 + 32 >> 2] < HEAP32[$11 + 76 >> 2]) {
           HEAP32[$11 + 28 >> 2] = 0;
           while (1) {
            if (HEAP32[$11 + 28 >> 2] < HEAP32[$11 + 72 >> 2]) {
             HEAP32[$11 + 24 >> 2] = 0;
             while (1) {
              if (HEAP32[$11 + 24 >> 2] < HEAP32[$11 + 92 >> 2]) {
               HEAP32[$11 + 20 >> 2] = HEAP32[$11 + 44 >> 2] + Math_imul(HEAP32[$11 + 120 >> 2], HEAP32[$11 + 28 >> 2]);
               HEAP32[$11 + 16 >> 2] = HEAP32[$11 + 40 >> 2] + Math_imul(HEAP32[$11 + 116 >> 2], HEAP32[$11 + 32 >> 2]);
               if (!(HEAP32[$11 + 20 >> 2] < 0 | HEAP32[$11 + 20 >> 2] >= HEAP32[$11 + 80 >> 2] | (HEAP32[$11 + 16 >> 2] < 0 | HEAP32[$11 + 16 >> 2] >= HEAP32[$11 + 84 >> 2]))) {
                HEAPF32[$11 + 12 >> 2] = HEAPF32[HEAP32[$11 + 164 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 168 >> 2], HEAP32[$11 + 60 >> 2], HEAP32[$11 + 16 >> 2], HEAP32[$11 + 20 >> 2], HEAP32[$11 + 24 >> 2]) << 2) >> 2];
                HEAPF32[$11 + 8 >> 2] = HEAPF32[HEAP32[$11 + 156 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 160 >> 2], HEAP32[$11 + 48 >> 2], HEAP32[$11 + 32 >> 2], HEAP32[$11 + 28 >> 2], HEAP32[$11 + 24 >> 2]) << 2) >> 2];
                HEAPF32[$11 + 36 >> 2] = HEAPF32[$11 + 36 >> 2] + Math_fround(HEAPF32[$11 + 12 >> 2] * HEAPF32[$11 + 8 >> 2]);
               }
               HEAP32[$11 + 24 >> 2] = HEAP32[$11 + 24 >> 2] + 1;
               continue;
              }
              break;
             }
             HEAP32[$11 + 28 >> 2] = HEAP32[$11 + 28 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$11 + 32 >> 2] = HEAP32[$11 + 32 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAPF32[$11 + 4 >> 2] = 0;
         if (HEAP32[$11 + 148 >> 2]) {
          HEAPF32[$11 + 4 >> 2] = HEAPF32[HEAP32[$11 + 148 >> 2] + (HEAP32[$11 + 48 >> 2] << 2) >> 2];
         }
         $12 = tflite__ActivationFunctionWithMinMax_28float_2c_20float_2c_20float_29(Math_fround(HEAPF32[$11 + 36 >> 2] + HEAPF32[$11 + 4 >> 2]), HEAPF32[$11 + 104 >> 2], HEAPF32[$11 + 100 >> 2]);
         HEAPF32[HEAP32[$11 + 140 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 144 >> 2], HEAP32[$11 + 60 >> 2], HEAP32[$11 + 56 >> 2], HEAP32[$11 + 52 >> 2], HEAP32[$11 + 48 >> 2]) << 2) >> 2] = $12;
         HEAP32[$11 + 48 >> 2] = HEAP32[$11 + 48 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$11 + 52 >> 2] = HEAP32[$11 + 52 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$11 + 56 >> 2] = HEAP32[$11 + 56 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$11 + 60 >> 2] = HEAP32[$11 + 60 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $11 + 176 | 0;
}
function jsfCompactInternal($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 144 | 0;
 $2 = $3;
 global$0 = $2;
 HEAP32[$2 + 140 >> 2] = $0;
 HEAP32[$2 + 136 >> 2] = $1;
 label$1 : {
  if (HEAPU32[$2 + 136 >> 2] > 0) {
   $0 = $3 - (HEAP32[$2 + 136 >> 2] + 15 & -16) | 0;
   global$0 = $0;
   HEAP32[$2 + 132 >> 2] = $0;
   HEAP32[$2 + 128 >> 2] = HEAP32[$2 + 132 >> 2];
   $0 = $2 + 96 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 24 >> 2] = 0;
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   HEAP32[$0 + 12 >> 2] = 0;
   HEAP32[$2 + 92 >> 2] = HEAP32[$2 + 140 >> 2];
   if (jsfGetFileHeader(HEAP32[$2 + 92 >> 2], $0, 1) & 1) {
    while (1) {
     if (HEAP32[$2 + 100 >> 2]) {
      $1 = $2 + 96 | 0;
      $4 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
      $0 = HEAP32[$2 + 128 >> 2];
      $3 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
      HEAP8[$0 | 0] = $3;
      HEAP8[$0 + 1 | 0] = $3 >>> 8;
      HEAP8[$0 + 2 | 0] = $3 >>> 16;
      HEAP8[$0 + 3 | 0] = $3 >>> 24;
      HEAP8[$0 + 4 | 0] = $4;
      HEAP8[$0 + 5 | 0] = $4 >>> 8;
      HEAP8[$0 + 6 | 0] = $4 >>> 16;
      HEAP8[$0 + 7 | 0] = $4 >>> 24;
      $3 = HEAPU8[$1 + 28 | 0] | HEAPU8[$1 + 29 | 0] << 8 | (HEAPU8[$1 + 30 | 0] << 16 | HEAPU8[$1 + 31 | 0] << 24);
      $4 = HEAPU8[$1 + 24 | 0] | HEAPU8[$1 + 25 | 0] << 8 | (HEAPU8[$1 + 26 | 0] << 16 | HEAPU8[$1 + 27 | 0] << 24);
      HEAP8[$0 + 24 | 0] = $4;
      HEAP8[$0 + 25 | 0] = $4 >>> 8;
      HEAP8[$0 + 26 | 0] = $4 >>> 16;
      HEAP8[$0 + 27 | 0] = $4 >>> 24;
      HEAP8[$0 + 28 | 0] = $3;
      HEAP8[$0 + 29 | 0] = $3 >>> 8;
      HEAP8[$0 + 30 | 0] = $3 >>> 16;
      HEAP8[$0 + 31 | 0] = $3 >>> 24;
      $3 = HEAPU8[$1 + 20 | 0] | HEAPU8[$1 + 21 | 0] << 8 | (HEAPU8[$1 + 22 | 0] << 16 | HEAPU8[$1 + 23 | 0] << 24);
      $4 = HEAPU8[$1 + 16 | 0] | HEAPU8[$1 + 17 | 0] << 8 | (HEAPU8[$1 + 18 | 0] << 16 | HEAPU8[$1 + 19 | 0] << 24);
      HEAP8[$0 + 16 | 0] = $4;
      HEAP8[$0 + 17 | 0] = $4 >>> 8;
      HEAP8[$0 + 18 | 0] = $4 >>> 16;
      HEAP8[$0 + 19 | 0] = $4 >>> 24;
      HEAP8[$0 + 20 | 0] = $3;
      HEAP8[$0 + 21 | 0] = $3 >>> 8;
      HEAP8[$0 + 22 | 0] = $3 >>> 16;
      HEAP8[$0 + 23 | 0] = $3 >>> 24;
      $3 = HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8 | (HEAPU8[$1 + 14 | 0] << 16 | HEAPU8[$1 + 15 | 0] << 24);
      $4 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24);
      HEAP8[$0 + 8 | 0] = $4;
      HEAP8[$0 + 9 | 0] = $4 >>> 8;
      HEAP8[$0 + 10 | 0] = $4 >>> 16;
      HEAP8[$0 + 11 | 0] = $4 >>> 24;
      HEAP8[$0 + 12 | 0] = $3;
      HEAP8[$0 + 13 | 0] = $3 >>> 8;
      HEAP8[$0 + 14 | 0] = $3 >>> 16;
      HEAP8[$0 + 15 | 0] = $3 >>> 24;
      HEAP32[$2 + 128 >> 2] = HEAP32[$2 + 128 >> 2] + 32;
      HEAP32[$2 + 88 >> 2] = jsfAlignAddress(jsfGetFileSize($1));
      jshFlashRead(HEAP32[$2 + 128 >> 2], HEAP32[$2 + 92 >> 2] + 32 | 0, HEAP32[$2 + 88 >> 2]);
      memset(HEAP32[$2 + 128 >> 2] + jsfGetFileSize($1) | 0, 255, HEAP32[$2 + 88 >> 2] - jsfGetFileSize($1) | 0);
      HEAP32[$2 + 128 >> 2] = HEAP32[$2 + 88 >> 2] + HEAP32[$2 + 128 >> 2];
     }
     if (jsfGetNextFileHeader($2 + 92 | 0, $2 + 96 | 0, 1) & 1) {
      continue;
     }
     break;
    }
   }
   jsfEraseFrom(HEAP32[$2 + 140 >> 2]);
   HEAP32[$2 + 84 >> 2] = HEAP32[$2 + 128 >> 2];
   HEAP32[$2 + 128 >> 2] = HEAP32[$2 + 132 >> 2];
   while (1) {
    if (HEAPU32[$2 + 128 >> 2] < HEAPU32[$2 + 84 >> 2]) {
     $1 = HEAP32[$2 + 128 >> 2];
     $4 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
     $0 = $2 + 96 | 0;
     $3 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
     HEAP8[$0 | 0] = $3;
     HEAP8[$0 + 1 | 0] = $3 >>> 8;
     HEAP8[$0 + 2 | 0] = $3 >>> 16;
     HEAP8[$0 + 3 | 0] = $3 >>> 24;
     HEAP8[$0 + 4 | 0] = $4;
     HEAP8[$0 + 5 | 0] = $4 >>> 8;
     HEAP8[$0 + 6 | 0] = $4 >>> 16;
     HEAP8[$0 + 7 | 0] = $4 >>> 24;
     $3 = HEAPU8[$1 + 28 | 0] | HEAPU8[$1 + 29 | 0] << 8 | (HEAPU8[$1 + 30 | 0] << 16 | HEAPU8[$1 + 31 | 0] << 24);
     $4 = HEAPU8[$1 + 24 | 0] | HEAPU8[$1 + 25 | 0] << 8 | (HEAPU8[$1 + 26 | 0] << 16 | HEAPU8[$1 + 27 | 0] << 24);
     HEAP8[$0 + 24 | 0] = $4;
     HEAP8[$0 + 25 | 0] = $4 >>> 8;
     HEAP8[$0 + 26 | 0] = $4 >>> 16;
     HEAP8[$0 + 27 | 0] = $4 >>> 24;
     HEAP8[$0 + 28 | 0] = $3;
     HEAP8[$0 + 29 | 0] = $3 >>> 8;
     HEAP8[$0 + 30 | 0] = $3 >>> 16;
     HEAP8[$0 + 31 | 0] = $3 >>> 24;
     $3 = HEAPU8[$1 + 20 | 0] | HEAPU8[$1 + 21 | 0] << 8 | (HEAPU8[$1 + 22 | 0] << 16 | HEAPU8[$1 + 23 | 0] << 24);
     $4 = HEAPU8[$1 + 16 | 0] | HEAPU8[$1 + 17 | 0] << 8 | (HEAPU8[$1 + 18 | 0] << 16 | HEAPU8[$1 + 19 | 0] << 24);
     HEAP8[$0 + 16 | 0] = $4;
     HEAP8[$0 + 17 | 0] = $4 >>> 8;
     HEAP8[$0 + 18 | 0] = $4 >>> 16;
     HEAP8[$0 + 19 | 0] = $4 >>> 24;
     HEAP8[$0 + 20 | 0] = $3;
     HEAP8[$0 + 21 | 0] = $3 >>> 8;
     HEAP8[$0 + 22 | 0] = $3 >>> 16;
     HEAP8[$0 + 23 | 0] = $3 >>> 24;
     $3 = HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8 | (HEAPU8[$1 + 14 | 0] << 16 | HEAPU8[$1 + 15 | 0] << 24);
     $1 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24);
     HEAP8[$0 + 8 | 0] = $1;
     HEAP8[$0 + 9 | 0] = $1 >>> 8;
     HEAP8[$0 + 10 | 0] = $1 >>> 16;
     HEAP8[$0 + 11 | 0] = $1 >>> 24;
     HEAP8[$0 + 12 | 0] = $3;
     HEAP8[$0 + 13 | 0] = $3 >>> 8;
     HEAP8[$0 + 14 | 0] = $3 >>> 16;
     HEAP8[$0 + 15 | 0] = $3 >>> 24;
     HEAP32[$2 + 128 >> 2] = HEAP32[$2 + 128 >> 2] + 32;
     $1 = jsfGetFileSize($0);
     $3 = jsfGetFileFlags($0);
     HEAP32[$2 + 32 >> 2] = HEAP32[$0 + 28 >> 2];
     $4 = HEAP32[$0 + 24 >> 2];
     HEAP32[$2 + 24 >> 2] = HEAP32[$0 + 20 >> 2];
     HEAP32[$2 + 28 >> 2] = $4;
     $4 = HEAP32[$0 + 16 >> 2];
     HEAP32[$2 + 16 >> 2] = HEAP32[$0 + 12 >> 2];
     HEAP32[$2 + 20 >> 2] = $4;
     $4 = HEAP32[$0 + 8 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$0 + 4 >> 2];
     HEAP32[$2 + 12 >> 2] = $4;
     HEAP32[$2 + 44 >> 2] = jsfCreateFile($2 + 8 | 0, $1, $3, $2 + 48 | 0);
     HEAP32[$2 + 40 >> 2] = jsfAlignAddress(jsfGetFileSize($2 + 96 | 0));
     if (HEAP32[$2 + 44 >> 2]) {
      jshFlashRead(HEAP32[$2 + 128 >> 2], HEAP32[$2 + 44 >> 2], HEAP32[$2 + 40 >> 2]);
     }
     HEAP32[$2 + 128 >> 2] = HEAP32[$2 + 40 >> 2] + HEAP32[$2 + 128 >> 2];
     continue;
    }
    break;
   }
   break label$1;
  }
  jsfEraseFrom(HEAP32[$2 + 140 >> 2]);
 }
 global$0 = $2 + 144 | 0;
 return 1;
}
function tflite__reference_ops__DepthwiseConv_28tflite__DepthwiseParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = Math_fround(0);
 $9 = global$0 - 176 | 0;
 global$0 = $9;
 HEAP32[$9 + 172 >> 2] = $0;
 HEAP32[$9 + 168 >> 2] = $1;
 HEAP32[$9 + 164 >> 2] = $2;
 HEAP32[$9 + 160 >> 2] = $3;
 HEAP32[$9 + 156 >> 2] = $4;
 HEAP32[$9 + 152 >> 2] = $5;
 HEAP32[$9 + 148 >> 2] = $6;
 HEAP32[$9 + 144 >> 2] = $7;
 HEAP32[$9 + 140 >> 2] = $8;
 HEAP32[$9 + 136 >> 2] = HEAP16[HEAP32[$9 + 172 >> 2] + 10 >> 1];
 HEAP32[$9 + 132 >> 2] = HEAP16[HEAP32[$9 + 172 >> 2] + 12 >> 1];
 HEAP32[$9 + 128 >> 2] = HEAP16[HEAP32[$9 + 172 >> 2] + 14 >> 1];
 HEAP32[$9 + 124 >> 2] = HEAP16[HEAP32[$9 + 172 >> 2] + 16 >> 1];
 HEAP32[$9 + 120 >> 2] = HEAP16[HEAP32[$9 + 172 >> 2] + 2 >> 1];
 HEAP32[$9 + 116 >> 2] = HEAP16[HEAP32[$9 + 172 >> 2] + 4 >> 1];
 HEAP32[$9 + 112 >> 2] = HEAP16[HEAP32[$9 + 172 >> 2] + 18 >> 1];
 HEAPF32[$9 + 108 >> 2] = HEAPF32[HEAP32[$9 + 172 >> 2] + 48 >> 2];
 HEAPF32[$9 + 104 >> 2] = HEAPF32[HEAP32[$9 + 172 >> 2] + 52 >> 2];
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$9 + 168 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$9 + 160 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$9 + 144 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 HEAP32[$9 + 100 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 168 >> 2], 0, HEAP32[$9 + 144 >> 2], 0);
 HEAP32[$9 + 96 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 160 >> 2], 3, HEAP32[$9 + 144 >> 2], 3);
 HEAP32[$9 + 92 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 168 >> 2], 1);
 HEAP32[$9 + 88 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 168 >> 2], 2);
 HEAP32[$9 + 84 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 168 >> 2], 3);
 HEAP32[$9 + 80 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 160 >> 2], 1);
 HEAP32[$9 + 76 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 160 >> 2], 2);
 HEAP32[$9 + 72 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 144 >> 2], 1);
 HEAP32[$9 + 68 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 144 >> 2], 2);
 label$4 : {
  if (HEAP32[$9 + 96 >> 2] != (Math_imul(HEAP32[$9 + 84 >> 2], HEAP32[$9 + 112 >> 2]) | 0)) {
   break label$4;
  }
 }
 label$5 : {
  if ((tflite__RuntimeShape__FlatSize_28_29_20const(HEAP32[$9 + 152 >> 2]) | 0) != HEAP32[$9 + 96 >> 2]) {
   break label$5;
  }
 }
 HEAP32[$9 + 64 >> 2] = 0;
 while (1) {
  if (HEAP32[$9 + 64 >> 2] < HEAP32[$9 + 100 >> 2]) {
   HEAP32[$9 + 60 >> 2] = 0;
   while (1) {
    if (HEAP32[$9 + 60 >> 2] < HEAP32[$9 + 72 >> 2]) {
     HEAP32[$9 + 56 >> 2] = 0;
     while (1) {
      if (HEAP32[$9 + 56 >> 2] < HEAP32[$9 + 68 >> 2]) {
       HEAP32[$9 + 52 >> 2] = 0;
       while (1) {
        if (HEAP32[$9 + 52 >> 2] < HEAP32[$9 + 84 >> 2]) {
         HEAP32[$9 + 48 >> 2] = 0;
         while (1) {
          if (HEAP32[$9 + 48 >> 2] < HEAP32[$9 + 112 >> 2]) {
           HEAP32[$9 + 44 >> 2] = HEAP32[$9 + 48 >> 2] + Math_imul(HEAP32[$9 + 52 >> 2], HEAP32[$9 + 112 >> 2]);
           HEAP32[$9 + 40 >> 2] = Math_imul(HEAP32[$9 + 56 >> 2], HEAP32[$9 + 136 >> 2]) - HEAP32[$9 + 120 >> 2];
           HEAP32[$9 + 36 >> 2] = Math_imul(HEAP32[$9 + 60 >> 2], HEAP32[$9 + 132 >> 2]) - HEAP32[$9 + 116 >> 2];
           HEAPF32[$9 + 32 >> 2] = 0;
           HEAP32[$9 + 28 >> 2] = 0;
           while (1) {
            if (HEAP32[$9 + 28 >> 2] < HEAP32[$9 + 80 >> 2]) {
             HEAP32[$9 + 24 >> 2] = 0;
             while (1) {
              if (HEAP32[$9 + 24 >> 2] < HEAP32[$9 + 76 >> 2]) {
               HEAP32[$9 + 20 >> 2] = HEAP32[$9 + 40 >> 2] + Math_imul(HEAP32[$9 + 128 >> 2], HEAP32[$9 + 24 >> 2]);
               HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 36 >> 2] + Math_imul(HEAP32[$9 + 124 >> 2], HEAP32[$9 + 28 >> 2]);
               if (!(HEAP32[$9 + 20 >> 2] < 0 | HEAP32[$9 + 20 >> 2] >= HEAP32[$9 + 88 >> 2] | (HEAP32[$9 + 16 >> 2] < 0 | HEAP32[$9 + 16 >> 2] >= HEAP32[$9 + 92 >> 2]))) {
                HEAPF32[$9 + 12 >> 2] = HEAPF32[HEAP32[$9 + 164 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$9 + 168 >> 2], HEAP32[$9 + 64 >> 2], HEAP32[$9 + 16 >> 2], HEAP32[$9 + 20 >> 2], HEAP32[$9 + 52 >> 2]) << 2) >> 2];
                HEAPF32[$9 + 8 >> 2] = HEAPF32[HEAP32[$9 + 156 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$9 + 160 >> 2], 0, HEAP32[$9 + 28 >> 2], HEAP32[$9 + 24 >> 2], HEAP32[$9 + 44 >> 2]) << 2) >> 2];
                HEAPF32[$9 + 32 >> 2] = HEAPF32[$9 + 32 >> 2] + Math_fround(HEAPF32[$9 + 12 >> 2] * HEAPF32[$9 + 8 >> 2]);
               }
               HEAP32[$9 + 24 >> 2] = HEAP32[$9 + 24 >> 2] + 1;
               continue;
              }
              break;
             }
             HEAP32[$9 + 28 >> 2] = HEAP32[$9 + 28 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAPF32[$9 + 4 >> 2] = 0;
           if (HEAP32[$9 + 148 >> 2]) {
            HEAPF32[$9 + 4 >> 2] = HEAPF32[HEAP32[$9 + 148 >> 2] + (HEAP32[$9 + 44 >> 2] << 2) >> 2];
           }
           $10 = tflite__ActivationFunctionWithMinMax_28float_2c_20float_2c_20float_29(Math_fround(HEAPF32[$9 + 32 >> 2] + HEAPF32[$9 + 4 >> 2]), HEAPF32[$9 + 108 >> 2], HEAPF32[$9 + 104 >> 2]);
           HEAPF32[HEAP32[$9 + 140 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$9 + 144 >> 2], HEAP32[$9 + 64 >> 2], HEAP32[$9 + 60 >> 2], HEAP32[$9 + 56 >> 2], HEAP32[$9 + 44 >> 2]) << 2) >> 2] = $10;
           HEAP32[$9 + 48 >> 2] = HEAP32[$9 + 48 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAP32[$9 + 52 >> 2] = HEAP32[$9 + 52 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$9 + 56 >> 2] = HEAP32[$9 + 56 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$9 + 60 >> 2] = HEAP32[$9 + 60 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$9 + 64 >> 2] = HEAP32[$9 + 64 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $9 + 176 | 0;
}
function tflite__ops__micro__add__EvalAddQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteAddParams__2c_20tflite__ops__micro__add__OpData_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = global$0 - 464 | 0;
 global$0 = $7;
 HEAP32[$7 + 460 >> 2] = $0;
 HEAP32[$7 + 456 >> 2] = $1;
 HEAP32[$7 + 452 >> 2] = $2;
 HEAP32[$7 + 448 >> 2] = $3;
 HEAP32[$7 + 444 >> 2] = $4;
 HEAP32[$7 + 440 >> 2] = $5;
 HEAP32[$7 + 436 >> 2] = $6;
 if (!(HEAP32[HEAP32[$7 + 436 >> 2] >> 2] != 9 ? HEAP32[HEAP32[$7 + 436 >> 2] >> 2] != 3 : 0)) {
  $0 = $7 + 304 | 0;
  $1 = $7 + 328 | 0;
  HEAP32[$7 + 376 >> 2] = HEAP32[HEAP32[$7 + 448 >> 2] + 36 >> 2];
  HEAP32[$7 + 356 >> 2] = HEAP32[HEAP32[$7 + 448 >> 2] + 40 >> 2];
  HEAP32[$7 + 380 >> 2] = HEAP32[HEAP32[$7 + 448 >> 2] + 20 >> 2];
  HEAP32[$7 + 384 >> 2] = HEAP32[HEAP32[$7 + 448 >> 2] + 4 >> 2];
  HEAP32[$7 + 360 >> 2] = HEAP32[HEAP32[$7 + 448 >> 2] + 44 >> 2];
  HEAP32[$7 + 388 >> 2] = HEAP32[HEAP32[$7 + 448 >> 2] + 24 >> 2];
  HEAP32[$7 + 392 >> 2] = HEAP32[HEAP32[$7 + 448 >> 2] + 8 >> 2];
  HEAP32[$7 + 364 >> 2] = HEAP32[HEAP32[$7 + 448 >> 2] + 48 >> 2];
  HEAP32[$7 + 368 >> 2] = HEAP32[HEAP32[$7 + 448 >> 2] + 28 >> 2];
  HEAP32[$7 + 372 >> 2] = HEAP32[HEAP32[$7 + 448 >> 2] + 32 >> 2];
  void_20tflite__SetActivationParams_tflite__ArithmeticParams__28int_2c_20int_2c_20tflite__ArithmeticParams__29(HEAP32[HEAP32[$7 + 448 >> 2] + 12 >> 2], HEAP32[HEAP32[$7 + 448 >> 2] + 16 >> 2], $7 + 352 | 0);
  tflite__GetTensorShape_28TfLiteTensor_20const__29($1, HEAP32[$7 + 444 >> 2]);
  tflite__GetTensorShape_28TfLiteTensor_20const__29($0, HEAP32[$7 + 440 >> 2]);
  $0 = tflite__reference_ops__ProcessBroadcastShapes_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__2c_20tflite__ArithmeticParams__29($7 + 328 | 0, $7 + 304 | 0, $7 + 352 | 0);
  $1 = $7 + 328 | 0;
  tflite__RuntimeShape___RuntimeShape_28_29($7 + 304 | 0);
  tflite__RuntimeShape___RuntimeShape_28_29($1);
  HEAP8[$7 + 351 | 0] = $0 & 1;
  label$3 : {
   if (HEAP32[HEAP32[$7 + 436 >> 2] >> 2] == 9) {
    if (HEAP8[$7 + 351 | 0] & 1) {
     tflite__GetTensorShape_28TfLiteTensor_20const__29($7 + 272 | 0, HEAP32[$7 + 444 >> 2]);
     $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$7 + 444 >> 2]);
     tflite__GetTensorShape_28TfLiteTensor_20const__29($7 + 248 | 0, HEAP32[$7 + 440 >> 2]);
     $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$7 + 440 >> 2]);
     tflite__GetTensorShape_28TfLiteTensor_20const__29($7 + 224 | 0, HEAP32[$7 + 436 >> 2]);
     tflite__reference_integer_ops__BroadcastAdd4DSlow_28tflite__ArithmeticParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($7 + 352 | 0, $7 + 272 | 0, $0, $7 + 248 | 0, $1, $7 + 224 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$7 + 436 >> 2]));
     $0 = $7 + 272 | 0;
     $1 = $7 + 248 | 0;
     tflite__RuntimeShape___RuntimeShape_28_29($7 + 224 | 0);
     break label$3;
    }
    tflite__GetTensorShape_28TfLiteTensor_20const__29($7 + 200 | 0, HEAP32[$7 + 444 >> 2]);
    $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$7 + 444 >> 2]);
    tflite__GetTensorShape_28TfLiteTensor_20const__29($7 + 176 | 0, HEAP32[$7 + 440 >> 2]);
    $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$7 + 440 >> 2]);
    tflite__GetTensorShape_28TfLiteTensor_20const__29($7 + 152 | 0, HEAP32[$7 + 436 >> 2]);
    tflite__reference_integer_ops__Add_28tflite__ArithmeticParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($7 + 352 | 0, $7 + 200 | 0, $0, $7 + 176 | 0, $1, $7 + 152 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$7 + 436 >> 2]));
    $0 = $7 + 200 | 0;
    $1 = $7 + 176 | 0;
    tflite__RuntimeShape___RuntimeShape_28_29($7 + 152 | 0);
    break label$3;
   }
   label$6 : {
    if (HEAP8[$7 + 351 | 0] & 1) {
     tflite__GetTensorShape_28TfLiteTensor_20const__29($7 + 128 | 0, HEAP32[$7 + 444 >> 2]);
     $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$7 + 444 >> 2]);
     tflite__GetTensorShape_28TfLiteTensor_20const__29($7 + 104 | 0, HEAP32[$7 + 440 >> 2]);
     $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$7 + 440 >> 2]);
     tflite__GetTensorShape_28TfLiteTensor_20const__29($7 + 80 | 0, HEAP32[$7 + 436 >> 2]);
     tflite__reference_ops__BroadcastAdd4DSlow_28tflite__ArithmeticParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($7 + 352 | 0, $7 + 128 | 0, $0, $7 + 104 | 0, $1, $7 + 80 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$7 + 436 >> 2]));
     $0 = $7 + 128 | 0;
     $1 = $7 + 104 | 0;
     tflite__RuntimeShape___RuntimeShape_28_29($7 + 80 | 0);
     break label$6;
    }
    tflite__GetTensorShape_28TfLiteTensor_20const__29($7 + 56 | 0, HEAP32[$7 + 444 >> 2]);
    $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$7 + 444 >> 2]);
    tflite__GetTensorShape_28TfLiteTensor_20const__29($7 + 32 | 0, HEAP32[$7 + 440 >> 2]);
    $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$7 + 440 >> 2]);
    tflite__GetTensorShape_28TfLiteTensor_20const__29($7 + 8 | 0, HEAP32[$7 + 436 >> 2]);
    tflite__reference_ops__Add_28tflite__ArithmeticParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($7 + 352 | 0, $7 + 56 | 0, $0, $7 + 32 | 0, $1, $7 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$7 + 436 >> 2]));
    $0 = $7 + 56 | 0;
    $1 = $7 + 32 | 0;
    tflite__RuntimeShape___RuntimeShape_28_29($7 + 8 | 0);
   }
  }
  tflite__RuntimeShape___RuntimeShape_28_29($1);
  tflite__RuntimeShape___RuntimeShape_28_29($0);
 }
 global$0 = $7 + 464 | 0;
 return 0;
}
function tflite__PopulateConvolutionQuantizationParams_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteFusedActivation_20const__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 var $12 = 0;
 $12 = global$0 - 304 | 0;
 global$0 = $12;
 HEAP32[$12 + 296 >> 2] = $0;
 HEAP32[$12 + 292 >> 2] = $1;
 HEAP32[$12 + 288 >> 2] = $2;
 HEAP32[$12 + 284 >> 2] = $3;
 HEAP32[$12 + 280 >> 2] = $4;
 HEAP32[$12 + 276 >> 2] = $5;
 HEAP32[$12 + 272 >> 2] = $6;
 HEAP32[$12 + 268 >> 2] = $7;
 HEAP32[$12 + 264 >> 2] = $8;
 HEAP32[$12 + 260 >> 2] = $9;
 HEAP32[$12 + 256 >> 2] = $10;
 HEAP32[$12 + 252 >> 2] = $11;
 label$1 : {
  if (HEAP32[HEAP32[$12 + 292 >> 2] + 48 >> 2] != 1) {
   $0 = HEAP32[HEAP32[$12 + 296 >> 2] + 20 >> 2];
   $1 = HEAP32[$12 + 296 >> 2];
   $2 = HEAP32[HEAP32[$12 + 292 >> 2] + 48 >> 2];
   HEAP32[$12 + 20 >> 2] = 1;
   HEAP32[$12 + 16 >> 2] = $2;
   HEAP32[$12 + 12 >> 2] = 49238;
   HEAP32[$12 + 8 >> 2] = 49213;
   HEAP32[$12 + 4 >> 2] = 33;
   HEAP32[$12 >> 2] = 49130;
   FUNCTION_TABLE[$0]($1, 49104, $12);
   HEAP32[$12 + 300 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[$12 + 288 >> 2] + 48 >> 2] != 1) {
   $0 = HEAP32[HEAP32[$12 + 296 >> 2] + 20 >> 2];
   $1 = HEAP32[$12 + 296 >> 2];
   $2 = HEAP32[HEAP32[$12 + 288 >> 2] + 48 >> 2];
   HEAP32[$12 + 52 >> 2] = 1;
   HEAP32[$12 + 48 >> 2] = $2;
   HEAP32[$12 + 44 >> 2] = 49238;
   HEAP32[$12 + 40 >> 2] = 49264;
   HEAP32[$12 + 36 >> 2] = 35;
   HEAP32[$12 + 32 >> 2] = 49130;
   FUNCTION_TABLE[$0]($1, 49104, $12 + 32 | 0);
   HEAP32[$12 + 300 >> 2] = 1;
   break label$1;
  }
  HEAP32[$12 + 248 >> 2] = HEAP32[HEAP32[$12 + 288 >> 2] + 52 >> 2];
  if (!HEAP32[$12 + 248 >> 2]) {
   $0 = HEAP32[HEAP32[$12 + 296 >> 2] + 20 >> 2];
   $1 = HEAP32[$12 + 296 >> 2];
   HEAP32[$12 + 184 >> 2] = 49313;
   HEAP32[$12 + 180 >> 2] = 45;
   HEAP32[$12 + 176 >> 2] = 49130;
   FUNCTION_TABLE[$0]($1, 49290, $12 + 176 | 0);
   HEAP32[$12 + 300 >> 2] = 1;
   break label$1;
  }
  if (!HEAP32[HEAP32[$12 + 248 >> 2] >> 2]) {
   $0 = HEAP32[HEAP32[$12 + 296 >> 2] + 20 >> 2];
   $1 = HEAP32[$12 + 296 >> 2];
   HEAP32[$12 + 168 >> 2] = 49333;
   HEAP32[$12 + 164 >> 2] = 46;
   HEAP32[$12 + 160 >> 2] = 49130;
   FUNCTION_TABLE[$0]($1, 49290, $12 + 160 | 0);
   HEAP32[$12 + 300 >> 2] = 1;
   break label$1;
  }
  HEAP8[$12 + 247 | 0] = HEAP32[HEAP32[HEAP32[$12 + 248 >> 2] >> 2] >> 2] > 1;
  if (HEAP8[$12 + 247 | 0] & 1) {
   if (HEAP32[HEAP32[$12 + 292 >> 2] >> 2] != 9) {
    $0 = HEAP32[HEAP32[$12 + 296 >> 2] + 20 >> 2];
    $1 = HEAP32[$12 + 296 >> 2];
    $2 = HEAP32[HEAP32[$12 + 292 >> 2] >> 2];
    HEAP32[$12 + 84 >> 2] = 9;
    HEAP32[$12 + 80 >> 2] = $2;
    HEAP32[$12 + 76 >> 2] = 49372;
    HEAP32[$12 + 72 >> 2] = 49360;
    HEAP32[$12 + 68 >> 2] = 50;
    HEAP32[$12 + 64 >> 2] = 49130;
    FUNCTION_TABLE[$0]($1, 49104, $12 - -64 | 0);
    HEAP32[$12 + 300 >> 2] = 1;
    break label$1;
   }
   if (HEAP32[HEAP32[$12 + 288 >> 2] >> 2] != 9) {
    $0 = HEAP32[HEAP32[$12 + 296 >> 2] + 20 >> 2];
    $1 = HEAP32[$12 + 296 >> 2];
    $2 = HEAP32[HEAP32[$12 + 288 >> 2] >> 2];
    HEAP32[$12 + 116 >> 2] = 9;
    HEAP32[$12 + 112 >> 2] = $2;
    HEAP32[$12 + 108 >> 2] = 49372;
    HEAP32[$12 + 104 >> 2] = 49384;
    HEAP32[$12 + 100 >> 2] = 51;
    HEAP32[$12 + 96 >> 2] = 49130;
    FUNCTION_TABLE[$0]($1, 49104, $12 + 96 | 0);
    HEAP32[$12 + 300 >> 2] = 1;
    break label$1;
   }
   if (HEAP32[HEAP32[HEAP32[$12 + 248 >> 2] >> 2] >> 2] != HEAP32[(HEAP32[HEAP32[$12 + 288 >> 2] + 8 >> 2] + 4 | 0) + (HEAP32[HEAP32[$12 + 248 >> 2] + 8 >> 2] << 2) >> 2]) {
    $0 = HEAP32[HEAP32[$12 + 296 >> 2] + 20 >> 2];
    $1 = HEAP32[$12 + 296 >> 2];
    $2 = HEAP32[HEAP32[HEAP32[$12 + 248 >> 2] >> 2] >> 2];
    HEAP32[$12 + 148 >> 2] = HEAP32[(HEAP32[HEAP32[$12 + 288 >> 2] + 8 >> 2] + 4 | 0) + (HEAP32[HEAP32[$12 + 248 >> 2] + 8 >> 2] << 2) >> 2];
    HEAP32[$12 + 144 >> 2] = $2;
    HEAP32[$12 + 140 >> 2] = 49430;
    HEAP32[$12 + 136 >> 2] = 49397;
    HEAP32[$12 + 132 >> 2] = 54;
    HEAP32[$12 + 128 >> 2] = 49130;
    FUNCTION_TABLE[$0]($1, 49104, $12 + 128 | 0);
    HEAP32[$12 + 300 >> 2] = 1;
    break label$1;
   }
  }
  HEAP32[$12 + 240 >> 2] = HEAP32[HEAP32[HEAP32[$12 + 248 >> 2] >> 2] >> 2];
  HEAPF32[$12 + 236 >> 2] = HEAPF32[HEAP32[$12 + 292 >> 2] + 12 >> 2];
  HEAPF32[$12 + 232 >> 2] = HEAPF32[HEAP32[$12 + 280 >> 2] + 12 >> 2];
  HEAP32[$12 + 228 >> 2] = HEAP32[HEAP32[$12 + 248 >> 2] >> 2] + 4;
  HEAP32[$12 + 224 >> 2] = 0;
  while (1) {
   if (HEAP32[$12 + 224 >> 2] < HEAP32[$12 + 240 >> 2]) {
    HEAPF64[$12 + 216 >> 3] = HEAPF32[HEAP32[$12 + 228 >> 2] + (HEAP32[$12 + 224 >> 2] << 2) >> 2];
    HEAPF64[$12 + 208 >> 3] = +HEAPF32[$12 + 236 >> 2] * HEAPF64[$12 + 216 >> 3] / +HEAPF32[$12 + 232 >> 2];
    tflite__QuantizeMultiplier_28double_2c_20int__2c_20int__29(HEAPF64[$12 + 208 >> 3], $12 + 204 | 0, $12 + 200 | 0);
    HEAP32[HEAP32[$12 + 256 >> 2] + (HEAP32[$12 + 224 >> 2] << 2) >> 2] = HEAP32[$12 + 204 >> 2];
    HEAP32[HEAP32[$12 + 252 >> 2] + (HEAP32[$12 + 224 >> 2] << 2) >> 2] = HEAP32[$12 + 200 >> 2];
    HEAP32[$12 + 224 >> 2] = HEAP32[$12 + 224 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[HEAP32[$12 + 292 >> 2] >> 2] == 3) {
   HEAPF64[$12 + 192 >> 3] = 0;
   if (tflite__GetQuantizedConvolutionMultipler_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20double__29(HEAP32[$12 + 296 >> 2], HEAP32[$12 + 292 >> 2], HEAP32[$12 + 288 >> 2], HEAP32[$12 + 284 >> 2], HEAP32[$12 + 280 >> 2], $12 + 192 | 0)) {
    HEAP32[$12 + 300 >> 2] = 1;
    break label$1;
   }
   tflite__QuantizeMultiplier_28double_2c_20int__2c_20int__29(HEAPF64[$12 + 192 >> 3], HEAP32[$12 + 272 >> 2], $12 + 188 | 0);
   HEAP32[HEAP32[$12 + 268 >> 2] >> 2] = 0 - HEAP32[$12 + 188 >> 2];
   tflite__CalculateActivationRangeUint8_28TfLiteFusedActivation_2c_20TfLiteTensor__2c_20int__2c_20int__29(HEAP32[HEAP32[$12 + 276 >> 2] >> 2], HEAP32[$12 + 280 >> 2], HEAP32[$12 + 264 >> 2], HEAP32[$12 + 260 >> 2]);
  }
  HEAP32[$12 + 300 >> 2] = 0;
 }
 global$0 = $12 + 304 | 0;
 return HEAP32[$12 + 300 >> 2];
}
function utilTimerInsertTask($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 label$1 : {
  if (utilTimerIsFull() & 1) {
   HEAP8[$4 + 31 | 0] = 0;
   break label$1;
  }
  HEAP8[$4 + 23 | 0] = HEAPU8[97074];
  while (1) {
   if (HEAPU8[$4 + 23 | 0] != HEAPU8[97073]) {
    $0 = Math_imul(HEAPU8[$4 + 23 | 0], 29) + 97088 | 0;
    $1 = HEAP32[$4 + 24 >> 2];
    $2 = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) >>> 0 >= (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24)) >>> 0 ? 0 : 1;
    $0 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
    $1 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $0 = ($0 | 0) < ($1 | 0) ? 1 : ($0 | 0) <= ($1 | 0) ? $2 : 0;
   } else {
    $0 = 0;
   }
   if ($0 & 1) {
    HEAP8[$4 + 23 | 0] = HEAPU8[$4 + 23 | 0] + 1 & 15;
    continue;
   }
   break;
  }
  HEAP8[$4 + 22 | 0] = HEAPU8[$4 + 23 | 0] == HEAPU8[97074];
  HEAP32[$4 + 16 >> 2] = HEAPU8[97073];
  while (1) {
   if (HEAP32[$4 + 16 >> 2] != HEAPU8[$4 + 23 | 0]) {
    HEAP8[$4 + 15 | 0] = HEAP32[$4 + 16 >> 2] + 15 & 15;
    $1 = Math_imul(HEAPU8[$4 + 15 | 0], 29) + 97088 | 0;
    $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
    $0 = Math_imul(HEAP32[$4 + 16 >> 2], 29) + 97088 | 0;
    $2 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    HEAP8[$0 | 0] = $2;
    HEAP8[$0 + 1 | 0] = $2 >>> 8;
    HEAP8[$0 + 2 | 0] = $2 >>> 16;
    HEAP8[$0 + 3 | 0] = $2 >>> 24;
    HEAP8[$0 + 4 | 0] = $3;
    HEAP8[$0 + 5 | 0] = $3 >>> 8;
    HEAP8[$0 + 6 | 0] = $3 >>> 16;
    HEAP8[$0 + 7 | 0] = $3 >>> 24;
    $2 = HEAPU8[$1 + 25 | 0] | HEAPU8[$1 + 26 | 0] << 8 | (HEAPU8[$1 + 27 | 0] << 16 | HEAPU8[$1 + 28 | 0] << 24);
    $3 = HEAPU8[$1 + 21 | 0] | HEAPU8[$1 + 22 | 0] << 8 | (HEAPU8[$1 + 23 | 0] << 16 | HEAPU8[$1 + 24 | 0] << 24);
    HEAP8[$0 + 21 | 0] = $3;
    HEAP8[$0 + 22 | 0] = $3 >>> 8;
    HEAP8[$0 + 23 | 0] = $3 >>> 16;
    HEAP8[$0 + 24 | 0] = $3 >>> 24;
    HEAP8[$0 + 25 | 0] = $2;
    HEAP8[$0 + 26 | 0] = $2 >>> 8;
    HEAP8[$0 + 27 | 0] = $2 >>> 16;
    HEAP8[$0 + 28 | 0] = $2 >>> 24;
    $2 = HEAPU8[$1 + 20 | 0] | HEAPU8[$1 + 21 | 0] << 8 | (HEAPU8[$1 + 22 | 0] << 16 | HEAPU8[$1 + 23 | 0] << 24);
    $3 = HEAPU8[$1 + 16 | 0] | HEAPU8[$1 + 17 | 0] << 8 | (HEAPU8[$1 + 18 | 0] << 16 | HEAPU8[$1 + 19 | 0] << 24);
    HEAP8[$0 + 16 | 0] = $3;
    HEAP8[$0 + 17 | 0] = $3 >>> 8;
    HEAP8[$0 + 18 | 0] = $3 >>> 16;
    HEAP8[$0 + 19 | 0] = $3 >>> 24;
    HEAP8[$0 + 20 | 0] = $2;
    HEAP8[$0 + 21 | 0] = $2 >>> 8;
    HEAP8[$0 + 22 | 0] = $2 >>> 16;
    HEAP8[$0 + 23 | 0] = $2 >>> 24;
    $2 = HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8 | (HEAPU8[$1 + 14 | 0] << 16 | HEAPU8[$1 + 15 | 0] << 24);
    $1 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24);
    HEAP8[$0 + 8 | 0] = $1;
    HEAP8[$0 + 9 | 0] = $1 >>> 8;
    HEAP8[$0 + 10 | 0] = $1 >>> 16;
    HEAP8[$0 + 11 | 0] = $1 >>> 24;
    HEAP8[$0 + 12 | 0] = $2;
    HEAP8[$0 + 13 | 0] = $2 >>> 8;
    HEAP8[$0 + 14 | 0] = $2 >>> 16;
    HEAP8[$0 + 15 | 0] = $2 >>> 24;
    HEAP32[$4 + 16 >> 2] = HEAPU8[$4 + 15 | 0];
    continue;
   }
   break;
  }
  $1 = HEAP32[$4 + 24 >> 2];
  $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  $0 = Math_imul(HEAPU8[$4 + 23 | 0], 29) + 97088 | 0;
  $2 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
  HEAP8[$0 | 0] = $2;
  HEAP8[$0 + 1 | 0] = $2 >>> 8;
  HEAP8[$0 + 2 | 0] = $2 >>> 16;
  HEAP8[$0 + 3 | 0] = $2 >>> 24;
  HEAP8[$0 + 4 | 0] = $3;
  HEAP8[$0 + 5 | 0] = $3 >>> 8;
  HEAP8[$0 + 6 | 0] = $3 >>> 16;
  HEAP8[$0 + 7 | 0] = $3 >>> 24;
  $2 = HEAPU8[$1 + 25 | 0] | HEAPU8[$1 + 26 | 0] << 8 | (HEAPU8[$1 + 27 | 0] << 16 | HEAPU8[$1 + 28 | 0] << 24);
  $3 = HEAPU8[$1 + 21 | 0] | HEAPU8[$1 + 22 | 0] << 8 | (HEAPU8[$1 + 23 | 0] << 16 | HEAPU8[$1 + 24 | 0] << 24);
  HEAP8[$0 + 21 | 0] = $3;
  HEAP8[$0 + 22 | 0] = $3 >>> 8;
  HEAP8[$0 + 23 | 0] = $3 >>> 16;
  HEAP8[$0 + 24 | 0] = $3 >>> 24;
  HEAP8[$0 + 25 | 0] = $2;
  HEAP8[$0 + 26 | 0] = $2 >>> 8;
  HEAP8[$0 + 27 | 0] = $2 >>> 16;
  HEAP8[$0 + 28 | 0] = $2 >>> 24;
  $2 = HEAPU8[$1 + 20 | 0] | HEAPU8[$1 + 21 | 0] << 8 | (HEAPU8[$1 + 22 | 0] << 16 | HEAPU8[$1 + 23 | 0] << 24);
  $3 = HEAPU8[$1 + 16 | 0] | HEAPU8[$1 + 17 | 0] << 8 | (HEAPU8[$1 + 18 | 0] << 16 | HEAPU8[$1 + 19 | 0] << 24);
  HEAP8[$0 + 16 | 0] = $3;
  HEAP8[$0 + 17 | 0] = $3 >>> 8;
  HEAP8[$0 + 18 | 0] = $3 >>> 16;
  HEAP8[$0 + 19 | 0] = $3 >>> 24;
  HEAP8[$0 + 20 | 0] = $2;
  HEAP8[$0 + 21 | 0] = $2 >>> 8;
  HEAP8[$0 + 22 | 0] = $2 >>> 16;
  HEAP8[$0 + 23 | 0] = $2 >>> 24;
  $2 = HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8 | (HEAPU8[$1 + 14 | 0] << 16 | HEAPU8[$1 + 15 | 0] << 24);
  $1 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24);
  HEAP8[$0 + 8 | 0] = $1;
  HEAP8[$0 + 9 | 0] = $1 >>> 8;
  HEAP8[$0 + 10 | 0] = $1 >>> 16;
  HEAP8[$0 + 11 | 0] = $1 >>> 24;
  HEAP8[$0 + 12 | 0] = $2;
  HEAP8[$0 + 13 | 0] = $2 >>> 8;
  HEAP8[$0 + 14 | 0] = $2 >>> 16;
  HEAP8[$0 + 15 | 0] = $2 >>> 24;
  HEAP8[97073] = HEAPU8[97073] + 1 & 15;
  if (!(HEAP8[$4 + 22 | 0] & 1 ? 0 : HEAP8[97075] & 1)) {
   HEAP8[97075] = 1;
   $1 = Math_imul(HEAPU8[97074], 29) + 97088 | 0;
   $0 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
   $2 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
   $1 = jshGetSystemTime();
   jshSetSystemTime($0 - $1 | 0, $2 - (i64toi32_i32$HIGH_BITS + ($0 >>> 0 < $1 >>> 0) | 0) | 0);
  }
  HEAP8[$4 + 31 | 0] = 1;
 }
 global$0 = $4 + 32 | 0;
 return HEAP8[$4 + 31 | 0] & 1;
}
function jsiDebuggerLine($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 192 | 0;
 global$0 = $1;
 HEAP32[$1 + 188 >> 2] = $0;
 HEAP32[$1 + 52 >> 2] = jslSetLex($1 + 56 | 0);
 jslInit(HEAP32[$1 + 188 >> 2]);
 HEAP8[$1 + 51 | 0] = 0;
 if (!(HEAP16[$1 + 58 >> 1] != 169 ? HEAP16[$1 + 58 >> 1] != 128 : 0)) {
  HEAP8[$1 + 51 | 0] = 1;
  HEAP32[$1 + 44 >> 2] = jslGetTokenValueAsString();
  label$3 : {
   label$4 : {
    if (strcmp(HEAP32[$1 + 44 >> 2], 6465)) {
     if (strcmp(HEAP32[$1 + 44 >> 2], 6470)) {
      break label$4;
     }
    }
    jsiConsolePrintString(6472);
    break label$3;
   }
   label$6 : {
    label$7 : {
     if (strcmp(HEAP32[$1 + 44 >> 2], 6991)) {
      if (strcmp(HEAP32[$1 + 44 >> 2], 6996)) {
       break label$7;
      }
     }
     HEAP16[47566] = HEAPU16[47566] | 16;
     HEAP32[23778] = HEAP32[23778] | 16;
     break label$6;
    }
    label$9 : {
     if (!strcmp(HEAP32[$1 + 44 >> 2], 6998)) {
      HEAP16[47566] = HEAPU16[47566] & -225 | 144;
      HEAP32[23778] = HEAP32[23778] | 16;
      break label$9;
     }
     label$11 : {
      label$12 : {
       if (strcmp(HEAP32[$1 + 44 >> 2], 7004)) {
        if (strcmp(HEAP32[$1 + 44 >> 2], 7013)) {
         break label$12;
        }
       }
       HEAP16[47566] = HEAPU16[47566] | 16;
       break label$11;
      }
      label$14 : {
       label$15 : {
        if (strcmp(HEAP32[$1 + 44 >> 2], 7015)) {
         if (strcmp(HEAP32[$1 + 44 >> 2], 7020)) {
          break label$15;
         }
        }
        HEAP16[47566] = HEAPU16[47566] | 16;
        HEAP32[23778] = HEAP32[23778] | 8192;
        break label$14;
       }
       label$17 : {
        label$18 : {
         if (strcmp(HEAP32[$1 + 44 >> 2], 7022)) {
          if (strcmp(HEAP32[$1 + 44 >> 2], 7027)) {
           break label$18;
          }
         }
         HEAP16[47566] = HEAPU16[47566] | 16;
         HEAP32[23778] = HEAP32[23778] | 24576;
         break label$17;
        }
        label$20 : {
         label$21 : {
          if (strcmp(HEAP32[$1 + 44 >> 2], 7029)) {
           if (strcmp(HEAP32[$1 + 44 >> 2], 7036)) {
            break label$21;
           }
          }
          HEAP16[47566] = HEAPU16[47566] | 16;
          HEAP32[23778] = HEAP32[23778] | 32768;
          break label$20;
         }
         label$23 : {
          label$24 : {
           if (strcmp(HEAP32[$1 + 44 >> 2], 7038)) {
            if (strcmp(HEAP32[$1 + 44 >> 2], 7044)) {
             break label$24;
            }
           }
           $0 = $1 + 24 | 0;
           jslGetNextToken();
           HEAP32[$0 + 16 >> 2] = HEAP32[23778];
           $2 = HEAP32[23777];
           HEAP32[$0 + 8 >> 2] = HEAP32[23776];
           HEAP32[$0 + 12 >> 2] = $2;
           $2 = HEAP32[23775];
           HEAP32[$0 >> 2] = HEAP32[23774];
           HEAP32[$0 + 4 >> 2] = $2;
           HEAP32[23778] = 1;
           HEAP32[$1 + 20 >> 2] = jsvSkipNameAndUnLock(jspParse());
           $2 = HEAP32[$0 + 4 >> 2];
           HEAP32[23774] = HEAP32[$0 >> 2];
           HEAP32[23775] = $2;
           HEAP32[23778] = HEAP32[$0 + 16 >> 2];
           $2 = HEAP32[$0 + 12 >> 2];
           HEAP32[23776] = HEAP32[$0 + 8 >> 2];
           HEAP32[23777] = $2;
           jsiConsolePrintChar(61);
           jsfPrintJSON(HEAP32[$1 + 20 >> 2], 301);
           jsiConsolePrintString(5719);
           jsvUnLock(HEAP32[$1 + 20 >> 2]);
           break label$23;
          }
          label$26 : {
           label$27 : {
            if (strcmp(HEAP32[$1 + 44 >> 2], 7046)) {
             if (strcmp(HEAP32[$1 + 44 >> 2], 7051)) {
              break label$27;
             }
            }
            jslGetNextToken();
            HEAP32[$1 + 44 >> 2] = jslGetTokenValueAsString();
            label$29 : {
             label$30 : {
              if (strcmp(HEAP32[$1 + 44 >> 2], 7053)) {
               if (strcmp(HEAP32[$1 + 44 >> 2], 7060)) {
                break label$30;
               }
              }
              HEAP32[$1 + 16 >> 2] = jspeiGetTopScope();
              label$32 : {
               if (HEAP32[$1 + 16 >> 2] == HEAP32[23774]) {
                jsiConsolePrintString(7062);
                break label$32;
               }
               jsiConsolePrintf(7079, 0);
               jsiDebuggerPrintScope(HEAP32[$1 + 16 >> 2]);
               jsiConsolePrintString(5903);
              }
              jsvUnLock(HEAP32[$1 + 16 >> 2]);
              break label$29;
             }
             label$34 : {
              label$35 : {
               if (strcmp(HEAP32[$1 + 44 >> 2], 7121)) {
                if (strcmp(HEAP32[$1 + 44 >> 2], 7027)) {
                 break label$35;
                }
               }
               HEAP32[$1 + 12 >> 2] = jspeiGetTopScope();
               if (HEAP32[$1 + 12 >> 2] == HEAP32[23774]) {
                jsiConsolePrintString(7132);
               }
               jsvUnLock(HEAP32[$1 + 12 >> 2]);
               HEAP32[$1 + 4 >> 2] = jsvGetArrayLength(HEAP32[23776]);
               HEAP32[$1 + 8 >> 2] = 0;
               while (1) {
                if (HEAP32[$1 + 8 >> 2] < HEAP32[$1 + 4 >> 2]) {
                 HEAP32[$1 + 12 >> 2] = jsvGetArrayItem(HEAP32[23776], HEAP32[$1 + 8 >> 2]);
                 HEAP32[$1 >> 2] = HEAP32[$1 + 8 >> 2];
                 jsiConsolePrintf(7149, $1);
                 jsiDebuggerPrintScope(HEAP32[$1 + 12 >> 2]);
                 jsiConsolePrintString(5903);
                 jsvUnLock(HEAP32[$1 + 12 >> 2]);
                 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
                 continue;
                }
                break;
               }
               break label$34;
              }
              jsiConsolePrintString(7193);
             }
            }
            break label$26;
           }
           HEAP8[$1 + 51 | 0] = 0;
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 if (!(HEAP8[$1 + 51 | 0] & 1)) {
  jsiConsolePrintString(7210);
 }
 jslKill();
 jslSetLex(HEAP32[$1 + 52 >> 2]);
 global$0 = $1 + 192 | 0;
}
function jswrap_string_replace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 192 | 0;
 global$0 = $3;
 HEAP32[$3 + 184 >> 2] = $0;
 HEAP32[$3 + 180 >> 2] = $1;
 HEAP32[$3 + 176 >> 2] = $2;
 HEAP32[$3 + 172 >> 2] = jsvAsString(HEAP32[$3 + 184 >> 2]);
 label$1 : {
  if (jsvIsInstanceOf(HEAP32[$3 + 180 >> 2]) & 1) {
   label$3 : {
    label$4 : {
     if (!(jsvIsFunction(HEAP32[$3 + 176 >> 2]) & 1)) {
      if (!(jsvIsString(HEAP32[$3 + 176 >> 2]) & 1)) {
       break label$4;
      }
     }
     HEAP32[$3 + 168 >> 2] = jsvLockAgain(HEAP32[$3 + 176 >> 2]);
     break label$3;
    }
    HEAP32[$3 + 168 >> 2] = jsvAsString(HEAP32[$3 + 176 >> 2]);
   }
   jsvObjectSetChildAndUnLock(HEAP32[$3 + 180 >> 2], 37412, jsvNewFromInteger(0));
   HEAP8[$3 + 167 | 0] = jswrap_regexp_hasFlag(HEAP32[$3 + 180 >> 2], 103) & 1;
   HEAP32[$3 + 160 >> 2] = jswrap_regexp_exec(HEAP32[$3 + 180 >> 2], HEAP32[$3 + 172 >> 2]);
   while (1) {
    $0 = 0;
    label$7 : {
     if (!HEAP32[$3 + 160 >> 2]) {
      break label$7;
     }
     $1 = jsvIsNull(HEAP32[$3 + 160 >> 2]) & 1;
     $0 = 0;
     if ($1) {
      break label$7;
     }
     $0 = jspIsInterrupted() ^ -1;
    }
    if ($0 & 1) {
     $0 = $3 + 120 | 0;
     HEAP32[$3 + 156 >> 2] = jsvGetArrayItem(HEAP32[$3 + 160 >> 2], 0);
     HEAP32[$3 + 152 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$3 + 160 >> 2], 37422, 0));
     HEAP32[$3 + 148 >> 2] = jsvGetStringLength(HEAP32[$3 + 156 >> 2]);
     HEAP32[$3 + 144 >> 2] = jsvNewFromStringVar(HEAP32[$3 + 172 >> 2], 0, HEAP32[$3 + 152 >> 2]);
     jsvStringIteratorNew($0, HEAP32[$3 + 144 >> 2], 0);
     jsvStringIteratorGotoEnd($0);
     label$9 : {
      if (jsvIsFunction(HEAP32[$3 + 168 >> 2]) & 1) {
       $0 = $3 - -64 | 0;
       HEAP32[$3 + 116 >> 2] = 0;
       $1 = jsvLockAgain(HEAP32[$3 + 156 >> 2]);
       $2 = HEAP32[$3 + 116 >> 2];
       HEAP32[$3 + 116 >> 2] = $2 + 1;
       HEAP32[$0 + ($2 << 2) >> 2] = $1;
       while (1) {
        $0 = jsvGetArrayItem(HEAP32[$3 + 160 >> 2], HEAP32[$3 + 116 >> 2]);
        HEAP32[$3 + 60 >> 2] = $0;
        if ($0) {
         $0 = HEAP32[$3 + 60 >> 2];
         $1 = HEAP32[$3 + 116 >> 2];
         HEAP32[$3 + 116 >> 2] = $1 + 1;
         HEAP32[($3 - -64 | 0) + ($1 << 2) >> 2] = $0;
         continue;
        }
        break;
       }
       $1 = $3 + 120 | 0;
       $0 = $3 - -64 | 0;
       $2 = jsvObjectGetChild(HEAP32[$3 + 160 >> 2], 37422, 0);
       $4 = HEAP32[$3 + 116 >> 2];
       HEAP32[$3 + 116 >> 2] = $4 + 1;
       HEAP32[$0 + ($4 << 2) >> 2] = $2;
       $2 = jsvObjectGetChild(HEAP32[$3 + 160 >> 2], 37428, 0);
       $4 = HEAP32[$3 + 116 >> 2];
       HEAP32[$3 + 116 >> 2] = $4 + 1;
       HEAP32[$0 + ($4 << 2) >> 2] = $2;
       HEAP32[$3 + 56 >> 2] = jsvAsStringAndUnLock(jspeFunctionCall(HEAP32[$3 + 168 >> 2], 0, 0, 0, HEAP32[$3 + 116 >> 2], $0));
       jsvUnLockMany(HEAP32[$3 + 116 >> 2], $0);
       jsvStringIteratorAppendString($1, HEAP32[$3 + 56 >> 2], 0);
       jsvUnLock(HEAP32[$3 + 56 >> 2]);
       break label$9;
      }
      jsvStringIteratorNew($3 + 32 | 0, HEAP32[$3 + 168 >> 2], 0);
      while (1) {
       if (jsvStringIteratorHasChar($3 + 32 | 0) & 1) {
        HEAP8[$3 + 31 | 0] = jsvStringIteratorGetCharAndNext($3 + 32 | 0);
        label$15 : {
         if (HEAP8[$3 + 31 | 0] == 36) {
          HEAP8[$3 + 31 | 0] = jsvStringIteratorGetCharAndNext($3 + 32 | 0);
          HEAP32[$3 + 24 >> 2] = 0;
          if (!(HEAP8[$3 + 31 | 0] <= 48 | HEAP8[$3 + 31 | 0] > 57)) {
           HEAP32[$3 + 24 >> 2] = jsvGetArrayItem(HEAP32[$3 + 160 >> 2], HEAP8[$3 + 31 | 0] - 48 | 0);
          }
          label$18 : {
           if (HEAP32[$3 + 24 >> 2]) {
            jsvStringIteratorAppendString($3 + 120 | 0, HEAP32[$3 + 24 >> 2], 0);
            jsvUnLock(HEAP32[$3 + 24 >> 2]);
            break label$18;
           }
           $0 = $3 + 120 | 0;
           jsvStringIteratorAppend($0, 36);
           jsvStringIteratorAppend($0, HEAP8[$3 + 31 | 0]);
          }
          break label$15;
         }
         jsvStringIteratorAppend($3 + 120 | 0, HEAP8[$3 + 31 | 0]);
        }
        continue;
       }
       break;
      }
      jsvStringIteratorFree($3 + 32 | 0);
     }
     $0 = $3 + 120 | 0;
     HEAP32[$3 + 20 >> 2] = jsvStringIteratorGetIndex($0) + 1;
     jsvStringIteratorAppendString($0, HEAP32[$3 + 172 >> 2], HEAP32[$3 + 152 >> 2] + HEAP32[$3 + 148 >> 2] | 0);
     jsvStringIteratorFree($0);
     jsvUnLock2(HEAP32[$3 + 172 >> 2], HEAP32[$3 + 156 >> 2]);
     HEAP32[$3 + 172 >> 2] = HEAP32[$3 + 144 >> 2];
     jsvUnLock(HEAP32[$3 + 160 >> 2]);
     HEAP32[$3 + 160 >> 2] = 0;
     if (HEAP8[$3 + 167 | 0] & 1) {
      jsvObjectSetChildAndUnLock(HEAP32[$3 + 180 >> 2], 37412, jsvNewFromInteger(HEAP32[$3 + 20 >> 2]));
      HEAP32[$3 + 160 >> 2] = jswrap_regexp_exec(HEAP32[$3 + 180 >> 2], HEAP32[$3 + 172 >> 2]);
     }
     continue;
    }
    break;
   }
   jsvUnLock(HEAP32[$3 + 160 >> 2]);
   jsvUnLock(HEAP32[$3 + 168 >> 2]);
   if (HEAP8[$3 + 167 | 0] & 1) {
    jsvObjectSetChildAndUnLock(HEAP32[$3 + 180 >> 2], 37412, jsvNewFromInteger(0));
   }
   break label$1;
  }
  HEAP32[$3 + 176 >> 2] = jsvAsString(HEAP32[$3 + 176 >> 2]);
  HEAP32[$3 + 180 >> 2] = jsvAsString(HEAP32[$3 + 180 >> 2]);
  HEAP32[$3 + 16 >> 2] = jswrap_string_indexOf(HEAP32[$3 + 184 >> 2], HEAP32[$3 + 180 >> 2], 0, 0);
  if (HEAP32[$3 + 16 >> 2] >= 0) {
   HEAP32[$3 + 12 >> 2] = jsvNewFromStringVar(HEAP32[$3 + 172 >> 2], 0, HEAP32[$3 + 16 >> 2]);
   jsvAppendStringVar(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 176 >> 2], 0, 2147483647);
   jsvAppendStringVar(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 172 >> 2], HEAP32[$3 + 16 >> 2] + jsvGetStringLength(HEAP32[$3 + 180 >> 2]) | 0, 2147483647);
   jsvUnLock(HEAP32[$3 + 172 >> 2]);
   HEAP32[$3 + 172 >> 2] = HEAP32[$3 + 12 >> 2];
  }
  jsvUnLock2(HEAP32[$3 + 180 >> 2], HEAP32[$3 + 176 >> 2]);
 }
 HEAP32[$3 + 188 >> 2] = HEAP32[$3 + 172 >> 2];
 global$0 = $3 + 192 | 0;
 return HEAP32[$3 + 188 >> 2];
}
function tflite__reference_ops__MaxPool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 144 | 0;
 global$0 = $5;
 HEAP32[$5 + 140 >> 2] = $0;
 HEAP32[$5 + 136 >> 2] = $1;
 HEAP32[$5 + 132 >> 2] = $2;
 HEAP32[$5 + 128 >> 2] = $3;
 HEAP32[$5 + 124 >> 2] = $4;
 label$1 : {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2] > HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2]) {
   break label$1;
  }
 }
 label$2 : {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2] < 0) {
   break label$2;
  }
 }
 label$3 : {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2] > 255) {
   break label$3;
  }
 }
 label$4 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$5 + 136 >> 2]) | 0) != 4) {
   break label$4;
  }
 }
 label$5 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$5 + 128 >> 2]) | 0) != 4) {
   break label$5;
  }
 }
 HEAP32[$5 + 120 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 0, HEAP32[$5 + 128 >> 2], 0);
 HEAP32[$5 + 116 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 3, HEAP32[$5 + 128 >> 2], 3);
 HEAP32[$5 + 112 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 1);
 HEAP32[$5 + 108 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 2);
 HEAP32[$5 + 104 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 1);
 HEAP32[$5 + 100 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 2);
 HEAP32[$5 + 96 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 12 >> 2];
 HEAP32[$5 + 92 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 16 >> 2];
 HEAP32[$5 + 88 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 88 >> 2] < HEAP32[$5 + 120 >> 2]) {
   HEAP32[$5 + 84 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 84 >> 2] < HEAP32[$5 + 104 >> 2]) {
     HEAP32[$5 + 80 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 80 >> 2] < HEAP32[$5 + 100 >> 2]) {
       HEAP32[$5 + 76 >> 2] = 0;
       while (1) {
        if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 116 >> 2]) {
         $0 = $5 + 28 | 0;
         $1 = $5 + 40 | 0;
         $2 = $5 + 36 | 0;
         $3 = $5 + 48 | 0;
         HEAP32[$5 + 72 >> 2] = Math_imul(HEAP32[$5 + 80 >> 2], HEAP32[$5 + 92 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 2 >> 1];
         HEAP32[$5 + 68 >> 2] = Math_imul(HEAP32[$5 + 84 >> 2], HEAP32[$5 + 96 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 4 >> 1];
         HEAP32[$5 + 60 >> 2] = 0;
         HEAP32[$5 + 56 >> 2] = 0 - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 64 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 60 | 0, $5 + 56 | 0) >> 2];
         $4 = HEAP32[$5 + 140 >> 2] + 24 | 0;
         HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 108 >> 2] - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 52 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($4, $3) >> 2];
         HEAP32[$5 + 40 >> 2] = 0;
         HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 44 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($1, $2) >> 2];
         $1 = HEAP32[$5 + 140 >> 2] + 20 | 0;
         HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 112 >> 2] - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 32 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($1, $0) >> 2];
         HEAP8[$5 + 27 | 0] = 0;
         HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 44 >> 2];
         while (1) {
          if (HEAP32[$5 + 20 >> 2] < HEAP32[$5 + 32 >> 2]) {
           HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 64 >> 2];
           while (1) {
            if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 52 >> 2]) {
             HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 16 >> 2];
             HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 20 >> 2];
             HEAP8[$5 + 27 | 0] = HEAPU8[unsigned_20char_20const__20std____2__max_unsigned_20char__28unsigned_20char_20const__2c_20unsigned_20char_20const__29($5 + 27 | 0, HEAP32[$5 + 132 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 76 >> 2]) | 0) | 0];
             HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
           continue;
          }
          break;
         }
         $0 = $5 + 6 | 0;
         HEAP8[$5 + 7 | 0] = HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2];
         $1 = $5 + 27 | 0;
         HEAP8[$5 + 27 | 0] = HEAPU8[unsigned_20char_20const__20std____2__max_unsigned_20char__28unsigned_20char_20const__2c_20unsigned_20char_20const__29($1, $5 + 7 | 0) | 0];
         HEAP8[$5 + 6 | 0] = HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2];
         HEAP8[$5 + 27 | 0] = HEAPU8[unsigned_20char_20const__20std____2__min_unsigned_20char__28unsigned_20char_20const__2c_20unsigned_20char_20const__29($1, $0) | 0];
         $0 = HEAPU8[$5 + 27 | 0];
         HEAP8[HEAP32[$5 + 124 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 128 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2]) | 0] = $0;
         HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 80 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 84 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 + 144 | 0;
}
function tflite__reference_integer_ops__MaxPool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 144 | 0;
 global$0 = $5;
 HEAP32[$5 + 140 >> 2] = $0;
 HEAP32[$5 + 136 >> 2] = $1;
 HEAP32[$5 + 132 >> 2] = $2;
 HEAP32[$5 + 128 >> 2] = $3;
 HEAP32[$5 + 124 >> 2] = $4;
 label$1 : {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2] > HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2]) {
   break label$1;
  }
 }
 label$2 : {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2] < -128) {
   break label$2;
  }
 }
 label$3 : {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2] > 127) {
   break label$3;
  }
 }
 label$4 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$5 + 136 >> 2]) | 0) != 4) {
   break label$4;
  }
 }
 label$5 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$5 + 128 >> 2]) | 0) != 4) {
   break label$5;
  }
 }
 HEAP32[$5 + 120 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 0, HEAP32[$5 + 128 >> 2], 0);
 HEAP32[$5 + 116 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 3, HEAP32[$5 + 128 >> 2], 3);
 HEAP32[$5 + 112 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 1);
 HEAP32[$5 + 108 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 2);
 HEAP32[$5 + 104 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 1);
 HEAP32[$5 + 100 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 2);
 HEAP32[$5 + 96 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 12 >> 2];
 HEAP32[$5 + 92 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 16 >> 2];
 HEAP32[$5 + 88 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 88 >> 2] < HEAP32[$5 + 120 >> 2]) {
   HEAP32[$5 + 84 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 84 >> 2] < HEAP32[$5 + 104 >> 2]) {
     HEAP32[$5 + 80 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 80 >> 2] < HEAP32[$5 + 100 >> 2]) {
       HEAP32[$5 + 76 >> 2] = 0;
       while (1) {
        if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 116 >> 2]) {
         $0 = $5 + 28 | 0;
         $1 = $5 + 40 | 0;
         $2 = $5 + 36 | 0;
         $3 = $5 + 48 | 0;
         HEAP32[$5 + 72 >> 2] = Math_imul(HEAP32[$5 + 80 >> 2], HEAP32[$5 + 92 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 2 >> 1];
         HEAP32[$5 + 68 >> 2] = Math_imul(HEAP32[$5 + 84 >> 2], HEAP32[$5 + 96 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 4 >> 1];
         HEAP32[$5 + 60 >> 2] = 0;
         HEAP32[$5 + 56 >> 2] = 0 - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 64 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 60 | 0, $5 + 56 | 0) >> 2];
         $4 = HEAP32[$5 + 140 >> 2] + 24 | 0;
         HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 108 >> 2] - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 52 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($4, $3) >> 2];
         HEAP32[$5 + 40 >> 2] = 0;
         HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 44 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($1, $2) >> 2];
         $1 = HEAP32[$5 + 140 >> 2] + 20 | 0;
         HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 112 >> 2] - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 32 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($1, $0) >> 2];
         HEAP8[$5 + 27 | 0] = -128;
         HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 44 >> 2];
         while (1) {
          if (HEAP32[$5 + 20 >> 2] < HEAP32[$5 + 32 >> 2]) {
           HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 64 >> 2];
           while (1) {
            if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 52 >> 2]) {
             HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 16 >> 2];
             HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 20 >> 2];
             HEAP8[$5 + 27 | 0] = HEAPU8[signed_20char_20const__20std____2__max_signed_20char__28signed_20char_20const__2c_20signed_20char_20const__29($5 + 27 | 0, HEAP32[$5 + 132 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 76 >> 2]) | 0) | 0];
             HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
           continue;
          }
          break;
         }
         $0 = $5 + 6 | 0;
         HEAP8[$5 + 7 | 0] = HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2];
         $1 = $5 + 27 | 0;
         HEAP8[$5 + 27 | 0] = HEAPU8[signed_20char_20const__20std____2__max_signed_20char__28signed_20char_20const__2c_20signed_20char_20const__29($1, $5 + 7 | 0) | 0];
         HEAP8[$5 + 6 | 0] = HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2];
         HEAP8[$5 + 27 | 0] = HEAPU8[signed_20char_20const__20std____2__min_signed_20char__28signed_20char_20const__2c_20signed_20char_20const__29($1, $0) | 0];
         $0 = HEAPU8[$5 + 27 | 0];
         HEAP8[HEAP32[$5 + 124 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 128 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2]) | 0] = $0;
         HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 80 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 84 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 + 144 | 0;
}
function tflite__reference_ops__Softmax_28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $5 = global$0 - 192 | 0;
 global$0 = $5;
 HEAP32[$5 + 188 >> 2] = $0;
 HEAP32[$5 + 184 >> 2] = $1;
 HEAP32[$5 + 180 >> 2] = $2;
 HEAP32[$5 + 176 >> 2] = $3;
 HEAP32[$5 + 172 >> 2] = $4;
 HEAP32[$5 + 168 >> 2] = HEAP32[HEAP32[$5 + 188 >> 2] + 8 >> 2];
 HEAP32[$5 + 164 >> 2] = HEAP32[HEAP32[$5 + 188 >> 2] + 12 >> 2];
 HEAP32[$5 + 160 >> 2] = HEAP32[HEAP32[$5 + 188 >> 2] + 24 >> 2];
 HEAP32[$5 + 156 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$5 + 184 >> 2]) - 1;
 HEAP32[$5 + 152 >> 2] = tflite__MatchingFlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 184 >> 2], HEAP32[$5 + 156 >> 2], HEAP32[$5 + 176 >> 2]);
 HEAP32[$5 + 148 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 184 >> 2], HEAP32[$5 + 156 >> 2], HEAP32[$5 + 176 >> 2], HEAP32[$5 + 156 >> 2]);
 HEAP32[$5 + 144 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 144 >> 2] < HEAP32[$5 + 152 >> 2]) {
   HEAP8[$5 + 143 | 0] = 0;
   HEAP32[$5 + 136 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 136 >> 2] < HEAP32[$5 + 148 >> 2]) {
     HEAP8[$5 + 143 | 0] = HEAPU8[unsigned_20char_20const__20std____2__max_unsigned_20char__28unsigned_20char_20const__2c_20unsigned_20char_20const__29($5 + 143 | 0, HEAP32[$5 + 180 >> 2] + (HEAP32[$5 + 136 >> 2] + Math_imul(HEAP32[$5 + 144 >> 2], HEAP32[$5 + 148 >> 2]) | 0) | 0) | 0];
     HEAP32[$5 + 136 >> 2] = HEAP32[$5 + 136 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 128 >> 2] = gemmlowp__FixedPoint_int_2c_2012___Zero_28_29();
   HEAP32[$5 + 124 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 124 >> 2] < HEAP32[$5 + 148 >> 2]) {
     HEAP32[$5 + 120 >> 2] = HEAPU8[HEAP32[$5 + 180 >> 2] + (HEAP32[$5 + 124 >> 2] + Math_imul(HEAP32[$5 + 144 >> 2], HEAP32[$5 + 148 >> 2]) | 0) | 0] - HEAPU8[$5 + 143 | 0];
     if (HEAP32[$5 + 120 >> 2] >= HEAP32[$5 + 160 >> 2]) {
      $1 = $5 + 104 | 0;
      $0 = $5 + 128 | 0;
      $2 = $5 + 112 | 0;
      $3 = $5 + 72 | 0;
      $4 = $5 + 96 | 0;
      HEAP32[$5 + 116 >> 2] = tflite__MultiplyByQuantizedMultiplierGreaterThanOne_28int_2c_20int_2c_20int_29(HEAP32[$5 + 120 >> 2], HEAP32[$5 + 168 >> 2], HEAP32[$5 + 164 >> 2]);
      HEAP32[$5 + 112 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(HEAP32[$5 + 116 >> 2]);
      HEAP32[$4 >> 2] = HEAP32[$0 >> 2];
      HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
      HEAP32[$5 + 80 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_negative_values_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$5 + 72 >> 2]);
      HEAP32[$5 + 88 >> 2] = gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__Rescale_12_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$5 + 80 >> 2]);
      HEAP32[$5 + 104 >> 2] = gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__operator__int_2c_2012__28gemmlowp__FixedPoint_int_2c_2012__2c_20gemmlowp__FixedPoint_int_2c_2012__29(HEAP32[$5 + 96 >> 2], HEAP32[$5 + 88 >> 2]);
      HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
     }
     HEAP32[$5 + 124 >> 2] = HEAP32[$5 + 124 >> 2] + 1;
     continue;
    }
    break;
   }
   $0 = $5 + 68 | 0;
   HEAP32[$5 + 64 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(tflite__GetReciprocal_28int_2c_20int_2c_20int__29(HEAP32[jshFlashGetMemMapAddress($5 + 128 | 0) >> 2], $0));
   HEAP32[$5 + 60 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 60 >> 2] < HEAP32[$5 + 148 >> 2]) {
     HEAP32[$5 + 56 >> 2] = HEAPU8[HEAP32[$5 + 180 >> 2] + (HEAP32[$5 + 60 >> 2] + Math_imul(HEAP32[$5 + 144 >> 2], HEAP32[$5 + 148 >> 2]) | 0) | 0] - HEAPU8[$5 + 143 | 0];
     label$10 : {
      if (HEAP32[$5 + 56 >> 2] >= HEAP32[$5 + 160 >> 2]) {
       $0 = $5 + 28 | 0;
       $1 = $5 + 4 | 0;
       $2 = $5 + 24 | 0;
       $3 = $5 + 40 | 0;
       $4 = $5 + 8 | 0;
       $6 = $5 - -64 | 0;
       $7 = $5 + 16 | 0;
       $8 = $5 + 48 | 0;
       $9 = $5 + 32 | 0;
       HEAP32[$5 + 52 >> 2] = tflite__MultiplyByQuantizedMultiplierGreaterThanOne_28int_2c_20int_2c_20int_29(HEAP32[$5 + 56 >> 2], HEAP32[$5 + 168 >> 2], HEAP32[$5 + 164 >> 2]);
       HEAP32[$5 + 48 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(HEAP32[$5 + 52 >> 2]);
       HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
       HEAP32[$5 + 40 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_negative_values_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$5 + 32 >> 2]);
       HEAP32[$7 >> 2] = HEAP32[$6 >> 2];
       HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$5 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_20_280_29_20__20_280_29__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$5 + 16 >> 2], HEAP32[$5 + 8 >> 2]);
       HEAP32[$5 + 28 >> 2] = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(HEAP32[jshFlashGetMemMapAddress($2) >> 2], HEAP32[$5 + 68 >> 2] + 23 | 0);
       HEAP32[$5 + 4 >> 2] = 255;
       $0 = int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0, $1);
       HEAP32[$5 >> 2] = 0;
       $0 = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, $5) >> 2];
       HEAP8[HEAP32[$5 + 172 >> 2] + (HEAP32[$5 + 60 >> 2] + Math_imul(HEAP32[$5 + 144 >> 2], HEAP32[$5 + 148 >> 2]) | 0) | 0] = $0;
       break label$10;
      }
      HEAP8[HEAP32[$5 + 172 >> 2] + (HEAP32[$5 + 60 >> 2] + Math_imul(HEAP32[$5 + 144 >> 2], HEAP32[$5 + 148 >> 2]) | 0) | 0] = 0;
     }
     HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 60 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 144 >> 2] = HEAP32[$5 + 144 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 + 192 | 0;
}
function tflite__reference_integer_ops__AveragePool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 144 | 0;
 global$0 = $5;
 HEAP32[$5 + 140 >> 2] = $0;
 HEAP32[$5 + 136 >> 2] = $1;
 HEAP32[$5 + 132 >> 2] = $2;
 HEAP32[$5 + 128 >> 2] = $3;
 HEAP32[$5 + 124 >> 2] = $4;
 label$1 : {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2] > HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2]) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$5 + 136 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$5 + 128 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 HEAP32[$5 + 120 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 0, HEAP32[$5 + 128 >> 2], 0);
 HEAP32[$5 + 116 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 3, HEAP32[$5 + 128 >> 2], 3);
 HEAP32[$5 + 112 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 1);
 HEAP32[$5 + 108 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 2);
 HEAP32[$5 + 104 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 1);
 HEAP32[$5 + 100 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 2);
 HEAP32[$5 + 96 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 12 >> 2];
 HEAP32[$5 + 92 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 16 >> 2];
 HEAP32[$5 + 88 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 88 >> 2] < HEAP32[$5 + 120 >> 2]) {
   HEAP32[$5 + 84 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 84 >> 2] < HEAP32[$5 + 104 >> 2]) {
     HEAP32[$5 + 80 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 80 >> 2] < HEAP32[$5 + 100 >> 2]) {
       HEAP32[$5 + 76 >> 2] = 0;
       while (1) {
        if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 116 >> 2]) {
         $0 = $5 + 28 | 0;
         $1 = $5 + 40 | 0;
         $2 = $5 + 36 | 0;
         $3 = $5 + 48 | 0;
         HEAP32[$5 + 72 >> 2] = Math_imul(HEAP32[$5 + 80 >> 2], HEAP32[$5 + 92 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 2 >> 1];
         HEAP32[$5 + 68 >> 2] = Math_imul(HEAP32[$5 + 84 >> 2], HEAP32[$5 + 96 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 4 >> 1];
         HEAP32[$5 + 60 >> 2] = 0;
         HEAP32[$5 + 56 >> 2] = 0 - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 64 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 60 | 0, $5 + 56 | 0) >> 2];
         $4 = HEAP32[$5 + 140 >> 2] + 24 | 0;
         HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 108 >> 2] - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 52 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($4, $3) >> 2];
         HEAP32[$5 + 40 >> 2] = 0;
         HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 44 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($1, $2) >> 2];
         $1 = HEAP32[$5 + 140 >> 2] + 20 | 0;
         HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 112 >> 2] - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 32 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($1, $0) >> 2];
         HEAP32[$5 + 24 >> 2] = 0;
         HEAP32[$5 + 20 >> 2] = 0;
         HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 44 >> 2];
         while (1) {
          if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 32 >> 2]) {
           HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 64 >> 2];
           while (1) {
            if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 52 >> 2]) {
             HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 12 >> 2];
             HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 16 >> 2];
             HEAP32[$5 + 24 >> 2] = HEAP8[HEAP32[$5 + 132 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 4 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 76 >> 2]) | 0] + HEAP32[$5 + 24 >> 2];
             HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
             HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
           continue;
          }
          break;
         }
         $0 = $5;
         if (HEAP32[$5 + 24 >> 2] > 0) {
          $1 = (HEAP32[$5 + 24 >> 2] + (HEAP32[$5 + 20 >> 2] / 2 | 0) | 0) / HEAP32[$5 + 20 >> 2] | 0;
         } else {
          $1 = (HEAP32[$5 + 24 >> 2] - (HEAP32[$5 + 20 >> 2] / 2 | 0) | 0) / HEAP32[$5 + 20 >> 2] | 0;
         }
         HEAP32[$0 + 24 >> 2] = $1;
         $0 = $5 + 24 | 0;
         HEAP32[$5 + 24 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, HEAP32[$5 + 140 >> 2] + 28 | 0) >> 2];
         HEAP32[$5 + 24 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0, HEAP32[$5 + 140 >> 2] + 32 | 0) >> 2];
         $0 = HEAP32[$5 + 24 >> 2];
         HEAP8[HEAP32[$5 + 124 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 128 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2]) | 0] = $0;
         HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 80 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 84 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 + 144 | 0;
}
function graphicsFillPoly($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 288 | 0;
 global$0 = $3;
 HEAP32[$3 + 284 >> 2] = $0;
 HEAP32[$3 + 280 >> 2] = $1;
 HEAP32[$3 + 276 >> 2] = $2;
 HEAP32[$3 + 272 >> 2] = HEAP32[$3 + 276 >> 2];
 $0 = HEAP32[$3 + 284 >> 2];
 HEAP32[$3 + 256 >> 2] = (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) - 1;
 HEAP32[$3 + 252 >> 2] = 0;
 HEAP32[$3 + 268 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 268 >> 2] < HEAP32[$3 + 280 >> 2]) {
   HEAP32[$3 + 248 >> 2] = HEAP16[HEAP32[$3 + 272 >> 2] + (HEAP32[$3 + 268 >> 2] << 2) >> 1];
   HEAP32[$3 + 244 >> 2] = HEAP16[(HEAP32[$3 + 272 >> 2] + (HEAP32[$3 + 268 >> 2] << 2) | 0) + 2 >> 1];
   graphicsToDeviceCoordinates16x(HEAP32[$3 + 284 >> 2], $3 + 248 | 0, $3 + 244 | 0);
   HEAP16[HEAP32[$3 + 272 >> 2] + (HEAP32[$3 + 268 >> 2] << 2) >> 1] = HEAP32[$3 + 248 >> 2];
   HEAP16[(HEAP32[$3 + 272 >> 2] + (HEAP32[$3 + 268 >> 2] << 2) | 0) + 2 >> 1] = HEAP32[$3 + 244 >> 2];
   HEAP16[$3 + 242 >> 1] = HEAP16[(HEAP32[$3 + 272 >> 2] + (HEAP32[$3 + 268 >> 2] << 2) | 0) + 2 >> 1] >> 4;
   if (HEAP16[$3 + 242 >> 1] < HEAP32[$3 + 256 >> 2]) {
    HEAP32[$3 + 256 >> 2] = HEAP16[$3 + 242 >> 1];
   }
   if (HEAP16[$3 + 242 >> 1] > HEAP32[$3 + 252 >> 2]) {
    HEAP32[$3 + 252 >> 2] = HEAP16[$3 + 242 >> 1];
   }
   HEAP32[$3 + 268 >> 2] = HEAP32[$3 + 268 >> 2] + 1;
   continue;
  }
  break;
 }
 $0 = HEAP32[$3 + 284 >> 2];
 if (HEAP32[$3 + 256 >> 2] < (HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8)) {
  $0 = HEAP32[$3 + 284 >> 2];
  HEAP32[$3 + 256 >> 2] = HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8;
 }
 $0 = HEAP32[$3 + 284 >> 2];
 if (HEAP32[$3 + 252 >> 2] > (HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8)) {
  $0 = HEAP32[$3 + 284 >> 2];
  HEAP32[$3 + 252 >> 2] = HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8;
 }
 HEAP32[$3 + 236 >> 2] = 64;
 HEAP32[$3 + 260 >> 2] = HEAP32[$3 + 256 >> 2] << 4;
 while (1) {
  if (HEAP32[$3 + 260 >> 2] <= HEAP32[$3 + 252 >> 2] << 4) {
   HEAP32[$3 + 28 >> 2] = 0;
   HEAP32[$3 + 264 >> 2] = HEAP32[$3 + 280 >> 2] - 1;
   HEAP32[$3 + 268 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 268 >> 2] < HEAP32[$3 + 280 >> 2]) {
     if (!(HEAP16[(HEAP32[$3 + 272 >> 2] + (HEAP32[$3 + 268 >> 2] << 2) | 0) + 2 >> 1] < HEAP32[$3 + 260 >> 2] | HEAP16[(HEAP32[$3 + 272 >> 2] + (HEAP32[$3 + 264 >> 2] << 2) | 0) + 2 >> 1] > HEAP32[$3 + 260 >> 2] ? !(HEAP16[(HEAP32[$3 + 272 >> 2] + (HEAP32[$3 + 264 >> 2] << 2) | 0) + 2 >> 1] >= HEAP32[$3 + 260 >> 2] ? HEAP16[(HEAP32[$3 + 272 >> 2] + (HEAP32[$3 + 268 >> 2] << 2) | 0) + 2 >> 1] <= HEAP32[$3 + 260 >> 2] : 0) : 0)) {
      if (HEAP32[$3 + 28 >> 2] < 64) {
       HEAP32[$3 + 24 >> 2] = HEAP16[(HEAP32[$3 + 272 >> 2] + (HEAP32[$3 + 264 >> 2] << 2) | 0) + 2 >> 1] - HEAP16[(HEAP32[$3 + 272 >> 2] + (HEAP32[$3 + 268 >> 2] << 2) | 0) + 2 >> 1];
       if (HEAP32[$3 + 24 >> 2]) {
        HEAP16[($3 + 96 | 0) + (HEAP32[$3 + 28 >> 2] << 1) >> 1] = HEAP16[HEAP32[$3 + 272 >> 2] + (HEAP32[$3 + 268 >> 2] << 2) >> 1] + ((Math_imul(HEAP32[$3 + 260 >> 2] - HEAP16[(HEAP32[$3 + 272 >> 2] + (HEAP32[$3 + 268 >> 2] << 2) | 0) + 2 >> 1] | 0, HEAP16[HEAP32[$3 + 272 >> 2] + (HEAP32[$3 + 264 >> 2] << 2) >> 1] - HEAP16[HEAP32[$3 + 272 >> 2] + (HEAP32[$3 + 268 >> 2] << 2) >> 1] | 0) | 0) / HEAP32[$3 + 24 >> 2] | 0);
        HEAP8[HEAP32[$3 + 28 >> 2] + ($3 + 32 | 0) | 0] = ((HEAP32[$3 + 24 >> 2] > 1 ? 1 : 0) | 0) != 0;
        HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 28 >> 2] + 1;
       }
      }
     }
     HEAP32[$3 + 264 >> 2] = HEAP32[$3 + 268 >> 2];
     HEAP32[$3 + 268 >> 2] = HEAP32[$3 + 268 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$3 + 268 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 268 >> 2] < (HEAP32[$3 + 28 >> 2] - 1 | 0)) {
     $0 = $3 + 96 | 0;
     if (HEAP16[$0 + (HEAP32[$3 + 268 >> 2] << 1) >> 1] > HEAP16[$0 + (HEAP32[$3 + 268 >> 2] + 1 << 1) >> 1]) {
      $0 = $3 + 96 | 0;
      HEAP16[$3 + 22 >> 1] = HEAPU16[$0 + (HEAP32[$3 + 268 >> 2] << 1) >> 1];
      HEAP16[$0 + (HEAP32[$3 + 268 >> 2] << 1) >> 1] = HEAPU16[$0 + (HEAP32[$3 + 268 >> 2] + 1 << 1) >> 1];
      HEAP16[$0 + (HEAP32[$3 + 268 >> 2] + 1 << 1) >> 1] = HEAPU16[$3 + 22 >> 1];
      $0 = $3 + 32 | 0;
      HEAP8[$3 + 21 | 0] = HEAP8[$0 + HEAP32[$3 + 268 >> 2] | 0] & 1;
      HEAP8[$0 + HEAP32[$3 + 268 >> 2] | 0] = HEAP8[$0 + (HEAP32[$3 + 268 >> 2] + 1 | 0) | 0] & 1;
      HEAP8[$0 + (HEAP32[$3 + 268 >> 2] + 1 | 0) | 0] = HEAP8[$3 + 21 | 0] & 1;
      if (HEAP32[$3 + 268 >> 2]) {
       HEAP32[$3 + 268 >> 2] = HEAP32[$3 + 268 >> 2] + -1;
      }
      continue;
     }
     HEAP32[$3 + 268 >> 2] = HEAP32[$3 + 268 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$3 + 16 >> 2] = 0;
   HEAP32[$3 + 12 >> 2] = 0;
   HEAP32[$3 + 268 >> 2] = 0;
   while (1) {
    label$21 : {
     if (HEAP32[$3 + 268 >> 2] >= HEAP32[$3 + 28 >> 2]) {
      break label$21;
     }
     if (!HEAP32[$3 + 12 >> 2]) {
      HEAP32[$3 + 16 >> 2] = HEAP16[($3 + 96 | 0) + (HEAP32[$3 + 268 >> 2] << 1) >> 1];
     }
     label$23 : {
      if (HEAP8[HEAP32[$3 + 268 >> 2] + ($3 + 32 | 0) | 0] & 1) {
       HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
       break label$23;
      }
      HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + -1;
     }
     if (!(HEAP32[$3 + 268 >> 2] != (HEAP32[$3 + 28 >> 2] - 1 | 0) ? HEAP32[$3 + 12 >> 2] : 0)) {
      $0 = HEAP32[$3 + 284 >> 2];
      graphicsFillRectDevice(HEAP32[$3 + 284 >> 2], HEAP32[$3 + 16 >> 2] >> 4, HEAP32[$3 + 260 >> 2] >> 4, HEAP16[($3 + 96 | 0) + (HEAP32[$3 + 268 >> 2] << 1) >> 1] >> 4, HEAP32[$3 + 260 >> 2] >> 4, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
     }
     if (jspIsInterrupted() & 1) {
      break label$21;
     }
     HEAP32[$3 + 268 >> 2] = HEAP32[$3 + 268 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$3 + 260 >> 2] = HEAP32[$3 + 260 >> 2] + 16;
   continue;
  }
  break;
 }
 global$0 = $3 + 288 | 0;
}
function tflite__reference_ops__ProcessBroadcastShapes_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__2c_20tflite__ArithmeticParams__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = global$0 - 128 | 0;
 global$0 = $3;
 $4 = $3 + 56 | 0;
 $5 = $3 + 80 | 0;
 $6 = $3 + 104 | 0;
 $7 = $3 + 100 | 0;
 HEAP32[$3 + 120 >> 2] = $0;
 HEAP32[$3 + 116 >> 2] = $1;
 HEAP32[$3 + 112 >> 2] = $2;
 HEAP32[$3 + 104 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$3 + 120 >> 2]);
 HEAP32[$3 + 100 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$3 + 116 >> 2]);
 HEAP32[$3 + 108 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($6, $7) >> 2];
 HEAP8[HEAP32[$3 + 112 >> 2]] = 4;
 tflite__RuntimeShape__RuntimeShape_28int_2c_20int_29($5, HEAP32[$3 + 108 >> 2]);
 tflite__RuntimeShape__ExtendedShape_28int_2c_20tflite__RuntimeShape_20const__29($4, HEAP32[$3 + 108 >> 2], HEAP32[$3 + 120 >> 2]);
 tflite__RuntimeShape__ExtendedShape_28int_2c_20tflite__RuntimeShape_20const__29($3 + 24 | 0, HEAP32[$3 + 108 >> 2], HEAP32[$3 + 116 >> 2]);
 label$1 : {
  if (tflite__RuntimeShape__operator___28tflite__RuntimeShape_20const__29_20const($3 + 56 | 0, $3 + 24 | 0) & 1) {
   HEAP8[HEAP32[$3 + 112 >> 2]] = 1;
   HEAP8[$3 + 127 | 0] = 0;
   break label$1;
  }
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 108 >> 2] - 1;
  while (1) {
   label$4 : {
    if (HEAP32[$3 + 16 >> 2] < 0) {
     break label$4;
    }
    if ((tflite__RuntimeShape__Dims_28int_29_20const($3 + 56 | 0, HEAP32[$3 + 16 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const($3 + 24 | 0, HEAP32[$3 + 16 >> 2]) | 0)) {
     if ((tflite__RuntimeShape__Dims_28int_29_20const($3 + 56 | 0, HEAP32[$3 + 16 >> 2]) | 0) == 1) {
      HEAP8[HEAP32[$3 + 112 >> 2]] = 2;
      break label$4;
     }
     if ((tflite__RuntimeShape__Dims_28int_29_20const($3 + 24 | 0, HEAP32[$3 + 16 >> 2]) | 0) == 1) {
      HEAP8[HEAP32[$3 + 112 >> 2]] = 3;
      break label$4;
     }
     HEAP8[HEAP32[$3 + 112 >> 2]] = 4;
    } else {
     HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + -1;
     continue;
    }
   }
   break;
  }
  if (!(HEAPU8[HEAP32[$3 + 112 >> 2]] == 2 | HEAPU8[HEAP32[$3 + 112 >> 2]] == 3)) {
   HEAP8[$3 + 127 | 0] = 0;
   break label$1;
  }
  HEAP8[$3 + 15 | 0] = HEAPU8[HEAP32[$3 + 112 >> 2]] == 3;
  $0 = $3;
  if (HEAP8[$3 + 15 | 0] & 1) {
   $1 = $3 + 24 | 0;
  } else {
   $1 = $3 + 56 | 0;
  }
  HEAP32[$0 + 8 >> 2] = $1;
  $0 = $3;
  if (HEAP8[$3 + 15 | 0] & 1) {
   $1 = $3 + 56 | 0;
  } else {
   $1 = $3 + 24 | 0;
  }
  HEAP32[$0 + 4 >> 2] = $1;
  HEAP32[$3 >> 2] = HEAP32[$3 + 108 >> 2] - 1;
  HEAP32[HEAP32[$3 + 112 >> 2] + 60 >> 2] = 1;
  HEAP32[HEAP32[$3 + 112 >> 2] + 64 >> 2] = 1;
  HEAP32[HEAP32[$3 + 112 >> 2] + 68 >> 2] = 1;
  HEAP32[HEAP32[$3 + 112 >> 2] + 72 >> 2] = 1;
  HEAP32[HEAP32[$3 + 112 >> 2] + 76 >> 2] = 1;
  while (1) {
   if (HEAP32[$3 >> 2] >= 0) {
    $0 = (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 8 >> 2], HEAP32[$3 >> 2]) | 0) == (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 4 >> 2], HEAP32[$3 >> 2]) | 0);
   } else {
    $0 = 0;
   }
   if ($0) {
    $0 = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 4 >> 2], HEAP32[$3 >> 2]);
    $1 = HEAP32[$3 + 112 >> 2];
    HEAP32[$1 + 76 >> 2] = Math_imul($0, HEAP32[$1 + 76 >> 2]);
    HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + -1;
    continue;
   }
   break;
  }
  while (1) {
   if (HEAP32[$3 >> 2] >= 0) {
    $0 = (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 8 >> 2], HEAP32[$3 >> 2]) | 0) == 1;
   } else {
    $0 = 0;
   }
   if ($0) {
    $0 = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 4 >> 2], HEAP32[$3 >> 2]);
    $1 = HEAP32[$3 + 112 >> 2];
    HEAP32[$1 + 72 >> 2] = Math_imul($0, HEAP32[$1 + 72 >> 2]);
    HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + -1;
    continue;
   }
   break;
  }
  while (1) {
   if (HEAP32[$3 >> 2] >= 0) {
    $0 = (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 8 >> 2], HEAP32[$3 >> 2]) | 0) == (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 4 >> 2], HEAP32[$3 >> 2]) | 0);
   } else {
    $0 = 0;
   }
   if ($0) {
    $0 = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 8 >> 2], HEAP32[$3 >> 2]);
    $1 = HEAP32[$3 + 112 >> 2];
    HEAP32[$1 + 68 >> 2] = Math_imul($0, HEAP32[$1 + 68 >> 2]);
    HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + -1;
    continue;
   }
   break;
  }
  while (1) {
   if (HEAP32[$3 >> 2] >= 0) {
    $0 = (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 4 >> 2], HEAP32[$3 >> 2]) | 0) == 1;
   } else {
    $0 = 0;
   }
   if ($0) {
    $0 = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 8 >> 2], HEAP32[$3 >> 2]);
    $1 = HEAP32[$3 + 112 >> 2];
    HEAP32[$1 + 64 >> 2] = Math_imul($0, HEAP32[$1 + 64 >> 2]);
    HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + -1;
    continue;
   }
   break;
  }
  while (1) {
   if (HEAP32[$3 >> 2] >= 0) {
    $0 = (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 8 >> 2], HEAP32[$3 >> 2]) | 0) == (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 4 >> 2], HEAP32[$3 >> 2]) | 0);
   } else {
    $0 = 0;
   }
   if ($0) {
    $0 = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 4 >> 2], HEAP32[$3 >> 2]);
    $1 = HEAP32[$3 + 112 >> 2];
    HEAP32[$1 + 60 >> 2] = Math_imul($0, HEAP32[$1 + 60 >> 2]);
    HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + -1;
    continue;
   }
   break;
  }
  if (HEAP32[$3 >> 2] >= 0) {
   HEAP8[HEAP32[$3 + 112 >> 2]] = 4;
  }
  HEAP8[$3 + 127 | 0] = 1;
 }
 HEAP32[$3 + 20 >> 2] = 1;
 $0 = $3 + 80 | 0;
 $1 = $3 + 56 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($3 + 24 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($1);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $3 + 128 | 0;
 return HEAP8[$3 + 127 | 0] & 1;
}
function jswrap_banglejs_init() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = global$0 - 192 | 0;
 global$0 = $0;
 HEAP32[62815] = 46;
 HEAP16[125629] = 0;
 HEAP8[251256] = 1;
 HEAP8[251284] = 255;
 HEAP32[62813] = 3e4;
 HEAP8[251268] = 0;
 HEAP32[$0 + 188 >> 2] = jspNewObject(0, 28457);
 if (HEAP32[$0 + 188 >> 2]) {
  $1 = $0 + 120 | 0;
  graphicsStructInit($1, 240, 240, 16);
  HEAP8[$0 + 124 | 0] = 5;
  HEAP8[$0 + 125 | 0] = 0;
  HEAP8[$0 + 126 | 0] = 0;
  HEAP8[$0 + 127 | 0] = 0;
  HEAP8[$0 + 128 | 0] = 0;
  HEAP8[$0 + 129 | 0] = 0;
  HEAP8[$0 + 130 | 0] = 0;
  HEAP8[$0 + 131 | 0] = 0;
  HEAP8[$0 + 145 | 0] = 16385;
  HEAP8[$0 + 146 | 0] = 64;
  $2 = HEAP32[$0 + 188 >> 2];
  HEAP8[$0 + 120 | 0] = $2;
  HEAP8[$0 + 121 | 0] = $2 >>> 8;
  HEAP8[$0 + 122 | 0] = $2 >>> 16;
  HEAP8[$0 + 123 | 0] = $2 >>> 24;
  lcdST7789_init($1);
  graphicsSetVar($1);
  jsvObjectSetChild(HEAP32[23774], 28466, HEAP32[$0 + 188 >> 2]);
  jsvObjectSetChild(HEAP32[23775], 28e3, HEAP32[$0 + 188 >> 2]);
  graphicsGetFromVar($1, HEAP32[$0 + 188 >> 2]);
  HEAP32[$0 + 116 >> 2] = jsvNewNativeFunction(503, 32768);
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 188 >> 2], 28468, HEAP32[$0 + 116 >> 2]);
  HEAP8[$0 + 115 | 0] = 1;
  if (HEAPU16[47566] & 64) {
   HEAP8[$0 + 115 | 0] = 0;
  }
  graphicsClear($0 + 120 | 0);
  if (HEAP8[$0 + 115 | 0] & 1) {
   HEAP8[$0 + 114 | 0] = 0;
   jsfNameFromString($0 + 80 | 0, 28473);
   HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 104 >> 2];
   $1 = HEAP32[$0 + 100 >> 2];
   HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 96 >> 2];
   HEAP32[$0 + 20 >> 2] = $1;
   $1 = HEAP32[$0 + 92 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 88 >> 2];
   HEAP32[$0 + 12 >> 2] = $1;
   $1 = HEAP32[$0 + 84 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$0 + 80 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
   HEAP32[$0 + 108 >> 2] = jsfReadFile($0, 0, 0);
   label$4 : {
    label$5 : {
     if (jsvIsString(HEAP32[$0 + 108 >> 2]) & 1) {
      if (jsvGetStringLength(HEAP32[$0 + 108 >> 2])) {
       break label$5;
      }
     }
     jsvUnLock(HEAP32[$0 + 108 >> 2]);
     HEAP8[$0 + 114 | 0] = 1;
     HEAP32[$0 + 108 >> 2] = jswrap_banglejs_getLogo();
     HEAP32[$0 + 76 >> 2] = 222;
     HEAP32[$0 + 72 >> 2] = 104;
     break label$4;
    }
    HEAP32[$0 + 76 >> 2] = jsvGetCharInString(HEAP32[$0 + 108 >> 2], 0) & 255;
    HEAP32[$0 + 72 >> 2] = jsvGetCharInString(HEAP32[$0 + 108 >> 2], 1) & 255;
   }
   graphicsSetVar($0 + 120 | 0);
   HEAP32[$0 + 68 >> 2] = (240 - HEAP32[$0 + 72 >> 2] | 0) / 2;
   jsvUnLock(jswrap_graphics_drawImage(HEAP32[$0 + 188 >> 2], HEAP32[$0 + 108 >> 2], (240 - HEAP32[$0 + 76 >> 2] | 0) / 2 | 0, HEAP32[$0 + 68 >> 2], 0));
   jsvUnLock(HEAP32[$0 + 108 >> 2]);
   if (HEAP8[$0 + 114 | 0] & 1) {
    $1 = $0 + 120 | 0;
    $2 = $0 + 48 | 0;
    HEAP32[$0 + 68 >> 2] = HEAP32[$0 + 68 >> 2] + (HEAP32[$0 + 72 >> 2] - 28 | 0);
    HEAP32[$0 + 44 >> 2] = jsvNewFromString(28481);
    jsvGetString(HEAP32[$0 + 44 >> 2], $2, 20);
    jsvUnLock(HEAP32[$0 + 44 >> 2]);
    jswrap_graphics_drawCString($1, HEAP32[$0 + 68 >> 2], 28482);
    jswrap_graphics_drawCString($1, HEAP32[$0 + 68 >> 2] + 10 | 0, $2);
    jswrap_graphics_drawCString($1, HEAP32[$0 + 68 >> 2] + 20 | 0, 28490);
   }
  }
  graphicsSetVar($0 + 120 | 0);
  jsvUnLock(HEAP32[$0 + 188 >> 2]);
  HEAP32[62831] = 0;
  HEAP8[251328] = 0;
  HEAP8[251288] = 0;
  HEAP8[251329] = 0;
  jshPinSetState(12, 5);
  HEAP32[62818] = 0;
  HEAP32[62820] = 0;
  HEAP32[62819] = 0;
  jshSetPinShouldStayWatched(24, 1);
  jshSetPinShouldStayWatched(22, 1);
  jshSetPinShouldStayWatched(23, 1);
  jshSetPinShouldStayWatched(11, 1);
  jshSetPinShouldStayWatched(16, 1);
  HEAP8[$0 + 43 | 0] = jshPinWatch(24, 1);
  if (HEAPU8[$0 + 43 | 0]) {
   jshSetEventCallback(HEAPU8[$0 + 43 | 0], 504);
  }
  HEAP8[$0 + 43 | 0] = jshPinWatch(22, 1);
  if (HEAPU8[$0 + 43 | 0]) {
   jshSetEventCallback(HEAPU8[$0 + 43 | 0], 505);
  }
  HEAP8[$0 + 43 | 0] = jshPinWatch(23, 1);
  if (HEAPU8[$0 + 43 | 0]) {
   jshSetEventCallback(HEAPU8[$0 + 43 | 0], 506);
  }
  HEAP8[$0 + 43 | 0] = jshPinWatch(11, 1);
  if (HEAPU8[$0 + 43 | 0]) {
   jshSetEventCallback(HEAPU8[$0 + 43 | 0], 507);
  }
  HEAP8[$0 + 43 | 0] = jshPinWatch(16, 1);
  if (HEAPU8[$0 + 43 | 0]) {
   jshSetEventCallback(HEAPU8[$0 + 43 | 0], 508);
  }
  HEAP8[251330] = 0;
  HEAP16[125666] = 0;
  HEAP32[$0 + 36 >> 2] = jsvNewFromString(28516);
  HEAP32[$0 + 32 >> 2] = jswrap_storage_readJSON(HEAP32[$0 + 36 >> 2], 1);
  $1 = $0;
  label$13 : {
   if (jsvIsObject(HEAP32[$0 + 32 >> 2]) & 1) {
    $2 = jsvObjectGetChild(HEAP32[$0 + 32 >> 2], 28529, 0);
    break label$13;
   }
   $2 = 0;
  }
  HEAP32[$1 + 28 >> 2] = $2;
  label$15 : {
   label$16 : {
    if (!HEAP32[$0 + 28 >> 2]) {
     break label$16;
    }
    if (jsvGetBool(HEAP32[$0 + 28 >> 2]) & 1) {
     break label$16;
    }
    HEAP32[62815] = HEAP32[62815] & -129;
    break label$15;
   }
   HEAP32[62815] = HEAP32[62815] | 128;
   label$17 : {
    label$18 : {
     if (HEAP32[$0 + 28 >> 2]) {
      if (!(jsvIsStringEqual(HEAP32[$0 + 28 >> 2], 28534) & 1)) {
       break label$18;
      }
     }
     HEAP32[62815] = HEAP32[62815] | 64;
     break label$17;
    }
    HEAP32[62815] = HEAP32[62815] & -65;
   }
  }
  jsvUnLock(HEAP32[$0 + 28 >> 2]);
  $1 = $0;
  label$20 : {
   if (jsvIsObject(HEAP32[$0 + 32 >> 2]) & 1) {
    $2 = jsvObjectGetChild(HEAP32[$0 + 32 >> 2], 28538, 0);
    break label$20;
   }
   $2 = 0;
  }
  HEAP32[$1 + 28 >> 2] = $2;
  label$22 : {
   label$23 : {
    if (!HEAP32[$0 + 28 >> 2]) {
     break label$23;
    }
    if (jsvGetBool(HEAP32[$0 + 28 >> 2]) & 1) {
     break label$23;
    }
    HEAP32[62815] = HEAP32[62815] & -257;
    break label$22;
   }
   HEAP32[62815] = HEAP32[62815] | 256;
  }
  jsvUnLock3(HEAP32[$0 + 28 >> 2], HEAP32[$0 + 32 >> 2], HEAP32[$0 + 36 >> 2]);
 }
 global$0 = $0 + 192 | 0;
}
function void_20tflite__reference_ops__StridedSlice_float__28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = Math_fround(0);
 $5 = global$0 - 176 | 0;
 global$0 = $5;
 HEAP32[$5 + 172 >> 2] = $0;
 HEAP32[$5 + 168 >> 2] = $1;
 HEAP32[$5 + 164 >> 2] = $2;
 HEAP32[$5 + 160 >> 2] = $3;
 HEAP32[$5 + 156 >> 2] = $4;
 $0 = HEAP32[$5 + 172 >> 2];
 $3 = HEAPU16[$0 + 4 >> 1] | HEAPU16[$0 + 6 >> 1] << 16;
 $1 = $5 + 112 | 0;
 $4 = HEAPU16[$0 >> 1] | HEAPU16[$0 + 2 >> 1] << 16;
 HEAP16[$1 >> 1] = $4;
 HEAP16[$1 + 2 >> 1] = $4 >>> 16;
 HEAP16[$1 + 4 >> 1] = $3;
 HEAP16[$1 + 6 >> 1] = $3 >>> 16;
 $2 = HEAPU16[$0 + 36 >> 1] | HEAPU16[$0 + 38 >> 1] << 16;
 $3 = HEAPU16[$0 + 32 >> 1] | HEAPU16[$0 + 34 >> 1] << 16;
 HEAP16[$1 + 32 >> 1] = $3;
 HEAP16[$1 + 34 >> 1] = $3 >>> 16;
 HEAP16[$1 + 36 >> 1] = $2;
 HEAP16[$1 + 38 >> 1] = $2 >>> 16;
 $2 = HEAPU16[$0 + 28 >> 1] | HEAPU16[$0 + 30 >> 1] << 16;
 $3 = HEAPU16[$0 + 24 >> 1] | HEAPU16[$0 + 26 >> 1] << 16;
 HEAP16[$1 + 24 >> 1] = $3;
 HEAP16[$1 + 26 >> 1] = $3 >>> 16;
 HEAP16[$1 + 28 >> 1] = $2;
 HEAP16[$1 + 30 >> 1] = $2 >>> 16;
 $2 = HEAPU16[$0 + 20 >> 1] | HEAPU16[$0 + 22 >> 1] << 16;
 $3 = HEAPU16[$0 + 16 >> 1] | HEAPU16[$0 + 18 >> 1] << 16;
 HEAP16[$1 + 16 >> 1] = $3;
 HEAP16[$1 + 18 >> 1] = $3 >>> 16;
 HEAP16[$1 + 20 >> 1] = $2;
 HEAP16[$1 + 22 >> 1] = $2 >>> 16;
 $2 = HEAPU16[$0 + 12 >> 1] | HEAPU16[$0 + 14 >> 1] << 16;
 $0 = HEAPU16[$0 + 8 >> 1] | HEAPU16[$0 + 10 >> 1] << 16;
 HEAP16[$1 + 8 >> 1] = $0;
 HEAP16[$1 + 10 >> 1] = $0 >>> 16;
 HEAP16[$1 + 12 >> 1] = $2;
 HEAP16[$1 + 14 >> 1] = $2 >>> 16;
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$5 + 168 >> 2]) | 0) > 4) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$5 + 160 >> 2]) | 0) > 4) {
   break label$2;
  }
 }
 $0 = $5 - -64 | 0;
 tflite__RuntimeShape__ExtendedShape_28int_2c_20tflite__RuntimeShape_20const__29($5 + 88 | 0, 4, HEAP32[$5 + 168 >> 2]);
 tflite__RuntimeShape__ExtendedShape_28int_2c_20tflite__RuntimeShape_20const__29($0, 4, HEAP32[$5 + 160 >> 2]);
 tflite__strided_slice__StridedSlicePadIndices_28tflite__StridedSliceParams__2c_20int_29($5 + 112 | 0);
 HEAP32[$5 + 52 >> 2] = tflite__strided_slice__StartForAxis_28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20int_29($5 + 112 | 0, $5 + 88 | 0, 0);
 HEAP32[$5 + 48 >> 2] = tflite__strided_slice__StopForAxis_28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20int_2c_20int_29($5 + 112 | 0, $5 + 88 | 0, 0, HEAP32[$5 + 52 >> 2]);
 HEAP32[$5 + 44 >> 2] = tflite__strided_slice__StartForAxis_28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20int_29($5 + 112 | 0, $5 + 88 | 0, 1);
 HEAP32[$5 + 40 >> 2] = tflite__strided_slice__StopForAxis_28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20int_2c_20int_29($5 + 112 | 0, $5 + 88 | 0, 1, HEAP32[$5 + 44 >> 2]);
 HEAP32[$5 + 36 >> 2] = tflite__strided_slice__StartForAxis_28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20int_29($5 + 112 | 0, $5 + 88 | 0, 2);
 HEAP32[$5 + 32 >> 2] = tflite__strided_slice__StopForAxis_28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20int_2c_20int_29($5 + 112 | 0, $5 + 88 | 0, 2, HEAP32[$5 + 36 >> 2]);
 HEAP32[$5 + 28 >> 2] = tflite__strided_slice__StartForAxis_28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20int_29($5 + 112 | 0, $5 + 88 | 0, 3);
 HEAP32[$5 + 24 >> 2] = tflite__strided_slice__StopForAxis_28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20int_2c_20int_29($5 + 112 | 0, $5 + 88 | 0, 3, HEAP32[$5 + 28 >> 2]);
 HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 156 >> 2];
 HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 52 >> 2];
 while (1) {
  if ((tflite__strided_slice__LoopCondition_28int_2c_20int_2c_20int_29(HEAP32[$5 + 16 >> 2], HEAP32[$5 + 48 >> 2], HEAP16[$5 + 134 >> 1]) ^ -1) & 1) {
   HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 44 >> 2];
   while (1) {
    if ((tflite__strided_slice__LoopCondition_28int_2c_20int_2c_20int_29(HEAP32[$5 + 12 >> 2], HEAP32[$5 + 40 >> 2], HEAP16[$5 + 136 >> 1]) ^ -1) & 1) {
     HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 36 >> 2];
     while (1) {
      if ((tflite__strided_slice__LoopCondition_28int_2c_20int_2c_20int_29(HEAP32[$5 + 8 >> 2], HEAP32[$5 + 32 >> 2], HEAP16[$5 + 138 >> 1]) ^ -1) & 1) {
       HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 28 >> 2];
       while (1) {
        if ((tflite__strided_slice__LoopCondition_28int_2c_20int_2c_20int_29(HEAP32[$5 + 4 >> 2], HEAP32[$5 + 24 >> 2], HEAP16[$5 + 140 >> 1]) ^ -1) & 1) {
         $6 = HEAPF32[HEAP32[$5 + 164 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29($5 + 88 | 0, HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 4 >> 2]) << 2) >> 2];
         $0 = HEAP32[$5 + 20 >> 2];
         HEAP32[$5 + 20 >> 2] = $0 + 4;
         HEAPF32[$0 >> 2] = $6;
         HEAP32[$5 + 4 >> 2] = HEAP16[$5 + 140 >> 1] + HEAP32[$5 + 4 >> 2];
         continue;
        }
        break;
       }
       HEAP32[$5 + 8 >> 2] = HEAP16[$5 + 138 >> 1] + HEAP32[$5 + 8 >> 2];
       continue;
      }
      break;
     }
     HEAP32[$5 + 12 >> 2] = HEAP16[$5 + 136 >> 1] + HEAP32[$5 + 12 >> 2];
     continue;
    }
    break;
   }
   HEAP32[$5 + 16 >> 2] = HEAP16[$5 + 134 >> 1] + HEAP32[$5 + 16 >> 2];
   continue;
  }
  break;
 }
 $0 = $5 + 88 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($5 - -64 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $5 + 176 | 0;
}
function void_20tflite__reference_ops__StridedSlice_unsigned_20char__28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 176 | 0;
 global$0 = $5;
 HEAP32[$5 + 172 >> 2] = $0;
 HEAP32[$5 + 168 >> 2] = $1;
 HEAP32[$5 + 164 >> 2] = $2;
 HEAP32[$5 + 160 >> 2] = $3;
 HEAP32[$5 + 156 >> 2] = $4;
 $0 = HEAP32[$5 + 172 >> 2];
 $3 = HEAPU16[$0 + 4 >> 1] | HEAPU16[$0 + 6 >> 1] << 16;
 $1 = $5 + 112 | 0;
 $4 = HEAPU16[$0 >> 1] | HEAPU16[$0 + 2 >> 1] << 16;
 HEAP16[$1 >> 1] = $4;
 HEAP16[$1 + 2 >> 1] = $4 >>> 16;
 HEAP16[$1 + 4 >> 1] = $3;
 HEAP16[$1 + 6 >> 1] = $3 >>> 16;
 $2 = HEAPU16[$0 + 36 >> 1] | HEAPU16[$0 + 38 >> 1] << 16;
 $3 = HEAPU16[$0 + 32 >> 1] | HEAPU16[$0 + 34 >> 1] << 16;
 HEAP16[$1 + 32 >> 1] = $3;
 HEAP16[$1 + 34 >> 1] = $3 >>> 16;
 HEAP16[$1 + 36 >> 1] = $2;
 HEAP16[$1 + 38 >> 1] = $2 >>> 16;
 $2 = HEAPU16[$0 + 28 >> 1] | HEAPU16[$0 + 30 >> 1] << 16;
 $3 = HEAPU16[$0 + 24 >> 1] | HEAPU16[$0 + 26 >> 1] << 16;
 HEAP16[$1 + 24 >> 1] = $3;
 HEAP16[$1 + 26 >> 1] = $3 >>> 16;
 HEAP16[$1 + 28 >> 1] = $2;
 HEAP16[$1 + 30 >> 1] = $2 >>> 16;
 $2 = HEAPU16[$0 + 20 >> 1] | HEAPU16[$0 + 22 >> 1] << 16;
 $3 = HEAPU16[$0 + 16 >> 1] | HEAPU16[$0 + 18 >> 1] << 16;
 HEAP16[$1 + 16 >> 1] = $3;
 HEAP16[$1 + 18 >> 1] = $3 >>> 16;
 HEAP16[$1 + 20 >> 1] = $2;
 HEAP16[$1 + 22 >> 1] = $2 >>> 16;
 $2 = HEAPU16[$0 + 12 >> 1] | HEAPU16[$0 + 14 >> 1] << 16;
 $0 = HEAPU16[$0 + 8 >> 1] | HEAPU16[$0 + 10 >> 1] << 16;
 HEAP16[$1 + 8 >> 1] = $0;
 HEAP16[$1 + 10 >> 1] = $0 >>> 16;
 HEAP16[$1 + 12 >> 1] = $2;
 HEAP16[$1 + 14 >> 1] = $2 >>> 16;
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$5 + 168 >> 2]) | 0) > 4) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$5 + 160 >> 2]) | 0) > 4) {
   break label$2;
  }
 }
 $0 = $5 - -64 | 0;
 tflite__RuntimeShape__ExtendedShape_28int_2c_20tflite__RuntimeShape_20const__29($5 + 88 | 0, 4, HEAP32[$5 + 168 >> 2]);
 tflite__RuntimeShape__ExtendedShape_28int_2c_20tflite__RuntimeShape_20const__29($0, 4, HEAP32[$5 + 160 >> 2]);
 tflite__strided_slice__StridedSlicePadIndices_28tflite__StridedSliceParams__2c_20int_29($5 + 112 | 0);
 HEAP32[$5 + 52 >> 2] = tflite__strided_slice__StartForAxis_28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20int_29($5 + 112 | 0, $5 + 88 | 0, 0);
 HEAP32[$5 + 48 >> 2] = tflite__strided_slice__StopForAxis_28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20int_2c_20int_29($5 + 112 | 0, $5 + 88 | 0, 0, HEAP32[$5 + 52 >> 2]);
 HEAP32[$5 + 44 >> 2] = tflite__strided_slice__StartForAxis_28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20int_29($5 + 112 | 0, $5 + 88 | 0, 1);
 HEAP32[$5 + 40 >> 2] = tflite__strided_slice__StopForAxis_28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20int_2c_20int_29($5 + 112 | 0, $5 + 88 | 0, 1, HEAP32[$5 + 44 >> 2]);
 HEAP32[$5 + 36 >> 2] = tflite__strided_slice__StartForAxis_28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20int_29($5 + 112 | 0, $5 + 88 | 0, 2);
 HEAP32[$5 + 32 >> 2] = tflite__strided_slice__StopForAxis_28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20int_2c_20int_29($5 + 112 | 0, $5 + 88 | 0, 2, HEAP32[$5 + 36 >> 2]);
 HEAP32[$5 + 28 >> 2] = tflite__strided_slice__StartForAxis_28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20int_29($5 + 112 | 0, $5 + 88 | 0, 3);
 HEAP32[$5 + 24 >> 2] = tflite__strided_slice__StopForAxis_28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20int_2c_20int_29($5 + 112 | 0, $5 + 88 | 0, 3, HEAP32[$5 + 28 >> 2]);
 HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 156 >> 2];
 HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 52 >> 2];
 while (1) {
  if ((tflite__strided_slice__LoopCondition_28int_2c_20int_2c_20int_29(HEAP32[$5 + 16 >> 2], HEAP32[$5 + 48 >> 2], HEAP16[$5 + 134 >> 1]) ^ -1) & 1) {
   HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 44 >> 2];
   while (1) {
    if ((tflite__strided_slice__LoopCondition_28int_2c_20int_2c_20int_29(HEAP32[$5 + 12 >> 2], HEAP32[$5 + 40 >> 2], HEAP16[$5 + 136 >> 1]) ^ -1) & 1) {
     HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 36 >> 2];
     while (1) {
      if ((tflite__strided_slice__LoopCondition_28int_2c_20int_2c_20int_29(HEAP32[$5 + 8 >> 2], HEAP32[$5 + 32 >> 2], HEAP16[$5 + 138 >> 1]) ^ -1) & 1) {
       HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 28 >> 2];
       while (1) {
        if ((tflite__strided_slice__LoopCondition_28int_2c_20int_2c_20int_29(HEAP32[$5 + 4 >> 2], HEAP32[$5 + 24 >> 2], HEAP16[$5 + 140 >> 1]) ^ -1) & 1) {
         $0 = HEAPU8[HEAP32[$5 + 164 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29($5 + 88 | 0, HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 4 >> 2]) | 0];
         $1 = HEAP32[$5 + 20 >> 2];
         HEAP32[$5 + 20 >> 2] = $1 + 1;
         HEAP8[$1 | 0] = $0;
         HEAP32[$5 + 4 >> 2] = HEAP16[$5 + 140 >> 1] + HEAP32[$5 + 4 >> 2];
         continue;
        }
        break;
       }
       HEAP32[$5 + 8 >> 2] = HEAP16[$5 + 138 >> 1] + HEAP32[$5 + 8 >> 2];
       continue;
      }
      break;
     }
     HEAP32[$5 + 12 >> 2] = HEAP16[$5 + 136 >> 1] + HEAP32[$5 + 12 >> 2];
     continue;
    }
    break;
   }
   HEAP32[$5 + 16 >> 2] = HEAP16[$5 + 134 >> 1] + HEAP32[$5 + 16 >> 2];
   continue;
  }
  break;
 }
 $0 = $5 + 88 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($5 - -64 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $5 + 176 | 0;
}
function tflite__reference_ops__AveragePool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 144 | 0;
 global$0 = $5;
 HEAP32[$5 + 140 >> 2] = $0;
 HEAP32[$5 + 136 >> 2] = $1;
 HEAP32[$5 + 132 >> 2] = $2;
 HEAP32[$5 + 128 >> 2] = $3;
 HEAP32[$5 + 124 >> 2] = $4;
 label$1 : {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2] > HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2]) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$5 + 136 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$5 + 128 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 HEAP32[$5 + 120 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 0, HEAP32[$5 + 128 >> 2], 0);
 HEAP32[$5 + 116 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 3, HEAP32[$5 + 128 >> 2], 3);
 HEAP32[$5 + 112 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 1);
 HEAP32[$5 + 108 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 2);
 HEAP32[$5 + 104 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 1);
 HEAP32[$5 + 100 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 2);
 HEAP32[$5 + 96 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 12 >> 2];
 HEAP32[$5 + 92 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 16 >> 2];
 HEAP32[$5 + 88 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 88 >> 2] < HEAP32[$5 + 120 >> 2]) {
   HEAP32[$5 + 84 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 84 >> 2] < HEAP32[$5 + 104 >> 2]) {
     HEAP32[$5 + 80 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 80 >> 2] < HEAP32[$5 + 100 >> 2]) {
       HEAP32[$5 + 76 >> 2] = 0;
       while (1) {
        if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 116 >> 2]) {
         $0 = $5 + 28 | 0;
         $1 = $5 + 40 | 0;
         $2 = $5 + 36 | 0;
         $3 = $5 + 48 | 0;
         HEAP32[$5 + 72 >> 2] = Math_imul(HEAP32[$5 + 80 >> 2], HEAP32[$5 + 92 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 2 >> 1];
         HEAP32[$5 + 68 >> 2] = Math_imul(HEAP32[$5 + 84 >> 2], HEAP32[$5 + 96 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 4 >> 1];
         HEAP32[$5 + 60 >> 2] = 0;
         HEAP32[$5 + 56 >> 2] = 0 - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 64 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 60 | 0, $5 + 56 | 0) >> 2];
         $4 = HEAP32[$5 + 140 >> 2] + 24 | 0;
         HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 108 >> 2] - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 52 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($4, $3) >> 2];
         HEAP32[$5 + 40 >> 2] = 0;
         HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 44 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($1, $2) >> 2];
         $1 = HEAP32[$5 + 140 >> 2] + 20 | 0;
         HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 112 >> 2] - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 32 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($1, $0) >> 2];
         HEAP32[$5 + 24 >> 2] = 0;
         HEAP32[$5 + 20 >> 2] = 0;
         HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 44 >> 2];
         while (1) {
          if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 32 >> 2]) {
           HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 64 >> 2];
           while (1) {
            if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 52 >> 2]) {
             HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 12 >> 2];
             HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 16 >> 2];
             HEAP32[$5 + 24 >> 2] = HEAPU8[HEAP32[$5 + 132 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 4 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 76 >> 2]) | 0] + HEAP32[$5 + 24 >> 2];
             HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
             HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAP32[$5 + 24 >> 2] = (HEAP32[$5 + 24 >> 2] + (HEAP32[$5 + 20 >> 2] / 2 | 0) | 0) / HEAP32[$5 + 20 >> 2];
         $0 = $5 + 24 | 0;
         HEAP32[$5 + 24 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, HEAP32[$5 + 140 >> 2] + 28 | 0) >> 2];
         HEAP32[$5 + 24 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0, HEAP32[$5 + 140 >> 2] + 32 | 0) >> 2];
         $0 = HEAP32[$5 + 24 >> 2];
         HEAP8[HEAP32[$5 + 124 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 128 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2]) | 0] = $0;
         HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 80 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 84 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 + 144 | 0;
}
function __jspeBinaryExpression($0, $1) {
 var $2 = 0;
 $2 = global$0 - 176 | 0;
 global$0 = $2;
 HEAP32[$2 + 172 >> 2] = $0;
 HEAP32[$2 + 168 >> 2] = $1;
 HEAP32[$2 + 164 >> 2] = jspeGetBinaryExpressionPrecedence(HEAP16[HEAP32[13768] + 2 >> 1]);
 while (1) {
  if (HEAP32[$2 + 164 >> 2] ? HEAPU32[$2 + 164 >> 2] > HEAPU32[$2 + 168 >> 2] : 0) {
   HEAP32[$2 + 160 >> 2] = HEAP16[HEAP32[13768] + 2 >> 1];
   jslGetNextToken();
   label$5 : {
    if (!(HEAP32[$2 + 160 >> 2] != 160 ? HEAP32[$2 + 160 >> 2] != 158 : 0)) {
     HEAP8[$2 + 159 | 0] = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$2 + 172 >> 2])) & 1;
     label$8 : {
      if (!(!(HEAP8[$2 + 159 | 0] & 1) | HEAP32[$2 + 160 >> 2] != 160 ? !(HEAP32[$2 + 160 >> 2] == 158 ? !(HEAP8[$2 + 159 | 0] & 1) : 0) : 0)) {
       HEAP32[$2 + 152 >> 2] = HEAP32[23778];
       jspSetNoExecute();
       jsvUnLock(__jspeBinaryExpression(jspeUnaryExpression(), HEAP32[$2 + 164 >> 2]));
       HEAP32[23778] = HEAP32[23778] & -1664 | HEAP32[$2 + 152 >> 2] & 1663;
       break label$8;
      }
      jsvUnLock(HEAP32[$2 + 172 >> 2]);
      HEAP32[$2 + 172 >> 2] = __jspeBinaryExpression(jspeUnaryExpression(), HEAP32[$2 + 164 >> 2]);
     }
     break label$5;
    }
    HEAP32[$2 + 148 >> 2] = __jspeBinaryExpression(jspeUnaryExpression(), HEAP32[$2 + 164 >> 2]);
    if ((HEAP32[23778] & 63) == 1) {
     label$13 : {
      if (HEAP32[$2 + 160 >> 2] == 185) {
       HEAP32[$2 + 144 >> 2] = jsvSkipName(HEAP32[$2 + 172 >> 2]);
       HEAP32[$2 + 140 >> 2] = jsvSkipName(HEAP32[$2 + 148 >> 2]);
       label$15 : {
        if (jsvHasChildren(HEAP32[$2 + 140 >> 2]) & 1) {
         HEAP32[$2 + 144 >> 2] = jsvAsArrayIndexAndUnLock(HEAP32[$2 + 144 >> 2]);
         HEAP32[$2 + 136 >> 2] = jspGetVarNamedField(HEAP32[$2 + 140 >> 2], HEAP32[$2 + 144 >> 2], 1);
         jsvUnLock2(HEAP32[$2 + 172 >> 2], HEAP32[$2 + 136 >> 2]);
         HEAP32[$2 + 172 >> 2] = jsvNewFromBool(HEAP32[$2 + 136 >> 2] != 0);
         break label$15;
        }
        HEAP32[$2 + 132 >> 2] = jswGetSymbolListForObjectProto(HEAP32[$2 + 140 >> 2]);
        label$17 : {
         if (HEAP32[$2 + 132 >> 2]) {
          HEAP32[$2 + 128 >> 2] = 0;
          if (jsvGetString(HEAP32[$2 + 144 >> 2], $2 - -64 | 0, 64) >>> 0 < 64) {
           HEAP32[$2 + 128 >> 2] = jswBinarySearch(HEAP32[$2 + 132 >> 2], HEAP32[$2 + 140 >> 2], $2 - -64 | 0);
          }
          jsvUnLock2(HEAP32[$2 + 172 >> 2], HEAP32[$2 + 128 >> 2]);
          HEAP32[$2 + 172 >> 2] = jsvNewFromBool(HEAP32[$2 + 128 >> 2] != 0);
          break label$17;
         }
         HEAP32[$2 >> 2] = HEAP32[$2 + 140 >> 2];
         jsExceptionHere(1, 4628, $2);
         jsvUnLock(HEAP32[$2 + 172 >> 2]);
         HEAP32[$2 + 172 >> 2] = 0;
        }
       }
       jsvUnLock2(HEAP32[$2 + 144 >> 2], HEAP32[$2 + 140 >> 2]);
       break label$13;
      }
      label$20 : {
       if (HEAP32[$2 + 160 >> 2] == 186) {
        HEAP8[$2 + 63 | 0] = 0;
        HEAP32[$2 + 56 >> 2] = jsvSkipName(HEAP32[$2 + 172 >> 2]);
        HEAP32[$2 + 52 >> 2] = jsvSkipName(HEAP32[$2 + 148 >> 2]);
        label$22 : {
         if (!(jsvIsFunction(HEAP32[$2 + 52 >> 2]) & 1)) {
          HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 52 >> 2];
          jsExceptionHere(1, 4668, $2 + 16 | 0);
          break label$22;
         }
         label$24 : {
          if (!(jsvIsObject(HEAP32[$2 + 56 >> 2]) & 1)) {
           if (!(jsvIsFunction(HEAP32[$2 + 56 >> 2]) & 1)) {
            break label$24;
           }
          }
          HEAP32[$2 + 48 >> 2] = jspGetNamedField(HEAP32[$2 + 52 >> 2], 3674, 0);
          HEAP32[$2 + 44 >> 2] = jsvObjectGetChild(HEAP32[$2 + 56 >> 2], 3684, 0);
          while (1) {
           if (HEAP32[$2 + 44 >> 2]) {
            if (HEAP32[$2 + 44 >> 2] == HEAP32[$2 + 48 >> 2]) {
             HEAP8[$2 + 63 | 0] = 1;
            }
            HEAP32[$2 + 40 >> 2] = jsvObjectGetChild(HEAP32[$2 + 44 >> 2], 3684, 0);
            jsvUnLock(HEAP32[$2 + 44 >> 2]);
            HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 40 >> 2];
            continue;
           }
           break;
          }
          if (jspIsConstructor(HEAP32[$2 + 52 >> 2], 3694) & 1) {
           HEAP8[$2 + 63 | 0] = 1;
          }
          jsvUnLock(HEAP32[$2 + 48 >> 2]);
         }
         if (!(HEAP8[$2 + 63 | 0] & 1)) {
          HEAP32[$2 + 36 >> 2] = jswGetBasicObjectName(HEAP32[$2 + 56 >> 2]);
          if (HEAP32[$2 + 36 >> 2]) {
           HEAP8[$2 + 63 | 0] = jspIsConstructor(HEAP32[$2 + 52 >> 2], HEAP32[$2 + 36 >> 2]) & 1;
          }
          label$32 : {
           if (HEAP8[$2 + 63 | 0] & 1) {
            break label$32;
           }
           if (!(jsvIsArray(HEAP32[$2 + 56 >> 2]) & 1)) {
            if (!(jsvIsArrayBuffer(HEAP32[$2 + 56 >> 2]) & 1)) {
             break label$32;
            }
           }
           if (!(jspIsConstructor(HEAP32[$2 + 52 >> 2], 3694) & 1)) {
            break label$32;
           }
           HEAP8[$2 + 63 | 0] = 1;
          }
         }
        }
        jsvUnLock3(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], HEAP32[$2 + 172 >> 2]);
        HEAP32[$2 + 172 >> 2] = jsvNewFromBool(HEAP8[$2 + 63 | 0] & 1);
        break label$20;
       }
       HEAP32[$2 + 32 >> 2] = jsvMathsOpSkipNames(HEAP32[$2 + 172 >> 2], HEAP32[$2 + 148 >> 2], HEAP32[$2 + 160 >> 2]);
       jsvUnLock(HEAP32[$2 + 172 >> 2]);
       HEAP32[$2 + 172 >> 2] = HEAP32[$2 + 32 >> 2];
      }
     }
    }
    jsvUnLock(HEAP32[$2 + 148 >> 2]);
   }
   HEAP32[$2 + 164 >> 2] = jspeGetBinaryExpressionPrecedence(HEAP16[HEAP32[13768] + 2 >> 1]);
   continue;
  }
  break;
 }
 global$0 = $2 + 176 | 0;
 return HEAP32[$2 + 172 >> 2];
}
function tflite__ops__micro__svdf___28anonymous_20namespace_29__EvalHybridSVDF_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteSVDFParams_20const__2c_20TfLiteTensor__2c_20TfLiteTensor__2c_20TfLiteTensor__2c_20TfLiteTensor__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 var $12 = 0;
 $12 = global$0 - 160 | 0;
 global$0 = $12;
 HEAP32[$12 + 156 >> 2] = $0;
 HEAP32[$12 + 152 >> 2] = $1;
 HEAP32[$12 + 148 >> 2] = $2;
 HEAP32[$12 + 144 >> 2] = $3;
 HEAP32[$12 + 140 >> 2] = $4;
 HEAP32[$12 + 136 >> 2] = $5;
 HEAP32[$12 + 132 >> 2] = $6;
 HEAP32[$12 + 128 >> 2] = $7;
 HEAP32[$12 + 124 >> 2] = $8;
 HEAP32[$12 + 120 >> 2] = $9;
 HEAP32[$12 + 116 >> 2] = $10;
 HEAP32[$12 + 112 >> 2] = $11;
 HEAP32[$12 + 108 >> 2] = HEAP32[HEAP32[$12 + 132 >> 2] >> 2];
 HEAP32[$12 + 104 >> 2] = HEAP32[HEAP32[HEAP32[$12 + 148 >> 2] + 8 >> 2] + 4 >> 2];
 HEAP32[$12 + 100 >> 2] = HEAP32[HEAP32[HEAP32[$12 + 148 >> 2] + 8 >> 2] + 8 >> 2];
 HEAP32[$12 + 96 >> 2] = HEAP32[HEAP32[HEAP32[$12 + 144 >> 2] + 8 >> 2] + 4 >> 2];
 HEAP32[$12 + 92 >> 2] = HEAP32[$12 + 96 >> 2] / HEAP32[$12 + 108 >> 2];
 HEAP32[$12 + 88 >> 2] = HEAP32[HEAP32[HEAP32[$12 + 140 >> 2] + 8 >> 2] + 8 >> 2];
 HEAP32[$12 + 84 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$12 + 148 >> 2]);
 HEAP32[$12 + 80 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$12 + 120 >> 2]);
 HEAP32[$12 + 76 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$12 + 144 >> 2]);
 HEAP32[$12 + 72 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$12 + 124 >> 2]);
 HEAPF32[$12 + 68 >> 2] = HEAPF32[HEAP32[$12 + 144 >> 2] + 12 >> 2];
 HEAP32[$12 + 64 >> 2] = 0;
 while (1) {
  if (HEAP32[$12 + 64 >> 2] < HEAP32[$12 + 104 >> 2]) {
   HEAP32[$12 + 60 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$12 + 116 >> 2]) + (Math_imul(HEAP32[$12 + 96 >> 2], Math_imul(HEAP32[$12 + 64 >> 2], HEAP32[$12 + 88 >> 2])) << 2);
   HEAP32[$12 + 56 >> 2] = 0;
   while (1) {
    if (HEAP32[$12 + 56 >> 2] < HEAP32[$12 + 96 >> 2]) {
     HEAP32[$12 + 52 >> 2] = HEAP32[$12 + 60 >> 2] + (Math_imul(HEAP32[$12 + 56 >> 2], HEAP32[$12 + 88 >> 2]) << 2);
     HEAPF32[HEAP32[$12 + 52 >> 2] + (HEAP32[$12 + 88 >> 2] - 1 << 2) >> 2] = 0;
     HEAP32[$12 + 56 >> 2] = HEAP32[$12 + 56 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$12 + 64 >> 2] = HEAP32[$12 + 64 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP8[$12 + 51 | 0] = 1;
 HEAP32[$12 + 44 >> 2] = 0;
 while (1) {
  if ((HEAP32[$12 + 44 >> 2] < (Math_imul(HEAP32[$12 + 104 >> 2], HEAP32[$12 + 100 >> 2]) | 0) ? HEAPU8[$12 + 51 | 0] : 0) & 1) {
   if (HEAPF32[HEAP32[$12 + 84 >> 2] + (HEAP32[$12 + 44 >> 2] << 2) >> 2] != Math_fround(0)) {
    HEAP8[$12 + 51 | 0] = 0;
   }
   HEAP32[$12 + 44 >> 2] = HEAP32[$12 + 44 >> 2] + 1;
   continue;
  }
  break;
 }
 if (!(HEAP8[$12 + 51 | 0] & 1)) {
  tflite__SignedSymmetricPerChannelQuantize_28float_20const__2c_20TfLiteIntArray__2c_20int_2c_20signed_20char__2c_20float__29(HEAP32[$12 + 84 >> 2], HEAP32[HEAP32[$12 + 148 >> 2] + 8 >> 2], HEAP32[$12 + 80 >> 2], HEAP32[$12 + 72 >> 2]);
  HEAP32[$12 + 40 >> 2] = 0;
  while (1) {
   if (HEAP32[$12 + 40 >> 2] < HEAP32[$12 + 104 >> 2]) {
    $0 = HEAP32[$12 + 72 >> 2] + (HEAP32[$12 + 40 >> 2] << 2) | 0;
    HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] * HEAPF32[$12 + 68 >> 2];
    HEAP32[$12 + 40 >> 2] = HEAP32[$12 + 40 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$12 + 36 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$12 + 116 >> 2]) + (HEAP32[$12 + 88 >> 2] - 1 << 2);
  HEAP32[$12 + 32 >> 2] = 0;
  while (1) {
   if (HEAP32[$12 + 32 >> 2] < HEAP32[$12 + 104 >> 2]) {
    HEAPF32[$12 + 28 >> 2] = HEAPF32[HEAP32[$12 + 72 >> 2] + (HEAP32[$12 + 32 >> 2] << 2) >> 2];
    HEAP32[$12 + 24 >> 2] = HEAP32[$12 + 76 >> 2];
    HEAP32[$12 + 20 >> 2] = 0;
    while (1) {
     if (HEAP32[$12 + 20 >> 2] < HEAP32[$12 + 96 >> 2]) {
      HEAP32[$12 + 16 >> 2] = 0;
      HEAP32[$12 + 12 >> 2] = 0;
      while (1) {
       if (HEAP32[$12 + 12 >> 2] < HEAP32[$12 + 100 >> 2]) {
        HEAP32[$12 + 16 >> 2] = HEAP32[$12 + 16 >> 2] + Math_imul(HEAP8[HEAP32[$12 + 24 >> 2]], HEAP8[HEAP32[$12 + 80 >> 2] + HEAP32[$12 + 12 >> 2] | 0]);
        HEAP32[$12 + 12 >> 2] = HEAP32[$12 + 12 >> 2] + 1;
        HEAP32[$12 + 24 >> 2] = HEAP32[$12 + 24 >> 2] + 1;
        continue;
       }
       break;
      }
      $0 = HEAP32[$12 + 36 >> 2];
      HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + Math_fround(Math_fround(HEAP32[$12 + 16 >> 2]) * HEAPF32[$12 + 28 >> 2]);
      HEAP32[$12 + 20 >> 2] = HEAP32[$12 + 20 >> 2] + 1;
      HEAP32[$12 + 36 >> 2] = HEAP32[$12 + 36 >> 2] + (HEAP32[$12 + 88 >> 2] << 2);
      continue;
     }
     break;
    }
    HEAP32[$12 + 32 >> 2] = HEAP32[$12 + 32 >> 2] + 1;
    HEAP32[$12 + 80 >> 2] = HEAP32[$12 + 100 >> 2] + HEAP32[$12 + 80 >> 2];
    continue;
   }
   break;
  }
 }
 tflite__ops__micro__svdf___28anonymous_20namespace_29__ApplyTimeWeightsBiasAndActivation_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteFusedActivation_2c_20TfLiteTensor__2c_20TfLiteTensor__2c_20TfLiteTensor__29(HEAP32[$12 + 104 >> 2], HEAP32[$12 + 88 >> 2], HEAP32[$12 + 96 >> 2], HEAP32[$12 + 92 >> 2], HEAP32[$12 + 108 >> 2], HEAP32[$12 + 140 >> 2], HEAP32[$12 + 136 >> 2], HEAP32[HEAP32[$12 + 132 >> 2] + 4 >> 2], HEAP32[$12 + 116 >> 2], HEAP32[$12 + 128 >> 2], HEAP32[$12 + 112 >> 2]);
 global$0 = $12 + 160 | 0;
}
function tflite__ops__micro__depthwise_conv__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 688 | 0;
 global$0 = $2;
 HEAP32[$2 + 680 >> 2] = $0;
 HEAP32[$2 + 676 >> 2] = $1;
 HEAP32[$2 + 672 >> 2] = HEAP32[HEAP32[$2 + 676 >> 2] + 20 >> 2];
 HEAP32[$2 + 668 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 680 >> 2], HEAP32[$2 + 676 >> 2]);
 HEAP32[$2 + 664 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 680 >> 2], HEAP32[$2 + 676 >> 2], 0);
 HEAP32[$2 + 660 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 680 >> 2], HEAP32[$2 + 676 >> 2], 1);
 $0 = $2;
 label$1 : {
  if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 676 >> 2]) | 0) == 3) {
   $1 = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 680 >> 2], HEAP32[$2 + 676 >> 2], 2);
   break label$1;
  }
  $1 = 0;
 }
 HEAP32[$0 + 656 >> 2] = $1;
 HEAP32[$2 + 652 >> 2] = HEAP32[HEAP32[$2 + 664 >> 2] >> 2];
 HEAP32[$2 + 648 >> 2] = tflite__SizeOfDimension_28TfLiteTensor_20const__2c_20int_29(HEAP32[$2 + 664 >> 2], 2);
 HEAP32[$2 + 644 >> 2] = tflite__SizeOfDimension_28TfLiteTensor_20const__2c_20int_29(HEAP32[$2 + 664 >> 2], 1);
 HEAP32[$2 + 640 >> 2] = tflite__SizeOfDimension_28TfLiteTensor_20const__2c_20int_29(HEAP32[$2 + 660 >> 2], 2);
 HEAP32[$2 + 636 >> 2] = tflite__SizeOfDimension_28TfLiteTensor_20const__2c_20int_29(HEAP32[$2 + 660 >> 2], 1);
 label$3 : {
  if (HEAP32[HEAP32[$2 + 664 >> 2] >> 2] != 1) {
   if (HEAP32[HEAP32[$2 + 660 >> 2] + 48 >> 2] != 1) {
    $0 = HEAP32[HEAP32[$2 + 680 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 680 >> 2];
    $3 = HEAP32[HEAP32[$2 + 660 >> 2] + 48 >> 2];
    HEAP32[$2 + 20 >> 2] = 1;
    HEAP32[$2 + 16 >> 2] = $3;
    HEAP32[$2 + 12 >> 2] = 42830;
    HEAP32[$2 + 8 >> 2] = 42804;
    HEAP32[$2 + 4 >> 2] = 216;
    HEAP32[$2 >> 2] = 42699;
    FUNCTION_TABLE[$0]($1, 42673, $2);
    HEAP32[$2 + 684 >> 2] = 1;
    break label$3;
   }
   HEAP32[$2 + 84 >> 2] = HEAP32[HEAP32[$2 + 660 >> 2] + 52 >> 2];
   if (!HEAP32[$2 + 84 >> 2]) {
    $0 = HEAP32[HEAP32[$2 + 680 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 680 >> 2];
    HEAP32[$2 + 72 >> 2] = 42879;
    HEAP32[$2 + 68 >> 2] = 221;
    HEAP32[$2 + 64 >> 2] = 42699;
    FUNCTION_TABLE[$0]($1, 42856, $2 - -64 | 0);
    HEAP32[$2 + 684 >> 2] = 1;
    break label$3;
   }
   if (!HEAP32[HEAP32[$2 + 84 >> 2] >> 2]) {
    $0 = HEAP32[HEAP32[$2 + 680 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 680 >> 2];
    HEAP32[$2 + 56 >> 2] = 42899;
    HEAP32[$2 + 52 >> 2] = 222;
    HEAP32[$2 + 48 >> 2] = 42699;
    FUNCTION_TABLE[$0]($1, 42856, $2 + 48 | 0);
    HEAP32[$2 + 684 >> 2] = 1;
    break label$3;
   }
  }
  if (tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__CalculateOpData_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLiteType_2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData__29(HEAP32[$2 + 680 >> 2], HEAP32[$2 + 676 >> 2], HEAP32[$2 + 672 >> 2], HEAP32[$2 + 648 >> 2], HEAP32[$2 + 644 >> 2], HEAP32[$2 + 640 >> 2], HEAP32[$2 + 636 >> 2], HEAP32[$2 + 652 >> 2], $2 + 88 | 0)) {
   HEAP32[$2 + 684 >> 2] = 1;
   break label$3;
  }
  label$9 : {
   label$10 : {
    $0 = HEAP32[HEAP32[$2 + 664 >> 2] >> 2] + -1 | 0;
    if ($0 >>> 0 > 8) {
     break label$10;
    }
    label$11 : {
     switch ($0 - 1 | 0) {
     default:
      tflite__ops__micro__depthwise_conv__EvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29(HEAP32[$2 + 680 >> 2], HEAP32[$2 + 676 >> 2], HEAP32[$2 + 672 >> 2], $2 + 88 | 0, HEAP32[$2 + 664 >> 2], HEAP32[$2 + 660 >> 2], HEAP32[$2 + 656 >> 2], HEAP32[$2 + 668 >> 2]);
      break label$9;
     case 7:
      tflite__ops__micro__depthwise_conv__EvalQuantizedPerChannel_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29(HEAP32[$2 + 680 >> 2], HEAP32[$2 + 676 >> 2], HEAP32[$2 + 672 >> 2], $2 + 88 | 0, HEAP32[$2 + 664 >> 2], HEAP32[$2 + 660 >> 2], HEAP32[$2 + 656 >> 2], HEAP32[$2 + 668 >> 2]);
      break label$9;
     case 0:
     case 2:
     case 3:
     case 4:
     case 5:
     case 6:
      break label$10;
     case 1:
      break label$11;
     }
    }
    tflite__ops__micro__depthwise_conv__EvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29(HEAP32[$2 + 680 >> 2], HEAP32[$2 + 676 >> 2], HEAP32[$2 + 672 >> 2], $2 + 88 | 0, HEAP32[$2 + 664 >> 2], HEAP32[$2 + 660 >> 2], HEAP32[$2 + 656 >> 2], HEAP32[$2 + 668 >> 2]);
    break label$9;
   }
   $0 = HEAP32[HEAP32[$2 + 680 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 680 >> 2];
   $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 664 >> 2] >> 2]);
   HEAP32[$2 + 36 >> 2] = HEAP32[HEAP32[$2 + 664 >> 2] >> 2];
   HEAP32[$2 + 32 >> 2] = $3;
   FUNCTION_TABLE[$0]($1, 42926, $2 + 32 | 0);
   HEAP32[$2 + 684 >> 2] = 1;
   break label$3;
  }
  HEAP32[$2 + 684 >> 2] = 0;
 }
 global$0 = $2 + 688 | 0;
 return HEAP32[$2 + 684 >> 2];
}
function jswrap_interface_setWatch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 80 | 0;
 global$0 = $3;
 HEAP32[$3 + 72 >> 2] = $0;
 HEAP8[$3 + 71 | 0] = $1;
 HEAP32[$3 + 64 >> 2] = $2;
 label$1 : {
  if (!(jshIsPinValid(HEAPU8[$3 + 71 | 0]) & 1)) {
   jsError(33486, 0);
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  label$3 : {
   if (jsiIsWatchingPin(HEAPU8[$3 + 71 | 0]) & 1) {
    break label$3;
   }
   if (jshIsDeviceInitialised(HEAPU8[$3 + 71 | 0]) & 1) {
    break label$3;
   }
   jsWarn(33663, 0);
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP8[$3 + 63 | 0] = 0;
  HEAPF64[$3 + 48 >> 3] = 0;
  HEAP32[$3 + 44 >> 2] = 0;
  HEAP8[$3 + 43 | 0] = 0;
  HEAP8[$3 + 42 | 0] = 255;
  label$4 : {
   if (!(HEAPU8[$3 + 71 | 0] == 24 | HEAPU8[$3 + 71 | 0] == 22 | (HEAPU8[$3 + 71 | 0] == 23 | HEAPU8[$3 + 71 | 0] == 11))) {
    if (HEAPU8[$3 + 71 | 0] != 16) {
     break label$4;
    }
   }
   HEAP32[$3 + 44 >> 2] = 1;
   HEAPF64[$3 + 48 >> 3] = 25;
  }
  label$6 : {
   if (jsvIsObject(HEAP32[$3 + 64 >> 2]) & 1) {
    HEAP32[$3 + 36 >> 2] = jsvObjectGetChild(HEAP32[$3 + 64 >> 2], 33629, 0);
    if (HEAP32[$3 + 36 >> 2]) {
     HEAP8[$3 + 63 | 0] = jsvGetBoolAndUnLock(HEAP32[$3 + 36 >> 2]) & 1;
    }
    HEAP32[$3 + 36 >> 2] = jsvObjectGetChild(HEAP32[$3 + 64 >> 2], 33798, 0);
    if (HEAP32[$3 + 36 >> 2]) {
     HEAPF64[$3 + 48 >> 3] = jsvGetFloatAndUnLock(HEAP32[$3 + 36 >> 2]);
    }
    $0 = __DOUBLE_BITS(HEAPF64[$3 + 48 >> 3]);
    $1 = i64toi32_i32$HIGH_BITS & 2147483647;
    if (!(HEAPF64[$3 + 48 >> 3] < 0 ? 0 : ($1 | 0) == 2146435072 & $0 >>> 0 <= 0 | $1 >>> 0 < 2146435072)) {
     HEAPF64[$3 + 48 >> 3] = 0;
    }
    HEAP32[$3 + 36 >> 2] = jsvObjectGetChild(HEAP32[$3 + 64 >> 2], 33807, 0);
    if (!(jsvIsUndefined(HEAP32[$3 + 36 >> 2]) & 1)) {
     label$13 : {
      if (jsvIsNumeric(HEAP32[$3 + 36 >> 2]) & 1) {
       HEAP32[$3 + 32 >> 2] = jsvGetInteger(HEAP32[$3 + 36 >> 2]);
       $0 = $3;
       if (HEAP32[$3 + 32 >> 2] > 0) {
        $1 = 1;
       } else {
        $1 = HEAP32[$3 + 32 >> 2] < 0 ? -1 : 0;
       }
       HEAP32[$0 + 44 >> 2] = $1;
       break label$13;
      }
      HEAP32[$3 + 44 >> 2] = -1e3;
      if (jsvIsString(HEAP32[$3 + 36 >> 2]) & 1) {
       label$17 : {
        if (jsvIsStringEqual(HEAP32[$3 + 36 >> 2], 33812) & 1) {
         HEAP32[$3 + 44 >> 2] = 1;
         break label$17;
        }
        label$19 : {
         if (jsvIsStringEqual(HEAP32[$3 + 36 >> 2], 33819) & 1) {
          HEAP32[$3 + 44 >> 2] = -1;
          break label$19;
         }
         if (jsvIsStringEqual(HEAP32[$3 + 36 >> 2], 33827) & 1) {
          HEAP32[$3 + 44 >> 2] = 0;
         }
        }
       }
      }
     }
    }
    jsvUnLock(HEAP32[$3 + 36 >> 2]);
    if (!(HEAP32[$3 + 44 >> 2] <= 1 ? HEAP32[$3 + 44 >> 2] >= -1 : 0)) {
     jsExceptionHere(3, 33832, 0);
     HEAP32[$3 + 76 >> 2] = 0;
     break label$1;
    }
    HEAP8[$3 + 43 | 0] = jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$3 + 64 >> 2], 33901, 0)) & 1;
    HEAP8[$3 + 42 | 0] = jshGetPinFromVarAndUnLock(jsvObjectGetChild(HEAP32[$3 + 64 >> 2], 33905, 0));
    break label$6;
   }
   HEAP8[$3 + 63 | 0] = jsvGetBool(HEAP32[$3 + 64 >> 2]) & 1;
  }
  HEAP32[$3 + 28 >> 2] = -1;
  label$24 : {
   label$25 : {
    if (jsvIsFunction(HEAP32[$3 + 72 >> 2]) & 1) {
     break label$25;
    }
    if (jsvIsString(HEAP32[$3 + 72 >> 2]) & 1) {
     break label$25;
    }
    jsExceptionHere(1, 33910, 0);
    break label$24;
   }
   HEAP32[$3 + 24 >> 2] = jsvNewWithFlags(5);
   if (HEAP32[$3 + 24 >> 2]) {
    jsvObjectSetChildAndUnLock(HEAP32[$3 + 24 >> 2], 33943, jsvNewFromPin(HEAPU8[$3 + 71 | 0]));
    if (HEAP8[$3 + 63 | 0] & 1) {
     jsvObjectSetChildAndUnLock(HEAP32[$3 + 24 >> 2], 33947, jsvNewFromBool(HEAP8[$3 + 63 | 0] & 1));
    }
    if (HEAPF64[$3 + 48 >> 3] > 0) {
     jsvObjectSetChildAndUnLock(HEAP32[$3 + 24 >> 2], 33798, jsvNewFromInteger(jshGetTimeFromMilliseconds(HEAPF64[$3 + 48 >> 3])));
    }
    if (HEAP32[$3 + 44 >> 2]) {
     jsvObjectSetChildAndUnLock(HEAP32[$3 + 24 >> 2], 33807, jsvNewFromInteger(HEAP32[$3 + 44 >> 2]));
    }
    jsvObjectSetChild(HEAP32[$3 + 24 >> 2], 33953, HEAP32[$3 + 72 >> 2]);
   }
   HEAP8[$3 + 23 | 0] = 0;
   if (!(jsiIsWatchingPin(HEAPU8[$3 + 71 | 0]) & 1)) {
    HEAP8[$3 + 23 | 0] = jshPinWatch(HEAPU8[$3 + 71 | 0], 1);
   }
   label$31 : {
    if (HEAPU8[$3 + 23 | 0]) {
     jshSetEventCallback(HEAPU8[$3 + 23 | 0], 0);
     if (jshIsPinValid(HEAPU8[$3 + 42 | 0]) & 1) {
      jshSetEventDataPin(HEAPU8[$3 + 23 | 0], HEAPU8[$3 + 42 | 0]);
     }
     if (HEAP8[$3 + 43 | 0] & 1) {
      label$35 : {
       if (jsvIsNativeFunction(HEAP32[$3 + 72 >> 2]) & 1) {
        jshSetEventCallback(HEAPU8[$3 + 23 | 0], jsvGetNativeFunctionPtr(HEAP32[$3 + 72 >> 2]));
        break label$35;
       }
       label$37 : {
        if (jshIsPinValid(HEAPU8[$3 + 42 | 0]) & 1) {
         jsExceptionHere(1, 33962, 0);
         break label$37;
        }
        jsExceptionHere(1, 33997, 0);
       }
      }
     }
     break label$31;
    }
    if (HEAP8[$3 + 43 | 0] & 1) {
     jsExceptionHere(1, 34049, 0);
    }
   }
   HEAP32[$3 + 16 >> 2] = jsvLock(HEAPU16[47565]);
   HEAP32[$3 + 28 >> 2] = jsvArrayAddToEnd(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 24 >> 2]) - 1;
   jsvUnLock2(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 24 >> 2]);
  }
  $0 = $3;
  label$40 : {
   if (HEAP32[$3 + 28 >> 2] >= 0) {
    $1 = jsvNewFromInteger(HEAP32[$3 + 28 >> 2]);
    break label$40;
   }
   $1 = 0;
  }
  HEAP32[$0 + 76 >> 2] = $1;
 }
 global$0 = $3 + 80 | 0;
 return HEAP32[$3 + 76 >> 2];
}
function jswrap_graphics_createArrayBuffer($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 112 | 0;
 global$0 = $4;
 HEAP32[$4 + 104 >> 2] = $0;
 HEAP32[$4 + 100 >> 2] = $1;
 HEAP32[$4 + 96 >> 2] = $2;
 HEAP32[$4 + 92 >> 2] = $3;
 label$1 : {
  label$2 : {
   if (!(HEAP32[$4 + 104 >> 2] <= 0 | HEAP32[$4 + 100 >> 2] <= 0 | HEAP32[$4 + 104 >> 2] > 32767)) {
    if (HEAP32[$4 + 100 >> 2] <= 32767) {
     break label$2;
    }
   }
   jsExceptionHere(1, 38468, 0);
   HEAP32[$4 + 108 >> 2] = 0;
   break label$1;
  }
  if (!(isValidBPP(HEAP32[$4 + 96 >> 2]) & 1)) {
   jsExceptionHere(1, 38481, 0);
   HEAP32[$4 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 88 >> 2] = jspNewObject(0, 38493);
  if (!HEAP32[$4 + 88 >> 2]) {
   HEAP32[$4 + 108 >> 2] = 0;
   break label$1;
  }
  graphicsStructInit($4 + 16 | 0, HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2], HEAP32[$4 + 96 >> 2]);
  HEAP8[$4 + 20 | 0] = 0;
  HEAP8[$4 + 21 | 0] = 0;
  HEAP8[$4 + 22 | 0] = 0;
  HEAP8[$4 + 23 | 0] = 0;
  HEAP8[$4 + 24 | 0] = 0;
  HEAP8[$4 + 25 | 0] = 0;
  HEAP8[$4 + 26 | 0] = 0;
  HEAP8[$4 + 27 | 0] = 0;
  $0 = HEAP32[$4 + 88 >> 2];
  HEAP8[$4 + 16 | 0] = $0;
  HEAP8[$4 + 17 | 0] = $0 >>> 8;
  HEAP8[$4 + 18 | 0] = $0 >>> 16;
  HEAP8[$4 + 19 | 0] = $0 >>> 24;
  if (jsvIsObject(HEAP32[$4 + 92 >> 2]) & 1) {
   if (jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$4 + 92 >> 2], 38502, 0)) & 1) {
    $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 1;
    HEAP8[$4 + 24 | 0] = $0;
    HEAP8[$4 + 25 | 0] = $0 >>> 8;
    HEAP8[$4 + 26 | 0] = $0 >>> 16;
    HEAP8[$4 + 27 | 0] = $0 >>> 24;
   }
   if (jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$4 + 92 >> 2], 38509, 0)) & 1) {
    $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 4;
    HEAP8[$4 + 24 | 0] = $0;
    HEAP8[$4 + 25 | 0] = $0 >>> 8;
    HEAP8[$4 + 26 | 0] = $0 >>> 16;
    HEAP8[$4 + 27 | 0] = $0 >>> 24;
   }
   if (jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$4 + 92 >> 2], 38513, 0)) & 1) {
    $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 8;
    HEAP8[$4 + 24 | 0] = $0;
    HEAP8[$4 + 25 | 0] = $0 >>> 8;
    HEAP8[$4 + 26 | 0] = $0 >>> 16;
    HEAP8[$4 + 27 | 0] = $0 >>> 24;
   }
   if (jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$4 + 92 >> 2], 38525, 0)) & 1) {
    label$11 : {
     if (HEAPU8[$4 + 32 | 0] == 1) {
      $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 2;
      HEAP8[$4 + 24 | 0] = $0;
      HEAP8[$4 + 25 | 0] = $0 >>> 8;
      HEAP8[$4 + 26 | 0] = $0 >>> 16;
      HEAP8[$4 + 27 | 0] = $0 >>> 24;
      break label$11;
     }
     jsExceptionHere(1, 38539, 0);
     HEAP32[$4 + 108 >> 2] = 0;
     break label$1;
    }
    if ((HEAPU8[$4 + 30 | 0] | HEAPU8[$4 + 31 | 0] << 8) & 7) {
     jsExceptionHere(1, 38587, 0);
     HEAP32[$4 + 108 >> 2] = 0;
     break label$1;
    }
   }
   HEAP32[$4 + 12 >> 2] = jsvObjectGetChild(HEAP32[$4 + 92 >> 2], 38644, 0);
   if (HEAP32[$4 + 12 >> 2]) {
    if (!(jsvIsStringEqual(HEAP32[$4 + 12 >> 2], 38656) & 1)) {
     label$16 : {
      if (!(jsvIsStringEqual(HEAP32[$4 + 12 >> 2], 38660) & 1)) {
       $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 128;
       HEAP8[$4 + 24 | 0] = $0;
       HEAP8[$4 + 25 | 0] = $0 >>> 8;
       HEAP8[$4 + 26 | 0] = $0 >>> 16;
       HEAP8[$4 + 27 | 0] = $0 >>> 24;
       break label$16;
      }
      label$18 : {
       if (!(jsvIsStringEqual(HEAP32[$4 + 12 >> 2], 38664) & 1)) {
        $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 256;
        HEAP8[$4 + 24 | 0] = $0;
        HEAP8[$4 + 25 | 0] = $0 >>> 8;
        HEAP8[$4 + 26 | 0] = $0 >>> 16;
        HEAP8[$4 + 27 | 0] = $0 >>> 24;
        break label$18;
       }
       label$20 : {
        if (!(jsvIsStringEqual(HEAP32[$4 + 12 >> 2], 38668) & 1)) {
         $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 384;
         HEAP8[$4 + 24 | 0] = $0;
         HEAP8[$4 + 25 | 0] = $0 >>> 8;
         HEAP8[$4 + 26 | 0] = $0 >>> 16;
         HEAP8[$4 + 27 | 0] = $0 >>> 24;
         break label$20;
        }
        label$22 : {
         if (!(jsvIsStringEqual(HEAP32[$4 + 12 >> 2], 38672) & 1)) {
          $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 512;
          HEAP8[$4 + 24 | 0] = $0;
          HEAP8[$4 + 25 | 0] = $0 >>> 8;
          HEAP8[$4 + 26 | 0] = $0 >>> 16;
          HEAP8[$4 + 27 | 0] = $0 >>> 24;
          break label$22;
         }
         label$24 : {
          if (!(jsvIsStringEqual(HEAP32[$4 + 12 >> 2], 38676) & 1)) {
           $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 640;
           HEAP8[$4 + 24 | 0] = $0;
           HEAP8[$4 + 25 | 0] = $0 >>> 8;
           HEAP8[$4 + 26 | 0] = $0 >>> 16;
           HEAP8[$4 + 27 | 0] = $0 >>> 24;
           break label$24;
          }
          jsWarn(38680, 0);
         }
        }
       }
      }
     }
    }
    jsvUnLock(HEAP32[$4 + 12 >> 2]);
   }
  }
  $0 = $4 + 16 | 0;
  lcdInit_ArrayBuffer($0);
  graphicsSetVar($0);
  HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 88 >> 2];
 }
 global$0 = $4 + 112 | 0;
 return HEAP32[$4 + 108 >> 2];
}
function matchcharacter($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 48 | 0;
 global$0 = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 HEAP32[HEAP32[$4 + 32 >> 2] >> 2] = 1;
 HEAP8[$4 + 27 | 0] = jsvStringIteratorGetChar(HEAP32[$4 + 36 >> 2]);
 label$1 : {
  if (HEAP8[HEAP32[$4 + 40 >> 2]] == 46) {
   HEAP8[$4 + 47 | 0] = 1;
   break label$1;
  }
  if (HEAP8[HEAP32[$4 + 40 >> 2]] == 91) {
   HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] = 1;
   HEAP8[$4 + 26 | 0] = HEAP8[HEAP32[$4 + 40 >> 2] + 1 | 0] == 94;
   if (HEAP8[$4 + 26 | 0] & 1) {
    $0 = HEAP32[$4 + 32 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   }
   HEAP8[$4 + 25 | 0] = 0;
   while (1) {
    if (HEAP8[HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0] ? HEAP8[HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0] != 93 : 0) {
     HEAP8[$4 + 25 | 0] = (matchcharacter(HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0, HEAP32[$4 + 36 >> 2], $4 + 20 | 0, HEAP32[$4 + 28 >> 2]) & 1 | HEAP8[$4 + 25 | 0] & 1) != 0;
     $0 = HEAP32[$4 + 32 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$4 + 20 >> 2] + HEAP32[$0 >> 2];
     continue;
    }
    break;
   }
   label$9 : {
    if (HEAP8[HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0] == 93) {
     $0 = HEAP32[$4 + 32 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     break label$9;
    }
    jsExceptionHere(1, 36703, 0);
    HEAP8[$4 + 47 | 0] = 0;
    break label$1;
   }
   HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] = 0;
   HEAP8[$4 + 47 | 0] = (HEAP8[$4 + 25 | 0] & 1) != (HEAP8[$4 + 26 | 0] & 1);
   break label$1;
  }
  HEAP8[$4 + 19 | 0] = HEAPU8[HEAP32[$4 + 40 >> 2]];
  label$11 : {
   if (HEAP8[$4 + 19 | 0] != 92) {
    break label$11;
   }
   HEAP32[HEAP32[$4 + 32 >> 2] >> 2] = 2;
   HEAP8[$4 + 19 | 0] = HEAPU8[HEAP32[$4 + 40 >> 2] + 1 | 0];
   if (HEAP8[$4 + 19 | 0] == 100) {
    HEAP8[$4 + 47 | 0] = isNumeric(HEAP8[$4 + 27 | 0]) & 1;
    break label$1;
   }
   if (HEAP8[$4 + 19 | 0] == 68) {
    HEAP8[$4 + 47 | 0] = (isNumeric(HEAP8[$4 + 27 | 0]) ^ -1) & 1;
    break label$1;
   }
   if (HEAP8[$4 + 19 | 0] == 102) {
    HEAP8[$4 + 19 | 0] = 12;
    break label$11;
   }
   if (HEAP8[$4 + 19 | 0] == 110) {
    HEAP8[$4 + 19 | 0] = 10;
    break label$11;
   }
   if (HEAP8[$4 + 19 | 0] == 114) {
    HEAP8[$4 + 19 | 0] = 13;
    break label$11;
   }
   if (HEAP8[$4 + 19 | 0] == 115) {
    HEAP8[$4 + 47 | 0] = isWhitespace(HEAP8[$4 + 27 | 0]) & 1;
    break label$1;
   }
   if (HEAP8[$4 + 19 | 0] == 83) {
    HEAP8[$4 + 47 | 0] = (isWhitespace(HEAP8[$4 + 27 | 0]) ^ -1) & 1;
    break label$1;
   }
   if (HEAP8[$4 + 19 | 0] == 116) {
    HEAP8[$4 + 19 | 0] = 9;
    break label$11;
   }
   if (HEAP8[$4 + 19 | 0] == 118) {
    HEAP8[$4 + 19 | 0] = 11;
    break label$11;
   }
   if (HEAP8[$4 + 19 | 0] == 119) {
    $2 = isNumeric(HEAP8[$4 + 27 | 0]);
    $0 = $4;
    $1 = 1;
    label$22 : {
     if ($2 & 1) {
      break label$22;
     }
     $2 = isAlpha(HEAP8[$4 + 27 | 0]) & 1;
     $1 = 1;
     if ($2) {
      break label$22;
     }
     $1 = HEAP8[$4 + 27 | 0] == 95;
    }
    HEAP8[$0 + 47 | 0] = $1;
    break label$1;
   }
   if (HEAP8[$4 + 19 | 0] == 87) {
    $2 = isNumeric(HEAP8[$4 + 27 | 0]);
    $0 = $4;
    $1 = 1;
    label$24 : {
     if ($2 & 1) {
      break label$24;
     }
     $2 = isAlpha(HEAP8[$4 + 27 | 0]) & 1;
     $1 = 1;
     if ($2) {
      break label$24;
     }
     $1 = HEAP8[$4 + 27 | 0] == 95;
    }
    HEAP8[$0 + 47 | 0] = ($1 ^ -1) & 1;
    break label$1;
   }
   if (!(HEAP8[$4 + 19 | 0] < 48 | HEAP8[$4 + 19 | 0] > 57)) {
    HEAP8[$4 + 19 | 0] = HEAP8[$4 + 19 | 0] - 48;
    break label$11;
   }
   if (!(!HEAP8[HEAP32[$4 + 40 >> 2] + 3 | 0] | (!HEAP8[HEAP32[$4 + 40 >> 2] + 2 | 0] | HEAP8[$4 + 19 | 0] != 120))) {
    HEAP32[HEAP32[$4 + 32 >> 2] >> 2] = 4;
    HEAP8[$4 + 19 | 0] = hexToByte(HEAP8[HEAP32[$4 + 40 >> 2] + 2 | 0], HEAP8[HEAP32[$4 + 40 >> 2] + 3 | 0]);
   }
  }
  if (!(!(HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] & 1) | HEAP8[HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0] != 45)) {
   HEAP16[HEAP32[$4 + 28 >> 2] + 10 >> 1] = HEAP8[$4 + 19 | 0];
   $0 = HEAP32[$4 + 32 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   HEAP8[$4 + 11 | 0] = matchcharacter(HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0, HEAP32[$4 + 36 >> 2], $4 + 12 | 0, HEAP32[$4 + 28 >> 2]) & 1;
   $0 = HEAP32[$4 + 32 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$4 + 12 >> 2] + HEAP32[$0 >> 2];
   HEAP8[$4 + 47 | 0] = HEAP8[$4 + 11 | 0] & 1;
   break label$1;
  }
  if (HEAP8[HEAP32[$4 + 28 >> 2] + 8 | 0] & 1) {
   HEAP8[$4 + 27 | 0] = jsvStringCharToLower(HEAP8[$4 + 27 | 0]);
   HEAP8[$4 + 19 | 0] = jsvStringCharToLower(HEAP8[$4 + 19 | 0]);
  }
  if (HEAP16[HEAP32[$4 + 28 >> 2] + 10 >> 1] != 256) {
   HEAP8[$4 + 10 | 0] = HEAPU16[HEAP32[$4 + 28 >> 2] + 10 >> 1];
   if (HEAP8[HEAP32[$4 + 28 >> 2] + 8 | 0] & 1) {
    HEAP8[$4 + 10 | 0] = jsvStringCharToLower(HEAP8[$4 + 10 | 0]);
   }
   HEAP16[HEAP32[$4 + 28 >> 2] + 10 >> 1] = 256;
   $0 = $4;
   $1 = 0;
   label$31 : {
    if (HEAP8[$4 + 27 | 0] < HEAP8[$4 + 10 | 0]) {
     break label$31;
    }
    $1 = 0;
    if (HEAP8[$4 + 27 | 0] > HEAP8[$4 + 19 | 0]) {
     break label$31;
    }
    $1 = HEAP8[$4 + 10 | 0] < HEAP8[$4 + 19 | 0];
   }
   HEAP8[$0 + 47 | 0] = $1;
   break label$1;
  }
  HEAP8[$4 + 47 | 0] = HEAP8[$4 + 19 | 0] == HEAP8[$4 + 27 | 0];
 }
 global$0 = $4 + 48 | 0;
 return HEAP8[$4 + 47 | 0] & 1;
}
function tflite__reference_ops__AveragePool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = Math_fround(0);
 $5 = global$0 - 144 | 0;
 global$0 = $5;
 HEAP32[$5 + 140 >> 2] = $0;
 HEAP32[$5 + 136 >> 2] = $1;
 HEAP32[$5 + 132 >> 2] = $2;
 HEAP32[$5 + 128 >> 2] = $3;
 HEAP32[$5 + 124 >> 2] = $4;
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$5 + 136 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$5 + 128 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 HEAP32[$5 + 120 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 0, HEAP32[$5 + 128 >> 2], 0);
 HEAP32[$5 + 116 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 3, HEAP32[$5 + 128 >> 2], 3);
 HEAP32[$5 + 112 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 1);
 HEAP32[$5 + 108 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 2);
 HEAP32[$5 + 104 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 1);
 HEAP32[$5 + 100 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 2);
 HEAP32[$5 + 96 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 12 >> 2];
 HEAP32[$5 + 92 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 16 >> 2];
 HEAP32[$5 + 88 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 88 >> 2] < HEAP32[$5 + 120 >> 2]) {
   HEAP32[$5 + 84 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 84 >> 2] < HEAP32[$5 + 104 >> 2]) {
     HEAP32[$5 + 80 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 80 >> 2] < HEAP32[$5 + 100 >> 2]) {
       HEAP32[$5 + 76 >> 2] = 0;
       while (1) {
        if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 116 >> 2]) {
         $0 = $5 + 28 | 0;
         $1 = $5 + 40 | 0;
         $2 = $5 + 36 | 0;
         $3 = $5 + 48 | 0;
         HEAP32[$5 + 72 >> 2] = Math_imul(HEAP32[$5 + 80 >> 2], HEAP32[$5 + 92 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 2 >> 1];
         HEAP32[$5 + 68 >> 2] = Math_imul(HEAP32[$5 + 84 >> 2], HEAP32[$5 + 96 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 4 >> 1];
         HEAP32[$5 + 60 >> 2] = 0;
         HEAP32[$5 + 56 >> 2] = 0 - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 64 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 60 | 0, $5 + 56 | 0) >> 2];
         $4 = HEAP32[$5 + 140 >> 2] + 24 | 0;
         HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 108 >> 2] - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 52 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($4, $3) >> 2];
         HEAP32[$5 + 40 >> 2] = 0;
         HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 44 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($1, $2) >> 2];
         $1 = HEAP32[$5 + 140 >> 2] + 20 | 0;
         HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 112 >> 2] - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 32 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($1, $0) >> 2];
         HEAPF32[$5 + 24 >> 2] = 0;
         HEAPF32[$5 + 20 >> 2] = 0;
         HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 44 >> 2];
         while (1) {
          if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 32 >> 2]) {
           HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 64 >> 2];
           while (1) {
            if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 52 >> 2]) {
             HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 12 >> 2];
             HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 16 >> 2];
             $0 = HEAP32[$5 + 132 >> 2];
             $1 = tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 4 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 76 >> 2]);
             HEAPF32[$5 + 24 >> 2] = HEAPF32[$5 + 24 >> 2] + HEAPF32[$0 + ($1 << 2) >> 2];
             HEAPF32[$5 + 20 >> 2] = HEAPF32[$5 + 20 >> 2] + Math_fround(1);
             HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAPF32[$5 >> 2] = HEAPF32[$5 + 24 >> 2] / HEAPF32[$5 + 20 >> 2];
         $6 = tflite__ActivationFunctionWithMinMax_28float_2c_20float_2c_20float_29(HEAPF32[$5 >> 2], HEAPF32[HEAP32[$5 + 140 >> 2] + 36 >> 2], HEAPF32[HEAP32[$5 + 140 >> 2] + 40 >> 2]);
         HEAPF32[HEAP32[$5 + 124 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 128 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2]) << 2) >> 2] = $6;
         HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 80 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 84 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 + 144 | 0;
}
function jsvIterateBufferCallback($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 208 | 0;
 global$0 = $3;
 HEAP32[$3 + 200 >> 2] = $0;
 HEAP32[$3 + 196 >> 2] = $1;
 HEAP32[$3 + 192 >> 2] = $2;
 HEAP8[$3 + 191 | 0] = 1;
 label$1 : {
  label$2 : {
   if (jsvIsNumeric(HEAP32[$3 + 200 >> 2]) & 1) {
    $0 = $3 + 190 | 0;
    HEAP8[$3 + 190 | 0] = jsvGetInteger(HEAP32[$3 + 200 >> 2]);
    FUNCTION_TABLE[HEAP32[$3 + 196 >> 2]]($0, 1, HEAP32[$3 + 192 >> 2]);
    break label$2;
   }
   label$4 : {
    if (jsvIsObject(HEAP32[$3 + 200 >> 2]) & 1) {
     HEAP32[$3 + 184 >> 2] = jsvObjectGetChild(HEAP32[$3 + 200 >> 2], 3403, 0);
     if (jsvIsFunction(HEAP32[$3 + 184 >> 2]) & 1) {
      HEAP32[$3 + 180 >> 2] = jspExecuteFunction(HEAP32[$3 + 184 >> 2], 0, 0, 0);
      jsvUnLock(HEAP32[$3 + 184 >> 2]);
      if (HEAP32[$3 + 180 >> 2]) {
       HEAP8[$3 + 179 | 0] = jsvIterateBufferCallback(HEAP32[$3 + 180 >> 2], HEAP32[$3 + 196 >> 2], HEAP32[$3 + 192 >> 2]) & 1;
       jsvUnLock(HEAP32[$3 + 180 >> 2]);
       HEAP8[$3 + 207 | 0] = HEAP8[$3 + 179 | 0] & 1;
       break label$1;
      }
      HEAP8[$3 + 207 | 0] = 1;
      break label$1;
     }
     jsvUnLock(HEAP32[$3 + 184 >> 2]);
     HEAP32[$3 + 172 >> 2] = jsvObjectGetChild(HEAP32[$3 + 200 >> 2], 3412, 0);
     HEAP32[$3 + 168 >> 2] = jsvObjectGetChild(HEAP32[$3 + 200 >> 2], 3418, 0);
     label$8 : {
      label$9 : {
       if (!HEAP32[$3 + 172 >> 2] | !HEAP32[$3 + 168 >> 2]) {
        break label$9;
       }
       if (!(jsvIsNumeric(HEAP32[$3 + 172 >> 2]) & 1)) {
        break label$9;
       }
       HEAP32[$3 + 164 >> 2] = jsvGetInteger(HEAP32[$3 + 172 >> 2]);
       while (1) {
        if (HEAP8[$3 + 191 | 0] & 1) {
         $0 = HEAP32[$3 + 164 >> 2];
         HEAP32[$3 + 164 >> 2] = $0 + -1;
         $0 = ($0 | 0) > 0;
        } else {
         $0 = 0;
        }
        if ($0) {
         HEAP8[$3 + 191 | 0] = jsvIterateBufferCallback(HEAP32[$3 + 168 >> 2], HEAP32[$3 + 196 >> 2], HEAP32[$3 + 192 >> 2]) & 1;
         continue;
        }
        break;
       }
       break label$8;
      }
      HEAP32[$3 >> 2] = HEAP32[$3 + 200 >> 2];
      jsExceptionHere(3, 3423, $3);
      HEAP8[$3 + 191 | 0] = 0;
     }
     jsvUnLock2(HEAP32[$3 + 172 >> 2], HEAP32[$3 + 168 >> 2]);
     break label$4;
    }
    label$14 : {
     if (jsvIsString(HEAP32[$3 + 200 >> 2]) & 1) {
      jsvStringIteratorNew($3 + 144 | 0, HEAP32[$3 + 200 >> 2], 0);
      while (1) {
       if (jsvStringIteratorHasChar($3 + 144 | 0) & 1) {
        $0 = HEAPU8[$3 + 191 | 0];
       } else {
        $0 = 0;
       }
       if ($0 & 1) {
        jsvStringIteratorGetPtrAndNext($3 + 144 | 0, $3 + 140 | 0, $3 + 136 | 0);
        FUNCTION_TABLE[HEAP32[$3 + 196 >> 2]](HEAP32[$3 + 140 >> 2], HEAP32[$3 + 136 >> 2], HEAP32[$3 + 192 >> 2]);
        continue;
       }
       break;
      }
      jsvStringIteratorFree($3 + 144 | 0);
      break label$14;
     }
     label$20 : {
      if (jsvIsArrayBuffer(HEAP32[$3 + 200 >> 2]) & 1) {
       jsvArrayBufferIteratorNew($3 + 96 | 0, HEAP32[$3 + 200 >> 2], 0);
       label$22 : {
        if (!(HEAPU16[$3 + 116 >> 1] & 16 | (HEAPU16[$3 + 116 >> 1] & 15) != 1)) {
         HEAP32[$3 + 92 >> 2] = $3 + 96;
         HEAP32[$3 + 88 >> 2] = jsvGetArrayBufferLength(HEAP32[$3 + 200 >> 2]);
         while (1) {
          if (HEAP32[$3 + 88 >> 2]) {
           jsvStringIteratorGetPtrAndNext(HEAP32[$3 + 92 >> 2], $3 + 84 | 0, $3 + 80 | 0);
           if (HEAPU32[$3 + 80 >> 2] > HEAPU32[$3 + 88 >> 2]) {
            HEAP32[$3 + 80 >> 2] = HEAP32[$3 + 88 >> 2];
           }
           FUNCTION_TABLE[HEAP32[$3 + 196 >> 2]](HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2], HEAP32[$3 + 192 >> 2]);
           HEAP32[$3 + 88 >> 2] = HEAP32[$3 + 88 >> 2] - HEAP32[$3 + 80 >> 2];
           continue;
          }
          break;
         }
         break label$22;
        }
        while (1) {
         if (jsvArrayBufferIteratorHasElement($3 + 96 | 0) & 1) {
          $0 = $3 + 79 | 0;
          $1 = $3 + 96 | 0;
          HEAP8[$3 + 79 | 0] = jsvArrayBufferIteratorGetIntegerValue($1);
          FUNCTION_TABLE[HEAP32[$3 + 196 >> 2]]($0, 1, HEAP32[$3 + 192 >> 2]);
          jsvArrayBufferIteratorNext($1);
          continue;
         }
         break;
        }
       }
       jsvArrayBufferIteratorFree($3 + 96 | 0);
       break label$20;
      }
      label$29 : {
       if (jsvIsIterable(HEAP32[$3 + 200 >> 2]) & 1) {
        jsvIteratorNew($3 + 32 | 0, HEAP32[$3 + 200 >> 2], 1);
        while (1) {
         if (jsvIteratorHasElement($3 + 32 | 0) & 1) {
          $0 = HEAPU8[$3 + 191 | 0];
         } else {
          $0 = 0;
         }
         if ($0 & 1) {
          $0 = $3 + 32 | 0;
          HEAP32[$3 + 28 >> 2] = jsvIteratorGetValue($0);
          HEAP8[$3 + 191 | 0] = jsvIterateBufferCallback(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 196 >> 2], HEAP32[$3 + 192 >> 2]) & 1;
          jsvUnLock(HEAP32[$3 + 28 >> 2]);
          jsvIteratorNext($0);
          continue;
         }
         break;
        }
        jsvIteratorFree($3 + 32 | 0);
        break label$29;
       }
       HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 200 >> 2];
       jsExceptionHere(3, 3523, $3 + 16 | 0);
       HEAP8[$3 + 191 | 0] = 0;
      }
     }
    }
   }
  }
  HEAP8[$3 + 207 | 0] = HEAP8[$3 + 191 | 0] & 1;
 }
 global$0 = $3 + 208 | 0;
 return HEAP8[$3 + 207 | 0] & 1;
}
function tflite__ops__micro__conv__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 688 | 0;
 global$0 = $2;
 HEAP32[$2 + 680 >> 2] = $0;
 HEAP32[$2 + 676 >> 2] = $1;
 HEAP32[$2 + 672 >> 2] = HEAP32[HEAP32[$2 + 676 >> 2] + 20 >> 2];
 HEAP32[$2 + 668 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 680 >> 2], HEAP32[$2 + 676 >> 2]);
 HEAP32[$2 + 664 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 680 >> 2], HEAP32[$2 + 676 >> 2], 0);
 HEAP32[$2 + 660 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 680 >> 2], HEAP32[$2 + 676 >> 2], 1);
 HEAP32[$2 + 656 >> 2] = tflite__GetOptionalInputTensor_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 680 >> 2], HEAP32[$2 + 676 >> 2], 2);
 HEAP32[$2 + 652 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 664 >> 2] + 8 >> 2] + 12 >> 2];
 HEAP32[$2 + 648 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 664 >> 2] + 8 >> 2] + 8 >> 2];
 HEAP32[$2 + 644 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 660 >> 2] + 8 >> 2] + 12 >> 2];
 HEAP32[$2 + 640 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 660 >> 2] + 8 >> 2] + 8 >> 2];
 HEAP32[$2 + 636 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 668 >> 2] + 8 >> 2] + 12 >> 2];
 HEAP32[$2 + 632 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 668 >> 2] + 8 >> 2] + 8 >> 2];
 label$1 : {
  if (HEAP32[HEAP32[$2 + 664 >> 2] >> 2] != 1) {
   if (HEAP32[HEAP32[$2 + 660 >> 2] + 48 >> 2] != 1) {
    $0 = HEAP32[HEAP32[$2 + 680 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 680 >> 2];
    $3 = HEAP32[HEAP32[$2 + 660 >> 2] + 48 >> 2];
    HEAP32[$2 + 20 >> 2] = 1;
    HEAP32[$2 + 16 >> 2] = $3;
    HEAP32[$2 + 12 >> 2] = 44046;
    HEAP32[$2 + 8 >> 2] = 44020;
    HEAP32[$2 + 4 >> 2] = 221;
    HEAP32[$2 >> 2] = 43841;
    FUNCTION_TABLE[$0]($1, 43972, $2);
    HEAP32[$2 + 684 >> 2] = 1;
    break label$1;
   }
   HEAP32[$2 + 84 >> 2] = HEAP32[HEAP32[$2 + 660 >> 2] + 52 >> 2];
   if (!HEAP32[$2 + 84 >> 2]) {
    $0 = HEAP32[HEAP32[$2 + 680 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 680 >> 2];
    HEAP32[$2 + 72 >> 2] = 44072;
    HEAP32[$2 + 68 >> 2] = 226;
    HEAP32[$2 + 64 >> 2] = 43841;
    FUNCTION_TABLE[$0]($1, 43818, $2 - -64 | 0);
    HEAP32[$2 + 684 >> 2] = 1;
    break label$1;
   }
   if (!HEAP32[HEAP32[$2 + 84 >> 2] >> 2]) {
    $0 = HEAP32[HEAP32[$2 + 680 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 680 >> 2];
    HEAP32[$2 + 56 >> 2] = 44092;
    HEAP32[$2 + 52 >> 2] = 227;
    HEAP32[$2 + 48 >> 2] = 43841;
    FUNCTION_TABLE[$0]($1, 43818, $2 + 48 | 0);
    HEAP32[$2 + 684 >> 2] = 1;
    break label$1;
   }
  }
  if (tflite__ops__micro__conv__CalculateOpData_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLiteType_2c_20tflite__ops__micro__conv__OpData__29(HEAP32[$2 + 680 >> 2], HEAP32[$2 + 676 >> 2], HEAP32[$2 + 672 >> 2], HEAP32[$2 + 652 >> 2], HEAP32[$2 + 648 >> 2], HEAP32[$2 + 644 >> 2], HEAP32[$2 + 640 >> 2], HEAP32[$2 + 636 >> 2], HEAP32[$2 + 632 >> 2], HEAP32[HEAP32[$2 + 664 >> 2] >> 2], $2 + 88 | 0)) {
   HEAP32[$2 + 684 >> 2] = 1;
   break label$1;
  }
  label$7 : {
   label$8 : {
    $0 = HEAP32[HEAP32[$2 + 664 >> 2] >> 2] + -1 | 0;
    if ($0 >>> 0 > 8) {
     break label$8;
    }
    label$9 : {
     switch ($0 - 1 | 0) {
     default:
      tflite__ops__micro__conv__EvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams__2c_20tflite__ops__micro__conv__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteTensor__2c_20TfLiteTensor__29(HEAP32[$2 + 680 >> 2], HEAP32[$2 + 676 >> 2], HEAP32[$2 + 672 >> 2], $2 + 88 | 0, HEAP32[$2 + 664 >> 2], HEAP32[$2 + 660 >> 2], HEAP32[$2 + 656 >> 2], HEAP32[$2 + 668 >> 2]);
      break label$7;
     case 7:
      tflite__ops__micro__conv__EvalQuantizedPerChannel_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams__2c_20tflite__ops__micro__conv__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteTensor__29(HEAP32[$2 + 680 >> 2], HEAP32[$2 + 676 >> 2], HEAP32[$2 + 672 >> 2], $2 + 88 | 0, HEAP32[$2 + 664 >> 2], HEAP32[$2 + 660 >> 2], HEAP32[$2 + 656 >> 2], HEAP32[$2 + 668 >> 2]);
      break label$7;
     case 0:
     case 2:
     case 3:
     case 4:
     case 5:
     case 6:
      break label$8;
     case 1:
      break label$9;
     }
    }
    tflite__ops__micro__conv__EvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams__2c_20tflite__ops__micro__conv__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteTensor__2c_20TfLiteTensor__29(HEAP32[$2 + 680 >> 2], HEAP32[$2 + 676 >> 2], HEAP32[$2 + 672 >> 2], $2 + 88 | 0, HEAP32[$2 + 664 >> 2], HEAP32[$2 + 660 >> 2], HEAP32[$2 + 656 >> 2], HEAP32[$2 + 668 >> 2]);
    break label$7;
   }
   $0 = HEAP32[HEAP32[$2 + 680 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 680 >> 2];
   $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 664 >> 2] >> 2]);
   HEAP32[$2 + 36 >> 2] = HEAP32[HEAP32[$2 + 664 >> 2] >> 2];
   HEAP32[$2 + 32 >> 2] = $3;
   FUNCTION_TABLE[$0]($1, 44119, $2 + 32 | 0);
   HEAP32[$2 + 684 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 684 >> 2] = 0;
 }
 global$0 = $2 + 688 | 0;
 return HEAP32[$2 + 684 >> 2];
}
function tflite__reference_ops__MaxPool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = Math_fround(0);
 $5 = global$0 - 144 | 0;
 global$0 = $5;
 HEAP32[$5 + 140 >> 2] = $0;
 HEAP32[$5 + 136 >> 2] = $1;
 HEAP32[$5 + 132 >> 2] = $2;
 HEAP32[$5 + 128 >> 2] = $3;
 HEAP32[$5 + 124 >> 2] = $4;
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$5 + 136 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$5 + 128 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 HEAP32[$5 + 120 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 0, HEAP32[$5 + 128 >> 2], 0);
 HEAP32[$5 + 116 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 3, HEAP32[$5 + 128 >> 2], 3);
 HEAP32[$5 + 112 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 1);
 HEAP32[$5 + 108 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 2);
 HEAP32[$5 + 104 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 1);
 HEAP32[$5 + 100 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 2);
 HEAP32[$5 + 96 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 12 >> 2];
 HEAP32[$5 + 92 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 16 >> 2];
 HEAP32[$5 + 88 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 88 >> 2] < HEAP32[$5 + 120 >> 2]) {
   HEAP32[$5 + 84 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 84 >> 2] < HEAP32[$5 + 104 >> 2]) {
     HEAP32[$5 + 80 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 80 >> 2] < HEAP32[$5 + 100 >> 2]) {
       HEAP32[$5 + 76 >> 2] = 0;
       while (1) {
        if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 116 >> 2]) {
         $0 = $5 + 28 | 0;
         $1 = $5 + 40 | 0;
         $2 = $5 + 36 | 0;
         $3 = $5 + 48 | 0;
         HEAP32[$5 + 72 >> 2] = Math_imul(HEAP32[$5 + 80 >> 2], HEAP32[$5 + 92 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 2 >> 1];
         HEAP32[$5 + 68 >> 2] = Math_imul(HEAP32[$5 + 84 >> 2], HEAP32[$5 + 96 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 4 >> 1];
         HEAP32[$5 + 60 >> 2] = 0;
         HEAP32[$5 + 56 >> 2] = 0 - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 64 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 60 | 0, $5 + 56 | 0) >> 2];
         $4 = HEAP32[$5 + 140 >> 2] + 24 | 0;
         HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 108 >> 2] - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 52 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($4, $3) >> 2];
         HEAP32[$5 + 40 >> 2] = 0;
         HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 44 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($1, $2) >> 2];
         $1 = HEAP32[$5 + 140 >> 2] + 20 | 0;
         HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 112 >> 2] - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 32 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($1, $0) >> 2];
         HEAPF32[$5 + 24 >> 2] = -3.4028234663852886e+38;
         HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 44 >> 2];
         while (1) {
          if (HEAP32[$5 + 20 >> 2] < HEAP32[$5 + 32 >> 2]) {
           HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 64 >> 2];
           while (1) {
            if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 52 >> 2]) {
             HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 16 >> 2];
             HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 20 >> 2];
             HEAPF32[$5 + 24 >> 2] = HEAPF32[float_20const__20std____2__max_float__28float_20const__2c_20float_20const__29($5 + 24 | 0, HEAP32[$5 + 132 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 76 >> 2]) << 2) | 0) >> 2];
             HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
           continue;
          }
          break;
         }
         $6 = tflite__ActivationFunctionWithMinMax_28float_2c_20float_2c_20float_29(HEAPF32[$5 + 24 >> 2], HEAPF32[HEAP32[$5 + 140 >> 2] + 36 >> 2], HEAPF32[HEAP32[$5 + 140 >> 2] + 40 >> 2]);
         HEAPF32[HEAP32[$5 + 124 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 128 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2]) << 2) >> 2] = $6;
         HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 80 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 84 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 + 144 | 0;
}
function graphicsDrawChar6x8($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 48 | 0;
 global$0 = $6;
 HEAP32[$6 + 44 >> 2] = $0;
 HEAP32[$6 + 40 >> 2] = $1;
 HEAP32[$6 + 36 >> 2] = $2;
 HEAP8[$6 + 35 | 0] = $3;
 HEAP16[$6 + 32 >> 1] = $4;
 HEAP8[$6 + 31 | 0] = $5;
 HEAP32[$6 + 24 >> 2] = HEAPU8[$6 + 35 | 0] - 33;
 label$1 : {
  if (!(HEAP32[$6 + 24 >> 2] < 223 ? HEAP32[$6 + 24 >> 2] >= 0 : 0)) {
   if (HEAP8[$6 + 31 | 0] & 1) {
    $0 = HEAP32[$6 + 44 >> 2];
    graphicsFillRect(HEAP32[$6 + 44 >> 2], HEAP32[$6 + 40 >> 2], HEAP32[$6 + 36 >> 2], HEAP32[$6 + 40 >> 2] + Math_imul(HEAPU16[$6 + 32 >> 1], 5) | 0, HEAP32[$6 + 36 >> 2] + Math_imul(HEAPU16[$6 + 32 >> 1], 7) | 0, HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
   }
   break label$1;
  }
  HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 24 >> 2] % 6;
  HEAP32[$6 + 24 >> 2] = HEAP32[$6 + 24 >> 2] / 6 << 3;
  HEAP32[$6 + 12 >> 2] = HEAPU16[$6 + 32 >> 1] - 1;
  HEAP32[$6 + 16 >> 2] = 0;
  while (1) {
   if (HEAP32[$6 + 16 >> 2] >= 8) {
    break label$1;
   }
   HEAP32[$6 + 8 >> 2] = HEAP32[(HEAP32[$6 + 24 >> 2] + HEAP32[$6 + 16 >> 2] << 2) + 24256 >> 2] >>> Math_imul(HEAP32[$6 + 20 >> 2], 5);
   HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 36 >> 2] + Math_imul(HEAP32[$6 + 16 >> 2], HEAPU16[$6 + 32 >> 1]);
   if (!(HEAP32[$6 + 8 >> 2] & 16 ? 0 : !(HEAP8[$6 + 31 | 0] & 1))) {
    $1 = HEAP32[$6 + 44 >> 2];
    $2 = HEAP32[$6 + 40 >> 2];
    $3 = HEAP32[$6 + 4 >> 2];
    $4 = HEAP32[$6 + 40 >> 2] + HEAP32[$6 + 12 >> 2] | 0;
    $5 = HEAP32[$6 + 4 >> 2] + HEAP32[$6 + 12 >> 2] | 0;
    label$8 : {
     if (HEAP32[$6 + 8 >> 2] & 16) {
      $0 = HEAP32[$6 + 44 >> 2];
      $0 = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
      break label$8;
     }
     $0 = HEAP32[$6 + 44 >> 2];
     $0 = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
    }
    graphicsFillRect($1, $2, $3, $4, $5, $0);
   }
   if (!(HEAP32[$6 + 8 >> 2] & 8 ? 0 : !(HEAP8[$6 + 31 | 0] & 1))) {
    $1 = HEAP32[$6 + 44 >> 2];
    $2 = HEAP32[$6 + 40 >> 2] + HEAPU16[$6 + 32 >> 1] | 0;
    $3 = HEAP32[$6 + 4 >> 2];
    $4 = HEAPU16[$6 + 32 >> 1] + (HEAP32[$6 + 40 >> 2] + HEAP32[$6 + 12 >> 2] | 0) | 0;
    $5 = HEAP32[$6 + 4 >> 2] + HEAP32[$6 + 12 >> 2] | 0;
    label$12 : {
     if (HEAP32[$6 + 8 >> 2] & 8) {
      $0 = HEAP32[$6 + 44 >> 2];
      $0 = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
      break label$12;
     }
     $0 = HEAP32[$6 + 44 >> 2];
     $0 = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
    }
    graphicsFillRect($1, $2, $3, $4, $5, $0);
   }
   if (!(HEAP32[$6 + 8 >> 2] & 4 ? 0 : !(HEAP8[$6 + 31 | 0] & 1))) {
    $1 = HEAP32[$6 + 44 >> 2];
    $2 = HEAP32[$6 + 40 >> 2] + (HEAPU16[$6 + 32 >> 1] << 1) | 0;
    $3 = HEAP32[$6 + 4 >> 2];
    $4 = (HEAP32[$6 + 40 >> 2] + HEAP32[$6 + 12 >> 2] | 0) + (HEAPU16[$6 + 32 >> 1] << 1) | 0;
    $5 = HEAP32[$6 + 4 >> 2] + HEAP32[$6 + 12 >> 2] | 0;
    label$16 : {
     if (HEAP32[$6 + 8 >> 2] & 4) {
      $0 = HEAP32[$6 + 44 >> 2];
      $0 = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
      break label$16;
     }
     $0 = HEAP32[$6 + 44 >> 2];
     $0 = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
    }
    graphicsFillRect($1, $2, $3, $4, $5, $0);
   }
   if (!(HEAP32[$6 + 8 >> 2] & 2 ? 0 : !(HEAP8[$6 + 31 | 0] & 1))) {
    $1 = HEAP32[$6 + 44 >> 2];
    $2 = HEAP32[$6 + 40 >> 2] + Math_imul(HEAPU16[$6 + 32 >> 1], 3) | 0;
    $3 = HEAP32[$6 + 4 >> 2];
    $4 = (HEAP32[$6 + 40 >> 2] + HEAP32[$6 + 12 >> 2] | 0) + Math_imul(HEAPU16[$6 + 32 >> 1], 3) | 0;
    $5 = HEAP32[$6 + 4 >> 2] + HEAP32[$6 + 12 >> 2] | 0;
    label$20 : {
     if (HEAP32[$6 + 8 >> 2] & 2) {
      $0 = HEAP32[$6 + 44 >> 2];
      $0 = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
      break label$20;
     }
     $0 = HEAP32[$6 + 44 >> 2];
     $0 = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
    }
    graphicsFillRect($1, $2, $3, $4, $5, $0);
   }
   if (!(HEAP32[$6 + 8 >> 2] & 1 ? 0 : !(HEAP8[$6 + 31 | 0] & 1))) {
    $1 = HEAP32[$6 + 44 >> 2];
    $2 = HEAP32[$6 + 40 >> 2] + (HEAPU16[$6 + 32 >> 1] << 2) | 0;
    $3 = HEAP32[$6 + 4 >> 2];
    $4 = (HEAP32[$6 + 40 >> 2] + HEAP32[$6 + 12 >> 2] | 0) + (HEAPU16[$6 + 32 >> 1] << 2) | 0;
    $5 = HEAP32[$6 + 4 >> 2] + HEAP32[$6 + 12 >> 2] | 0;
    label$24 : {
     if (HEAP32[$6 + 8 >> 2] & 1) {
      $0 = HEAP32[$6 + 44 >> 2];
      $0 = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
      break label$24;
     }
     $0 = HEAP32[$6 + 44 >> 2];
     $0 = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
    }
    graphicsFillRect($1, $2, $3, $4, $5, $0);
   }
   HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 16 >> 2] + 1;
   continue;
  }
 }
 global$0 = $6 + 48 | 0;
}
function jswrap_storagefile_write($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 272 | 0;
 global$0 = $2;
 HEAP32[$2 + 268 >> 2] = $0;
 HEAP32[$2 + 264 >> 2] = $1;
 HEAP8[$2 + 263 | 0] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$2 + 268 >> 2], 37020, 0));
 label$1 : {
  if (!(HEAP8[$2 + 263 | 0] == 119 | HEAP8[$2 + 263 | 0] == 97)) {
   jsExceptionHere(1, 37049, 0);
   break label$1;
  }
  HEAP32[$2 + 256 >> 2] = jsvAsString(HEAP32[$2 + 264 >> 2]);
  if (!HEAP32[$2 + 256 >> 2]) {
   break label$1;
  }
  HEAP32[$2 + 252 >> 2] = jsvGetStringLength(HEAP32[$2 + 256 >> 2]);
  if (!HEAP32[$2 + 252 >> 2]) {
   break label$1;
  }
  $0 = $2 + 216 | 0;
  HEAP32[$2 + 248 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$2 + 268 >> 2], 37008, 0));
  HEAP32[$2 + 244 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$2 + 268 >> 2], 37002, 0));
  jsfNameFromVarAndUnLock($0, jsvObjectGetChild(HEAP32[$2 + 268 >> 2], 36997, 0));
  HEAP32[$2 + 212 >> 2] = 27;
  while (1) {
   if (HEAP32[$2 + 212 >> 2] ? !HEAP8[(HEAP32[$2 + 212 >> 2] + $2 | 0) + 215 | 0] : 0) {
    HEAP32[$2 + 212 >> 2] = HEAP32[$2 + 212 >> 2] + -1;
    continue;
   }
   break;
  }
  HEAP8[HEAP32[$2 + 212 >> 2] + ($2 + 216 | 0) | 0] = HEAP32[$2 + 244 >> 2];
  HEAP32[$2 + 208 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$2 + 268 >> 2], 37015, 0));
  HEAP32[$2 + 204 >> 2] = 992 - HEAP32[$2 + 248 >> 2];
  if (!HEAP32[$2 + 208 >> 2]) {
   $0 = HEAP32[$2 + 256 >> 2];
   HEAP32[$2 + 120 >> 2] = HEAP32[$2 + 240 >> 2];
   $1 = HEAP32[$2 + 236 >> 2];
   HEAP32[$2 + 112 >> 2] = HEAP32[$2 + 232 >> 2];
   HEAP32[$2 + 116 >> 2] = $1;
   $1 = HEAP32[$2 + 228 >> 2];
   HEAP32[$2 + 104 >> 2] = HEAP32[$2 + 224 >> 2];
   HEAP32[$2 + 108 >> 2] = $1;
   $1 = HEAP32[$2 + 220 >> 2];
   HEAP32[$2 + 96 >> 2] = HEAP32[$2 + 216 >> 2];
   HEAP32[$2 + 100 >> 2] = $1;
   if (jsfWriteFile($2 + 96 | 0, $0, 64, 0, 992) & 1) {
    HEAP32[$2 + 88 >> 2] = HEAP32[$2 + 240 >> 2];
    $0 = HEAP32[$2 + 236 >> 2];
    HEAP32[$2 + 80 >> 2] = HEAP32[$2 + 232 >> 2];
    HEAP32[$2 + 84 >> 2] = $0;
    $0 = HEAP32[$2 + 228 >> 2];
    HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 224 >> 2];
    HEAP32[$2 + 76 >> 2] = $0;
    $0 = HEAP32[$2 + 220 >> 2];
    HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 216 >> 2];
    HEAP32[$2 + 68 >> 2] = $0;
    HEAP32[$2 + 208 >> 2] = jsfFindFile($2 - -64 | 0, $2 + 168 | 0);
    HEAP32[$2 + 248 >> 2] = HEAP32[$2 + 252 >> 2];
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 268 >> 2], 37008, jsvNewFromInteger(HEAP32[$2 + 248 >> 2]));
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 268 >> 2], 37015, jsvNewFromInteger(HEAP32[$2 + 208 >> 2]));
   }
   jsvUnLock(HEAP32[$2 + 256 >> 2]);
   break label$1;
  }
  label$9 : {
   if (HEAP32[$2 + 252 >> 2] < HEAP32[$2 + 204 >> 2]) {
    jswrap_flash_write(HEAP32[$2 + 256 >> 2], HEAP32[$2 + 208 >> 2] + HEAP32[$2 + 248 >> 2] | 0);
    HEAP32[$2 + 248 >> 2] = HEAP32[$2 + 252 >> 2] + HEAP32[$2 + 248 >> 2];
    break label$9;
   }
   HEAP32[$2 + 164 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 256 >> 2], 0, HEAP32[$2 + 204 >> 2]);
   jswrap_flash_write(HEAP32[$2 + 164 >> 2], HEAP32[$2 + 208 >> 2] + HEAP32[$2 + 248 >> 2] | 0);
   jsvUnLock(HEAP32[$2 + 164 >> 2]);
   if (HEAP32[$2 + 244 >> 2] == 255) {
    jsExceptionHere(1, 37074, 0);
    jsvUnLock(HEAP32[$2 + 256 >> 2]);
    break label$1;
   }
   HEAP32[$2 + 244 >> 2] = HEAP32[$2 + 244 >> 2] + 1;
   HEAP8[HEAP32[$2 + 212 >> 2] + ($2 + 216 | 0) | 0] = HEAP32[$2 + 244 >> 2];
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 268 >> 2], 37002, jsvNewFromInteger(HEAP32[$2 + 244 >> 2]));
   HEAP32[$2 + 164 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 256 >> 2], HEAP32[$2 + 204 >> 2], 2147483647);
   $0 = HEAP32[$2 + 164 >> 2];
   HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 240 >> 2];
   $1 = HEAP32[$2 + 236 >> 2];
   HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 232 >> 2];
   HEAP32[$2 + 52 >> 2] = $1;
   $1 = HEAP32[$2 + 228 >> 2];
   HEAP32[$2 + 40 >> 2] = HEAP32[$2 + 224 >> 2];
   HEAP32[$2 + 44 >> 2] = $1;
   $1 = HEAP32[$2 + 220 >> 2];
   HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 216 >> 2];
   HEAP32[$2 + 36 >> 2] = $1;
   label$12 : {
    if (jsfWriteFile($2 + 32 | 0, $0, 64, 0, 992) & 1) {
     HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 240 >> 2];
     $0 = HEAP32[$2 + 236 >> 2];
     HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 232 >> 2];
     HEAP32[$2 + 20 >> 2] = $0;
     $0 = HEAP32[$2 + 228 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 224 >> 2];
     HEAP32[$2 + 12 >> 2] = $0;
     $0 = HEAP32[$2 + 220 >> 2];
     HEAP32[$2 >> 2] = HEAP32[$2 + 216 >> 2];
     HEAP32[$2 + 4 >> 2] = $0;
     HEAP32[$2 + 208 >> 2] = jsfFindFile($2, $2 + 128 | 0);
     HEAP32[$2 + 248 >> 2] = HEAP32[$2 + 252 >> 2];
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 268 >> 2], 37008, jsvNewFromInteger(HEAP32[$2 + 248 >> 2]));
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 268 >> 2], 37015, jsvNewFromInteger(HEAP32[$2 + 208 >> 2]));
     break label$12;
    }
    jsvUnLock(HEAP32[$2 + 256 >> 2]);
    break label$1;
   }
   HEAP32[$2 + 248 >> 2] = jsvGetStringLength(HEAP32[$2 + 164 >> 2]);
   jsvUnLock(HEAP32[$2 + 164 >> 2]);
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 268 >> 2], 37008, jsvNewFromInteger(HEAP32[$2 + 248 >> 2]));
  jsvUnLock(HEAP32[$2 + 256 >> 2]);
 }
 global$0 = $2 + 272 | 0;
}
function nmea_decode() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = global$0 - 112 | 0;
 global$0 = $0;
 HEAP32[$0 + 104 >> 2] = 251352;
 HEAP32[$0 + 100 >> 2] = 251424;
 $1 = $0 + 16 | 0;
 strcpy($1, HEAP32[$0 + 100 >> 2]);
 HEAP32[$0 + 12 >> 2] = $1;
 label$1 : {
  if (!(HEAP8[HEAP32[$0 + 12 >> 2] + 1 | 0] == 71 ? HEAP8[HEAP32[$0 + 12 >> 2]] == 36 : 0)) {
   HEAP8[$0 + 111 | 0] = 0;
   break label$1;
  }
  if (!(HEAP8[HEAP32[$0 + 12 >> 2] + 3 | 0] != 82 | HEAP8[HEAP32[$0 + 12 >> 2] + 4 | 0] != 77 | HEAP8[HEAP32[$0 + 12 >> 2] + 5 | 0] != 67)) {
   HEAP32[$0 + 12 >> 2] = nmea_next_comma(HEAP32[$0 + 12 >> 2]) + 1;
   HEAP32[$0 + 8 >> 2] = nmea_next_comma(HEAP32[$0 + 12 >> 2]);
   $1 = nmea_decode_2(HEAP32[$0 + 12 >> 2]);
   HEAP32[HEAP32[$0 + 104 >> 2] + 40 >> 2] = $1 & 255;
   $1 = nmea_decode_2(HEAP32[$0 + 12 >> 2] + 2 | 0);
   HEAP32[HEAP32[$0 + 104 >> 2] + 44 >> 2] = $1 & 255;
   $1 = nmea_decode_2(HEAP32[$0 + 12 >> 2] + 4 | 0);
   HEAP32[HEAP32[$0 + 104 >> 2] + 48 >> 2] = $1 & 255;
   $1 = nmea_decode_2(HEAP32[$0 + 12 >> 2] + 7 | 0);
   HEAP32[HEAP32[$0 + 104 >> 2] + 52 >> 2] = $1 & 255;
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   HEAP32[$0 + 8 >> 2] = nmea_next_comma(HEAP32[$0 + 12 >> 2]);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   HEAP32[$0 + 8 >> 2] = nmea_next_comma(HEAP32[$0 + 12 >> 2]);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   HEAP32[$0 + 8 >> 2] = nmea_next_comma(HEAP32[$0 + 12 >> 2]);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   HEAP32[$0 + 8 >> 2] = nmea_next_comma(HEAP32[$0 + 12 >> 2]);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   HEAP32[$0 + 8 >> 2] = nmea_next_comma(HEAP32[$0 + 12 >> 2]);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   HEAP32[$0 + 8 >> 2] = nmea_next_comma(HEAP32[$0 + 12 >> 2]);
   $2 = nmea_decode_float(HEAP32[$0 + 12 >> 2], HEAP32[$0 + 8 >> 2]) * 1.852;
   HEAPF64[HEAP32[$0 + 104 >> 2] + 24 >> 3] = $2;
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   HEAP32[$0 + 8 >> 2] = nmea_next_comma(HEAP32[$0 + 12 >> 2]);
   $2 = nmea_decode_float(HEAP32[$0 + 12 >> 2], HEAP32[$0 + 8 >> 2]);
   HEAPF64[HEAP32[$0 + 104 >> 2] + 32 >> 3] = $2;
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   HEAP32[$0 + 8 >> 2] = nmea_next_comma(HEAP32[$0 + 12 >> 2]);
   label$5 : {
    if (HEAP8[HEAP32[$0 + 12 >> 2]] == 44) {
     HEAP8[HEAP32[$0 + 104 >> 2] + 56 | 0] = 0;
     HEAP8[HEAP32[$0 + 104 >> 2] + 57 | 0] = 0;
     HEAP8[HEAP32[$0 + 104 >> 2] + 58 | 0] = 0;
     break label$5;
    }
    $1 = nmea_decode_2(HEAP32[$0 + 12 >> 2]);
    HEAP8[HEAP32[$0 + 104 >> 2] + 56 | 0] = $1;
    $1 = nmea_decode_2(HEAP32[$0 + 12 >> 2] + 2 | 0);
    HEAP8[HEAP32[$0 + 104 >> 2] + 57 | 0] = $1;
    $1 = nmea_decode_2(HEAP32[$0 + 12 >> 2] + 4 | 0);
    HEAP8[HEAP32[$0 + 104 >> 2] + 58 | 0] = $1;
   }
  }
  if (!(HEAP8[HEAP32[$0 + 12 >> 2] + 3 | 0] != 71 | HEAP8[HEAP32[$0 + 12 >> 2] + 4 | 0] != 71 | HEAP8[HEAP32[$0 + 12 >> 2] + 5 | 0] != 65)) {
   HEAP32[$0 + 12 >> 2] = nmea_next_comma(HEAP32[$0 + 12 >> 2]) + 1;
   HEAP32[$0 + 8 >> 2] = nmea_next_comma(HEAP32[$0 + 12 >> 2]);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   HEAP32[$0 + 8 >> 2] = nmea_next_comma(HEAP32[$0 + 12 >> 2]);
   $2 = nmea_decode_latlon(HEAP32[$0 + 12 >> 2], HEAP32[$0 + 8 >> 2]);
   HEAPF64[HEAP32[$0 + 104 >> 2] >> 3] = $2;
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   HEAP32[$0 + 8 >> 2] = nmea_next_comma(HEAP32[$0 + 12 >> 2]);
   if (HEAP8[HEAP32[$0 + 12 >> 2]] == 83) {
    HEAPF64[HEAP32[$0 + 104 >> 2] >> 3] = -HEAPF64[HEAP32[$0 + 104 >> 2] >> 3];
   }
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   HEAP32[$0 + 8 >> 2] = nmea_next_comma(HEAP32[$0 + 12 >> 2]);
   $2 = nmea_decode_latlon(HEAP32[$0 + 12 >> 2], HEAP32[$0 + 8 >> 2]);
   HEAPF64[HEAP32[$0 + 104 >> 2] + 8 >> 3] = $2;
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   HEAP32[$0 + 8 >> 2] = nmea_next_comma(HEAP32[$0 + 12 >> 2]);
   if (HEAP8[HEAP32[$0 + 12 >> 2]] == 87) {
    HEAPF64[HEAP32[$0 + 104 >> 2] + 8 >> 3] = -HEAPF64[HEAP32[$0 + 104 >> 2] + 8 >> 3];
   }
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   HEAP32[$0 + 8 >> 2] = nmea_next_comma(HEAP32[$0 + 12 >> 2]);
   $1 = nmea_decode_1(HEAP32[$0 + 12 >> 2]);
   HEAP8[HEAP32[$0 + 104 >> 2] + 59 | 0] = $1;
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   HEAP32[$0 + 8 >> 2] = nmea_next_comma(HEAP32[$0 + 12 >> 2]);
   $1 = nmea_decode_2(HEAP32[$0 + 12 >> 2]);
   HEAP8[HEAP32[$0 + 104 >> 2] + 60 | 0] = $1;
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   HEAP32[$0 + 8 >> 2] = nmea_next_comma(HEAP32[$0 + 12 >> 2]);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   HEAP32[$0 + 8 >> 2] = nmea_next_comma(HEAP32[$0 + 12 >> 2]);
   $2 = nmea_decode_float(HEAP32[$0 + 12 >> 2], HEAP32[$0 + 8 >> 2]);
   HEAPF64[HEAP32[$0 + 104 >> 2] + 16 >> 3] = $2;
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   HEAP32[$0 + 8 >> 2] = nmea_next_comma(HEAP32[$0 + 12 >> 2]);
  }
  if (!(HEAP8[HEAP32[$0 + 12 >> 2] + 3 | 0] != 71 | HEAP8[HEAP32[$0 + 12 >> 2] + 4 | 0] != 76 | HEAP8[HEAP32[$0 + 12 >> 2] + 5 | 0] != 76)) {
   HEAP8[$0 + 111 | 0] = 1;
   break label$1;
  }
  HEAP8[$0 + 111 | 0] = 0;
 }
 global$0 = $0 + 112 | 0;
 return HEAP8[$0 + 111 | 0] & 1;
}
function __rem_pio2($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $6 = global$0 - 48 | 0;
 global$0 = $6;
 wasm2js_scratch_store_f64(+$0);
 $5 = wasm2js_scratch_load_i32(1) | 0;
 $9 = wasm2js_scratch_load_i32(0) | 0;
 label$1 : {
  label$2 : {
   $4 = $5;
   $5 = $4;
   $7 = $4 & 2147483647;
   label$3 : {
    if ($7 >>> 0 <= 1074752122) {
     if (($5 & 1048575) == 598523) {
      break label$3;
     }
     if ($7 >>> 0 <= 1073928572) {
      if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0 ? $9 >>> 0 < 0 ? 0 : 1 : 0) {
       $0 = $0 + -1.5707963267341256;
       $2 = $0 + -6.077100506506192e-11;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + -6.077100506506192e-11;
       $3 = 1;
       break label$1;
      }
      $0 = $0 + 1.5707963267341256;
      $2 = $0 + 6.077100506506192e-11;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + 6.077100506506192e-11;
      $3 = -1;
      break label$1;
     }
     if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0 ? $9 >>> 0 < 0 ? 0 : 1 : 0) {
      $0 = $0 + -3.1415926534682512;
      $2 = $0 + -1.2154201013012384e-10;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + -1.2154201013012384e-10;
      $3 = 2;
      break label$1;
     }
     $0 = $0 + 3.1415926534682512;
     $2 = $0 + 1.2154201013012384e-10;
     HEAPF64[$1 >> 3] = $2;
     HEAPF64[$1 + 8 >> 3] = $0 - $2 + 1.2154201013012384e-10;
     $3 = -2;
     break label$1;
    }
    if ($7 >>> 0 <= 1075594811) {
     if ($7 >>> 0 <= 1075183036) {
      if (($7 | 0) == 1074977148) {
       break label$3;
      }
      if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0 ? $9 >>> 0 < 0 ? 0 : 1 : 0) {
       $0 = $0 + -4.712388980202377;
       $2 = $0 + -1.8231301519518578e-10;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + -1.8231301519518578e-10;
       $3 = 3;
       break label$1;
      }
      $0 = $0 + 4.712388980202377;
      $2 = $0 + 1.8231301519518578e-10;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + 1.8231301519518578e-10;
      $3 = -3;
      break label$1;
     }
     if (($7 | 0) == 1075388923) {
      break label$3;
     }
     if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0 ? $9 >>> 0 < 0 ? 0 : 1 : 0) {
      $0 = $0 + -6.2831853069365025;
      $2 = $0 + -2.430840202602477e-10;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + -2.430840202602477e-10;
      $3 = 4;
      break label$1;
     }
     $0 = $0 + 6.2831853069365025;
     $2 = $0 + 2.430840202602477e-10;
     HEAPF64[$1 >> 3] = $2;
     HEAPF64[$1 + 8 >> 3] = $0 - $2 + 2.430840202602477e-10;
     $3 = -4;
     break label$1;
    }
    if ($7 >>> 0 > 1094263290) {
     break label$2;
    }
   }
   $10 = $0 * .6366197723675814 + 6755399441055744 + -6755399441055744;
   $2 = $0 + $10 * -1.5707963267341256;
   $8 = $10 * 6.077100506506192e-11;
   $0 = $2 - $8;
   HEAPF64[$1 >> 3] = $0;
   $4 = $7 >>> 20;
   wasm2js_scratch_store_f64(+$0);
   $3 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_load_i32(0) | 0;
   $9 = ($4 - ($3 >>> 20 & 2047) | 0) < 17;
   if (Math_abs($10) < 2147483648) {
    $3 = ~~$10;
   } else {
    $3 = -2147483648;
   }
   label$14 : {
    if ($9) {
     break label$14;
    }
    $8 = $2;
    $0 = $10 * 6.077100506303966e-11;
    $2 = $2 - $0;
    $8 = $10 * 2.0222662487959506e-21 - ($8 - $2 - $0);
    $0 = $2 - $8;
    HEAPF64[$1 >> 3] = $0;
    $5 = $4;
    wasm2js_scratch_store_f64(+$0);
    $4 = wasm2js_scratch_load_i32(1) | 0;
    wasm2js_scratch_load_i32(0) | 0;
    if (($5 - ($4 >>> 20 & 2047) | 0) < 50) {
     break label$14;
    }
    $8 = $2;
    $0 = $10 * 2.0222662487111665e-21;
    $2 = $2 - $0;
    $8 = $10 * 8.4784276603689e-32 - ($8 - $2 - $0);
    $0 = $2 - $8;
    HEAPF64[$1 >> 3] = $0;
   }
   HEAPF64[$1 + 8 >> 3] = $2 - $0 - $8;
   break label$1;
  }
  if ($7 >>> 0 >= 2146435072) {
   $0 = $0 - $0;
   HEAPF64[$1 >> 3] = $0;
   HEAPF64[$1 + 8 >> 3] = $0;
   break label$1;
  }
  $5 = $4 & 1048575 | 1096810496;
  wasm2js_scratch_store_i32(0, $9 | 0);
  wasm2js_scratch_store_i32(1, $5 | 0);
  $0 = +wasm2js_scratch_load_f64();
  while (1) {
   $5 = ($6 + 16 | 0) + ($3 << 3) | 0;
   if (Math_abs($0) < 2147483648) {
    $11 = ~~$0;
   } else {
    $11 = -2147483648;
   }
   $2 = +($11 | 0);
   HEAPF64[$5 >> 3] = $2;
   $0 = ($0 - $2) * 16777216;
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 2) {
    continue;
   }
   break;
  }
  HEAPF64[$6 + 32 >> 3] = $0;
  label$20 : {
   if ($0 != 0) {
    $3 = 2;
    break label$20;
   }
   $5 = 1;
   while (1) {
    $3 = $5;
    $5 = $3 + -1 | 0;
    if (HEAPF64[($6 + 16 | 0) + ($3 << 3) >> 3] == 0) {
     continue;
    }
    break;
   }
  }
  $3 = __rem_pio2_large($6 + 16 | 0, $6, ($7 >>> 20) + -1046 | 0, $3 + 1 | 0, 1);
  $0 = HEAPF64[$6 >> 3];
  if (($4 | 0) < -1 ? 1 : ($4 | 0) <= -1 ? $9 >>> 0 > 4294967295 ? 0 : 1 : 0) {
   HEAPF64[$1 >> 3] = -$0;
   HEAPF64[$1 + 8 >> 3] = -HEAPF64[$6 + 8 >> 3];
   $3 = 0 - $3 | 0;
   break label$1;
  }
  HEAPF64[$1 >> 3] = $0;
  $4 = HEAP32[$6 + 12 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = $4;
 }
 global$0 = $6 + 48 | 0;
 return $3;
}
function jsvIterateCallback($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 192 | 0;
 global$0 = $3;
 HEAP32[$3 + 184 >> 2] = $0;
 HEAP32[$3 + 180 >> 2] = $1;
 HEAP32[$3 + 176 >> 2] = $2;
 HEAP8[$3 + 175 | 0] = 1;
 label$1 : {
  label$2 : {
   if (jsvIsNumeric(HEAP32[$3 + 184 >> 2]) & 1) {
    $0 = HEAP32[$3 + 180 >> 2];
    FUNCTION_TABLE[$0](jsvGetInteger(HEAP32[$3 + 184 >> 2]), HEAP32[$3 + 176 >> 2]);
    break label$2;
   }
   label$4 : {
    if (jsvIsObject(HEAP32[$3 + 184 >> 2]) & 1) {
     HEAP32[$3 + 168 >> 2] = jsvObjectGetChild(HEAP32[$3 + 184 >> 2], 3403, 0);
     if (jsvIsFunction(HEAP32[$3 + 168 >> 2]) & 1) {
      HEAP32[$3 + 164 >> 2] = jspExecuteFunction(HEAP32[$3 + 168 >> 2], 0, 0, 0);
      jsvUnLock(HEAP32[$3 + 168 >> 2]);
      if (HEAP32[$3 + 164 >> 2]) {
       HEAP8[$3 + 163 | 0] = jsvIterateCallback(HEAP32[$3 + 164 >> 2], HEAP32[$3 + 180 >> 2], HEAP32[$3 + 176 >> 2]) & 1;
       jsvUnLock(HEAP32[$3 + 164 >> 2]);
       HEAP8[$3 + 191 | 0] = HEAP8[$3 + 163 | 0] & 1;
       break label$1;
      }
      HEAP8[$3 + 191 | 0] = 1;
      break label$1;
     }
     jsvUnLock(HEAP32[$3 + 168 >> 2]);
     HEAP32[$3 + 156 >> 2] = jsvObjectGetChild(HEAP32[$3 + 184 >> 2], 3412, 0);
     HEAP32[$3 + 152 >> 2] = jsvObjectGetChild(HEAP32[$3 + 184 >> 2], 3418, 0);
     label$8 : {
      label$9 : {
       if (!HEAP32[$3 + 156 >> 2] | !HEAP32[$3 + 152 >> 2]) {
        break label$9;
       }
       if (!(jsvIsNumeric(HEAP32[$3 + 156 >> 2]) & 1)) {
        break label$9;
       }
       HEAP32[$3 + 148 >> 2] = jsvGetInteger(HEAP32[$3 + 156 >> 2]);
       while (1) {
        if (HEAP8[$3 + 175 | 0] & 1) {
         $0 = HEAP32[$3 + 148 >> 2];
         HEAP32[$3 + 148 >> 2] = $0 + -1;
         $0 = ($0 | 0) > 0;
        } else {
         $0 = 0;
        }
        if ($0) {
         HEAP8[$3 + 175 | 0] = jsvIterateCallback(HEAP32[$3 + 152 >> 2], HEAP32[$3 + 180 >> 2], HEAP32[$3 + 176 >> 2]) & 1;
         continue;
        }
        break;
       }
       break label$8;
      }
      HEAP32[$3 >> 2] = HEAP32[$3 + 184 >> 2];
      jsExceptionHere(3, 3423, $3);
      HEAP8[$3 + 175 | 0] = 0;
     }
     jsvUnLock2(HEAP32[$3 + 156 >> 2], HEAP32[$3 + 152 >> 2]);
     break label$4;
    }
    label$14 : {
     if (jsvIsString(HEAP32[$3 + 184 >> 2]) & 1) {
      jsvStringIteratorNew($3 + 128 | 0, HEAP32[$3 + 184 >> 2], 0);
      while (1) {
       if (jsvStringIteratorHasChar($3 + 128 | 0) & 1) {
        $0 = HEAPU8[$3 + 175 | 0];
       } else {
        $0 = 0;
       }
       if ($0 & 1) {
        HEAP8[$3 + 127 | 0] = jsvStringIteratorGetCharAndNext($3 + 128 | 0);
        FUNCTION_TABLE[HEAP32[$3 + 180 >> 2]](HEAP8[$3 + 127 | 0], HEAP32[$3 + 176 >> 2]);
        continue;
       }
       break;
      }
      jsvStringIteratorFree($3 + 128 | 0);
      break label$14;
     }
     label$20 : {
      if (jsvIsArrayBuffer(HEAP32[$3 + 184 >> 2]) & 1) {
       jsvArrayBufferIteratorNew($3 + 80 | 0, HEAP32[$3 + 184 >> 2], 0);
       label$22 : {
        if (!(HEAPU16[$3 + 100 >> 1] & 16 | (HEAPU16[$3 + 100 >> 1] & 15) != 1)) {
         HEAP32[$3 + 76 >> 2] = $3 + 80;
         HEAP32[$3 + 72 >> 2] = jsvGetArrayBufferLength(HEAP32[$3 + 184 >> 2]);
         while (1) {
          label$25 : {
           $0 = HEAP32[$3 + 72 >> 2];
           HEAP32[$3 + 72 >> 2] = $0 + -1;
           if (!$0) {
            break label$25;
           }
           $0 = HEAP32[$3 + 180 >> 2];
           FUNCTION_TABLE[$0](jsvStringIteratorGetChar(HEAP32[$3 + 76 >> 2]) & 255, HEAP32[$3 + 176 >> 2]);
           jsvStringIteratorNextInline(HEAP32[$3 + 76 >> 2]);
           continue;
          }
          break;
         }
         break label$22;
        }
        while (1) {
         if (jsvArrayBufferIteratorHasElement($3 + 80 | 0) & 1) {
          $0 = HEAP32[$3 + 180 >> 2];
          $1 = $3 + 80 | 0;
          FUNCTION_TABLE[$0](jsvArrayBufferIteratorGetIntegerValue($1), HEAP32[$3 + 176 >> 2]);
          jsvArrayBufferIteratorNext($1);
          continue;
         }
         break;
        }
       }
       jsvArrayBufferIteratorFree($3 + 80 | 0);
       break label$20;
      }
      label$28 : {
       if (jsvIsIterable(HEAP32[$3 + 184 >> 2]) & 1) {
        jsvIteratorNew($3 + 24 | 0, HEAP32[$3 + 184 >> 2], 1);
        while (1) {
         if (jsvIteratorHasElement($3 + 24 | 0) & 1) {
          $0 = HEAPU8[$3 + 175 | 0];
         } else {
          $0 = 0;
         }
         if ($0 & 1) {
          $0 = $3 + 24 | 0;
          HEAP32[$3 + 20 >> 2] = jsvIteratorGetValue($0);
          HEAP8[$3 + 175 | 0] = jsvIterateCallback(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 180 >> 2], HEAP32[$3 + 176 >> 2]) & 1;
          jsvUnLock(HEAP32[$3 + 20 >> 2]);
          jsvIteratorNext($0);
          continue;
         }
         break;
        }
        jsvIteratorFree($3 + 24 | 0);
        break label$28;
       }
       HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 184 >> 2];
       jsExceptionHere(3, 3523, $3 + 16 | 0);
       HEAP8[$3 + 175 | 0] = 0;
      }
     }
    }
   }
  }
  HEAP8[$3 + 191 | 0] = HEAP8[$3 + 175 | 0] & 1;
 }
 global$0 = $3 + 192 | 0;
 return HEAP8[$3 + 191 | 0] & 1;
}
function jswrap_json_parse_internal() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 112 | 0;
 global$0 = $0;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        $1 = HEAP16[HEAP32[13768] + 2 >> 1];
        if (($1 | 0) != 45) {
         if (($1 | 0) == 91) {
          break label$4;
         }
         if (($1 | 0) == 123) {
          break label$3;
         }
         if (($1 | 0) == 129) {
          break label$7;
         }
         if (($1 | 0) == 130) {
          break label$6;
         }
         if (($1 | 0) == 131) {
          break label$5;
         }
         label$9 : {
          label$10 : {
           if (($1 | 0) != 180) {
            if (($1 | 0) == 181) {
             break label$10;
            }
            if (($1 | 0) == 182) {
             break label$9;
            }
            break label$2;
           }
           jslGetNextToken();
           HEAP32[$0 + 108 >> 2] = jsvNewFromBool(1);
           break label$1;
          }
          jslGetNextToken();
          HEAP32[$0 + 108 >> 2] = jsvNewFromBool(0);
          break label$1;
         }
         jslGetNextToken();
         HEAP32[$0 + 108 >> 2] = jsvNewWithFlags(2);
         break label$1;
        }
        jslGetNextToken();
        if (!(HEAP16[HEAP32[13768] + 2 >> 1] == 129 | HEAP16[HEAP32[13768] + 2 >> 1] == 130)) {
         HEAP32[$0 + 108 >> 2] = 0;
         break label$1;
        }
        HEAP32[$0 + 104 >> 2] = jswrap_json_parse_internal();
        HEAP32[$0 + 100 >> 2] = jsvNewFromInteger(0);
        HEAP32[$0 + 96 >> 2] = jsvMathsOp(HEAP32[$0 + 100 >> 2], HEAP32[$0 + 104 >> 2], 45);
        jsvUnLock2(HEAP32[$0 + 104 >> 2], HEAP32[$0 + 100 >> 2]);
        HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 96 >> 2];
        break label$1;
       }
       HEAP32[$0 + 88 >> 2] = stringToInt(jslGetTokenValueAsString());
       HEAP32[$0 + 92 >> 2] = i64toi32_i32$HIGH_BITS;
       jslGetNextToken();
       HEAP32[$0 + 108 >> 2] = jsvNewFromLongInteger(HEAP32[$0 + 88 >> 2], HEAP32[$0 + 92 >> 2]);
       break label$1;
      }
      HEAPF64[$0 + 80 >> 3] = stringToFloat(jslGetTokenValueAsString());
      jslGetNextToken();
      HEAP32[$0 + 108 >> 2] = jsvNewFromFloat(HEAPF64[$0 + 80 >> 3]);
      break label$1;
     }
     HEAP32[$0 + 76 >> 2] = jslGetTokenValueAsVar();
     jslGetNextToken();
     HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 76 >> 2];
     break label$1;
    }
    HEAP32[$0 + 72 >> 2] = jsvNewWithFlags(3);
    if (!HEAP32[$0 + 72 >> 2]) {
     HEAP32[$0 + 108 >> 2] = 0;
     break label$1;
    }
    jslGetNextToken();
    while (1) {
     if (HEAP16[HEAP32[13768] + 2 >> 1] != 93) {
      $1 = jspHasError() ^ -1;
     } else {
      $1 = 0;
     }
     if ($1 & 1) {
      HEAP32[$0 + 68 >> 2] = jswrap_json_parse_internal();
      label$18 : {
       if (HEAP32[$0 + 68 >> 2]) {
        if (HEAP16[HEAP32[13768] + 2 >> 1] == 93) {
         break label$18;
        }
        if (jslMatch(44) & 1) {
         break label$18;
        }
       }
       jsvUnLock2(HEAP32[$0 + 68 >> 2], HEAP32[$0 + 72 >> 2]);
       HEAP32[$0 + 108 >> 2] = 0;
       break label$1;
      }
      jsvArrayPush(HEAP32[$0 + 72 >> 2], HEAP32[$0 + 68 >> 2]);
      jsvUnLock(HEAP32[$0 + 68 >> 2]);
      continue;
     }
     break;
    }
    if (!(jslMatch(93) & 1)) {
     jsvUnLock(HEAP32[$0 + 72 >> 2]);
     HEAP32[$0 + 108 >> 2] = 0;
     break label$1;
    }
    HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 72 >> 2];
    break label$1;
   }
   HEAP32[$0 + 64 >> 2] = jsvNewWithFlags(5);
   if (!HEAP32[$0 + 64 >> 2]) {
    HEAP32[$0 + 108 >> 2] = 0;
    break label$1;
   }
   jslGetNextToken();
   while (1) {
    if (HEAP16[HEAP32[13768] + 2 >> 1] == 131) {
     $1 = jspHasError() ^ -1;
    } else {
     $1 = 0;
    }
    if ($1 & 1) {
     HEAP32[$0 + 60 >> 2] = jsvAsArrayIndexAndUnLock(jslGetTokenValueAsVar());
     jslGetNextToken();
     HEAP32[$0 + 56 >> 2] = 0;
     label$26 : {
      label$27 : {
       if (!(jslMatch(58) & 1)) {
        break label$27;
       }
       $1 = jswrap_json_parse_internal();
       HEAP32[$0 + 56 >> 2] = $1;
       if (!$1) {
        break label$27;
       }
       if (HEAP16[HEAP32[13768] + 2 >> 1] == 125) {
        break label$26;
       }
       if (jslMatch(44) & 1) {
        break label$26;
       }
      }
      jsvUnLock3(HEAP32[$0 + 60 >> 2], HEAP32[$0 + 56 >> 2], HEAP32[$0 + 64 >> 2]);
      HEAP32[$0 + 108 >> 2] = 0;
      break label$1;
     }
     jsvAddName(HEAP32[$0 + 64 >> 2], jsvMakeIntoVariableName(HEAP32[$0 + 60 >> 2], HEAP32[$0 + 56 >> 2]));
     jsvUnLock2(HEAP32[$0 + 56 >> 2], HEAP32[$0 + 60 >> 2]);
     continue;
    }
    break;
   }
   if (!(jslMatch(125) & 1)) {
    jsvUnLock(HEAP32[$0 + 64 >> 2]);
    HEAP32[$0 + 108 >> 2] = 0;
    break label$1;
   }
   HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 64 >> 2];
   break label$1;
  }
  $1 = $0 + 16 | 0;
  jslTokenAsString(HEAP16[HEAP32[13768] + 2 >> 1], $1, 32);
  HEAP32[$0 >> 2] = $1;
  jsExceptionHere(2, 34173, $0);
  HEAP32[$0 + 108 >> 2] = 0;
 }
 global$0 = $0 + 112 | 0;
 return HEAP32[$0 + 108 >> 2];
}
function matchhere($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 1024 | 0;
 global$0 = $3;
 HEAP32[$3 + 1016 >> 2] = $0;
 HEAP32[$3 + 1012 >> 2] = $1;
 label$1 : {
  if (jspIsInterrupted() & 1) {
   HEAP32[$3 + 1020 >> 2] = 0;
   break label$1;
  }
  if (!(HEAP8[HEAP32[$3 + 1016 >> 2]] != 124 ? HEAP8[HEAP32[$3 + 1016 >> 2]] : 0)) {
   $0 = HEAP32[$3 + 1012 >> 2];
   memcpy($3, $2, 88);
   HEAP32[$3 + 1020 >> 2] = matchfound($0, $3);
   break label$1;
  }
  if (HEAP8[HEAP32[$3 + 1016 >> 2]] == 94) {
   if (jsvStringIteratorGetIndex(HEAP32[$3 + 1012 >> 2])) {
    HEAP32[$3 + 1020 >> 2] = 0;
    break label$1;
   }
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$3 + 1020 >> 2] = 0;
    break label$1;
   }
   $0 = HEAP32[$3 + 1016 >> 2] + 1 | 0;
   $1 = HEAP32[$3 + 1012 >> 2];
   memcpy($3 + 88 | 0, $2, 88);
   HEAP32[$3 + 1020 >> 2] = matchhere($0, $1, $3 + 88 | 0);
   break label$1;
  }
  if (HEAP8[HEAP32[$3 + 1016 >> 2]] == 36) {
   if (!(jsvStringIteratorHasChar(HEAP32[$3 + 1012 >> 2]) & 1)) {
    $0 = HEAP32[$3 + 1016 >> 2] + 1 | 0;
    $1 = HEAP32[$3 + 1012 >> 2];
    memcpy($3 + 264 | 0, $2, 88);
    HEAP32[$3 + 1020 >> 2] = matchhere($0, $1, $3 + 264 | 0);
    break label$1;
   }
   $0 = HEAP32[$3 + 1016 >> 2] + 1 | 0;
   memcpy($3 + 176 | 0, $2, 88);
   HEAP32[$3 + 1020 >> 2] = nomatchfound($0, $3 + 176 | 0);
   break label$1;
  }
  if (HEAP8[HEAP32[$3 + 1016 >> 2]] == 40) {
   $0 = jsvStringIteratorGetIndex(HEAP32[$3 + 1012 >> 2]);
   HEAP32[($2 + 16 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] = $0;
   HEAP32[($2 + 52 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] = HEAP32[($2 + 16 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2];
   if (HEAP32[$2 + 12 >> 2] < 9) {
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   }
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$3 + 1020 >> 2] = 0;
    break label$1;
   }
   $0 = HEAP32[$3 + 1016 >> 2] + 1 | 0;
   $1 = HEAP32[$3 + 1012 >> 2];
   memcpy($3 + 352 | 0, $2, 88);
   HEAP32[$3 + 1020 >> 2] = matchhere($0, $1, $3 + 352 | 0);
   break label$1;
  }
  if (HEAP8[HEAP32[$3 + 1016 >> 2]] == 41) {
   if (HEAP32[$2 + 12 >> 2] > 0) {
    $0 = jsvStringIteratorGetIndex(HEAP32[$3 + 1012 >> 2]);
    HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) + 48 >> 2] = $0;
   }
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$3 + 1020 >> 2] = 0;
    break label$1;
   }
   $0 = HEAP32[$3 + 1016 >> 2] + 1 | 0;
   $1 = HEAP32[$3 + 1012 >> 2];
   memcpy($3 + 440 | 0, $2, 88);
   HEAP32[$3 + 1020 >> 2] = matchhere($0, $1, $3 + 440 | 0);
   break label$1;
  }
  HEAP8[$3 + 1007 | 0] = matchcharacter(HEAP32[$3 + 1016 >> 2], HEAP32[$3 + 1012 >> 2], $3 + 1008 | 0, $2) & 1;
  if (!(HEAP8[HEAP32[$3 + 1016 >> 2] + HEAP32[$3 + 1008 >> 2] | 0] != 43 ? HEAP8[HEAP32[$3 + 1016 >> 2] + HEAP32[$3 + 1008 >> 2] | 0] != 42 : 0)) {
   HEAP8[$3 + 1006 | 0] = HEAPU8[HEAP32[$3 + 1016 >> 2] + HEAP32[$3 + 1008 >> 2] | 0];
   if (!(HEAP8[$3 + 1007 | 0] & 1 | HEAP8[$3 + 1006 | 0] != 43)) {
    $0 = HEAP32[$3 + 1016 >> 2] + (HEAP32[$3 + 1008 >> 2] + 1 | 0) | 0;
    memcpy($3 + 704 | 0, $2, 88);
    HEAP32[$3 + 1020 >> 2] = nomatchfound($0, $3 + 704 | 0);
    break label$1;
   }
   HEAP32[$3 + 1e3 >> 2] = (HEAP32[$3 + 1016 >> 2] + HEAP32[$3 + 1008 >> 2] | 0) + 1;
   jsvStringIteratorClone($3 + 976 | 0, HEAP32[$3 + 1012 >> 2]);
   $0 = HEAP32[$3 + 1e3 >> 2];
   memcpy($3 + 616 | 0, $2, 88);
   HEAP32[$3 + 972 >> 2] = matchhere($0, $3 + 976 | 0, $3 + 616 | 0);
   jsvStringIteratorFree($3 + 976 | 0);
   while (1) {
    if (jsvStringIteratorHasChar(HEAP32[$3 + 1012 >> 2]) & 1) {
     $0 = HEAPU8[$3 + 1007 | 0];
    } else {
     $0 = 0;
    }
    if ($0 & 1) {
     $0 = $3 + 976 | 0;
     $1 = $3 + 1008 | 0;
     jsvStringIteratorNext(HEAP32[$3 + 1012 >> 2]);
     HEAP8[$3 + 1007 | 0] = matchcharacter(HEAP32[$3 + 1016 >> 2], HEAP32[$3 + 1012 >> 2], $1, $2) & 1;
     jsvStringIteratorClone($0, HEAP32[$3 + 1012 >> 2]);
     $0 = HEAP32[$3 + 1e3 >> 2];
     memcpy($3 + 528 | 0, $2, 88);
     HEAP32[$3 + 968 >> 2] = matchhere($0, $3 + 976 | 0, $3 + 528 | 0);
     jsvStringIteratorFree($3 + 976 | 0);
     if (HEAP32[$3 + 968 >> 2]) {
      jsvUnLock(HEAP32[$3 + 972 >> 2]);
      HEAP32[$3 + 972 >> 2] = HEAP32[$3 + 968 >> 2];
     }
     continue;
    }
    break;
   }
   HEAP32[$3 + 1020 >> 2] = HEAP32[$3 + 972 >> 2];
   break label$1;
  }
  if (!(!(jsvStringIteratorHasChar(HEAP32[$3 + 1012 >> 2]) & 1) | !(HEAP8[$3 + 1007 | 0] & 1))) {
   jsvStringIteratorNext(HEAP32[$3 + 1012 >> 2]);
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$3 + 1020 >> 2] = 0;
    break label$1;
   }
   $0 = HEAP32[$3 + 1016 >> 2] + HEAP32[$3 + 1008 >> 2] | 0;
   $1 = HEAP32[$3 + 1012 >> 2];
   memcpy($3 + 792 | 0, $2, 88);
   HEAP32[$3 + 1020 >> 2] = matchhere($0, $1, $3 + 792 | 0);
   break label$1;
  }
  $0 = HEAP32[$3 + 1016 >> 2] + HEAP32[$3 + 1008 >> 2] | 0;
  memcpy($3 + 880 | 0, $2, 88);
  HEAP32[$3 + 1020 >> 2] = nomatchfound($0, $3 + 880 | 0);
 }
 global$0 = $3 + 1024 | 0;
 return HEAP32[$3 + 1020 >> 2];
}
function jswrap_storage_open($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 256 | 0;
 global$0 = $2;
 HEAP32[$2 + 248 >> 2] = $0;
 HEAP32[$2 + 244 >> 2] = $1;
 HEAP8[$2 + 243 | 0] = 0;
 label$1 : {
  label$2 : {
   if (jsvIsStringEqual(HEAP32[$2 + 244 >> 2], 36963) & 1) {
    HEAP8[$2 + 243 | 0] = 114;
    break label$2;
   }
   label$4 : {
    if (jsvIsStringEqual(HEAP32[$2 + 244 >> 2], 36965) & 1) {
     HEAP8[$2 + 243 | 0] = 119;
     break label$4;
    }
    label$6 : {
     if (jsvIsStringEqual(HEAP32[$2 + 244 >> 2], 36967) & 1) {
      HEAP8[$2 + 243 | 0] = 97;
      break label$6;
     }
     HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 244 >> 2];
     jsExceptionHere(1, 36969, $2 - -64 | 0);
     HEAP32[$2 + 252 >> 2] = 0;
     break label$1;
    }
   }
  }
  HEAP32[$2 + 236 >> 2] = jspNewObject(0, 36985);
  if (!HEAP32[$2 + 236 >> 2]) {
   HEAP32[$2 + 252 >> 2] = 0;
   break label$1;
  }
  $0 = $2 + 200 | 0;
  HEAP32[$2 + 232 >> 2] = 1;
  HEAP32[$2 + 228 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 248 >> 2], 0, 28);
  jsfNameFromVar($0, HEAP32[$2 + 228 >> 2]);
  HEAP32[$2 + 196 >> 2] = 27;
  while (1) {
   if (HEAP32[$2 + 196 >> 2] ? !HEAP8[(HEAP32[$2 + 196 >> 2] + $2 | 0) + 199 | 0] : 0) {
    HEAP32[$2 + 196 >> 2] = HEAP32[$2 + 196 >> 2] + -1;
    continue;
   }
   break;
  }
  HEAP8[HEAP32[$2 + 196 >> 2] + ($2 + 200 | 0) | 0] = HEAP32[$2 + 232 >> 2];
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 36997, HEAP32[$2 + 228 >> 2]);
  HEAP32[$2 + 192 >> 2] = 0;
  HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 224 >> 2];
  $0 = HEAP32[$2 + 220 >> 2];
  HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 216 >> 2];
  HEAP32[$2 + 52 >> 2] = $0;
  $0 = HEAP32[$2 + 212 >> 2];
  HEAP32[$2 + 40 >> 2] = HEAP32[$2 + 208 >> 2];
  HEAP32[$2 + 44 >> 2] = $0;
  $0 = HEAP32[$2 + 204 >> 2];
  HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 200 >> 2];
  HEAP32[$2 + 36 >> 2] = $0;
  HEAP32[$2 + 156 >> 2] = jsfFindFile($2 + 32 | 0, $2 + 160 | 0);
  if (HEAP8[$2 + 243 | 0] == 119) {
   if (HEAP32[$2 + 156 >> 2]) {
    jswrap_storagefile_erase(HEAP32[$2 + 236 >> 2]);
    HEAP32[$2 + 156 >> 2] = 0;
   }
  }
  if (HEAP8[$2 + 243 | 0] == 97) {
   HEAP8[$2 + 155 | 0] = 255;
   if (HEAP32[$2 + 156 >> 2]) {
    jshFlashRead($2 + 155 | 0, (HEAP32[$2 + 156 >> 2] + jsfGetFileSize($2 + 160 | 0) | 0) - 1 | 0, 1);
   }
   while (1) {
    $0 = 0;
    label$18 : {
     if (!HEAP32[$2 + 156 >> 2]) {
      break label$18;
     }
     $0 = 0;
     if (HEAPU8[$2 + 155 | 0] == 255) {
      break label$18;
     }
     $0 = HEAP32[$2 + 232 >> 2] < 255;
    }
    if ($0) {
     HEAP32[$2 + 232 >> 2] = HEAP32[$2 + 232 >> 2] + 1;
     HEAP8[HEAP32[$2 + 196 >> 2] + ($2 + 200 | 0) | 0] = HEAP32[$2 + 232 >> 2];
     HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 224 >> 2];
     $0 = HEAP32[$2 + 220 >> 2];
     HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 216 >> 2];
     HEAP32[$2 + 20 >> 2] = $0;
     $0 = HEAP32[$2 + 212 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 208 >> 2];
     HEAP32[$2 + 12 >> 2] = $0;
     $0 = HEAP32[$2 + 204 >> 2];
     HEAP32[$2 >> 2] = HEAP32[$2 + 200 >> 2];
     HEAP32[$2 + 4 >> 2] = $0;
     HEAP32[$2 + 156 >> 2] = jsfFindFile($2, $2 + 160 | 0);
     if (HEAP32[$2 + 156 >> 2]) {
      jshFlashRead($2 + 155 | 0, (HEAP32[$2 + 156 >> 2] + jsfGetFileSize($2 + 160 | 0) | 0) - 1 | 0, 1);
     }
     continue;
    }
    break;
   }
   if (HEAP32[$2 + 156 >> 2]) {
    HEAP8[$2 + 79 | 0] = 0;
    while (1) {
     label$23 : {
      if (!((HEAPU8[$2 + 79 | 0] ^ -1) & 1)) {
       break label$23;
      }
      HEAP32[$2 + 72 >> 2] = 992 - HEAP32[$2 + 192 >> 2];
      if (HEAP32[$2 + 72 >> 2] <= 0) {
       HEAP8[$2 + 79 | 0] = 1;
       break label$23;
      }
      if (HEAP32[$2 + 72 >> 2] > 64) {
       HEAP32[$2 + 72 >> 2] = 64;
      }
      jshFlashRead($2 + 80 | 0, HEAP32[$2 + 156 >> 2] + HEAP32[$2 + 192 >> 2] | 0, HEAP32[$2 + 72 >> 2]);
      HEAP32[$2 + 68 >> 2] = 0;
      while (1) {
       if (HEAP32[$2 + 68 >> 2] < HEAP32[$2 + 72 >> 2]) {
        if (HEAP8[HEAP32[$2 + 68 >> 2] + ($2 + 80 | 0) | 0] == -1) {
         HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 68 >> 2];
         HEAP8[$2 + 79 | 0] = 1;
        } else {
         HEAP32[$2 + 68 >> 2] = HEAP32[$2 + 68 >> 2] + 1;
         continue;
        }
       }
       break;
      }
      HEAP32[$2 + 192 >> 2] = HEAP32[$2 + 72 >> 2] + HEAP32[$2 + 192 >> 2];
      continue;
     }
     break;
    }
   }
  }
  label$30 : {
   if (HEAP8[$2 + 243 | 0] != 114) {
    break label$30;
   }
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 37002, jsvNewFromInteger(HEAP32[$2 + 232 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 37008, jsvNewFromInteger(HEAP32[$2 + 192 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 37015, jsvNewFromInteger(HEAP32[$2 + 156 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 37020, jsvNewFromInteger(HEAP8[$2 + 243 | 0]));
  HEAP32[$2 + 252 >> 2] = HEAP32[$2 + 236 >> 2];
 }
 global$0 = $2 + 256 | 0;
 return HEAP32[$2 + 252 >> 2];
}
function FFT($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 128 | 0;
 global$0 = $4;
 HEAP16[$4 + 126 >> 1] = $0;
 HEAP32[$4 + 120 >> 2] = $1;
 HEAP32[$4 + 116 >> 2] = $2;
 HEAP32[$4 + 112 >> 2] = $3;
 HEAP32[$4 + 108 >> 2] = 1;
 HEAP32[$4 + 104 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 104 >> 2] < HEAP32[$4 + 120 >> 2]) {
   HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 108 >> 2] << 1;
   HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 104 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$4 + 88 >> 2] = HEAP32[$4 + 108 >> 2] >> 1;
 HEAP32[$4 + 96 >> 2] = 0;
 HEAP32[$4 + 104 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 104 >> 2] < (HEAP32[$4 + 108 >> 2] - 1 | 0)) {
   if (HEAP32[$4 + 104 >> 2] < HEAP32[$4 + 96 >> 2]) {
    HEAPF64[$4 + 48 >> 3] = HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3];
    HEAPF64[$4 + 40 >> 3] = HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3];
    HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3] = HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 96 >> 2] << 3) >> 3];
    HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3] = HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 96 >> 2] << 3) >> 3];
    HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 96 >> 2] << 3) >> 3] = HEAPF64[$4 + 48 >> 3];
    HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 96 >> 2] << 3) >> 3] = HEAPF64[$4 + 40 >> 3];
   }
   HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 88 >> 2];
   while (1) {
    if (HEAP32[$4 + 92 >> 2] <= HEAP32[$4 + 96 >> 2]) {
     HEAP32[$4 + 96 >> 2] = HEAP32[$4 + 96 >> 2] - HEAP32[$4 + 92 >> 2];
     HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 92 >> 2] >> 1;
     continue;
    }
    break;
   }
   HEAP32[$4 + 96 >> 2] = HEAP32[$4 + 92 >> 2] + HEAP32[$4 + 96 >> 2];
   HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 104 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAPF64[$4 + 64 >> 3] = -1;
 HEAPF64[$4 + 56 >> 3] = 0;
 HEAP32[$4 + 76 >> 2] = 1;
 HEAP32[$4 + 84 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 84 >> 2] < HEAP32[$4 + 120 >> 2]) {
   HEAP32[$4 + 80 >> 2] = HEAP32[$4 + 76 >> 2];
   HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 76 >> 2] << 1;
   HEAPF64[$4 + 16 >> 3] = 1;
   HEAPF64[$4 + 8 >> 3] = 0;
   HEAP32[$4 + 96 >> 2] = 0;
   while (1) {
    if (HEAP32[$4 + 96 >> 2] < HEAP32[$4 + 80 >> 2]) {
     HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 96 >> 2];
     while (1) {
      if (HEAP32[$4 + 104 >> 2] < HEAP32[$4 + 108 >> 2]) {
       HEAP32[$4 + 100 >> 2] = HEAP32[$4 + 104 >> 2] + HEAP32[$4 + 80 >> 2];
       HEAPF64[$4 + 32 >> 3] = HEAPF64[$4 + 16 >> 3] * HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3] - HEAPF64[$4 + 8 >> 3] * HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3];
       HEAPF64[$4 + 24 >> 3] = HEAPF64[$4 + 16 >> 3] * HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3] + HEAPF64[$4 + 8 >> 3] * HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3];
       HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3] = HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3] - HEAPF64[$4 + 32 >> 3];
       HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3] = HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3] - HEAPF64[$4 + 24 >> 3];
       $0 = HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) | 0;
       HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + HEAPF64[$4 + 32 >> 3];
       $0 = HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) | 0;
       HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + HEAPF64[$4 + 24 >> 3];
       HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 76 >> 2] + HEAP32[$4 + 104 >> 2];
       continue;
      }
      break;
     }
     HEAPF64[$4 >> 3] = HEAPF64[$4 + 16 >> 3] * HEAPF64[$4 + 64 >> 3] - HEAPF64[$4 + 8 >> 3] * HEAPF64[$4 + 56 >> 3];
     HEAPF64[$4 + 8 >> 3] = HEAPF64[$4 + 16 >> 3] * HEAPF64[$4 + 56 >> 3] + HEAPF64[$4 + 8 >> 3] * HEAPF64[$4 + 64 >> 3];
     HEAPF64[$4 + 16 >> 3] = HEAPF64[$4 >> 3];
     HEAP32[$4 + 96 >> 2] = HEAP32[$4 + 96 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAPF64[$4 + 56 >> 3] = jswrap_math_sqrt((1 - HEAPF64[$4 + 64 >> 3]) / 2);
   if (HEAP16[$4 + 126 >> 1] == 1) {
    HEAPF64[$4 + 56 >> 3] = -HEAPF64[$4 + 56 >> 3];
   }
   HEAPF64[$4 + 64 >> 3] = jswrap_math_sqrt((1 + HEAPF64[$4 + 64 >> 3]) / 2);
   HEAP32[$4 + 84 >> 2] = HEAP32[$4 + 84 >> 2] + 1;
   continue;
  }
  break;
 }
 if (HEAP16[$4 + 126 >> 1] == 1) {
  HEAP32[$4 + 104 >> 2] = 0;
  while (1) {
   if (HEAP32[$4 + 104 >> 2] < HEAP32[$4 + 108 >> 2]) {
    $0 = HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] / +HEAP32[$4 + 108 >> 2];
    $0 = HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] / +HEAP32[$4 + 108 >> 2];
    HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 104 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 global$0 = $4 + 128 | 0;
}
function tflite__ops__micro__round__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 240 | 0;
 global$0 = $2;
 HEAP32[$2 + 232 >> 2] = $0;
 HEAP32[$2 + 228 >> 2] = $1;
 HEAP32[$2 + 224 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 232 >> 2], HEAP32[$2 + 228 >> 2], 0);
 HEAP32[$2 + 220 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 232 >> 2], HEAP32[$2 + 228 >> 2]);
 label$1 : {
  if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 228 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 232 >> 2];
   $3 = tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 228 >> 2]);
   HEAP32[$2 + 20 >> 2] = 1;
   HEAP32[$2 + 16 >> 2] = $3;
   HEAP32[$2 + 12 >> 2] = 48302;
   HEAP32[$2 + 8 >> 2] = 48286;
   HEAP32[$2 + 4 >> 2] = 33;
   HEAP32[$2 >> 2] = 48190;
   FUNCTION_TABLE[$0]($1, 48164, $2);
   HEAP32[$2 + 236 >> 2] = 1;
   break label$1;
  }
  if ((tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 228 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 232 >> 2];
   $3 = tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 228 >> 2]);
   HEAP32[$2 + 52 >> 2] = 1;
   HEAP32[$2 + 48 >> 2] = $3;
   HEAP32[$2 + 44 >> 2] = 48302;
   HEAP32[$2 + 40 >> 2] = 48304;
   HEAP32[$2 + 36 >> 2] = 34;
   HEAP32[$2 + 32 >> 2] = 48190;
   FUNCTION_TABLE[$0]($1, 48164, $2 + 32 | 0);
   HEAP32[$2 + 236 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[$2 + 224 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 232 >> 2];
   $3 = HEAP32[HEAP32[$2 + 224 >> 2] >> 2];
   HEAP32[$2 + 84 >> 2] = 1;
   HEAP32[$2 + 80 >> 2] = $3;
   HEAP32[$2 + 76 >> 2] = 48333;
   HEAP32[$2 + 72 >> 2] = 48321;
   HEAP32[$2 + 68 >> 2] = 35;
   HEAP32[$2 + 64 >> 2] = 48190;
   FUNCTION_TABLE[$0]($1, 48164, $2 - -64 | 0);
   HEAP32[$2 + 236 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[$2 + 220 >> 2] >> 2] != HEAP32[HEAP32[$2 + 224 >> 2] >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 232 >> 2];
   $3 = HEAP32[HEAP32[$2 + 220 >> 2] >> 2];
   HEAP32[$2 + 116 >> 2] = HEAP32[HEAP32[$2 + 224 >> 2] >> 2];
   HEAP32[$2 + 112 >> 2] = $3;
   HEAP32[$2 + 108 >> 2] = 48321;
   HEAP32[$2 + 104 >> 2] = 48348;
   HEAP32[$2 + 100 >> 2] = 36;
   HEAP32[$2 + 96 >> 2] = 48190;
   FUNCTION_TABLE[$0]($1, 48164, $2 + 96 | 0);
   HEAP32[$2 + 236 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[$2 + 220 >> 2] + 24 >> 2] != HEAP32[HEAP32[$2 + 224 >> 2] + 24 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 232 >> 2];
   $3 = HEAP32[HEAP32[$2 + 220 >> 2] + 24 >> 2];
   HEAP32[$2 + 148 >> 2] = HEAP32[HEAP32[$2 + 224 >> 2] + 24 >> 2];
   HEAP32[$2 + 144 >> 2] = $3;
   HEAP32[$2 + 140 >> 2] = 48375;
   HEAP32[$2 + 136 >> 2] = 48361;
   HEAP32[$2 + 132 >> 2] = 37;
   HEAP32[$2 + 128 >> 2] = 48190;
   FUNCTION_TABLE[$0]($1, 48164, $2 + 128 | 0);
   HEAP32[$2 + 236 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2] >> 2] != HEAP32[HEAP32[HEAP32[$2 + 224 >> 2] + 8 >> 2] >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 232 >> 2];
   $3 = HEAP32[HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2] >> 2];
   HEAP32[$2 + 180 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 224 >> 2] + 8 >> 2] >> 2];
   HEAP32[$2 + 176 >> 2] = $3;
   HEAP32[$2 + 172 >> 2] = 48407;
   HEAP32[$2 + 168 >> 2] = 48388;
   HEAP32[$2 + 164 >> 2] = 38;
   HEAP32[$2 + 160 >> 2] = 48190;
   FUNCTION_TABLE[$0]($1, 48164, $2 + 160 | 0);
   HEAP32[$2 + 236 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 216 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 216 >> 2] < HEAP32[HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2] >> 2]) {
    if (HEAP32[(HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2] + 4 | 0) + (HEAP32[$2 + 216 >> 2] << 2) >> 2] != HEAP32[(HEAP32[HEAP32[$2 + 224 >> 2] + 8 >> 2] + 4 | 0) + (HEAP32[$2 + 216 >> 2] << 2) >> 2]) {
     $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
     $1 = HEAP32[$2 + 232 >> 2];
     $3 = HEAP32[(HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2] + 4 | 0) + (HEAP32[$2 + 216 >> 2] << 2) >> 2];
     HEAP32[$2 + 212 >> 2] = HEAP32[(HEAP32[HEAP32[$2 + 224 >> 2] + 8 >> 2] + 4 | 0) + (HEAP32[$2 + 216 >> 2] << 2) >> 2];
     HEAP32[$2 + 208 >> 2] = $3;
     HEAP32[$2 + 204 >> 2] = 48447;
     HEAP32[$2 + 200 >> 2] = 48425;
     HEAP32[$2 + 196 >> 2] = 40;
     HEAP32[$2 + 192 >> 2] = 48190;
     FUNCTION_TABLE[$0]($1, 48164, $2 + 192 | 0);
     HEAP32[$2 + 236 >> 2] = 1;
     break label$1;
    } else {
     HEAP32[$2 + 216 >> 2] = HEAP32[$2 + 216 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  HEAP32[$2 + 236 >> 2] = 0;
 }
 global$0 = $2 + 240 | 0;
 return HEAP32[$2 + 236 >> 2];
}
function tflite__ops__micro__ceil__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 240 | 0;
 global$0 = $2;
 HEAP32[$2 + 232 >> 2] = $0;
 HEAP32[$2 + 228 >> 2] = $1;
 HEAP32[$2 + 224 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 232 >> 2], HEAP32[$2 + 228 >> 2], 0);
 HEAP32[$2 + 220 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 232 >> 2], HEAP32[$2 + 228 >> 2]);
 label$1 : {
  if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 228 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 232 >> 2];
   $3 = tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 228 >> 2]);
   HEAP32[$2 + 20 >> 2] = 1;
   HEAP32[$2 + 16 >> 2] = $3;
   HEAP32[$2 + 12 >> 2] = 44795;
   HEAP32[$2 + 8 >> 2] = 44779;
   HEAP32[$2 + 4 >> 2] = 33;
   HEAP32[$2 >> 2] = 44684;
   FUNCTION_TABLE[$0]($1, 44658, $2);
   HEAP32[$2 + 236 >> 2] = 1;
   break label$1;
  }
  if ((tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 228 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 232 >> 2];
   $3 = tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 228 >> 2]);
   HEAP32[$2 + 52 >> 2] = 1;
   HEAP32[$2 + 48 >> 2] = $3;
   HEAP32[$2 + 44 >> 2] = 44795;
   HEAP32[$2 + 40 >> 2] = 44797;
   HEAP32[$2 + 36 >> 2] = 34;
   HEAP32[$2 + 32 >> 2] = 44684;
   FUNCTION_TABLE[$0]($1, 44658, $2 + 32 | 0);
   HEAP32[$2 + 236 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[$2 + 224 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 232 >> 2];
   $3 = HEAP32[HEAP32[$2 + 224 >> 2] >> 2];
   HEAP32[$2 + 84 >> 2] = 1;
   HEAP32[$2 + 80 >> 2] = $3;
   HEAP32[$2 + 76 >> 2] = 44826;
   HEAP32[$2 + 72 >> 2] = 44814;
   HEAP32[$2 + 68 >> 2] = 35;
   HEAP32[$2 + 64 >> 2] = 44684;
   FUNCTION_TABLE[$0]($1, 44658, $2 - -64 | 0);
   HEAP32[$2 + 236 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[$2 + 220 >> 2] >> 2] != HEAP32[HEAP32[$2 + 224 >> 2] >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 232 >> 2];
   $3 = HEAP32[HEAP32[$2 + 220 >> 2] >> 2];
   HEAP32[$2 + 116 >> 2] = HEAP32[HEAP32[$2 + 224 >> 2] >> 2];
   HEAP32[$2 + 112 >> 2] = $3;
   HEAP32[$2 + 108 >> 2] = 44814;
   HEAP32[$2 + 104 >> 2] = 44841;
   HEAP32[$2 + 100 >> 2] = 36;
   HEAP32[$2 + 96 >> 2] = 44684;
   FUNCTION_TABLE[$0]($1, 44658, $2 + 96 | 0);
   HEAP32[$2 + 236 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[$2 + 220 >> 2] + 24 >> 2] != HEAP32[HEAP32[$2 + 224 >> 2] + 24 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 232 >> 2];
   $3 = HEAP32[HEAP32[$2 + 220 >> 2] + 24 >> 2];
   HEAP32[$2 + 148 >> 2] = HEAP32[HEAP32[$2 + 224 >> 2] + 24 >> 2];
   HEAP32[$2 + 144 >> 2] = $3;
   HEAP32[$2 + 140 >> 2] = 44868;
   HEAP32[$2 + 136 >> 2] = 44854;
   HEAP32[$2 + 132 >> 2] = 37;
   HEAP32[$2 + 128 >> 2] = 44684;
   FUNCTION_TABLE[$0]($1, 44658, $2 + 128 | 0);
   HEAP32[$2 + 236 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2] >> 2] != HEAP32[HEAP32[HEAP32[$2 + 224 >> 2] + 8 >> 2] >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 232 >> 2];
   $3 = HEAP32[HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2] >> 2];
   HEAP32[$2 + 180 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 224 >> 2] + 8 >> 2] >> 2];
   HEAP32[$2 + 176 >> 2] = $3;
   HEAP32[$2 + 172 >> 2] = 44900;
   HEAP32[$2 + 168 >> 2] = 44881;
   HEAP32[$2 + 164 >> 2] = 38;
   HEAP32[$2 + 160 >> 2] = 44684;
   FUNCTION_TABLE[$0]($1, 44658, $2 + 160 | 0);
   HEAP32[$2 + 236 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 216 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 216 >> 2] < HEAP32[HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2] >> 2]) {
    if (HEAP32[(HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2] + 4 | 0) + (HEAP32[$2 + 216 >> 2] << 2) >> 2] != HEAP32[(HEAP32[HEAP32[$2 + 224 >> 2] + 8 >> 2] + 4 | 0) + (HEAP32[$2 + 216 >> 2] << 2) >> 2]) {
     $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
     $1 = HEAP32[$2 + 232 >> 2];
     $3 = HEAP32[(HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2] + 4 | 0) + (HEAP32[$2 + 216 >> 2] << 2) >> 2];
     HEAP32[$2 + 212 >> 2] = HEAP32[(HEAP32[HEAP32[$2 + 224 >> 2] + 8 >> 2] + 4 | 0) + (HEAP32[$2 + 216 >> 2] << 2) >> 2];
     HEAP32[$2 + 208 >> 2] = $3;
     HEAP32[$2 + 204 >> 2] = 44940;
     HEAP32[$2 + 200 >> 2] = 44918;
     HEAP32[$2 + 196 >> 2] = 40;
     HEAP32[$2 + 192 >> 2] = 44684;
     FUNCTION_TABLE[$0]($1, 44658, $2 + 192 | 0);
     HEAP32[$2 + 236 >> 2] = 1;
     break label$1;
    } else {
     HEAP32[$2 + 216 >> 2] = HEAP32[$2 + 216 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  HEAP32[$2 + 236 >> 2] = 0;
 }
 global$0 = $2 + 240 | 0;
 return HEAP32[$2 + 236 >> 2];
}
function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_interval_between_negative_one_quarter_and_0_excl_int__28gemmlowp__FixedPoint_int_2c_200__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 $1 = global$0 - 256 | 0;
 global$0 = $1;
 $5 = $1 + 104 | 0;
 $2 = $1 + 216 | 0;
 $6 = $1 + 8 | 0;
 $4 = $1 + 232 | 0;
 $7 = $1 + 24 | 0;
 $8 = $1 + 40 | 0;
 $3 = $1 + 192 | 0;
 $9 = $1 + 48 | 0;
 $10 = $1 + 224 | 0;
 $11 = $1 + 56 | 0;
 $12 = $1 + 168 | 0;
 $13 = $1 - -64 | 0;
 $14 = $1 + 120 | 0;
 $15 = $1 + 72 | 0;
 $16 = $1 + 144 | 0;
 $17 = $1 + 112 | 0;
 $18 = $1 + 128 | 0;
 $19 = $1 + 136 | 0;
 $20 = $1 + 152 | 0;
 $21 = $1 + 160 | 0;
 $22 = $1 + 176 | 0;
 $23 = $1 + 184 | 0;
 $24 = $1 + 240 | 0;
 $25 = $1 + 208 | 0;
 HEAP32[$1 + 240 >> 2] = $0;
 HEAP32[$1 + 232 >> 2] = gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200__20__28int_29(1895147668));
 HEAP32[$1 + 224 >> 2] = gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200__20__28int_29(715827883));
 HEAP32[$25 >> 2] = HEAP32[$24 >> 2];
 HEAP32[$1 + 200 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__FixedPoint_int_2c_200___ConstantPOT__3__28_29();
 HEAP32[$1 + 216 >> 2] = gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__operator__int_2c_2012__28gemmlowp__FixedPoint_int_2c_2012__2c_20gemmlowp__FixedPoint_int_2c_2012__29(HEAP32[$1 + 208 >> 2], HEAP32[$1 + 200 >> 2]);
 HEAP32[$23 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$22 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 192 >> 2] = gemmlowp__FixedPoint_int_2c_20_280_29_20__20_280_29__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 184 >> 2], HEAP32[$1 + 176 >> 2]);
 HEAP32[$21 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$20 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 168 >> 2] = gemmlowp__FixedPoint_int_2c_20_280_29_20__20_280_29__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 160 >> 2], HEAP32[$1 + 152 >> 2]);
 HEAP32[$19 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$18 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 + 144 >> 2] = gemmlowp__FixedPoint_int_2c_20_280_29_20__20_280_29__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 136 >> 2], HEAP32[$1 + 128 >> 2]);
 HEAP32[$17 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$1 + 120 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SaturatingRoundingMultiplyByPOT__2_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 112 >> 2]);
 HEAP32[$15 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$13 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$1 + 80 >> 2] = gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__operator__int_2c_2012__28gemmlowp__FixedPoint_int_2c_2012__2c_20gemmlowp__FixedPoint_int_2c_2012__29(HEAP32[$1 + 72 >> 2], HEAP32[$1 + 64 >> 2]);
 HEAP32[$11 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$1 + 88 >> 2] = gemmlowp__FixedPoint_int_2c_20_280_29_20__20_280_29__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 80 >> 2], HEAP32[$1 + 56 >> 2]);
 HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 + 96 >> 2] = gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__operator__int_2c_2012__28gemmlowp__FixedPoint_int_2c_2012__2c_20gemmlowp__FixedPoint_int_2c_2012__29(HEAP32[$1 + 88 >> 2], HEAP32[$1 + 48 >> 2]);
 HEAP32[$1 + 104 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SaturatingRoundingMultiplyByPOT__1_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 96 >> 2]);
 HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$1 + 16 >> 2] = gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__operator__int_2c_2012__28gemmlowp__FixedPoint_int_2c_2012__2c_20gemmlowp__FixedPoint_int_2c_2012__29(HEAP32[$1 + 8 >> 2], HEAP32[$1 >> 2]);
 HEAP32[$1 + 32 >> 2] = gemmlowp__FixedPoint_int_2c_20_280_29_20__20_280_29__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 16 >> 2]);
 HEAP32[$1 + 248 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__AddSaturatingIf16Bit_int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 40 >> 2], HEAP32[$1 + 32 >> 2]);
 global$0 = $1 + 256 | 0;
 return HEAP32[$1 + 248 >> 2];
}
function lcdSetPixels_ArrayBuffer($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = global$0 - 112 | 0;
 global$0 = $5;
 $6 = $5 + 40 | 0;
 HEAP32[$5 + 108 >> 2] = $0;
 HEAP32[$5 + 104 >> 2] = $1;
 HEAP32[$5 + 100 >> 2] = $2;
 HEAP32[$5 + 96 >> 2] = $3;
 HEAP32[$5 + 92 >> 2] = $4;
 $0 = HEAP32[$5 + 108 >> 2];
 HEAP32[$5 + 88 >> 2] = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
 HEAP32[$5 + 84 >> 2] = lcdGetPixelIndex_ArrayBuffer(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 104 >> 2], HEAP32[$5 + 100 >> 2], HEAP32[$5 + 96 >> 2]);
 jsvArrayBufferIteratorNew($6, HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2] >>> 3);
 HEAP32[$5 + 36 >> 2] = (1 << HEAPU8[HEAP32[$5 + 108 >> 2] + 16 | 0]) - 1;
 $0 = $5;
 label$1 : {
  if (HEAP32[$5 + 92 >> 2]) {
   $1 = 0;
   if (HEAP32[$5 + 36 >> 2] != (HEAP32[$5 + 92 >> 2] & HEAP32[$5 + 36 >> 2])) {
    break label$1;
   }
  }
  $1 = HEAP32[$5 + 108 >> 2];
  $1 = ((HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24)) & 2) != 0 ^ -1;
 }
 HEAP8[$0 + 35 | 0] = $1 & 1;
 HEAP32[$5 + 28 >> 2] = HEAPU8[HEAP32[$5 + 108 >> 2] + 16 | 0];
 $0 = HEAP32[$5 + 108 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 8) {
  HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] << 1;
  HEAP8[$5 + 35 | 0] = 0;
 }
 while (1) {
  label$5 : {
   $0 = HEAP32[$5 + 96 >> 2];
   HEAP32[$5 + 96 >> 2] = $0 + -1;
   if (!$0) {
    break label$5;
   }
   label$6 : {
    if (HEAPU8[HEAP32[$5 + 108 >> 2] + 16 | 0] & 7) {
     HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 84 >> 2] & 7;
     if (!(HEAP32[$5 + 84 >> 2] | !(HEAP8[$5 + 35 | 0] & 1))) {
      HEAP32[$5 + 24 >> 2] = Math_imul(HEAPU8[HEAP32[$5 + 108 >> 2] + 16 | 0], HEAP32[$5 + 96 >> 2] + 1 | 0) >> 3;
      if (HEAP32[$5 + 24 >> 2]) {
       HEAP8[$5 + 23 | 0] = HEAP32[$5 + 92 >> 2] ? 255 : 0;
       HEAP32[$5 + 96 >> 2] = (HEAP32[$5 + 96 >> 2] + 1 | 0) - ((HEAP32[$5 + 24 >> 2] << 3) / HEAPU8[HEAP32[$5 + 108 >> 2] + 16 | 0] | 0);
       while (1) {
        label$11 : {
         $0 = HEAP32[$5 + 24 >> 2];
         HEAP32[$5 + 24 >> 2] = $0 + -1;
         if (!$0) {
          break label$11;
         }
         $0 = $5 + 40 | 0;
         jsvArrayBufferIteratorSetByteValue($0, HEAP8[$5 + 23 | 0]);
         jsvArrayBufferIteratorNext($0);
         continue;
        }
        break;
       }
       continue;
      }
     }
     HEAP32[$5 + 16 >> 2] = (1 << HEAPU8[HEAP32[$5 + 108 >> 2] + 16 | 0]) - 1;
     HEAP32[$5 + 12 >> 2] = jsvArrayBufferIteratorGetIntegerValue($5 + 40 | 0);
     $0 = $5;
     $1 = HEAP32[$5 + 108 >> 2];
     $2 = 8 - (HEAP32[$5 + 84 >> 2] + HEAPU8[HEAP32[$5 + 108 >> 2] + 16 | 0] | 0) | 0;
     label$12 : {
      if ((HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24)) & 4) {
       break label$12;
      }
      $2 = HEAP32[$5 + 84 >> 2];
     }
     HEAP32[$0 + 8 >> 2] = $2;
     jsvArrayBufferIteratorSetByteValue($5 + 40 | 0, (HEAP32[$5 + 12 >> 2] & (HEAP32[$5 + 16 >> 2] << HEAP32[$5 + 8 >> 2] ^ -1) | (HEAP32[$5 + 92 >> 2] & HEAP32[$5 + 16 >> 2]) << HEAP32[$5 + 8 >> 2]) << 24 >> 24);
     $0 = HEAP32[$5 + 108 >> 2];
     label$14 : {
      if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 2) {
       jsvArrayBufferIteratorNext($5 + 40 | 0);
       break label$14;
      }
      HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 28 >> 2] + HEAP32[$5 + 84 >> 2];
      if (HEAPU32[$5 + 84 >> 2] >= 8) {
       jsvArrayBufferIteratorNext($5 + 40 | 0);
      }
     }
     break label$6;
    }
    $0 = HEAP32[$5 + 108 >> 2];
    label$17 : {
     if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
      HEAP32[$5 + 4 >> 2] = HEAPU8[HEAP32[$5 + 108 >> 2] + 16 | 0] - 8;
      while (1) {
       if (HEAP32[$5 + 4 >> 2] >= 0) {
        $0 = $5 + 40 | 0;
        jsvArrayBufferIteratorSetByteValue($0, HEAP32[$5 + 92 >> 2] >>> HEAP32[$5 + 4 >> 2] << 24 >> 24);
        jsvArrayBufferIteratorNext($0);
        HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] - 8;
        continue;
       }
       break;
      }
      break label$17;
     }
     HEAP32[$5 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 >> 2] < HEAPU8[HEAP32[$5 + 108 >> 2] + 16 | 0]) {
       $0 = $5 + 40 | 0;
       jsvArrayBufferIteratorSetByteValue($0, HEAP32[$5 + 92 >> 2] >>> HEAP32[$5 >> 2] << 24 >> 24);
       jsvArrayBufferIteratorNext($0);
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 8;
       continue;
      }
      break;
     }
    }
   }
   continue;
  }
  break;
 }
 jsvArrayBufferIteratorFree($5 + 40 | 0);
 global$0 = $5 + 112 | 0;
}
function jspeClassDefinition($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 HEAP8[$1 + 59 | 0] = $0;
 HEAP32[$1 + 52 >> 2] = 0;
 HEAP32[$1 + 48 >> 2] = 0;
 HEAP32[$1 + 44 >> 2] = 0;
 HEAP8[$1 + 43 | 0] = (HEAP32[23778] & 63) == 1;
 if (HEAP8[$1 + 43 | 0] & 1) {
  HEAP32[$1 + 52 >> 2] = jsvNewWithFlags(7);
  HEAP32[$1 + 36 >> 2] = jspeiGetScopesAsVar();
  if (HEAP32[$1 + 36 >> 2]) {
   jsvUnLock2(jsvAddNamedChild(HEAP32[$1 + 52 >> 2], HEAP32[$1 + 36 >> 2], 3852), HEAP32[$1 + 36 >> 2]);
  }
 }
 if (!(!(HEAP8[$1 + 59 | 0] & 1) | HEAP16[HEAP32[13768] + 2 >> 1] != 128)) {
  if (HEAP32[$1 + 52 >> 2]) {
   HEAP32[$1 + 44 >> 2] = jslGetTokenValueAsVar();
  }
  jslGetNextToken();
 }
 if (HEAP32[$1 + 52 >> 2]) {
  HEAP32[$1 + 32 >> 2] = jsvFindChildFromString(HEAP32[$1 + 52 >> 2], 3674, 1);
  jspEnsureIsPrototype(HEAP32[$1 + 52 >> 2], HEAP32[$1 + 32 >> 2]);
  HEAP32[$1 + 48 >> 2] = jsvSkipName(HEAP32[$1 + 32 >> 2]);
  jsvUnLock(HEAP32[$1 + 32 >> 2]);
 }
 label$6 : {
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 195) {
   jslGetNextToken();
   $0 = $1;
   label$8 : {
    if (HEAP8[$1 + 43 | 0] & 1) {
     $2 = jsvSkipNameAndUnLock(jspGetNamedVariable(jslGetTokenValueAsString()));
     break label$8;
    }
    $2 = 0;
   }
   HEAP32[$0 + 28 >> 2] = $2;
   if (!(jslMatch(128) & 1)) {
    jsvUnLock4(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 52 >> 2], HEAP32[$1 + 44 >> 2], HEAP32[$1 + 48 >> 2]);
    HEAP32[$1 + 60 >> 2] = 0;
    break label$6;
   }
   if (HEAP32[$1 + 48 >> 2]) {
    label$12 : {
     if (jsvIsFunction(HEAP32[$1 + 28 >> 2]) & 1) {
      HEAP32[$1 + 24 >> 2] = jsvObjectGetChild(HEAP32[$1 + 28 >> 2], 3674, 0);
      if (HEAP32[$1 + 24 >> 2]) {
       jsvObjectSetChild(HEAP32[$1 + 48 >> 2], 3684, HEAP32[$1 + 24 >> 2]);
       jsvObjectSetChildAndUnLock(HEAP32[$1 + 52 >> 2], 3847, jsvNewFromString(4384));
       jsvUnLock(HEAP32[$1 + 24 >> 2]);
      }
      break label$12;
     }
     HEAP32[$1 >> 2] = HEAP32[$1 + 28 >> 2];
     jsExceptionHere(2, 4483, $1);
    }
   }
   jsvUnLock(HEAP32[$1 + 28 >> 2]);
  }
  if (!(jslMatch(123) & 1)) {
   jsvUnLock3(HEAP32[$1 + 52 >> 2], HEAP32[$1 + 44 >> 2], HEAP32[$1 + 48 >> 2]);
   HEAP32[$1 + 60 >> 2] = 0;
   break label$6;
  }
  while (1) {
   label$17 : {
    if (HEAP16[HEAP32[13768] + 2 >> 1] != 128) {
     $0 = 0;
     if (HEAP16[HEAP32[13768] + 2 >> 1] != 197) {
      break label$17;
     }
    }
    $0 = jspIsInterrupted() ^ -1;
   }
   if ($0 & 1) {
    HEAP8[$1 + 23 | 0] = HEAP16[HEAP32[13768] + 2 >> 1] == 197;
    if (HEAP8[$1 + 23 | 0] & 1) {
     jslGetNextToken();
    }
    HEAP32[$1 + 16 >> 2] = jslGetTokenValueAsVar();
    if (!(jslMatch(128) & 1)) {
     jsvUnLock4(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 52 >> 2], HEAP32[$1 + 44 >> 2], HEAP32[$1 + 48 >> 2]);
     HEAP32[$1 + 60 >> 2] = 0;
     break label$6;
    }
    HEAP8[$1 + 15 | 0] = 0;
    HEAP8[$1 + 14 | 0] = 0;
    if (HEAP16[HEAP32[13768] + 2 >> 1] == 128) {
     HEAP8[$1 + 15 | 0] = jsvIsStringEqual(HEAP32[$1 + 16 >> 2], 4316) & 1;
     HEAP8[$1 + 14 | 0] = jsvIsStringEqual(HEAP32[$1 + 16 >> 2], 4320) & 1;
     if (!(HEAP8[$1 + 14 | 0] & 1 ? 0 : !(HEAP8[$1 + 15 | 0] & 1))) {
      jsvUnLock(HEAP32[$1 + 16 >> 2]);
      HEAP32[$1 + 16 >> 2] = jslGetTokenValueAsVar();
      jslGetNextToken();
     }
    }
    HEAP32[$1 + 8 >> 2] = jspeFunctionDefinition(0);
    if (!(!HEAP32[$1 + 52 >> 2] | !HEAP32[$1 + 48 >> 2])) {
     $0 = $1;
     if (HEAP8[$1 + 23 | 0] & 1) {
      $2 = HEAP32[$1 + 52 >> 2];
     } else {
      $2 = HEAP32[$1 + 48 >> 2];
     }
     HEAP32[$0 + 4 >> 2] = $2;
     label$28 : {
      if (jsvIsStringEqual(HEAP32[$1 + 16 >> 2], 4362) & 1) {
       jswrap_function_replaceWith(HEAP32[$1 + 52 >> 2], HEAP32[$1 + 8 >> 2]);
       break label$28;
      }
      label$30 : {
       if (!(HEAP8[$1 + 14 | 0] & 1 ? 0 : !(HEAP8[$1 + 15 | 0] & 1))) {
        jsvAddGetterOrSetter(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 16 >> 2], HEAP8[$1 + 15 | 0] & 1, HEAP32[$1 + 8 >> 2]);
        break label$30;
       }
       HEAP32[$1 + 16 >> 2] = jsvMakeIntoVariableName(HEAP32[$1 + 16 >> 2], 0);
       jsvSetValueOfName(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 8 >> 2]);
       jsvAddName(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 16 >> 2]);
      }
     }
    }
    jsvUnLock2(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 16 >> 2]);
    continue;
   }
   break;
  }
  jsvUnLock(HEAP32[$1 + 48 >> 2]);
  if (HEAP32[$1 + 44 >> 2]) {
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 52 >> 2], 3862, HEAP32[$1 + 44 >> 2]);
  }
  if (!(jslMatch(125) & 1)) {
   jsvUnLock(HEAP32[$1 + 52 >> 2]);
   HEAP32[$1 + 60 >> 2] = 0;
   break label$6;
  }
  HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 52 >> 2];
 }
 global$0 = $1 - -64 | 0;
 return HEAP32[$1 + 60 >> 2];
}
function tflite__ops__micro__arg_min_max__Eval_28TfLiteContext__2c_20TfLiteNode__2c_20bool_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 224 | 0;
 global$0 = $3;
 HEAP32[$3 + 216 >> 2] = $0;
 HEAP32[$3 + 212 >> 2] = $1;
 HEAP8[$3 + 211 | 0] = $2;
 HEAP32[$3 + 204 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$3 + 216 >> 2], HEAP32[$3 + 212 >> 2], 0);
 HEAP32[$3 + 200 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$3 + 216 >> 2], HEAP32[$3 + 212 >> 2], 1);
 HEAP32[$3 + 196 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$3 + 216 >> 2], HEAP32[$3 + 212 >> 2]);
 label$1 : {
  label$2 : {
   if (HEAP32[HEAP32[$3 + 200 >> 2] >> 2] == 2) {
    if (HEAP32[HEAP32[$3 + 196 >> 2] >> 2] == 2) {
     label$5 : {
      $0 = HEAP32[HEAP32[$3 + 204 >> 2] >> 2] + -1 | 0;
      if ($0 >>> 0 > 8) {
       break label$5;
      }
      label$6 : {
       switch ($0 - 1 | 0) {
       default:
        tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 176 | 0, HEAP32[$3 + 204 >> 2]);
        $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$3 + 204 >> 2]);
        $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$3 + 200 >> 2]);
        tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 144 | 0, HEAP32[$3 + 196 >> 2]);
        void_20tflite__ops__micro__arg_min_max__ArgMinMaxHelper_float_2c_20int_2c_20int__28tflite__RuntimeShape_20const__2c_20float_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int__2c_20bool_29($3 + 176 | 0, $0, $1, $3 + 144 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$3 + 196 >> 2]), HEAP8[$3 + 211 | 0] & 1);
        $0 = $3 + 176 | 0;
        tflite__RuntimeShape___RuntimeShape_28_29($3 + 144 | 0);
        break label$2;
       case 1:
        tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 120 | 0, HEAP32[$3 + 204 >> 2]);
        $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$3 + 204 >> 2]);
        $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$3 + 200 >> 2]);
        tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 96 | 0, HEAP32[$3 + 196 >> 2]);
        void_20tflite__ops__micro__arg_min_max__ArgMinMaxHelper_unsigned_20char_2c_20int_2c_20int__28tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int__2c_20bool_29($3 + 120 | 0, $0, $1, $3 + 96 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$3 + 196 >> 2]), HEAP8[$3 + 211 | 0] & 1);
        $0 = $3 + 120 | 0;
        tflite__RuntimeShape___RuntimeShape_28_29($3 + 96 | 0);
        break label$2;
       case 0:
       case 2:
       case 3:
       case 4:
       case 5:
       case 6:
        break label$5;
       case 7:
        break label$6;
       }
      }
      tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 72 | 0, HEAP32[$3 + 204 >> 2]);
      $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$3 + 204 >> 2]);
      $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$3 + 200 >> 2]);
      tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 48 | 0, HEAP32[$3 + 196 >> 2]);
      void_20tflite__ops__micro__arg_min_max__ArgMinMaxHelper_signed_20char_2c_20int_2c_20int__28tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int__2c_20bool_29($3 + 72 | 0, $0, $1, $3 + 48 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$3 + 196 >> 2]), HEAP8[$3 + 211 | 0] & 1);
      $0 = $3 + 72 | 0;
      tflite__RuntimeShape___RuntimeShape_28_29($3 + 48 | 0);
      break label$2;
     }
     $0 = HEAP32[HEAP32[$3 + 216 >> 2] + 20 >> 2];
     $1 = HEAP32[$3 + 216 >> 2];
     HEAP32[$3 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$3 + 204 >> 2] >> 2]);
     FUNCTION_TABLE[$0]($1, 44961, $3);
     HEAP32[$3 + 220 >> 2] = 1;
     break label$1;
    }
    $0 = HEAP32[HEAP32[$3 + 216 >> 2] + 20 >> 2];
    $1 = HEAP32[$3 + 216 >> 2];
    HEAP32[$3 + 16 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$3 + 196 >> 2] >> 2]);
    FUNCTION_TABLE[$0]($1, 45023, $3 + 16 | 0);
    HEAP32[$3 + 220 >> 2] = 1;
    break label$1;
   }
   $0 = HEAP32[HEAP32[$3 + 216 >> 2] + 20 >> 2];
   $1 = HEAP32[$3 + 216 >> 2];
   HEAP32[$3 + 32 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$3 + 200 >> 2] >> 2]);
   FUNCTION_TABLE[$0]($1, 45023, $3 + 32 | 0);
   HEAP32[$3 + 220 >> 2] = 1;
   break label$1;
  }
  tflite__RuntimeShape___RuntimeShape_28_29($0);
  HEAP32[$3 + 220 >> 2] = 0;
 }
 global$0 = $3 + 224 | 0;
 return HEAP32[$3 + 220 >> 2];
}
function jsvCopy($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP8[$2 + 55 | 0] = $1;
 label$1 : {
  if (jsvIsFlatString(HEAP32[$2 + 56 >> 2]) & 1) {
   HEAP32[$2 + 60 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 56 >> 2], 0, 2147483647);
   break label$1;
  }
  HEAP32[$2 + 48 >> 2] = jsvNewWithFlags(HEAPU16[HEAP32[$2 + 56 >> 2] + 14 >> 1] & 127);
  if (!HEAP32[$2 + 48 >> 2]) {
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  label$4 : {
   if (!(jsvIsStringExt(HEAP32[$2 + 56 >> 2]) & 1)) {
    $3 = jsvIsBasicString(HEAP32[$2 + 56 >> 2]) & 1;
    $0 = $2;
    $1 = 1;
    label$6 : {
     if ($3) {
      break label$6;
     }
     $3 = jsvIsNativeString(HEAP32[$2 + 56 >> 2]) & 1;
     $1 = 1;
     if ($3) {
      break label$6;
     }
     $3 = jsvIsFlashString(HEAP32[$2 + 56 >> 2]) & 1;
     $1 = 1;
     if ($3) {
      break label$6;
     }
     $1 = jsvIsNativeFunction(HEAP32[$2 + 56 >> 2]);
    }
    HEAP8[$0 + 47 | 0] = $1 & 1;
    memcpy(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 56 >> 2], HEAP8[$2 + 47 | 0] & 1 ? 10 : 4);
    if (jsvIsNativeFunction(HEAP32[$2 + 56 >> 2]) & 1) {
     jsvSetFirstChild(HEAP32[$2 + 48 >> 2], 0);
    }
    label$8 : {
     if (HEAP8[$2 + 47 | 0] & 1) {
      break label$8;
     }
    }
    break label$4;
   }
   $1 = HEAP32[$2 + 56 >> 2];
   $3 = HEAP32[$1 + 4 >> 2];
   $0 = HEAP32[$2 + 48 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$0 + 4 >> 2] = $3;
   HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  }
  label$9 : {
   if (!(HEAP8[$2 + 55 | 0] & 1)) {
    break label$9;
   }
   if (!(jsvIsName(HEAP32[$2 + 56 >> 2]) & 1)) {
    break label$9;
   }
   if (jsvGetFirstChild(HEAP32[$2 + 56 >> 2]) & 65535) {
    label$11 : {
     if (jsvIsNameWithValue(HEAP32[$2 + 56 >> 2]) & 1) {
      jsvSetFirstChild(HEAP32[$2 + 48 >> 2], jsvGetFirstChild(HEAP32[$2 + 56 >> 2]) & 65535);
      break label$11;
     }
     HEAP32[$2 + 40 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 56 >> 2]) & 65535);
     HEAP32[$2 + 36 >> 2] = jsvRef(jsvCopy(HEAP32[$2 + 40 >> 2], 1));
     jsvUnLock(HEAP32[$2 + 40 >> 2]);
     if (HEAP32[$2 + 36 >> 2]) {
      jsvSetFirstChild(HEAP32[$2 + 48 >> 2], jsvGetRef(HEAP32[$2 + 36 >> 2]) & 65535);
      jsvUnLock(HEAP32[$2 + 36 >> 2]);
     }
    }
   }
  }
  label$14 : {
   if (jsvHasCharacterData(HEAP32[$2 + 56 >> 2]) & 1) {
    HEAP32[$2 + 56 >> 2] = jsvLockAgain(HEAP32[$2 + 56 >> 2]);
    HEAP32[$2 + 32 >> 2] = jsvLockAgain(HEAP32[$2 + 48 >> 2]);
    while (1) {
     if (jsvGetLastChild(HEAP32[$2 + 56 >> 2]) & 65535) {
      HEAP32[$2 + 28 >> 2] = jsvLock(jsvGetLastChild(HEAP32[$2 + 56 >> 2]) & 65535);
      label$18 : {
       if (jsvIsStringExt(HEAP32[$2 + 28 >> 2]) & 1) {
        HEAP32[$2 + 24 >> 2] = jsvNewWithFlags(HEAPU16[HEAP32[$2 + 28 >> 2] + 14 >> 1] & 127);
        if (HEAP32[$2 + 24 >> 2]) {
         $1 = HEAP32[$2 + 28 >> 2];
         $3 = HEAP32[$1 + 4 >> 2];
         $0 = HEAP32[$2 + 24 >> 2];
         HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
         HEAP32[$0 + 4 >> 2] = $3;
         HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
         jsvSetLastChild(HEAP32[$2 + 32 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
        }
        jsvUnLock2(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 32 >> 2]);
        HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 28 >> 2];
        HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 24 >> 2];
        break label$18;
       }
       HEAP32[$2 + 20 >> 2] = jsvCopy(HEAP32[$2 + 28 >> 2], 1);
       if (HEAP32[$2 + 20 >> 2]) {
        jsvSetLastChild(HEAP32[$2 + 32 >> 2], jsvGetRef(HEAP32[$2 + 20 >> 2]) & 65535);
        jsvUnLock(HEAP32[$2 + 20 >> 2]);
       }
       jsvUnLock2(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 32 >> 2]);
       HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
       break label$1;
      }
      continue;
     }
     break;
    }
    jsvUnLock2(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 32 >> 2]);
    break label$14;
   }
   if (jsvHasChildren(HEAP32[$2 + 56 >> 2]) & 1) {
    if (HEAP8[$2 + 55 | 0] & 1) {
     HEAP16[$2 + 18 >> 1] = jsvGetFirstChild(HEAP32[$2 + 56 >> 2]);
     while (1) {
      if (HEAPU16[$2 + 18 >> 1]) {
       HEAP32[$2 + 12 >> 2] = jsvLock(HEAPU16[$2 + 18 >> 1]);
       HEAP32[$2 + 8 >> 2] = jsvCopyNameOnly(HEAP32[$2 + 12 >> 2], 1, 1);
       if (HEAP32[$2 + 8 >> 2]) {
        jsvAddName(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 8 >> 2]);
        jsvUnLock(HEAP32[$2 + 8 >> 2]);
       }
       HEAP16[$2 + 18 >> 1] = jsvGetNextSibling(HEAP32[$2 + 12 >> 2]);
       jsvUnLock(HEAP32[$2 + 12 >> 2]);
       continue;
      }
      break;
     }
    }
   }
  }
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
 }
 global$0 = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}
function ftoa_bounded_extra($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 96 | 0;
 global$0 = $5;
 HEAPF64[$5 + 88 >> 3] = $0;
 HEAP32[$5 + 84 >> 2] = $1;
 HEAP32[$5 + 80 >> 2] = $2;
 HEAP32[$5 + 76 >> 2] = $3;
 HEAP32[$5 + 72 >> 2] = $4;
 HEAPF64[$5 + 64 >> 3] = 1e-7;
 $1 = __DOUBLE_BITS(HEAPF64[$5 + 88 >> 3]);
 $2 = i64toi32_i32$HIGH_BITS & 2147483647;
 label$1 : {
  if (!(($2 | 0) == 2146435072 & $1 >>> 0 <= 0 | $2 >>> 0 < 2146435072)) {
   strcpy(HEAP32[$5 + 84 >> 2], 3616);
   break label$1;
  }
  $1 = __DOUBLE_BITS(HEAPF64[$5 + 88 >> 3]);
  $2 = i64toi32_i32$HIGH_BITS & 2147483647;
  label$4 : {
   if (($2 | 0) == 2146435072 & $1 >>> 0 >= 0 | $2 >>> 0 > 2146435072) {
    if (HEAPF64[$5 + 88 >> 3] < 0) {
     strcpy(HEAP32[$5 + 84 >> 2], 3620);
     break label$4;
    }
    strcpy(HEAP32[$5 + 84 >> 2], 3630);
    break label$4;
   }
   if (HEAPF64[$5 + 88 >> 3] < 0) {
    $1 = HEAP32[$5 + 80 >> 2] + -1 | 0;
    HEAP32[$5 + 80 >> 2] = $1;
    if ($1 >>> 0 <= 0) {
     HEAP8[HEAP32[$5 + 84 >> 2]] = 0;
     break label$1;
    }
    $1 = HEAP32[$5 + 84 >> 2];
    HEAP32[$5 + 84 >> 2] = $1 + 1;
    HEAP8[$1 | 0] = 45;
    HEAPF64[$5 + 88 >> 3] = -HEAPF64[$5 + 88 >> 3];
   }
   $0 = HEAPF64[$5 + 88 >> 3] + 1e-7;
   label$10 : {
    if (Math_abs($0) < 2147483648) {
     $1 = ~~$0;
     break label$10;
    }
    $1 = -2147483648;
   }
   $0 = HEAPF64[$5 + 88 >> 3];
   label$12 : {
    if (Math_abs($0) < 2147483648) {
     $2 = ~~$0;
     break label$12;
    }
    $2 = -2147483648;
   }
   if (($1 | 0) == ($2 + 1 | 0)) {
    $1 = $5;
    $0 = HEAPF64[$5 + 88 >> 3];
    label$15 : {
     if (Math_abs($0) < 2147483648) {
      $2 = ~~$0;
      break label$15;
     }
     $2 = -2147483648;
    }
    HEAPF64[$1 + 88 >> 3] = $2 + 1 | 0;
   }
   HEAPF64[$5 + 56 >> 3] = 1;
   while (1) {
    if (HEAPF64[$5 + 56 >> 3] * +HEAP32[$5 + 76 >> 2] <= HEAPF64[$5 + 88 >> 3]) {
     HEAPF64[$5 + 56 >> 3] = HEAPF64[$5 + 56 >> 3] * +HEAP32[$5 + 76 >> 2];
     continue;
    }
    break;
   }
   while (1) {
    if (HEAPF64[$5 + 56 >> 3] >= 1) {
     $1 = $5;
     $0 = HEAPF64[$5 + 88 >> 3] / HEAPF64[$5 + 56 >> 3];
     label$21 : {
      if (Math_abs($0) < 2147483648) {
       $2 = ~~$0;
       break label$21;
      }
      $2 = -2147483648;
     }
     HEAP32[$1 + 52 >> 2] = $2;
     HEAPF64[$5 + 88 >> 3] = HEAPF64[$5 + 88 >> 3] - +HEAP32[$5 + 52 >> 2] * HEAPF64[$5 + 56 >> 3];
     $1 = HEAP32[$5 + 80 >> 2] + -1 | 0;
     HEAP32[$5 + 80 >> 2] = $1;
     if ($1 >>> 0 <= 0) {
      HEAP8[HEAP32[$5 + 84 >> 2]] = 0;
      break label$1;
     }
     $1 = itoch(HEAP32[$5 + 52 >> 2]);
     $2 = HEAP32[$5 + 84 >> 2];
     HEAP32[$5 + 84 >> 2] = $2 + 1;
     HEAP8[$2 | 0] = $1;
     HEAPF64[$5 + 56 >> 3] = HEAPF64[$5 + 56 >> 3] / +HEAP32[$5 + 76 >> 2];
     continue;
    }
    break;
   }
   if (!(HEAP32[$5 + 72 >> 2] <= 0 ? !(HEAPF64[$5 + 88 >> 3] > 0 ? HEAP32[$5 + 72 >> 2] < 0 : 0) : 0)) {
    HEAP8[$5 + 51 | 0] = 0;
    HEAPF64[$5 + 88 >> 3] = HEAPF64[$5 + 88 >> 3] * +HEAP32[$5 + 76 >> 2];
    while (1) {
     label$28 : {
      if (!(HEAP32[$5 + 72 >> 2] <= -12 | HEAP32[$5 + 72 >> 2] >= 0)) {
       $1 = 1;
       if (HEAPF64[$5 + 88 >> 3] > 1e-7) {
        break label$28;
       }
      }
      $1 = HEAP32[$5 + 72 >> 2] > 0;
     }
     if ($1) {
      $1 = $5;
      $0 = HEAPF64[$5 + 88 >> 3] + (HEAP32[$5 + 72 >> 2] == 1 ? .5 : 1e-8);
      label$31 : {
       if (Math_abs($0) < 2147483648) {
        $2 = ~~$0;
        break label$31;
       }
       $2 = -2147483648;
      }
      HEAP32[$1 + 44 >> 2] = $2;
      HEAPF64[$5 + 88 >> 3] = (HEAPF64[$5 + 88 >> 3] - +HEAP32[$5 + 44 >> 2]) * +HEAP32[$5 + 76 >> 2];
      if (HEAP32[$5 + 44 >> 2] == HEAP32[$5 + 76 >> 2]) {
       HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 76 >> 2] - 1;
      }
      if (!(HEAP8[$5 + 51 | 0] & 1)) {
       HEAP8[$5 + 51 | 0] = 1;
       $1 = HEAP32[$5 + 80 >> 2] + -1 | 0;
       HEAP32[$5 + 80 >> 2] = $1;
       if ($1 >>> 0 <= 0) {
        HEAP8[HEAP32[$5 + 84 >> 2]] = 0;
        break label$1;
       }
       $1 = HEAP32[$5 + 84 >> 2];
       HEAP32[$5 + 84 >> 2] = $1 + 1;
       HEAP8[$1 | 0] = 46;
      }
      $1 = HEAP32[$5 + 80 >> 2] + -1 | 0;
      HEAP32[$5 + 80 >> 2] = $1;
      if ($1 >>> 0 <= 0) {
       HEAP8[HEAP32[$5 + 84 >> 2]] = 0;
       break label$1;
      }
      $1 = itoch(HEAP32[$5 + 44 >> 2]);
      $2 = HEAP32[$5 + 84 >> 2];
      HEAP32[$5 + 84 >> 2] = $2 + 1;
      HEAP8[$2 | 0] = $1;
      HEAP32[$5 + 72 >> 2] = HEAP32[$5 + 72 >> 2] + -1;
      continue;
     }
     break;
    }
   }
   $1 = HEAP32[$5 + 84 >> 2];
   HEAP32[$5 + 84 >> 2] = $1 + 1;
   HEAP8[$1 | 0] = 0;
  }
 }
 global$0 = $5 + 96 | 0;
}
function jsvGarbageCollect() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 48 | 0;
 global$0 = $0;
 label$1 : {
  if (HEAP32[13770]) {
   HEAP32[$0 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[13770] = 2;
  HEAP16[$0 + 42 >> 1] = 1;
  while (1) {
   if (HEAPU16[$0 + 42 >> 1] <= HEAPU32[13337]) {
    HEAP32[$0 + 36 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 42 >> 1]);
    if (HEAPU16[HEAP32[$0 + 36 >> 2] + 14 >> 1] & 63) {
     $1 = HEAP32[$0 + 36 >> 2];
     HEAP16[$1 + 14 >> 1] = HEAPU16[$1 + 14 >> 1] | 128;
     if (jsvIsFlatString(HEAP32[$0 + 36 >> 2]) & 1) {
      HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + jsvGetFlatStringBlocks(HEAP32[$0 + 36 >> 2]);
     }
    }
    HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + 1;
    continue;
   }
   break;
  }
  HEAP16[$0 + 42 >> 1] = 1;
  while (1) {
   if (HEAPU16[$0 + 42 >> 1] <= HEAPU32[13337]) {
    HEAP32[$0 + 32 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 42 >> 1]);
    label$9 : {
     if (!(HEAPU16[HEAP32[$0 + 32 >> 2] + 14 >> 1] & 128)) {
      break label$9;
     }
     if ((jsvGetLocks(HEAP32[$0 + 32 >> 2]) & 255) <= 0) {
      break label$9;
     }
     jsvGarbageCollectMarkUsed(HEAP32[$0 + 32 >> 2]);
    }
    if (jsvIsFlatString(HEAP32[$0 + 32 >> 2]) & 1) {
     HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + jsvGetFlatStringBlocks(HEAP32[$0 + 32 >> 2]);
    }
    HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + 1;
    continue;
   }
   break;
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP16[27542] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP16[$0 + 42 >> 1] = 1;
  while (1) {
   if (HEAPU16[$0 + 42 >> 1] <= HEAPU32[13337]) {
    HEAP32[$0 + 20 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 42 >> 1]);
    label$13 : {
     if (HEAPU16[HEAP32[$0 + 20 >> 2] + 14 >> 1] & 128) {
      if (jsvIsFlatString(HEAP32[$0 + 20 >> 2]) & 1) {
       HEAP32[$0 + 16 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 20 >> 2]);
       HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 16 >> 2] + HEAP32[$0 + 28 >> 2];
       HEAP16[HEAP32[$0 + 20 >> 2] + 14 >> 1] = 0;
       label$16 : {
        if (HEAP32[$0 + 24 >> 2]) {
         jsvSetNextSibling(HEAP32[$0 + 24 >> 2], HEAPU16[$0 + 42 >> 1]);
         break label$16;
        }
        HEAP16[27542] = HEAPU16[$0 + 42 >> 1];
       }
       HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 20 >> 2];
       while (1) {
        label$19 : {
         $1 = HEAP32[$0 + 16 >> 2];
         HEAP32[$0 + 16 >> 2] = $1 + -1;
         if ($1 >>> 0 <= 0) {
          break label$19;
         }
         HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + 1;
         HEAP32[$0 + 20 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 42 >> 1]);
         HEAP16[HEAP32[$0 + 20 >> 2] + 14 >> 1] = 0;
         label$20 : {
          if (HEAP32[$0 + 24 >> 2]) {
           jsvSetNextSibling(HEAP32[$0 + 24 >> 2], HEAPU16[$0 + 42 >> 1]);
           break label$20;
          }
          HEAP16[27542] = HEAPU16[$0 + 42 >> 1];
         }
         HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 20 >> 2];
         continue;
        }
        break;
       }
       break label$13;
      }
      if (jsvHasSingleChild(HEAP32[$0 + 20 >> 2]) & 1) {
       HEAP16[$0 + 14 >> 1] = jsvGetFirstChild(HEAP32[$0 + 20 >> 2]);
       if (HEAPU16[$0 + 14 >> 1]) {
        HEAP32[$0 + 8 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 14 >> 1]);
        if (!(!HEAPU16[HEAP32[$0 + 8 >> 2] + 14 >> 1] | HEAPU16[HEAP32[$0 + 8 >> 2] + 14 >> 1] & 128)) {
         jsvUnRef(HEAP32[$0 + 8 >> 2]);
        }
       }
      }
      HEAP16[HEAP32[$0 + 20 >> 2] + 14 >> 1] = 0;
      label$25 : {
       if (HEAP32[$0 + 24 >> 2]) {
        jsvSetNextSibling(HEAP32[$0 + 24 >> 2], HEAPU16[$0 + 42 >> 1]);
        break label$25;
       }
       HEAP16[27542] = HEAPU16[$0 + 42 >> 1];
      }
      HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 20 >> 2];
      HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 28 >> 2] + 1;
      break label$13;
     }
     label$27 : {
      if (jsvIsFlatString(HEAP32[$0 + 20 >> 2]) & 1) {
       HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + jsvGetFlatStringBlocks(HEAP32[$0 + 20 >> 2]);
       break label$27;
      }
      if (!HEAPU16[HEAP32[$0 + 20 >> 2] + 14 >> 1]) {
       label$30 : {
        if (HEAP32[$0 + 24 >> 2]) {
         jsvSetNextSibling(HEAP32[$0 + 24 >> 2], HEAPU16[$0 + 42 >> 1]);
         break label$30;
        }
        HEAP16[27542] = HEAPU16[$0 + 42 >> 1];
       }
       HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 20 >> 2];
      }
     }
    }
    HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$0 + 24 >> 2]) {
   jsvSetNextSibling(HEAP32[$0 + 24 >> 2], 0);
  }
  HEAP32[13770] = 0;
  HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 28 >> 2];
 }
 global$0 = $0 + 48 | 0;
 return HEAP32[$0 + 44 >> 2];
}
function jslLexString() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = global$0 - 48 | 0;
 global$0 = $0;
 HEAP8[$0 + 47 | 0] = HEAPU8[HEAP32[13768]];
 $1 = jsvNewFromEmptyString();
 HEAP32[HEAP32[13768] + 96 >> 2] = $1;
 label$1 : {
  if (!HEAP32[HEAP32[13768] + 96 >> 2]) {
   HEAP16[HEAP32[13768] + 2 >> 1] = 0;
   break label$1;
  }
  jsvStringIteratorNew($0 + 24 | 0, HEAP32[HEAP32[13768] + 96 >> 2], 0);
  jslGetNextCh();
  while (1) {
   label$4 : {
    if (!(HEAP8[HEAP32[13768]] ? HEAP8[HEAP32[13768]] != HEAP8[$0 + 47 | 0] : 0)) {
     break label$4;
    }
    label$7 : {
     if (HEAP8[HEAP32[13768]] == 92) {
      jslGetNextCh();
      HEAP8[$0 + 23 | 0] = HEAPU8[HEAP32[13768]];
      label$9 : {
       label$10 : {
        $1 = HEAP8[HEAP32[13768]] + -98 | 0;
        if ($1 >>> 0 > 22) {
         break label$10;
        }
        label$11 : {
         switch ($1 - 1 | 0) {
         case 11:
          HEAP8[$0 + 23 | 0] = 10;
          jslGetNextCh();
          break label$9;
         default:
          HEAP8[$0 + 23 | 0] = 8;
          jslGetNextCh();
          break label$9;
         case 3:
          HEAP8[$0 + 23 | 0] = 12;
          jslGetNextCh();
          break label$9;
         case 15:
          HEAP8[$0 + 23 | 0] = 13;
          jslGetNextCh();
          break label$9;
         case 17:
          HEAP8[$0 + 23 | 0] = 9;
          jslGetNextCh();
          break label$9;
         case 19:
          HEAP8[$0 + 23 | 0] = 11;
          jslGetNextCh();
          break label$9;
         case 0:
         case 1:
         case 2:
         case 4:
         case 5:
         case 6:
         case 7:
         case 8:
         case 9:
         case 10:
         case 12:
         case 13:
         case 14:
         case 16:
         case 20:
          break label$10;
         case 18:
         case 21:
          break label$11;
         }
        }
        $1 = $0 + 18 | 0;
        HEAP8[$1 + 4 | 0] = HEAPU8[1875];
        $2 = HEAPU8[1871] | HEAPU8[1872] << 8 | (HEAPU8[1873] << 16 | HEAPU8[1874] << 24);
        HEAP8[$1 | 0] = $2;
        HEAP8[$1 + 1 | 0] = $2 >>> 8;
        HEAP8[$1 + 2 | 0] = $2 >>> 16;
        HEAP8[$1 + 3 | 0] = $2 >>> 24;
        if (HEAP8[HEAP32[13768]] == 117) {
         jslGetNextCh();
         jslGetNextCh();
        }
        $1 = $0 + 18 | 0;
        jslGetNextCh();
        HEAP8[$0 + 20 | 0] = HEAPU8[HEAP32[13768]];
        jslGetNextCh();
        HEAP8[$0 + 21 | 0] = HEAPU8[HEAP32[13768]];
        jslGetNextCh();
        HEAP8[$0 + 23 | 0] = stringToInt($1);
        break label$9;
       }
       label$19 : {
        if (!(HEAP8[HEAP32[13768]] < 48 | HEAP8[HEAP32[13768]] > 55)) {
         $1 = $0 + 13 | 0;
         HEAP8[$1 + 4 | 0] = HEAPU8[1880];
         $2 = HEAPU8[1876] | HEAPU8[1877] << 8 | (HEAPU8[1878] << 16 | HEAPU8[1879] << 24);
         HEAP8[$1 | 0] = $2;
         HEAP8[$1 + 1 | 0] = $2 >>> 8;
         HEAP8[$1 + 2 | 0] = $2 >>> 16;
         HEAP8[$1 + 3 | 0] = $2 >>> 24;
         HEAP8[$0 + 14 | 0] = HEAPU8[HEAP32[13768]];
         HEAP32[$0 + 8 >> 2] = 2;
         jslGetNextCh();
         if (!(HEAP8[HEAP32[13768]] < 48 | HEAP8[HEAP32[13768]] > 55)) {
          $1 = HEAPU8[HEAP32[13768]];
          $2 = HEAP32[$0 + 8 >> 2];
          HEAP32[$0 + 8 >> 2] = $2 + 1;
          HEAP8[$2 + ($0 + 13 | 0) | 0] = $1;
          jslGetNextCh();
          if (!(HEAP8[HEAP32[13768]] < 48 | HEAP8[HEAP32[13768]] > 55)) {
           $1 = HEAPU8[HEAP32[13768]];
           $2 = HEAP32[$0 + 8 >> 2];
           HEAP32[$0 + 8 >> 2] = $2 + 1;
           HEAP8[$2 + ($0 + 13 | 0) | 0] = $1;
           jslGetNextCh();
          }
         }
         $1 = $0 + 13 | 0;
         HEAP8[$1 + HEAP32[$0 + 8 >> 2] | 0] = 0;
         HEAP8[$0 + 23 | 0] = stringToInt($1);
         break label$19;
        }
        jslGetNextCh();
       }
      }
      $1 = $0 + 24 | 0;
      jslTokenAppendChar(HEAP8[$0 + 23 | 0]);
      jsvStringIteratorAppend($1, HEAP8[$0 + 23 | 0]);
      break label$7;
     }
     if (!(HEAP8[$0 + 47 | 0] == 96 | HEAP8[HEAP32[13768]] != 10)) {
      break label$4;
     }
     $1 = $0 + 24 | 0;
     jslTokenAppendChar(HEAP8[HEAP32[13768]]);
     jsvStringIteratorAppend($1, HEAP8[HEAP32[13768]]);
     jslGetNextCh();
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree($0 + 24 | 0);
  label$24 : {
   if (HEAP8[$0 + 47 | 0] == 96) {
    HEAP16[HEAP32[13768] + 2 >> 1] = 133;
    break label$24;
   }
   HEAP16[HEAP32[13768] + 2 >> 1] = 131;
  }
  if (HEAP8[HEAP32[13768]] != HEAP8[$0 + 47 | 0]) {
   $1 = HEAP32[13768];
   HEAP16[$1 + 2 >> 1] = HEAPU16[$1 + 2 >> 1] + 1;
  }
  jslGetNextCh();
 }
 global$0 = $0 + 48 | 0;
}
function tflite__ops__micro__AllOpsResolver__AllOpsResolver_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__MicroMutableOpResolver__MicroMutableOpResolver_28_29($0);
 HEAP32[$0 >> 2] = 47172;
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 4, 53564, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 9, 54140, 4);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 17, 53756, 2);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 25, 53788, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 14, 53660, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 27, 54108, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 3, 53692, 3);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 1, 53724, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 101, 54236, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 66, 54268, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 108, 54300, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 73, 54332, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 75, 54364, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 76, 54396, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 92, 54428, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 54, 53820, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 8, 54076, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 55, 54172, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 57, 54204, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 56, 53884, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 79, 53916, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 22, 53532, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 104, 53852, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 116, 54492, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 45, 54460, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 83, 53500, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 49, 54012, 3);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 88, 53948, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 59, 54044, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 0, 53980, 1);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 114, 53596, 4);
 tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, 6, 53628, 4);
 global$0 = $1 + 16 | 0;
}
function terminalSendChar($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 160 | 0;
 global$0 = $1;
 HEAP8[$1 + 159 | 0] = $0;
 label$1 : {
  if (!HEAP8[252038]) {
   if (HEAP8[$1 + 159 | 0] == 8) {
    if (HEAPU8[252036] > 0) {
     HEAP8[252036] = HEAPU8[252036] + -1;
    }
    break label$1;
   }
   label$5 : {
    if (HEAP8[$1 + 159 | 0] == 10) {
     HEAP8[252036] = 0;
     HEAP8[53496] = HEAPU8[53496] + 1;
     while (1) {
      if (HEAPU8[53496] >= 30) {
       terminalScroll();
       continue;
      }
      break;
     }
     break label$5;
    }
    label$9 : {
     if (HEAP8[$1 + 159 | 0] == 13) {
      HEAP8[252036] = 0;
      break label$9;
     }
     label$11 : {
      if (HEAP8[$1 + 159 | 0] == 27) {
       HEAP8[252038] = 27;
       break label$11;
      }
      if (!(HEAP8[$1 + 159 | 0] == 19 | HEAP8[$1 + 159 | 0] == 17)) {
       if (terminalGetGFX($1 + 88 | 0) & 1) {
        HEAP16[$1 + 86 >> 1] = Math_imul(HEAPU8[252036], 6);
        HEAP16[$1 + 84 >> 1] = ((HEAPU8[$1 + 102 | 0] | HEAPU8[$1 + 103 | 0] << 8) + (HEAPU8[53496] << 3) | 0) - 240;
        $0 = $1 + 88 | 0;
        graphicsDrawChar6x8($0, HEAP16[$1 + 86 >> 1], HEAP16[$1 + 84 >> 1], HEAP8[$1 + 159 | 0], 1, 1);
        terminalSetGFX($0);
       }
       if (HEAPU8[252036] < 255) {
        HEAP8[252036] = HEAPU8[252036] + 1;
       }
      }
     }
    }
   }
   break label$1;
  }
  label$17 : {
   if (HEAP8[252038] == 27) {
    if (HEAP8[252039] == 91) {
     if (HEAP8[252040] == 63) {
      if (HEAP8[252041] == 55) {
       terminalControlCharsReset();
       break label$17;
      }
      label$22 : {
       if (HEAP8[$1 + 159 | 0] == 55) {
        HEAP8[252041] = 55;
        break label$22;
       }
       terminalControlCharsReset();
      }
      break label$17;
     }
     label$24 : {
      if (HEAP8[$1 + 159 | 0] == 63) {
       HEAP8[252040] = 63;
       break label$24;
      }
      terminalControlCharsReset();
      $0 = HEAP8[$1 + 159 | 0] + -65 | 0;
      label$26 : {
       if ($0 >>> 0 > 9) {
        break label$26;
       }
       label$27 : {
        switch ($0 - 1 | 0) {
        default:
         if (HEAPU8[53496] > 0) {
          HEAP8[53496] = HEAPU8[53496] + -1;
         }
         break label$26;
        case 0:
         HEAP8[53496] = HEAPU8[53496] + 1;
         while (1) {
          if (HEAPU8[53496] >= 30) {
           terminalScroll();
           continue;
          }
          break;
         }
         break label$26;
        case 1:
         if (HEAPU8[252036] < 255) {
          HEAP8[252036] = HEAPU8[252036] + 1;
         }
         break label$26;
        case 2:
         if (HEAPU8[252036] > 0) {
          HEAP8[252036] = HEAPU8[252036] + -1;
         }
         break label$26;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
         break label$26;
        case 8:
         break label$27;
        }
       }
       if (terminalGetGFX($1 + 16 | 0) & 1) {
        HEAP16[$1 + 14 >> 1] = Math_imul(HEAPU8[252036], 6);
        HEAP16[$1 + 12 >> 1] = ((HEAPU8[$1 + 30 | 0] | HEAPU8[$1 + 31 | 0] << 8) + (HEAPU8[53496] << 3) | 0) - 240;
        $0 = $1;
        if ((HEAPU8[$1 + 24 | 0] | HEAPU8[$1 + 25 | 0] << 8 | (HEAPU8[$1 + 26 | 0] << 16 | HEAPU8[$1 + 27 | 0] << 24)) & 16) {
         $2 = HEAPU8[$1 + 30 | 0] | HEAPU8[$1 + 31 | 0] << 8;
        } else {
         $2 = HEAPU8[$1 + 28 | 0] | HEAPU8[$1 + 29 | 0] << 8;
        }
        HEAP16[$0 + 10 >> 1] = $2;
        $0 = $1;
        if ((HEAPU8[$1 + 24 | 0] | HEAPU8[$1 + 25 | 0] << 8 | (HEAPU8[$1 + 26 | 0] << 16 | HEAPU8[$1 + 27 | 0] << 24)) & 16) {
         $2 = HEAPU8[$1 + 28 | 0] | HEAPU8[$1 + 29 | 0] << 8;
        } else {
         $2 = HEAPU8[$1 + 30 | 0] | HEAPU8[$1 + 31 | 0] << 8;
        }
        HEAP16[$0 + 8 >> 1] = $2;
        $0 = $1 + 16 | 0;
        graphicsFillRect($0, HEAP16[$1 + 14 >> 1], HEAP16[$1 + 12 >> 1], HEAP16[$1 + 10 >> 1] - 1 | 0, HEAP16[$1 + 12 >> 1] + 7 | 0, HEAPU8[$1 + 37 | 0] | HEAPU8[$1 + 38 | 0] << 8 | (HEAPU8[$1 + 39 | 0] << 16 | HEAPU8[$1 + 40 | 0] << 24));
        graphicsFillRect($0, 0, HEAP16[$1 + 12 >> 1] + 8 | 0, HEAP16[$1 + 10 >> 1] - 1 | 0, HEAP16[$1 + 8 >> 1] - 1 | 0, HEAPU8[$1 + 37 | 0] | HEAPU8[$1 + 38 | 0] << 8 | (HEAPU8[$1 + 39 | 0] << 16 | HEAPU8[$1 + 40 | 0] << 24));
        terminalSetGFX($0);
       }
      }
     }
     break label$17;
    }
    label$42 : {
     if (HEAP8[$1 + 159 | 0] == 91) {
      HEAP8[252039] = 91;
      break label$42;
     }
     terminalControlCharsReset();
    }
    break label$17;
   }
   terminalControlCharsReset();
  }
 }
 global$0 = $1 + 160 | 0;
}
function tflite__ops__micro__activations__SoftmaxEval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 $3 = $2 + 40 | 0;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 68 >> 2] = $1;
 HEAP32[$2 + 64 >> 2] = HEAP32[HEAP32[$2 + 68 >> 2] + 20 >> 2];
 HEAP32[$2 + 60 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 68 >> 2], 0);
 HEAP32[$2 + 56 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 68 >> 2]);
 tflite__ops__micro__activations___28anonymous_20namespace_29__OpData__OpData_28_29($3);
 HEAP32[$2 + 36 >> 2] = $3;
 label$1 : {
  if (tflite__ops__micro__activations___28anonymous_20namespace_29__CalculateSoftmaxOpData_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteSoftmaxParams_20const__2c_20tflite__ops__micro__activations___28anonymous_20namespace_29__OpData__29(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 60 >> 2], HEAP32[$2 + 56 >> 2], HEAP32[$2 + 64 >> 2], HEAP32[$2 + 36 >> 2])) {
   HEAP32[$2 + 76 >> 2] = 1;
   break label$1;
  }
  label$3 : {
   $0 = HEAP32[HEAP32[$2 + 60 >> 2] >> 2] + -1 | 0;
   if ($0 >>> 0 > 2) {
    break label$3;
   }
   label$4 : {
    switch ($0 - 1 | 0) {
    default:
     if ((tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 60 >> 2]) | 0) == 1) {
      tflite__ops__micro__activations__Softmax1DFloat_28TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteSoftmaxParams__29(HEAP32[$2 + 60 >> 2], HEAP32[$2 + 56 >> 2], HEAP32[$2 + 64 >> 2]);
      HEAP32[$2 + 76 >> 2] = 0;
      break label$1;
     }
     if ((tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 60 >> 2]) | 0) == 2) {
      tflite__ops__micro__activations__Softmax2DFloat_28TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteSoftmaxParams__29(HEAP32[$2 + 60 >> 2], HEAP32[$2 + 56 >> 2], HEAP32[$2 + 64 >> 2]);
      HEAP32[$2 + 76 >> 2] = 0;
      break label$1;
     }
     if ((tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 60 >> 2]) | 0) == 4) {
      tflite__ops__micro__activations__Softmax4DFloat_28TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteSoftmaxParams__29(HEAP32[$2 + 60 >> 2], HEAP32[$2 + 56 >> 2], HEAP32[$2 + 64 >> 2]);
      HEAP32[$2 + 76 >> 2] = 0;
      break label$1;
     }
     $0 = HEAP32[HEAP32[$2 + 72 >> 2] + 20 >> 2];
     $1 = HEAP32[$2 + 72 >> 2];
     HEAP32[$2 + 16 >> 2] = tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 60 >> 2]);
     FUNCTION_TABLE[$0]($1, 44221, $2 + 16 | 0);
     HEAP32[$2 + 76 >> 2] = 1;
     break label$1;
    case 0:
     break label$3;
    case 1:
     break label$4;
    }
   }
   if ((tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 60 >> 2]) | 0) == 1) {
    tflite__ops__micro__activations__Softmax1DQuantized_28TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteSoftmaxParams__2c_20tflite__ops__micro__activations___28anonymous_20namespace_29__OpData__29(HEAP32[$2 + 60 >> 2], HEAP32[$2 + 56 >> 2], HEAP32[$2 + 64 >> 2], HEAP32[$2 + 36 >> 2]);
    HEAP32[$2 + 76 >> 2] = 0;
    break label$1;
   }
   if ((tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 60 >> 2]) | 0) == 2) {
    tflite__ops__micro__activations__Softmax2DQuantized_28TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteSoftmaxParams__2c_20tflite__ops__micro__activations___28anonymous_20namespace_29__OpData__29(HEAP32[$2 + 60 >> 2], HEAP32[$2 + 56 >> 2], HEAP32[$2 + 64 >> 2], HEAP32[$2 + 36 >> 2]);
    HEAP32[$2 + 76 >> 2] = 0;
    break label$1;
   }
   if ((tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 60 >> 2]) | 0) == 4) {
    tflite__ops__micro__activations__Softmax4DQuantized_28TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteSoftmaxParams__2c_20tflite__ops__micro__activations___28anonymous_20namespace_29__OpData__29(HEAP32[$2 + 60 >> 2], HEAP32[$2 + 56 >> 2], HEAP32[$2 + 64 >> 2], HEAP32[$2 + 36 >> 2]);
    HEAP32[$2 + 76 >> 2] = 0;
    break label$1;
   }
   $0 = HEAP32[HEAP32[$2 + 72 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 72 >> 2];
   HEAP32[$2 + 32 >> 2] = tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 60 >> 2]);
   FUNCTION_TABLE[$0]($1, 44278, $2 + 32 | 0);
   HEAP32[$2 + 76 >> 2] = 1;
   break label$1;
  }
  $0 = HEAP32[HEAP32[$2 + 72 >> 2] + 20 >> 2];
  $1 = HEAP32[$2 + 72 >> 2];
  HEAP32[$2 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 60 >> 2] >> 2]);
  FUNCTION_TABLE[$0]($1, 44331, $2);
  HEAP32[$2 + 76 >> 2] = 1;
 }
 global$0 = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}
function jswrap_storagefile_read_internal($0, $1) {
 var $2 = 0;
 $2 = global$0 - 176 | 0;
 global$0 = $2;
 HEAP32[$2 + 168 >> 2] = $0;
 HEAP32[$2 + 164 >> 2] = $1;
 HEAP8[$2 + 163 | 0] = HEAP32[$2 + 164 >> 2] < 0;
 HEAP8[$2 + 162 | 0] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$2 + 168 >> 2], 37020, 0));
 label$1 : {
  if (HEAP8[$2 + 162 | 0] != 114) {
   jsExceptionHere(1, 37025, 0);
   HEAP32[$2 + 172 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 156 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$2 + 168 >> 2], 37015, 0));
  if (!HEAP32[$2 + 156 >> 2]) {
   HEAP32[$2 + 172 >> 2] = 0;
   break label$1;
  }
  $0 = $2 + 120 | 0;
  HEAP32[$2 + 152 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$2 + 168 >> 2], 37008, 0));
  HEAP32[$2 + 148 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$2 + 168 >> 2], 37002, 0));
  jsfNameFromVarAndUnLock($0, jsvObjectGetChild(HEAP32[$2 + 168 >> 2], 36997, 0));
  HEAP32[$2 + 116 >> 2] = 27;
  while (1) {
   if (HEAP32[$2 + 116 >> 2] ? !HEAP8[(HEAP32[$2 + 116 >> 2] + $2 | 0) + 119 | 0] : 0) {
    HEAP32[$2 + 116 >> 2] = HEAP32[$2 + 116 >> 2] + -1;
    continue;
   }
   break;
  }
  HEAP8[HEAP32[$2 + 116 >> 2] + ($2 + 120 | 0) | 0] = HEAP32[$2 + 148 >> 2];
  HEAP32[$2 + 112 >> 2] = 0;
  if (HEAP8[$2 + 163 | 0] & 1) {
   HEAP32[$2 + 164 >> 2] = 32;
  }
  while (1) {
   label$10 : {
    if (!HEAP32[$2 + 164 >> 2]) {
     break label$10;
    }
    HEAP32[$2 + 76 >> 2] = 992 - HEAP32[$2 + 152 >> 2];
    if (HEAP32[$2 + 76 >> 2] <= 0) {
     HEAP32[$2 + 152 >> 2] = 0;
     label$12 : {
      if (HEAP32[$2 + 148 >> 2] == 255) {
       HEAP32[$2 + 156 >> 2] = 0;
       break label$12;
      }
      HEAP32[$2 + 148 >> 2] = HEAP32[$2 + 148 >> 2] + 1;
      HEAP8[HEAP32[$2 + 116 >> 2] + ($2 + 120 | 0) | 0] = HEAP32[$2 + 148 >> 2];
      HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 144 >> 2];
      $0 = HEAP32[$2 + 140 >> 2];
      HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 136 >> 2];
      HEAP32[$2 + 20 >> 2] = $0;
      $0 = HEAP32[$2 + 132 >> 2];
      HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 128 >> 2];
      HEAP32[$2 + 12 >> 2] = $0;
      $0 = HEAP32[$2 + 124 >> 2];
      HEAP32[$2 >> 2] = HEAP32[$2 + 120 >> 2];
      HEAP32[$2 + 4 >> 2] = $0;
      HEAP32[$2 + 156 >> 2] = jsfFindFile($2, $2 + 40 | 0);
     }
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 168 >> 2], 37015, jsvNewFromInteger(HEAP32[$2 + 156 >> 2]));
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 168 >> 2], 37008, jsvNewFromInteger(HEAP32[$2 + 152 >> 2]));
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 168 >> 2], 37002, jsvNewFromInteger(HEAP32[$2 + 148 >> 2]));
     HEAP32[$2 + 76 >> 2] = 992;
     if (!HEAP32[$2 + 156 >> 2]) {
      HEAP32[$2 + 172 >> 2] = HEAP32[$2 + 112 >> 2];
      break label$1;
     }
    }
    HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 164 >> 2];
    if (HEAP32[$2 + 36 >> 2] > 32) {
     HEAP32[$2 + 36 >> 2] = 32;
    }
    if (HEAP32[$2 + 36 >> 2] > HEAP32[$2 + 76 >> 2]) {
     HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 76 >> 2];
    }
    jshFlashRead($2 + 80 | 0, HEAP32[$2 + 156 >> 2] + HEAP32[$2 + 152 >> 2] | 0, HEAP32[$2 + 36 >> 2]);
    HEAP32[$2 + 32 >> 2] = 0;
    while (1) {
     label$18 : {
      if (HEAP32[$2 + 32 >> 2] >= HEAP32[$2 + 36 >> 2]) {
       break label$18;
      }
      if (HEAP8[HEAP32[$2 + 32 >> 2] + ($2 + 80 | 0) | 0] == -1) {
       HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 32 >> 2];
       HEAP32[$2 + 164 >> 2] = HEAP32[$2 + 36 >> 2];
       break label$18;
      }
      if (!(HEAP8[$2 + 163 | 0] & 1) | HEAP8[HEAP32[$2 + 32 >> 2] + ($2 + 80 | 0) | 0] != 10) {
       HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 32 >> 2] + 1;
       continue;
      } else {
       HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 32 >> 2] + 1;
       HEAP32[$2 + 164 >> 2] = HEAP32[$2 + 36 >> 2];
       HEAP8[$2 + 163 | 0] = 0;
      }
     }
     break;
    }
    if (!HEAP32[$2 + 36 >> 2]) {
     break label$10;
    }
    if (!HEAP32[$2 + 112 >> 2]) {
     HEAP32[$2 + 112 >> 2] = jsvNewFromEmptyString();
    }
    if (HEAP32[$2 + 112 >> 2]) {
     jsvAppendStringBuf(HEAP32[$2 + 112 >> 2], $2 + 80 | 0, HEAP32[$2 + 36 >> 2]);
    }
    HEAP32[$2 + 164 >> 2] = HEAP32[$2 + 164 >> 2] - HEAP32[$2 + 36 >> 2];
    HEAP32[$2 + 152 >> 2] = HEAP32[$2 + 36 >> 2] + HEAP32[$2 + 152 >> 2];
    if (HEAP8[$2 + 163 | 0] & 1) {
     HEAP32[$2 + 164 >> 2] = 32;
    }
    continue;
   }
   break;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 168 >> 2], 37008, jsvNewFromInteger(HEAP32[$2 + 152 >> 2]));
  HEAP32[$2 + 172 >> 2] = HEAP32[$2 + 112 >> 2];
 }
 global$0 = $2 + 176 | 0;
 return HEAP32[$2 + 172 >> 2];
}
function lcdSetPixels_ArrayBuffer_flat($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 80 | 0;
 global$0 = $5;
 HEAP32[$5 + 76 >> 2] = $0;
 HEAP32[$5 + 72 >> 2] = $1;
 HEAP32[$5 + 68 >> 2] = $2;
 HEAP32[$5 + 64 >> 2] = $3;
 HEAP32[$5 + 60 >> 2] = $4;
 $0 = HEAP32[$5 + 76 >> 2];
 HEAP32[$5 + 56 >> 2] = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
 HEAP32[$5 + 52 >> 2] = lcdGetPixelIndex_ArrayBuffer(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 72 >> 2], HEAP32[$5 + 68 >> 2], HEAP32[$5 + 64 >> 2]);
 HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 56 >> 2] + (HEAP32[$5 + 52 >> 2] >>> 3);
 HEAP32[$5 + 48 >> 2] = (1 << HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0]) - 1;
 $0 = $5;
 label$1 : {
  if (HEAP32[$5 + 60 >> 2]) {
   $1 = 0;
   if (HEAP32[$5 + 48 >> 2] != (HEAP32[$5 + 60 >> 2] & HEAP32[$5 + 48 >> 2])) {
    break label$1;
   }
  }
  $1 = HEAP32[$5 + 76 >> 2];
  $1 = ((HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24)) & 2) != 0 ^ -1;
 }
 HEAP8[$0 + 47 | 0] = $1 & 1;
 HEAP32[$5 + 40 >> 2] = HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0];
 $0 = HEAP32[$5 + 76 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 8) {
  HEAP32[$5 + 40 >> 2] = HEAP32[$5 + 40 >> 2] << 1;
  HEAP8[$5 + 47 | 0] = 0;
 }
 while (1) {
  label$5 : {
   $0 = HEAP32[$5 + 64 >> 2];
   HEAP32[$5 + 64 >> 2] = $0 + -1;
   if (!$0) {
    break label$5;
   }
   label$6 : {
    if (HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0] & 7) {
     HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 52 >> 2] & 7;
     if (!(HEAP32[$5 + 52 >> 2] | !(HEAP8[$5 + 47 | 0] & 1))) {
      HEAP32[$5 + 36 >> 2] = Math_imul(HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0], HEAP32[$5 + 64 >> 2] + 1 | 0) >> 3;
      if (HEAP32[$5 + 36 >> 2]) {
       HEAP8[$5 + 35 | 0] = HEAP32[$5 + 60 >> 2] ? 255 : 0;
       HEAP32[$5 + 64 >> 2] = (HEAP32[$5 + 64 >> 2] + 1 | 0) - ((HEAP32[$5 + 36 >> 2] << 3) / HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0] | 0);
       while (1) {
        $0 = HEAP32[$5 + 36 >> 2];
        HEAP32[$5 + 36 >> 2] = $0 + -1;
        if ($0) {
         HEAP8[HEAP32[$5 + 56 >> 2]] = HEAPU8[$5 + 35 | 0];
         HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 56 >> 2] + 1;
         continue;
        }
        break;
       }
       continue;
      }
     }
     HEAP32[$5 + 28 >> 2] = (1 << HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0]) - 1;
     HEAP32[$5 + 24 >> 2] = HEAPU8[HEAP32[$5 + 56 >> 2]];
     $0 = $5;
     $1 = HEAP32[$5 + 76 >> 2];
     $2 = 8 - (HEAP32[$5 + 52 >> 2] + HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0] | 0) | 0;
     label$12 : {
      if ((HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24)) & 4) {
       break label$12;
      }
      $2 = HEAP32[$5 + 52 >> 2];
     }
     HEAP32[$0 + 20 >> 2] = $2;
     HEAP8[HEAP32[$5 + 56 >> 2]] = HEAP32[$5 + 24 >> 2] & (HEAP32[$5 + 28 >> 2] << HEAP32[$5 + 20 >> 2] ^ -1) | (HEAP32[$5 + 60 >> 2] & HEAP32[$5 + 28 >> 2]) << HEAP32[$5 + 20 >> 2];
     $0 = HEAP32[$5 + 76 >> 2];
     label$14 : {
      if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 2) {
       HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 56 >> 2] + 1;
       break label$14;
      }
      HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 40 >> 2] + HEAP32[$5 + 52 >> 2];
      if (HEAPU32[$5 + 52 >> 2] >= 8) {
       HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 56 >> 2] + 1;
      }
     }
     break label$6;
    }
    $0 = HEAP32[$5 + 76 >> 2];
    label$17 : {
     if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
      HEAP32[$5 + 16 >> 2] = HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0] - 8;
      while (1) {
       if (HEAP32[$5 + 16 >> 2] >= 0) {
        $0 = HEAP32[$5 + 60 >> 2] >>> HEAP32[$5 + 16 >> 2];
        $1 = HEAP32[$5 + 56 >> 2];
        HEAP32[$5 + 56 >> 2] = $1 + 1;
        HEAP8[$1 | 0] = $0;
        HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] - 8;
        continue;
       }
       break;
      }
      break label$17;
     }
     HEAP32[$5 + 12 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 12 >> 2] < HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0]) {
       $0 = HEAP32[$5 + 60 >> 2] >>> HEAP32[$5 + 12 >> 2];
       $1 = HEAP32[$5 + 56 >> 2];
       HEAP32[$5 + 56 >> 2] = $1 + 1;
       HEAP8[$1 | 0] = $0;
       HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 8;
       continue;
      }
      break;
     }
    }
   }
   continue;
  }
  break;
 }
 global$0 = $5 + 80 | 0;
}
function jswFindBuiltInFunction($0, $1) {
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1 : {
  label$2 : {
   label$3 : {
    if (!HEAP32[$2 + 40 >> 2]) {
     break label$3;
    }
    if (jsvIsRoot(HEAP32[$2 + 40 >> 2]) & 1) {
     break label$3;
    }
    if (jsvIsNativeFunction(HEAP32[$2 + 40 >> 2]) & 1) {
     HEAP32[$2 + 28 >> 2] = jswGetSymbolListForObject(HEAP32[$2 + 40 >> 2]);
     if (HEAP32[$2 + 28 >> 2]) {
      HEAP32[$2 + 32 >> 2] = jswBinarySearch(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
      if (HEAP32[$2 + 32 >> 2]) {
       HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
       break label$1;
      }
     }
    }
    if (jsvIsArray(HEAP32[$2 + 40 >> 2]) & 1) {
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(16507, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break label$1;
     }
    }
    if (!(!(jsvIsArrayBuffer(HEAP32[$2 + 40 >> 2]) & 1) | HEAPU16[HEAP32[$2 + 40 >> 2] + 4 >> 1] != 129)) {
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(16525, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break label$1;
     }
    }
    if (!(!(jsvIsArrayBuffer(HEAP32[$2 + 40 >> 2]) & 1) | HEAPU16[HEAP32[$2 + 40 >> 2] + 4 >> 1] == 129)) {
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(16534, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break label$1;
     }
    }
    if (jsvIsPin(HEAP32[$2 + 40 >> 2]) & 1) {
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(16651, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break label$1;
     }
    }
    if (jsvIsNumeric(HEAP32[$2 + 40 >> 2]) & 1) {
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(16669, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break label$1;
     }
    }
    if (jsvIsFunction(HEAP32[$2 + 40 >> 2]) & 1) {
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(16696, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break label$1;
     }
    }
    if (jsvIsString(HEAP32[$2 + 40 >> 2]) & 1) {
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(16831, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break label$1;
     }
    }
    $0 = $2;
    label$21 : {
     if (jsvIsObject(HEAP32[$2 + 40 >> 2]) & 1) {
      $1 = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAP32[$2 + 40 >> 2], 16912, 0));
      break label$21;
     }
     $1 = 0;
    }
    HEAP32[$0 + 24 >> 2] = $1;
    $0 = $2;
    label$23 : {
     if (jsvIsObject(HEAP32[$2 + 24 >> 2]) & 1) {
      $1 = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAP32[$2 + 24 >> 2], 16922, 0));
      break label$23;
     }
     $1 = 0;
    }
    HEAP32[$0 + 20 >> 2] = $1;
    jsvUnLock(HEAP32[$2 + 24 >> 2]);
    label$25 : {
     label$26 : {
      if (!HEAP32[$2 + 20 >> 2]) {
       break label$26;
      }
      if (!(jsvIsNativeFunction(HEAP32[$2 + 20 >> 2]) & 1)) {
       break label$26;
      }
      HEAP32[$2 + 16 >> 2] = jswGetSymbolListForConstructorProto(HEAP32[$2 + 20 >> 2]);
      jsvUnLock(HEAP32[$2 + 20 >> 2]);
      if (HEAP32[$2 + 16 >> 2]) {
       HEAP32[$2 + 32 >> 2] = jswBinarySearch(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
       if (HEAP32[$2 + 32 >> 2]) {
        HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
        break label$1;
       }
      }
      break label$25;
     }
     jsvUnLock(HEAP32[$2 + 20 >> 2]);
    }
    HEAP32[$2 + 32 >> 2] = jswBinarySearch(16678, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
    if (HEAP32[$2 + 32 >> 2]) {
     HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
     break label$1;
    }
    break label$2;
   }
   HEAP8[$2 + 15 | 0] = jshGetPinFromString(HEAP32[$2 + 36 >> 2]);
   if (HEAPU8[$2 + 15 | 0] != 255) {
    HEAP32[$2 + 44 >> 2] = jsvNewFromPin(HEAPU8[$2 + 15 | 0]);
    break label$1;
   }
   HEAP32[$2 + 44 >> 2] = jswBinarySearch(16480, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
   break label$1;
  }
  HEAP32[$2 + 44 >> 2] = 0;
 }
 global$0 = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}
function tflite__ops__micro__fully_connected__EvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteFullyConnectedParams__2c_20tflite__ops__micro__fully_connected___28anonymous_20namespace_29__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0;
 $8 = global$0 - 288 | 0;
 global$0 = $8;
 HEAP32[$8 + 280 >> 2] = $0;
 HEAP32[$8 + 276 >> 2] = $1;
 HEAP32[$8 + 272 >> 2] = $2;
 HEAP32[$8 + 268 >> 2] = $3;
 HEAP32[$8 + 264 >> 2] = $4;
 HEAP32[$8 + 260 >> 2] = $5;
 HEAP32[$8 + 256 >> 2] = $6;
 HEAP32[$8 + 252 >> 2] = $7;
 HEAP32[$8 + 248 >> 2] = 0 - HEAP32[HEAP32[$8 + 264 >> 2] + 16 >> 2];
 HEAP32[$8 + 244 >> 2] = 0 - HEAP32[HEAP32[$8 + 260 >> 2] + 16 >> 2];
 HEAP32[$8 + 240 >> 2] = HEAP32[HEAP32[$8 + 252 >> 2] + 16 >> 2];
 HEAP32[$8 + 200 >> 2] = HEAP32[$8 + 248 >> 2];
 HEAP32[$8 + 204 >> 2] = HEAP32[$8 + 244 >> 2];
 HEAP32[$8 + 208 >> 2] = HEAP32[$8 + 240 >> 2];
 HEAP32[$8 + 212 >> 2] = HEAP32[HEAP32[$8 + 268 >> 2] >> 2];
 HEAP32[$8 + 216 >> 2] = 0 - HEAP32[HEAP32[$8 + 268 >> 2] + 4 >> 2];
 HEAP32[$8 + 220 >> 2] = HEAP32[HEAP32[$8 + 268 >> 2] + 8 >> 2];
 HEAP32[$8 + 224 >> 2] = HEAP32[HEAP32[$8 + 268 >> 2] + 12 >> 2];
 label$1 : {
  label$2 : {
   label$3 : {
    $0 = HEAP32[HEAP32[$8 + 252 >> 2] >> 2] + -3 | 0;
    if ($0 >>> 0 > 4) {
     break label$3;
    }
    label$4 : {
     switch ($0 - 1 | 0) {
     default:
      tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 176 | 0, HEAP32[$8 + 264 >> 2]);
      $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 264 >> 2]);
      tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 144 | 0, HEAP32[$8 + 260 >> 2]);
      $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 260 >> 2]);
      tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 120 | 0, HEAP32[$8 + 256 >> 2]);
      $2 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 256 >> 2]);
      tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 96 | 0, HEAP32[$8 + 252 >> 2]);
      tflite__reference_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($8 + 200 | 0, $8 + 176 | 0, $0, $8 + 144 | 0, $1, $8 + 120 | 0, $2, $8 + 96 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 252 >> 2]));
      $0 = $8 + 176 | 0;
      $1 = $8 + 144 | 0;
      $2 = $8 + 120 | 0;
      tflite__RuntimeShape___RuntimeShape_28_29($8 + 96 | 0);
      break label$2;
     case 0:
     case 1:
     case 2:
      break label$3;
     case 3:
      break label$4;
     }
    }
    tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 72 | 0, HEAP32[$8 + 264 >> 2]);
    $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 264 >> 2]);
    tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 48 | 0, HEAP32[$8 + 260 >> 2]);
    $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 260 >> 2]);
    tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 24 | 0, HEAP32[$8 + 256 >> 2]);
    $2 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 256 >> 2]);
    tflite__GetTensorShape_28TfLiteTensor_20const__29($8, HEAP32[$8 + 252 >> 2]);
    tflite__reference_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20short__29($8 + 200 | 0, $8 + 72 | 0, $0, $8 + 48 | 0, $1, $8 + 24 | 0, $2, $8, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 252 >> 2]));
    $0 = $8 + 72 | 0;
    $1 = $8 + 48 | 0;
    $2 = $8 + 24 | 0;
    tflite__RuntimeShape___RuntimeShape_28_29($8);
    break label$2;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$8 + 280 >> 2] + 20 >> 2]](HEAP32[$8 + 280 >> 2], 47245, 0);
   HEAP32[$8 + 284 >> 2] = 1;
   break label$1;
  }
  tflite__RuntimeShape___RuntimeShape_28_29($2);
  tflite__RuntimeShape___RuntimeShape_28_29($1);
  tflite__RuntimeShape___RuntimeShape_28_29($0);
  HEAP32[$8 + 284 >> 2] = 0;
 }
 global$0 = $8 + 288 | 0;
 return HEAP32[$8 + 284 >> 2];
}
function jspeStatement() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 if (!(!(HEAP32[23778] & 8192) | HEAP16[HEAP32[13768] + 2 >> 1] == 59 | (HEAP32[23778] & 63) != 1)) {
  $1 = jsvStringIteratorGetIndex(HEAP32[13768] + 4 | 0);
  HEAP32[HEAP32[13768] + 28 >> 2] = $1 - 1;
  jsiDebuggerLoop();
 }
 label$2 : {
  label$3 : {
   label$4 : {
    if (HEAP16[HEAP32[13768] + 2 >> 1] == 128 | HEAP16[HEAP32[13768] + 2 >> 1] == 129 | (HEAP16[HEAP32[13768] + 2 >> 1] == 130 | HEAP16[HEAP32[13768] + 2 >> 1] == 131)) {
     break label$4;
    }
    if (HEAP16[HEAP32[13768] + 2 >> 1] == 133 | HEAP16[HEAP32[13768] + 2 >> 1] == 135 | (HEAP16[HEAP32[13768] + 2 >> 1] == 184 | HEAP16[HEAP32[13768] + 2 >> 1] == 182)) {
     break label$4;
    }
    if (HEAP16[HEAP32[13768] + 2 >> 1] == 183 | HEAP16[HEAP32[13768] + 2 >> 1] == 180 | (HEAP16[HEAP32[13768] + 2 >> 1] == 181 | HEAP16[HEAP32[13768] + 2 >> 1] == 175)) {
     break label$4;
    }
    if (HEAP16[HEAP32[13768] + 2 >> 1] == 190 | HEAP16[HEAP32[13768] + 2 >> 1] == 191 | (HEAP16[HEAP32[13768] + 2 >> 1] == 192 | HEAP16[HEAP32[13768] + 2 >> 1] == 196)) {
     break label$4;
    }
    if (HEAP16[HEAP32[13768] + 2 >> 1] == 152 | HEAP16[HEAP32[13768] + 2 >> 1] == 153 | (HEAP16[HEAP32[13768] + 2 >> 1] == 33 | HEAP16[HEAP32[13768] + 2 >> 1] == 45)) {
     break label$4;
    }
    if (HEAP16[HEAP32[13768] + 2 >> 1] == 43 | HEAP16[HEAP32[13768] + 2 >> 1] == 126 | HEAP16[HEAP32[13768] + 2 >> 1] == 91) {
     break label$4;
    }
    if (HEAP16[HEAP32[13768] + 2 >> 1] != 40) {
     break label$3;
    }
   }
   HEAP32[$0 + 12 >> 2] = jspeExpression();
   break label$2;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 123) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 12 >> 2] = 0;
    break label$2;
   }
   jspeBlock();
   HEAP32[$0 + 12 >> 2] = 0;
   break label$2;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 59) {
   jslGetNextToken();
   HEAP32[$0 + 12 >> 2] = 0;
   break label$2;
  }
  if (!(HEAP16[HEAP32[13768] + 2 >> 1] != 174 ? !(HEAP16[HEAP32[13768] + 2 >> 1] == 172 | HEAP16[HEAP32[13768] + 2 >> 1] == 173) : 0)) {
   HEAP32[$0 + 12 >> 2] = jspeStatementVar();
   break label$2;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 163) {
   HEAP32[$0 + 12 >> 2] = jspeStatementIf();
   break label$2;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 165) {
   HEAP32[$0 + 12 >> 2] = jspeStatementDoOrWhile(0);
   break label$2;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 166) {
   HEAP32[$0 + 12 >> 2] = jspeStatementDoOrWhile(1);
   break label$2;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 167) {
   HEAP32[$0 + 12 >> 2] = jspeStatementFor();
   break label$2;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 177) {
   HEAP32[$0 + 12 >> 2] = jspeStatementTry();
   break label$2;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 171) {
   HEAP32[$0 + 12 >> 2] = jspeStatementReturn();
   break label$2;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 176) {
   HEAP32[$0 + 12 >> 2] = jspeStatementThrow();
   break label$2;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 170) {
   HEAP32[$0 + 12 >> 2] = jspeStatementFunctionDecl(0);
   break label$2;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 194) {
   HEAP32[$0 + 12 >> 2] = jspeStatementFunctionDecl(1);
   break label$2;
  }
  label$19 : {
   if (HEAP16[HEAP32[13768] + 2 >> 1] == 169) {
    jslGetNextToken();
    if ((HEAP32[23778] & 63) == 1) {
     label$22 : {
      if (!(HEAP32[23778] & 512)) {
       jsExceptionHere(2, 4942, 0);
       break label$22;
      }
      HEAP32[23778] = HEAP32[23778] & -64 | 4;
     }
    }
    break label$19;
   }
   label$24 : {
    if (HEAP16[HEAP32[13768] + 2 >> 1] == 168) {
     jslGetNextToken();
     if ((HEAP32[23778] & 63) == 1) {
      label$27 : {
       if (!(HEAP32[23778] & 1536)) {
        jsExceptionHere(2, 4990, 0);
        break label$27;
       }
       HEAP32[23778] = HEAP32[23778] & -64 | 2;
      }
     }
     break label$24;
    }
    if (HEAP16[HEAP32[13768] + 2 >> 1] == 187) {
     HEAP32[$0 + 12 >> 2] = jspeStatementSwitch();
     break label$2;
    }
    label$30 : {
     if (HEAP16[HEAP32[13768] + 2 >> 1] == 193) {
      jslGetNextToken();
      if ((HEAP32[23778] & 63) == 1) {
       jsiDebuggerLoop();
      }
      break label$30;
     }
     if (!(jslMatch(0) & 1)) {
      HEAP32[$0 + 12 >> 2] = 0;
      break label$2;
     }
    }
   }
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function lcdST7789_blit8Bit($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = global$0 - 112 | 0;
 global$0 = $7;
 HEAP32[$7 + 108 >> 2] = $0;
 HEAP32[$7 + 104 >> 2] = $1;
 HEAP32[$7 + 100 >> 2] = $2;
 HEAP32[$7 + 96 >> 2] = $3;
 HEAP32[$7 + 92 >> 2] = $4;
 HEAP32[$7 + 88 >> 2] = $5;
 HEAP32[$7 + 84 >> 2] = $6;
 HEAP32[$7 + 80 >> 2] = HEAP32[$7 + 104 >> 2] + HEAP32[24390];
 HEAP32[$7 + 76 >> 2] = HEAP32[24390] + (HEAP32[$7 + 104 >> 2] + Math_imul(HEAP32[$7 + 96 >> 2], HEAP32[$7 + 92 >> 2]) | 0);
 if (HEAP32[$7 + 80 >> 2] >= 320) {
  HEAP32[$7 + 80 >> 2] = HEAP32[$7 + 80 >> 2] - 320;
 }
 if (HEAP32[$7 + 76 >> 2] >= 320) {
  HEAP32[$7 + 76 >> 2] = HEAP32[$7 + 76 >> 2] - 320;
 }
 $0 = HEAP32[$7 + 108 >> 2];
 $1 = HEAP32[$7 + 80 >> 2];
 $2 = (HEAP32[$7 + 108 >> 2] + Math_imul(HEAP32[$7 + 100 >> 2], HEAP32[$7 + 92 >> 2]) | 0) - 1 | 0;
 if (HEAP32[$7 + 76 >> 2] > HEAP32[$7 + 80 >> 2]) {
  $3 = HEAP32[$7 + 76 >> 2];
 } else {
  $3 = 239;
 }
 lcdST7789_blitStartRaw($0, $1, $2, $3);
 HEAP32[$7 + 72 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 72 >> 2] < HEAP32[$7 + 96 >> 2]) {
   jsvStringIteratorClone($7 + 48 | 0, HEAP32[$7 + 88 >> 2]);
   HEAP32[$7 + 44 >> 2] = 1;
   while (1) {
    if (HEAP32[$7 + 44 >> 2] <= HEAP32[$7 + 92 >> 2]) {
     HEAP32[$7 + 80 >> 2] = HEAP32[$7 + 80 >> 2] + 1;
     if (HEAP32[$7 + 80 >> 2] >= 320) {
      lcdST7789_blitStartRaw(HEAP32[$7 + 108 >> 2], 0, (HEAP32[$7 + 108 >> 2] + Math_imul(HEAP32[$7 + 100 >> 2], HEAP32[$7 + 92 >> 2]) | 0) - 1 | 0, HEAP32[$7 + 76 >> 2]);
     }
     label$10 : {
      if (HEAP32[$7 + 92 >> 2] == 1) {
       HEAP32[$7 + 40 >> 2] = 0;
       while (1) {
        if (HEAP32[$7 + 40 >> 2] < HEAP32[$7 + 100 >> 2]) {
         lcdST7789_blitPixel(HEAPU16[HEAP32[$7 + 84 >> 2] + ((jsvStringIteratorGetCharAndNext(HEAP32[$7 + 88 >> 2]) & 255) << 1) >> 1]);
         HEAP32[$7 + 40 >> 2] = HEAP32[$7 + 40 >> 2] + 1;
         continue;
        }
        break;
       }
       break label$10;
      }
      label$14 : {
       if (HEAP32[$7 + 92 >> 2] == 2) {
        HEAP32[$7 + 36 >> 2] = 0;
        while (1) {
         if (HEAP32[$7 + 36 >> 2] < HEAP32[$7 + 100 >> 2]) {
          HEAP16[$7 + 34 >> 1] = HEAPU16[HEAP32[$7 + 84 >> 2] + ((jsvStringIteratorGetCharAndNext(HEAP32[$7 + 88 >> 2]) & 255) << 1) >> 1];
          lcdST7789_blitPixel(HEAPU16[$7 + 34 >> 1]);
          lcdST7789_blitPixel(HEAPU16[$7 + 34 >> 1]);
          HEAP32[$7 + 36 >> 2] = HEAP32[$7 + 36 >> 2] + 1;
          continue;
         }
         break;
        }
        break label$14;
       }
       label$18 : {
        if (HEAP32[$7 + 92 >> 2] == 3) {
         HEAP32[$7 + 28 >> 2] = 0;
         while (1) {
          if (HEAP32[$7 + 28 >> 2] < HEAP32[$7 + 100 >> 2]) {
           HEAP16[$7 + 26 >> 1] = HEAPU16[HEAP32[$7 + 84 >> 2] + ((jsvStringIteratorGetCharAndNext(HEAP32[$7 + 88 >> 2]) & 255) << 1) >> 1];
           lcdST7789_blitPixel(HEAPU16[$7 + 26 >> 1]);
           lcdST7789_blitPixel(HEAPU16[$7 + 26 >> 1]);
           lcdST7789_blitPixel(HEAPU16[$7 + 26 >> 1]);
           HEAP32[$7 + 28 >> 2] = HEAP32[$7 + 28 >> 2] + 1;
           continue;
          }
          break;
         }
         break label$18;
        }
        HEAP32[$7 + 20 >> 2] = 0;
        while (1) {
         if (HEAP32[$7 + 20 >> 2] < HEAP32[$7 + 100 >> 2]) {
          HEAP16[$7 + 18 >> 1] = HEAPU16[HEAP32[$7 + 84 >> 2] + ((jsvStringIteratorGetCharAndNext(HEAP32[$7 + 88 >> 2]) & 255) << 1) >> 1];
          HEAP32[$7 + 12 >> 2] = 0;
          while (1) {
           if (HEAP32[$7 + 12 >> 2] < HEAP32[$7 + 92 >> 2]) {
            lcdST7789_blitPixel(HEAPU16[$7 + 18 >> 1]);
            HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 12 >> 2] + 1;
            continue;
           }
           break;
          }
          HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 20 >> 2] + 1;
          continue;
         }
         break;
        }
       }
      }
     }
     if (HEAP32[$7 + 44 >> 2] < HEAP32[$7 + 92 >> 2]) {
      $0 = $7 + 48 | 0;
      jsvStringIteratorFree(HEAP32[$7 + 88 >> 2]);
      jsvStringIteratorClone(HEAP32[$7 + 88 >> 2], $0);
     }
     HEAP32[$7 + 44 >> 2] = HEAP32[$7 + 44 >> 2] + 1;
     continue;
    }
    break;
   }
   jsvStringIteratorFree($7 + 48 | 0);
   HEAP32[$7 + 72 >> 2] = HEAP32[$7 + 72 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $7 + 112 | 0;
}
function tflite__reference_ops__BroadcastPrelu4DSlow_28tflite__PreluParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = global$0 - 176 | 0;
 global$0 = $7;
 HEAP32[$7 + 172 >> 2] = $0;
 HEAP32[$7 + 168 >> 2] = $1;
 HEAP32[$7 + 164 >> 2] = $2;
 HEAP32[$7 + 160 >> 2] = $3;
 HEAP32[$7 + 156 >> 2] = $4;
 HEAP32[$7 + 152 >> 2] = $5;
 HEAP32[$7 + 148 >> 2] = $6;
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$7 + 168 >> 2]) | 0) > 4) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$7 + 160 >> 2]) | 0) > 4) {
   break label$2;
  }
 }
 label$3 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$7 + 152 >> 2]) | 0) > 4) {
   break label$3;
  }
 }
 $0 = $7 + 96 | 0;
 $1 = $7 - -64 | 0;
 tflite__RuntimeShape__ExtendedShape_28int_2c_20tflite__RuntimeShape_20const__29($7 + 128 | 0, 4, HEAP32[$7 + 152 >> 2]);
 void_20tflite__NdArrayDescsForElementwiseBroadcast_4__28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__2c_20tflite__NdArrayDesc_4___2c_20tflite__NdArrayDesc_4___29(HEAP32[$7 + 168 >> 2], HEAP32[$7 + 160 >> 2], $0, $1);
 HEAP32[$7 + 52 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 52 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 128 | 0, 0) | 0)) {
   HEAP32[$7 + 48 >> 2] = 0;
   while (1) {
    if (HEAP32[$7 + 48 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 128 | 0, 1) | 0)) {
     HEAP32[$7 + 44 >> 2] = 0;
     while (1) {
      if (HEAP32[$7 + 44 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 128 | 0, 2) | 0)) {
       HEAP32[$7 + 40 >> 2] = 0;
       while (1) {
        if (HEAP32[$7 + 40 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 128 | 0, 3) | 0)) {
         HEAP32[$7 + 36 >> 2] = tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 128 | 0, HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2], HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2]);
         HEAP32[$7 + 32 >> 2] = tflite__SubscriptToIndex_28tflite__NdArrayDesc_4__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 96 | 0, HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2], HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2]);
         HEAP32[$7 + 28 >> 2] = HEAP32[HEAP32[$7 + 172 >> 2] >> 2] + HEAPU8[HEAP32[$7 + 164 >> 2] + HEAP32[$7 + 32 >> 2] | 0];
         label$12 : {
          if (HEAP32[$7 + 28 >> 2] >= 0) {
           HEAP8[HEAP32[$7 + 148 >> 2] + HEAP32[$7 + 36 >> 2] | 0] = HEAPU8[HEAP32[$7 + 164 >> 2] + HEAP32[$7 + 32 >> 2] | 0];
           break label$12;
          }
          HEAP32[$7 + 24 >> 2] = tflite__SubscriptToIndex_28tflite__NdArrayDesc_4__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 - -64 | 0, HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2], HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2]);
          HEAP32[$7 + 20 >> 2] = HEAP32[HEAP32[$7 + 172 >> 2] + 4 >> 2] + HEAPU8[HEAP32[$7 + 156 >> 2] + HEAP32[$7 + 24 >> 2] | 0];
          HEAP32[$7 + 16 >> 2] = HEAP32[HEAP32[$7 + 172 >> 2] + 8 >> 2] + tflite__MultiplyByQuantizedMultiplierSmallerThanOneExp_28int_2c_20int_2c_20int_29(Math_imul(HEAP32[$7 + 28 >> 2], HEAP32[$7 + 20 >> 2]), HEAP32[HEAP32[$7 + 172 >> 2] + 12 >> 2], HEAP32[HEAP32[$7 + 172 >> 2] + 16 >> 2]);
          HEAP32[$7 + 12 >> 2] = 0;
          HEAP32[$7 + 8 >> 2] = 255;
          HEAP32[$7 + 4 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($7 + 8 | 0, int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($7 + 12 | 0, $7 + 16 | 0)) >> 2];
          HEAP8[HEAP32[$7 + 148 >> 2] + HEAP32[$7 + 36 >> 2] | 0] = HEAP32[$7 + 4 >> 2];
         }
         HEAP32[$7 + 40 >> 2] = HEAP32[$7 + 40 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$7 + 44 >> 2] = HEAP32[$7 + 44 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$7 + 48 >> 2] = HEAP32[$7 + 48 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$7 + 52 >> 2] = HEAP32[$7 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 128 | 0);
 global$0 = $7 + 176 | 0;
}
function jswrap_graphics_asBMP($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 144 | 0;
 global$0 = $1;
 HEAP32[$1 + 136 >> 2] = $0;
 label$1 : {
  if (!(graphicsGetFromVar($1 - -64 | 0, HEAP32[$1 + 136 >> 2]) & 1)) {
   HEAP32[$1 + 140 >> 2] = 0;
   break label$1;
  }
  if (!(HEAPU8[$1 + 80 | 0] == 1 | HEAPU8[$1 + 80 | 0] == 24)) {
   jsExceptionHere(1, 39264, 0);
   HEAP32[$1 + 140 >> 2] = 0;
   break label$1;
  }
  $0 = $1 - -64 | 0;
  HEAP32[$1 + 60 >> 2] = graphicsGetWidth($0) & 65535;
  HEAP32[$1 + 56 >> 2] = graphicsGetHeight($0) & 65535;
  HEAP32[$1 + 52 >> 2] = Math_imul(HEAP32[$1 + 60 >> 2], HEAPU8[$1 + 80 | 0]) + 31 >> 5 << 2;
  HEAP8[$1 + 51 | 0] = HEAPU8[$1 + 80 | 0] == 1;
  HEAP32[$1 + 44 >> 2] = (HEAP8[$1 + 51 | 0] & 1 ? 6 : 0) + 26;
  HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 44 >> 2] + Math_imul(HEAP32[$1 + 56 >> 2], HEAP32[$1 + 52 >> 2]);
  HEAP32[$1 + 36 >> 2] = jsvNewFlatStringOfLength(HEAP32[$1 + 40 >> 2]);
  if (!HEAP32[$1 + 36 >> 2]) {
   HEAP32[$1 + 140 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 32 >> 2] = jsvGetFlatStringPointer(HEAP32[$1 + 36 >> 2]);
  HEAP8[HEAP32[$1 + 32 >> 2]] = 66;
  HEAP8[HEAP32[$1 + 32 >> 2] + 1 | 0] = 77;
  HEAP8[HEAP32[$1 + 32 >> 2] + 2 | 0] = HEAP32[$1 + 40 >> 2];
  HEAP8[HEAP32[$1 + 32 >> 2] + 3 | 0] = HEAP32[$1 + 40 >> 2] >> 8;
  HEAP8[HEAP32[$1 + 32 >> 2] + 10 | 0] = HEAP32[$1 + 44 >> 2];
  HEAP8[HEAP32[$1 + 32 >> 2] + 14 | 0] = 12;
  HEAP8[HEAP32[$1 + 32 >> 2] + 18 | 0] = HEAP32[$1 + 60 >> 2];
  HEAP8[HEAP32[$1 + 32 >> 2] + 19 | 0] = HEAP32[$1 + 60 >> 2] >> 8;
  HEAP8[HEAP32[$1 + 32 >> 2] + 20 | 0] = HEAP32[$1 + 56 >> 2];
  HEAP8[HEAP32[$1 + 32 >> 2] + 21 | 0] = HEAP32[$1 + 56 >> 2] >> 8;
  HEAP8[HEAP32[$1 + 32 >> 2] + 22 | 0] = 1;
  HEAP8[HEAP32[$1 + 32 >> 2] + 24 | 0] = HEAPU8[$1 + 80 | 0];
  if (HEAP8[$1 + 51 | 0] & 1) {
   HEAP8[HEAP32[$1 + 32 >> 2] + 26 | 0] = 255;
   HEAP8[HEAP32[$1 + 32 >> 2] + 27 | 0] = 255;
   HEAP8[HEAP32[$1 + 32 >> 2] + 28 | 0] = 255;
  }
  HEAP32[$1 + 28 >> 2] = 0;
  while (1) {
   if (HEAP32[$1 + 28 >> 2] < HEAP32[$1 + 56 >> 2]) {
    HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 56 >> 2] - (HEAP32[$1 + 28 >> 2] + 1 | 0);
    label$8 : {
     if (HEAPU8[$1 + 80 | 0] == 1) {
      HEAP32[$1 + 20 >> 2] = 0;
      while (1) {
       if (HEAP32[$1 + 20 >> 2] < HEAP32[$1 + 60 >> 2]) {
        HEAP32[$1 + 16 >> 2] = 0;
        HEAP32[$1 + 12 >> 2] = 0;
        while (1) {
         if (HEAP32[$1 + 12 >> 2] < 8) {
          $0 = HEAP32[$1 + 16 >> 2] << 1;
          $2 = HEAP32[$1 + 20 >> 2];
          HEAP32[$1 + 20 >> 2] = $2 + 1;
          HEAP32[$1 + 16 >> 2] = $0 | graphicsGetPixel($1 - -64 | 0, $2, HEAP32[$1 + 28 >> 2]) & 1;
          HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] + 1;
          continue;
         }
         break;
        }
        HEAP8[HEAP32[$1 + 32 >> 2] + (((HEAP32[$1 + 44 >> 2] + Math_imul(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 52 >> 2]) | 0) + (HEAP32[$1 + 20 >> 2] >> 3) | 0) - 1 | 0) | 0] = HEAP32[$1 + 16 >> 2];
        continue;
       }
       break;
      }
      break label$8;
     }
     HEAP32[$1 + 8 >> 2] = 0;
     while (1) {
      if (HEAP32[$1 + 8 >> 2] < HEAP32[$1 + 60 >> 2]) {
       HEAP32[$1 + 4 >> 2] = graphicsGetPixel($1 - -64 | 0, HEAP32[$1 + 8 >> 2], HEAP32[$1 + 28 >> 2]);
       HEAP32[$1 >> 2] = (HEAP32[$1 + 44 >> 2] + Math_imul(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 52 >> 2]) | 0) + Math_imul(HEAP32[$1 + 8 >> 2], HEAPU8[$1 + 80 | 0] >> 3);
       $0 = HEAP32[$1 + 4 >> 2];
       $2 = HEAP32[$1 + 32 >> 2];
       $3 = HEAP32[$1 >> 2];
       HEAP32[$1 >> 2] = $3 + 1;
       HEAP8[$2 + $3 | 0] = $0;
       $0 = HEAP32[$1 + 4 >> 2] >>> 8;
       $2 = HEAP32[$1 + 32 >> 2];
       $3 = HEAP32[$1 >> 2];
       HEAP32[$1 >> 2] = $3 + 1;
       HEAP8[$2 + $3 | 0] = $0;
       $0 = HEAP32[$1 + 4 >> 2] >>> 16;
       $2 = HEAP32[$1 + 32 >> 2];
       $3 = HEAP32[$1 >> 2];
       HEAP32[$1 >> 2] = $3 + 1;
       HEAP8[$2 + $3 | 0] = $0;
       HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
       continue;
      }
      break;
     }
    }
    HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 28 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$1 + 140 >> 2] = HEAP32[$1 + 36 >> 2];
 }
 global$0 = $1 + 144 | 0;
 return HEAP32[$1 + 140 >> 2];
}
function jswrap_espruino_mapInPlace($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 144 | 0;
 global$0 = $4;
 HEAP32[$4 + 140 >> 2] = $0;
 HEAP32[$4 + 136 >> 2] = $1;
 HEAP32[$4 + 132 >> 2] = $2;
 HEAP32[$4 + 128 >> 2] = $3;
 label$1 : {
  label$2 : {
   if (jsvIsArrayBuffer(HEAP32[$4 + 140 >> 2]) & 1) {
    if (jsvIsArrayBuffer(HEAP32[$4 + 136 >> 2]) & 1) {
     break label$2;
    }
   }
   jsExceptionHere(1, 32180, 0);
   break label$1;
  }
  label$4 : {
   if (!HEAP32[$4 + 132 >> 2]) {
    break label$4;
   }
   if (jsvIsArray(HEAP32[$4 + 132 >> 2]) & 1) {
    break label$4;
   }
   if (jsvIsArrayBuffer(HEAP32[$4 + 132 >> 2]) & 1) {
    break label$4;
   }
   if (jsvIsFunction(HEAP32[$4 + 132 >> 2]) & 1) {
    break label$4;
   }
   jsExceptionHere(1, 32222, 0);
   break label$1;
  }
  HEAP8[$4 + 127 | 0] = jsvIsFunction(HEAP32[$4 + 132 >> 2]) & 1;
  HEAP32[$4 + 120 >> 2] = (HEAPU16[HEAP32[$4 + 140 >> 2] + 4 >> 1] & 15) << 3;
  HEAP8[$4 + 119 | 0] = 1;
  if (HEAP32[$4 + 128 >> 2] < 0) {
   HEAP32[$4 + 128 >> 2] = 0 - HEAP32[$4 + 128 >> 2];
   HEAP8[$4 + 119 | 0] = 0;
  }
  if (!HEAP32[$4 + 128 >> 2]) {
   HEAP32[$4 + 128 >> 2] = HEAP32[$4 + 120 >> 2];
  }
  $0 = $4 + 32 | 0;
  jsvArrayBufferIteratorNew($4 + 72 | 0, HEAP32[$4 + 140 >> 2], 0);
  HEAP32[$4 + 28 >> 2] = 0;
  HEAP32[$4 + 24 >> 2] = 0;
  jsvArrayBufferIteratorNew($0, HEAP32[$4 + 136 >> 2], 0);
  while (1) {
   label$8 : {
    if (!(jsvArrayBufferIteratorHasElement($4 + 72 | 0) & 1)) {
     $0 = 0;
     if (HEAP32[$4 + 24 >> 2] < HEAP32[$4 + 128 >> 2]) {
      break label$8;
     }
    }
    $0 = jsvArrayBufferIteratorHasElement($4 + 32 | 0);
   }
   if ($0 & 1) {
    $0 = $4;
    label$11 : {
     if (HEAP8[$4 + 127 | 0] & 1) {
      $1 = jsvArrayBufferIteratorGetIndex($4 + 72 | 0);
      break label$11;
     }
     $1 = 0;
    }
    HEAP32[$0 + 20 >> 2] = $1;
    while (1) {
     if (HEAP32[$4 + 24 >> 2] < HEAP32[$4 + 128 >> 2]) {
      label$15 : {
       if (HEAP8[$4 + 119 | 0] & 1) {
        HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 28 >> 2] << HEAP32[$4 + 120 >> 2] | jsvArrayBufferIteratorGetIntegerValue($4 + 72 | 0);
        break label$15;
       }
       HEAP32[$4 + 28 >> 2] = jsvArrayBufferIteratorGetIntegerValue($4 + 72 | 0) << HEAP32[$4 + 24 >> 2] | HEAP32[$4 + 28 >> 2];
      }
      jsvArrayBufferIteratorNext($4 + 72 | 0);
      HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 120 >> 2] + HEAP32[$4 + 24 >> 2];
      continue;
     }
     break;
    }
    label$17 : {
     if (HEAP8[$4 + 119 | 0] & 1) {
      HEAP32[$4 + 16 >> 2] = (1 << HEAP32[$4 + 128 >> 2]) - 1 & HEAP32[$4 + 28 >> 2] >> HEAP32[$4 + 24 >> 2] - HEAP32[$4 + 128 >> 2];
      break label$17;
     }
     HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 28 >> 2] & (1 << HEAP32[$4 + 128 >> 2]) - 1;
     HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 28 >> 2] >> HEAP32[$4 + 128 >> 2];
    }
    HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] - HEAP32[$4 + 128 >> 2];
    label$19 : {
     if (HEAP32[$4 + 132 >> 2]) {
      HEAP32[$4 + 12 >> 2] = 0;
      label$21 : {
       if (HEAP8[$4 + 127 | 0] & 1) {
        $0 = $4 + 4 | 0;
        HEAP32[$4 + 4 >> 2] = jsvNewFromInteger(HEAP32[$4 + 16 >> 2]);
        HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 20 >> 2];
        HEAP32[$4 + 12 >> 2] = jspeFunctionCall(HEAP32[$4 + 132 >> 2], 0, 0, 0, 2, $0);
        jsvUnLock(HEAP32[$4 + 4 >> 2]);
        break label$21;
       }
       label$23 : {
        if (jsvIsArray(HEAP32[$4 + 132 >> 2]) & 1) {
         HEAP32[$4 + 12 >> 2] = jsvGetArrayItem(HEAP32[$4 + 132 >> 2], HEAP32[$4 + 16 >> 2]);
         break label$23;
        }
        HEAP32[$4 + 12 >> 2] = jsvArrayBufferGet(HEAP32[$4 + 132 >> 2], HEAP32[$4 + 16 >> 2]);
       }
      }
      jsvArrayBufferIteratorSetValue($4 + 32 | 0, HEAP32[$4 + 12 >> 2]);
      jsvUnLock(HEAP32[$4 + 12 >> 2]);
      break label$19;
     }
     jsvArrayBufferIteratorSetIntegerValue($4 + 32 | 0, HEAP32[$4 + 16 >> 2]);
    }
    $0 = $4 + 32 | 0;
    jsvUnLock(HEAP32[$4 + 20 >> 2]);
    jsvArrayBufferIteratorNext($0);
    continue;
   }
   break;
  }
  $0 = $4 + 32 | 0;
  jsvArrayBufferIteratorFree($4 + 72 | 0);
  jsvArrayBufferIteratorFree($0);
 }
 global$0 = $4 + 144 | 0;
}
function tflite__ops__micro__svdf___28anonymous_20namespace_29__EvalFloatSVDF_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteSVDFParams_20const__2c_20TfLiteTensor__2c_20TfLiteTensor__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0, $11 = Math_fround(0);
 $10 = global$0 - 128 | 0;
 global$0 = $10;
 HEAP32[$10 + 124 >> 2] = $0;
 HEAP32[$10 + 120 >> 2] = $1;
 HEAP32[$10 + 116 >> 2] = $2;
 HEAP32[$10 + 112 >> 2] = $3;
 HEAP32[$10 + 108 >> 2] = $4;
 HEAP32[$10 + 104 >> 2] = $5;
 HEAP32[$10 + 100 >> 2] = $6;
 HEAP32[$10 + 96 >> 2] = $7;
 HEAP32[$10 + 92 >> 2] = $8;
 HEAP32[$10 + 88 >> 2] = $9;
 HEAP32[$10 + 84 >> 2] = HEAP32[HEAP32[$10 + 100 >> 2] >> 2];
 HEAP32[$10 + 80 >> 2] = HEAP32[HEAP32[HEAP32[$10 + 116 >> 2] + 8 >> 2] + 4 >> 2];
 HEAP32[$10 + 76 >> 2] = HEAP32[HEAP32[HEAP32[$10 + 116 >> 2] + 8 >> 2] + 8 >> 2];
 HEAP32[$10 + 72 >> 2] = HEAP32[HEAP32[HEAP32[$10 + 112 >> 2] + 8 >> 2] + 4 >> 2];
 HEAP32[$10 + 68 >> 2] = HEAP32[$10 + 72 >> 2] / HEAP32[$10 + 84 >> 2];
 HEAP32[$10 + 64 >> 2] = HEAP32[HEAP32[HEAP32[$10 + 108 >> 2] + 8 >> 2] + 8 >> 2];
 HEAP32[$10 + 60 >> 2] = 0;
 while (1) {
  if (HEAP32[$10 + 60 >> 2] < HEAP32[$10 + 80 >> 2]) {
   HEAP32[$10 + 56 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$10 + 92 >> 2]) + (Math_imul(HEAP32[$10 + 72 >> 2], Math_imul(HEAP32[$10 + 60 >> 2], HEAP32[$10 + 64 >> 2])) << 2);
   HEAP32[$10 + 52 >> 2] = 0;
   while (1) {
    if (HEAP32[$10 + 52 >> 2] < HEAP32[$10 + 72 >> 2]) {
     HEAP32[$10 + 48 >> 2] = HEAP32[$10 + 56 >> 2] + (Math_imul(HEAP32[$10 + 52 >> 2], HEAP32[$10 + 64 >> 2]) << 2);
     HEAPF32[HEAP32[$10 + 48 >> 2] + (HEAP32[$10 + 64 >> 2] - 1 << 2) >> 2] = 0;
     HEAP32[$10 + 52 >> 2] = HEAP32[$10 + 52 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$10 + 60 >> 2] = HEAP32[$10 + 60 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$10 + 44 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$10 + 112 >> 2]);
 HEAP32[$10 + 40 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$10 + 116 >> 2]);
 HEAP32[$10 + 36 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$10 + 92 >> 2]) + (HEAP32[$10 + 64 >> 2] - 1 << 2);
 HEAP32[$10 + 32 >> 2] = HEAP32[$10 + 36 >> 2];
 HEAP32[$10 + 28 >> 2] = 0;
 while (1) {
  if (HEAP32[$10 + 28 >> 2] < HEAP32[$10 + 80 >> 2]) {
   HEAP32[$10 + 24 >> 2] = HEAP32[$10 + 44 >> 2];
   HEAP32[$10 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$10 + 20 >> 2] < HEAP32[$10 + 72 >> 2]) {
     HEAPF32[$10 + 16 >> 2] = 0;
     HEAP32[$10 + 12 >> 2] = HEAP32[$10 + 40 >> 2] + (Math_imul(HEAP32[$10 + 28 >> 2], HEAP32[$10 + 76 >> 2]) << 2);
     HEAP32[$10 + 8 >> 2] = 0;
     while (1) {
      if (HEAP32[$10 + 8 >> 2] < HEAP32[$10 + 76 >> 2]) {
       $0 = HEAP32[$10 + 24 >> 2];
       HEAP32[$10 + 24 >> 2] = $0 + 4;
       $11 = HEAPF32[$0 >> 2];
       $0 = HEAP32[$10 + 12 >> 2];
       HEAP32[$10 + 12 >> 2] = $0 + 4;
       HEAPF32[$10 + 16 >> 2] = HEAPF32[$10 + 16 >> 2] + Math_fround($11 * HEAPF32[$0 >> 2]);
       HEAP32[$10 + 8 >> 2] = HEAP32[$10 + 8 >> 2] + 1;
       continue;
      }
      break;
     }
     $0 = HEAP32[$10 + 32 >> 2];
     HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + HEAPF32[$10 + 16 >> 2];
     HEAP32[$10 + 32 >> 2] = HEAP32[$10 + 32 >> 2] + (HEAP32[$10 + 64 >> 2] << 2);
     HEAP32[$10 + 20 >> 2] = HEAP32[$10 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$10 + 28 >> 2] = HEAP32[$10 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 tflite__ops__micro__svdf___28anonymous_20namespace_29__ApplyTimeWeightsBiasAndActivation_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteFusedActivation_2c_20TfLiteTensor__2c_20TfLiteTensor__2c_20TfLiteTensor__29(HEAP32[$10 + 80 >> 2], HEAP32[$10 + 64 >> 2], HEAP32[$10 + 72 >> 2], HEAP32[$10 + 68 >> 2], HEAP32[$10 + 84 >> 2], HEAP32[$10 + 108 >> 2], HEAP32[$10 + 104 >> 2], HEAP32[HEAP32[$10 + 100 >> 2] + 4 >> 2], HEAP32[$10 + 92 >> 2], HEAP32[$10 + 96 >> 2], HEAP32[$10 + 88 >> 2]);
 global$0 = $10 + 128 | 0;
}
function jswrap_graphics_asImage($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 160 | 0;
 global$0 = $2;
 HEAP32[$2 + 152 >> 2] = $0;
 HEAP32[$2 + 148 >> 2] = $1;
 label$1 : {
  if (!(graphicsGetFromVar($2 + 80 | 0, HEAP32[$2 + 152 >> 2]) & 1)) {
   HEAP32[$2 + 156 >> 2] = 0;
   break label$1;
  }
  label$3 : {
   label$4 : {
    if (!(jsvIsUndefined(HEAP32[$2 + 148 >> 2]) & 1)) {
     if (!(jsvIsStringEqual(HEAP32[$2 + 148 >> 2], 39212) & 1)) {
      break label$4;
     }
    }
    HEAP8[$2 + 79 | 0] = 1;
    break label$3;
   }
   label$6 : {
    if (jsvIsStringEqual(HEAP32[$2 + 148 >> 2], 39219) & 1) {
     HEAP8[$2 + 79 | 0] = 0;
     break label$6;
    }
    HEAP32[$2 >> 2] = HEAP32[$2 + 148 >> 2];
    jsExceptionHere(1, 39226, $2);
    HEAP32[$2 + 156 >> 2] = 0;
    break label$1;
   }
  }
  HEAP32[$2 + 72 >> 2] = jswrap_graphics_getWidthOrHeight(HEAP32[$2 + 152 >> 2], 0);
  HEAP32[$2 + 68 >> 2] = jswrap_graphics_getWidthOrHeight(HEAP32[$2 + 152 >> 2], 1);
  HEAP32[$2 + 64 >> 2] = HEAPU8[$2 + 96 | 0];
  HEAP32[$2 + 60 >> 2] = Math_imul(HEAP32[$2 + 64 >> 2], Math_imul(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 68 >> 2])) + 7 >> 3;
  HEAP32[$2 + 56 >> 2] = 0;
  if (HEAP8[$2 + 79 | 0] & 1) {
   HEAP32[$2 + 56 >> 2] = jsvNewWithFlags(5);
   if (!HEAP32[$2 + 56 >> 2]) {
    HEAP32[$2 + 156 >> 2] = 0;
    break label$1;
   }
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 56 >> 2], 38802, jsvNewFromInteger(HEAP32[$2 + 72 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 56 >> 2], 38808, jsvNewFromInteger(HEAP32[$2 + 68 >> 2]));
   if (HEAP32[$2 + 64 >> 2] != 1) {
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 56 >> 2], 39248, jsvNewFromInteger(HEAP32[$2 + 64 >> 2]));
   }
   if (!(HEAPU8[$2 + 84 | 0] | HEAPU8[$2 + 85 | 0] << 8 | (HEAPU8[$2 + 86 | 0] << 16 | HEAPU8[$2 + 87 | 0] << 24) | (!((HEAPU8[$2 + 88 | 0] | HEAPU8[$2 + 89 | 0] << 8 | (HEAPU8[$2 + 90 | 0] << 16 | HEAPU8[$2 + 91 | 0] << 24)) & 4) | (HEAPU8[$2 + 88 | 0] | HEAPU8[$2 + 89 | 0] << 8 | (HEAPU8[$2 + 90 | 0] << 16 | HEAPU8[$2 + 91 | 0] << 24)) & 11 ? HEAP32[$2 + 64 >> 2] != 8 : 0))) {
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 56 >> 2], 38815, jsvObjectGetChild(HEAPU8[$2 + 80 | 0] | HEAPU8[$2 + 81 | 0] << 8 | (HEAPU8[$2 + 82 | 0] << 16 | HEAPU8[$2 + 83 | 0] << 24), 38815, 0));
   }
   HEAP32[$2 + 156 >> 2] = HEAP32[$2 + 56 >> 2];
   break label$1;
  }
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 60 >> 2] + 3;
  HEAP32[$2 + 52 >> 2] = jsvNewStringOfLength(HEAP32[$2 + 60 >> 2], 0);
  if (!HEAP32[$2 + 52 >> 2]) {
   jsvUnLock(HEAP32[$2 + 56 >> 2]);
   HEAP32[$2 + 156 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 48 >> 2] = 0;
  HEAP32[$2 + 44 >> 2] = 0;
  HEAP32[$2 + 40 >> 2] = 0;
  HEAP32[$2 + 36 >> 2] = 0;
  jsvStringIteratorNew($2 + 16 | 0, HEAP32[$2 + 52 >> 2], 0);
  if (!(HEAP8[$2 + 79 | 0] & 1)) {
   $0 = $2 + 16 | 0;
   jsvStringIteratorSetCharAndNext($0, HEAP32[$2 + 72 >> 2] << 24 >> 24);
   jsvStringIteratorSetCharAndNext($0, HEAP32[$2 + 68 >> 2] << 24 >> 24);
   jsvStringIteratorSetCharAndNext($0, HEAP32[$2 + 64 >> 2] << 24 >> 24);
  }
  while (1) {
   if (jsvStringIteratorHasChar($2 + 16 | 0) & 1) {
    HEAP32[$2 + 40 >> 2] = HEAP32[$2 + 40 >> 2] << HEAP32[$2 + 64 >> 2] | graphicsGetPixel($2 + 80 | 0, HEAP32[$2 + 48 >> 2], HEAP32[$2 + 44 >> 2]);
    HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 64 >> 2] + HEAP32[$2 + 36 >> 2];
    HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 48 >> 2] + 1;
    if (HEAP32[$2 + 48 >> 2] >= HEAP32[$2 + 72 >> 2]) {
     HEAP32[$2 + 48 >> 2] = 0;
     HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 44 >> 2] + 1;
    }
    while (1) {
     if (HEAPU32[$2 + 36 >> 2] >= 8) {
      jsvStringIteratorSetCharAndNext($2 + 16 | 0, HEAP32[$2 + 40 >> 2] >>> HEAP32[$2 + 36 >> 2] - 8 << 24 >> 24);
      HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 36 >> 2] - 8;
      continue;
     }
     break;
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree($2 + 16 | 0);
  if (HEAP8[$2 + 79 | 0] & 1) {
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 56 >> 2], 38815, HEAP32[$2 + 52 >> 2]);
   HEAP32[$2 + 156 >> 2] = HEAP32[$2 + 56 >> 2];
   break label$1;
  }
  HEAP32[$2 + 156 >> 2] = HEAP32[$2 + 52 >> 2];
 }
 global$0 = $2 + 160 | 0;
 return HEAP32[$2 + 156 >> 2];
}
function jsvMakeIntoVariableName($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 68 >> 2] = $1;
 label$1 : {
  if (!HEAP32[$2 + 72 >> 2]) {
   HEAP32[$2 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP16[$2 + 66 >> 1] = HEAPU16[HEAP32[$2 + 72 >> 2] + 14 >> 1] & 63;
  label$3 : {
   if (HEAPU16[$2 + 66 >> 1] == 9) {
    HEAP32[$2 + 60 >> 2] = 14;
    label$5 : {
     if (!(jsvIsInt(HEAP32[$2 + 68 >> 2]) & 1)) {
      if (!(jsvIsBoolean(HEAP32[$2 + 68 >> 2]) & 1)) {
       break label$5;
      }
     }
     if (jsvIsPin(HEAP32[$2 + 68 >> 2]) & 1) {
      break label$5;
     }
     HEAP32[$2 + 56 >> 2] = HEAP32[HEAP32[$2 + 68 >> 2] >> 2];
     if (!(HEAP32[$2 + 56 >> 2] < -32768 | HEAP32[$2 + 56 >> 2] > 32767)) {
      HEAP32[$2 + 60 >> 2] = jsvIsInt(HEAP32[$2 + 68 >> 2]) & 1 ? 15 : 16;
      jsvSetFirstChild(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 56 >> 2] & 65535);
      HEAP32[$2 + 68 >> 2] = 0;
     }
    }
    HEAP16[HEAP32[$2 + 72 >> 2] + 14 >> 1] = HEAP32[$2 + 60 >> 2] | HEAPU16[HEAP32[$2 + 72 >> 2] + 14 >> 1] & -64;
    break label$3;
   }
   if (!(HEAPU16[$2 + 66 >> 1] < 17 | HEAPU16[$2 + 66 >> 1] > 39)) {
    if (jsvGetCharactersInVar(HEAP32[$2 + 72 >> 2]) >>> 0 > 4) {
     jsvStringIteratorNew($2 + 32 | 0, HEAP32[$2 + 72 >> 2], 4);
     HEAP32[$2 + 28 >> 2] = jsvNewWithFlags(40);
     HEAP32[$2 + 24 >> 2] = jsvLockAgainSafe(HEAP32[$2 + 28 >> 2]);
     HEAP32[$2 + 20 >> 2] = 0;
     while (1) {
      if (HEAP32[$2 + 24 >> 2]) {
       $0 = jsvStringIteratorHasChar($2 + 32 | 0);
      } else {
       $0 = 0;
      }
      if ($0 & 1) {
       if (HEAPU32[$2 + 20 >> 2] >= 12) {
        jsvSetCharactersInVar(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2]);
        HEAP32[$2 + 16 >> 2] = jsvNewWithFlags(40);
        if (HEAP32[$2 + 16 >> 2]) {
         jsvSetLastChild(HEAP32[$2 + 24 >> 2], jsvGetRef(HEAP32[$2 + 16 >> 2]) & 65535);
        }
        jsvUnLock(HEAP32[$2 + 24 >> 2]);
        HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 16 >> 2];
        HEAP32[$2 + 20 >> 2] = 0;
       }
       $0 = jsvStringIteratorGetCharAndNext($2 + 32 | 0);
       $1 = HEAP32[$2 + 24 >> 2];
       $3 = HEAP32[$2 + 20 >> 2];
       HEAP32[$2 + 20 >> 2] = $3 + 1;
       HEAP8[$1 + $3 | 0] = $0;
       continue;
      }
      break;
     }
     jsvStringIteratorFree($2 + 32 | 0);
     if (HEAP32[$2 + 24 >> 2]) {
      jsvSetCharactersInVar(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2]);
      jsvUnLock(HEAP32[$2 + 24 >> 2]);
     }
     jsvSetCharactersInVar(HEAP32[$2 + 72 >> 2], 4);
     HEAP16[$2 + 14 >> 1] = jsvGetLastChild(HEAP32[$2 + 72 >> 2]);
     while (1) {
      if (HEAPU16[$2 + 14 >> 1]) {
       HEAP32[$2 + 8 >> 2] = jsvGetAddressOf(HEAPU16[$2 + 14 >> 1]);
       HEAP16[$2 + 14 >> 1] = jsvGetLastChild(HEAP32[$2 + 8 >> 2]);
       jsvFreePtrInternal(HEAP32[$2 + 8 >> 2]);
       continue;
      }
      break;
     }
     jsvSetLastChild(HEAP32[$2 + 72 >> 2], jsvGetRef(HEAP32[$2 + 28 >> 2]) & 65535);
     jsvSetNextSibling(HEAP32[$2 + 72 >> 2], 0);
     jsvSetPrevSibling(HEAP32[$2 + 72 >> 2], 0);
     jsvSetFirstChild(HEAP32[$2 + 72 >> 2], 0);
     jsvUnLock(HEAP32[$2 + 28 >> 2]);
    }
    HEAP32[$2 + 4 >> 2] = 22;
    label$19 : {
     label$20 : {
      if (!(jsvIsInt(HEAP32[$2 + 68 >> 2]) & 1)) {
       break label$20;
      }
      if (jsvIsPin(HEAP32[$2 + 68 >> 2]) & 1) {
       break label$20;
      }
      HEAP32[$2 >> 2] = HEAP32[HEAP32[$2 + 68 >> 2] >> 2];
      if (!(HEAP32[$2 >> 2] < -32768 | HEAP32[$2 >> 2] > 32767)) {
       HEAP32[$2 + 4 >> 2] = 17;
       jsvSetFirstChild(HEAP32[$2 + 72 >> 2], HEAP32[$2 >> 2] & 65535);
       HEAP32[$2 + 68 >> 2] = 0;
      }
      break label$19;
     }
     jsvSetFirstChild(HEAP32[$2 + 72 >> 2], 0);
    }
    $0 = HEAPU16[HEAP32[$2 + 72 >> 2] + 14 >> 1] & 65472 | HEAP32[$2 + 4 >> 2] + jsvGetCharactersInVar(HEAP32[$2 + 72 >> 2]);
    HEAP16[HEAP32[$2 + 72 >> 2] + 14 >> 1] = $0;
   }
  }
  if (HEAP32[$2 + 68 >> 2]) {
   jsvSetFirstChild(HEAP32[$2 + 72 >> 2], jsvGetRef(jsvRef(HEAP32[$2 + 68 >> 2])) & 65535);
  }
  HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 72 >> 2];
 }
 global$0 = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}
function tflite__reference_ops__BroadcastAdd4DSlow_28tflite__ArithmeticParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0;
 $7 = global$0 - 192 | 0;
 global$0 = $7;
 $8 = $7 + 72 | 0;
 HEAP32[$7 + 188 >> 2] = $0;
 HEAP32[$7 + 184 >> 2] = $1;
 HEAP32[$7 + 180 >> 2] = $2;
 HEAP32[$7 + 176 >> 2] = $3;
 HEAP32[$7 + 172 >> 2] = $4;
 HEAP32[$7 + 168 >> 2] = $5;
 HEAP32[$7 + 164 >> 2] = $6;
 void_20tflite__NdArrayDescsForElementwiseBroadcast_4__28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__2c_20tflite__NdArrayDesc_4___2c_20tflite__NdArrayDesc_4___29(HEAP32[$7 + 184 >> 2], HEAP32[$7 + 176 >> 2], $7 + 128 | 0, $7 + 96 | 0);
 tflite__RuntimeShape__ExtendedShape_28int_2c_20tflite__RuntimeShape_20const__29($8, 4, HEAP32[$7 + 168 >> 2]);
 HEAP32[$7 + 68 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 68 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 72 | 0, 0) | 0)) {
   HEAP32[$7 + 56 >> 2] = 0;
   while (1) {
    if (HEAP32[$7 + 56 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 72 | 0, 1) | 0)) {
     HEAP32[$7 + 52 >> 2] = 0;
     while (1) {
      if (HEAP32[$7 + 52 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 72 | 0, 2) | 0)) {
       HEAP32[$7 + 48 >> 2] = 0;
       while (1) {
        if (HEAP32[$7 + 48 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 72 | 0, 3) | 0)) {
         HEAP32[$7 + 44 >> 2] = HEAP32[HEAP32[$7 + 188 >> 2] + 4 >> 2] + HEAPU8[HEAP32[$7 + 180 >> 2] + tflite__SubscriptToIndex_28tflite__NdArrayDesc_4__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 128 | 0, HEAP32[$7 + 68 >> 2], HEAP32[$7 + 56 >> 2], HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2]) | 0];
         HEAP32[$7 + 40 >> 2] = HEAP32[HEAP32[$7 + 188 >> 2] + 8 >> 2] + HEAPU8[HEAP32[$7 + 172 >> 2] + tflite__SubscriptToIndex_28tflite__NdArrayDesc_4__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 96 | 0, HEAP32[$7 + 68 >> 2], HEAP32[$7 + 56 >> 2], HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2]) | 0];
         HEAP32[$7 + 36 >> 2] = Math_imul(HEAP32[$7 + 44 >> 2], 1 << HEAP32[HEAP32[$7 + 188 >> 2] + 24 >> 2]);
         HEAP32[$7 + 32 >> 2] = Math_imul(HEAP32[$7 + 40 >> 2], 1 << HEAP32[HEAP32[$7 + 188 >> 2] + 24 >> 2]);
         HEAP32[$7 + 28 >> 2] = tflite__MultiplyByQuantizedMultiplierSmallerThanOneExp_28int_2c_20int_2c_20int_29(HEAP32[$7 + 36 >> 2], HEAP32[HEAP32[$7 + 188 >> 2] + 28 >> 2], HEAP32[HEAP32[$7 + 188 >> 2] + 32 >> 2]);
         HEAP32[$7 + 24 >> 2] = tflite__MultiplyByQuantizedMultiplierSmallerThanOneExp_28int_2c_20int_2c_20int_29(HEAP32[$7 + 32 >> 2], HEAP32[HEAP32[$7 + 188 >> 2] + 36 >> 2], HEAP32[HEAP32[$7 + 188 >> 2] + 40 >> 2]);
         HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 28 >> 2] + HEAP32[$7 + 24 >> 2];
         HEAP32[$7 + 16 >> 2] = tflite__MultiplyByQuantizedMultiplierSmallerThanOneExp_28int_2c_20int_2c_20int_29(HEAP32[$7 + 20 >> 2], HEAP32[HEAP32[$7 + 188 >> 2] + 16 >> 2], HEAP32[HEAP32[$7 + 188 >> 2] + 20 >> 2]) + HEAP32[HEAP32[$7 + 188 >> 2] + 12 >> 2];
         HEAP32[$7 + 12 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29(HEAP32[$7 + 188 >> 2] + 48 | 0, int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29(HEAP32[$7 + 188 >> 2] + 44 | 0, $7 + 16 | 0)) >> 2];
         $0 = HEAP32[$7 + 12 >> 2];
         HEAP8[HEAP32[$7 + 164 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 72 | 0, HEAP32[$7 + 68 >> 2], HEAP32[$7 + 56 >> 2], HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2]) | 0] = $0;
         HEAP32[$7 + 48 >> 2] = HEAP32[$7 + 48 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$7 + 52 >> 2] = HEAP32[$7 + 52 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$7 + 56 >> 2] = HEAP32[$7 + 56 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$7 + 68 >> 2] = HEAP32[$7 + 68 >> 2] + 1;
   continue;
  }
  break;
 }
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 72 | 0);
 global$0 = $7 + 192 | 0;
}
function tflite__reference_integer_ops__BroadcastAdd4DSlow_28tflite__ArithmeticParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0;
 $7 = global$0 - 192 | 0;
 global$0 = $7;
 $8 = $7 + 72 | 0;
 HEAP32[$7 + 188 >> 2] = $0;
 HEAP32[$7 + 184 >> 2] = $1;
 HEAP32[$7 + 180 >> 2] = $2;
 HEAP32[$7 + 176 >> 2] = $3;
 HEAP32[$7 + 172 >> 2] = $4;
 HEAP32[$7 + 168 >> 2] = $5;
 HEAP32[$7 + 164 >> 2] = $6;
 void_20tflite__NdArrayDescsForElementwiseBroadcast_4__28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__2c_20tflite__NdArrayDesc_4___2c_20tflite__NdArrayDesc_4___29(HEAP32[$7 + 184 >> 2], HEAP32[$7 + 176 >> 2], $7 + 128 | 0, $7 + 96 | 0);
 tflite__RuntimeShape__ExtendedShape_28int_2c_20tflite__RuntimeShape_20const__29($8, 4, HEAP32[$7 + 168 >> 2]);
 HEAP32[$7 + 68 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 68 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 72 | 0, 0) | 0)) {
   HEAP32[$7 + 56 >> 2] = 0;
   while (1) {
    if (HEAP32[$7 + 56 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 72 | 0, 1) | 0)) {
     HEAP32[$7 + 52 >> 2] = 0;
     while (1) {
      if (HEAP32[$7 + 52 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 72 | 0, 2) | 0)) {
       HEAP32[$7 + 48 >> 2] = 0;
       while (1) {
        if (HEAP32[$7 + 48 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 72 | 0, 3) | 0)) {
         HEAP32[$7 + 44 >> 2] = HEAP32[HEAP32[$7 + 188 >> 2] + 4 >> 2] + HEAP8[HEAP32[$7 + 180 >> 2] + tflite__SubscriptToIndex_28tflite__NdArrayDesc_4__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 128 | 0, HEAP32[$7 + 68 >> 2], HEAP32[$7 + 56 >> 2], HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2]) | 0];
         HEAP32[$7 + 40 >> 2] = HEAP32[HEAP32[$7 + 188 >> 2] + 8 >> 2] + HEAP8[HEAP32[$7 + 172 >> 2] + tflite__SubscriptToIndex_28tflite__NdArrayDesc_4__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 96 | 0, HEAP32[$7 + 68 >> 2], HEAP32[$7 + 56 >> 2], HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2]) | 0];
         HEAP32[$7 + 36 >> 2] = Math_imul(HEAP32[$7 + 44 >> 2], 1 << HEAP32[HEAP32[$7 + 188 >> 2] + 24 >> 2]);
         HEAP32[$7 + 32 >> 2] = Math_imul(HEAP32[$7 + 40 >> 2], 1 << HEAP32[HEAP32[$7 + 188 >> 2] + 24 >> 2]);
         HEAP32[$7 + 28 >> 2] = tflite__MultiplyByQuantizedMultiplierSmallerThanOneExp_28int_2c_20int_2c_20int_29(HEAP32[$7 + 36 >> 2], HEAP32[HEAP32[$7 + 188 >> 2] + 28 >> 2], HEAP32[HEAP32[$7 + 188 >> 2] + 32 >> 2]);
         HEAP32[$7 + 24 >> 2] = tflite__MultiplyByQuantizedMultiplierSmallerThanOneExp_28int_2c_20int_2c_20int_29(HEAP32[$7 + 32 >> 2], HEAP32[HEAP32[$7 + 188 >> 2] + 36 >> 2], HEAP32[HEAP32[$7 + 188 >> 2] + 40 >> 2]);
         HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 28 >> 2] + HEAP32[$7 + 24 >> 2];
         HEAP32[$7 + 16 >> 2] = tflite__MultiplyByQuantizedMultiplierSmallerThanOneExp_28int_2c_20int_2c_20int_29(HEAP32[$7 + 20 >> 2], HEAP32[HEAP32[$7 + 188 >> 2] + 16 >> 2], HEAP32[HEAP32[$7 + 188 >> 2] + 20 >> 2]) + HEAP32[HEAP32[$7 + 188 >> 2] + 12 >> 2];
         HEAP32[$7 + 12 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29(HEAP32[$7 + 188 >> 2] + 48 | 0, int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29(HEAP32[$7 + 188 >> 2] + 44 | 0, $7 + 16 | 0)) >> 2];
         $0 = HEAP32[$7 + 12 >> 2];
         HEAP8[HEAP32[$7 + 164 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 72 | 0, HEAP32[$7 + 68 >> 2], HEAP32[$7 + 56 >> 2], HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2]) | 0] = $0;
         HEAP32[$7 + 48 >> 2] = HEAP32[$7 + 48 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$7 + 52 >> 2] = HEAP32[$7 + 52 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$7 + 56 >> 2] = HEAP32[$7 + 56 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$7 + 68 >> 2] = HEAP32[$7 + 68 >> 2] + 1;
   continue;
  }
  break;
 }
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 72 | 0);
 global$0 = $7 + 192 | 0;
}
function tflite__ops__micro__activations__PreluEval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 224 | 0;
 global$0 = $2;
 HEAP32[$2 + 216 >> 2] = $0;
 HEAP32[$2 + 212 >> 2] = $1;
 HEAP32[$2 + 208 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 216 >> 2], HEAP32[$2 + 212 >> 2], 0);
 HEAP32[$2 + 204 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 216 >> 2], HEAP32[$2 + 212 >> 2], 1);
 HEAP32[$2 + 200 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 216 >> 2], HEAP32[$2 + 212 >> 2]);
 HEAP32[$2 + 196 >> 2] = 0;
 HEAP32[$2 + 192 >> 2] = 0;
 if (!(HEAP32[HEAP32[$2 + 200 >> 2] >> 2] != 7 ? HEAP32[HEAP32[$2 + 200 >> 2] >> 2] != 3 : 0)) {
  HEAPF64[$2 + 184 >> 3] = Math_fround(Math_fround(HEAPF32[HEAP32[$2 + 208 >> 2] + 12 >> 2] * HEAPF32[HEAP32[$2 + 204 >> 2] + 12 >> 2]) / HEAPF32[HEAP32[$2 + 200 >> 2] + 12 >> 2]);
  tflite__QuantizeMultiplierSmallerThanOneExp_28double_2c_20int__2c_20int__29(HEAPF64[$2 + 184 >> 3], $2 + 196 | 0, $2 + 192 | 0);
 }
 label$3 : {
  label$4 : {
   $0 = HEAP32[HEAP32[$2 + 208 >> 2] >> 2] + -1 | 0;
   if ($0 >>> 0 > 2) {
    break label$4;
   }
   label$5 : {
    switch ($0 - 1 | 0) {
    default:
     tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 160 | 0, HEAP32[$2 + 208 >> 2]);
     $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 208 >> 2]);
     tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 128 | 0, HEAP32[$2 + 204 >> 2]);
     $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 204 >> 2]);
     tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 104 | 0, HEAP32[$2 + 200 >> 2]);
     tflite__ops__micro__activations__BroadcastPrelu4DSlowFloat_28tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($2 + 160 | 0, $0, $2 + 128 | 0, $1, $2 + 104 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 200 >> 2]));
     $0 = $2 + 160 | 0;
     $1 = $2 + 128 | 0;
     tflite__RuntimeShape___RuntimeShape_28_29($2 + 104 | 0);
     tflite__RuntimeShape___RuntimeShape_28_29($1);
     tflite__RuntimeShape___RuntimeShape_28_29($0);
     HEAP32[$2 + 220 >> 2] = 0;
     break label$3;
    case 0:
     break label$4;
    case 1:
     break label$5;
    }
   }
   HEAP32[$2 + 80 >> 2] = 0 - HEAP32[HEAP32[$2 + 208 >> 2] + 16 >> 2];
   HEAP32[$2 + 84 >> 2] = 0 - HEAP32[HEAP32[$2 + 204 >> 2] + 16 >> 2];
   HEAP32[$2 + 88 >> 2] = HEAP32[HEAP32[$2 + 200 >> 2] + 16 >> 2];
   HEAP32[$2 + 92 >> 2] = HEAP32[$2 + 196 >> 2];
   HEAP32[$2 + 96 >> 2] = HEAP32[$2 + 192 >> 2];
   tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 56 | 0, HEAP32[$2 + 208 >> 2]);
   $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 208 >> 2]);
   tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 32 | 0, HEAP32[$2 + 204 >> 2]);
   $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 204 >> 2]);
   tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 8 | 0, HEAP32[$2 + 200 >> 2]);
   tflite__reference_ops__BroadcastPrelu4DSlow_28tflite__PreluParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($2 + 80 | 0, $2 + 56 | 0, $0, $2 + 32 | 0, $1, $2 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 200 >> 2]));
   $0 = $2 + 56 | 0;
   $1 = $2 + 32 | 0;
   tflite__RuntimeShape___RuntimeShape_28_29($2 + 8 | 0);
   tflite__RuntimeShape___RuntimeShape_28_29($1);
   tflite__RuntimeShape___RuntimeShape_28_29($0);
   HEAP32[$2 + 220 >> 2] = 0;
   break label$3;
  }
  $0 = HEAP32[HEAP32[$2 + 216 >> 2] + 20 >> 2];
  $1 = HEAP32[$2 + 216 >> 2];
  HEAP32[$2 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 208 >> 2] >> 2]);
  FUNCTION_TABLE[$0]($1, 44602, $2);
  HEAP32[$2 + 220 >> 2] = 1;
 }
 global$0 = $2 + 224 | 0;
 return HEAP32[$2 + 220 >> 2];
}
function tflite__reference_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = global$0 - 112 | 0;
 global$0 = $9;
 HEAP32[$9 + 108 >> 2] = $0;
 HEAP32[$9 + 104 >> 2] = $1;
 HEAP32[$9 + 100 >> 2] = $2;
 HEAP32[$9 + 96 >> 2] = $3;
 HEAP32[$9 + 92 >> 2] = $4;
 HEAP32[$9 + 88 >> 2] = $5;
 HEAP32[$9 + 84 >> 2] = $6;
 HEAP32[$9 + 80 >> 2] = $7;
 HEAP32[$9 + 76 >> 2] = $8;
 HEAP32[$9 + 72 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] >> 2];
 HEAP32[$9 + 68 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 4 >> 2];
 HEAP32[$9 + 64 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 8 >> 2];
 HEAP32[$9 + 60 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 12 >> 2];
 HEAP32[$9 + 56 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 16 >> 2];
 HEAP32[$9 + 52 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 20 >> 2];
 HEAP32[$9 + 48 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 24 >> 2];
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$9 + 96 >> 2]) | 0) < 2) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$9 + 80 >> 2]) | 0) < 1) {
   break label$2;
  }
 }
 label$3 : {
  if (HEAP32[$9 + 52 >> 2] > HEAP32[$9 + 48 >> 2]) {
   break label$3;
  }
 }
 HEAP32[$9 + 44 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$9 + 80 >> 2]);
 HEAP32[$9 + 40 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$9 + 96 >> 2]);
 HEAP32[$9 + 36 >> 2] = tflite__FlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 80 >> 2], HEAP32[$9 + 44 >> 2] - 1 | 0);
 HEAP32[$9 + 32 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 96 >> 2], HEAP32[$9 + 40 >> 2] - 2 | 0, HEAP32[$9 + 80 >> 2], HEAP32[$9 + 44 >> 2] - 1 | 0);
 HEAP32[$9 + 28 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 96 >> 2], HEAP32[$9 + 40 >> 2] - 1 | 0);
 HEAP32[$9 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$9 + 24 >> 2] < HEAP32[$9 + 36 >> 2]) {
   HEAP32[$9 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$9 + 20 >> 2] < HEAP32[$9 + 32 >> 2]) {
     HEAP32[$9 + 16 >> 2] = 0;
     HEAP32[$9 + 12 >> 2] = 0;
     while (1) {
      if (HEAP32[$9 + 12 >> 2] < HEAP32[$9 + 28 >> 2]) {
       HEAP32[$9 + 8 >> 2] = HEAPU8[HEAP32[$9 + 100 >> 2] + (HEAP32[$9 + 12 >> 2] + Math_imul(HEAP32[$9 + 24 >> 2], HEAP32[$9 + 28 >> 2]) | 0) | 0];
       HEAP32[$9 + 4 >> 2] = HEAPU8[HEAP32[$9 + 92 >> 2] + (HEAP32[$9 + 12 >> 2] + Math_imul(HEAP32[$9 + 20 >> 2], HEAP32[$9 + 28 >> 2]) | 0) | 0];
       HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 16 >> 2] + Math_imul(HEAP32[$9 + 4 >> 2] + HEAP32[$9 + 68 >> 2] | 0, HEAP32[$9 + 8 >> 2] + HEAP32[$9 + 72 >> 2] | 0);
       HEAP32[$9 + 12 >> 2] = HEAP32[$9 + 12 >> 2] + 1;
       continue;
      }
      break;
     }
     if (HEAP32[$9 + 84 >> 2]) {
      HEAP32[$9 + 16 >> 2] = HEAP32[HEAP32[$9 + 84 >> 2] + (HEAP32[$9 + 20 >> 2] << 2) >> 2] + HEAP32[$9 + 16 >> 2];
     }
     $0 = $9 + 16 | 0;
     $1 = $9 + 48 | 0;
     $2 = $9 + 52 | 0;
     HEAP32[$9 + 16 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$9 + 16 >> 2], HEAP32[$9 + 60 >> 2], HEAP32[$9 + 56 >> 2]);
     HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 64 >> 2] + HEAP32[$9 + 16 >> 2];
     HEAP32[$9 + 16 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, $2) >> 2];
     HEAP32[$9 + 16 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0, $1) >> 2];
     HEAP8[HEAP32[$9 + 76 >> 2] + (HEAP32[$9 + 20 >> 2] + Math_imul(HEAP32[$9 + 32 >> 2], HEAP32[$9 + 24 >> 2]) | 0) | 0] = HEAP32[$9 + 16 >> 2];
     HEAP32[$9 + 20 >> 2] = HEAP32[$9 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$9 + 24 >> 2] = HEAP32[$9 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $9 + 112 | 0;
}
function jsvDefragment() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
 $0 = global$0 - 576 | 0;
 global$0 = $0;
 $1 = $0 + 48 | 0;
 jsvGarbageCollect();
 HEAP32[$0 + 572 >> 2] = 256;
 memset($1, 0, 512);
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 40 >> 2] = 0;
 while (1) {
  if (HEAPU32[$0 + 40 >> 2] < HEAPU32[13337]) {
   HEAP16[$0 + 38 >> 1] = HEAP32[$0 + 40 >> 2] + 1;
   HEAP32[$0 + 32 >> 2] = _jsvGetAddressOf(HEAPU16[$0 + 38 >> 1]);
   if (HEAPU16[HEAP32[$0 + 32 >> 2] + 14 >> 1] & 63) {
    label$4 : {
     if (jsvIsFlatString(HEAP32[$0 + 32 >> 2]) & 1) {
      HEAP32[$0 + 40 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 32 >> 2]) + HEAP32[$0 + 40 >> 2];
      break label$4;
     }
     if (!(jsvGetLocks(HEAP32[$0 + 32 >> 2]) & 255)) {
      HEAP16[($0 + 48 | 0) + (HEAP32[$0 + 44 >> 2] << 1) >> 1] = HEAPU16[$0 + 38 >> 1];
      HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + 1 & 255;
     }
    }
   }
   HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + -1;
 if (HEAP32[$0 + 44 >> 2] < 0) {
  HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + 256;
 }
 while (1) {
  label$9 : {
   if (!HEAPU16[($0 + 48 | 0) + (HEAP32[$0 + 44 >> 2] << 1) >> 1]) {
    break label$9;
   }
   HEAP16[$0 + 30 >> 1] = HEAPU16[($0 + 48 | 0) + (HEAP32[$0 + 44 >> 2] << 1) >> 1];
   HEAP16[$0 + 28 >> 1] = HEAPU16[27542];
   if (!HEAPU16[$0 + 28 >> 1] | HEAPU16[$0 + 30 >> 1] < HEAPU16[$0 + 28 >> 1]) {
    break label$9;
   }
   HEAP32[$0 + 24 >> 2] = _jsvGetAddressOf(HEAPU16[$0 + 30 >> 1]);
   HEAP32[$0 + 20 >> 2] = _jsvGetAddressOf(HEAPU16[$0 + 28 >> 1]);
   HEAP16[27542] = jsvGetNextSibling(HEAP32[$0 + 20 >> 2]);
   $1 = HEAP32[$0 + 24 >> 2];
   $3 = HEAP32[$1 + 4 >> 2];
   $2 = HEAP32[$0 + 20 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$2 + 4 >> 2] = $3;
   $3 = HEAP32[$1 + 12 >> 2];
   HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$2 + 12 >> 2] = $3;
   HEAP16[HEAP32[$0 + 24 >> 2] + 14 >> 1] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   while (1) {
    if (HEAPU32[$0 + 16 >> 2] < HEAPU32[13337]) {
     HEAP16[$0 + 14 >> 1] = HEAP32[$0 + 16 >> 2] + 1;
     HEAP32[$0 + 8 >> 2] = _jsvGetAddressOf(HEAPU16[$0 + 14 >> 1]);
     if (HEAPU16[HEAP32[$0 + 8 >> 2] + 14 >> 1] & 63) {
      label$13 : {
       if (jsvIsFlatString(HEAP32[$0 + 8 >> 2]) & 1) {
        HEAP32[$0 + 16 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 8 >> 2]) + HEAP32[$0 + 16 >> 2];
        break label$13;
       }
       if (jsvHasSingleChild(HEAP32[$0 + 8 >> 2]) & 1) {
        if ((jsvGetFirstChild(HEAP32[$0 + 8 >> 2]) & 65535) == HEAPU16[$0 + 30 >> 1]) {
         jsvSetFirstChild(HEAP32[$0 + 8 >> 2], HEAPU16[$0 + 28 >> 1]);
        }
       }
       if (jsvHasCharacterData(HEAP32[$0 + 8 >> 2]) & 1) {
        if ((jsvGetLastChild(HEAP32[$0 + 8 >> 2]) & 65535) == HEAPU16[$0 + 30 >> 1]) {
         jsvSetLastChild(HEAP32[$0 + 8 >> 2], HEAPU16[$0 + 28 >> 1]);
        }
       }
       if (jsvHasChildren(HEAP32[$0 + 8 >> 2]) & 1) {
        if ((jsvGetFirstChild(HEAP32[$0 + 8 >> 2]) & 65535) == HEAPU16[$0 + 30 >> 1]) {
         jsvSetFirstChild(HEAP32[$0 + 8 >> 2], HEAPU16[$0 + 28 >> 1]);
        }
        if ((jsvGetLastChild(HEAP32[$0 + 8 >> 2]) & 65535) == HEAPU16[$0 + 30 >> 1]) {
         jsvSetLastChild(HEAP32[$0 + 8 >> 2], HEAPU16[$0 + 28 >> 1]);
        }
       }
       if (jsvIsName(HEAP32[$0 + 8 >> 2]) & 1) {
        if ((jsvGetNextSibling(HEAP32[$0 + 8 >> 2]) & 65535) == HEAPU16[$0 + 30 >> 1]) {
         jsvSetNextSibling(HEAP32[$0 + 8 >> 2], HEAPU16[$0 + 28 >> 1]);
        }
        if ((jsvGetPrevSibling(HEAP32[$0 + 8 >> 2]) & 65535) == HEAPU16[$0 + 30 >> 1]) {
         jsvSetPrevSibling(HEAP32[$0 + 8 >> 2], HEAPU16[$0 + 28 >> 1]);
        }
       }
      }
     }
     HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP16[($0 + 48 | 0) + (HEAP32[$0 + 44 >> 2] << 1) >> 1] = 0;
   HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + -1;
   if (HEAP32[$0 + 44 >> 2] < 0) {
    HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + 256;
   }
   continue;
  }
  break;
 }
 jsvCreateEmptyVarList();
 global$0 = $0 + 576 | 0;
}
function jswrap_onewire_search($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 96 | 0;
 global$0 = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP32[$2 + 84 >> 2] = $1;
 HEAP8[$2 + 83 | 0] = onewire_getpin(HEAP32[$2 + 88 >> 2]);
 label$1 : {
  if (!(jshIsPinValid(HEAPU8[$2 + 83 | 0]) & 1)) {
   HEAP32[$2 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 76 >> 2] = jsvNewWithFlags(3);
  if (!HEAP32[$2 + 76 >> 2]) {
   HEAP32[$2 + 92 >> 2] = 0;
   break label$1;
  }
  if (!(HEAP32[$2 + 84 >> 2] <= 255 ? HEAP32[$2 + 84 >> 2] > 0 : 0)) {
   HEAP32[$2 + 84 >> 2] = 240;
  }
  HEAP32[$2 + 64 >> 2] = 0;
  HEAP32[$2 + 56 >> 2] = 0;
  HEAP32[$2 + 60 >> 2] = 0;
  HEAP32[$2 + 52 >> 2] = 1;
  while (1) {
   if (HEAP32[$2 + 52 >> 2]) {
    HEAP32[$2 + 48 >> 2] = 1;
    HEAP32[$2 + 44 >> 2] = 0;
    HEAP32[$2 + 40 >> 2] = 0;
    HEAP8[$2 + 37 | 0] = 1;
    HEAP32[$2 + 52 >> 2] = 0;
    if (!HEAP32[$2 + 56 >> 2]) {
     if (!(OneWireReset(HEAPU8[$2 + 83 | 0]) & 1)) {
      HEAP32[$2 + 64 >> 2] = 0;
      HEAP32[$2 + 56 >> 2] = 0;
      HEAP32[$2 + 60 >> 2] = 0;
      HEAP32[$2 + 92 >> 2] = HEAP32[$2 + 76 >> 2];
      break label$1;
     }
     $0 = HEAP32[$2 + 84 >> 2];
     OneWireWrite(HEAPU8[$2 + 83 | 0], 8, $0, $0 >> 31);
     while (1) {
      HEAP8[$2 + 39 | 0] = OneWireRead(HEAPU8[$2 + 83 | 0], 1);
      HEAP8[$2 + 38 | 0] = OneWireRead(HEAPU8[$2 + 83 | 0], 1);
      label$11 : {
       if (!(HEAPU8[$2 + 39 | 0] != 1 | HEAPU8[$2 + 38 | 0] != 1)) {
        break label$11;
       }
       label$13 : {
        if (HEAPU8[$2 + 39 | 0] != HEAPU8[$2 + 38 | 0]) {
         HEAP8[$2 + 36 | 0] = HEAPU8[$2 + 39 | 0];
         break label$13;
        }
        label$15 : {
         if (HEAP32[$2 + 48 >> 2] < HEAP32[$2 + 64 >> 2]) {
          HEAP8[$2 + 36 | 0] = (HEAPU8[HEAP32[$2 + 40 >> 2] + ($2 + 68 | 0) | 0] & HEAPU8[$2 + 37 | 0]) > 0;
          break label$15;
         }
         HEAP8[$2 + 36 | 0] = HEAP32[$2 + 48 >> 2] == HEAP32[$2 + 64 >> 2];
        }
        if (!HEAPU8[$2 + 36 | 0]) {
         HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 48 >> 2];
         if (HEAP32[$2 + 44 >> 2] < 9) {
          HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 44 >> 2];
         }
        }
       }
       label$19 : {
        if (HEAPU8[$2 + 36 | 0] == 1) {
         $0 = HEAP32[$2 + 40 >> 2] + ($2 + 68 | 0) | 0;
         HEAP8[$0 | 0] = HEAPU8[$2 + 37 | 0] | HEAPU8[$0 | 0];
         break label$19;
        }
        $0 = HEAP32[$2 + 40 >> 2] + ($2 + 68 | 0) | 0;
        HEAP8[$0 | 0] = HEAPU8[$0 | 0] & ((HEAPU8[$2 + 37 | 0] ^ -1) & 255);
       }
       OneWireWrite(HEAPU8[$2 + 83 | 0], 1, HEAPU8[$2 + 36 | 0], 0);
       HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 48 >> 2] + 1;
       HEAP8[$2 + 37 | 0] = HEAPU8[$2 + 37 | 0] << 1;
       if (!HEAPU8[$2 + 37 | 0]) {
        HEAP32[$2 + 40 >> 2] = HEAP32[$2 + 40 >> 2] + 1;
        HEAP8[$2 + 37 | 0] = 1;
       }
       if (HEAP32[$2 + 40 >> 2] < 8) {
        continue;
       }
      }
      break;
     }
     if (HEAP32[$2 + 48 >> 2] >= 65) {
      HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 44 >> 2];
      if (!HEAP32[$2 + 64 >> 2]) {
       HEAP32[$2 + 56 >> 2] = 1;
      }
      HEAP32[$2 + 52 >> 2] = 1;
     }
    }
    if (!(HEAPU8[$2 + 68 | 0] ? HEAP32[$2 + 52 >> 2] : 0)) {
     HEAP32[$2 + 64 >> 2] = 0;
     HEAP32[$2 + 56 >> 2] = 0;
     HEAP32[$2 + 60 >> 2] = 0;
     HEAP32[$2 + 52 >> 2] = 0;
    }
    if (HEAP32[$2 + 52 >> 2]) {
     HEAP32[$2 + 32 >> 2] = 0;
     while (1) {
      if (HEAP32[$2 + 32 >> 2] < 8) {
       $0 = $2 + 68 | 0;
       $1 = itoch(HEAPU8[$0 + HEAP32[$2 + 32 >> 2] | 0] >> 4);
       HEAP8[(HEAP32[$2 + 32 >> 2] << 1) + $2 | 0] = $1;
       $0 = itoch(HEAPU8[$0 + HEAP32[$2 + 32 >> 2] | 0] & 15);
       HEAP8[((HEAP32[$2 + 32 >> 2] << 1) + 1 | 0) + $2 | 0] = $0;
       HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 32 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP8[$2 + 16 | 0] = 0;
     jsvArrayPushAndUnLock(HEAP32[$2 + 76 >> 2], jsvNewFromString($2));
    }
    continue;
   }
   break;
  }
  HEAP32[$2 + 92 >> 2] = HEAP32[$2 + 76 >> 2];
 }
 global$0 = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}
function lcdSetCallbacks_ArrayBuffer($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $2 = $1 + 4 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = jsvObjectGetChild(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 27664, 0);
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 >> 2] = jsvGetDataPointer(HEAP32[$1 + 8 >> 2], $2);
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 label$1 : {
  label$2 : {
   if (!HEAP32[$1 >> 2]) {
    break label$2;
   }
   if (HEAPU32[$1 + 4 >> 2] < graphicsGetMemoryRequired(HEAP32[$1 + 12 >> 2]) >>> 0) {
    break label$2;
   }
   $0 = HEAP32[$1 + 12 >> 2];
   if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 1) {
    break label$2;
   }
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = HEAP32[$1 >> 2];
   HEAP8[$0 + 48 | 0] = $2;
   HEAP8[$0 + 49 | 0] = $2 >>> 8;
   HEAP8[$0 + 50 | 0] = $2 >>> 16;
   HEAP8[$0 + 51 | 0] = $2 >>> 24;
   label$3 : {
    label$4 : {
     if (HEAPU8[HEAP32[$1 + 12 >> 2] + 16 | 0] != 1) {
      break label$4;
     }
     $0 = HEAP32[$1 + 12 >> 2];
     if (!((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4)) {
      break label$4;
     }
     $0 = HEAP32[$1 + 12 >> 2];
     if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 11) {
      break label$4;
     }
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP8[$0 + 52 | 0] = 489;
     HEAP8[$0 + 53 | 0] = 1;
     HEAP8[$0 + 54 | 0] = 0;
     HEAP8[$0 + 55 | 0] = 0;
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP8[$0 + 60 | 0] = 488;
     HEAP8[$0 + 61 | 0] = 1;
     HEAP8[$0 + 62 | 0] = 0;
     HEAP8[$0 + 63 | 0] = 0;
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP8[$0 + 56 | 0] = 487;
     HEAP8[$0 + 57 | 0] = 1;
     HEAP8[$0 + 58 | 0] = 0;
     HEAP8[$0 + 59 | 0] = 0;
     break label$3;
    }
    label$5 : {
     label$6 : {
      if (HEAPU8[HEAP32[$1 + 12 >> 2] + 16 | 0] != 8) {
       break label$6;
      }
      $0 = HEAP32[$1 + 12 >> 2];
      if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 11) {
       break label$6;
      }
      $0 = HEAP32[$1 + 12 >> 2];
      HEAP8[$0 + 52 | 0] = 493;
      HEAP8[$0 + 53 | 0] = 1;
      HEAP8[$0 + 54 | 0] = 0;
      HEAP8[$0 + 55 | 0] = 0;
      $0 = HEAP32[$1 + 12 >> 2];
      HEAP8[$0 + 60 | 0] = 492;
      HEAP8[$0 + 61 | 0] = 1;
      HEAP8[$0 + 62 | 0] = 0;
      HEAP8[$0 + 63 | 0] = 0;
      $0 = HEAP32[$1 + 12 >> 2];
      HEAP8[$0 + 56 | 0] = 491;
      HEAP8[$0 + 57 | 0] = 1;
      HEAP8[$0 + 58 | 0] = 0;
      HEAP8[$0 + 59 | 0] = 0;
      $0 = HEAP32[$1 + 12 >> 2];
      HEAP8[$0 + 64 | 0] = 490;
      HEAP8[$0 + 65 | 0] = 1;
      HEAP8[$0 + 66 | 0] = 0;
      HEAP8[$0 + 67 | 0] = 0;
      break label$5;
     }
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP8[$0 + 52 | 0] = 495;
     HEAP8[$0 + 53 | 0] = 1;
     HEAP8[$0 + 54 | 0] = 0;
     HEAP8[$0 + 55 | 0] = 0;
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP8[$0 + 60 | 0] = 488;
     HEAP8[$0 + 61 | 0] = 1;
     HEAP8[$0 + 62 | 0] = 0;
     HEAP8[$0 + 63 | 0] = 0;
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP8[$0 + 56 | 0] = 494;
     HEAP8[$0 + 57 | 0] = 1;
     HEAP8[$0 + 58 | 0] = 0;
     HEAP8[$0 + 59 | 0] = 0;
    }
   }
   break label$1;
  }
  if (jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) {
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   HEAP8[$0 + 48 | 0] = $2;
   HEAP8[$0 + 49 | 0] = $2 >>> 8;
   HEAP8[$0 + 50 | 0] = $2 >>> 16;
   HEAP8[$0 + 51 | 0] = $2 >>> 24;
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP8[$0 + 52 | 0] = 498;
   HEAP8[$0 + 53 | 0] = 1;
   HEAP8[$0 + 54 | 0] = 0;
   HEAP8[$0 + 55 | 0] = 0;
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP8[$0 + 60 | 0] = 497;
   HEAP8[$0 + 61 | 0] = 1;
   HEAP8[$0 + 62 | 0] = 0;
   HEAP8[$0 + 63 | 0] = 0;
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP8[$0 + 56 | 0] = 496;
   HEAP8[$0 + 57 | 0] = 1;
   HEAP8[$0 + 58 | 0] = 0;
   HEAP8[$0 + 59 | 0] = 0;
  }
 }
 global$0 = $1 + 16 | 0;
}
function TfLiteStatus_20tflite__ops__micro__split__SplitImpl_float__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor_20const__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 112 | 0;
 global$0 = $4;
 HEAP32[$4 + 108 >> 2] = $0;
 HEAP32[$4 + 104 >> 2] = $1;
 HEAP32[$4 + 100 >> 2] = $2;
 HEAP32[$4 + 96 >> 2] = $3;
 HEAP32[$4 + 92 >> 2] = tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$4 + 104 >> 2]);
 HEAP32[$4 + 88 >> 2] = HEAP32[HEAP32[$4 + 100 >> 2] + 8 >> 2];
 HEAP32[$4 + 84 >> 2] = HEAP32[HEAP32[$4 + 108 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$4 + 104 >> 2] + 4 >> 2] + 4 >> 2], 56);
 HEAP32[$4 + 80 >> 2] = HEAP32[HEAP32[$4 + 84 >> 2] + 8 >> 2];
 HEAP32[$4 + 76 >> 2] = HEAP32[HEAP32[$4 + 88 >> 2] >> 2];
 $0 = $4;
 if (HEAP32[$4 + 96 >> 2] < 0) {
  $1 = HEAP32[$4 + 96 >> 2] + HEAP32[$4 + 76 >> 2] | 0;
 } else {
  $1 = HEAP32[$4 + 96 >> 2];
 }
 HEAP32[$0 + 72 >> 2] = $1;
 label$3 : {
  if (HEAP32[$4 + 72 >> 2] >= HEAP32[$4 + 76 >> 2]) {
   break label$3;
  }
 }
 label$4 : {
  if (HEAP32[HEAP32[$4 + 80 >> 2] >> 2] != HEAP32[$4 + 76 >> 2]) {
   break label$4;
  }
 }
 $0 = Math_imul(HEAP32[(HEAP32[$4 + 80 >> 2] + 4 | 0) + (HEAP32[$4 + 72 >> 2] << 2) >> 2], HEAP32[$4 + 92 >> 2]);
 HEAP32[$4 + 64 >> 2] = $0;
 HEAP32[$4 + 68 >> 2] = $0 >> 31;
 $0 = HEAP32[(HEAP32[$4 + 88 >> 2] + 4 | 0) + (HEAP32[$4 + 72 >> 2] << 2) >> 2];
 label$5 : {
  if (($0 | 0) != HEAP32[$4 + 64 >> 2] | HEAP32[$4 + 68 >> 2] != $0 >> 31) {
   break label$5;
  }
 }
 HEAP32[$4 + 56 >> 2] = 1;
 HEAP32[$4 + 60 >> 2] = 0;
 HEAP32[$4 + 52 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 52 >> 2] < HEAP32[$4 + 72 >> 2]) {
   $0 = HEAP32[(HEAP32[$4 + 88 >> 2] + 4 | 0) + (HEAP32[$4 + 52 >> 2] << 2) >> 2];
   HEAP32[$4 + 56 >> 2] = __wasm_i64_mul(HEAP32[$4 + 56 >> 2], HEAP32[$4 + 60 >> 2], $0, $0 >> 31);
   HEAP32[$4 + 60 >> 2] = i64toi32_i32$HIGH_BITS;
   HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$4 + 40 >> 2] = 1;
 HEAP32[$4 + 44 >> 2] = 0;
 HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 72 >> 2] + 1;
 while (1) {
  if (HEAP32[$4 + 36 >> 2] < HEAP32[$4 + 76 >> 2]) {
   $0 = HEAP32[(HEAP32[$4 + 88 >> 2] + 4 | 0) + (HEAP32[$4 + 36 >> 2] << 2) >> 2];
   HEAP32[$4 + 40 >> 2] = __wasm_i64_mul(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 44 >> 2], $0, $0 >> 31);
   HEAP32[$4 + 44 >> 2] = i64toi32_i32$HIGH_BITS;
   HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 36 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$4 + 32 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$4 + 100 >> 2]);
 HEAP32[$4 + 28 >> 2] = 0;
 while (1) {
  $0 = HEAP32[$4 + 28 >> 2];
  $2 = $0 >>> 0 >= HEAPU32[$4 + 56 >> 2] ? 0 : 1;
  $0 = $0 >> 31;
  $1 = HEAP32[$4 + 60 >> 2];
  if (($0 | 0) < ($1 | 0) ? 1 : ($0 | 0) <= ($1 | 0) ? $2 : 0) {
   HEAP32[$4 + 24 >> 2] = 0;
   while (1) {
    if (HEAP32[$4 + 24 >> 2] < HEAP32[$4 + 92 >> 2]) {
     HEAP32[$4 + 20 >> 2] = HEAP32[HEAP32[$4 + 108 >> 2] + 8 >> 2] + Math_imul(HEAP32[(HEAP32[HEAP32[$4 + 104 >> 2] + 4 >> 2] + 4 | 0) + (HEAP32[$4 + 24 >> 2] << 2) >> 2], 56);
     HEAP32[$4 + 16 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$4 + 20 >> 2]);
     $0 = HEAP32[(HEAP32[$4 + 80 >> 2] + 4 | 0) + (HEAP32[$4 + 72 >> 2] << 2) >> 2];
     HEAP32[$4 + 12 >> 2] = __wasm_i64_mul(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 44 >> 2], $0, $0 >> 31);
     HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 16 >> 2] + (Math_imul(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 12 >> 2]) << 2);
     HEAP32[$4 + 4 >> 2] = 0;
     while (1) {
      if (HEAP32[$4 + 4 >> 2] < HEAP32[$4 + 12 >> 2]) {
       HEAPF32[HEAP32[$4 + 8 >> 2] + (HEAP32[$4 + 4 >> 2] << 2) >> 2] = HEAPF32[HEAP32[$4 + 32 >> 2] + (HEAP32[$4 + 4 >> 2] << 2) >> 2];
       HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 32 >> 2] + (HEAP32[$4 + 12 >> 2] << 2);
     HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $4 + 112 | 0;
 return 0;
}
function TfLiteStatus_20tflite__ops__micro__split__SplitImpl_short__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor_20const__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 112 | 0;
 global$0 = $4;
 HEAP32[$4 + 108 >> 2] = $0;
 HEAP32[$4 + 104 >> 2] = $1;
 HEAP32[$4 + 100 >> 2] = $2;
 HEAP32[$4 + 96 >> 2] = $3;
 HEAP32[$4 + 92 >> 2] = tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$4 + 104 >> 2]);
 HEAP32[$4 + 88 >> 2] = HEAP32[HEAP32[$4 + 100 >> 2] + 8 >> 2];
 HEAP32[$4 + 84 >> 2] = HEAP32[HEAP32[$4 + 108 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$4 + 104 >> 2] + 4 >> 2] + 4 >> 2], 56);
 HEAP32[$4 + 80 >> 2] = HEAP32[HEAP32[$4 + 84 >> 2] + 8 >> 2];
 HEAP32[$4 + 76 >> 2] = HEAP32[HEAP32[$4 + 88 >> 2] >> 2];
 $0 = $4;
 if (HEAP32[$4 + 96 >> 2] < 0) {
  $1 = HEAP32[$4 + 96 >> 2] + HEAP32[$4 + 76 >> 2] | 0;
 } else {
  $1 = HEAP32[$4 + 96 >> 2];
 }
 HEAP32[$0 + 72 >> 2] = $1;
 label$3 : {
  if (HEAP32[$4 + 72 >> 2] >= HEAP32[$4 + 76 >> 2]) {
   break label$3;
  }
 }
 label$4 : {
  if (HEAP32[HEAP32[$4 + 80 >> 2] >> 2] != HEAP32[$4 + 76 >> 2]) {
   break label$4;
  }
 }
 $0 = Math_imul(HEAP32[(HEAP32[$4 + 80 >> 2] + 4 | 0) + (HEAP32[$4 + 72 >> 2] << 2) >> 2], HEAP32[$4 + 92 >> 2]);
 HEAP32[$4 + 64 >> 2] = $0;
 HEAP32[$4 + 68 >> 2] = $0 >> 31;
 $0 = HEAP32[(HEAP32[$4 + 88 >> 2] + 4 | 0) + (HEAP32[$4 + 72 >> 2] << 2) >> 2];
 label$5 : {
  if (($0 | 0) != HEAP32[$4 + 64 >> 2] | HEAP32[$4 + 68 >> 2] != $0 >> 31) {
   break label$5;
  }
 }
 HEAP32[$4 + 56 >> 2] = 1;
 HEAP32[$4 + 60 >> 2] = 0;
 HEAP32[$4 + 52 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 52 >> 2] < HEAP32[$4 + 72 >> 2]) {
   $0 = HEAP32[(HEAP32[$4 + 88 >> 2] + 4 | 0) + (HEAP32[$4 + 52 >> 2] << 2) >> 2];
   HEAP32[$4 + 56 >> 2] = __wasm_i64_mul(HEAP32[$4 + 56 >> 2], HEAP32[$4 + 60 >> 2], $0, $0 >> 31);
   HEAP32[$4 + 60 >> 2] = i64toi32_i32$HIGH_BITS;
   HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$4 + 40 >> 2] = 1;
 HEAP32[$4 + 44 >> 2] = 0;
 HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 72 >> 2] + 1;
 while (1) {
  if (HEAP32[$4 + 36 >> 2] < HEAP32[$4 + 76 >> 2]) {
   $0 = HEAP32[(HEAP32[$4 + 88 >> 2] + 4 | 0) + (HEAP32[$4 + 36 >> 2] << 2) >> 2];
   HEAP32[$4 + 40 >> 2] = __wasm_i64_mul(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 44 >> 2], $0, $0 >> 31);
   HEAP32[$4 + 44 >> 2] = i64toi32_i32$HIGH_BITS;
   HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 36 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$4 + 32 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$4 + 100 >> 2]);
 HEAP32[$4 + 28 >> 2] = 0;
 while (1) {
  $0 = HEAP32[$4 + 28 >> 2];
  $2 = $0 >>> 0 >= HEAPU32[$4 + 56 >> 2] ? 0 : 1;
  $0 = $0 >> 31;
  $1 = HEAP32[$4 + 60 >> 2];
  if (($0 | 0) < ($1 | 0) ? 1 : ($0 | 0) <= ($1 | 0) ? $2 : 0) {
   HEAP32[$4 + 24 >> 2] = 0;
   while (1) {
    if (HEAP32[$4 + 24 >> 2] < HEAP32[$4 + 92 >> 2]) {
     HEAP32[$4 + 20 >> 2] = HEAP32[HEAP32[$4 + 108 >> 2] + 8 >> 2] + Math_imul(HEAP32[(HEAP32[HEAP32[$4 + 104 >> 2] + 4 >> 2] + 4 | 0) + (HEAP32[$4 + 24 >> 2] << 2) >> 2], 56);
     HEAP32[$4 + 16 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$4 + 20 >> 2]);
     $0 = HEAP32[(HEAP32[$4 + 80 >> 2] + 4 | 0) + (HEAP32[$4 + 72 >> 2] << 2) >> 2];
     HEAP32[$4 + 12 >> 2] = __wasm_i64_mul(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 44 >> 2], $0, $0 >> 31);
     HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 16 >> 2] + (Math_imul(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 12 >> 2]) << 1);
     HEAP32[$4 + 4 >> 2] = 0;
     while (1) {
      if (HEAP32[$4 + 4 >> 2] < HEAP32[$4 + 12 >> 2]) {
       HEAP16[HEAP32[$4 + 8 >> 2] + (HEAP32[$4 + 4 >> 2] << 1) >> 1] = HEAPU16[HEAP32[$4 + 32 >> 2] + (HEAP32[$4 + 4 >> 2] << 1) >> 1];
       HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 32 >> 2] + (HEAP32[$4 + 12 >> 2] << 1);
     HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $4 + 112 | 0;
 return 0;
}
function TfLiteStatus_20tflite__ops__micro__split__SplitImpl_int__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor_20const__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 112 | 0;
 global$0 = $4;
 HEAP32[$4 + 108 >> 2] = $0;
 HEAP32[$4 + 104 >> 2] = $1;
 HEAP32[$4 + 100 >> 2] = $2;
 HEAP32[$4 + 96 >> 2] = $3;
 HEAP32[$4 + 92 >> 2] = tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$4 + 104 >> 2]);
 HEAP32[$4 + 88 >> 2] = HEAP32[HEAP32[$4 + 100 >> 2] + 8 >> 2];
 HEAP32[$4 + 84 >> 2] = HEAP32[HEAP32[$4 + 108 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$4 + 104 >> 2] + 4 >> 2] + 4 >> 2], 56);
 HEAP32[$4 + 80 >> 2] = HEAP32[HEAP32[$4 + 84 >> 2] + 8 >> 2];
 HEAP32[$4 + 76 >> 2] = HEAP32[HEAP32[$4 + 88 >> 2] >> 2];
 $0 = $4;
 if (HEAP32[$4 + 96 >> 2] < 0) {
  $1 = HEAP32[$4 + 96 >> 2] + HEAP32[$4 + 76 >> 2] | 0;
 } else {
  $1 = HEAP32[$4 + 96 >> 2];
 }
 HEAP32[$0 + 72 >> 2] = $1;
 label$3 : {
  if (HEAP32[$4 + 72 >> 2] >= HEAP32[$4 + 76 >> 2]) {
   break label$3;
  }
 }
 label$4 : {
  if (HEAP32[HEAP32[$4 + 80 >> 2] >> 2] != HEAP32[$4 + 76 >> 2]) {
   break label$4;
  }
 }
 $0 = Math_imul(HEAP32[(HEAP32[$4 + 80 >> 2] + 4 | 0) + (HEAP32[$4 + 72 >> 2] << 2) >> 2], HEAP32[$4 + 92 >> 2]);
 HEAP32[$4 + 64 >> 2] = $0;
 HEAP32[$4 + 68 >> 2] = $0 >> 31;
 $0 = HEAP32[(HEAP32[$4 + 88 >> 2] + 4 | 0) + (HEAP32[$4 + 72 >> 2] << 2) >> 2];
 label$5 : {
  if (($0 | 0) != HEAP32[$4 + 64 >> 2] | HEAP32[$4 + 68 >> 2] != $0 >> 31) {
   break label$5;
  }
 }
 HEAP32[$4 + 56 >> 2] = 1;
 HEAP32[$4 + 60 >> 2] = 0;
 HEAP32[$4 + 52 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 52 >> 2] < HEAP32[$4 + 72 >> 2]) {
   $0 = HEAP32[(HEAP32[$4 + 88 >> 2] + 4 | 0) + (HEAP32[$4 + 52 >> 2] << 2) >> 2];
   HEAP32[$4 + 56 >> 2] = __wasm_i64_mul(HEAP32[$4 + 56 >> 2], HEAP32[$4 + 60 >> 2], $0, $0 >> 31);
   HEAP32[$4 + 60 >> 2] = i64toi32_i32$HIGH_BITS;
   HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$4 + 40 >> 2] = 1;
 HEAP32[$4 + 44 >> 2] = 0;
 HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 72 >> 2] + 1;
 while (1) {
  if (HEAP32[$4 + 36 >> 2] < HEAP32[$4 + 76 >> 2]) {
   $0 = HEAP32[(HEAP32[$4 + 88 >> 2] + 4 | 0) + (HEAP32[$4 + 36 >> 2] << 2) >> 2];
   HEAP32[$4 + 40 >> 2] = __wasm_i64_mul(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 44 >> 2], $0, $0 >> 31);
   HEAP32[$4 + 44 >> 2] = i64toi32_i32$HIGH_BITS;
   HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 36 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$4 + 32 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$4 + 100 >> 2]);
 HEAP32[$4 + 28 >> 2] = 0;
 while (1) {
  $0 = HEAP32[$4 + 28 >> 2];
  $2 = $0 >>> 0 >= HEAPU32[$4 + 56 >> 2] ? 0 : 1;
  $0 = $0 >> 31;
  $1 = HEAP32[$4 + 60 >> 2];
  if (($0 | 0) < ($1 | 0) ? 1 : ($0 | 0) <= ($1 | 0) ? $2 : 0) {
   HEAP32[$4 + 24 >> 2] = 0;
   while (1) {
    if (HEAP32[$4 + 24 >> 2] < HEAP32[$4 + 92 >> 2]) {
     HEAP32[$4 + 20 >> 2] = HEAP32[HEAP32[$4 + 108 >> 2] + 8 >> 2] + Math_imul(HEAP32[(HEAP32[HEAP32[$4 + 104 >> 2] + 4 >> 2] + 4 | 0) + (HEAP32[$4 + 24 >> 2] << 2) >> 2], 56);
     HEAP32[$4 + 16 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$4 + 20 >> 2]);
     $0 = HEAP32[(HEAP32[$4 + 80 >> 2] + 4 | 0) + (HEAP32[$4 + 72 >> 2] << 2) >> 2];
     HEAP32[$4 + 12 >> 2] = __wasm_i64_mul(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 44 >> 2], $0, $0 >> 31);
     HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 16 >> 2] + (Math_imul(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 12 >> 2]) << 2);
     HEAP32[$4 + 4 >> 2] = 0;
     while (1) {
      if (HEAP32[$4 + 4 >> 2] < HEAP32[$4 + 12 >> 2]) {
       HEAP32[HEAP32[$4 + 8 >> 2] + (HEAP32[$4 + 4 >> 2] << 2) >> 2] = HEAP32[HEAP32[$4 + 32 >> 2] + (HEAP32[$4 + 4 >> 2] << 2) >> 2];
       HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 32 >> 2] + (HEAP32[$4 + 12 >> 2] << 2);
     HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $4 + 112 | 0;
 return 0;
}
function jswIsBuiltInObject($0) {
 var $1 = 0, $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 $0 = !strcmp(HEAP32[$2 + 12 >> 2], 16934);
 $1 = 1;
 label$1 : {
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 16941);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 16943);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 16949);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 16961);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 16977);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 16988);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17006);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17016);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17028);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17039);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17051);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17063);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17074);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17087);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17100);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17109);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17114);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17120);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17132);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17142);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17156);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17171);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17180);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17188);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17193);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17201);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17205);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17212);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17219);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17227);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17235);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17238);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17246);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17254);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17261);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17268);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17280);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17284);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17288);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17295);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17304);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = !strcmp(HEAP32[$2 + 12 >> 2], 17309);
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $1 = !strcmp(HEAP32[$2 + 12 >> 2], 17318);
 }
 $0 = $1;
 global$0 = $2 + 16 | 0;
 return $0 & 1;
}
function TfLiteStatus_20tflite__ops__micro__split__SplitImpl_unsigned_20char__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor_20const__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 112 | 0;
 global$0 = $4;
 HEAP32[$4 + 108 >> 2] = $0;
 HEAP32[$4 + 104 >> 2] = $1;
 HEAP32[$4 + 100 >> 2] = $2;
 HEAP32[$4 + 96 >> 2] = $3;
 HEAP32[$4 + 92 >> 2] = tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$4 + 104 >> 2]);
 HEAP32[$4 + 88 >> 2] = HEAP32[HEAP32[$4 + 100 >> 2] + 8 >> 2];
 HEAP32[$4 + 84 >> 2] = HEAP32[HEAP32[$4 + 108 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$4 + 104 >> 2] + 4 >> 2] + 4 >> 2], 56);
 HEAP32[$4 + 80 >> 2] = HEAP32[HEAP32[$4 + 84 >> 2] + 8 >> 2];
 HEAP32[$4 + 76 >> 2] = HEAP32[HEAP32[$4 + 88 >> 2] >> 2];
 $0 = $4;
 if (HEAP32[$4 + 96 >> 2] < 0) {
  $1 = HEAP32[$4 + 96 >> 2] + HEAP32[$4 + 76 >> 2] | 0;
 } else {
  $1 = HEAP32[$4 + 96 >> 2];
 }
 HEAP32[$0 + 72 >> 2] = $1;
 label$3 : {
  if (HEAP32[$4 + 72 >> 2] >= HEAP32[$4 + 76 >> 2]) {
   break label$3;
  }
 }
 label$4 : {
  if (HEAP32[HEAP32[$4 + 80 >> 2] >> 2] != HEAP32[$4 + 76 >> 2]) {
   break label$4;
  }
 }
 $0 = Math_imul(HEAP32[(HEAP32[$4 + 80 >> 2] + 4 | 0) + (HEAP32[$4 + 72 >> 2] << 2) >> 2], HEAP32[$4 + 92 >> 2]);
 HEAP32[$4 + 64 >> 2] = $0;
 HEAP32[$4 + 68 >> 2] = $0 >> 31;
 $0 = HEAP32[(HEAP32[$4 + 88 >> 2] + 4 | 0) + (HEAP32[$4 + 72 >> 2] << 2) >> 2];
 label$5 : {
  if (($0 | 0) != HEAP32[$4 + 64 >> 2] | HEAP32[$4 + 68 >> 2] != $0 >> 31) {
   break label$5;
  }
 }
 HEAP32[$4 + 56 >> 2] = 1;
 HEAP32[$4 + 60 >> 2] = 0;
 HEAP32[$4 + 52 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 52 >> 2] < HEAP32[$4 + 72 >> 2]) {
   $0 = HEAP32[(HEAP32[$4 + 88 >> 2] + 4 | 0) + (HEAP32[$4 + 52 >> 2] << 2) >> 2];
   HEAP32[$4 + 56 >> 2] = __wasm_i64_mul(HEAP32[$4 + 56 >> 2], HEAP32[$4 + 60 >> 2], $0, $0 >> 31);
   HEAP32[$4 + 60 >> 2] = i64toi32_i32$HIGH_BITS;
   HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$4 + 40 >> 2] = 1;
 HEAP32[$4 + 44 >> 2] = 0;
 HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 72 >> 2] + 1;
 while (1) {
  if (HEAP32[$4 + 36 >> 2] < HEAP32[$4 + 76 >> 2]) {
   $0 = HEAP32[(HEAP32[$4 + 88 >> 2] + 4 | 0) + (HEAP32[$4 + 36 >> 2] << 2) >> 2];
   HEAP32[$4 + 40 >> 2] = __wasm_i64_mul(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 44 >> 2], $0, $0 >> 31);
   HEAP32[$4 + 44 >> 2] = i64toi32_i32$HIGH_BITS;
   HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 36 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$4 + 32 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$4 + 100 >> 2]);
 HEAP32[$4 + 28 >> 2] = 0;
 while (1) {
  $0 = HEAP32[$4 + 28 >> 2];
  $2 = $0 >>> 0 >= HEAPU32[$4 + 56 >> 2] ? 0 : 1;
  $0 = $0 >> 31;
  $1 = HEAP32[$4 + 60 >> 2];
  if (($0 | 0) < ($1 | 0) ? 1 : ($0 | 0) <= ($1 | 0) ? $2 : 0) {
   HEAP32[$4 + 24 >> 2] = 0;
   while (1) {
    if (HEAP32[$4 + 24 >> 2] < HEAP32[$4 + 92 >> 2]) {
     HEAP32[$4 + 20 >> 2] = HEAP32[HEAP32[$4 + 108 >> 2] + 8 >> 2] + Math_imul(HEAP32[(HEAP32[HEAP32[$4 + 104 >> 2] + 4 >> 2] + 4 | 0) + (HEAP32[$4 + 24 >> 2] << 2) >> 2], 56);
     HEAP32[$4 + 16 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$4 + 20 >> 2]);
     $0 = HEAP32[(HEAP32[$4 + 80 >> 2] + 4 | 0) + (HEAP32[$4 + 72 >> 2] << 2) >> 2];
     HEAP32[$4 + 12 >> 2] = __wasm_i64_mul(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 44 >> 2], $0, $0 >> 31);
     HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 16 >> 2] + Math_imul(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 12 >> 2]);
     HEAP32[$4 + 4 >> 2] = 0;
     while (1) {
      if (HEAP32[$4 + 4 >> 2] < HEAP32[$4 + 12 >> 2]) {
       HEAP8[HEAP32[$4 + 8 >> 2] + HEAP32[$4 + 4 >> 2] | 0] = HEAPU8[HEAP32[$4 + 32 >> 2] + HEAP32[$4 + 4 >> 2] | 0];
       HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 12 >> 2] + HEAP32[$4 + 32 >> 2];
     HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $4 + 112 | 0;
 return 0;
}
function void_20tflite__reference_ops__ArgMinMax_unsigned_20char_2c_20int_2c_20int_2c_20tflite__ops__micro__Greater__28tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int__2c_20tflite__ops__micro__Greater_20const__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 80 | 0;
 global$0 = $6;
 HEAP32[$6 + 76 >> 2] = $0;
 HEAP32[$6 + 72 >> 2] = $1;
 HEAP32[$6 + 68 >> 2] = $2;
 HEAP32[$6 + 64 >> 2] = $3;
 HEAP32[$6 + 60 >> 2] = $4;
 HEAP32[$6 + 56 >> 2] = $5;
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]) | 0) <= 0) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]) - 1 | 0) != (tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 64 >> 2]) | 0)) {
   break label$2;
  }
 }
 HEAP32[$6 + 52 >> 2] = HEAP32[HEAP32[$6 + 68 >> 2] >> 2];
 if (HEAP32[$6 + 52 >> 2] < 0) {
  HEAP32[$6 + 52 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]) + HEAP32[$6 + 52 >> 2];
 }
 HEAP32[$6 + 48 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 52 >> 2]);
 HEAP32[$6 + 44 >> 2] = 1;
 HEAP32[$6 + 40 >> 2] = 0;
 while (1) {
  if (HEAP32[$6 + 40 >> 2] < HEAP32[$6 + 52 >> 2]) {
   label$6 : {
    if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 40 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 64 >> 2], HEAP32[$6 + 40 >> 2]) | 0)) {
     break label$6;
    }
   }
   HEAP32[$6 + 44 >> 2] = Math_imul(tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 40 >> 2]), HEAP32[$6 + 44 >> 2]);
   HEAP32[$6 + 40 >> 2] = HEAP32[$6 + 40 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$6 + 36 >> 2] = 1;
 HEAP32[$6 + 32 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]);
 HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 52 >> 2] + 1;
 while (1) {
  if (HEAP32[$6 + 28 >> 2] < HEAP32[$6 + 32 >> 2]) {
   label$9 : {
    if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 28 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 64 >> 2], HEAP32[$6 + 28 >> 2] - 1 | 0) | 0)) {
     break label$9;
    }
   }
   HEAP32[$6 + 36 >> 2] = Math_imul(tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 28 >> 2]), HEAP32[$6 + 36 >> 2]);
   HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$6 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$6 + 24 >> 2] < HEAP32[$6 + 44 >> 2]) {
   HEAP32[$6 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$6 + 20 >> 2] < HEAP32[$6 + 36 >> 2]) {
     HEAP8[$6 + 19 | 0] = HEAPU8[HEAP32[$6 + 72 >> 2] + (HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$6 + 36 >> 2], Math_imul(HEAP32[$6 + 24 >> 2], HEAP32[$6 + 48 >> 2])) | 0) | 0];
     HEAP32[$6 + 12 >> 2] = 0;
     HEAP32[$6 + 8 >> 2] = 1;
     while (1) {
      if (HEAP32[$6 + 8 >> 2] < HEAP32[$6 + 48 >> 2]) {
       HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 72 >> 2] + (HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$6 + 36 >> 2], HEAP32[$6 + 8 >> 2] + Math_imul(HEAP32[$6 + 24 >> 2], HEAP32[$6 + 48 >> 2]) | 0) | 0);
       if (bool_20tflite__ops__micro__Greater__operator_28_29_unsigned_20char__28unsigned_20char_20const__2c_20unsigned_20char_20const__29_20const(HEAP32[$6 + 56 >> 2], HEAP32[$6 + 4 >> 2], $6 + 19 | 0) & 1) {
        HEAP8[$6 + 19 | 0] = HEAPU8[HEAP32[$6 + 4 >> 2]];
        HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 8 >> 2];
       }
       HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 8 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[HEAP32[$6 + 60 >> 2] + (HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$6 + 24 >> 2], HEAP32[$6 + 36 >> 2]) << 2) >> 2] = HEAP32[$6 + 12 >> 2];
     HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$6 + 24 >> 2] = HEAP32[$6 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $6 + 80 | 0;
}
function void_20tflite__reference_ops__ArgMinMax_unsigned_20char_2c_20int_2c_20int_2c_20tflite__ops__micro__Less__28tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int__2c_20tflite__ops__micro__Less_20const__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 80 | 0;
 global$0 = $6;
 HEAP32[$6 + 76 >> 2] = $0;
 HEAP32[$6 + 72 >> 2] = $1;
 HEAP32[$6 + 68 >> 2] = $2;
 HEAP32[$6 + 64 >> 2] = $3;
 HEAP32[$6 + 60 >> 2] = $4;
 HEAP32[$6 + 56 >> 2] = $5;
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]) | 0) <= 0) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]) - 1 | 0) != (tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 64 >> 2]) | 0)) {
   break label$2;
  }
 }
 HEAP32[$6 + 52 >> 2] = HEAP32[HEAP32[$6 + 68 >> 2] >> 2];
 if (HEAP32[$6 + 52 >> 2] < 0) {
  HEAP32[$6 + 52 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]) + HEAP32[$6 + 52 >> 2];
 }
 HEAP32[$6 + 48 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 52 >> 2]);
 HEAP32[$6 + 44 >> 2] = 1;
 HEAP32[$6 + 40 >> 2] = 0;
 while (1) {
  if (HEAP32[$6 + 40 >> 2] < HEAP32[$6 + 52 >> 2]) {
   label$6 : {
    if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 40 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 64 >> 2], HEAP32[$6 + 40 >> 2]) | 0)) {
     break label$6;
    }
   }
   HEAP32[$6 + 44 >> 2] = Math_imul(tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 40 >> 2]), HEAP32[$6 + 44 >> 2]);
   HEAP32[$6 + 40 >> 2] = HEAP32[$6 + 40 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$6 + 36 >> 2] = 1;
 HEAP32[$6 + 32 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]);
 HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 52 >> 2] + 1;
 while (1) {
  if (HEAP32[$6 + 28 >> 2] < HEAP32[$6 + 32 >> 2]) {
   label$9 : {
    if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 28 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 64 >> 2], HEAP32[$6 + 28 >> 2] - 1 | 0) | 0)) {
     break label$9;
    }
   }
   HEAP32[$6 + 36 >> 2] = Math_imul(tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 28 >> 2]), HEAP32[$6 + 36 >> 2]);
   HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$6 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$6 + 24 >> 2] < HEAP32[$6 + 44 >> 2]) {
   HEAP32[$6 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$6 + 20 >> 2] < HEAP32[$6 + 36 >> 2]) {
     HEAP8[$6 + 19 | 0] = HEAPU8[HEAP32[$6 + 72 >> 2] + (HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$6 + 36 >> 2], Math_imul(HEAP32[$6 + 24 >> 2], HEAP32[$6 + 48 >> 2])) | 0) | 0];
     HEAP32[$6 + 12 >> 2] = 0;
     HEAP32[$6 + 8 >> 2] = 1;
     while (1) {
      if (HEAP32[$6 + 8 >> 2] < HEAP32[$6 + 48 >> 2]) {
       HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 72 >> 2] + (HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$6 + 36 >> 2], HEAP32[$6 + 8 >> 2] + Math_imul(HEAP32[$6 + 24 >> 2], HEAP32[$6 + 48 >> 2]) | 0) | 0);
       if (std____2____less_unsigned_20char_2c_20unsigned_20char___operator_28_29_28unsigned_20char_20const__2c_20unsigned_20char_20const__29_20const(HEAP32[$6 + 56 >> 2], HEAP32[$6 + 4 >> 2], $6 + 19 | 0) & 1) {
        HEAP8[$6 + 19 | 0] = HEAPU8[HEAP32[$6 + 4 >> 2]];
        HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 8 >> 2];
       }
       HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 8 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[HEAP32[$6 + 60 >> 2] + (HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$6 + 24 >> 2], HEAP32[$6 + 36 >> 2]) << 2) >> 2] = HEAP32[$6 + 12 >> 2];
     HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$6 + 24 >> 2] = HEAP32[$6 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $6 + 80 | 0;
}
function void_20tflite__reference_ops__ArgMinMax_signed_20char_2c_20int_2c_20int_2c_20tflite__ops__micro__Greater__28tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int__2c_20tflite__ops__micro__Greater_20const__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 80 | 0;
 global$0 = $6;
 HEAP32[$6 + 76 >> 2] = $0;
 HEAP32[$6 + 72 >> 2] = $1;
 HEAP32[$6 + 68 >> 2] = $2;
 HEAP32[$6 + 64 >> 2] = $3;
 HEAP32[$6 + 60 >> 2] = $4;
 HEAP32[$6 + 56 >> 2] = $5;
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]) | 0) <= 0) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]) - 1 | 0) != (tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 64 >> 2]) | 0)) {
   break label$2;
  }
 }
 HEAP32[$6 + 52 >> 2] = HEAP32[HEAP32[$6 + 68 >> 2] >> 2];
 if (HEAP32[$6 + 52 >> 2] < 0) {
  HEAP32[$6 + 52 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]) + HEAP32[$6 + 52 >> 2];
 }
 HEAP32[$6 + 48 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 52 >> 2]);
 HEAP32[$6 + 44 >> 2] = 1;
 HEAP32[$6 + 40 >> 2] = 0;
 while (1) {
  if (HEAP32[$6 + 40 >> 2] < HEAP32[$6 + 52 >> 2]) {
   label$6 : {
    if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 40 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 64 >> 2], HEAP32[$6 + 40 >> 2]) | 0)) {
     break label$6;
    }
   }
   HEAP32[$6 + 44 >> 2] = Math_imul(tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 40 >> 2]), HEAP32[$6 + 44 >> 2]);
   HEAP32[$6 + 40 >> 2] = HEAP32[$6 + 40 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$6 + 36 >> 2] = 1;
 HEAP32[$6 + 32 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]);
 HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 52 >> 2] + 1;
 while (1) {
  if (HEAP32[$6 + 28 >> 2] < HEAP32[$6 + 32 >> 2]) {
   label$9 : {
    if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 28 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 64 >> 2], HEAP32[$6 + 28 >> 2] - 1 | 0) | 0)) {
     break label$9;
    }
   }
   HEAP32[$6 + 36 >> 2] = Math_imul(tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 28 >> 2]), HEAP32[$6 + 36 >> 2]);
   HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$6 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$6 + 24 >> 2] < HEAP32[$6 + 44 >> 2]) {
   HEAP32[$6 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$6 + 20 >> 2] < HEAP32[$6 + 36 >> 2]) {
     HEAP8[$6 + 19 | 0] = HEAPU8[HEAP32[$6 + 72 >> 2] + (HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$6 + 36 >> 2], Math_imul(HEAP32[$6 + 24 >> 2], HEAP32[$6 + 48 >> 2])) | 0) | 0];
     HEAP32[$6 + 12 >> 2] = 0;
     HEAP32[$6 + 8 >> 2] = 1;
     while (1) {
      if (HEAP32[$6 + 8 >> 2] < HEAP32[$6 + 48 >> 2]) {
       HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 72 >> 2] + (HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$6 + 36 >> 2], HEAP32[$6 + 8 >> 2] + Math_imul(HEAP32[$6 + 24 >> 2], HEAP32[$6 + 48 >> 2]) | 0) | 0);
       if (bool_20tflite__ops__micro__Greater__operator_28_29_signed_20char__28signed_20char_20const__2c_20signed_20char_20const__29_20const(HEAP32[$6 + 56 >> 2], HEAP32[$6 + 4 >> 2], $6 + 19 | 0) & 1) {
        HEAP8[$6 + 19 | 0] = HEAPU8[HEAP32[$6 + 4 >> 2]];
        HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 8 >> 2];
       }
       HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 8 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[HEAP32[$6 + 60 >> 2] + (HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$6 + 24 >> 2], HEAP32[$6 + 36 >> 2]) << 2) >> 2] = HEAP32[$6 + 12 >> 2];
     HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$6 + 24 >> 2] = HEAP32[$6 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $6 + 80 | 0;
}
function void_20tflite__reference_ops__ArgMinMax_signed_20char_2c_20int_2c_20int_2c_20tflite__ops__micro__Less__28tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int__2c_20tflite__ops__micro__Less_20const__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 80 | 0;
 global$0 = $6;
 HEAP32[$6 + 76 >> 2] = $0;
 HEAP32[$6 + 72 >> 2] = $1;
 HEAP32[$6 + 68 >> 2] = $2;
 HEAP32[$6 + 64 >> 2] = $3;
 HEAP32[$6 + 60 >> 2] = $4;
 HEAP32[$6 + 56 >> 2] = $5;
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]) | 0) <= 0) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]) - 1 | 0) != (tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 64 >> 2]) | 0)) {
   break label$2;
  }
 }
 HEAP32[$6 + 52 >> 2] = HEAP32[HEAP32[$6 + 68 >> 2] >> 2];
 if (HEAP32[$6 + 52 >> 2] < 0) {
  HEAP32[$6 + 52 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]) + HEAP32[$6 + 52 >> 2];
 }
 HEAP32[$6 + 48 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 52 >> 2]);
 HEAP32[$6 + 44 >> 2] = 1;
 HEAP32[$6 + 40 >> 2] = 0;
 while (1) {
  if (HEAP32[$6 + 40 >> 2] < HEAP32[$6 + 52 >> 2]) {
   label$6 : {
    if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 40 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 64 >> 2], HEAP32[$6 + 40 >> 2]) | 0)) {
     break label$6;
    }
   }
   HEAP32[$6 + 44 >> 2] = Math_imul(tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 40 >> 2]), HEAP32[$6 + 44 >> 2]);
   HEAP32[$6 + 40 >> 2] = HEAP32[$6 + 40 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$6 + 36 >> 2] = 1;
 HEAP32[$6 + 32 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]);
 HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 52 >> 2] + 1;
 while (1) {
  if (HEAP32[$6 + 28 >> 2] < HEAP32[$6 + 32 >> 2]) {
   label$9 : {
    if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 28 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 64 >> 2], HEAP32[$6 + 28 >> 2] - 1 | 0) | 0)) {
     break label$9;
    }
   }
   HEAP32[$6 + 36 >> 2] = Math_imul(tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 28 >> 2]), HEAP32[$6 + 36 >> 2]);
   HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$6 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$6 + 24 >> 2] < HEAP32[$6 + 44 >> 2]) {
   HEAP32[$6 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$6 + 20 >> 2] < HEAP32[$6 + 36 >> 2]) {
     HEAP8[$6 + 19 | 0] = HEAPU8[HEAP32[$6 + 72 >> 2] + (HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$6 + 36 >> 2], Math_imul(HEAP32[$6 + 24 >> 2], HEAP32[$6 + 48 >> 2])) | 0) | 0];
     HEAP32[$6 + 12 >> 2] = 0;
     HEAP32[$6 + 8 >> 2] = 1;
     while (1) {
      if (HEAP32[$6 + 8 >> 2] < HEAP32[$6 + 48 >> 2]) {
       HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 72 >> 2] + (HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$6 + 36 >> 2], HEAP32[$6 + 8 >> 2] + Math_imul(HEAP32[$6 + 24 >> 2], HEAP32[$6 + 48 >> 2]) | 0) | 0);
       if (std____2____less_signed_20char_2c_20signed_20char___operator_28_29_28signed_20char_20const__2c_20signed_20char_20const__29_20const(HEAP32[$6 + 56 >> 2], HEAP32[$6 + 4 >> 2], $6 + 19 | 0) & 1) {
        HEAP8[$6 + 19 | 0] = HEAPU8[HEAP32[$6 + 4 >> 2]];
        HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 8 >> 2];
       }
       HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 8 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[HEAP32[$6 + 60 >> 2] + (HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$6 + 24 >> 2], HEAP32[$6 + 36 >> 2]) << 2) >> 2] = HEAP32[$6 + 12 >> 2];
     HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$6 + 24 >> 2] = HEAP32[$6 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $6 + 80 | 0;
}
function _jswrap_array_iterate_with_callback($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = global$0 - 160 | 0;
 global$0 = $7;
 HEAP32[$7 + 152 >> 2] = $0;
 HEAP32[$7 + 148 >> 2] = $1;
 HEAP32[$7 + 144 >> 2] = $2;
 HEAP32[$7 + 140 >> 2] = $3;
 HEAP32[$7 + 136 >> 2] = $4;
 HEAP8[$7 + 135 | 0] = $5;
 HEAP8[$7 + 134 | 0] = $6;
 label$1 : {
  if (!(jsvIsIterable(HEAP32[$7 + 148 >> 2]) & 1)) {
   HEAP32[$7 + 32 >> 2] = HEAP32[$7 + 152 >> 2];
   jsExceptionHere(1, 30550, $7 + 32 | 0);
   HEAP32[$7 + 156 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsFunction(HEAP32[$7 + 144 >> 2]) & 1)) {
   HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 152 >> 2];
   jsExceptionHere(1, 30600, $7 + 16 | 0);
   HEAP32[$7 + 156 >> 2] = 0;
   break label$1;
  }
  label$4 : {
   if (jsvIsUndefined(HEAP32[$7 + 140 >> 2]) & 1) {
    break label$4;
   }
   if (jsvIsObject(HEAP32[$7 + 140 >> 2]) & 1) {
    break label$4;
   }
   HEAP32[$7 >> 2] = HEAP32[$7 + 152 >> 2];
   jsExceptionHere(1, 30738, $7);
   HEAP32[$7 + 156 >> 2] = 0;
   break label$1;
  }
  HEAP32[$7 + 128 >> 2] = 0;
  if (HEAP32[$7 + 136 >> 2] == 1) {
   HEAP32[$7 + 128 >> 2] = jsvNewWithFlags(3);
  }
  HEAP8[$7 + 127 | 0] = 0;
  if (!(HEAP32[$7 + 136 >> 2] == 1 ? !HEAP32[$7 + 128 >> 2] : 0)) {
   jsvIteratorNew($7 + 80 | 0, HEAP32[$7 + 148 >> 2], 0);
   while (1) {
    if (jsvIteratorHasElement($7 + 80 | 0) & 1) {
     $0 = HEAPU8[$7 + 127 | 0] ^ -1;
    } else {
     $0 = 0;
    }
    if ($0 & 1) {
     HEAP32[$7 + 76 >> 2] = jsvIteratorGetKey($7 + 80 | 0);
     if (jsvIsInt(HEAP32[$7 + 76 >> 2]) & 1) {
      $0 = $7 + 60 | 0;
      $1 = $7 + 80 | 0;
      HEAP32[$7 + 72 >> 2] = jsvGetInteger(HEAP32[$7 + 76 >> 2]);
      HEAP32[$7 + 60 >> 2] = jsvIteratorGetValue($1);
      HEAP32[$7 + 64 >> 2] = jsvNewFromInteger(HEAP32[$7 + 72 >> 2]);
      HEAP32[$7 + 68 >> 2] = HEAP32[$7 + 148 >> 2];
      HEAP32[$7 + 56 >> 2] = jspeFunctionCall(HEAP32[$7 + 144 >> 2], 0, HEAP32[$7 + 140 >> 2], 0, 3, $0);
      jsvUnLockMany(2, $0);
      if (HEAP32[$7 + 56 >> 2]) {
       if (HEAP8[$7 + 135 | 0] & 1) {
        HEAP8[$7 + 55 | 0] = (jsvGetBool(HEAP32[$7 + 56 >> 2]) & 1) == (HEAP8[$7 + 134 | 0] & 1);
       }
       label$15 : {
        if (HEAP32[$7 + 136 >> 2] == 1) {
         if (HEAP8[$7 + 135 | 0] & 1) {
          if (HEAP8[$7 + 55 | 0] & 1) {
           jsvArrayPushAndUnLock(HEAP32[$7 + 128 >> 2], jsvIteratorGetValue($7 + 80 | 0));
          }
          break label$15;
         }
         HEAP32[$7 + 48 >> 2] = jsvNewFromInteger(HEAP32[$7 + 72 >> 2]);
         if (HEAP32[$7 + 48 >> 2]) {
          jsvMakeIntoVariableName(HEAP32[$7 + 48 >> 2], HEAP32[$7 + 56 >> 2]);
          jsvAddName(HEAP32[$7 + 128 >> 2], HEAP32[$7 + 48 >> 2]);
          jsvUnLock(HEAP32[$7 + 48 >> 2]);
         }
         break label$15;
        }
        if (HEAP8[$7 + 135 | 0] & 1) {
         label$21 : {
          if (!(HEAP32[$7 + 136 >> 2] != 3 ? HEAP32[$7 + 136 >> 2] != 2 : 0)) {
           if (HEAP8[$7 + 55 | 0] & 1) {
            $0 = $7;
            label$25 : {
             if (HEAP32[$7 + 136 >> 2] == 2) {
              $1 = jsvIteratorGetValue($7 + 80 | 0);
              break label$25;
             }
             $1 = jsvNewFromInteger(jsvGetIntegerAndUnLock(jsvIteratorGetKey($7 + 80 | 0)));
            }
            HEAP32[$0 + 128 >> 2] = $1;
            HEAP8[$7 + 127 | 0] = 1;
           }
           break label$21;
          }
          if (!(HEAP8[$7 + 55 | 0] & 1)) {
           HEAP8[$7 + 127 | 0] = 1;
          }
         }
        }
       }
       jsvUnLock(HEAP32[$7 + 56 >> 2]);
      }
     }
     $0 = $7 + 80 | 0;
     jsvUnLock(HEAP32[$7 + 76 >> 2]);
     jsvIteratorNext($0);
     continue;
    }
    break;
   }
   jsvIteratorFree($7 + 80 | 0);
  }
  if (!(HEAP32[$7 + 136 >> 2] | !(HEAP8[$7 + 135 | 0] & 1))) {
   HEAP32[$7 + 128 >> 2] = jsvNewFromBool((HEAP8[$7 + 127 | 0] & 1) != (HEAP8[$7 + 134 | 0] & 1));
  }
  HEAP32[$7 + 156 >> 2] = HEAP32[$7 + 128 >> 2];
 }
 global$0 = $7 + 160 | 0;
 return HEAP32[$7 + 156 >> 2];
}
function tflite__reference_integer_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = global$0 - 112 | 0;
 global$0 = $9;
 HEAP32[$9 + 108 >> 2] = $0;
 HEAP32[$9 + 104 >> 2] = $1;
 HEAP32[$9 + 100 >> 2] = $2;
 HEAP32[$9 + 96 >> 2] = $3;
 HEAP32[$9 + 92 >> 2] = $4;
 HEAP32[$9 + 88 >> 2] = $5;
 HEAP32[$9 + 84 >> 2] = $6;
 HEAP32[$9 + 80 >> 2] = $7;
 HEAP32[$9 + 76 >> 2] = $8;
 HEAP32[$9 + 72 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] >> 2];
 HEAP32[$9 + 68 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 4 >> 2];
 HEAP32[$9 + 64 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 8 >> 2];
 HEAP32[$9 + 60 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 12 >> 2];
 HEAP32[$9 + 56 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 16 >> 2];
 HEAP32[$9 + 52 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 20 >> 2];
 HEAP32[$9 + 48 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 24 >> 2];
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$9 + 96 >> 2]) | 0) < 2) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$9 + 80 >> 2]) | 0) != 2) {
   break label$2;
  }
 }
 label$3 : {
  if (HEAP32[$9 + 52 >> 2] > HEAP32[$9 + 48 >> 2]) {
   break label$3;
  }
 }
 HEAP32[$9 + 44 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$9 + 96 >> 2]);
 HEAP32[$9 + 40 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 80 >> 2], 0);
 HEAP32[$9 + 36 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 80 >> 2], 1);
 label$4 : {
  if (HEAP32[$9 + 36 >> 2] > (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 96 >> 2], HEAP32[$9 + 44 >> 2] - 2 | 0) | 0)) {
   break label$4;
  }
 }
 HEAP32[$9 + 32 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 96 >> 2], HEAP32[$9 + 44 >> 2] - 1 | 0);
 HEAP32[$9 + 28 >> 2] = 0;
 while (1) {
  if (HEAP32[$9 + 28 >> 2] < HEAP32[$9 + 40 >> 2]) {
   HEAP32[$9 + 24 >> 2] = 0;
   while (1) {
    if (HEAP32[$9 + 24 >> 2] < HEAP32[$9 + 36 >> 2]) {
     HEAP32[$9 + 20 >> 2] = 0;
     HEAP32[$9 + 16 >> 2] = 0;
     while (1) {
      if (HEAP32[$9 + 16 >> 2] < HEAP32[$9 + 32 >> 2]) {
       HEAP32[$9 + 12 >> 2] = HEAP8[HEAP32[$9 + 100 >> 2] + (HEAP32[$9 + 16 >> 2] + Math_imul(HEAP32[$9 + 28 >> 2], HEAP32[$9 + 32 >> 2]) | 0) | 0];
       HEAP32[$9 + 8 >> 2] = HEAP8[HEAP32[$9 + 92 >> 2] + (HEAP32[$9 + 16 >> 2] + Math_imul(HEAP32[$9 + 24 >> 2], HEAP32[$9 + 32 >> 2]) | 0) | 0];
       HEAP32[$9 + 20 >> 2] = HEAP32[$9 + 20 >> 2] + Math_imul(HEAP32[$9 + 8 >> 2] + HEAP32[$9 + 68 >> 2] | 0, HEAP32[$9 + 12 >> 2] + HEAP32[$9 + 72 >> 2] | 0);
       HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 16 >> 2] + 1;
       continue;
      }
      break;
     }
     if (HEAP32[$9 + 84 >> 2]) {
      HEAP32[$9 + 20 >> 2] = HEAP32[HEAP32[$9 + 84 >> 2] + (HEAP32[$9 + 24 >> 2] << 2) >> 2] + HEAP32[$9 + 20 >> 2];
     }
     $0 = $9 + 20 | 0;
     $1 = $9 + 48 | 0;
     $2 = $9 + 52 | 0;
     HEAP32[$9 + 20 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$9 + 20 >> 2], HEAP32[$9 + 60 >> 2], HEAP32[$9 + 56 >> 2]);
     HEAP32[$9 + 20 >> 2] = HEAP32[$9 + 64 >> 2] + HEAP32[$9 + 20 >> 2];
     HEAP32[$9 + 20 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, $2) >> 2];
     HEAP32[$9 + 20 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0, $1) >> 2];
     HEAP8[HEAP32[$9 + 76 >> 2] + (HEAP32[$9 + 24 >> 2] + Math_imul(HEAP32[$9 + 36 >> 2], HEAP32[$9 + 28 >> 2]) | 0) | 0] = HEAP32[$9 + 20 >> 2];
     HEAP32[$9 + 24 >> 2] = HEAP32[$9 + 24 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$9 + 28 >> 2] = HEAP32[$9 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $9 + 112 | 0;
}
function void_20tflite__reference_ops__ArgMinMax_float_2c_20int_2c_20int_2c_20tflite__ops__micro__Greater__28tflite__RuntimeShape_20const__2c_20float_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int__2c_20tflite__ops__micro__Greater_20const__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 80 | 0;
 global$0 = $6;
 HEAP32[$6 + 76 >> 2] = $0;
 HEAP32[$6 + 72 >> 2] = $1;
 HEAP32[$6 + 68 >> 2] = $2;
 HEAP32[$6 + 64 >> 2] = $3;
 HEAP32[$6 + 60 >> 2] = $4;
 HEAP32[$6 + 56 >> 2] = $5;
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]) | 0) <= 0) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]) - 1 | 0) != (tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 64 >> 2]) | 0)) {
   break label$2;
  }
 }
 HEAP32[$6 + 52 >> 2] = HEAP32[HEAP32[$6 + 68 >> 2] >> 2];
 if (HEAP32[$6 + 52 >> 2] < 0) {
  HEAP32[$6 + 52 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]) + HEAP32[$6 + 52 >> 2];
 }
 HEAP32[$6 + 48 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 52 >> 2]);
 HEAP32[$6 + 44 >> 2] = 1;
 HEAP32[$6 + 40 >> 2] = 0;
 while (1) {
  if (HEAP32[$6 + 40 >> 2] < HEAP32[$6 + 52 >> 2]) {
   label$6 : {
    if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 40 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 64 >> 2], HEAP32[$6 + 40 >> 2]) | 0)) {
     break label$6;
    }
   }
   HEAP32[$6 + 44 >> 2] = Math_imul(tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 40 >> 2]), HEAP32[$6 + 44 >> 2]);
   HEAP32[$6 + 40 >> 2] = HEAP32[$6 + 40 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$6 + 36 >> 2] = 1;
 HEAP32[$6 + 32 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]);
 HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 52 >> 2] + 1;
 while (1) {
  if (HEAP32[$6 + 28 >> 2] < HEAP32[$6 + 32 >> 2]) {
   label$9 : {
    if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 28 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 64 >> 2], HEAP32[$6 + 28 >> 2] - 1 | 0) | 0)) {
     break label$9;
    }
   }
   HEAP32[$6 + 36 >> 2] = Math_imul(tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 28 >> 2]), HEAP32[$6 + 36 >> 2]);
   HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$6 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$6 + 24 >> 2] < HEAP32[$6 + 44 >> 2]) {
   HEAP32[$6 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$6 + 20 >> 2] < HEAP32[$6 + 36 >> 2]) {
     HEAPF32[$6 + 16 >> 2] = HEAPF32[HEAP32[$6 + 72 >> 2] + (HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$6 + 36 >> 2], Math_imul(HEAP32[$6 + 24 >> 2], HEAP32[$6 + 48 >> 2])) << 2) >> 2];
     HEAP32[$6 + 12 >> 2] = 0;
     HEAP32[$6 + 8 >> 2] = 1;
     while (1) {
      if (HEAP32[$6 + 8 >> 2] < HEAP32[$6 + 48 >> 2]) {
       HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 72 >> 2] + (HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$6 + 36 >> 2], HEAP32[$6 + 8 >> 2] + Math_imul(HEAP32[$6 + 24 >> 2], HEAP32[$6 + 48 >> 2]) | 0) << 2);
       if (bool_20tflite__ops__micro__Greater__operator_28_29_float__28float_20const__2c_20float_20const__29_20const(HEAP32[$6 + 56 >> 2], HEAP32[$6 + 4 >> 2], $6 + 16 | 0) & 1) {
        HEAPF32[$6 + 16 >> 2] = HEAPF32[HEAP32[$6 + 4 >> 2] >> 2];
        HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 8 >> 2];
       }
       HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 8 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[HEAP32[$6 + 60 >> 2] + (HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$6 + 24 >> 2], HEAP32[$6 + 36 >> 2]) << 2) >> 2] = HEAP32[$6 + 12 >> 2];
     HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$6 + 24 >> 2] = HEAP32[$6 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $6 + 80 | 0;
}
function void_20tflite__reference_ops__ArgMinMax_float_2c_20int_2c_20int_2c_20tflite__ops__micro__Less__28tflite__RuntimeShape_20const__2c_20float_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int__2c_20tflite__ops__micro__Less_20const__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 80 | 0;
 global$0 = $6;
 HEAP32[$6 + 76 >> 2] = $0;
 HEAP32[$6 + 72 >> 2] = $1;
 HEAP32[$6 + 68 >> 2] = $2;
 HEAP32[$6 + 64 >> 2] = $3;
 HEAP32[$6 + 60 >> 2] = $4;
 HEAP32[$6 + 56 >> 2] = $5;
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]) | 0) <= 0) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]) - 1 | 0) != (tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 64 >> 2]) | 0)) {
   break label$2;
  }
 }
 HEAP32[$6 + 52 >> 2] = HEAP32[HEAP32[$6 + 68 >> 2] >> 2];
 if (HEAP32[$6 + 52 >> 2] < 0) {
  HEAP32[$6 + 52 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]) + HEAP32[$6 + 52 >> 2];
 }
 HEAP32[$6 + 48 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 52 >> 2]);
 HEAP32[$6 + 44 >> 2] = 1;
 HEAP32[$6 + 40 >> 2] = 0;
 while (1) {
  if (HEAP32[$6 + 40 >> 2] < HEAP32[$6 + 52 >> 2]) {
   label$6 : {
    if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 40 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 64 >> 2], HEAP32[$6 + 40 >> 2]) | 0)) {
     break label$6;
    }
   }
   HEAP32[$6 + 44 >> 2] = Math_imul(tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 40 >> 2]), HEAP32[$6 + 44 >> 2]);
   HEAP32[$6 + 40 >> 2] = HEAP32[$6 + 40 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$6 + 36 >> 2] = 1;
 HEAP32[$6 + 32 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 76 >> 2]);
 HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 52 >> 2] + 1;
 while (1) {
  if (HEAP32[$6 + 28 >> 2] < HEAP32[$6 + 32 >> 2]) {
   label$9 : {
    if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 28 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 64 >> 2], HEAP32[$6 + 28 >> 2] - 1 | 0) | 0)) {
     break label$9;
    }
   }
   HEAP32[$6 + 36 >> 2] = Math_imul(tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 28 >> 2]), HEAP32[$6 + 36 >> 2]);
   HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$6 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$6 + 24 >> 2] < HEAP32[$6 + 44 >> 2]) {
   HEAP32[$6 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$6 + 20 >> 2] < HEAP32[$6 + 36 >> 2]) {
     HEAPF32[$6 + 16 >> 2] = HEAPF32[HEAP32[$6 + 72 >> 2] + (HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$6 + 36 >> 2], Math_imul(HEAP32[$6 + 24 >> 2], HEAP32[$6 + 48 >> 2])) << 2) >> 2];
     HEAP32[$6 + 12 >> 2] = 0;
     HEAP32[$6 + 8 >> 2] = 1;
     while (1) {
      if (HEAP32[$6 + 8 >> 2] < HEAP32[$6 + 48 >> 2]) {
       HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 72 >> 2] + (HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$6 + 36 >> 2], HEAP32[$6 + 8 >> 2] + Math_imul(HEAP32[$6 + 24 >> 2], HEAP32[$6 + 48 >> 2]) | 0) << 2);
       if (std____2____less_float_2c_20float___operator_28_29_28float_20const__2c_20float_20const__29_20const(HEAP32[$6 + 56 >> 2], HEAP32[$6 + 4 >> 2], $6 + 16 | 0) & 1) {
        HEAPF32[$6 + 16 >> 2] = HEAPF32[HEAP32[$6 + 4 >> 2] >> 2];
        HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 8 >> 2];
       }
       HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 8 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[HEAP32[$6 + 60 >> 2] + (HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$6 + 24 >> 2], HEAP32[$6 + 36 >> 2]) << 2) >> 2] = HEAP32[$6 + 12 >> 2];
     HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$6 + 24 >> 2] = HEAP32[$6 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $6 + 80 | 0;
}
function jspeFunctionDefinitionInternal($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP8[$2 + 71 | 0] = $1;
 HEAP8[$2 + 70 | 0] = 0;
 label$1 : {
  label$2 : {
   if (HEAP8[$2 + 71 | 0] & 1) {
    if (HEAP32[$2 + 72 >> 2]) {
     HEAP16[HEAP32[$2 + 72 >> 2] + 14 >> 1] = HEAPU16[HEAP32[$2 + 72 >> 2] + 14 >> 1] & -64 | 8;
    }
    break label$2;
   }
   if (!(jslMatch(123) & 1)) {
    break label$1;
   }
   if (HEAP16[HEAP32[13768] + 2 >> 1] == 131) {
    if (!strcmp(jslGetTokenValueAsString(), 3778)) {
     jsWarn(3787, 0);
    }
    label$7 : {
     if (HEAP16[HEAP32[13768] + 2 >> 1] != 131) {
      break label$7;
     }
     if (strcmp(jslGetTokenValueAsString(), 3843)) {
      break label$7;
     }
     jslGetNextToken();
     HEAP8[$2 + 70 | 0] = 1;
    }
   }
   if (!(!HEAP32[$2 + 72 >> 2] | HEAP16[HEAP32[13768] + 2 >> 1] != 171)) {
    HEAP16[HEAP32[$2 + 72 >> 2] + 14 >> 1] = HEAPU16[HEAP32[$2 + 72 >> 2] + 14 >> 1] & -64 | 8;
    jslGetNextToken();
   }
  }
  HEAP32[$2 + 64 >> 2] = 0;
  label$9 : {
   if (HEAP8[$2 + 70 | 0] & 1 | (!HEAP32[$2 + 72 >> 2] | !HEAPU16[HEAP32[13768] + 102 >> 1])) {
    break label$9;
   }
   if (jsfGetFlag(2) & 1) {
    break label$9;
   }
   HEAP32[$2 + 64 >> 2] = (jslGetLineNumber() + HEAPU16[HEAP32[13768] + 102 >> 1] | 0) - 1;
  }
  jslCharPosClone($2 + 40 | 0, HEAP32[13768] + 4 | 0);
  HEAP32[$2 + 36 >> 2] = -1;
  label$10 : {
   if (!(HEAP8[$2 + 71 | 0] & 1)) {
    HEAP32[$2 + 32 >> 2] = 0;
    while (1) {
     if ((HEAP16[HEAP32[13768] + 2 >> 1] ? HEAP32[$2 + 32 >> 2] ? 1 : HEAP16[HEAP32[13768] + 2 >> 1] != 125 : 0) & 1) {
      if (HEAP16[HEAP32[13768] + 2 >> 1] == 123) {
       HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 32 >> 2] + 1;
      }
      if (HEAP16[HEAP32[13768] + 2 >> 1] == 125) {
       HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 32 >> 2] + -1;
      }
      HEAP32[$2 + 36 >> 2] = jsvStringIteratorGetIndex(HEAP32[13768] + 108 | 0) - 1;
      jslGetNextToken();
      continue;
     }
     break;
    }
    break label$10;
   }
   HEAP32[$2 + 28 >> 2] = HEAP32[23778];
   HEAP32[23778] = 0;
   jsvUnLock(__jspeAssignmentExpression(jspeConditionalExpression()));
   HEAP32[23778] = HEAP32[$2 + 28 >> 2];
   HEAP32[$2 + 36 >> 2] = jsvStringIteratorGetIndex(HEAP32[13768] + 4 | 0) - 1;
  }
  if (!(!HEAP32[$2 + 72 >> 2] | HEAP32[$2 + 36 >> 2] <= 0)) {
   label$21 : {
    label$22 : {
     if (HEAP8[$2 + 70 | 0] & 1) {
      break label$22;
     }
     if (!(jsvIsNativeString(HEAP32[HEAP32[13768] + 104 >> 2]) & 1)) {
      break label$22;
     }
     HEAP32[$2 + 20 >> 2] = jsvStringIteratorGetIndex($2 + 40 | 0) - 1;
     HEAP32[$2 + 24 >> 2] = jsvNewNativeString(HEAP32[HEAP32[HEAP32[13768] + 104 >> 2] >> 2] + HEAP32[$2 + 20 >> 2] | 0, HEAP32[$2 + 36 >> 2] - HEAP32[$2 + 20 >> 2] | 0);
     break label$21;
    }
    label$23 : {
     if (!(wasm2js_i32$0 = 0, wasm2js_i32$1 = !(jsfGetFlag(2) & 1), wasm2js_i32$2 = HEAP8[$2 + 70 | 0] & 1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)) {
      HEAP32[$2 + 24 >> 2] = jslNewTokenisedStringFromLexer($2 + 40 | 0, HEAP32[$2 + 36 >> 2]);
      break label$23;
     }
     HEAP32[$2 + 24 >> 2] = jslNewStringFromLexer($2 + 40 | 0, HEAP32[$2 + 36 >> 2]);
    }
   }
   jsvUnLock2(jsvAddNamedChild(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 24 >> 2], 3847), HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 16 >> 2] = jspeiGetScopesAsVar();
   if (HEAP32[$2 + 16 >> 2]) {
    jsvUnLock2(jsvAddNamedChild(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 16 >> 2], 3852), HEAP32[$2 + 16 >> 2]);
   }
   if (HEAP32[$2 + 64 >> 2]) {
    HEAP32[$2 + 12 >> 2] = jsvNewFromInteger(HEAP32[$2 + 64 >> 2]);
    if (HEAP32[$2 + 12 >> 2]) {
     jsvUnLock2(jsvAddNamedChild(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 12 >> 2], 3857), HEAP32[$2 + 12 >> 2]);
    }
   }
  }
  jslCharPosFree($2 + 40 | 0);
  if (!(HEAP8[$2 + 71 | 0] & 1)) {
   jslMatch(125);
  }
 }
 HEAP8[$2 + 79 | 0] = 0;
 global$0 = $2 + 80 | 0;
}
function jswrap_array_splice($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 96 | 0;
 global$0 = $4;
 HEAP32[$4 + 88 >> 2] = $0;
 HEAP32[$4 + 84 >> 2] = $1;
 HEAP32[$4 + 80 >> 2] = $2;
 HEAP32[$4 + 76 >> 2] = $3;
 label$1 : {
  if (!(jsvIsArray(HEAP32[$4 + 88 >> 2]) & 1)) {
   HEAP32[$4 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 72 >> 2] = jsvGetArrayLength(HEAP32[$4 + 88 >> 2]);
  if (HEAP32[$4 + 84 >> 2] < 0) {
   HEAP32[$4 + 84 >> 2] = HEAP32[$4 + 72 >> 2] + HEAP32[$4 + 84 >> 2];
  }
  if (HEAP32[$4 + 84 >> 2] < 0) {
   HEAP32[$4 + 84 >> 2] = 0;
  }
  if (HEAP32[$4 + 84 >> 2] > HEAP32[$4 + 72 >> 2]) {
   HEAP32[$4 + 84 >> 2] = HEAP32[$4 + 72 >> 2];
  }
  HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 72 >> 2];
  if (jsvIsInt(HEAP32[$4 + 80 >> 2]) & 1) {
   HEAP32[$4 + 68 >> 2] = jsvGetInteger(HEAP32[$4 + 80 >> 2]);
  }
  if (HEAP32[$4 + 68 >> 2] > (HEAP32[$4 + 72 >> 2] - HEAP32[$4 + 84 >> 2] | 0)) {
   HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 72 >> 2] - HEAP32[$4 + 84 >> 2];
  }
  $0 = $4 + 48 | 0;
  HEAP32[$4 + 64 >> 2] = jsvGetArrayLength(HEAP32[$4 + 76 >> 2]);
  HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 64 >> 2] - HEAP32[$4 + 68 >> 2];
  HEAP8[$4 + 59 | 0] = 0;
  HEAP32[$4 + 52 >> 2] = jsvNewWithFlags(3);
  jsvObjectIteratorNew($0, HEAP32[$4 + 88 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($4 + 48 | 0) & 1) {
    $0 = HEAPU8[$4 + 59 | 0] ^ -1;
   } else {
    $0 = 0;
   }
   if ($0 & 1) {
    HEAP8[$4 + 47 | 0] = 1;
    HEAP32[$4 + 40 >> 2] = jsvObjectIteratorGetKey($4 + 48 | 0);
    label$12 : {
     if (!HEAP32[$4 + 40 >> 2]) {
      break label$12;
     }
     if (!(jsvIsInt(HEAP32[$4 + 40 >> 2]) & 1)) {
      break label$12;
     }
     HEAP32[$4 + 36 >> 2] = jsvGetInteger(HEAP32[$4 + 40 >> 2]);
     if (HEAP32[$4 + 36 >> 2] >= HEAP32[$4 + 84 >> 2]) {
      label$14 : {
       if (HEAP32[$4 + 36 >> 2] < (HEAP32[$4 + 84 >> 2] + HEAP32[$4 + 68 >> 2] | 0)) {
        if (HEAP32[$4 + 52 >> 2]) {
         HEAP32[$4 + 32 >> 2] = jsvObjectIteratorGetValue($4 + 48 | 0);
         jsvArrayPushAndUnLock(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 32 >> 2]);
        }
        HEAP8[$4 + 47 | 0] = 0;
        $0 = $4 + 48 | 0;
        HEAP32[$4 + 28 >> 2] = jsvObjectIteratorGetKey($0);
        jsvObjectIteratorNext($0);
        jsvRemoveChild(HEAP32[$4 + 88 >> 2], HEAP32[$4 + 28 >> 2]);
        jsvUnLock(HEAP32[$4 + 28 >> 2]);
        break label$14;
       }
       HEAP8[$4 + 59 | 0] = 1;
       HEAP8[$4 + 47 | 0] = 0;
      }
     }
    }
    jsvUnLock(HEAP32[$4 + 40 >> 2]);
    if (HEAP8[$4 + 47 | 0] & 1) {
     jsvObjectIteratorNext($4 + 48 | 0);
    }
    continue;
   }
   break;
  }
  $0 = $4 + 16 | 0;
  HEAP32[$4 + 24 >> 2] = jsvObjectIteratorGetKey($4 + 48 | 0);
  jsvObjectIteratorNew($0, HEAP32[$4 + 76 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($4 + 16 | 0) & 1) {
    $0 = $4 + 16 | 0;
    HEAP32[$4 + 12 >> 2] = jsvObjectIteratorGetValue($0);
    jsvArrayInsertBefore(HEAP32[$4 + 88 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 12 >> 2]);
    jsvUnLock(HEAP32[$4 + 12 >> 2]);
    jsvObjectIteratorNext($0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($4 + 16 | 0);
  jsvUnLock(HEAP32[$4 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($4 + 48 | 0) & 1) {
    HEAP32[$4 + 8 >> 2] = jsvObjectIteratorGetKey($4 + 48 | 0);
    label$22 : {
     if (!HEAP32[$4 + 8 >> 2]) {
      break label$22;
     }
     if (!(jsvIsInt(HEAP32[$4 + 8 >> 2]) & 1)) {
      break label$22;
     }
     jsvSetInteger(HEAP32[$4 + 8 >> 2], jsvGetInteger(HEAP32[$4 + 8 >> 2]) + HEAP32[$4 + 60 >> 2] | 0);
    }
    $0 = $4 + 48 | 0;
    jsvUnLock(HEAP32[$4 + 8 >> 2]);
    jsvObjectIteratorNext($0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($4 + 48 | 0);
  jsvSetArrayLength(HEAP32[$4 + 88 >> 2], HEAP32[$4 + 72 >> 2] + HEAP32[$4 + 60 >> 2] | 0);
  HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 52 >> 2];
 }
 global$0 = $4 + 96 | 0;
 return HEAP32[$4 + 92 >> 2];
}
function jswrap_object_keys_or_property_names_cb($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 128 | 0;
 global$0 = $5;
 HEAP32[$5 + 124 >> 2] = $0;
 HEAP8[$5 + 123 | 0] = $1;
 HEAP8[$5 + 122 | 0] = $2;
 HEAP32[$5 + 116 >> 2] = $3;
 HEAP32[$5 + 112 >> 2] = $4;
 if (jsvIsIterable(HEAP32[$5 + 124 >> 2]) & 1) {
  $0 = $5 - -64 | 0;
  HEAP32[$5 + 108 >> 2] = jsvGetInternalFunctionCheckerFor(HEAP32[$5 + 124 >> 2]);
  jsvIteratorNew($0, HEAP32[$5 + 124 >> 2], 0);
  while (1) {
   if (jsvIteratorHasElement($5 - -64 | 0) & 1) {
    HEAP32[$5 + 60 >> 2] = jsvIteratorGetKey($5 - -64 | 0);
    label$4 : {
     label$5 : {
      if (!HEAP32[$5 + 108 >> 2]) {
       break label$5;
      }
      if (!(FUNCTION_TABLE[HEAP32[$5 + 108 >> 2]](HEAP32[$5 + 60 >> 2]) & 1)) {
       break label$5;
      }
      if (!(jsvIsStringEqual(HEAP32[$5 + 60 >> 2], 34768) & 1)) {
       break label$4;
      }
     }
     HEAP32[$5 + 56 >> 2] = jsvAsArrayIndexAndUnLock(jsvCopyNameOnly(HEAP32[$5 + 60 >> 2], 0, 0));
     if (HEAP32[$5 + 56 >> 2]) {
      FUNCTION_TABLE[HEAP32[$5 + 116 >> 2]](HEAP32[$5 + 112 >> 2], HEAP32[$5 + 56 >> 2]);
      jsvUnLock(HEAP32[$5 + 56 >> 2]);
     }
    }
    $0 = $5 - -64 | 0;
    jsvUnLock(HEAP32[$5 + 60 >> 2]);
    jsvIteratorNext($0);
    continue;
   }
   break;
  }
  jsvIteratorFree($5 - -64 | 0);
 }
 if (HEAP8[$5 + 123 | 0] & 1) {
  HEAP32[$5 + 52 >> 2] = jswGetSymbolListForObjectProto(0);
  HEAP32[$5 + 48 >> 2] = jspGetPrototypeOwner(HEAP32[$5 + 124 >> 2]);
  label$8 : {
   if (HEAP32[$5 + 48 >> 2]) {
    HEAP32[$5 + 44 >> 2] = jswGetSymbolListForObjectProto(HEAP32[$5 + 48 >> 2]);
    jsvUnLock(HEAP32[$5 + 48 >> 2]);
    _jswrap_object_keys_or_property_names_iterator(HEAP32[$5 + 44 >> 2], HEAP32[$5 + 116 >> 2], HEAP32[$5 + 112 >> 2]);
    break label$8;
   }
   label$10 : {
    if (jsvIsObject(HEAP32[$5 + 124 >> 2]) & 1) {
     if (!(jsvIsRoot(HEAP32[$5 + 124 >> 2]) & 1)) {
      break label$10;
     }
    }
    HEAP32[$5 + 40 >> 2] = jswGetSymbolListForObject(HEAP32[$5 + 124 >> 2]);
    _jswrap_object_keys_or_property_names_iterator(HEAP32[$5 + 40 >> 2], HEAP32[$5 + 116 >> 2], HEAP32[$5 + 112 >> 2]);
   }
  }
  if (HEAP8[$5 + 122 | 0] & 1) {
   HEAP32[$5 + 36 >> 2] = 0;
   label$13 : {
    if (!(jsvIsObject(HEAP32[$5 + 124 >> 2]) & 1)) {
     if (!(jsvIsFunction(HEAP32[$5 + 124 >> 2]) & 1)) {
      break label$13;
     }
    }
    HEAP32[$5 + 36 >> 2] = jsvObjectGetChild(HEAP32[$5 + 124 >> 2], 34780, 0);
   }
   label$15 : {
    if (jsvIsObject(HEAP32[$5 + 36 >> 2]) & 1) {
     jswrap_object_keys_or_property_names_cb(HEAP32[$5 + 36 >> 2], HEAP8[$5 + 123 | 0] & 1, HEAP8[$5 + 122 | 0] & 1, HEAP32[$5 + 116 >> 2], HEAP32[$5 + 112 >> 2]);
     break label$15;
    }
    HEAP32[$5 + 32 >> 2] = jswGetSymbolListForObjectProto(HEAP32[$5 + 124 >> 2]);
    _jswrap_object_keys_or_property_names_iterator(HEAP32[$5 + 32 >> 2], HEAP32[$5 + 116 >> 2], HEAP32[$5 + 112 >> 2]);
    if (HEAP32[$5 + 52 >> 2] != HEAP32[$5 + 32 >> 2]) {
     _jswrap_object_keys_or_property_names_iterator(HEAP32[$5 + 52 >> 2], HEAP32[$5 + 116 >> 2], HEAP32[$5 + 112 >> 2]);
    }
   }
   jsvUnLock(HEAP32[$5 + 36 >> 2]);
  }
  label$18 : {
   if (!(jsvIsArray(HEAP32[$5 + 124 >> 2]) & 1)) {
    if (!(jsvIsString(HEAP32[$5 + 124 >> 2]) & 1)) {
     break label$18;
    }
   }
   HEAP32[$5 + 28 >> 2] = jsvNewFromString(34790);
   FUNCTION_TABLE[HEAP32[$5 + 116 >> 2]](HEAP32[$5 + 112 >> 2], HEAP32[$5 + 28 >> 2]);
   jsvUnLock(HEAP32[$5 + 28 >> 2]);
  }
 }
 if (jsvIsRoot(HEAP32[$5 + 124 >> 2]) & 1) {
  HEAP32[$5 + 24 >> 2] = 0;
  while (1) {
   if (HEAP32[$5 + 24 >> 2] < 32) {
    $0 = $5 + 14 | 0;
    jshGetPinString($0, HEAP32[$5 + 24 >> 2] & 255);
    HEAP32[$5 + 8 >> 2] = jsvNewFromString($0);
    FUNCTION_TABLE[HEAP32[$5 + 116 >> 2]](HEAP32[$5 + 112 >> 2], HEAP32[$5 + 8 >> 2]);
    jsvUnLock(HEAP32[$5 + 8 >> 2]);
    HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 24 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 global$0 = $5 + 128 | 0;
}
function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__one_over_one_plus_x_for_x_in_0_1_int__28gemmlowp__FixedPoint_int_2c_200__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $1 = global$0 - 208 | 0;
 global$0 = $1;
 $2 = $1 + 152 | 0;
 $3 = $1 + 112 | 0;
 $4 = $1 + 184 | 0;
 $5 = $1 + 120 | 0;
 $6 = $1 + 160 | 0;
 $7 = $1 + 136 | 0;
 HEAP32[$1 + 192 >> 2] = $0;
 HEAP32[$1 + 176 >> 2] = HEAP32[$1 + 192 >> 2];
 HEAP32[$1 + 168 >> 2] = gemmlowp__FixedPoint_int_2c_200___One_28_29();
 HEAP32[$1 + 184 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__RoundingHalfSum_int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 176 >> 2], HEAP32[$1 + 168 >> 2]);
 HEAP32[$1 + 160 >> 2] = gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200__20__28int_29(1515870810));
 HEAP32[$1 + 152 >> 2] = gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200__20__28int_29(-1010580540));
 HEAP32[$7 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 128 >> 2] = gemmlowp__FixedPoint_int_2c_20_280_29_20__20_280_29__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 120 >> 2], HEAP32[$1 + 112 >> 2]);
 HEAP32[$1 + 144 >> 2] = gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__operator__int_2c_2012__28gemmlowp__FixedPoint_int_2c_2012__2c_20gemmlowp__FixedPoint_int_2c_2012__29(HEAP32[$1 + 136 >> 2], HEAP32[$1 + 128 >> 2]);
 HEAP32[$1 + 108 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 108 >> 2] < 3) {
   $2 = $1 + 56 | 0;
   $3 = $1 + 80 | 0;
   $4 = $1 + 16 | 0;
   $5 = $1 + 24 | 0;
   $6 = $1 + 48 | 0;
   $7 = $1 + 104 | 0;
   $8 = $1 - -64 | 0;
   HEAP32[$1 + 96 >> 2] = HEAP32[$1 + 184 >> 2];
   $0 = $1 + 144 | 0;
   HEAP32[$1 + 88 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$1 + 104 >> 2] = gemmlowp__FixedPoint_int_2c_20_280_29_20__20_280_29__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 96 >> 2], HEAP32[$1 + 88 >> 2]);
   HEAP32[$1 + 72 >> 2] = gemmlowp__FixedPoint_int_2c_202___One_28_29();
   HEAP32[$8 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$1 + 80 >> 2] = gemmlowp__FixedPoint_int_2c_205__20gemmlowp__operator__int_2c_205__28gemmlowp__FixedPoint_int_2c_205__2c_20gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$1 + 72 >> 2], HEAP32[$1 + 64 >> 2]);
   HEAP32[$6 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$5 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$1 + 32 >> 2] = gemmlowp__FixedPoint_int_2c_20_280_29_20__20_280_29__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 16 >> 2]);
   HEAP32[$1 + 40 >> 2] = gemmlowp__FixedPoint_int_2c_202__20gemmlowp__Rescale_2_2c_20int_2c_204__28gemmlowp__FixedPoint_int_2c_204__29(HEAP32[$1 + 32 >> 2]);
   HEAP32[$1 + 56 >> 2] = gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__operator__int_2c_2012__28gemmlowp__FixedPoint_int_2c_2012__2c_20gemmlowp__FixedPoint_int_2c_2012__29(HEAP32[$1 + 48 >> 2], HEAP32[$1 + 40 >> 2]);
   HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 108 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$1 >> 2] = HEAP32[$1 + 144 >> 2];
 HEAP32[$1 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_20_28_1_29_20__20_282_29__20gemmlowp__ExactMulByPot__1_2c_20int_2c_202__28gemmlowp__FixedPoint_int_2c_202__29(HEAP32[$1 >> 2]);
 HEAP32[$1 + 200 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__Rescale_0_2c_20int_2c_201__28gemmlowp__FixedPoint_int_2c_201__29(HEAP32[$1 + 8 >> 2]);
 global$0 = $1 + 208 | 0;
 return HEAP32[$1 + 200 >> 2];
}
function tflite__GreedyMemoryPlanner__CalculateOffsetsIfNeeded_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 80 | 0;
 global$0 = $1;
 HEAP32[$1 + 76 >> 2] = $0;
 label$1 : {
  $0 = HEAP32[$1 + 76 >> 2];
  if (!(HEAP8[$0 + 36 | 0] & 1) | !HEAP32[$0 + 8 >> 2]) {
   break label$1;
  }
  HEAP8[$0 + 36 | 0] = 0;
  HEAP32[$1 + 72 >> 2] = 0;
  while (1) {
   if (HEAP32[$1 + 72 >> 2] < HEAP32[$0 + 8 >> 2]) {
    HEAP32[HEAP32[$0 + 16 >> 2] + (HEAP32[$1 + 72 >> 2] << 2) >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] + Math_imul(HEAP32[$1 + 72 >> 2], 12) >> 2];
    HEAP32[HEAP32[$0 + 20 >> 2] + (HEAP32[$1 + 72 >> 2] << 2) >> 2] = HEAP32[$1 + 72 >> 2];
    HEAP32[HEAP32[$0 + 32 >> 2] + (HEAP32[$1 + 72 >> 2] << 2) >> 2] = -1;
    HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 72 >> 2] + 1;
    continue;
   }
   break;
  }
  tflite__ReverseSortInPlace_28int__2c_20int__2c_20int_29(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2], HEAP32[$0 + 8 >> 2]);
  HEAP32[$1 + 68 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[HEAP32[$1 + 68 >> 2] >> 2] = 0;
  HEAP32[HEAP32[$1 + 68 >> 2] + 4 >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] >> 2];
  HEAP32[HEAP32[$1 + 68 >> 2] + 8 >> 2] = -1;
  HEAP32[$0 + 28 >> 2] = 1;
  HEAP32[HEAP32[$0 + 32 >> 2] + (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] << 2) >> 2] = 0;
  HEAP32[$1 + 64 >> 2] = 1;
  while (1) {
   if (HEAP32[$1 + 64 >> 2] >= HEAP32[$0 + 8 >> 2]) {
    break label$1;
   }
   HEAP32[$1 + 60 >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] + (HEAP32[$1 + 64 >> 2] << 2) >> 2];
   HEAP32[$1 + 56 >> 2] = HEAP32[$0 + 12 >> 2] + Math_imul(HEAP32[$1 + 60 >> 2], 12);
   HEAP32[$1 + 52 >> 2] = HEAP32[HEAP32[$1 + 56 >> 2] >> 2];
   HEAP32[$1 + 48 >> 2] = HEAP32[HEAP32[$1 + 56 >> 2] + 4 >> 2];
   HEAP32[$1 + 44 >> 2] = HEAP32[HEAP32[$1 + 56 >> 2] + 8 >> 2];
   HEAP32[$1 + 40 >> 2] = 0;
   HEAP32[$1 + 36 >> 2] = 0;
   while (1) {
    HEAP32[$1 + 32 >> 2] = tflite__GreedyMemoryPlanner__NextSimultaneouslyActiveBuffer_28tflite__GreedyMemoryPlanner__ListEntry_20const__2c_20int_2c_20int_29($0, HEAP32[$1 + 40 >> 2], HEAP32[$1 + 48 >> 2], HEAP32[$1 + 44 >> 2]);
    if (HEAP32[$1 + 40 >> 2]) {
     HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 12 >> 2] + Math_imul(HEAP32[HEAP32[$1 + 40 >> 2] + 4 >> 2], 12);
     HEAP32[$1 + 24 >> 2] = HEAP32[HEAP32[$1 + 40 >> 2] >> 2] + HEAP32[HEAP32[$1 + 28 >> 2] >> 2];
     if (HEAP32[$1 + 24 >> 2] > HEAP32[$1 + 36 >> 2]) {
      HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 24 >> 2];
     }
    }
    label$9 : {
     if (!HEAP32[$1 + 32 >> 2]) {
      break label$9;
     }
     HEAP32[$1 + 20 >> 2] = HEAP32[HEAP32[$1 + 32 >> 2] >> 2] - HEAP32[$1 + 36 >> 2];
     if (HEAP32[$1 + 20 >> 2] >= HEAP32[$1 + 52 >> 2]) {
      break label$9;
     }
     HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 32 >> 2];
     continue;
    }
    break;
   }
   HEAP32[HEAP32[$0 + 32 >> 2] + (HEAP32[$1 + 60 >> 2] << 2) >> 2] = HEAP32[$1 + 36 >> 2];
   HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[$0 + 28 >> 2], 12);
   HEAP32[HEAP32[$1 + 16 >> 2] >> 2] = HEAP32[$1 + 36 >> 2];
   HEAP32[HEAP32[$1 + 16 >> 2] + 4 >> 2] = HEAP32[$1 + 60 >> 2];
   HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 28 >> 2];
   HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 28 >> 2] + 1;
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 68 >> 2];
   while (1) {
    HEAP32[$1 + 4 >> 2] = HEAP32[HEAP32[$1 + 8 >> 2] + 8 >> 2];
    label$11 : {
     if (HEAP32[$1 + 4 >> 2] == -1) {
      HEAP32[HEAP32[$1 + 8 >> 2] + 8 >> 2] = HEAP32[$1 + 12 >> 2];
      HEAP32[HEAP32[$1 + 16 >> 2] + 8 >> 2] = -1;
      break label$11;
     }
     HEAP32[$1 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[$1 + 4 >> 2], 12);
     if (HEAP32[HEAP32[$1 >> 2] >> 2] > HEAP32[$1 + 36 >> 2]) {
      HEAP32[HEAP32[$1 + 16 >> 2] + 8 >> 2] = HEAP32[HEAP32[$1 + 8 >> 2] + 8 >> 2];
      HEAP32[HEAP32[$1 + 8 >> 2] + 8 >> 2] = HEAP32[$1 + 12 >> 2];
     } else {
      HEAP32[$1 + 8 >> 2] = HEAP32[$1 >> 2];
      continue;
     }
    }
    break;
   }
   HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 64 >> 2] + 1;
   continue;
  }
 }
 global$0 = $1 + 80 | 0;
}
function tflite__reference_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20short__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = global$0 - 112 | 0;
 global$0 = $9;
 HEAP32[$9 + 108 >> 2] = $0;
 HEAP32[$9 + 104 >> 2] = $1;
 HEAP32[$9 + 100 >> 2] = $2;
 HEAP32[$9 + 96 >> 2] = $3;
 HEAP32[$9 + 92 >> 2] = $4;
 HEAP32[$9 + 88 >> 2] = $5;
 HEAP32[$9 + 84 >> 2] = $6;
 HEAP32[$9 + 80 >> 2] = $7;
 HEAP32[$9 + 76 >> 2] = $8;
 HEAP32[$9 + 72 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] >> 2];
 HEAP32[$9 + 68 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 4 >> 2];
 HEAP32[$9 + 64 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 8 >> 2];
 HEAP32[$9 + 60 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 12 >> 2];
 HEAP32[$9 + 56 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 16 >> 2];
 HEAP32[$9 + 52 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 20 >> 2];
 HEAP32[$9 + 48 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 24 >> 2];
 label$1 : {
  if (HEAP32[$9 + 52 >> 2] > HEAP32[$9 + 48 >> 2]) {
   break label$1;
  }
 }
 label$2 : {
  if (HEAP32[$9 + 64 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$9 + 44 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$9 + 80 >> 2]);
 HEAP32[$9 + 40 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$9 + 96 >> 2]);
 HEAP32[$9 + 36 >> 2] = tflite__FlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 80 >> 2], HEAP32[$9 + 44 >> 2] - 1 | 0);
 HEAP32[$9 + 32 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 96 >> 2], HEAP32[$9 + 40 >> 2] - 2 | 0, HEAP32[$9 + 80 >> 2], HEAP32[$9 + 44 >> 2] - 1 | 0);
 HEAP32[$9 + 28 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 96 >> 2], HEAP32[$9 + 40 >> 2] - 1 | 0);
 HEAP32[$9 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$9 + 24 >> 2] < HEAP32[$9 + 36 >> 2]) {
   HEAP32[$9 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$9 + 20 >> 2] < HEAP32[$9 + 32 >> 2]) {
     HEAP32[$9 + 16 >> 2] = HEAP32[HEAP32[$9 + 84 >> 2] + (HEAP32[$9 + 20 >> 2] << 2) >> 2];
     HEAP32[$9 + 12 >> 2] = 0;
     while (1) {
      if (HEAP32[$9 + 12 >> 2] < HEAP32[$9 + 28 >> 2]) {
       HEAP16[$9 + 10 >> 1] = HEAPU8[HEAP32[$9 + 100 >> 2] + (HEAP32[$9 + 12 >> 2] + Math_imul(HEAP32[$9 + 24 >> 2], HEAP32[$9 + 28 >> 2]) | 0) | 0] + HEAP32[$9 + 72 >> 2];
       HEAP16[$9 + 8 >> 1] = HEAPU8[HEAP32[$9 + 92 >> 2] + (HEAP32[$9 + 12 >> 2] + Math_imul(HEAP32[$9 + 20 >> 2], HEAP32[$9 + 28 >> 2]) | 0) | 0] + HEAP32[$9 + 68 >> 2];
       HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 16 >> 2] + Math_imul(HEAP16[$9 + 8 >> 1], HEAP16[$9 + 10 >> 1]);
       HEAP32[$9 + 12 >> 2] = HEAP32[$9 + 12 >> 2] + 1;
       continue;
      }
      break;
     }
     $0 = $9 + 16 | 0;
     $1 = $9 + 4 | 0;
     HEAP32[$9 + 16 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$9 + 16 >> 2], HEAP32[$9 + 60 >> 2], HEAP32[$9 + 56 >> 2]);
     HEAP32[$9 + 4 >> 2] = HEAP32[$9 + 52 >> 2] - HEAP32[$9 + 64 >> 2];
     HEAP32[$9 + 16 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, $1) >> 2];
     HEAP32[$9 >> 2] = HEAP32[$9 + 48 >> 2] - HEAP32[$9 + 64 >> 2];
     HEAP32[$9 + 16 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0, $9) >> 2];
     HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 64 >> 2] + HEAP32[$9 + 16 >> 2];
     HEAP16[HEAP32[$9 + 76 >> 2] + (HEAP32[$9 + 20 >> 2] + Math_imul(HEAP32[$9 + 32 >> 2], HEAP32[$9 + 24 >> 2]) << 1) >> 1] = HEAP32[$9 + 16 >> 2];
     HEAP32[$9 + 20 >> 2] = HEAP32[$9 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$9 + 24 >> 2] = HEAP32[$9 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $9 + 112 | 0;
}
function __jspeAssignmentExpression($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 label$1 : {
  label$2 : {
   if (HEAP16[HEAP32[13768] + 2 >> 1] == 61 | HEAP16[HEAP32[13768] + 2 >> 1] == 150 | (HEAP16[HEAP32[13768] + 2 >> 1] == 151 | HEAP16[HEAP32[13768] + 2 >> 1] == 154)) {
    break label$2;
   }
   if (HEAP16[HEAP32[13768] + 2 >> 1] == 155 | HEAP16[HEAP32[13768] + 2 >> 1] == 156 | (HEAP16[HEAP32[13768] + 2 >> 1] == 157 | HEAP16[HEAP32[13768] + 2 >> 1] == 159)) {
    break label$2;
   }
   if (HEAP16[HEAP32[13768] + 2 >> 1] == 161 | HEAP16[HEAP32[13768] + 2 >> 1] == 148 | HEAP16[HEAP32[13768] + 2 >> 1] == 144) {
    break label$2;
   }
   if (HEAP16[HEAP32[13768] + 2 >> 1] != 149) {
    break label$1;
   }
  }
  HEAP32[$1 + 20 >> 2] = HEAP16[HEAP32[13768] + 2 >> 1];
  jslGetNextToken();
  HEAP32[$1 + 24 >> 2] = __jspeAssignmentExpression(jspeConditionalExpression());
  HEAP32[$1 + 24 >> 2] = jsvSkipNameAndUnLock(HEAP32[$1 + 24 >> 2]);
  if (!(!HEAP32[$1 + 28 >> 2] | (HEAP32[23778] & 63) != 1)) {
   label$4 : {
    if (HEAP32[$1 + 20 >> 2] == 61) {
     jsvReplaceWithOrAddToRoot(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 24 >> 2]);
     break label$4;
    }
    label$6 : {
     if (HEAP32[$1 + 20 >> 2] == 150) {
      HEAP32[$1 + 20 >> 2] = 43;
      break label$6;
     }
     label$8 : {
      if (HEAP32[$1 + 20 >> 2] == 151) {
       HEAP32[$1 + 20 >> 2] = 45;
       break label$8;
      }
      label$10 : {
       if (HEAP32[$1 + 20 >> 2] == 154) {
        HEAP32[$1 + 20 >> 2] = 42;
        break label$10;
       }
       label$12 : {
        if (HEAP32[$1 + 20 >> 2] == 155) {
         HEAP32[$1 + 20 >> 2] = 47;
         break label$12;
        }
        label$14 : {
         if (HEAP32[$1 + 20 >> 2] == 156) {
          HEAP32[$1 + 20 >> 2] = 37;
          break label$14;
         }
         label$16 : {
          if (HEAP32[$1 + 20 >> 2] == 157) {
           HEAP32[$1 + 20 >> 2] = 38;
           break label$16;
          }
          label$18 : {
           if (HEAP32[$1 + 20 >> 2] == 159) {
            HEAP32[$1 + 20 >> 2] = 124;
            break label$18;
           }
           label$20 : {
            if (HEAP32[$1 + 20 >> 2] == 161) {
             HEAP32[$1 + 20 >> 2] = 94;
             break label$20;
            }
            label$22 : {
             if (HEAP32[$1 + 20 >> 2] == 148) {
              HEAP32[$1 + 20 >> 2] = 146;
              break label$22;
             }
             label$24 : {
              if (HEAP32[$1 + 20 >> 2] == 144) {
               HEAP32[$1 + 20 >> 2] = 143;
               break label$24;
              }
              if (HEAP32[$1 + 20 >> 2] == 149) {
               HEAP32[$1 + 20 >> 2] = 147;
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    label$27 : {
     if (HEAP32[$1 + 20 >> 2] != 43) {
      break label$27;
     }
     if (!(jsvIsName(HEAP32[$1 + 28 >> 2]) & 1)) {
      break label$27;
     }
     HEAP32[$1 + 16 >> 2] = jsvSkipName(HEAP32[$1 + 28 >> 2]);
     label$28 : {
      if (!(jsvIsBasicString(HEAP32[$1 + 16 >> 2]) & 1)) {
       break label$28;
      }
      if ((jsvGetRefs(HEAP32[$1 + 16 >> 2]) & 65535) != 1 | HEAP32[$1 + 24 >> 2] == HEAP32[$1 + 16 >> 2]) {
       break label$28;
      }
      HEAP32[$1 + 12 >> 2] = jsvAsString(HEAP32[$1 + 24 >> 2]);
      jsvAppendStringVarComplete(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 12 >> 2]);
      jsvUnLock(HEAP32[$1 + 12 >> 2]);
      HEAP32[$1 + 20 >> 2] = 0;
     }
     jsvUnLock(HEAP32[$1 + 16 >> 2]);
    }
    if (HEAP32[$1 + 20 >> 2]) {
     HEAP32[$1 + 8 >> 2] = jsvMathsOpSkipNames(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 24 >> 2], HEAP32[$1 + 20 >> 2]);
     jsvReplaceWith(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 8 >> 2]);
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
    }
   }
  }
  jsvUnLock(HEAP32[$1 + 24 >> 2]);
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function jsserialPopulateUSARTInfo($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = global$0 - 176 | 0;
 global$0 = $3;
 $4 = $3 + 156 | 0;
 $5 = $3 + 160 | 0;
 $6 = $3 + 148 | 0;
 $7 = $3 + 152 | 0;
 HEAP32[$3 + 172 >> 2] = $0;
 HEAP32[$3 + 168 >> 2] = $1;
 HEAP32[$3 + 164 >> 2] = $2;
 jshUSARTInitInfo(HEAP32[$3 + 172 >> 2]);
 HEAP32[$3 + 160 >> 2] = 0;
 HEAP32[$3 + 156 >> 2] = 0;
 HEAP32[$3 + 152 >> 2] = HEAPU8[HEAP32[$3 + 172 >> 2] + 8 | 0];
 HEAP32[$3 + 148 >> 2] = HEAPU8[HEAP32[$3 + 172 >> 2] + 10 | 0];
 HEAP32[$3 + 32 >> 2] = 7546;
 HEAP16[$3 + 36 >> 1] = 12;
 HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 172 >> 2] + 4;
 HEAP32[$3 + 44 >> 2] = 7549;
 HEAP16[$3 + 48 >> 1] = 12;
 HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 172 >> 2] + 5;
 HEAP32[$3 + 56 >> 2] = 7552;
 HEAP16[$3 + 60 >> 1] = 12;
 HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 172 >> 2] + 6;
 HEAP32[$3 + 68 >> 2] = 7555;
 HEAP16[$3 + 72 >> 1] = 12;
 HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 172 >> 2] + 7;
 HEAP32[$3 + 80 >> 2] = 7559;
 HEAP16[$3 + 84 >> 1] = 9;
 HEAP32[$3 + 88 >> 2] = $7;
 HEAP32[$3 + 92 >> 2] = 7568;
 HEAP16[$3 + 96 >> 1] = 9;
 HEAP32[$3 + 100 >> 2] = $6;
 HEAP32[$3 + 104 >> 2] = 7577;
 HEAP16[$3 + 108 >> 1] = 5;
 HEAP32[$3 + 112 >> 2] = $5;
 HEAP32[$3 + 116 >> 2] = 7584;
 HEAP16[$3 + 120 >> 1] = 5;
 HEAP32[$3 + 124 >> 2] = $4;
 HEAP32[$3 + 128 >> 2] = 7589;
 HEAP16[$3 + 132 >> 1] = 11;
 HEAP32[$3 + 136 >> 2] = HEAP32[$3 + 172 >> 2] + 12;
 if (!(jsvIsUndefined(HEAP32[$3 + 168 >> 2]) & 1)) {
  HEAP32[$3 + 28 >> 2] = jsvGetInteger(HEAP32[$3 + 168 >> 2]);
  label$2 : {
   if (!(HEAP32[$3 + 28 >> 2] <= 1e7 ? HEAP32[$3 + 28 >> 2] > 100 : 0)) {
    jsExceptionHere(1, 7596, 0);
    break label$2;
   }
   $0 = HEAP32[$3 + 172 >> 2];
   $1 = HEAP32[$3 + 28 >> 2];
   HEAP8[$0 | 0] = $1;
   HEAP8[$0 + 1 | 0] = $1 >>> 8;
   HEAP8[$0 + 2 | 0] = $1 >>> 16;
   HEAP8[$0 + 3 | 0] = $1 >>> 24;
  }
 }
 HEAP8[$3 + 27 | 0] = 1;
 if (jsvReadConfigObject(HEAP32[$3 + 164 >> 2], $3 + 32 | 0, 9) & 1) {
  HEAP8[HEAP32[$3 + 172 >> 2] + 8 | 0] = HEAP32[$3 + 152 >> 2];
  HEAP8[HEAP32[$3 + 172 >> 2] + 10 | 0] = HEAP32[$3 + 148 >> 2];
  HEAP8[HEAP32[$3 + 172 >> 2] + 9 | 0] = 0;
  label$6 : {
   if (jsvIsString(HEAP32[$3 + 160 >> 2]) & 1) {
    label$8 : {
     if (!(jsvIsStringEqual(HEAP32[$3 + 160 >> 2], 7624) & 1)) {
      if (!(jsvIsStringEqual(HEAP32[$3 + 160 >> 2], 7626) & 1)) {
       break label$8;
      }
     }
     HEAP8[HEAP32[$3 + 172 >> 2] + 9 | 0] = 1;
     break label$6;
    }
    label$10 : {
     if (!(jsvIsStringEqual(HEAP32[$3 + 160 >> 2], 7630) & 1)) {
      if (!(jsvIsStringEqual(HEAP32[$3 + 160 >> 2], 7632) & 1)) {
       break label$10;
      }
     }
     HEAP8[HEAP32[$3 + 172 >> 2] + 9 | 0] = 2;
    }
    break label$6;
   }
   if (jsvIsInt(HEAP32[$3 + 160 >> 2]) & 1) {
    $0 = jsvGetInteger(HEAP32[$3 + 160 >> 2]);
    HEAP8[HEAP32[$3 + 172 >> 2] + 9 | 0] = $0;
   }
  }
  if (HEAPU8[HEAP32[$3 + 172 >> 2] + 9 | 0] > 2) {
   HEAP32[$3 + 16 >> 2] = HEAPU8[HEAP32[$3 + 172 >> 2] + 9 | 0];
   jsExceptionHere(1, 7637, $3 + 16 | 0);
   HEAP8[$3 + 27 | 0] = 0;
  }
  if (HEAP8[$3 + 27 | 0] & 1) {
   label$15 : {
    label$16 : {
     label$17 : {
      if (jsvIsUndefined(HEAP32[$3 + 156 >> 2]) & 1) {
       break label$17;
      }
      if (jsvIsNull(HEAP32[$3 + 156 >> 2]) & 1) {
       break label$17;
      }
      if (!(jsvIsStringEqual(HEAP32[$3 + 156 >> 2], 7655) & 1)) {
       break label$16;
      }
     }
     HEAP8[HEAP32[$3 + 172 >> 2] + 11 | 0] = 0;
     break label$15;
    }
    label$18 : {
     if (jsvIsStringEqual(HEAP32[$3 + 156 >> 2], 7660) & 1) {
      HEAP8[HEAP32[$3 + 172 >> 2] + 11 | 0] = 1;
      break label$18;
     }
     HEAP32[$3 >> 2] = HEAP32[$3 + 156 >> 2];
     jsExceptionHere(1, 7664, $3);
     HEAP8[$3 + 27 | 0] = 0;
    }
   }
  }
 }
 jsvUnLock(HEAP32[$3 + 160 >> 2]);
 jsvUnLock(HEAP32[$3 + 156 >> 2]);
 global$0 = $3 + 176 | 0;
 return HEAP8[$3 + 27 | 0] & 1;
}
function void_20tflite__reference_ops__MaximumMinimumBroadcast4DSlow_long_20long_2c_20long_20long_20_28__29_28long_20long_2c_20long_20long_29__28tflite__RuntimeShape_20const__2c_20long_20long_20const__2c_20tflite__RuntimeShape_20const__2c_20long_20long_20const__2c_20tflite__RuntimeShape_20const__2c_20long_20long__2c_20long_20long_20_28__29_28long_20long_2c_20long_20long_29_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = global$0 - 176 | 0;
 global$0 = $7;
 HEAP32[$7 + 172 >> 2] = $0;
 HEAP32[$7 + 168 >> 2] = $1;
 HEAP32[$7 + 164 >> 2] = $2;
 HEAP32[$7 + 160 >> 2] = $3;
 HEAP32[$7 + 156 >> 2] = $4;
 HEAP32[$7 + 152 >> 2] = $5;
 HEAP32[$7 + 148 >> 2] = $6;
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$7 + 172 >> 2]) | 0) > 4) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$7 + 164 >> 2]) | 0) > 4) {
   break label$2;
  }
 }
 label$3 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$7 + 156 >> 2]) | 0) > 4) {
   break label$3;
  }
 }
 $0 = $7 + 96 | 0;
 $1 = $7 - -64 | 0;
 tflite__RuntimeShape__ExtendedShape_28int_2c_20tflite__RuntimeShape_20const__29($7 + 128 | 0, 4, HEAP32[$7 + 156 >> 2]);
 void_20tflite__NdArrayDescsForElementwiseBroadcast_4__28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__2c_20tflite__NdArrayDesc_4___2c_20tflite__NdArrayDesc_4___29(HEAP32[$7 + 172 >> 2], HEAP32[$7 + 164 >> 2], $0, $1);
 HEAP32[$7 + 52 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 52 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 128 | 0, 0) | 0)) {
   HEAP32[$7 + 48 >> 2] = 0;
   while (1) {
    if (HEAP32[$7 + 48 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 128 | 0, 1) | 0)) {
     HEAP32[$7 + 44 >> 2] = 0;
     while (1) {
      if (HEAP32[$7 + 44 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 128 | 0, 2) | 0)) {
       HEAP32[$7 + 40 >> 2] = 0;
       while (1) {
        if (HEAP32[$7 + 40 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 128 | 0, 3) | 0)) {
         HEAP32[$7 + 36 >> 2] = tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 128 | 0, HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2], HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2]);
         HEAP32[$7 + 32 >> 2] = tflite__SubscriptToIndex_28tflite__NdArrayDesc_4__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 96 | 0, HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2], HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2]);
         HEAP32[$7 + 28 >> 2] = tflite__SubscriptToIndex_28tflite__NdArrayDesc_4__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 - -64 | 0, HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2], HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2]);
         $0 = HEAP32[$7 + 168 >> 2] + (HEAP32[$7 + 32 >> 2] << 3) | 0;
         $1 = HEAP32[$0 + 4 >> 2];
         HEAP32[$7 + 16 >> 2] = HEAP32[$0 >> 2];
         HEAP32[$7 + 20 >> 2] = $1;
         $0 = HEAP32[$7 + 160 >> 2] + (HEAP32[$7 + 28 >> 2] << 3) | 0;
         $1 = HEAP32[$0 + 4 >> 2];
         HEAP32[$7 + 8 >> 2] = HEAP32[$0 >> 2];
         HEAP32[$7 + 12 >> 2] = $1;
         $0 = FUNCTION_TABLE[HEAP32[$7 + 148 >> 2]](HEAP32[$7 + 16 >> 2], HEAP32[$7 + 20 >> 2], HEAP32[$7 + 8 >> 2], HEAP32[$7 + 12 >> 2]) | 0;
         $1 = HEAP32[$7 + 152 >> 2] + (HEAP32[$7 + 36 >> 2] << 3) | 0;
         HEAP32[$1 >> 2] = $0;
         HEAP32[$1 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
         HEAP32[$7 + 40 >> 2] = HEAP32[$7 + 40 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$7 + 44 >> 2] = HEAP32[$7 + 44 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$7 + 48 >> 2] = HEAP32[$7 + 48 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$7 + 52 >> 2] = HEAP32[$7 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 128 | 0);
 global$0 = $7 + 176 | 0;
}
function tflite__ops__micro__quantize__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 208 | 0;
 global$0 = $2;
 HEAP32[$2 + 200 >> 2] = $0;
 HEAP32[$2 + 196 >> 2] = $1;
 label$1 : {
  if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 196 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 200 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 200 >> 2];
   $3 = tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 196 >> 2]);
   HEAP32[$2 + 20 >> 2] = 1;
   HEAP32[$2 + 16 >> 2] = $3;
   HEAP32[$2 + 12 >> 2] = 43153;
   HEAP32[$2 + 8 >> 2] = 43137;
   HEAP32[$2 + 4 >> 2] = 34;
   HEAP32[$2 >> 2] = 43038;
   FUNCTION_TABLE[$0]($1, 43012, $2);
   HEAP32[$2 + 204 >> 2] = 1;
   break label$1;
  }
  if ((tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 196 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 200 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 200 >> 2];
   $3 = tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 196 >> 2]);
   HEAP32[$2 + 52 >> 2] = 1;
   HEAP32[$2 + 48 >> 2] = $3;
   HEAP32[$2 + 44 >> 2] = 43153;
   HEAP32[$2 + 40 >> 2] = 43155;
   HEAP32[$2 + 36 >> 2] = 35;
   HEAP32[$2 + 32 >> 2] = 43038;
   FUNCTION_TABLE[$0]($1, 43012, $2 + 32 | 0);
   HEAP32[$2 + 204 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 192 >> 2] = HEAP32[HEAP32[$2 + 200 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$2 + 196 >> 2] >> 2] + 4 >> 2], 56);
  HEAP32[$2 + 188 >> 2] = HEAP32[HEAP32[$2 + 200 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$2 + 196 >> 2] + 4 >> 2] + 4 >> 2], 56);
  if (HEAP32[HEAP32[$2 + 188 >> 2] + 48 >> 2] != 1) {
   $0 = HEAP32[HEAP32[$2 + 200 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 200 >> 2];
   $3 = HEAP32[HEAP32[$2 + 188 >> 2] + 48 >> 2];
   HEAP32[$2 + 84 >> 2] = 1;
   HEAP32[$2 + 80 >> 2] = $3;
   HEAP32[$2 + 76 >> 2] = 43198;
   HEAP32[$2 + 72 >> 2] = 43172;
   HEAP32[$2 + 68 >> 2] = 43;
   HEAP32[$2 + 64 >> 2] = 43038;
   FUNCTION_TABLE[$0]($1, 43012, $2 - -64 | 0);
   HEAP32[$2 + 204 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 184 >> 2] = HEAP32[HEAP32[$2 + 188 >> 2] + 52 >> 2];
  if (!HEAP32[$2 + 184 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 200 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 200 >> 2];
   HEAP32[$2 + 168 >> 2] = 43247;
   HEAP32[$2 + 164 >> 2] = 46;
   HEAP32[$2 + 160 >> 2] = 43038;
   FUNCTION_TABLE[$0]($1, 43224, $2 + 160 | 0);
   HEAP32[$2 + 204 >> 2] = 1;
   break label$1;
  }
  if (!HEAP32[HEAP32[$2 + 184 >> 2] >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 200 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 200 >> 2];
   HEAP32[$2 + 152 >> 2] = 43267;
   HEAP32[$2 + 148 >> 2] = 47;
   HEAP32[$2 + 144 >> 2] = 43038;
   FUNCTION_TABLE[$0]($1, 43224, $2 + 144 | 0);
   HEAP32[$2 + 204 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[HEAP32[$2 + 184 >> 2] >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$2 + 200 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 200 >> 2];
   HEAP32[$2 + 136 >> 2] = 43294;
   HEAP32[$2 + 132 >> 2] = 48;
   HEAP32[$2 + 128 >> 2] = 43038;
   FUNCTION_TABLE[$0]($1, 43224, $2 + 128 | 0);
   HEAP32[$2 + 204 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[$2 + 192 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$2 + 200 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 200 >> 2];
   HEAP32[$2 + 120 >> 2] = 43332;
   HEAP32[$2 + 116 >> 2] = 50;
   HEAP32[$2 + 112 >> 2] = 43038;
   FUNCTION_TABLE[$0]($1, 43224, $2 + 112 | 0);
   HEAP32[$2 + 204 >> 2] = 1;
   break label$1;
  }
  if (!(HEAP32[HEAP32[$2 + 188 >> 2] >> 2] == 3 | HEAP32[HEAP32[$2 + 188 >> 2] >> 2] == 9)) {
   $0 = HEAP32[HEAP32[$2 + 200 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 200 >> 2];
   HEAP32[$2 + 104 >> 2] = 43362;
   HEAP32[$2 + 100 >> 2] = 52;
   HEAP32[$2 + 96 >> 2] = 43038;
   FUNCTION_TABLE[$0]($1, 43224, $2 + 96 | 0);
   HEAP32[$2 + 204 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 204 >> 2] = 0;
 }
 global$0 = $2 + 208 | 0;
 return HEAP32[$2 + 204 >> 2];
}
function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$11 : {
           $6 = $1;
           if ($6) {
            $4 = $2;
            if (!$4) {
             break label$11;
            }
            $5 = $3;
            if (!$5) {
             break label$9;
            }
            $4 = Math_clz32($5) - Math_clz32($6) | 0;
            if ($4 >>> 0 <= 31) {
             break label$8;
            }
            break label$2;
           }
           if (($3 | 0) == 1 & $2 >>> 0 >= 0 | $3 >>> 0 > 1) {
            break label$2;
           }
           $1 = ($0 >>> 0) / ($2 >>> 0) | 0;
           legalfunc$wasm2js_scratch_store_i64($0 - Math_imul($1, $2) | 0, 0);
           i64toi32_i32$HIGH_BITS = 0;
           return $1;
          }
          $4 = $3;
          if (!$0) {
           break label$7;
          }
          if (!$4) {
           break label$6;
          }
          $5 = $4 + -1 | 0;
          if ($5 & $4) {
           break label$6;
          }
          legalfunc$wasm2js_scratch_store_i64($0, $6 & $5);
          $0 = $6 >>> (__wasm_ctz_i32($4) & 31);
          i64toi32_i32$HIGH_BITS = 0;
          return $0;
         }
         $5 = $4 + -1 | 0;
         if (!($5 & $4)) {
          break label$5;
         }
         $8 = (Math_clz32($4) + 33 | 0) - Math_clz32($6) | 0;
         $9 = 0 - $8 | 0;
         break label$3;
        }
        $8 = $4 + 1 | 0;
        $9 = 63 - $4 | 0;
        break label$3;
       }
       $0 = ($6 >>> 0) / ($4 >>> 0) | 0;
       legalfunc$wasm2js_scratch_store_i64(0, $6 - Math_imul($0, $4) | 0);
       i64toi32_i32$HIGH_BITS = 0;
       return $0;
      }
      $4 = Math_clz32($4) - Math_clz32($6) | 0;
      if ($4 >>> 0 < 31) {
       break label$4;
      }
      break label$2;
     }
     legalfunc$wasm2js_scratch_store_i64($0 & $5, 0);
     if (($4 | 0) == 1) {
      break label$1;
     }
     $2 = __wasm_ctz_i32($4);
     $3 = $0;
     $0 = $2 & 31;
     if (32 <= ($2 & 63) >>> 0) {
      $4 = 0;
      $0 = $1 >>> $0;
     } else {
      $4 = $1 >>> $0;
      $0 = ((1 << $0) - 1 & $1) << 32 - $0 | $3 >>> $0;
     }
     i64toi32_i32$HIGH_BITS = $4;
     return $0;
    }
    $8 = $4 + 1 | 0;
    $9 = 63 - $4 | 0;
   }
   $5 = $1;
   $12 = $0;
   $4 = $8 & 63;
   $6 = $4 & 31;
   if (32 <= ($4 & 63) >>> 0) {
    $4 = 0;
    $7 = $5 >>> $6;
   } else {
    $4 = $5 >>> $6;
    $7 = ((1 << $6) - 1 & $5) << 32 - $6 | $12 >>> $6;
   }
   $5 = $4;
   $6 = $0;
   $4 = $9 & 63;
   $0 = $4 & 31;
   if (32 <= ($4 & 63) >>> 0) {
    $4 = $6 << $0;
    $0 = 0;
   } else {
    $4 = (1 << $0) - 1 & $6 >>> 32 - $0 | $1 << $0;
    $0 = $6 << $0;
   }
   $1 = $4;
   if ($8) {
    $4 = $3 + -1 | 0;
    $6 = $2 + -1 | 0;
    if ($6 >>> 0 < 4294967295) {
     $4 = $4 + 1 | 0;
    }
    $9 = $4;
    while (1) {
     $4 = $5 << 1 | $7 >>> 31;
     $5 = $7 << 1;
     $12 = $4;
     $5 = $1 >>> 31 | $5;
     $11 = $5;
     $7 = $9 - (($6 >>> 0 < $5 >>> 0) + $4 | 0) | 0;
     $4 = $7 >> 31;
     $10 = $7 >> 31;
     $5 = $2 & $10;
     $7 = $11 - $5 | 0;
     $5 = $12 - (($3 & $4) + ($11 >>> 0 < $5 >>> 0) | 0) | 0;
     $4 = $1 << 1 | $0 >>> 31;
     $0 = $13 | $0 << 1;
     $1 = $4 | $14;
     $11 = 0;
     $10 = $10 & 1;
     $13 = $10;
     $8 = $8 + -1 | 0;
     if ($8) {
      continue;
     }
     break;
    }
   }
   legalfunc$wasm2js_scratch_store_i64($7, $5);
   $4 = $1 << 1 | $0 >>> 31;
   $0 = $10 | $0 << 1;
   i64toi32_i32$HIGH_BITS = $4 | $11;
   return $0;
  }
  legalfunc$wasm2js_scratch_store_i64($0, $1);
  $0 = 0;
  $1 = 0;
 }
 i64toi32_i32$HIGH_BITS = $1;
 return $0;
}
function jsfWriteFile($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $6 = global$0 - 128 | 0;
 $5 = $6;
 global$0 = $5;
 HEAP32[$5 + 120 >> 2] = $1;
 HEAP32[$5 + 116 >> 2] = $2;
 HEAP32[$5 + 112 >> 2] = $3;
 HEAP32[$5 + 108 >> 2] = $4;
 label$1 : {
  if (!(HEAP32[$5 + 108 >> 2] >= 0 ? HEAP32[$5 + 112 >> 2] >= 0 : 0)) {
   HEAP8[$5 + 127 | 0] = 0;
   break label$1;
  }
  HEAP32[$5 + 104 >> 2] = HEAP32[$5 + 108 >> 2];
  HEAP32[$5 + 100 >> 2] = 0;
  HEAP32[$5 + 96 >> 2] = jsvGetDataPointer(HEAP32[$5 + 120 >> 2], $5 + 100 | 0);
  if (!HEAP32[$5 + 96 >> 2]) {
   HEAP32[$5 + 100 >> 2] = jsvIterateCallbackCount(HEAP32[$5 + 120 >> 2]);
   label$5 : {
    if (HEAP32[$5 + 100 >> 2] + 256 >>> 0 > 1e6) {
     jsExceptionHere(1, 1947, 0);
     break label$5;
    }
    $1 = $6 - (HEAP32[$5 + 100 >> 2] + 15 & -16) | 0;
    global$0 = $1;
    HEAP32[$5 + 96 >> 2] = $1;
    jsvIterateCallbackToBytes(HEAP32[$5 + 120 >> 2], HEAP32[$5 + 96 >> 2], HEAP32[$5 + 100 >> 2]);
   }
  }
  if (!HEAP32[$5 + 96 >> 2]) {
   HEAP8[$5 + 127 | 0] = 0;
   break label$1;
  }
  if (!HEAP32[$5 + 104 >> 2]) {
   HEAP32[$5 + 104 >> 2] = HEAP32[$5 + 100 >> 2];
  }
  HEAP32[$5 + 56 >> 2] = HEAP32[$0 + 24 >> 2];
  $2 = HEAP32[$0 + 20 >> 2];
  HEAP32[$5 + 48 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$5 + 52 >> 2] = $2;
  $2 = HEAP32[$0 + 12 >> 2];
  HEAP32[$5 + 40 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$5 + 44 >> 2] = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$5 + 32 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$5 + 36 >> 2] = $2;
  HEAP32[$5 + 60 >> 2] = jsfFindFile($5 + 32 | 0, $5 - -64 | 0);
  label$9 : {
   label$10 : {
    if (HEAP32[$5 + 112 >> 2] ? 0 : !HEAP32[$5 + 60 >> 2]) {
     break label$10;
    }
    if (HEAP32[$5 + 112 >> 2] | !HEAP32[$5 + 60 >> 2]) {
     break label$9;
    }
    if (HEAP32[$5 + 116 >> 2] != (jsfGetFileFlags($5 - -64 | 0) | 0)) {
     break label$10;
    }
    if (HEAP32[$5 + 104 >> 2] != (jsfGetFileSize($5 - -64 | 0) | 0)) {
     break label$10;
    }
    if (jsfIsErased(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 104 >> 2]) & 1) {
     break label$9;
    }
   }
   label$12 : {
    if (HEAP32[$5 + 112 >> 2] | !HEAP32[$5 + 60 >> 2]) {
     break label$12;
    }
    if (HEAP32[$5 + 104 >> 2] != (jsfGetFileSize($5 - -64 | 0) | 0)) {
     break label$12;
    }
    if (HEAP32[$5 + 116 >> 2] != (jsfGetFileFlags($5 - -64 | 0) | 0) | HEAP32[$5 + 100 >> 2] != HEAP32[$5 + 104 >> 2]) {
     break label$12;
    }
    if (!(jsfIsEqual(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 96 >> 2], HEAP32[$5 + 100 >> 2]) & 1)) {
     break label$12;
    }
    HEAP8[$5 + 127 | 0] = 1;
    break label$1;
   }
   if (HEAP32[$5 + 60 >> 2]) {
    jsfEraseFileInternal(HEAP32[$5 + 60 >> 2], $5 - -64 | 0);
   }
   $1 = HEAP32[$5 + 104 >> 2];
   $2 = HEAP32[$5 + 116 >> 2];
   HEAP32[$5 + 24 >> 2] = HEAP32[$0 + 24 >> 2];
   $3 = HEAP32[$0 + 20 >> 2];
   HEAP32[$5 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
   HEAP32[$5 + 20 >> 2] = $3;
   $3 = HEAP32[$0 + 12 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
   HEAP32[$5 + 12 >> 2] = $3;
   $3 = HEAP32[$0 + 4 >> 2];
   HEAP32[$5 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$5 + 4 >> 2] = $3;
   HEAP32[$5 + 60 >> 2] = jsfCreateFile($5, $1, $2, $5 - -64 | 0);
  }
  if (!HEAP32[$5 + 60 >> 2]) {
   jsExceptionHere(1, 1986, 0);
   HEAP8[$5 + 127 | 0] = 0;
   break label$1;
  }
  if (HEAP32[$5 + 112 >> 2] + HEAP32[$5 + 100 >> 2] >>> 0 > jsfGetFileSize($5 - -64 | 0) >>> 0) {
   jsExceptionHere(1, 2016, 0);
   HEAP8[$5 + 127 | 0] = 0;
   break label$1;
  }
  HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 112 >> 2] + HEAP32[$5 + 60 >> 2];
  if (!(jsfIsErased(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 100 >> 2]) & 1)) {
   jsExceptionHere(1, 2044, 0);
   HEAP8[$5 + 127 | 0] = 0;
   break label$1;
  }
  jshFlashWriteAligned(HEAP32[$5 + 96 >> 2], HEAP32[$5 + 60 >> 2], HEAP32[$5 + 100 >> 2]);
  HEAP8[$5 + 127 | 0] = 1;
 }
 global$0 = $5 + 128 | 0;
 return HEAP8[$5 + 127 | 0] & 1;
}
function jswrap_string_split($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 label$1 : {
  if (!(jsvIsString(HEAP32[$2 + 56 >> 2]) & 1)) {
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 48 >> 2] = jsvNewWithFlags(3);
  if (!HEAP32[$2 + 48 >> 2]) {
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  if (jsvIsUndefined(HEAP32[$2 + 52 >> 2]) & 1) {
   jsvArrayPush(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 56 >> 2]);
   HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
   break label$1;
  }
  if (jsvIsInstanceOf(HEAP32[$2 + 52 >> 2]) & 1) {
   HEAP32[$2 + 44 >> 2] = 0;
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 52 >> 2], 37412, jsvNewFromInteger(0));
   HEAP32[$2 + 40 >> 2] = jswrap_regexp_exec(HEAP32[$2 + 52 >> 2], HEAP32[$2 + 56 >> 2]);
   while (1) {
    if (HEAP32[$2 + 40 >> 2]) {
     $0 = jsvIsNull(HEAP32[$2 + 40 >> 2]) ^ -1;
    } else {
     $0 = 0;
    }
    if ($0 & 1) {
     HEAP32[$2 + 36 >> 2] = jsvGetArrayItem(HEAP32[$2 + 40 >> 2], 0);
     HEAP32[$2 + 32 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$2 + 40 >> 2], 37422, 0));
     HEAP32[$2 + 28 >> 2] = jsvGetStringLength(HEAP32[$2 + 36 >> 2]);
     jsvUnLock(HEAP32[$2 + 36 >> 2]);
     jsvArrayPushAndUnLock(HEAP32[$2 + 48 >> 2], jsvNewFromStringVar(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 44 >> 2], HEAP32[$2 + 32 >> 2] - HEAP32[$2 + 44 >> 2] | 0));
     HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2] + HEAP32[$2 + 28 >> 2];
     jsvUnLock(HEAP32[$2 + 40 >> 2]);
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 52 >> 2], 37412, jsvNewFromInteger(HEAP32[$2 + 44 >> 2]));
     HEAP32[$2 + 40 >> 2] = jswrap_regexp_exec(HEAP32[$2 + 52 >> 2], HEAP32[$2 + 56 >> 2]);
     continue;
    }
    break;
   }
   jsvUnLock(HEAP32[$2 + 40 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 52 >> 2], 37412, jsvNewFromInteger(0));
   if (HEAPU32[$2 + 44 >> 2] <= jsvGetStringLength(HEAP32[$2 + 56 >> 2]) >>> 0) {
    jsvArrayPushAndUnLock(HEAP32[$2 + 48 >> 2], jsvNewFromStringVar(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 44 >> 2], 2147483647));
   }
   HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
   break label$1;
  }
  HEAP32[$2 + 52 >> 2] = jsvAsString(HEAP32[$2 + 52 >> 2]);
  HEAP32[$2 + 20 >> 2] = 0;
  $1 = $2;
  $0 = jsvIsUndefined(HEAP32[$2 + 52 >> 2]) & 1;
  $3 = 0;
  label$11 : {
   if ($0) {
    break label$11;
   }
   $3 = jsvGetStringLength(HEAP32[$2 + 52 >> 2]);
  }
  HEAP32[$1 + 16 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = (jsvGetStringLength(HEAP32[$2 + 56 >> 2]) + 1 | 0) - HEAP32[$2 + 16 >> 2];
  HEAP32[$2 + 24 >> 2] = 0;
  while (1) {
   label$13 : {
    if (HEAP32[$2 + 24 >> 2] > HEAP32[$2 + 12 >> 2]) {
     break label$13;
    }
    if (HEAP32[$2 + 16 >> 2] | HEAP32[$2 + 24 >> 2]) {
     label$16 : {
      if (!(!HEAP32[$2 + 16 >> 2] | HEAP32[$2 + 24 >> 2] == HEAP32[$2 + 12 >> 2])) {
       if (jsvCompareString(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], HEAP32[$2 + 24 >> 2], 1)) {
        break label$16;
       }
      }
      if (HEAP32[$2 + 24 >> 2] == HEAP32[$2 + 12 >> 2]) {
       HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 16 >> 2];
       if (!HEAP32[$2 + 16 >> 2]) {
        break label$13;
       }
      }
      HEAP32[$2 + 8 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 24 >> 2] - HEAP32[$2 + 20 >> 2] | 0);
      if (!HEAP32[$2 + 8 >> 2]) {
       break label$13;
      }
      jsvArrayPush(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 8 >> 2]);
      jsvUnLock(HEAP32[$2 + 8 >> 2]);
      HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 24 >> 2] + HEAP32[$2 + 16 >> 2];
     }
    }
    HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] + 1;
    continue;
   }
   break;
  }
  jsvUnLock(HEAP32[$2 + 52 >> 2]);
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
 }
 global$0 = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}
function stringToFloatWithRadix($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 + -64 | 0;
 global$0 = $3;
 HEAP32[$3 + 52 >> 2] = $0;
 HEAP32[$3 + 48 >> 2] = $1;
 HEAP32[$3 + 44 >> 2] = $2;
 while (1) {
  if (isWhitespace(HEAP8[HEAP32[$3 + 52 >> 2]]) & 1) {
   HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP8[$3 + 43 | 0] = 0;
 label$3 : {
  if (HEAP8[HEAP32[$3 + 52 >> 2]] == 45) {
   HEAP8[$3 + 43 | 0] = 1;
   HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
   break label$3;
  }
  if (HEAP8[HEAP32[$3 + 52 >> 2]] == 43) {
   HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
  }
 }
 HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 52 >> 2];
 if (HEAP32[$3 + 44 >> 2]) {
  HEAP32[HEAP32[$3 + 44 >> 2] >> 2] = HEAP32[$3 + 52 >> 2];
 }
 $0 = $3;
 if (HEAP32[$3 + 48 >> 2]) {
  $1 = HEAP32[$3 + 48 >> 2];
 } else {
  $1 = getRadix($3 + 52 | 0, 0);
 }
 HEAP32[$0 + 32 >> 2] = $1;
 label$9 : {
  if (!HEAP32[$3 + 32 >> 2]) {
   HEAPF64[$3 + 56 >> 3] = nan;
   break label$9;
  }
  HEAPF64[$3 + 24 >> 3] = 0;
  HEAPF64[$3 + 16 >> 3] = .1;
  while (1) {
   label$12 : {
    if (!HEAPU8[HEAP32[$3 + 52 >> 2]]) {
     break label$12;
    }
    HEAP32[$3 + 12 >> 2] = chtod(HEAP8[HEAP32[$3 + 52 >> 2]]);
    if (HEAP32[$3 + 12 >> 2] < 0 | HEAP32[$3 + 12 >> 2] >= HEAP32[$3 + 32 >> 2]) {
     break label$12;
    }
    HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 24 >> 3] * +HEAP32[$3 + 32 >> 2] + +HEAP32[$3 + 12 >> 2];
    HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$3 + 32 >> 2] == 10) {
   if (HEAP8[HEAP32[$3 + 52 >> 2]] == 46) {
    HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
    while (1) {
     if (!(!HEAPU8[HEAP32[$3 + 52 >> 2]] | HEAP8[HEAP32[$3 + 52 >> 2]] < 48 | HEAP8[HEAP32[$3 + 52 >> 2]] > 57)) {
      HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 24 >> 3] + HEAPF64[$3 + 16 >> 3] * +(HEAP8[HEAP32[$3 + 52 >> 2]] - 48 | 0);
      HEAPF64[$3 + 16 >> 3] = HEAPF64[$3 + 16 >> 3] / 10;
      HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
      continue;
     }
     break;
    }
   }
   if (!(HEAP8[HEAP32[$3 + 52 >> 2]] != 69 ? HEAP8[HEAP32[$3 + 52 >> 2]] != 101 : 0)) {
    HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
    HEAP8[$3 + 11 | 0] = 0;
    if (!(HEAP8[HEAP32[$3 + 52 >> 2]] != 43 ? HEAP8[HEAP32[$3 + 52 >> 2]] != 45 : 0)) {
     HEAP8[$3 + 11 | 0] = HEAP8[HEAP32[$3 + 52 >> 2]] == 45;
     HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
    }
    HEAP32[$3 + 4 >> 2] = 0;
    while (1) {
     if (!(!HEAPU8[HEAP32[$3 + 52 >> 2]] | HEAP8[HEAP32[$3 + 52 >> 2]] < 48 | HEAP8[HEAP32[$3 + 52 >> 2]] > 57)) {
      HEAP32[$3 + 4 >> 2] = (HEAP8[HEAP32[$3 + 52 >> 2]] - 48 | 0) + Math_imul(HEAP32[$3 + 4 >> 2], 10);
      HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
      continue;
     }
     break;
    }
    if (HEAP8[$3 + 11 | 0] & 1) {
     HEAP32[$3 + 4 >> 2] = 0 - HEAP32[$3 + 4 >> 2];
    }
    while (1) {
     if (HEAP32[$3 + 4 >> 2] > 0) {
      HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 24 >> 3] * 10;
      HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + -1;
      continue;
     }
     break;
    }
    while (1) {
     if (HEAP32[$3 + 4 >> 2] < 0) {
      HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 24 >> 3] / 10;
      HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
      continue;
     }
     break;
    }
   }
  }
  if (HEAP32[$3 + 44 >> 2]) {
   HEAP32[HEAP32[$3 + 44 >> 2] >> 2] = HEAP32[$3 + 52 >> 2];
  }
  if (!(HEAP8[HEAP32[$3 + 36 >> 2]] != 46 | HEAP32[$3 + 52 >> 2] != (HEAP32[$3 + 36 >> 2] + 1 | 0) ? HEAP32[$3 + 36 >> 2] != HEAP32[$3 + 52 >> 2] : 0)) {
   HEAPF64[$3 + 56 >> 3] = nan;
   break label$9;
  }
  if (HEAP8[$3 + 43 | 0] & 1) {
   HEAPF64[$3 + 56 >> 3] = -HEAPF64[$3 + 24 >> 3];
   break label$9;
  }
  HEAPF64[$3 + 56 >> 3] = HEAPF64[$3 + 24 >> 3];
 }
 global$0 = $3 - -64 | 0;
 return HEAPF64[$3 + 56 >> 3];
}
function _jswrap_drawImageLayerInit($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 HEAP32[HEAP32[$1 + 44 >> 2] + 112 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 36 >> 2] << 8;
 HEAP32[HEAP32[$1 + 44 >> 2] + 116 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 40 >> 2] << 8;
 HEAPF64[$1 + 32 >> 3] = cos(HEAPF64[HEAP32[$1 + 44 >> 2] + 16 >> 3]);
 HEAPF64[$1 + 24 >> 3] = sin(HEAPF64[HEAP32[$1 + 44 >> 2] + 16 >> 3]);
 $0 = HEAP32[$1 + 44 >> 2];
 $2 = HEAPF64[$1 + 32 >> 3] / HEAPF64[HEAP32[$1 + 44 >> 2] + 24 >> 3] * 256 + .5;
 label$1 : {
  if (Math_abs($2) < 2147483648) {
   $3 = ~~$2;
   break label$1;
  }
  $3 = -2147483648;
 }
 HEAP32[$0 + 120 >> 2] = $3;
 $0 = HEAP32[$1 + 44 >> 2];
 $2 = HEAPF64[$1 + 24 >> 3] / HEAPF64[HEAP32[$1 + 44 >> 2] + 24 >> 3] * 256 + .5;
 label$3 : {
  if (Math_abs($2) < 2147483648) {
   $3 = ~~$2;
   break label$3;
  }
  $3 = -2147483648;
 }
 HEAP32[$0 + 124 >> 2] = $3;
 $0 = $1;
 $2 = .5 + HEAPF64[HEAP32[$1 + 44 >> 2] + 24 >> 3] * (+HEAP32[HEAP32[$1 + 44 >> 2] + 36 >> 2] * Math_abs(HEAPF64[$1 + 32 >> 3]) + +HEAP32[HEAP32[$1 + 44 >> 2] + 40 >> 2] * Math_abs(HEAPF64[$1 + 24 >> 3]));
 label$5 : {
  if (Math_abs($2) < 2147483648) {
   $3 = ~~$2;
   break label$5;
  }
  $3 = -2147483648;
 }
 HEAP32[$0 + 20 >> 2] = $3;
 $0 = $1;
 $2 = .5 + HEAPF64[HEAP32[$1 + 44 >> 2] + 24 >> 3] * (+HEAP32[HEAP32[$1 + 44 >> 2] + 36 >> 2] * Math_abs(HEAPF64[$1 + 24 >> 3]) + +HEAP32[HEAP32[$1 + 44 >> 2] + 40 >> 2] * Math_abs(HEAPF64[$1 + 32 >> 3]));
 label$7 : {
  if (Math_abs($2) < 2147483648) {
   $3 = ~~$2;
   break label$7;
  }
  $3 = -2147483648;
 }
 HEAP32[$0 + 16 >> 2] = $3;
 if (HEAP8[HEAP32[$1 + 44 >> 2] + 32 | 0] & 1) {
  $0 = HEAP32[$1 + 44 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] - (HEAP32[$1 + 20 >> 2] / 2 | 0);
  $0 = HEAP32[$1 + 44 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - (HEAP32[$1 + 16 >> 2] / 2 | 0);
 }
 HEAP32[HEAP32[$1 + 44 >> 2] + 8 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] >> 2] + HEAP32[$1 + 20 >> 2];
 HEAP32[HEAP32[$1 + 44 >> 2] + 12 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 4 >> 2] + HEAP32[$1 + 16 >> 2];
 HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 36 >> 2] << 7;
 HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 40 >> 2] << 7;
 HEAP32[HEAP32[$1 + 44 >> 2] + 128 >> 2] = HEAP32[$1 + 12 >> 2] - (((Math_imul(HEAP32[HEAP32[$1 + 44 >> 2] + 120 >> 2], HEAP32[$1 + 20 >> 2]) + 1 | 0) + Math_imul(HEAP32[HEAP32[$1 + 44 >> 2] + 124 >> 2], HEAP32[$1 + 16 >> 2]) | 0) / 2 | 0);
 HEAP32[HEAP32[$1 + 44 >> 2] + 132 >> 2] = HEAP32[$1 + 8 >> 2] - (((Math_imul(HEAP32[HEAP32[$1 + 44 >> 2] + 120 >> 2], HEAP32[$1 + 16 >> 2]) + 1 | 0) - Math_imul(HEAP32[HEAP32[$1 + 44 >> 2] + 124 >> 2], HEAP32[$1 + 20 >> 2]) | 0) / 2 | 0);
 if (HEAP8[HEAP32[$1 + 44 >> 2] + 33 | 0] & 1) {
  while (1) {
   if (HEAP32[HEAP32[$1 + 44 >> 2] + 128 >> 2] < 0) {
    $0 = HEAP32[$1 + 44 >> 2];
    HEAP32[$0 + 128 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 112 >> 2] + HEAP32[$0 + 128 >> 2];
    continue;
   }
   break;
  }
  while (1) {
   if (HEAP32[HEAP32[$1 + 44 >> 2] + 128 >> 2] >= HEAP32[HEAP32[$1 + 44 >> 2] + 112 >> 2]) {
    $0 = HEAP32[$1 + 44 >> 2];
    HEAP32[$0 + 128 >> 2] = HEAP32[$0 + 128 >> 2] - HEAP32[HEAP32[$1 + 44 >> 2] + 112 >> 2];
    continue;
   }
   break;
  }
  while (1) {
   if (HEAP32[HEAP32[$1 + 44 >> 2] + 132 >> 2] < 0) {
    $0 = HEAP32[$1 + 44 >> 2];
    HEAP32[$0 + 132 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 116 >> 2] + HEAP32[$0 + 132 >> 2];
    continue;
   }
   break;
  }
  while (1) {
   if (HEAP32[HEAP32[$1 + 44 >> 2] + 132 >> 2] >= HEAP32[HEAP32[$1 + 44 >> 2] + 116 >> 2]) {
    $0 = HEAP32[$1 + 44 >> 2];
    HEAP32[$0 + 132 >> 2] = HEAP32[$0 + 132 >> 2] - HEAP32[HEAP32[$1 + 44 >> 2] + 116 >> 2];
    continue;
   }
   break;
  }
 }
 global$0 = $1 + 48 | 0;
}
function tflite__ops__micro__conv__CalculateOpData_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLiteType_2c_20tflite__ops__micro__conv__OpData__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0;
 $11 = global$0 - 144 | 0;
 global$0 = $11;
 HEAP32[$11 + 136 >> 2] = $0;
 HEAP32[$11 + 132 >> 2] = $1;
 HEAP32[$11 + 128 >> 2] = $2;
 HEAP32[$11 + 124 >> 2] = $3;
 HEAP32[$11 + 120 >> 2] = $4;
 HEAP32[$11 + 116 >> 2] = $5;
 HEAP32[$11 + 112 >> 2] = $6;
 HEAP32[$11 + 108 >> 2] = $7;
 HEAP32[$11 + 104 >> 2] = $8;
 HEAP32[$11 + 100 >> 2] = $9;
 HEAP32[$11 + 96 >> 2] = $10;
 HEAP8[$11 + 95 | 0] = HEAP32[HEAP32[HEAP32[$11 + 132 >> 2] >> 2] >> 2] == 3;
 label$1 : {
  if (!(HEAP8[$11 + 95 | 0] & 1 | HEAP32[HEAP32[HEAP32[$11 + 132 >> 2] >> 2] >> 2] == 2)) {
   $0 = HEAP32[HEAP32[$11 + 136 >> 2] + 20 >> 2];
   $1 = HEAP32[$11 + 136 >> 2];
   HEAP32[$11 + 40 >> 2] = 43936;
   HEAP32[$11 + 36 >> 2] = 79;
   HEAP32[$11 + 32 >> 2] = 43841;
   FUNCTION_TABLE[$0]($1, 43818, $11 + 32 | 0);
   HEAP32[$11 + 140 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[HEAP32[$11 + 132 >> 2] + 4 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$11 + 136 >> 2] + 20 >> 2];
   $1 = HEAP32[$11 + 136 >> 2];
   $2 = HEAP32[HEAP32[HEAP32[$11 + 132 >> 2] + 4 >> 2] >> 2];
   HEAP32[$11 + 20 >> 2] = 1;
   HEAP32[$11 + 16 >> 2] = $2;
   HEAP32[$11 + 12 >> 2] = 44018;
   HEAP32[$11 + 8 >> 2] = 43998;
   HEAP32[$11 + 4 >> 2] = 80;
   HEAP32[$11 >> 2] = 43841;
   FUNCTION_TABLE[$0]($1, 43972, $11);
   HEAP32[$11 + 140 >> 2] = 1;
   break label$1;
  }
  HEAP32[$11 + 88 >> 2] = HEAP32[HEAP32[$11 + 128 >> 2] >> 2];
  $0 = $11 + 72 | 0;
  tflite__ComputePaddingHeightWidth_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLitePadding_2c_20int__2c_20int__29($0, HEAP32[HEAP32[$11 + 128 >> 2] + 8 >> 2], HEAP32[HEAP32[$11 + 128 >> 2] + 4 >> 2], HEAP32[HEAP32[$11 + 128 >> 2] + 16 >> 2], HEAP32[HEAP32[$11 + 128 >> 2] + 12 >> 2], HEAP32[$11 + 120 >> 2], HEAP32[$11 + 124 >> 2], HEAP32[$11 + 112 >> 2], HEAP32[$11 + 116 >> 2], HEAP32[$11 + 88 >> 2], $11 + 104 | 0, $11 + 108 | 0);
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$11 + 96 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $2 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  if (HEAP32[$11 + 100 >> 2] != 1) {
   HEAP32[$11 + 68 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$11 + 136 >> 2], HEAP32[$11 + 132 >> 2], 0);
   HEAP32[$11 + 64 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$11 + 136 >> 2], HEAP32[$11 + 132 >> 2], 1);
   HEAP32[$11 + 60 >> 2] = tflite__GetOptionalInputTensor_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$11 + 136 >> 2], HEAP32[$11 + 132 >> 2], 2);
   HEAP32[$11 + 56 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$11 + 136 >> 2], HEAP32[$11 + 132 >> 2]);
   if (tflite__PopulateConvolutionQuantizationParams_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteFusedActivation_20const__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int__29(HEAP32[$11 + 136 >> 2], HEAP32[$11 + 68 >> 2], HEAP32[$11 + 64 >> 2], HEAP32[$11 + 60 >> 2], HEAP32[$11 + 56 >> 2], HEAP32[$11 + 128 >> 2] + 20 | 0, HEAP32[$11 + 96 >> 2] + 16 | 0, HEAP32[$11 + 96 >> 2] + 20 | 0, HEAP32[$11 + 96 >> 2] + 536 | 0, HEAP32[$11 + 96 >> 2] + 540 | 0, HEAP32[$11 + 96 >> 2] + 24 | 0, HEAP32[$11 + 96 >> 2] + 280 | 0)) {
    HEAP32[$11 + 140 >> 2] = 1;
    break label$1;
   }
  }
  HEAP32[$11 + 140 >> 2] = 0;
 }
 global$0 = $11 + 144 | 0;
 return HEAP32[$11 + 140 >> 2];
}
function graphicsDrawEllipse($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = global$0 + -64 | 0;
 global$0 = $5;
 $6 = $5 + 48 | 0;
 $7 = $5 + 44 | 0;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 graphicsToDeviceCoordinates(HEAP32[$5 + 60 >> 2], $5 + 56 | 0, $5 + 52 | 0);
 graphicsToDeviceCoordinates(HEAP32[$5 + 60 >> 2], $6, $7);
 HEAP32[$5 + 40 >> 2] = (HEAP32[$5 + 56 >> 2] + HEAP32[$5 + 48 >> 2] | 0) / 2;
 HEAP32[$5 + 36 >> 2] = (HEAP32[$5 + 52 >> 2] + HEAP32[$5 + 44 >> 2] | 0) / 2;
 HEAP32[$5 + 32 >> 2] = (HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 56 >> 2] | 0) / 2;
 HEAP32[$5 + 28 >> 2] = (HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 52 >> 2] | 0) / 2;
 HEAP32[$5 + 24 >> 2] = 0;
 HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 28 >> 2];
 HEAP32[$5 + 16 >> 2] = Math_imul(HEAP32[$5 + 32 >> 2], HEAP32[$5 + 32 >> 2]);
 HEAP32[$5 + 12 >> 2] = Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 28 >> 2]);
 HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 12 >> 2] - Math_imul(HEAP32[$5 + 16 >> 2], (HEAP32[$5 + 28 >> 2] << 1) - 1 | 0);
 HEAP8[$5 + 3 | 0] = 0;
 while (1) {
  HEAP8[$5 + 3 | 0] = 0;
  $0 = HEAP32[$5 + 60 >> 2];
  graphicsSetPixelDevice(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 40 >> 2] + HEAP32[$5 + 24 >> 2] | 0, HEAP32[$5 + 36 >> 2] + HEAP32[$5 + 20 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
  $0 = HEAP32[$5 + 60 >> 2];
  graphicsSetPixelDevice(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 40 >> 2] - HEAP32[$5 + 24 >> 2] | 0, HEAP32[$5 + 36 >> 2] + HEAP32[$5 + 20 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
  $0 = HEAP32[$5 + 60 >> 2];
  graphicsSetPixelDevice(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 40 >> 2] + HEAP32[$5 + 24 >> 2] | 0, HEAP32[$5 + 36 >> 2] - HEAP32[$5 + 20 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
  $0 = HEAP32[$5 + 60 >> 2];
  graphicsSetPixelDevice(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 40 >> 2] - HEAP32[$5 + 24 >> 2] | 0, HEAP32[$5 + 36 >> 2] - HEAP32[$5 + 20 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
  HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 8 >> 2] << 1;
  if (HEAP32[$5 + 4 >> 2] < (Math_imul(HEAP32[$5 + 12 >> 2], (HEAP32[$5 + 24 >> 2] << 1) + 1 | 0) | 0)) {
   HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 24 >> 2] + 1;
   HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + Math_imul(HEAP32[$5 + 12 >> 2], (HEAP32[$5 + 24 >> 2] << 1) + 1 | 0);
   HEAP8[$5 + 3 | 0] = 1;
  }
  if (HEAP32[$5 + 4 >> 2] > (Math_imul(HEAP32[$5 + 16 >> 2], 0 - ((HEAP32[$5 + 20 >> 2] << 1) - 1 | 0) | 0) | 0)) {
   HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + -1;
   HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] - Math_imul(HEAP32[$5 + 16 >> 2], (HEAP32[$5 + 20 >> 2] << 1) - 1 | 0);
   HEAP8[$5 + 3 | 0] = 1;
  }
  if (HEAP8[$5 + 3 | 0] & 1 ? HEAP32[$5 + 20 >> 2] >= 0 : 0) {
   continue;
  }
  break;
 }
 while (1) {
  label$7 : {
   $0 = HEAP32[$5 + 24 >> 2];
   HEAP32[$5 + 24 >> 2] = $0 + 1;
   if (($0 | 0) >= HEAP32[$5 + 32 >> 2]) {
    break label$7;
   }
   $0 = HEAP32[$5 + 60 >> 2];
   graphicsSetPixelDevice(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 40 >> 2] + HEAP32[$5 + 24 >> 2] | 0, HEAP32[$5 + 36 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
   $0 = HEAP32[$5 + 60 >> 2];
   graphicsSetPixelDevice(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 40 >> 2] - HEAP32[$5 + 24 >> 2] | 0, HEAP32[$5 + 36 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
   continue;
  }
  break;
 }
 global$0 = $5 - -64 | 0;
}
function jswrap_function_bind($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 80 | 0;
 global$0 = $3;
 HEAP32[$3 + 72 >> 2] = $0;
 HEAP32[$3 + 68 >> 2] = $1;
 HEAP32[$3 + 64 >> 2] = $2;
 label$1 : {
  if (!(jsvIsFunction(HEAP32[$3 + 72 >> 2]) & 1)) {
   HEAP32[$3 >> 2] = HEAP32[$3 + 72 >> 2];
   jsExceptionHere(3, 35785, $3);
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  label$3 : {
   if (jsvIsNativeFunction(HEAP32[$3 + 72 >> 2]) & 1) {
    HEAP32[$3 + 60 >> 2] = jsvNewNativeFunction(HEAP32[HEAP32[$3 + 72 >> 2] >> 2], HEAPU16[HEAP32[$3 + 72 >> 2] + 4 >> 1]);
    break label$3;
   }
   HEAP32[$3 + 60 >> 2] = jsvNewWithFlags((jsvIsFunctionReturn(HEAP32[$3 + 72 >> 2]) & 1 ? 8 : 7) & 65535);
  }
  if (!HEAP32[$3 + 60 >> 2]) {
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($3 + 56 | 0, HEAP32[$3 + 72 >> 2]);
  while (1) {
   label$7 : {
    if (!(jsvObjectIteratorHasValue($3 + 56 | 0) & 1)) {
     break label$7;
    }
    $0 = $3 + 56 | 0;
    HEAP32[$3 + 52 >> 2] = jsvObjectIteratorGetKey($0);
    HEAP32[$3 + 48 >> 2] = jsvObjectIteratorGetValue($0);
    $1 = jsvIsFunctionParameter(HEAP32[$3 + 52 >> 2]) & 1;
    HEAP8[$3 + 47 | 0] = $1 ? HEAP32[$3 + 48 >> 2] != 0 : 0;
    if (HEAP8[$3 + 47 | 0] & 1) {
     HEAP32[$3 + 40 >> 2] = jsvCopy(HEAP32[$3 + 52 >> 2], 1);
     if (HEAP32[$3 + 40 >> 2]) {
      jsvAddName(HEAP32[$3 + 60 >> 2], HEAP32[$3 + 40 >> 2]);
      jsvUnLock(HEAP32[$3 + 40 >> 2]);
     }
    }
    jsvUnLock2(HEAP32[$3 + 52 >> 2], HEAP32[$3 + 48 >> 2]);
    if (!(HEAP8[$3 + 47 | 0] & 1)) {
     break label$7;
    }
    jsvObjectIteratorNext($3 + 56 | 0);
    continue;
   }
   break;
  }
  if (HEAP32[$3 + 64 >> 2]) {
   jsvObjectIteratorNew($3 + 32 | 0, HEAP32[$3 + 64 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue($3 + 32 | 0) & 1) {
     HEAP32[$3 + 28 >> 2] = jsvObjectIteratorGetValue($3 + 32 | 0);
     HEAP8[$3 + 27 | 0] = 0;
     while (1) {
      label$16 : {
       if (HEAP8[$3 + 27 | 0] & 1) {
        $0 = 0;
       } else {
        $0 = jsvObjectIteratorHasValue($3 + 56 | 0);
       }
       if (!($0 & 1)) {
        break label$16;
       }
       HEAP32[$3 + 20 >> 2] = jsvObjectIteratorGetKey($3 + 56 | 0);
       if (!(jsvIsFunctionParameter(HEAP32[$3 + 20 >> 2]) & 1)) {
        jsvUnLock(HEAP32[$3 + 20 >> 2]);
        break label$16;
       }
       $0 = $3 + 56 | 0;
       HEAP32[$3 + 16 >> 2] = jsvCopyNameOnly(HEAP32[$3 + 20 >> 2], 0, 1);
       jsvSetValueOfName(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 28 >> 2]);
       jsvAddName(HEAP32[$3 + 60 >> 2], HEAP32[$3 + 16 >> 2]);
       HEAP8[$3 + 27 | 0] = 1;
       jsvUnLock2(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
       jsvObjectIteratorNext($0);
       continue;
      }
      break;
     }
     if (!(HEAP8[$3 + 27 | 0] & 1)) {
      jsvAddFunctionParameter(HEAP32[$3 + 60 >> 2], 0, HEAP32[$3 + 28 >> 2]);
     }
     $0 = $3 + 32 | 0;
     jsvUnLock(HEAP32[$3 + 28 >> 2]);
     jsvObjectIteratorNext($0);
     continue;
    }
    break;
   }
   jsvObjectIteratorFree($3 + 32 | 0);
  }
  while (1) {
   if (jsvObjectIteratorHasValue($3 + 56 | 0) & 1) {
    HEAP32[$3 + 12 >> 2] = jsvObjectIteratorGetKey($3 + 56 | 0);
    HEAP32[$3 + 8 >> 2] = jsvCopyNameOnly(HEAP32[$3 + 12 >> 2], 1, 1);
    if (HEAP32[$3 + 8 >> 2]) {
     jsvAddName(HEAP32[$3 + 60 >> 2], HEAP32[$3 + 8 >> 2]);
     jsvUnLock(HEAP32[$3 + 8 >> 2]);
    }
    $0 = $3 + 56 | 0;
    jsvUnLock(HEAP32[$3 + 12 >> 2]);
    jsvObjectIteratorNext($0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($3 + 56 | 0);
  jsvObjectSetChild(HEAP32[$3 + 60 >> 2], 35840, HEAP32[$3 + 68 >> 2]);
  HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 60 >> 2];
 }
 global$0 = $3 + 80 | 0;
 return HEAP32[$3 + 76 >> 2];
}
function tflite__ops__micro__strided_slice__CheckOutputSize_28TfLiteContext__2c_20tflite__ops__micro__strided_slice__StridedSliceContext__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = Math_fround(0);
 $2 = global$0 - 192 | 0;
 global$0 = $2;
 $3 = $2 + 104 | 0;
 HEAP32[$2 + 184 >> 2] = $0;
 HEAP32[$2 + 180 >> 2] = $1;
 HEAP32[$2 + 176 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 180 >> 2] + 20 >> 2] + 8 >> 2];
 HEAP32[$2 + 172 >> 2] = 0;
 tflite__ops__micro__strided_slice__BuildStridedSliceParams_28tflite__ops__micro__strided_slice__StridedSliceContext__29($2 + 128 | 0, HEAP32[$2 + 180 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3, HEAP32[HEAP32[$2 + 180 >> 2] + 4 >> 2]);
 HEAP32[$2 + 100 >> 2] = 0;
 label$1 : {
  while (1) {
   if (HEAP32[$2 + 100 >> 2] < HEAP32[HEAP32[$2 + 180 >> 2] + 24 >> 2]) {
    HEAP32[$2 + 96 >> 2] = HEAP32[float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$2 + 180 >> 2] + 16 >> 2]) + (HEAP32[$2 + 100 >> 2] << 2) >> 2];
    if (!HEAP32[$2 + 96 >> 2]) {
     FUNCTION_TABLE[HEAP32[HEAP32[$2 + 184 >> 2] + 20 >> 2]](HEAP32[$2 + 184 >> 2], 47604, 0);
     HEAP32[$2 + 188 >> 2] = 1;
     break label$1;
    }
    HEAP32[$2 + 80 >> 2] = tflite__strided_slice__StartForAxis_28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20int_29($2 + 128 | 0, $2 + 104 | 0, HEAP32[$2 + 100 >> 2]);
    HEAP32[$2 + 76 >> 2] = tflite__strided_slice__StopForAxis_28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20int_2c_20int_29($2 + 128 | 0, $2 + 104 | 0, HEAP32[$2 + 100 >> 2], HEAP32[$2 + 80 >> 2]);
    HEAP8[$2 + 75 | 0] = (HEAP32[HEAP32[HEAP32[$2 + 180 >> 2] >> 2] + 16 >> 2] & 1 << HEAP32[$2 + 100 >> 2]) != 0;
    if (HEAP8[$2 + 75 | 0] & 1) {
     HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 80 >> 2] + 1;
    }
    $0 = $2;
    $4 = ceil_28float_29(Math_fround(Math_fround(HEAP32[$2 + 76 >> 2] - HEAP32[$2 + 80 >> 2] | 0) / Math_fround(HEAP32[$2 + 96 >> 2])));
    label$6 : {
     if (Math_fround(Math_abs($4)) < Math_fround(2147483648)) {
      $1 = ~~$4;
      break label$6;
     }
     $1 = -2147483648;
    }
    HEAP32[$0 + 68 >> 2] = $1;
    $0 = $2;
    if (HEAP32[$2 + 68 >> 2] < 0) {
     $1 = 0;
    } else {
     $1 = HEAP32[$2 + 68 >> 2];
    }
    HEAP32[$0 + 68 >> 2] = $1;
    if (!(HEAP8[$2 + 75 | 0] & 1)) {
     if (HEAP32[(HEAP32[$2 + 176 >> 2] + 4 | 0) + (HEAP32[$2 + 172 >> 2] << 2) >> 2] != HEAP32[$2 + 68 >> 2]) {
      $0 = HEAP32[HEAP32[$2 + 184 >> 2] + 20 >> 2];
      $1 = HEAP32[$2 + 184 >> 2];
      $3 = HEAP32[(HEAP32[$2 + 176 >> 2] + 4 | 0) + (HEAP32[$2 + 172 >> 2] << 2) >> 2];
      HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 68 >> 2];
      HEAP32[$2 + 16 >> 2] = $3;
      HEAP32[$2 + 12 >> 2] = 47901;
      HEAP32[$2 + 8 >> 2] = 47870;
      HEAP32[$2 + 4 >> 2] = 115;
      HEAP32[$2 >> 2] = 47766;
      FUNCTION_TABLE[$0]($1, 47740, $2);
      HEAP32[$2 + 188 >> 2] = 1;
      break label$1;
     }
     HEAP32[$2 + 172 >> 2] = HEAP32[$2 + 172 >> 2] + 1;
    }
    HEAP32[$2 + 100 >> 2] = HEAP32[$2 + 100 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[HEAP32[$2 + 176 >> 2] >> 2] != HEAP32[$2 + 172 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 184 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 184 >> 2];
   $3 = HEAP32[HEAP32[$2 + 176 >> 2] >> 2];
   HEAP32[$2 + 52 >> 2] = HEAP32[$2 + 172 >> 2];
   HEAP32[$2 + 48 >> 2] = $3;
   HEAP32[$2 + 44 >> 2] = 47930;
   HEAP32[$2 + 40 >> 2] = 47911;
   HEAP32[$2 + 36 >> 2] = 119;
   HEAP32[$2 + 32 >> 2] = 47766;
   FUNCTION_TABLE[$0]($1, 47740, $2 + 32 | 0);
   HEAP32[$2 + 188 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 188 >> 2] = 0;
 }
 HEAP32[$2 + 84 >> 2] = 1;
 tflite__RuntimeShape___RuntimeShape_28_29($2 + 104 | 0);
 global$0 = $2 + 192 | 0;
 return HEAP32[$2 + 188 >> 2];
}
function jswrap_espruino_HSBtoRGB_int($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 80 | 0;
 HEAPF64[$3 + 64 >> 3] = $0;
 HEAPF64[$3 + 56 >> 3] = $1;
 HEAPF64[$3 + 48 >> 3] = $2;
 label$1 : {
  if (HEAPF64[$3 + 48 >> 3] == 0) {
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  if (HEAPF64[$3 + 56 >> 3] == 0) {
   $5 = $3;
   $0 = HEAPF64[$3 + 48 >> 3] * 255;
   label$4 : {
    if (Math_abs($0) < 2147483648) {
     $4 = ~~$0;
     break label$4;
    }
    $4 = -2147483648;
   }
   HEAP32[$5 + 44 >> 2] = $4;
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 44 >> 2] | (HEAP32[$3 + 44 >> 2] << 16 | HEAP32[$3 + 44 >> 2] << 8);
   break label$1;
  }
  HEAPF64[$3 + 64 >> 3] = (HEAPF64[$3 + 64 >> 3] - Math_floor(HEAPF64[$3 + 64 >> 3])) * 6;
  $5 = $3;
  $0 = HEAPF64[$3 + 64 >> 3];
  label$6 : {
   if (Math_abs($0) < 2147483648) {
    $4 = ~~$0;
    break label$6;
   }
   $4 = -2147483648;
  }
  HEAP32[$5 + 32 >> 2] = $4;
  HEAPF64[$3 + 8 >> 3] = HEAPF64[$3 + 64 >> 3] - +HEAP32[$3 + 32 >> 2];
  HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] % 6;
  HEAPF64[$3 + 48 >> 3] = HEAPF64[$3 + 48 >> 3] * 255;
  $5 = $3;
  $0 = HEAPF64[$3 + 48 >> 3];
  label$8 : {
   if (Math_abs($0) < 2147483648) {
    $4 = ~~$0;
    break label$8;
   }
   $4 = -2147483648;
  }
  HEAP32[$5 + 28 >> 2] = $4;
  $5 = $3;
  $0 = (1 - HEAPF64[$3 + 56 >> 3]) * HEAPF64[$3 + 48 >> 3];
  label$10 : {
   if (Math_abs($0) < 2147483648) {
    $4 = ~~$0;
    break label$10;
   }
   $4 = -2147483648;
  }
  HEAP32[$5 + 24 >> 2] = $4;
  $5 = $3;
  $0 = (1 - HEAPF64[$3 + 56 >> 3] * HEAPF64[$3 + 8 >> 3]) * HEAPF64[$3 + 48 >> 3];
  label$12 : {
   if (Math_abs($0) < 2147483648) {
    $4 = ~~$0;
    break label$12;
   }
   $4 = -2147483648;
  }
  HEAP32[$5 + 20 >> 2] = $4;
  $5 = $3;
  $0 = (1 - HEAPF64[$3 + 56 >> 3] * (1 - HEAPF64[$3 + 8 >> 3])) * HEAPF64[$3 + 48 >> 3];
  label$14 : {
   if (Math_abs($0) < 2147483648) {
    $4 = ~~$0;
    break label$14;
   }
   $4 = -2147483648;
  }
  HEAP32[$5 + 16 >> 2] = $4;
  label$16 : {
   if (!HEAP32[$3 + 32 >> 2]) {
    HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 28 >> 2];
    HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 16 >> 2];
    HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 24 >> 2];
    break label$16;
   }
   label$18 : {
    if (HEAP32[$3 + 32 >> 2] == 1) {
     HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 20 >> 2];
     HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 28 >> 2];
     HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 24 >> 2];
     break label$18;
    }
    label$20 : {
     if (HEAP32[$3 + 32 >> 2] == 2) {
      HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 24 >> 2];
      HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 28 >> 2];
      HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 16 >> 2];
      break label$20;
     }
     label$22 : {
      if (HEAP32[$3 + 32 >> 2] == 3) {
       HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 24 >> 2];
       HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 20 >> 2];
       HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 28 >> 2];
       break label$22;
      }
      label$24 : {
       if (HEAP32[$3 + 32 >> 2] == 4) {
        HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 16 >> 2];
        HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 24 >> 2];
        HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 28 >> 2];
        break label$24;
       }
       label$26 : {
        if (HEAP32[$3 + 32 >> 2] == 5) {
         HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 28 >> 2];
         HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 24 >> 2];
         HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 20 >> 2];
         break label$26;
        }
        HEAP32[$3 + 44 >> 2] = 0;
        HEAP32[$3 + 40 >> 2] = 0;
        HEAP32[$3 + 36 >> 2] = 0;
       }
      }
     }
    }
   }
  }
  HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 44 >> 2] | (HEAP32[$3 + 36 >> 2] << 16 | HEAP32[$3 + 40 >> 2] << 8);
 }
 return HEAP32[$3 + 76 >> 2];
}
function jsiDumpHardwareInitialisation($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 92 >> 2] = $0;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP8[$3 + 87 | 0] = $2;
 if (HEAP16[47566] & 1) {
  FUNCTION_TABLE[HEAP32[$3 + 92 >> 2]](5393, HEAP32[$3 + 88 >> 2]);
 }
 if (HEAPU8[53361] != 255) {
  $0 = HEAP32[$3 + 92 >> 2];
  $1 = HEAP32[$3 + 88 >> 2];
  HEAP32[$3 + 64 >> 2] = HEAPU8[53361];
  cbprintf($0, $1, 5402, $3 - -64 | 0);
 }
 if (HEAPU8[53362] != 255) {
  $0 = HEAP32[$3 + 92 >> 2];
  $1 = HEAP32[$3 + 88 >> 2];
  HEAP32[$3 + 48 >> 2] = HEAPU8[53362];
  cbprintf($0, $1, 5425, $3 + 48 | 0);
 }
 if (!(!(HEAP8[$3 + 87 | 0] & 1) | !HEAPU8[55076])) {
  HEAP32[$3 + 80 >> 2] = jsfGetFlags();
  $0 = HEAP32[$3 + 92 >> 2];
  $1 = HEAP32[$3 + 88 >> 2];
  HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 80 >> 2];
  cbprintf($0, $1, 5449, $3 + 32 | 0);
  jsvUnLock(HEAP32[$3 + 80 >> 2]);
 }
 jsiDumpSerialInitialisation(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2], 5466, HEAP8[$3 + 87 | 0] & 1);
 HEAP32[$3 + 76 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 76 >> 2] < 1) {
   jsiDumpSerialInitialisation(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2], jshGetDeviceString(HEAP32[$3 + 76 >> 2] + 22 & 255), HEAP8[$3 + 87 | 0] & 1);
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$3 + 76 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 76 >> 2] < 1) {
   jsiDumpDeviceInitialisation(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2], jshGetDeviceString(HEAP32[$3 + 76 >> 2] + 24 & 255));
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$3 + 76 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 76 >> 2] < 1) {
   jsiDumpDeviceInitialisation(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2], jshGetDeviceString(HEAP32[$3 + 76 >> 2] + 25 & 255));
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP8[$3 + 75 | 0] = 0;
 while (1) {
  if (jshIsPinValid(HEAPU8[$3 + 75 | 0]) & 1) {
   $0 = HEAPU8[$3 + 75 | 0] < 32;
  } else {
   $0 = 0;
  }
  if ($0) {
   HEAP8[$3 + 74 | 0] = jshPinGetState(HEAPU8[$3 + 75 | 0]);
   HEAP8[$3 + 73 | 0] = HEAPU8[$3 + 74 | 0] & 15;
   label$15 : {
    label$16 : {
     if (HEAPU8[$3 + 73 | 0] != 1) {
      break label$16;
     }
     if (jshGetPinStateIsManual(HEAPU8[$3 + 75 | 0]) & 1) {
      break label$16;
     }
     HEAP8[$3 + 72 | 0] = (HEAPU8[$3 + 74 | 0] & 16) != 0;
     label$17 : {
      if (HEAP8[$3 + 72 | 0] & 1) {
       break label$17;
      }
     }
     $0 = HEAP32[$3 + 92 >> 2];
     $1 = HEAP32[$3 + 88 >> 2];
     $2 = HEAPU8[$3 + 75 | 0];
     HEAP32[$3 + 20 >> 2] = HEAP8[$3 + 72 | 0] & 1 ? 1 : 0;
     HEAP32[$3 + 16 >> 2] = $2;
     cbprintf($0, $1, 5470, $3 + 16 | 0);
     break label$15;
    }
    if (!(HEAPU8[$3 + 75 | 0] != 24 | HEAPU8[$3 + 73 | 0] != 6) | !(HEAPU8[$3 + 75 | 0] != 22 | HEAPU8[$3 + 73 | 0] != 6)) {
     break label$15;
    }
    if (!(HEAPU8[$3 + 75 | 0] != 23 | HEAPU8[$3 + 73 | 0] != 6) | !(HEAPU8[$3 + 75 | 0] != 11 | HEAPU8[$3 + 73 | 0] != 6)) {
     break label$15;
    }
    if (!(HEAPU8[$3 + 73 | 0] == 4 | HEAPU8[$3 + 73 | 0] == 7)) {
     HEAP32[$3 + 68 >> 2] = jswrap_io_getPinMode(HEAPU8[$3 + 75 | 0]);
     if (HEAP32[$3 + 68 >> 2]) {
      $0 = HEAP32[$3 + 92 >> 2];
      $1 = HEAP32[$3 + 88 >> 2];
      $2 = HEAPU8[$3 + 75 | 0];
      $4 = HEAP32[$3 + 68 >> 2];
      HEAP32[$3 + 8 >> 2] = jshGetPinStateIsManual(HEAPU8[$3 + 75 | 0]) & 1 ? 5513 : 5514;
      HEAP32[$3 + 4 >> 2] = $4;
      HEAP32[$3 >> 2] = $2;
      cbprintf($0, $1, 5493, $3);
     }
     jsvUnLock(HEAP32[$3 + 68 >> 2]);
    }
   }
   HEAP8[$3 + 75 | 0] = HEAPU8[$3 + 75 | 0] + 1;
   continue;
  }
  break;
 }
 global$0 = $3 + 96 | 0;
}
function jslNewTokenisedStringFromLexer($0, $1) {
 var $2 = 0;
 $2 = global$0 - 208 | 0;
 global$0 = $2;
 HEAP32[$2 + 204 >> 2] = $0;
 HEAP32[$2 + 200 >> 2] = $1;
 HEAP32[$2 + 196 >> 2] = HEAP32[13768];
 HEAP32[13768] = $2 - -64;
 HEAP32[$2 + 60 >> 2] = 0;
 jslInit(HEAP32[HEAP32[$2 + 196 >> 2] + 104 >> 2]);
 jslSeekToP(HEAP32[$2 + 204 >> 2]);
 HEAP32[$2 + 56 >> 2] = 0;
 while (1) {
  if (HEAP16[HEAP32[13768] + 2 >> 1]) {
   $0 = jsvStringIteratorGetIndex(HEAP32[13768] + 108 | 0) >>> 0 <= HEAP32[$2 + 200 >> 2] + 1 >>> 0;
  } else {
   $0 = 0;
  }
  if ($0) {
   if (!((HEAP16[HEAP32[13768] + 2 >> 1] != 129 ? !(HEAP16[HEAP32[13768] + 2 >> 1] == 128 | HEAP16[HEAP32[13768] + 2 >> 1] == 130) : 0) | (HEAP32[$2 + 56 >> 2] != 129 ? !(HEAP32[$2 + 56 >> 2] == 128 | HEAP32[$2 + 56 >> 2] == 130) : 0))) {
    HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 60 >> 2] + 1;
   }
   label$8 : {
    label$9 : {
     label$10 : {
      if (HEAP16[HEAP32[13768] + 2 >> 1] == 128 | HEAP16[HEAP32[13768] + 2 >> 1] == 129 | (HEAP16[HEAP32[13768] + 2 >> 1] == 130 | HEAP16[HEAP32[13768] + 2 >> 1] == 131)) {
       break label$10;
      }
      if (HEAP16[HEAP32[13768] + 2 >> 1] == 133) {
       break label$10;
      }
      if (HEAP16[HEAP32[13768] + 2 >> 1] != 135) {
       break label$9;
      }
     }
     HEAP32[$2 + 60 >> 2] = (jsvStringIteratorGetIndex(HEAP32[13768] + 108 | 0) - jsvStringIteratorGetIndex(HEAP32[13768] + 4 | 0) | 0) + HEAP32[$2 + 60 >> 2];
     break label$8;
    }
    HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 60 >> 2] + 1;
   }
   HEAP32[$2 + 56 >> 2] = HEAP16[HEAP32[13768] + 2 >> 1];
   jslGetNextToken();
   continue;
  }
  break;
 }
 HEAP32[$2 + 52 >> 2] = jsvNewStringOfLength(HEAP32[$2 + 60 >> 2], 0);
 if (HEAP32[$2 + 52 >> 2]) {
  jsvStringIteratorNew($2 + 32 | 0, HEAP32[$2 + 52 >> 2], 0);
  jslSeekToP(HEAP32[$2 + 204 >> 2]);
  HEAP32[$2 + 56 >> 2] = 0;
  while (1) {
   if (HEAP16[HEAP32[13768] + 2 >> 1]) {
    $0 = jsvStringIteratorGetIndex(HEAP32[13768] + 108 | 0) >>> 0 <= HEAP32[$2 + 200 >> 2] + 1 >>> 0;
   } else {
    $0 = 0;
   }
   if ($0) {
    if (!((HEAP16[HEAP32[13768] + 2 >> 1] != 129 ? !(HEAP16[HEAP32[13768] + 2 >> 1] == 128 | HEAP16[HEAP32[13768] + 2 >> 1] == 130) : 0) | (HEAP32[$2 + 56 >> 2] != 129 ? !(HEAP32[$2 + 56 >> 2] == 128 | HEAP32[$2 + 56 >> 2] == 130) : 0))) {
     jsvStringIteratorSetCharAndNext($2 + 32 | 0, 32);
    }
    label$19 : {
     label$20 : {
      label$21 : {
       if (HEAP16[HEAP32[13768] + 2 >> 1] == 128 | HEAP16[HEAP32[13768] + 2 >> 1] == 129 | (HEAP16[HEAP32[13768] + 2 >> 1] == 130 | HEAP16[HEAP32[13768] + 2 >> 1] == 131)) {
        break label$21;
       }
       if (HEAP16[HEAP32[13768] + 2 >> 1] == 133) {
        break label$21;
       }
       if (HEAP16[HEAP32[13768] + 2 >> 1] != 135) {
        break label$20;
       }
      }
      $0 = $2 + 8 | 0;
      jsvStringIteratorSetCharAndNext($2 + 32 | 0, HEAP8[HEAP32[13768] + 24 | 0]);
      jsvStringIteratorClone($0, HEAP32[13768] + 4 | 0);
      while (1) {
       if (jsvStringIteratorGetIndex($2 + 8 | 0) + 1 >>> 0 < jsvStringIteratorGetIndex(HEAP32[13768] + 108 | 0) >>> 0) {
        jsvStringIteratorSetCharAndNext($2 + 32 | 0, jsvStringIteratorGetCharAndNext($2 + 8 | 0) << 24 >> 24);
        continue;
       }
       break;
      }
      jsvStringIteratorFree($2 + 8 | 0);
      break label$19;
     }
     jsvStringIteratorSetCharAndNext($2 + 32 | 0, HEAPU16[HEAP32[13768] + 2 >> 1] << 24 >> 24);
    }
    HEAP32[$2 + 56 >> 2] = HEAP16[HEAP32[13768] + 2 >> 1];
    jslGetNextToken();
    continue;
   }
   break;
  }
  jsvStringIteratorFree($2 + 32 | 0);
 }
 jslKill();
 HEAP32[13768] = HEAP32[$2 + 196 >> 2];
 global$0 = $2 + 208 | 0;
 return HEAP32[$2 + 52 >> 2];
}
function jshPinFunctionToString($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP16[$3 + 46 >> 1] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 HEAP32[$3 + 32 >> 2] = 16;
 HEAP32[$3 + 28 >> 2] = 5083;
 HEAP16[$3 + 26 >> 1] = HEAPU16[$3 + 46 >> 1] & 61440;
 HEAP16[$3 + 24 >> 1] = 0;
 HEAP32[$3 + 20 >> 2] = 0;
 HEAP8[HEAP32[$3 + 36 >> 2]] = 0;
 label$1 : {
  if (!((HEAPU16[$3 + 46 >> 1] & 4080) < 768 | (HEAPU16[$3 + 46 >> 1] & 4080) > 848)) {
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 40 >> 2] & 16 ? 5084 : 5091;
   HEAP16[$3 + 24 >> 1] = 768;
   label$3 : {
    if (!HEAPU16[$3 + 26 >> 1]) {
     HEAP32[$3 + 20 >> 2] = 5097;
     break label$3;
    }
    label$5 : {
     if (HEAPU16[$3 + 26 >> 1] == 4096) {
      HEAP32[$3 + 20 >> 2] = 5100;
      break label$5;
     }
     if (HEAPU16[$3 + 26 >> 1] == 8192) {
      HEAP32[$3 + 20 >> 2] = 5103;
     }
    }
   }
   break label$1;
  }
  label$8 : {
   if (!((HEAPU16[$3 + 46 >> 1] & 4080) < 512 | (HEAPU16[$3 + 46 >> 1] & 4080) > 544)) {
    HEAP32[$3 + 28 >> 2] = 5106;
    HEAP16[$3 + 24 >> 1] = 512;
    label$10 : {
     if (!HEAPU16[$3 + 26 >> 1]) {
      HEAP32[$3 + 20 >> 2] = 5110;
      break label$10;
     }
     label$12 : {
      if (HEAPU16[$3 + 26 >> 1] == 4096) {
       HEAP32[$3 + 20 >> 2] = 5115;
       break label$12;
      }
      if (HEAPU16[$3 + 26 >> 1] == 8192) {
       HEAP32[$3 + 20 >> 2] = 5120;
      }
     }
    }
    break label$8;
   }
   label$15 : {
    if (!((HEAPU16[$3 + 46 >> 1] & 4080) < 640 | (HEAPU16[$3 + 46 >> 1] & 4080) > 688)) {
     HEAP32[$3 + 28 >> 2] = 5124;
     HEAP16[$3 + 24 >> 1] = 640;
     label$17 : {
      if (!HEAPU16[$3 + 26 >> 1]) {
       HEAP32[$3 + 20 >> 2] = 5128;
       break label$17;
      }
      if (HEAPU16[$3 + 26 >> 1] == 4096) {
       HEAP32[$3 + 20 >> 2] = 5132;
      }
     }
     break label$15;
    }
    label$20 : {
     if ((HEAPU16[$3 + 46 >> 1] & 4080) == 384) {
      HEAP32[$3 + 28 >> 2] = 5136;
      HEAP16[$3 + 24 >> 1] = 384;
      label$22 : {
       if (!HEAPU16[$3 + 26 >> 1]) {
        HEAP32[$3 + 20 >> 2] = 5140;
        break label$22;
       }
       if (HEAPU16[$3 + 26 >> 1] == 4096) {
        HEAP32[$3 + 20 >> 2] = 5144;
       }
      }
      break label$20;
     }
     if (!((HEAPU16[$3 + 46 >> 1] & 4080) < 16 | (HEAPU16[$3 + 46 >> 1] & 4080) > 288)) {
      HEAP32[$3 + 28 >> 2] = 5148;
      HEAP16[$3 + 24 >> 1] = 16;
      HEAP32[$3 + 20 >> 2] = $3 + 15;
      HEAP8[$3 + 15 | 0] = 67;
      HEAP8[$3 + 16 | 0] = 72;
      HEAP8[$3 + 17 | 0] = ((HEAPU16[$3 + 26 >> 1] & 28672) >> 12) + 49;
      label$26 : {
       if (HEAPU16[$3 + 26 >> 1] & 32768) {
        HEAP8[$3 + 18 | 0] = 78;
        HEAP8[$3 + 19 | 0] = 0;
        break label$26;
       }
       HEAP8[$3 + 18 | 0] = 0;
      }
     }
    }
   }
  }
 }
 HEAP32[$3 + 8 >> 2] = ((HEAPU16[$3 + 46 >> 1] & 4080) - HEAPU16[$3 + 24 >> 1] >> 4) + 1;
 label$28 : {
  if (!HEAP32[$3 + 28 >> 2]) {
   HEAP32[$3 >> 2] = HEAPU16[$3 + 46 >> 1];
   jsiConsolePrintf(5152, $3);
   break label$28;
  }
  if (HEAP32[$3 + 40 >> 2] & 1) {
   strncat(HEAP32[$3 + 36 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 32 >> 2] - 1 | 0);
  }
  if (HEAP32[$3 + 40 >> 2] & 2) {
   itostr(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 36 >> 2] + strlen(HEAP32[$3 + 36 >> 2]) | 0, 10);
  }
  if (HEAP32[$3 + 40 >> 2] & 4) {
   strncat(HEAP32[$3 + 36 >> 2], 5186, HEAP32[$3 + 32 >> 2] - (strlen(HEAP32[$3 + 36 >> 2]) + 1 | 0) | 0);
  }
  if (!HEAP32[$3 + 20 >> 2] | !(HEAP32[$3 + 40 >> 2] & 8)) {
   break label$28;
  }
  strncat(HEAP32[$3 + 36 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 32 >> 2] - (strlen(HEAP32[$3 + 36 >> 2]) + 1 | 0) | 0);
 }
 global$0 = $3 + 48 | 0;
}
function tflite__ops__micro__fully_connected__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 $3 = $2 + 8 | 0;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 HEAP32[$2 + 48 >> 2] = HEAP32[HEAP32[$2 + 52 >> 2] + 20 >> 2];
 HEAP32[$2 + 44 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 0);
 HEAP32[$2 + 40 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 1);
 HEAP32[$2 + 36 >> 2] = tflite__GetOptionalInputTensor_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 2);
 HEAP32[$2 + 32 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2]);
 HEAP32[$2 + 28 >> 2] = HEAP32[HEAP32[$2 + 44 >> 2] >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 label$1 : {
  if (tflite__ops__micro__fully_connected___28anonymous_20namespace_29__CalculateOpData_28TfLiteContext__2c_20TfLiteFullyConnectedParams__2c_20TfLiteType_2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20tflite__ops__micro__fully_connected___28anonymous_20namespace_29__OpData__29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 48 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 44 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 4 >> 2])) {
   HEAP32[$2 + 60 >> 2] = 1;
   break label$1;
  }
  label$3 : {
   $0 = HEAP32[HEAP32[$2 + 40 >> 2] >> 2] + -1 | 0;
   if ($0 >>> 0 > 8) {
    break label$3;
   }
   label$4 : {
    switch ($0 - 1 | 0) {
    default:
     HEAP32[$2 + 60 >> 2] = tflite__ops__micro__fully_connected__EvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteFullyConnectedParams__2c_20tflite__ops__micro__fully_connected___28anonymous_20namespace_29__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], HEAP32[$2 + 48 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 + 44 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2]);
     break label$1;
    case 7:
     HEAP32[$2 + 60 >> 2] = tflite__ops__micro__fully_connected__EvalQuantizedInt8_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteFullyConnectedParams__2c_20tflite__ops__micro__fully_connected___28anonymous_20namespace_29__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], HEAP32[$2 + 48 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 + 44 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2]);
     break label$1;
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
     break label$3;
    case 1:
     break label$4;
    }
   }
   HEAP32[$2 + 60 >> 2] = tflite__ops__micro__fully_connected__EvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteFullyConnectedParams__2c_20tflite__ops__micro__fully_connected___28anonymous_20namespace_29__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], HEAP32[$2 + 48 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 + 44 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2]);
   break label$1;
  }
  $0 = HEAP32[HEAP32[$2 + 56 >> 2] + 20 >> 2];
  $1 = HEAP32[$2 + 56 >> 2];
  HEAP32[$2 >> 2] = HEAP32[HEAP32[$2 + 40 >> 2] >> 2];
  FUNCTION_TABLE[$0]($1, 47212, $2);
  HEAP32[$2 + 60 >> 2] = 1;
 }
 global$0 = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}
function graphicsDrawChar4x6($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 48 | 0;
 global$0 = $6;
 HEAP32[$6 + 44 >> 2] = $0;
 HEAP32[$6 + 40 >> 2] = $1;
 HEAP32[$6 + 36 >> 2] = $2;
 HEAP8[$6 + 35 | 0] = $3;
 HEAP16[$6 + 32 >> 1] = $4;
 HEAP8[$6 + 31 | 0] = $5;
 HEAP32[$6 + 24 >> 2] = HEAPU8[$6 + 35 | 0] - 33;
 label$1 : {
  if (!(HEAP32[$6 + 24 >> 2] < 100 ? HEAP32[$6 + 24 >> 2] >= 0 : 0)) {
   if (HEAP8[$6 + 31 | 0] & 1) {
    $0 = HEAP32[$6 + 44 >> 2];
    graphicsFillRect(HEAP32[$6 + 44 >> 2], HEAP32[$6 + 40 >> 2], HEAP32[$6 + 36 >> 2], HEAP32[$6 + 40 >> 2] + (HEAPU16[$6 + 32 >> 1] << 1) | 0, HEAP32[$6 + 36 >> 2] + Math_imul(HEAPU16[$6 + 32 >> 1], 5) | 0, HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
   }
   break label$1;
  }
  HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 24 >> 2] % 5;
  HEAP32[$6 + 24 >> 2] = Math_imul(HEAP32[$6 + 24 >> 2] / 5 | 0, 6);
  HEAP32[$6 + 12 >> 2] = HEAPU16[$6 + 32 >> 1] - 1;
  HEAP32[$6 + 16 >> 2] = 0;
  while (1) {
   if (HEAP32[$6 + 16 >> 2] >= 6) {
    break label$1;
   }
   HEAP32[$6 + 8 >> 2] = HEAPU16[(HEAP32[$6 + 24 >> 2] + HEAP32[$6 + 16 >> 2] << 1) + 24016 >> 1] >> Math_imul(HEAP32[$6 + 20 >> 2], 3);
   HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 36 >> 2] + Math_imul(HEAP32[$6 + 16 >> 2], HEAPU16[$6 + 32 >> 1]);
   if (!(HEAP32[$6 + 8 >> 2] & 4 ? 0 : !(HEAP8[$6 + 31 | 0] & 1))) {
    $1 = HEAP32[$6 + 44 >> 2];
    $2 = HEAP32[$6 + 40 >> 2];
    $3 = HEAP32[$6 + 4 >> 2];
    $4 = HEAP32[$6 + 40 >> 2] + HEAP32[$6 + 12 >> 2] | 0;
    $5 = HEAP32[$6 + 4 >> 2] + HEAP32[$6 + 12 >> 2] | 0;
    label$8 : {
     if (HEAP32[$6 + 8 >> 2] & 4) {
      $0 = HEAP32[$6 + 44 >> 2];
      $0 = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
      break label$8;
     }
     $0 = HEAP32[$6 + 44 >> 2];
     $0 = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
    }
    graphicsFillRect($1, $2, $3, $4, $5, $0);
   }
   if (!(HEAP32[$6 + 8 >> 2] & 2 ? 0 : !(HEAP8[$6 + 31 | 0] & 1))) {
    $1 = HEAP32[$6 + 44 >> 2];
    $2 = HEAP32[$6 + 40 >> 2] + HEAPU16[$6 + 32 >> 1] | 0;
    $3 = HEAP32[$6 + 4 >> 2];
    $4 = HEAPU16[$6 + 32 >> 1] + (HEAP32[$6 + 40 >> 2] + HEAP32[$6 + 12 >> 2] | 0) | 0;
    $5 = HEAP32[$6 + 4 >> 2] + HEAP32[$6 + 12 >> 2] | 0;
    label$12 : {
     if (HEAP32[$6 + 8 >> 2] & 2) {
      $0 = HEAP32[$6 + 44 >> 2];
      $0 = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
      break label$12;
     }
     $0 = HEAP32[$6 + 44 >> 2];
     $0 = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
    }
    graphicsFillRect($1, $2, $3, $4, $5, $0);
   }
   if (!(HEAP32[$6 + 8 >> 2] & 1 ? 0 : !(HEAP8[$6 + 31 | 0] & 1))) {
    $1 = HEAP32[$6 + 44 >> 2];
    $2 = HEAP32[$6 + 40 >> 2] + (HEAPU16[$6 + 32 >> 1] << 1) | 0;
    $3 = HEAP32[$6 + 4 >> 2];
    $4 = (HEAP32[$6 + 40 >> 2] + HEAP32[$6 + 12 >> 2] | 0) + (HEAPU16[$6 + 32 >> 1] << 1) | 0;
    $5 = HEAP32[$6 + 4 >> 2] + HEAP32[$6 + 12 >> 2] | 0;
    label$16 : {
     if (HEAP32[$6 + 8 >> 2] & 1) {
      $0 = HEAP32[$6 + 44 >> 2];
      $0 = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
      break label$16;
     }
     $0 = HEAP32[$6 + 44 >> 2];
     $0 = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
    }
    graphicsFillRect($1, $2, $3, $4, $5, $0);
   }
   HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 16 >> 2] + 1;
   continue;
  }
 }
 global$0 = $6 + 48 | 0;
}
function tflite__ops__micro__split__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 68 >> 2] = $1;
 HEAP32[$2 + 64 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 68 >> 2], 0);
 HEAP32[$2 + 60 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 68 >> 2], 1);
 $0 = global$0 - 16 | 0;
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 64 >> 2];
 label$1 : {
  if (HEAP32[HEAP32[$0 + 12 >> 2] + 20 >> 2] != 1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 + 72 >> 2] + 20 >> 2]](HEAP32[$2 + 72 >> 2], 45156, 0);
   HEAP32[$2 + 76 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 56 >> 2] = HEAP32[float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 64 >> 2]) >> 2];
  if (HEAP32[$2 + 56 >> 2] < 0) {
   HEAP32[$2 + 56 >> 2] = tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 60 >> 2]) + HEAP32[$2 + 56 >> 2];
  }
  if (HEAP32[$2 + 56 >> 2] < 0) {
   $0 = HEAP32[HEAP32[$2 + 72 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 72 >> 2];
   HEAP32[$2 + 40 >> 2] = 45410;
   HEAP32[$2 + 36 >> 2] = 87;
   HEAP32[$2 + 32 >> 2] = 45314;
   FUNCTION_TABLE[$0]($1, 45291, $2 + 32 | 0);
   HEAP32[$2 + 76 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[$2 + 56 >> 2] >= (tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 60 >> 2]) | 0)) {
   $0 = HEAP32[HEAP32[$2 + 72 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 72 >> 2];
   HEAP32[$2 + 24 >> 2] = 45426;
   HEAP32[$2 + 20 >> 2] = 88;
   HEAP32[$2 + 16 >> 2] = 45314;
   FUNCTION_TABLE[$0]($1, 45291, $2 + 16 | 0);
   HEAP32[$2 + 76 >> 2] = 1;
   break label$1;
  }
  label$7 : {
   $0 = HEAP32[HEAP32[$2 + 60 >> 2] >> 2] + -1 | 0;
   if ($0 >>> 0 > 8) {
    break label$7;
   }
   label$8 : {
    switch ($0 - 1 | 0) {
    default:
     HEAP32[$2 + 76 >> 2] = TfLiteStatus_20tflite__ops__micro__split__SplitImpl_float__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor_20const__2c_20int_29(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 68 >> 2], HEAP32[$2 + 60 >> 2], HEAP32[$2 + 56 >> 2]);
     break label$1;
    case 1:
     HEAP32[$2 + 76 >> 2] = TfLiteStatus_20tflite__ops__micro__split__SplitImpl_unsigned_20char__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor_20const__2c_20int_29(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 68 >> 2], HEAP32[$2 + 60 >> 2], HEAP32[$2 + 56 >> 2]);
     break label$1;
    case 7:
     HEAP32[$2 + 76 >> 2] = TfLiteStatus_20tflite__ops__micro__split__SplitImpl_unsigned_20char__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor_20const__2c_20int_29(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 68 >> 2], HEAP32[$2 + 60 >> 2], HEAP32[$2 + 56 >> 2]);
     break label$1;
    case 5:
     HEAP32[$2 + 76 >> 2] = TfLiteStatus_20tflite__ops__micro__split__SplitImpl_short__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor_20const__2c_20int_29(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 68 >> 2], HEAP32[$2 + 60 >> 2], HEAP32[$2 + 56 >> 2]);
     break label$1;
    case 2:
    case 3:
    case 4:
    case 6:
     break label$7;
    case 0:
     break label$8;
    }
   }
   HEAP32[$2 + 76 >> 2] = TfLiteStatus_20tflite__ops__micro__split__SplitImpl_int__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor_20const__2c_20int_29(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 68 >> 2], HEAP32[$2 + 60 >> 2], HEAP32[$2 + 56 >> 2]);
   break label$1;
  }
  $0 = HEAP32[HEAP32[$2 + 72 >> 2] + 20 >> 2];
  $1 = HEAP32[$2 + 72 >> 2];
  HEAP32[$2 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 60 >> 2] >> 2]);
  FUNCTION_TABLE[$0]($1, 45460, $2);
  HEAP32[$2 + 76 >> 2] = 1;
 }
 global$0 = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}
function jsiTabComplete() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 320 | 0;
 global$0 = $0;
 label$1 : {
  if (!(jsvIsString(HEAP32[23784]) & 1)) {
   break label$1;
  }
  HEAP32[$0 + 316 >> 2] = 0;
  HEAP32[$0 + 300 >> 2] = 0;
  HEAP32[$0 + 292 >> 2] = 0;
  HEAP32[$0 + 156 >> 2] = jslSetLex($0 + 160 | 0);
  jslInit(HEAP32[23784]);
  while (1) {
   if (HEAP16[$0 + 162 >> 1]) {
    $1 = jsvStringIteratorGetIndex($0 + 164 | 0) >>> 0 <= HEAPU32[23786];
   } else {
    $1 = 0;
   }
   if ($1) {
    label$6 : {
     if (HEAP16[$0 + 162 >> 1] == 46) {
      jsvUnLock(HEAP32[$0 + 316 >> 2]);
      HEAP32[$0 + 316 >> 2] = HEAP32[$0 + 300 >> 2];
      HEAP32[$0 + 300 >> 2] = 0;
      break label$6;
     }
     label$8 : {
      if (HEAP16[$0 + 162 >> 1] == 128) {
       $1 = $0 + 160 | 0;
       jsvUnLock(HEAP32[$0 + 300 >> 2]);
       HEAP32[$0 + 300 >> 2] = jslGetTokenValueAsVar();
       HEAP32[$0 + 292 >> 2] = jsvStringIteratorGetIndex($1 + 4 | 0);
       break label$8;
      }
      jsvUnLock(HEAP32[$0 + 316 >> 2]);
      HEAP32[$0 + 316 >> 2] = 0;
      jsvUnLock(HEAP32[$0 + 300 >> 2]);
      HEAP32[$0 + 300 >> 2] = 0;
     }
    }
    jslGetNextToken();
    continue;
   }
   break;
  }
  jslKill();
  jslSetLex(HEAP32[$0 + 156 >> 2]);
  if (!(HEAP32[$0 + 316 >> 2] | HEAP32[$0 + 300 >> 2])) {
   break label$1;
  }
  label$11 : {
   if (HEAP32[$0 + 300 >> 2]) {
    HEAP32[$0 + 296 >> 2] = jsvGetStringLength(HEAP32[$0 + 300 >> 2]);
    HEAP32[$0 + 152 >> 2] = (HEAP32[23786] + 1 | 0) - HEAP32[$0 + 292 >> 2];
    if (HEAPU32[$0 + 152 >> 2] > HEAPU32[$0 + 296 >> 2]) {
     jsvUnLock2(HEAP32[$0 + 316 >> 2], HEAP32[$0 + 300 >> 2]);
     break label$1;
    }
    if (HEAPU32[$0 + 152 >> 2] < HEAPU32[$0 + 296 >> 2]) {
     HEAP32[$0 + 148 >> 2] = jsvNewFromStringVar(HEAP32[$0 + 300 >> 2], 0, HEAP32[$0 + 152 >> 2]);
     jsvUnLock(HEAP32[$0 + 300 >> 2]);
     HEAP32[$0 + 300 >> 2] = HEAP32[$0 + 148 >> 2];
     HEAP32[$0 + 296 >> 2] = HEAP32[$0 + 152 >> 2];
    }
    break label$11;
   }
   HEAP32[$0 + 300 >> 2] = jsvNewFromEmptyString();
   HEAP32[$0 + 296 >> 2] = 0;
  }
  if (HEAP32[$0 + 316 >> 2]) {
   $1 = $0 + 80 | 0;
   jsvGetString(HEAP32[$0 + 316 >> 2], $1, 64);
   HEAP32[$0 + 76 >> 2] = jspGetNamedVariable($1);
   label$16 : {
    if (jsvIsVariableDefined(HEAP32[$0 + 76 >> 2]) & 1) {
     HEAP32[$0 + 76 >> 2] = jsvSkipNameAndUnLock(HEAP32[$0 + 76 >> 2]);
     break label$16;
    }
    jsvUnLock(HEAP32[$0 + 76 >> 2]);
    HEAP32[$0 + 76 >> 2] = 0;
   }
   jsvUnLock(HEAP32[$0 + 316 >> 2]);
   HEAP32[$0 + 316 >> 2] = HEAP32[$0 + 76 >> 2];
   if (!HEAP32[$0 + 76 >> 2]) {
    jsvUnLock(HEAP32[$0 + 300 >> 2]);
    break label$1;
   }
  }
  if (!HEAP32[$0 + 316 >> 2]) {
   HEAP32[$0 + 316 >> 2] = jsvLockAgain(HEAP32[23774]);
  }
  HEAP32[$0 + 304 >> 2] = 0;
  HEAP32[$0 + 308 >> 2] = 0;
  jswrap_object_keys_or_property_names_cb(HEAP32[$0 + 316 >> 2], 1, 1, 12, $0 + 296 | 0);
  if (HEAP32[$0 + 308 >> 2] > 1) {
   $1 = $0 + 296 | 0;
   jsiMoveCursorChar(HEAP32[23784], HEAP32[23786], HEAP32[13341]);
   HEAP8[95140] = 1;
   jsiConsolePrintString(5903);
   HEAP32[$0 + 312 >> 2] = 0;
   jswrap_object_keys_or_property_names_cb(HEAP32[$0 + 316 >> 2], 1, 1, 13, $1);
   if (HEAP32[$0 + 312 >> 2]) {
    jsiConsolePrintString(5719);
   }
   jsiConsolePrintString(5719);
   jsiConsoleReturnInputLine();
  }
  jsvUnLock2(HEAP32[$0 + 316 >> 2], HEAP32[$0 + 300 >> 2]);
  if (!HEAP32[$0 + 304 >> 2]) {
   break label$1;
  }
  jsvGetString(HEAP32[$0 + 304 >> 2], $0, 64);
  if (HEAPU32[$0 + 296 >> 2] < strlen($0) >>> 0) {
   jsiAppendStringToInputLine(HEAP32[$0 + 296 >> 2] + $0 | 0);
  }
  jsvUnLock(HEAP32[$0 + 304 >> 2]);
 }
 global$0 = $0 + 320 | 0;
}
function jslTokenAsString($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 336 | 0;
 global$0 = $3;
 HEAP32[$3 + 332 >> 2] = $0;
 HEAP32[$3 + 328 >> 2] = $1;
 HEAP32[$3 + 324 >> 2] = $2;
 label$1 : {
  if (!(HEAP32[$3 + 332 >> 2] <= 32 | HEAP32[$3 + 332 >> 2] >= 128)) {
   HEAP8[HEAP32[$3 + 328 >> 2]] = 39;
   HEAP8[HEAP32[$3 + 328 >> 2] + 1 | 0] = HEAP32[$3 + 332 >> 2];
   HEAP8[HEAP32[$3 + 328 >> 2] + 2 | 0] = 39;
   HEAP8[HEAP32[$3 + 328 >> 2] + 3 | 0] = 0;
   break label$1;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             label$14 : {
              $0 = HEAP32[$3 + 332 >> 2];
              if ($0) {
               if (($0 | 0) == 128) {
                break label$14;
               }
               if (($0 | 0) == 129) {
                break label$13;
               }
               if (($0 | 0) == 130) {
                break label$12;
               }
               if (($0 | 0) == 131) {
                break label$11;
               }
               if (($0 | 0) == 132) {
                break label$10;
               }
               if (($0 | 0) == 133) {
                break label$9;
               }
               if (($0 | 0) == 134) {
                break label$8;
               }
               if (($0 | 0) == 135) {
                break label$7;
               }
               if (($0 | 0) == 136) {
                break label$6;
               }
               if (($0 | 0) == 137) {
                break label$5;
               }
               if (($0 | 0) == 255) {
                break label$4;
               }
               break label$3;
              }
              strcpy(HEAP32[$3 + 328 >> 2], 1381);
              break label$1;
             }
             strcpy(HEAP32[$3 + 328 >> 2], 1385);
             break label$1;
            }
            strcpy(HEAP32[$3 + 328 >> 2], 1388);
            break label$1;
           }
           strcpy(HEAP32[$3 + 328 >> 2], 1392);
           break label$1;
          }
          strcpy(HEAP32[$3 + 328 >> 2], 1398);
          break label$1;
         }
         strcpy(HEAP32[$3 + 328 >> 2], 1405);
         break label$1;
        }
        strcpy(HEAP32[$3 + 328 >> 2], 1423);
        break label$1;
       }
       strcpy(HEAP32[$3 + 328 >> 2], 1440);
       break label$1;
      }
      strcpy(HEAP32[$3 + 328 >> 2], 1468);
      break label$1;
     }
     strcpy(HEAP32[$3 + 328 >> 2], 1474);
     break label$1;
    }
    strcpy(HEAP32[$3 + 328 >> 2], 1491);
    break label$1;
   }
   strcpy(HEAP32[$3 + 328 >> 2], 1510);
   break label$1;
  }
  if (!(HEAP32[$3 + 332 >> 2] < 138 | HEAP32[$3 + 332 >> 2] >= 198)) {
   memcpy($3 + 16 | 0, 1520, 300);
   HEAP32[$3 + 12 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 332 >> 2] - 138;
   while (1) {
    if (HEAP32[$3 + 8 >> 2] > 0 ? HEAPU32[$3 + 12 >> 2] < 300 : 0) {
     while (1) {
      if (HEAP8[HEAP32[$3 + 12 >> 2] + ($3 + 16 | 0) | 0] ? HEAPU32[$3 + 12 >> 2] < 300 : 0) {
       HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
     HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + -1;
     continue;
    }
    break;
   }
   strcpy(HEAP32[$3 + 328 >> 2], HEAP32[$3 + 12 >> 2] + ($3 + 16 | 0) | 0);
   break label$1;
  }
  $0 = HEAP32[$3 + 328 >> 2];
  $1 = HEAP32[$3 + 324 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$3 + 332 >> 2];
  espruino_snprintf($0, $1, 1820, $3);
 }
 global$0 = $3 + 336 | 0;
}
function jspeStatementSwitch() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 jslGetNextToken();
 label$1 : {
  if (!(jslMatch(40) & 1)) {
   break label$1;
  }
  HEAP32[$0 + 24 >> 2] = jspeExpression();
  HEAP32[$0 + 20 >> 2] = HEAP32[23778];
  HEAP8[$0 + 19 | 0] = (HEAP32[23778] & 63) == 1;
  if (!(jslMatch(41) & 1)) {
   jsvUnLock(HEAP32[$0 + 24 >> 2]);
   break label$1;
  }
  if (!(HEAP8[$0 + 19 | 0] & 1)) {
   jsvUnLock(HEAP32[$0 + 24 >> 2]);
   jspeBlock();
   break label$1;
  }
  if (!(jslMatch(123) & 1)) {
   jsvUnLock(HEAP32[$0 + 24 >> 2]);
   break label$1;
  }
  HEAP8[$0 + 18 | 0] = 1;
  if (HEAP8[$0 + 19 | 0] & 1) {
   HEAP32[23778] = 1024;
  }
  while (1) {
   if (HEAP16[HEAP32[13768] + 2 >> 1] == 188) {
    if (!(jslMatch(188) & 1)) {
     jsvUnLock(HEAP32[$0 + 24 >> 2]);
     break label$1;
    }
    HEAP32[$0 + 12 >> 2] = HEAP32[23778];
    if (HEAP8[$0 + 19 | 0] & 1) {
     HEAP32[23778] = 1025;
    }
    HEAP32[$0 + 8 >> 2] = __jspeAssignmentExpression(jspeConditionalExpression());
    HEAP32[23778] = HEAP32[$0 + 12 >> 2] | 1024;
    if (!(jslMatch(58) & 1)) {
     jsvUnLock2(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 8 >> 2]);
     break label$1;
    }
    HEAP8[$0 + 7 | 0] = 0;
    if (HEAP8[$0 + 19 | 0] & 1) {
     HEAP8[$0 + 7 | 0] = jsvGetBoolAndUnLock(jsvMathsOpSkipNames(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 8 >> 2], 139)) & 1;
    }
    if (HEAP8[$0 + 7 | 0] & 1) {
     HEAP8[$0 + 18 | 0] = 0;
    }
    jsvUnLock(HEAP32[$0 + 8 >> 2]);
    if (!(!(HEAP8[$0 + 7 | 0] & 1) | HEAP32[23778] & 63)) {
     HEAP32[23778] = 1025;
    }
    while (1) {
     $1 = 0;
     label$15 : {
      if (HEAP32[23778] & 80) {
       break label$15;
      }
      $1 = 0;
      if (!HEAP16[HEAP32[13768] + 2 >> 1]) {
       break label$15;
      }
      $1 = 0;
      if (HEAP16[HEAP32[13768] + 2 >> 1] == 188) {
       break label$15;
      }
      $1 = 0;
      if (HEAP16[HEAP32[13768] + 2 >> 1] == 189) {
       break label$15;
      }
      $1 = HEAP16[HEAP32[13768] + 2 >> 1] != 125;
     }
     if ($1) {
      jsvUnLock(jspeBlockOrStatement());
      continue;
     }
     break;
    }
    HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 20 >> 2] | HEAP32[23778] & 120;
    continue;
   }
   break;
  }
  jsvUnLock(HEAP32[$0 + 24 >> 2]);
  label$17 : {
   if (!(!(HEAP8[$0 + 19 | 0] & 1) | (HEAP32[23778] & 63) != 2)) {
    HEAP32[23778] = 1025;
    break label$17;
   }
   HEAP8[$0 + 18 | 0] = 1;
  }
  HEAP32[23778] = HEAP32[23778] & -1664 | HEAP32[$0 + 20 >> 2] & 1663;
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 189) {
   jslGetNextToken();
   if (!(jslMatch(58) & 1)) {
    break label$1;
   }
   HEAP32[$0 >> 2] = HEAP32[23778];
   label$20 : {
    if (!(HEAP8[$0 + 18 | 0] & 1)) {
     jspSetNoExecute();
     break label$20;
    }
    HEAP32[23778] = HEAP32[23778] | 1024;
   }
   while (1) {
    $1 = 0;
    label$23 : {
     if (HEAP32[23778] & 80) {
      break label$23;
     }
     $1 = 0;
     if (!HEAP16[HEAP32[13768] + 2 >> 1]) {
      break label$23;
     }
     $1 = 0;
     if (HEAP16[HEAP32[13768] + 2 >> 1] == 125) {
      break label$23;
     }
     $1 = HEAP16[HEAP32[13768] + 2 >> 1] != 188;
    }
    if ($1) {
     jsvUnLock(jspeBlockOrStatement());
     continue;
    }
    break;
   }
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | HEAP32[23778] & 120;
   HEAP32[23778] = HEAP32[23778] & -3;
   HEAP32[23778] = HEAP32[23778] & -1664 | HEAP32[$0 >> 2] & 1663;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 188) {
   jsExceptionHere(2, 4728, 0);
   break label$1;
  }
  jslMatch(125);
 }
 HEAP32[$0 + 28 >> 2] = 0;
 global$0 = $0 + 32 | 0;
 return HEAP32[$0 + 28 >> 2];
}
function void_20tflite__reference_ops__MaximumMinimumBroadcast4DSlow_unsigned_20char_2c_20unsigned_20char_20_28__29_28unsigned_20char_2c_20unsigned_20char_29__28tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__2c_20unsigned_20char_20_28__29_28unsigned_20char_2c_20unsigned_20char_29_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = global$0 - 160 | 0;
 global$0 = $7;
 HEAP32[$7 + 156 >> 2] = $0;
 HEAP32[$7 + 152 >> 2] = $1;
 HEAP32[$7 + 148 >> 2] = $2;
 HEAP32[$7 + 144 >> 2] = $3;
 HEAP32[$7 + 140 >> 2] = $4;
 HEAP32[$7 + 136 >> 2] = $5;
 HEAP32[$7 + 132 >> 2] = $6;
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$7 + 156 >> 2]) | 0) > 4) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$7 + 148 >> 2]) | 0) > 4) {
   break label$2;
  }
 }
 label$3 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$7 + 140 >> 2]) | 0) > 4) {
   break label$3;
  }
 }
 $0 = $7 + 80 | 0;
 $1 = $7 + 48 | 0;
 tflite__RuntimeShape__ExtendedShape_28int_2c_20tflite__RuntimeShape_20const__29($7 + 112 | 0, 4, HEAP32[$7 + 140 >> 2]);
 void_20tflite__NdArrayDescsForElementwiseBroadcast_4__28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__2c_20tflite__NdArrayDesc_4___2c_20tflite__NdArrayDesc_4___29(HEAP32[$7 + 156 >> 2], HEAP32[$7 + 148 >> 2], $0, $1);
 HEAP32[$7 + 36 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 36 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 112 | 0, 0) | 0)) {
   HEAP32[$7 + 32 >> 2] = 0;
   while (1) {
    if (HEAP32[$7 + 32 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 112 | 0, 1) | 0)) {
     HEAP32[$7 + 28 >> 2] = 0;
     while (1) {
      if (HEAP32[$7 + 28 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 112 | 0, 2) | 0)) {
       HEAP32[$7 + 24 >> 2] = 0;
       while (1) {
        if (HEAP32[$7 + 24 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 112 | 0, 3) | 0)) {
         HEAP32[$7 + 20 >> 2] = tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 112 | 0, HEAP32[$7 + 36 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 28 >> 2], HEAP32[$7 + 24 >> 2]);
         HEAP32[$7 + 16 >> 2] = tflite__SubscriptToIndex_28tflite__NdArrayDesc_4__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 80 | 0, HEAP32[$7 + 36 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 28 >> 2], HEAP32[$7 + 24 >> 2]);
         HEAP32[$7 + 12 >> 2] = tflite__SubscriptToIndex_28tflite__NdArrayDesc_4__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 48 | 0, HEAP32[$7 + 36 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 28 >> 2], HEAP32[$7 + 24 >> 2]);
         HEAP8[$7 + 11 | 0] = HEAPU8[HEAP32[$7 + 152 >> 2] + HEAP32[$7 + 16 >> 2] | 0];
         HEAP8[$7 + 10 | 0] = HEAPU8[HEAP32[$7 + 144 >> 2] + HEAP32[$7 + 12 >> 2] | 0];
         $0 = FUNCTION_TABLE[HEAP32[$7 + 132 >> 2]](HEAPU8[$7 + 11 | 0], HEAPU8[$7 + 10 | 0]) | 0;
         HEAP8[HEAP32[$7 + 136 >> 2] + HEAP32[$7 + 20 >> 2] | 0] = $0;
         HEAP32[$7 + 24 >> 2] = HEAP32[$7 + 24 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$7 + 28 >> 2] = HEAP32[$7 + 28 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$7 + 32 >> 2] = HEAP32[$7 + 32 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$7 + 36 >> 2] = HEAP32[$7 + 36 >> 2] + 1;
   continue;
  }
  break;
 }
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 112 | 0);
 global$0 = $7 + 160 | 0;
}
function TfLiteStatus_20tflite__ops__micro__unpack___28anonymous_20namespace_29__UnpackImpl_float__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor_20const__2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 96 | 0;
 global$0 = $5;
 HEAP32[$5 + 92 >> 2] = $0;
 HEAP32[$5 + 88 >> 2] = $1;
 HEAP32[$5 + 84 >> 2] = $2;
 HEAP32[$5 + 80 >> 2] = $3;
 HEAP32[$5 + 76 >> 2] = $4;
 HEAP32[$5 + 72 >> 2] = HEAP32[HEAP32[$5 + 92 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$5 + 88 >> 2] + 4 >> 2] + 4 >> 2], 56);
 HEAP32[$5 + 68 >> 2] = HEAP32[HEAP32[$5 + 84 >> 2] + 8 >> 2];
 HEAP32[$5 + 64 >> 2] = HEAP32[HEAP32[$5 + 72 >> 2] + 8 >> 2];
 HEAP32[$5 + 60 >> 2] = HEAP32[HEAP32[$5 + 68 >> 2] >> 2];
 if (HEAP32[$5 + 76 >> 2] < 0) {
  HEAP32[$5 + 76 >> 2] = tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$5 + 84 >> 2]) + HEAP32[$5 + 76 >> 2];
 }
 label$2 : {
  if (HEAP32[$5 + 76 >> 2] >= HEAP32[$5 + 60 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$5 + 56 >> 2] = 1;
 HEAP32[$5 + 52 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 52 >> 2] < HEAP32[$5 + 76 >> 2]) {
   HEAP32[$5 + 56 >> 2] = Math_imul(HEAP32[(HEAP32[$5 + 68 >> 2] + 4 | 0) + (HEAP32[$5 + 52 >> 2] << 2) >> 2], HEAP32[$5 + 56 >> 2]);
   HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$5 + 48 >> 2] = 1;
 HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
 while (1) {
  if (HEAP32[$5 + 44 >> 2] < HEAP32[$5 + 60 >> 2]) {
   HEAP32[$5 + 48 >> 2] = Math_imul(HEAP32[(HEAP32[$5 + 68 >> 2] + 4 | 0) + (HEAP32[$5 + 44 >> 2] << 2) >> 2], HEAP32[$5 + 48 >> 2]);
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 44 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$5 + 40 >> 2] = 1;
 HEAP32[$5 + 36 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 36 >> 2] < HEAP32[HEAP32[$5 + 64 >> 2] >> 2]) {
   HEAP32[$5 + 40 >> 2] = Math_imul(HEAP32[(HEAP32[$5 + 64 >> 2] + 4 | 0) + (HEAP32[$5 + 36 >> 2] << 2) >> 2], HEAP32[$5 + 40 >> 2]);
   HEAP32[$5 + 36 >> 2] = HEAP32[$5 + 36 >> 2] + 1;
   continue;
  }
  break;
 }
 label$9 : {
  if (HEAP32[$5 + 40 >> 2] != (Math_imul(HEAP32[$5 + 48 >> 2], HEAP32[$5 + 56 >> 2]) | 0)) {
   break label$9;
  }
 }
 HEAP32[$5 + 32 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$5 + 84 >> 2]);
 HEAP32[$5 + 28 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 28 >> 2] < HEAP32[$5 + 80 >> 2]) {
   HEAP32[$5 + 24 >> 2] = HEAP32[HEAP32[$5 + 92 >> 2] + 8 >> 2] + Math_imul(HEAP32[(HEAP32[HEAP32[$5 + 88 >> 2] + 4 >> 2] + 4 | 0) + (HEAP32[$5 + 28 >> 2] << 2) >> 2], 56);
   HEAP32[$5 + 20 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$5 + 24 >> 2]);
   HEAP32[$5 + 16 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 56 >> 2]) {
     HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 20 >> 2] + (Math_imul(HEAP32[$5 + 48 >> 2], HEAP32[$5 + 16 >> 2]) << 2);
     HEAP32[$5 + 8 >> 2] = Math_imul(HEAP32[$5 + 48 >> 2], Math_imul(HEAP32[$5 + 16 >> 2], HEAP32[$5 + 80 >> 2])) + Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 48 >> 2]);
     HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 32 >> 2] + (HEAP32[$5 + 8 >> 2] << 2);
     HEAP32[$5 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 >> 2] < HEAP32[$5 + 48 >> 2]) {
       HEAPF32[HEAP32[$5 + 12 >> 2] + (HEAP32[$5 >> 2] << 2) >> 2] = HEAPF32[HEAP32[$5 + 4 >> 2] + (HEAP32[$5 >> 2] << 2) >> 2];
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 + 96 | 0;
 return 0;
}
function TfLiteStatus_20tflite__ops__micro__unpack___28anonymous_20namespace_29__UnpackImpl_int__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor_20const__2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 96 | 0;
 global$0 = $5;
 HEAP32[$5 + 92 >> 2] = $0;
 HEAP32[$5 + 88 >> 2] = $1;
 HEAP32[$5 + 84 >> 2] = $2;
 HEAP32[$5 + 80 >> 2] = $3;
 HEAP32[$5 + 76 >> 2] = $4;
 HEAP32[$5 + 72 >> 2] = HEAP32[HEAP32[$5 + 92 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$5 + 88 >> 2] + 4 >> 2] + 4 >> 2], 56);
 HEAP32[$5 + 68 >> 2] = HEAP32[HEAP32[$5 + 84 >> 2] + 8 >> 2];
 HEAP32[$5 + 64 >> 2] = HEAP32[HEAP32[$5 + 72 >> 2] + 8 >> 2];
 HEAP32[$5 + 60 >> 2] = HEAP32[HEAP32[$5 + 68 >> 2] >> 2];
 if (HEAP32[$5 + 76 >> 2] < 0) {
  HEAP32[$5 + 76 >> 2] = tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$5 + 84 >> 2]) + HEAP32[$5 + 76 >> 2];
 }
 label$2 : {
  if (HEAP32[$5 + 76 >> 2] >= HEAP32[$5 + 60 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$5 + 56 >> 2] = 1;
 HEAP32[$5 + 52 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 52 >> 2] < HEAP32[$5 + 76 >> 2]) {
   HEAP32[$5 + 56 >> 2] = Math_imul(HEAP32[(HEAP32[$5 + 68 >> 2] + 4 | 0) + (HEAP32[$5 + 52 >> 2] << 2) >> 2], HEAP32[$5 + 56 >> 2]);
   HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$5 + 48 >> 2] = 1;
 HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
 while (1) {
  if (HEAP32[$5 + 44 >> 2] < HEAP32[$5 + 60 >> 2]) {
   HEAP32[$5 + 48 >> 2] = Math_imul(HEAP32[(HEAP32[$5 + 68 >> 2] + 4 | 0) + (HEAP32[$5 + 44 >> 2] << 2) >> 2], HEAP32[$5 + 48 >> 2]);
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 44 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$5 + 40 >> 2] = 1;
 HEAP32[$5 + 36 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 36 >> 2] < HEAP32[HEAP32[$5 + 64 >> 2] >> 2]) {
   HEAP32[$5 + 40 >> 2] = Math_imul(HEAP32[(HEAP32[$5 + 64 >> 2] + 4 | 0) + (HEAP32[$5 + 36 >> 2] << 2) >> 2], HEAP32[$5 + 40 >> 2]);
   HEAP32[$5 + 36 >> 2] = HEAP32[$5 + 36 >> 2] + 1;
   continue;
  }
  break;
 }
 label$9 : {
  if (HEAP32[$5 + 40 >> 2] != (Math_imul(HEAP32[$5 + 48 >> 2], HEAP32[$5 + 56 >> 2]) | 0)) {
   break label$9;
  }
 }
 HEAP32[$5 + 32 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$5 + 84 >> 2]);
 HEAP32[$5 + 28 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 28 >> 2] < HEAP32[$5 + 80 >> 2]) {
   HEAP32[$5 + 24 >> 2] = HEAP32[HEAP32[$5 + 92 >> 2] + 8 >> 2] + Math_imul(HEAP32[(HEAP32[HEAP32[$5 + 88 >> 2] + 4 >> 2] + 4 | 0) + (HEAP32[$5 + 28 >> 2] << 2) >> 2], 56);
   HEAP32[$5 + 20 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$5 + 24 >> 2]);
   HEAP32[$5 + 16 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 56 >> 2]) {
     HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 20 >> 2] + (Math_imul(HEAP32[$5 + 48 >> 2], HEAP32[$5 + 16 >> 2]) << 2);
     HEAP32[$5 + 8 >> 2] = Math_imul(HEAP32[$5 + 48 >> 2], Math_imul(HEAP32[$5 + 16 >> 2], HEAP32[$5 + 80 >> 2])) + Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 48 >> 2]);
     HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 32 >> 2] + (HEAP32[$5 + 8 >> 2] << 2);
     HEAP32[$5 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 >> 2] < HEAP32[$5 + 48 >> 2]) {
       HEAP32[HEAP32[$5 + 12 >> 2] + (HEAP32[$5 >> 2] << 2) >> 2] = HEAP32[HEAP32[$5 + 4 >> 2] + (HEAP32[$5 >> 2] << 2) >> 2];
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 + 96 | 0;
 return 0;
}
function void_20tflite__reference_ops__MaximumMinimumBroadcast4DSlow_signed_20char_2c_20signed_20char_20_28__29_28signed_20char_2c_20signed_20char_29__28tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__2c_20signed_20char_20_28__29_28signed_20char_2c_20signed_20char_29_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = global$0 - 160 | 0;
 global$0 = $7;
 HEAP32[$7 + 156 >> 2] = $0;
 HEAP32[$7 + 152 >> 2] = $1;
 HEAP32[$7 + 148 >> 2] = $2;
 HEAP32[$7 + 144 >> 2] = $3;
 HEAP32[$7 + 140 >> 2] = $4;
 HEAP32[$7 + 136 >> 2] = $5;
 HEAP32[$7 + 132 >> 2] = $6;
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$7 + 156 >> 2]) | 0) > 4) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$7 + 148 >> 2]) | 0) > 4) {
   break label$2;
  }
 }
 label$3 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$7 + 140 >> 2]) | 0) > 4) {
   break label$3;
  }
 }
 $0 = $7 + 80 | 0;
 $1 = $7 + 48 | 0;
 tflite__RuntimeShape__ExtendedShape_28int_2c_20tflite__RuntimeShape_20const__29($7 + 112 | 0, 4, HEAP32[$7 + 140 >> 2]);
 void_20tflite__NdArrayDescsForElementwiseBroadcast_4__28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__2c_20tflite__NdArrayDesc_4___2c_20tflite__NdArrayDesc_4___29(HEAP32[$7 + 156 >> 2], HEAP32[$7 + 148 >> 2], $0, $1);
 HEAP32[$7 + 36 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 36 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 112 | 0, 0) | 0)) {
   HEAP32[$7 + 32 >> 2] = 0;
   while (1) {
    if (HEAP32[$7 + 32 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 112 | 0, 1) | 0)) {
     HEAP32[$7 + 28 >> 2] = 0;
     while (1) {
      if (HEAP32[$7 + 28 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 112 | 0, 2) | 0)) {
       HEAP32[$7 + 24 >> 2] = 0;
       while (1) {
        if (HEAP32[$7 + 24 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 112 | 0, 3) | 0)) {
         HEAP32[$7 + 20 >> 2] = tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 112 | 0, HEAP32[$7 + 36 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 28 >> 2], HEAP32[$7 + 24 >> 2]);
         HEAP32[$7 + 16 >> 2] = tflite__SubscriptToIndex_28tflite__NdArrayDesc_4__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 80 | 0, HEAP32[$7 + 36 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 28 >> 2], HEAP32[$7 + 24 >> 2]);
         HEAP32[$7 + 12 >> 2] = tflite__SubscriptToIndex_28tflite__NdArrayDesc_4__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 48 | 0, HEAP32[$7 + 36 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 28 >> 2], HEAP32[$7 + 24 >> 2]);
         HEAP8[$7 + 11 | 0] = HEAPU8[HEAP32[$7 + 152 >> 2] + HEAP32[$7 + 16 >> 2] | 0];
         HEAP8[$7 + 10 | 0] = HEAPU8[HEAP32[$7 + 144 >> 2] + HEAP32[$7 + 12 >> 2] | 0];
         $0 = FUNCTION_TABLE[HEAP32[$7 + 132 >> 2]](HEAP8[$7 + 11 | 0], HEAP8[$7 + 10 | 0]) | 0;
         HEAP8[HEAP32[$7 + 136 >> 2] + HEAP32[$7 + 20 >> 2] | 0] = $0;
         HEAP32[$7 + 24 >> 2] = HEAP32[$7 + 24 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$7 + 28 >> 2] = HEAP32[$7 + 28 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$7 + 32 >> 2] = HEAP32[$7 + 32 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$7 + 36 >> 2] = HEAP32[$7 + 36 >> 2] + 1;
   continue;
  }
  break;
 }
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 112 | 0);
 global$0 = $7 + 160 | 0;
}
function tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__CalculateOpData_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLiteType_2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = global$0 - 144 | 0;
 global$0 = $9;
 HEAP32[$9 + 136 >> 2] = $0;
 HEAP32[$9 + 132 >> 2] = $1;
 HEAP32[$9 + 128 >> 2] = $2;
 HEAP32[$9 + 124 >> 2] = $3;
 HEAP32[$9 + 120 >> 2] = $4;
 HEAP32[$9 + 116 >> 2] = $5;
 HEAP32[$9 + 112 >> 2] = $6;
 HEAP32[$9 + 108 >> 2] = $7;
 HEAP32[$9 + 104 >> 2] = $8;
 HEAP8[$9 + 103 | 0] = HEAP32[HEAP32[HEAP32[$9 + 132 >> 2] >> 2] >> 2] == 3;
 label$1 : {
  if (!(HEAP8[$9 + 103 | 0] & 1 | HEAP32[HEAP32[HEAP32[$9 + 132 >> 2] >> 2] >> 2] == 2)) {
   $0 = HEAP32[HEAP32[$9 + 136 >> 2] + 20 >> 2];
   $1 = HEAP32[$9 + 136 >> 2];
   HEAP32[$9 + 40 >> 2] = 42954;
   HEAP32[$9 + 36 >> 2] = 64;
   HEAP32[$9 + 32 >> 2] = 42699;
   FUNCTION_TABLE[$0]($1, 42856, $9 + 32 | 0);
   HEAP32[$9 + 140 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[HEAP32[$9 + 132 >> 2] + 4 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$9 + 136 >> 2] + 20 >> 2];
   $1 = HEAP32[$9 + 136 >> 2];
   $2 = HEAP32[HEAP32[HEAP32[$9 + 132 >> 2] + 4 >> 2] >> 2];
   HEAP32[$9 + 20 >> 2] = 1;
   HEAP32[$9 + 16 >> 2] = $2;
   HEAP32[$9 + 12 >> 2] = 43010;
   HEAP32[$9 + 8 >> 2] = 42990;
   HEAP32[$9 + 4 >> 2] = 65;
   HEAP32[$9 >> 2] = 42699;
   FUNCTION_TABLE[$0]($1, 42673, $9);
   HEAP32[$9 + 140 >> 2] = 1;
   break label$1;
  }
  $0 = $9 + 72 | 0;
  tflite__ComputePaddingHeightWidth_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLitePadding_2c_20int__2c_20int__29($0, HEAP32[HEAP32[$9 + 128 >> 2] + 8 >> 2], HEAP32[HEAP32[$9 + 128 >> 2] + 4 >> 2], 1, 1, HEAP32[$9 + 120 >> 2], HEAP32[$9 + 124 >> 2], HEAP32[$9 + 112 >> 2], HEAP32[$9 + 116 >> 2], HEAP32[HEAP32[$9 + 128 >> 2] >> 2], $9 + 96 | 0, $9 + 92 | 0);
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$9 + 104 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $2 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  if (HEAP32[$9 + 108 >> 2] != 1) {
   HEAP32[$9 + 68 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$9 + 136 >> 2], HEAP32[$9 + 132 >> 2], 0);
   HEAP32[$9 + 64 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$9 + 136 >> 2], HEAP32[$9 + 132 >> 2], 1);
   HEAP32[$9 + 60 >> 2] = tflite__GetOptionalInputTensor_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$9 + 136 >> 2], HEAP32[$9 + 132 >> 2], 2);
   HEAP32[$9 + 56 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$9 + 136 >> 2], HEAP32[$9 + 132 >> 2]);
   if (tflite__PopulateConvolutionQuantizationParams_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteFusedActivation_20const__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int__29(HEAP32[$9 + 136 >> 2], HEAP32[$9 + 68 >> 2], HEAP32[$9 + 64 >> 2], HEAP32[$9 + 60 >> 2], HEAP32[$9 + 56 >> 2], HEAP32[$9 + 128 >> 2] + 16 | 0, HEAP32[$9 + 104 >> 2] + 16 | 0, HEAP32[$9 + 104 >> 2] + 20 | 0, HEAP32[$9 + 104 >> 2] + 536 | 0, HEAP32[$9 + 104 >> 2] + 540 | 0, HEAP32[$9 + 104 >> 2] + 24 | 0, HEAP32[$9 + 104 >> 2] + 280 | 0)) {
    HEAP32[$9 + 140 >> 2] = 1;
    break label$1;
   }
  }
  HEAP32[$9 + 140 >> 2] = 0;
 }
 global$0 = $9 + 144 | 0;
 return HEAP32[$9 + 140 >> 2];
}
function TfLiteStatus_20tflite__ops__micro__unpack___28anonymous_20namespace_29__UnpackImpl_unsigned_20char__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor_20const__2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 96 | 0;
 global$0 = $5;
 HEAP32[$5 + 92 >> 2] = $0;
 HEAP32[$5 + 88 >> 2] = $1;
 HEAP32[$5 + 84 >> 2] = $2;
 HEAP32[$5 + 80 >> 2] = $3;
 HEAP32[$5 + 76 >> 2] = $4;
 HEAP32[$5 + 72 >> 2] = HEAP32[HEAP32[$5 + 92 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$5 + 88 >> 2] + 4 >> 2] + 4 >> 2], 56);
 HEAP32[$5 + 68 >> 2] = HEAP32[HEAP32[$5 + 84 >> 2] + 8 >> 2];
 HEAP32[$5 + 64 >> 2] = HEAP32[HEAP32[$5 + 72 >> 2] + 8 >> 2];
 HEAP32[$5 + 60 >> 2] = HEAP32[HEAP32[$5 + 68 >> 2] >> 2];
 if (HEAP32[$5 + 76 >> 2] < 0) {
  HEAP32[$5 + 76 >> 2] = tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$5 + 84 >> 2]) + HEAP32[$5 + 76 >> 2];
 }
 label$2 : {
  if (HEAP32[$5 + 76 >> 2] >= HEAP32[$5 + 60 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$5 + 56 >> 2] = 1;
 HEAP32[$5 + 52 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 52 >> 2] < HEAP32[$5 + 76 >> 2]) {
   HEAP32[$5 + 56 >> 2] = Math_imul(HEAP32[(HEAP32[$5 + 68 >> 2] + 4 | 0) + (HEAP32[$5 + 52 >> 2] << 2) >> 2], HEAP32[$5 + 56 >> 2]);
   HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$5 + 48 >> 2] = 1;
 HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
 while (1) {
  if (HEAP32[$5 + 44 >> 2] < HEAP32[$5 + 60 >> 2]) {
   HEAP32[$5 + 48 >> 2] = Math_imul(HEAP32[(HEAP32[$5 + 68 >> 2] + 4 | 0) + (HEAP32[$5 + 44 >> 2] << 2) >> 2], HEAP32[$5 + 48 >> 2]);
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 44 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$5 + 40 >> 2] = 1;
 HEAP32[$5 + 36 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 36 >> 2] < HEAP32[HEAP32[$5 + 64 >> 2] >> 2]) {
   HEAP32[$5 + 40 >> 2] = Math_imul(HEAP32[(HEAP32[$5 + 64 >> 2] + 4 | 0) + (HEAP32[$5 + 36 >> 2] << 2) >> 2], HEAP32[$5 + 40 >> 2]);
   HEAP32[$5 + 36 >> 2] = HEAP32[$5 + 36 >> 2] + 1;
   continue;
  }
  break;
 }
 label$9 : {
  if (HEAP32[$5 + 40 >> 2] != (Math_imul(HEAP32[$5 + 48 >> 2], HEAP32[$5 + 56 >> 2]) | 0)) {
   break label$9;
  }
 }
 HEAP32[$5 + 32 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$5 + 84 >> 2]);
 HEAP32[$5 + 28 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 28 >> 2] < HEAP32[$5 + 80 >> 2]) {
   HEAP32[$5 + 24 >> 2] = HEAP32[HEAP32[$5 + 92 >> 2] + 8 >> 2] + Math_imul(HEAP32[(HEAP32[HEAP32[$5 + 88 >> 2] + 4 >> 2] + 4 | 0) + (HEAP32[$5 + 28 >> 2] << 2) >> 2], 56);
   HEAP32[$5 + 20 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$5 + 24 >> 2]);
   HEAP32[$5 + 16 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 56 >> 2]) {
     HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 20 >> 2] + Math_imul(HEAP32[$5 + 48 >> 2], HEAP32[$5 + 16 >> 2]);
     HEAP32[$5 + 8 >> 2] = Math_imul(HEAP32[$5 + 48 >> 2], Math_imul(HEAP32[$5 + 16 >> 2], HEAP32[$5 + 80 >> 2])) + Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 48 >> 2]);
     HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 32 >> 2] + HEAP32[$5 + 8 >> 2];
     HEAP32[$5 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 >> 2] < HEAP32[$5 + 48 >> 2]) {
       HEAP8[HEAP32[$5 + 12 >> 2] + HEAP32[$5 >> 2] | 0] = HEAPU8[HEAP32[$5 + 4 >> 2] + HEAP32[$5 >> 2] | 0];
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 + 96 | 0;
 return 0;
}
function void_20tflite__reference_ops__MaximumMinimumBroadcast4DSlow_float_2c_20float_20_28__29_28float_2c_20float_29__28tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__2c_20float_20_28__29_28float_2c_20float_29_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = Math_fround(0);
 $7 = global$0 - 160 | 0;
 global$0 = $7;
 HEAP32[$7 + 156 >> 2] = $0;
 HEAP32[$7 + 152 >> 2] = $1;
 HEAP32[$7 + 148 >> 2] = $2;
 HEAP32[$7 + 144 >> 2] = $3;
 HEAP32[$7 + 140 >> 2] = $4;
 HEAP32[$7 + 136 >> 2] = $5;
 HEAP32[$7 + 132 >> 2] = $6;
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$7 + 156 >> 2]) | 0) > 4) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$7 + 148 >> 2]) | 0) > 4) {
   break label$2;
  }
 }
 label$3 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$7 + 140 >> 2]) | 0) > 4) {
   break label$3;
  }
 }
 $0 = $7 + 80 | 0;
 $1 = $7 + 48 | 0;
 tflite__RuntimeShape__ExtendedShape_28int_2c_20tflite__RuntimeShape_20const__29($7 + 112 | 0, 4, HEAP32[$7 + 140 >> 2]);
 void_20tflite__NdArrayDescsForElementwiseBroadcast_4__28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__2c_20tflite__NdArrayDesc_4___2c_20tflite__NdArrayDesc_4___29(HEAP32[$7 + 156 >> 2], HEAP32[$7 + 148 >> 2], $0, $1);
 HEAP32[$7 + 36 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 36 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 112 | 0, 0) | 0)) {
   HEAP32[$7 + 32 >> 2] = 0;
   while (1) {
    if (HEAP32[$7 + 32 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 112 | 0, 1) | 0)) {
     HEAP32[$7 + 28 >> 2] = 0;
     while (1) {
      if (HEAP32[$7 + 28 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 112 | 0, 2) | 0)) {
       HEAP32[$7 + 24 >> 2] = 0;
       while (1) {
        if (HEAP32[$7 + 24 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 112 | 0, 3) | 0)) {
         HEAP32[$7 + 20 >> 2] = tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 112 | 0, HEAP32[$7 + 36 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 28 >> 2], HEAP32[$7 + 24 >> 2]);
         HEAP32[$7 + 16 >> 2] = tflite__SubscriptToIndex_28tflite__NdArrayDesc_4__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 80 | 0, HEAP32[$7 + 36 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 28 >> 2], HEAP32[$7 + 24 >> 2]);
         HEAP32[$7 + 12 >> 2] = tflite__SubscriptToIndex_28tflite__NdArrayDesc_4__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 48 | 0, HEAP32[$7 + 36 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 28 >> 2], HEAP32[$7 + 24 >> 2]);
         HEAPF32[$7 + 8 >> 2] = HEAPF32[HEAP32[$7 + 152 >> 2] + (HEAP32[$7 + 16 >> 2] << 2) >> 2];
         HEAPF32[$7 + 4 >> 2] = HEAPF32[HEAP32[$7 + 144 >> 2] + (HEAP32[$7 + 12 >> 2] << 2) >> 2];
         $8 = Math_fround(FUNCTION_TABLE[HEAP32[$7 + 132 >> 2]](HEAPF32[$7 + 8 >> 2], HEAPF32[$7 + 4 >> 2]));
         HEAPF32[HEAP32[$7 + 136 >> 2] + (HEAP32[$7 + 20 >> 2] << 2) >> 2] = $8;
         HEAP32[$7 + 24 >> 2] = HEAP32[$7 + 24 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$7 + 28 >> 2] = HEAP32[$7 + 28 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$7 + 32 >> 2] = HEAP32[$7 + 32 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$7 + 36 >> 2] = HEAP32[$7 + 36 >> 2] + 1;
   continue;
  }
  break;
 }
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 112 | 0);
 global$0 = $7 + 160 | 0;
}
function TfLiteStatus_20tflite__ops__micro__pack___28anonymous_20namespace_29__PackImpl_long_20long__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor__2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 96 | 0;
 global$0 = $5;
 HEAP32[$5 + 92 >> 2] = $0;
 HEAP32[$5 + 88 >> 2] = $1;
 HEAP32[$5 + 84 >> 2] = $2;
 HEAP32[$5 + 80 >> 2] = $3;
 HEAP32[$5 + 76 >> 2] = $4;
 HEAP32[$5 + 72 >> 2] = HEAP32[HEAP32[HEAP32[$5 + 84 >> 2] + 8 >> 2] >> 2];
 HEAP32[$5 + 68 >> 2] = HEAP32[HEAP32[$5 + 92 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$5 + 88 >> 2] >> 2] + 4 >> 2], 56);
 HEAP32[$5 + 64 >> 2] = HEAP32[HEAP32[$5 + 68 >> 2] + 8 >> 2];
 HEAP32[$5 + 60 >> 2] = HEAP32[HEAP32[$5 + 84 >> 2] + 8 >> 2];
 if (HEAP32[$5 + 76 >> 2] < 0) {
  HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 76 >> 2];
 }
 HEAP32[$5 + 56 >> 2] = 1;
 HEAP32[$5 + 52 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 52 >> 2] < HEAP32[$5 + 76 >> 2]) {
   HEAP32[$5 + 56 >> 2] = Math_imul(HEAP32[(HEAP32[$5 + 60 >> 2] + 4 | 0) + (HEAP32[$5 + 52 >> 2] << 2) >> 2], HEAP32[$5 + 56 >> 2]);
   HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$5 + 48 >> 2] = 1;
 HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
 while (1) {
  if (HEAP32[$5 + 44 >> 2] < HEAP32[$5 + 72 >> 2]) {
   HEAP32[$5 + 48 >> 2] = Math_imul(HEAP32[(HEAP32[$5 + 60 >> 2] + 4 | 0) + (HEAP32[$5 + 44 >> 2] << 2) >> 2], HEAP32[$5 + 48 >> 2]);
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 44 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$5 + 40 >> 2] = 1;
 HEAP32[$5 + 36 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 36 >> 2] < HEAP32[HEAP32[$5 + 64 >> 2] >> 2]) {
   HEAP32[$5 + 40 >> 2] = Math_imul(HEAP32[(HEAP32[$5 + 64 >> 2] + 4 | 0) + (HEAP32[$5 + 36 >> 2] << 2) >> 2], HEAP32[$5 + 40 >> 2]);
   HEAP32[$5 + 36 >> 2] = HEAP32[$5 + 36 >> 2] + 1;
   continue;
  }
  break;
 }
 label$8 : {
  if (HEAP32[$5 + 40 >> 2] != (Math_imul(HEAP32[$5 + 48 >> 2], HEAP32[$5 + 56 >> 2]) | 0)) {
   break label$8;
  }
 }
 HEAP32[$5 + 32 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$5 + 84 >> 2]);
 HEAP32[$5 + 28 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 28 >> 2] < HEAP32[$5 + 80 >> 2]) {
   HEAP32[$5 + 24 >> 2] = HEAP32[HEAP32[$5 + 92 >> 2] + 8 >> 2] + Math_imul(HEAP32[(HEAP32[HEAP32[$5 + 88 >> 2] >> 2] + 4 | 0) + (HEAP32[$5 + 28 >> 2] << 2) >> 2], 56);
   HEAP32[$5 + 20 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$5 + 24 >> 2]);
   HEAP32[$5 + 16 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 56 >> 2]) {
     HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 20 >> 2] + (Math_imul(HEAP32[$5 + 48 >> 2], HEAP32[$5 + 16 >> 2]) << 3);
     HEAP32[$5 + 8 >> 2] = Math_imul(HEAP32[$5 + 48 >> 2], Math_imul(HEAP32[$5 + 16 >> 2], HEAP32[$5 + 80 >> 2])) + Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 48 >> 2]);
     HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 32 >> 2] + (HEAP32[$5 + 8 >> 2] << 3);
     HEAP32[$5 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 >> 2] < HEAP32[$5 + 48 >> 2]) {
       $1 = HEAP32[$5 + 12 >> 2] + (HEAP32[$5 >> 2] << 3) | 0;
       $2 = HEAP32[$1 + 4 >> 2];
       $0 = HEAP32[$5 + 4 >> 2] + (HEAP32[$5 >> 2] << 3) | 0;
       HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
       HEAP32[$0 + 4 >> 2] = $2;
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 + 96 | 0;
 return 0;
}
function jspeFactorMember($0, $1) {
 var $2 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 68 >> 2] = $1;
 HEAP32[$2 + 64 >> 2] = 0;
 label$1 : {
  while (1) {
   if (HEAP16[HEAP32[13768] + 2 >> 1] != 46 ? HEAP16[HEAP32[13768] + 2 >> 1] == 91 : 1) {
    if (HEAP16[HEAP32[13768] + 2 >> 1] == 46) {
     jslGetNextToken();
     label$7 : {
      if (jslIsIDOrReservedWord() & 1) {
       if ((HEAP32[23778] & 63) == 1) {
        HEAP32[$2 + 60 >> 2] = jslGetTokenValueAsString();
        HEAP32[$2 + 56 >> 2] = jsvSkipNameWithParent(HEAP32[$2 + 72 >> 2], 1, HEAP32[$2 + 64 >> 2]);
        HEAP32[$2 + 52 >> 2] = 0;
        if (HEAP32[$2 + 56 >> 2]) {
         HEAP32[$2 + 52 >> 2] = jspGetNamedField(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 60 >> 2], 1);
        }
        if (!HEAP32[$2 + 52 >> 2]) {
         label$12 : {
          if (!(jsvIsUndefined(HEAP32[$2 + 56 >> 2]) & 1)) {
           HEAP32[$2 + 48 >> 2] = jslGetTokenValueAsVar();
           HEAP32[$2 + 52 >> 2] = jsvCreateNewChild(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 48 >> 2], 0);
           jsvUnLock(HEAP32[$2 + 48 >> 2]);
           break label$12;
          }
          HEAP32[$2 >> 2] = HEAP32[$2 + 60 >> 2];
          jsExceptionHere(1, 4125, $2);
         }
        }
        jsvUnLock(HEAP32[$2 + 64 >> 2]);
        HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 56 >> 2];
        jsvUnLock(HEAP32[$2 + 72 >> 2]);
        HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 52 >> 2];
       }
       jslGetNextToken();
       break label$7;
      }
      if (!(jslMatch(128) & 1)) {
       HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 72 >> 2];
       break label$1;
      }
     }
     continue;
    }
    if (HEAP16[HEAP32[13768] + 2 >> 1] == 91) {
     jslGetNextToken();
     if (!(jspCheckStackPosition() & 1)) {
      HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 64 >> 2];
      break label$1;
     }
     HEAP32[$2 + 44 >> 2] = jsvSkipNameAndUnLock(__jspeAssignmentExpression(jspeConditionalExpression()));
     if (!(jslMatch(93) & 1)) {
      jsvUnLock2(HEAP32[$2 + 64 >> 2], HEAP32[$2 + 44 >> 2]);
      HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 72 >> 2];
      break label$1;
     }
     if ((HEAP32[23778] & 63) == 1) {
      HEAP32[$2 + 44 >> 2] = jsvAsArrayIndexAndUnLock(HEAP32[$2 + 44 >> 2]);
      HEAP32[$2 + 40 >> 2] = jsvSkipNameWithParent(HEAP32[$2 + 72 >> 2], 1, HEAP32[$2 + 64 >> 2]);
      HEAP32[$2 + 36 >> 2] = 0;
      if (HEAP32[$2 + 40 >> 2]) {
       HEAP32[$2 + 36 >> 2] = jspGetVarNamedField(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 44 >> 2], 1);
      }
      if (!HEAP32[$2 + 36 >> 2]) {
       label$21 : {
        if (jsvHasChildren(HEAP32[$2 + 40 >> 2]) & 1) {
         HEAP32[$2 + 36 >> 2] = jsvCreateNewChild(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 44 >> 2], 0);
         break label$21;
        }
        $0 = HEAP32[$2 + 44 >> 2];
        HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 40 >> 2];
        HEAP32[$2 + 16 >> 2] = $0;
        jsExceptionHere(1, 4164, $2 + 16 | 0);
       }
      }
      jsvUnLock(HEAP32[$2 + 64 >> 2]);
      HEAP32[$2 + 64 >> 2] = jsvLockAgainSafe(HEAP32[$2 + 40 >> 2]);
      jsvUnLock(HEAP32[$2 + 72 >> 2]);
      HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 36 >> 2];
      jsvUnLock(HEAP32[$2 + 40 >> 2]);
     }
     jsvUnLock(HEAP32[$2 + 44 >> 2]);
    }
    continue;
   }
   break;
  }
  label$23 : {
   if (HEAP32[$2 + 68 >> 2]) {
    HEAP32[HEAP32[$2 + 68 >> 2] >> 2] = HEAP32[$2 + 64 >> 2];
    break label$23;
   }
   jsvUnLock(HEAP32[$2 + 64 >> 2]);
  }
  HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 72 >> 2];
 }
 global$0 = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}
function TfLiteStatus_20tflite__ops__micro__strided_slice__Eval__28tflite__ops__micro__strided_slice__KernelType_290__28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 240 | 0;
 global$0 = $2;
 HEAP32[$2 + 232 >> 2] = $0;
 HEAP32[$2 + 228 >> 2] = $1;
 tflite__ops__micro__strided_slice__StridedSliceContext__StridedSliceContext_28TfLiteContext__2c_20TfLiteNode__29($2 + 200 | 0, HEAP32[$2 + 232 >> 2], HEAP32[$2 + 228 >> 2]);
 tflite__ops__micro__strided_slice__BuildStridedSliceParams_28tflite__ops__micro__strided_slice__StridedSliceContext__29($2 + 160 | 0, $2 + 200 | 0);
 label$1 : {
  label$2 : {
   label$3 : {
    $0 = HEAP32[HEAP32[$2 + 204 >> 2] >> 2] + -1 | 0;
    if ($0 >>> 0 > 8) {
     break label$3;
    }
    label$4 : {
     switch ($0 - 1 | 0) {
     default:
      tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 136 | 0, HEAP32[$2 + 204 >> 2]);
      $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 204 >> 2]);
      tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 104 | 0, HEAP32[$2 + 220 >> 2]);
      void_20tflite__reference_ops__StridedSlice_float__28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($2 + 160 | 0, $2 + 136 | 0, $0, $2 + 104 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 220 >> 2]));
      $0 = $2 + 136 | 0;
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 104 | 0);
      break label$2;
     case 1:
      tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 80 | 0, HEAP32[$2 + 204 >> 2]);
      $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 204 >> 2]);
      tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 56 | 0, HEAP32[$2 + 220 >> 2]);
      void_20tflite__reference_ops__StridedSlice_unsigned_20char__28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($2 + 160 | 0, $2 + 80 | 0, $0, $2 + 56 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 220 >> 2]));
      $0 = $2 + 80 | 0;
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 56 | 0);
      break label$2;
     case 0:
     case 2:
     case 3:
     case 4:
     case 5:
     case 6:
      break label$3;
     case 7:
      break label$4;
     }
    }
    tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 32 | 0, HEAP32[$2 + 204 >> 2]);
    $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 204 >> 2]);
    tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 8 | 0, HEAP32[$2 + 220 >> 2]);
    void_20tflite__reference_ops__StridedSlice_unsigned_20char__28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($2 + 160 | 0, $2 + 32 | 0, $0, $2 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 220 >> 2]));
    $0 = $2 + 32 | 0;
    tflite__RuntimeShape___RuntimeShape_28_29($2 + 8 | 0);
    break label$2;
   }
   $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 232 >> 2];
   HEAP32[$2 >> 2] = HEAP32[HEAP32[$2 + 204 >> 2] >> 2];
   FUNCTION_TABLE[$0]($1, 48112, $2);
   HEAP32[$2 + 236 >> 2] = 1;
   break label$1;
  }
  tflite__RuntimeShape___RuntimeShape_28_29($0);
  HEAP32[$2 + 236 >> 2] = 0;
 }
 global$0 = $2 + 240 | 0;
 return HEAP32[$2 + 236 >> 2];
}
function tflite__ops__micro__activations__BroadcastPrelu4DSlowFloat_28tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = Math_fround(0);
 $6 = global$0 - 160 | 0;
 global$0 = $6;
 HEAP32[$6 + 156 >> 2] = $0;
 HEAP32[$6 + 152 >> 2] = $1;
 HEAP32[$6 + 148 >> 2] = $2;
 HEAP32[$6 + 144 >> 2] = $3;
 HEAP32[$6 + 140 >> 2] = $4;
 HEAP32[$6 + 136 >> 2] = $5;
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 156 >> 2]) | 0) > 4) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 148 >> 2]) | 0) > 4) {
   break label$2;
  }
 }
 label$3 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$6 + 140 >> 2]) | 0) > 4) {
   break label$3;
  }
 }
 $0 = $6 + 80 | 0;
 $1 = $6 + 48 | 0;
 tflite__RuntimeShape__ExtendedShape_28int_2c_20tflite__RuntimeShape_20const__29($6 + 112 | 0, 4, HEAP32[$6 + 140 >> 2]);
 void_20tflite__NdArrayDescsForElementwiseBroadcast_4__28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__2c_20tflite__NdArrayDesc_4___2c_20tflite__NdArrayDesc_4___29(HEAP32[$6 + 156 >> 2], HEAP32[$6 + 148 >> 2], $0, $1);
 HEAP32[$6 + 36 >> 2] = 0;
 while (1) {
  if (HEAP32[$6 + 36 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($6 + 112 | 0, 0) | 0)) {
   HEAP32[$6 + 32 >> 2] = 0;
   while (1) {
    if (HEAP32[$6 + 32 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($6 + 112 | 0, 1) | 0)) {
     HEAP32[$6 + 28 >> 2] = 0;
     while (1) {
      if (HEAP32[$6 + 28 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($6 + 112 | 0, 2) | 0)) {
       HEAP32[$6 + 24 >> 2] = 0;
       while (1) {
        if (HEAP32[$6 + 24 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($6 + 112 | 0, 3) | 0)) {
         HEAP32[$6 + 20 >> 2] = tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29($6 + 112 | 0, HEAP32[$6 + 36 >> 2], HEAP32[$6 + 32 >> 2], HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2]);
         HEAP32[$6 + 16 >> 2] = tflite__SubscriptToIndex_28tflite__NdArrayDesc_4__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($6 + 80 | 0, HEAP32[$6 + 36 >> 2], HEAP32[$6 + 32 >> 2], HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2]);
         HEAP32[$6 + 12 >> 2] = tflite__SubscriptToIndex_28tflite__NdArrayDesc_4__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($6 + 48 | 0, HEAP32[$6 + 36 >> 2], HEAP32[$6 + 32 >> 2], HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2]);
         HEAPF32[$6 + 8 >> 2] = HEAPF32[HEAP32[$6 + 152 >> 2] + (HEAP32[$6 + 16 >> 2] << 2) >> 2];
         HEAPF32[$6 + 4 >> 2] = HEAPF32[HEAP32[$6 + 144 >> 2] + (HEAP32[$6 + 12 >> 2] << 2) >> 2];
         $0 = HEAP32[$6 + 136 >> 2] + (HEAP32[$6 + 20 >> 2] << 2) | 0;
         if (+HEAPF32[$6 + 8 >> 2] >= 0) {
          $7 = HEAPF32[$6 + 8 >> 2];
         } else {
          $7 = Math_fround(HEAPF32[$6 + 8 >> 2] * HEAPF32[$6 + 4 >> 2]);
         }
         HEAPF32[$0 >> 2] = $7;
         HEAP32[$6 + 24 >> 2] = HEAP32[$6 + 24 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 28 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$6 + 32 >> 2] = HEAP32[$6 + 32 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 36 >> 2] + 1;
   continue;
  }
  break;
 }
 tflite__RuntimeShape___RuntimeShape_28_29($6 + 112 | 0);
 global$0 = $6 + 160 | 0;
}
function void_20tflite__reference_ops__MaximumMinimumBroadcast4DSlow_int_2c_20int_20_28__29_28int_2c_20int_29__28tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int__2c_20int_20_28__29_28int_2c_20int_29_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = global$0 - 160 | 0;
 global$0 = $7;
 HEAP32[$7 + 156 >> 2] = $0;
 HEAP32[$7 + 152 >> 2] = $1;
 HEAP32[$7 + 148 >> 2] = $2;
 HEAP32[$7 + 144 >> 2] = $3;
 HEAP32[$7 + 140 >> 2] = $4;
 HEAP32[$7 + 136 >> 2] = $5;
 HEAP32[$7 + 132 >> 2] = $6;
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$7 + 156 >> 2]) | 0) > 4) {
   break label$1;
  }
 }
 label$2 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$7 + 148 >> 2]) | 0) > 4) {
   break label$2;
  }
 }
 label$3 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$7 + 140 >> 2]) | 0) > 4) {
   break label$3;
  }
 }
 $0 = $7 + 80 | 0;
 $1 = $7 + 48 | 0;
 tflite__RuntimeShape__ExtendedShape_28int_2c_20tflite__RuntimeShape_20const__29($7 + 112 | 0, 4, HEAP32[$7 + 140 >> 2]);
 void_20tflite__NdArrayDescsForElementwiseBroadcast_4__28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__2c_20tflite__NdArrayDesc_4___2c_20tflite__NdArrayDesc_4___29(HEAP32[$7 + 156 >> 2], HEAP32[$7 + 148 >> 2], $0, $1);
 HEAP32[$7 + 36 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 36 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 112 | 0, 0) | 0)) {
   HEAP32[$7 + 32 >> 2] = 0;
   while (1) {
    if (HEAP32[$7 + 32 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 112 | 0, 1) | 0)) {
     HEAP32[$7 + 28 >> 2] = 0;
     while (1) {
      if (HEAP32[$7 + 28 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 112 | 0, 2) | 0)) {
       HEAP32[$7 + 24 >> 2] = 0;
       while (1) {
        if (HEAP32[$7 + 24 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 112 | 0, 3) | 0)) {
         HEAP32[$7 + 20 >> 2] = tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 112 | 0, HEAP32[$7 + 36 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 28 >> 2], HEAP32[$7 + 24 >> 2]);
         HEAP32[$7 + 16 >> 2] = tflite__SubscriptToIndex_28tflite__NdArrayDesc_4__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 80 | 0, HEAP32[$7 + 36 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 28 >> 2], HEAP32[$7 + 24 >> 2]);
         HEAP32[$7 + 12 >> 2] = tflite__SubscriptToIndex_28tflite__NdArrayDesc_4__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 48 | 0, HEAP32[$7 + 36 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 28 >> 2], HEAP32[$7 + 24 >> 2]);
         HEAP32[$7 + 8 >> 2] = HEAP32[HEAP32[$7 + 152 >> 2] + (HEAP32[$7 + 16 >> 2] << 2) >> 2];
         HEAP32[$7 + 4 >> 2] = HEAP32[HEAP32[$7 + 144 >> 2] + (HEAP32[$7 + 12 >> 2] << 2) >> 2];
         $0 = FUNCTION_TABLE[HEAP32[$7 + 132 >> 2]](HEAP32[$7 + 8 >> 2], HEAP32[$7 + 4 >> 2]) | 0;
         HEAP32[HEAP32[$7 + 136 >> 2] + (HEAP32[$7 + 20 >> 2] << 2) >> 2] = $0;
         HEAP32[$7 + 24 >> 2] = HEAP32[$7 + 24 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$7 + 28 >> 2] = HEAP32[$7 + 28 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$7 + 32 >> 2] = HEAP32[$7 + 32 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$7 + 36 >> 2] = HEAP32[$7 + 36 >> 2] + 1;
   continue;
  }
  break;
 }
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 112 | 0);
 global$0 = $7 + 160 | 0;
}
function tflite__ops__micro__svdf__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 HEAP32[$2 + 48 >> 2] = HEAP32[HEAP32[$2 + 52 >> 2] + 20 >> 2];
 HEAP32[$2 + 44 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 0);
 HEAP32[$2 + 40 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 1);
 HEAP32[$2 + 36 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 2);
 HEAP32[$2 + 32 >> 2] = tflite__GetOptionalInputTensor_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 3);
 HEAP32[$2 + 28 >> 2] = HEAP32[HEAP32[$2 + 56 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$2 + 52 >> 2] >> 2] + 24 >> 2], 56);
 HEAP32[$2 + 24 >> 2] = HEAP32[HEAP32[$2 + 56 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$2 + 52 >> 2] >> 2] + 20 >> 2], 56);
 HEAP32[$2 + 20 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2]);
 label$1 : {
  label$2 : {
   $0 = HEAP32[HEAP32[$2 + 40 >> 2] >> 2] + -1 | 0;
   if ($0 >>> 0 > 8) {
    break label$2;
   }
   label$3 : {
    switch ($0 - 1 | 0) {
    default:
     tflite__ops__micro__svdf___28anonymous_20namespace_29__EvalFloatSVDF_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteSVDFParams_20const__2c_20TfLiteTensor__2c_20TfLiteTensor__2c_20TfLiteTensor__29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], HEAP32[$2 + 44 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 48 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2]);
     HEAP32[$2 + 60 >> 2] = 0;
     break label$1;
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
     break label$2;
    case 1:
    case 7:
     break label$3;
    }
   }
   HEAP32[$2 + 16 >> 2] = tflite__GetTemporary_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 1);
   HEAP32[$2 + 12 >> 2] = tflite__GetTemporary_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 2);
   HEAP32[$2 + 8 >> 2] = tflite__GetTemporary_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 3);
   tflite__ops__micro__svdf___28anonymous_20namespace_29__EvalHybridSVDF_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteSVDFParams_20const__2c_20TfLiteTensor__2c_20TfLiteTensor__2c_20TfLiteTensor__2c_20TfLiteTensor__2c_20TfLiteTensor__29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], HEAP32[$2 + 44 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 48 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2]);
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  $0 = HEAP32[HEAP32[$2 + 56 >> 2] + 20 >> 2];
  $1 = HEAP32[$2 + 56 >> 2];
  HEAP32[$2 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 40 >> 2] >> 2]);
  FUNCTION_TABLE[$0]($1, 47130, $2);
  HEAP32[$2 + 60 >> 2] = 1;
 }
 global$0 = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}
function tflite__ops__micro__conv__EvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams__2c_20tflite__ops__micro__conv__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteTensor__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0;
 $8 = global$0 - 240 | 0;
 global$0 = $8;
 $9 = $8 + 104 | 0;
 HEAP32[$8 + 236 >> 2] = $0;
 HEAP32[$8 + 232 >> 2] = $1;
 HEAP32[$8 + 228 >> 2] = $2;
 HEAP32[$8 + 224 >> 2] = $3;
 HEAP32[$8 + 220 >> 2] = $4;
 HEAP32[$8 + 216 >> 2] = $5;
 HEAP32[$8 + 212 >> 2] = $6;
 HEAP32[$8 + 208 >> 2] = 0;
 HEAP32[$8 + 204 >> 2] = 0;
 HEAP32[$8 + 200 >> 2] = $7;
 HEAP32[$8 + 196 >> 2] = 0 - HEAP32[HEAP32[$8 + 220 >> 2] + 16 >> 2];
 HEAP32[$8 + 192 >> 2] = 0 - HEAP32[HEAP32[$8 + 216 >> 2] + 16 >> 2];
 HEAP32[$8 + 188 >> 2] = HEAP32[HEAP32[$8 + 200 >> 2] + 16 >> 2];
 HEAP8[$8 + 128 | 0] = tflite__ops__micro__conv__RuntimePaddingType_28TfLitePadding_29(HEAP32[HEAP32[$8 + 228 >> 2] >> 2]);
 HEAP16[$8 + 130 >> 1] = HEAP32[HEAP32[$8 + 224 >> 2] >> 2];
 HEAP16[$8 + 132 >> 1] = HEAP32[HEAP32[$8 + 224 >> 2] + 4 >> 2];
 HEAP16[$8 + 138 >> 1] = HEAP32[HEAP32[$8 + 228 >> 2] + 4 >> 2];
 HEAP16[$8 + 140 >> 1] = HEAP32[HEAP32[$8 + 228 >> 2] + 8 >> 2];
 HEAP16[$8 + 142 >> 1] = HEAP32[HEAP32[$8 + 228 >> 2] + 12 >> 2];
 HEAP16[$8 + 144 >> 1] = HEAP32[HEAP32[$8 + 228 >> 2] + 16 >> 2];
 HEAP32[$8 + 148 >> 2] = HEAP32[$8 + 196 >> 2];
 HEAP32[$8 + 152 >> 2] = HEAP32[$8 + 192 >> 2];
 HEAP32[$8 + 156 >> 2] = HEAP32[$8 + 188 >> 2];
 HEAP32[$8 + 160 >> 2] = HEAP32[HEAP32[$8 + 224 >> 2] + 16 >> 2];
 HEAP32[$8 + 164 >> 2] = 0 - HEAP32[HEAP32[$8 + 224 >> 2] + 20 >> 2];
 HEAP32[$8 + 168 >> 2] = HEAP32[HEAP32[$8 + 224 >> 2] + 536 >> 2];
 HEAP32[$8 + 172 >> 2] = HEAP32[HEAP32[$8 + 224 >> 2] + 540 >> 2];
 tflite__GetTensorShape_28TfLiteTensor_20const__29($9, HEAP32[$8 + 220 >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 220 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 72 | 0, HEAP32[$8 + 216 >> 2]);
 $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 216 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 48 | 0, HEAP32[$8 + 212 >> 2]);
 $2 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 212 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 24 | 0, HEAP32[$8 + 200 >> 2]);
 $3 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 200 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8, HEAP32[$8 + 208 >> 2]);
 tflite__reference_ops__Conv_28tflite__ConvParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__2c_20void__29($8 + 128 | 0, $8 + 104 | 0, $0, $8 + 72 | 0, $1, $8 + 48 | 0, $2, $8 + 24 | 0, $3, $8, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 208 >> 2]));
 $0 = $8 + 104 | 0;
 $1 = $8 + 72 | 0;
 $2 = $8 + 48 | 0;
 $3 = $8 + 24 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($8);
 tflite__RuntimeShape___RuntimeShape_28_29($3);
 tflite__RuntimeShape___RuntimeShape_28_29($2);
 tflite__RuntimeShape___RuntimeShape_28_29($1);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $8 + 240 | 0;
}
function jspeStatementDoOrWhile($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 112 | 0;
 global$0 = $1;
 HEAP8[$1 + 107 | 0] = $0;
 HEAP8[$1 + 99 | 0] = 1;
 HEAP8[$1 + 98 | 0] = 0;
 jslGetNextToken();
 HEAP8[$1 + 71 | 0] = (HEAP32[23778] & 512) != 0;
 label$1 : {
  if (HEAP8[$1 + 107 | 0] & 1) {
   if (!(jslMatch(40) & 1)) {
    break label$1;
   }
   jslCharPosClone($1 + 72 | 0, HEAP32[13768] + 4 | 0);
   HEAP32[$1 + 100 >> 2] = __jspeAssignmentExpression(jspeConditionalExpression());
   $0 = $1;
   if ((HEAP32[23778] & 63) == 1) {
    $2 = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$1 + 100 >> 2]));
   } else {
    $2 = 0;
   }
   HEAP8[$0 + 99 | 0] = $2 & 1;
   jsvUnLock(HEAP32[$1 + 100 >> 2]);
   if (!(jslMatch(41) & 1)) {
    jslCharPosFree($1 + 72 | 0);
    break label$1;
   }
  }
  jslCharPosClone($1 + 40 | 0, HEAP32[13768] + 4 | 0);
  HEAP32[$1 + 36 >> 2] = HEAP32[23778];
  if (!(HEAP8[$1 + 99 | 0] & 1)) {
   jspSetNoExecute();
  }
  HEAP32[23778] = HEAP32[23778] | 512;
  jsvUnLock(jspeBlockOrStatement());
  if (!(HEAP8[$1 + 71 | 0] & 1)) {
   HEAP32[23778] = HEAP32[23778] & -513;
  }
  label$8 : {
   if (HEAP32[23778] & 4) {
    HEAP32[23778] = HEAP32[23778] & -64 | 1;
    break label$8;
   }
   if (HEAP32[23778] & 2) {
    HEAP32[23778] = HEAP32[23778] & -64 | 1;
    HEAP8[$1 + 98 | 0] = 1;
   }
  }
  if (!(HEAP8[$1 + 99 | 0] & 1)) {
   HEAP32[23778] = HEAP32[23778] & -1664 | HEAP32[$1 + 36 >> 2] & 1663;
  }
  if (!(HEAP8[$1 + 107 | 0] & 1)) {
   if (!(jslMatch(166) & 1)) {
    jslCharPosFree($1 + 40 | 0);
    break label$1;
   }
   if (!(jslMatch(40) & 1)) {
    jslCharPosFree($1 + 40 | 0);
    if (HEAP8[$1 + 107 | 0] & 1) {
     jslCharPosFree($1 + 72 | 0);
    }
    break label$1;
   }
   jslCharPosClone($1 + 72 | 0, HEAP32[13768] + 4 | 0);
   HEAP32[$1 + 100 >> 2] = __jspeAssignmentExpression(jspeConditionalExpression());
   $0 = $1;
   if ((HEAP32[23778] & 63) == 1) {
    $2 = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$1 + 100 >> 2]));
   } else {
    $2 = 0;
   }
   HEAP8[$0 + 99 | 0] = $2 & 1;
   jsvUnLock(HEAP32[$1 + 100 >> 2]);
   if (!(jslMatch(41) & 1)) {
    $0 = $1 + 72 | 0;
    jslCharPosFree($1 + 40 | 0);
    jslCharPosFree($0);
    break label$1;
   }
  }
  jslCharPosClone($1 + 8 | 0, HEAP32[13768] + 4 | 0);
  while (1) {
   if ((HEAP8[$1 + 98 | 0] & 1 ? 0 : HEAPU8[$1 + 99 | 0]) & 1) {
    jslSeekToP($1 + 72 | 0);
    HEAP32[$1 + 100 >> 2] = __jspeAssignmentExpression(jspeConditionalExpression());
    $0 = $1;
    if ((HEAP32[23778] & 63) == 1) {
     $2 = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$1 + 100 >> 2]));
    } else {
     $2 = 0;
    }
    HEAP8[$0 + 99 | 0] = $2 & 1;
    jsvUnLock(HEAP32[$1 + 100 >> 2]);
    if (HEAP8[$1 + 99 | 0] & 1) {
     jslSeekToP($1 + 40 | 0);
     HEAP32[23778] = HEAP32[23778] | 512;
     jspDebuggerLoopIfCtrlC();
     jsvUnLock(jspeBlockOrStatement());
     if (!(HEAP8[$1 + 71 | 0] & 1)) {
      HEAP32[23778] = HEAP32[23778] & -513;
     }
     label$27 : {
      if (HEAP32[23778] & 4) {
       HEAP32[23778] = HEAP32[23778] & -64 | 1;
       break label$27;
      }
      if (HEAP32[23778] & 2) {
       HEAP32[23778] = HEAP32[23778] & -64 | 1;
       HEAP8[$1 + 98 | 0] = 1;
      }
     }
    }
    continue;
   }
   break;
  }
  $0 = $1 + 40 | 0;
  $2 = $1 + 72 | 0;
  $3 = $1 + 8 | 0;
  jslSeekToP($3);
  jslCharPosFree($2);
  jslCharPosFree($0);
  jslCharPosFree($3);
 }
 HEAP32[$1 + 108 >> 2] = 0;
 global$0 = $1 + 112 | 0;
 return HEAP32[$1 + 108 >> 2];
}
function jspeFactorObject() {
 var $0 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 label$1 : {
  if ((HEAP32[23778] & 63) == 1) {
   HEAP32[$0 + 24 >> 2] = jsvNewWithFlags(5);
   if (!HEAP32[$0 + 24 >> 2]) {
    jspSetError();
    HEAP32[$0 + 28 >> 2] = 0;
    break label$1;
   }
   if (!(jslMatch(123) & 1)) {
    HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
    break label$1;
   }
   while (1) {
    if (HEAP32[23778] & 80 ? 0 : HEAP16[HEAP32[13768] + 2 >> 1] != 125) {
     HEAP32[$0 + 20 >> 2] = 0;
     label$9 : {
      if (jslIsIDOrReservedWord() & 1) {
       if ((HEAP32[23778] & 63) == 1) {
        HEAP32[$0 + 20 >> 2] = jslGetTokenValueAsVar();
       }
       jslGetNextToken();
       break label$9;
      }
      label$12 : {
       label$13 : {
        label$14 : {
         if (HEAP16[HEAP32[13768] + 2 >> 1] == 131 | HEAP16[HEAP32[13768] + 2 >> 1] == 133 | (HEAP16[HEAP32[13768] + 2 >> 1] == 130 | HEAP16[HEAP32[13768] + 2 >> 1] == 129)) {
          break label$14;
         }
         if (HEAP16[HEAP32[13768] + 2 >> 1] == 180 | HEAP16[HEAP32[13768] + 2 >> 1] == 181 | HEAP16[HEAP32[13768] + 2 >> 1] == 182) {
          break label$14;
         }
         if (HEAP16[HEAP32[13768] + 2 >> 1] != 183) {
          break label$13;
         }
        }
        HEAP32[$0 + 20 >> 2] = jspeFactor();
        break label$12;
       }
       if (!(jslMatch(128) & 1)) {
        HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
        break label$1;
       }
      }
     }
     label$16 : {
      label$17 : {
       if (HEAP16[HEAP32[13768] + 2 >> 1] != 128) {
        break label$17;
       }
       if (!(jsvIsString(HEAP32[$0 + 20 >> 2]) & 1)) {
        break label$17;
       }
       HEAP8[$0 + 19 | 0] = jsvIsStringEqual(HEAP32[$0 + 20 >> 2], 4316) & 1;
       HEAP8[$0 + 18 | 0] = jsvIsStringEqual(HEAP32[$0 + 20 >> 2], 4320) & 1;
       if (!(HEAP8[$0 + 18 | 0] & 1 ? 0 : !(HEAP8[$0 + 19 | 0] & 1))) {
        jsvUnLock(HEAP32[$0 + 20 >> 2]);
        HEAP32[$0 + 20 >> 2] = jslGetTokenValueAsVar();
        jslGetNextToken();
        HEAP32[$0 + 12 >> 2] = jspeFunctionDefinition(0);
        jsvAddGetterOrSetter(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 20 >> 2], HEAP8[$0 + 19 | 0] & 1, HEAP32[$0 + 12 >> 2]);
        jsvUnLock(HEAP32[$0 + 12 >> 2]);
       }
       break label$16;
      }
      if (!(jslMatch(58) & 1)) {
       jsvUnLock(HEAP32[$0 + 20 >> 2]);
       HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
       break label$1;
      }
      if ((HEAP32[23778] & 63) == 1) {
       HEAP32[$0 + 20 >> 2] = jsvAsArrayIndexAndUnLock(HEAP32[$0 + 20 >> 2]);
       HEAP32[$0 + 8 >> 2] = jsvFindChildFromVar(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 20 >> 2], 1);
       if (HEAP32[$0 + 8 >> 2]) {
        HEAP32[$0 + 4 >> 2] = jsvSkipNameAndUnLock(__jspeAssignmentExpression(jspeConditionalExpression()));
        jsvUnLock2(jsvSetValueOfName(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2]), HEAP32[$0 + 4 >> 2]);
       }
      }
     }
     jsvUnLock(HEAP32[$0 + 20 >> 2]);
     if (HEAP16[HEAP32[13768] + 2 >> 1] != 125) {
      if (!(jslMatch(44) & 1)) {
       HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
       break label$1;
      }
     }
     continue;
    }
    break;
   }
   if (!(jslMatch(125) & 1)) {
    HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
    break label$1;
   }
   HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
   break label$1;
  }
  jspeBlock();
  HEAP32[$0 + 28 >> 2] = 0;
 }
 global$0 = $0 + 32 | 0;
 return HEAP32[$0 + 28 >> 2];
}
function TfLiteStatus_20tflite__ops__micro__pack___28anonymous_20namespace_29__PackImpl_float__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor__2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 96 | 0;
 global$0 = $5;
 HEAP32[$5 + 92 >> 2] = $0;
 HEAP32[$5 + 88 >> 2] = $1;
 HEAP32[$5 + 84 >> 2] = $2;
 HEAP32[$5 + 80 >> 2] = $3;
 HEAP32[$5 + 76 >> 2] = $4;
 HEAP32[$5 + 72 >> 2] = HEAP32[HEAP32[HEAP32[$5 + 84 >> 2] + 8 >> 2] >> 2];
 HEAP32[$5 + 68 >> 2] = HEAP32[HEAP32[$5 + 92 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$5 + 88 >> 2] >> 2] + 4 >> 2], 56);
 HEAP32[$5 + 64 >> 2] = HEAP32[HEAP32[$5 + 68 >> 2] + 8 >> 2];
 HEAP32[$5 + 60 >> 2] = HEAP32[HEAP32[$5 + 84 >> 2] + 8 >> 2];
 if (HEAP32[$5 + 76 >> 2] < 0) {
  HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 76 >> 2];
 }
 HEAP32[$5 + 56 >> 2] = 1;
 HEAP32[$5 + 52 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 52 >> 2] < HEAP32[$5 + 76 >> 2]) {
   HEAP32[$5 + 56 >> 2] = Math_imul(HEAP32[(HEAP32[$5 + 60 >> 2] + 4 | 0) + (HEAP32[$5 + 52 >> 2] << 2) >> 2], HEAP32[$5 + 56 >> 2]);
   HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$5 + 48 >> 2] = 1;
 HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
 while (1) {
  if (HEAP32[$5 + 44 >> 2] < HEAP32[$5 + 72 >> 2]) {
   HEAP32[$5 + 48 >> 2] = Math_imul(HEAP32[(HEAP32[$5 + 60 >> 2] + 4 | 0) + (HEAP32[$5 + 44 >> 2] << 2) >> 2], HEAP32[$5 + 48 >> 2]);
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 44 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$5 + 40 >> 2] = 1;
 HEAP32[$5 + 36 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 36 >> 2] < HEAP32[HEAP32[$5 + 64 >> 2] >> 2]) {
   HEAP32[$5 + 40 >> 2] = Math_imul(HEAP32[(HEAP32[$5 + 64 >> 2] + 4 | 0) + (HEAP32[$5 + 36 >> 2] << 2) >> 2], HEAP32[$5 + 40 >> 2]);
   HEAP32[$5 + 36 >> 2] = HEAP32[$5 + 36 >> 2] + 1;
   continue;
  }
  break;
 }
 label$8 : {
  if (HEAP32[$5 + 40 >> 2] != (Math_imul(HEAP32[$5 + 48 >> 2], HEAP32[$5 + 56 >> 2]) | 0)) {
   break label$8;
  }
 }
 HEAP32[$5 + 32 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$5 + 84 >> 2]);
 HEAP32[$5 + 28 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 28 >> 2] < HEAP32[$5 + 80 >> 2]) {
   HEAP32[$5 + 24 >> 2] = HEAP32[HEAP32[$5 + 92 >> 2] + 8 >> 2] + Math_imul(HEAP32[(HEAP32[HEAP32[$5 + 88 >> 2] >> 2] + 4 | 0) + (HEAP32[$5 + 28 >> 2] << 2) >> 2], 56);
   HEAP32[$5 + 20 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$5 + 24 >> 2]);
   HEAP32[$5 + 16 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 56 >> 2]) {
     HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 20 >> 2] + (Math_imul(HEAP32[$5 + 48 >> 2], HEAP32[$5 + 16 >> 2]) << 2);
     HEAP32[$5 + 8 >> 2] = Math_imul(HEAP32[$5 + 48 >> 2], Math_imul(HEAP32[$5 + 16 >> 2], HEAP32[$5 + 80 >> 2])) + Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 48 >> 2]);
     HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 32 >> 2] + (HEAP32[$5 + 8 >> 2] << 2);
     HEAP32[$5 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 >> 2] < HEAP32[$5 + 48 >> 2]) {
       HEAPF32[HEAP32[$5 + 4 >> 2] + (HEAP32[$5 >> 2] << 2) >> 2] = HEAPF32[HEAP32[$5 + 12 >> 2] + (HEAP32[$5 >> 2] << 2) >> 2];
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 + 96 | 0;
 return 0;
}
function TfLiteStatus_20tflite__ops__micro__pack___28anonymous_20namespace_29__PackImpl_int__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor__2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 96 | 0;
 global$0 = $5;
 HEAP32[$5 + 92 >> 2] = $0;
 HEAP32[$5 + 88 >> 2] = $1;
 HEAP32[$5 + 84 >> 2] = $2;
 HEAP32[$5 + 80 >> 2] = $3;
 HEAP32[$5 + 76 >> 2] = $4;
 HEAP32[$5 + 72 >> 2] = HEAP32[HEAP32[HEAP32[$5 + 84 >> 2] + 8 >> 2] >> 2];
 HEAP32[$5 + 68 >> 2] = HEAP32[HEAP32[$5 + 92 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$5 + 88 >> 2] >> 2] + 4 >> 2], 56);
 HEAP32[$5 + 64 >> 2] = HEAP32[HEAP32[$5 + 68 >> 2] + 8 >> 2];
 HEAP32[$5 + 60 >> 2] = HEAP32[HEAP32[$5 + 84 >> 2] + 8 >> 2];
 if (HEAP32[$5 + 76 >> 2] < 0) {
  HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 76 >> 2];
 }
 HEAP32[$5 + 56 >> 2] = 1;
 HEAP32[$5 + 52 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 52 >> 2] < HEAP32[$5 + 76 >> 2]) {
   HEAP32[$5 + 56 >> 2] = Math_imul(HEAP32[(HEAP32[$5 + 60 >> 2] + 4 | 0) + (HEAP32[$5 + 52 >> 2] << 2) >> 2], HEAP32[$5 + 56 >> 2]);
   HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$5 + 48 >> 2] = 1;
 HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
 while (1) {
  if (HEAP32[$5 + 44 >> 2] < HEAP32[$5 + 72 >> 2]) {
   HEAP32[$5 + 48 >> 2] = Math_imul(HEAP32[(HEAP32[$5 + 60 >> 2] + 4 | 0) + (HEAP32[$5 + 44 >> 2] << 2) >> 2], HEAP32[$5 + 48 >> 2]);
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 44 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$5 + 40 >> 2] = 1;
 HEAP32[$5 + 36 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 36 >> 2] < HEAP32[HEAP32[$5 + 64 >> 2] >> 2]) {
   HEAP32[$5 + 40 >> 2] = Math_imul(HEAP32[(HEAP32[$5 + 64 >> 2] + 4 | 0) + (HEAP32[$5 + 36 >> 2] << 2) >> 2], HEAP32[$5 + 40 >> 2]);
   HEAP32[$5 + 36 >> 2] = HEAP32[$5 + 36 >> 2] + 1;
   continue;
  }
  break;
 }
 label$8 : {
  if (HEAP32[$5 + 40 >> 2] != (Math_imul(HEAP32[$5 + 48 >> 2], HEAP32[$5 + 56 >> 2]) | 0)) {
   break label$8;
  }
 }
 HEAP32[$5 + 32 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$5 + 84 >> 2]);
 HEAP32[$5 + 28 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 28 >> 2] < HEAP32[$5 + 80 >> 2]) {
   HEAP32[$5 + 24 >> 2] = HEAP32[HEAP32[$5 + 92 >> 2] + 8 >> 2] + Math_imul(HEAP32[(HEAP32[HEAP32[$5 + 88 >> 2] >> 2] + 4 | 0) + (HEAP32[$5 + 28 >> 2] << 2) >> 2], 56);
   HEAP32[$5 + 20 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$5 + 24 >> 2]);
   HEAP32[$5 + 16 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 56 >> 2]) {
     HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 20 >> 2] + (Math_imul(HEAP32[$5 + 48 >> 2], HEAP32[$5 + 16 >> 2]) << 2);
     HEAP32[$5 + 8 >> 2] = Math_imul(HEAP32[$5 + 48 >> 2], Math_imul(HEAP32[$5 + 16 >> 2], HEAP32[$5 + 80 >> 2])) + Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 48 >> 2]);
     HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 32 >> 2] + (HEAP32[$5 + 8 >> 2] << 2);
     HEAP32[$5 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 >> 2] < HEAP32[$5 + 48 >> 2]) {
       HEAP32[HEAP32[$5 + 4 >> 2] + (HEAP32[$5 >> 2] << 2) >> 2] = HEAP32[HEAP32[$5 + 12 >> 2] + (HEAP32[$5 >> 2] << 2) >> 2];
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 + 96 | 0;
 return 0;
}
function jswrap_date_parse($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 208 | 0;
 global$0 = $1;
 HEAP32[$1 + 196 >> 2] = $0;
 label$1 : {
  if (!(jsvIsString(HEAP32[$1 + 196 >> 2]) & 1)) {
   HEAPF64[$1 + 200 >> 3] = 0;
   break label$1;
  }
  $0 = $1 + 16 | 0;
  HEAP32[$1 + 168 >> 2] = 0;
  HEAP32[$1 + 184 >> 2] = 0;
  HEAP32[$1 + 180 >> 2] = 0;
  HEAP32[$1 + 176 >> 2] = 0;
  HEAP32[$1 + 172 >> 2] = 0;
  HEAP32[$1 + 188 >> 2] = 0;
  getCalendarDate($1 + 144 | 0, 0);
  HEAP32[$1 + 12 >> 2] = jslSetLex($0);
  jslInit(HEAP32[$1 + 196 >> 2]);
  label$3 : {
   if (HEAP16[$1 + 18 >> 1] == 128) {
    HEAP32[$1 + 152 >> 2] = getMonth(jslGetTokenValueAsString());
    HEAP32[$1 + 160 >> 2] = getDay(jslGetTokenValueAsString());
    label$5 : {
     if (HEAP32[$1 + 152 >> 2] >= 0) {
      HEAP32[$1 + 188 >> 2] = jsdGetTimeZone();
      jslGetNextToken();
      if (HEAP16[$1 + 18 >> 1] == 129) {
       HEAP32[$1 + 148 >> 2] = _parse_int();
       jslGetNextToken();
       if (HEAP16[$1 + 18 >> 1] == 44) {
        jslGetNextToken();
        if (HEAP16[$1 + 18 >> 1] == 129) {
         HEAP32[$1 + 156 >> 2] = _parse_int();
         jslGetNextToken();
         if (HEAP16[$1 + 18 >> 1] == 129) {
          _parse_time($1 + 168 | 0, 0);
         }
        }
       }
      }
      break label$5;
     }
     label$11 : {
      if (HEAP32[$1 + 160 >> 2] >= 0) {
       HEAP32[$1 + 188 >> 2] = jsdGetTimeZone();
       HEAP32[$1 + 152 >> 2] = 0;
       jslGetNextToken();
       if (HEAP16[$1 + 18 >> 1] == 44) {
        jslGetNextToken();
        if (HEAP16[$1 + 18 >> 1] == 129) {
         HEAP32[$1 + 148 >> 2] = _parse_int();
         jslGetNextToken();
         label$15 : {
          if (HEAP16[$1 + 18 >> 1] != 128) {
           break label$15;
          }
          if ((getMonth(jslGetTokenValueAsString()) | 0) < 0) {
           break label$15;
          }
          HEAP32[$1 + 152 >> 2] = getMonth(jslGetTokenValueAsString());
          jslGetNextToken();
          if (HEAP16[$1 + 18 >> 1] == 129) {
           HEAP32[$1 + 156 >> 2] = _parse_int();
           jslGetNextToken();
           if (HEAP16[$1 + 18 >> 1] == 129) {
            _parse_time($1 + 168 | 0, 0);
           }
          }
         }
        }
       }
       break label$11;
      }
      HEAP32[$1 + 160 >> 2] = 0;
      HEAP32[$1 + 152 >> 2] = 0;
     }
    }
    break label$3;
   }
   if (HEAP16[$1 + 18 >> 1] == 129) {
    HEAP32[$1 + 156 >> 2] = _parse_int();
    jslGetNextToken();
    if (HEAP16[$1 + 18 >> 1] == 45) {
     jslGetNextToken();
     if (HEAP16[$1 + 18 >> 1] == 129) {
      HEAP32[$1 + 152 >> 2] = _parse_int() - 1;
      jslGetNextToken();
      if (HEAP16[$1 + 18 >> 1] == 45) {
       jslGetNextToken();
       if (HEAP16[$1 + 18 >> 1] == 129) {
        HEAP32[$1 + 148 >> 2] = _parse_int();
        jslGetNextToken();
        label$23 : {
         if (HEAP16[$1 + 18 >> 1] != 128) {
          break label$23;
         }
         if (HEAP8[jslGetTokenValueAsString() | 0] != 84) {
          break label$23;
         }
         $0 = $1 + 168 | 0;
         HEAP32[$1 + 188 >> 2] = jsdGetTimeZone();
         _parse_time($0, 1);
        }
       }
      }
     }
    }
   }
  }
  $0 = $1 + 168 | 0;
  $2 = $1 + 144 | 0;
  jslKill();
  jslSetLex(HEAP32[$1 + 12 >> 2]);
  HEAP32[$1 + 168 >> 2] = fromCalenderDate($2);
  HEAPF64[$1 + 200 >> 3] = fromTimeInDay($0);
 }
 global$0 = $1 + 208 | 0;
 return +HEAPF64[$1 + 200 >> 3];
}
function jswrap_storagefile_getLength($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 240 | 0;
 global$0 = $1;
 $2 = $1 + 200 | 0;
 HEAP32[$1 + 236 >> 2] = $0;
 HEAP32[$1 + 232 >> 2] = jsvObjectGetChild(HEAP32[$1 + 236 >> 2], 36997, 0);
 jsfNameFromVar($2, HEAP32[$1 + 232 >> 2]);
 jsvUnLock(HEAP32[$1 + 232 >> 2]);
 HEAP32[$1 + 196 >> 2] = 27;
 while (1) {
  if (HEAP32[$1 + 196 >> 2] ? !HEAP8[(HEAP32[$1 + 196 >> 2] + $1 | 0) + 199 | 0] : 0) {
   HEAP32[$1 + 196 >> 2] = HEAP32[$1 + 196 >> 2] + -1;
   continue;
  }
  break;
 }
 HEAP32[$1 + 192 >> 2] = 1;
 HEAP8[HEAP32[$1 + 196 >> 2] + ($1 + 200 | 0) | 0] = HEAP32[$1 + 192 >> 2];
 HEAP32[$1 + 188 >> 2] = 0;
 HEAP32[$1 + 184 >> 2] = 0;
 HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 224 >> 2];
 $0 = HEAP32[$1 + 220 >> 2];
 HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 216 >> 2];
 HEAP32[$1 + 60 >> 2] = $0;
 $0 = HEAP32[$1 + 212 >> 2];
 HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 208 >> 2];
 HEAP32[$1 + 52 >> 2] = $0;
 $0 = HEAP32[$1 + 204 >> 2];
 HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 200 >> 2];
 HEAP32[$1 + 44 >> 2] = $0;
 HEAP32[$1 + 148 >> 2] = jsfFindFile($1 + 40 | 0, $1 + 152 | 0);
 HEAP8[$1 + 147 | 0] = 255;
 if (HEAP32[$1 + 148 >> 2]) {
  jshFlashRead($1 + 147 | 0, (HEAP32[$1 + 148 >> 2] + jsfGetFileSize($1 + 152 | 0) | 0) - 1 | 0, 1);
 }
 while (1) {
  $0 = 0;
  label$7 : {
   if (!HEAP32[$1 + 148 >> 2]) {
    break label$7;
   }
   $0 = 0;
   if (HEAPU8[$1 + 147 | 0] == 255) {
    break label$7;
   }
   $0 = HEAP32[$1 + 192 >> 2] < 255;
  }
  if ($0) {
   $0 = $1 + 200 | 0;
   HEAP32[$1 + 188 >> 2] = jsfGetFileSize($1 + 152 | 0) + HEAP32[$1 + 188 >> 2];
   HEAP32[$1 + 192 >> 2] = HEAP32[$1 + 192 >> 2] + 1;
   HEAP8[$0 + HEAP32[$1 + 196 >> 2] | 0] = HEAP32[$1 + 192 >> 2];
   HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 224 >> 2];
   $0 = HEAP32[$1 + 220 >> 2];
   HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 216 >> 2];
   HEAP32[$1 + 28 >> 2] = $0;
   $0 = HEAP32[$1 + 212 >> 2];
   HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 208 >> 2];
   HEAP32[$1 + 20 >> 2] = $0;
   $0 = HEAP32[$1 + 204 >> 2];
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 200 >> 2];
   HEAP32[$1 + 12 >> 2] = $0;
   HEAP32[$1 + 148 >> 2] = jsfFindFile($1 + 8 | 0, $1 + 152 | 0);
   if (HEAP32[$1 + 148 >> 2]) {
    jshFlashRead($1 + 147 | 0, (HEAP32[$1 + 148 >> 2] + jsfGetFileSize($1 + 152 | 0) | 0) - 1 | 0, 1);
   }
   continue;
  }
  break;
 }
 if (HEAP32[$1 + 148 >> 2]) {
  HEAP8[$1 + 79 | 0] = 0;
  while (1) {
   label$12 : {
    if (!((HEAPU8[$1 + 79 | 0] ^ -1) & 1)) {
     break label$12;
    }
    HEAP32[$1 + 72 >> 2] = 992 - HEAP32[$1 + 184 >> 2];
    if (HEAP32[$1 + 72 >> 2] <= 0) {
     HEAP8[$1 + 79 | 0] = 1;
     break label$12;
    }
    if (HEAPU32[$1 + 72 >> 2] > 64) {
     HEAP32[$1 + 72 >> 2] = 64;
    }
    jshFlashRead($1 + 80 | 0, HEAP32[$1 + 148 >> 2] + HEAP32[$1 + 184 >> 2] | 0, HEAP32[$1 + 72 >> 2]);
    HEAP32[$1 + 68 >> 2] = 0;
    while (1) {
     if (HEAP32[$1 + 68 >> 2] < HEAP32[$1 + 72 >> 2]) {
      if (HEAP8[HEAP32[$1 + 68 >> 2] + ($1 + 80 | 0) | 0] == -1) {
       HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 68 >> 2];
       HEAP8[$1 + 79 | 0] = 1;
      } else {
       HEAP32[$1 + 68 >> 2] = HEAP32[$1 + 68 >> 2] + 1;
       continue;
      }
     }
     break;
    }
    HEAP32[$1 + 184 >> 2] = HEAP32[$1 + 72 >> 2] + HEAP32[$1 + 184 >> 2];
    continue;
   }
   break;
  }
 }
 HEAP32[$1 + 188 >> 2] = HEAP32[$1 + 184 >> 2] + HEAP32[$1 + 188 >> 2];
 global$0 = $1 + 240 | 0;
 return HEAP32[$1 + 188 >> 2];
}
function jsfGetJSONForObjectItWithCallback($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = global$0 - 80 | 0;
 global$0 = $7;
 HEAP32[$7 + 76 >> 2] = $0;
 HEAP32[$7 + 72 >> 2] = $1;
 HEAP32[$7 + 68 >> 2] = $2;
 HEAP32[$7 + 64 >> 2] = $3;
 HEAP32[$7 + 60 >> 2] = $4;
 HEAP32[$7 + 56 >> 2] = $5;
 HEAP8[$7 + 55 | 0] = $6;
 HEAP8[$7 + 54 | 0] = 0;
 HEAP32[$7 + 48 >> 2] = 0;
 while (1) {
  if (jsvObjectIteratorHasValue(HEAP32[$7 + 76 >> 2]) & 1) {
   $0 = jspIsInterrupted() ^ -1;
  } else {
   $0 = 0;
  }
  if ($0 & 1) {
   HEAP32[$7 + 44 >> 2] = jsvObjectIteratorGetKey(HEAP32[$7 + 76 >> 2]);
   HEAP32[$7 + 40 >> 2] = jsvGetValueOfName(HEAP32[$7 + 44 >> 2]);
   $2 = jsvIsInternalObjectKey(HEAP32[$7 + 44 >> 2]);
   $0 = $7;
   $1 = 1;
   label$5 : {
    if ($2 & 1) {
     break label$5;
    }
    if (HEAP32[$7 + 72 >> 2] & 16) {
     $2 = jsvIsFunction(HEAP32[$7 + 40 >> 2]) & 1;
     $1 = 1;
     if ($2) {
      break label$5;
     }
    }
    if (HEAP32[$7 + 72 >> 2] & 64) {
     $2 = jsvIsUndefined(HEAP32[$7 + 40 >> 2]) & 1;
     $1 = 1;
     if ($2) {
      break label$5;
     }
    }
    $1 = jsvIsGetterOrSetter(HEAP32[$7 + 40 >> 2]);
   }
   HEAP8[$0 + 39 | 0] = $1 & 1;
   if (!(HEAP8[$7 + 39 | 0] & 1)) {
    HEAP32[$7 + 48 >> 2] = HEAP32[$7 + 48 >> 2] + 1;
    if (!(HEAP8[$7 + 55 | 0] & 1)) {
     cbprintf(HEAP32[$7 + 60 >> 2], HEAP32[$7 + 56 >> 2], HEAP32[$7 + 72 >> 2] & 4 ? 34286 : 34207, 0);
    }
    $0 = $7;
    if (HEAP32[$7 + 72 >> 2] & 1) {
     $1 = jsonNeedsNewLine(HEAP32[$7 + 40 >> 2]);
    } else {
     $1 = 0;
    }
    HEAP8[$0 + 38 | 0] = $1 & 1;
    if (!(!(HEAP32[$7 + 72 >> 2] & 1) | HEAPU32[$7 + 48 >> 2] <= 4)) {
     HEAP8[$7 + 54 | 0] = 1;
    }
    if (HEAP32[$7 + 72 >> 2] & 2) {
     HEAP8[$7 + 54 | 0] = 1;
     HEAP8[$7 + 38 | 0] = 1;
    }
    if (!(HEAP8[$7 + 38 | 0] & 1 ? 0 : !(HEAP8[$7 + 54 | 0] & 1))) {
     jsonNewLine(HEAP32[$7 + 64 >> 2], HEAP32[$7 + 68 >> 2], HEAP32[$7 + 60 >> 2], HEAP32[$7 + 56 >> 2]);
     HEAP8[$7 + 54 | 0] = 0;
     HEAP32[$7 + 48 >> 2] = 0;
    }
    HEAP8[$7 + 37 | 0] = 1;
    if (HEAP32[$7 + 72 >> 2] & 512) {
     label$17 : {
      if (jsvIsIntegerish(HEAP32[$7 + 44 >> 2]) & 1) {
       HEAP8[$7 + 37 | 0] = 0;
       break label$17;
      }
      label$19 : {
       if (!(jsvIsString(HEAP32[$7 + 44 >> 2]) & 1)) {
        break label$19;
       }
       if (jsvGetStringLength(HEAP32[$7 + 44 >> 2]) >>> 0 >= 15) {
        break label$19;
       }
       $0 = $7 + 16 | 0;
       jsvGetString(HEAP32[$7 + 44 >> 2], $0, 16);
       if (isIDString($0) & 1) {
        HEAP8[$7 + 37 | 0] = 0;
       }
      }
     }
    }
    $1 = HEAP32[$7 + 60 >> 2];
    $2 = HEAP32[$7 + 56 >> 2];
    if (HEAP8[$7 + 37 | 0] & 1) {
     $0 = HEAP32[$7 + 72 >> 2] & 1024 ? 34428 : 34433;
    } else {
     $0 = 34438;
    }
    $3 = HEAP32[$7 + 44 >> 2];
    HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 72 >> 2] & 4 ? 34443 : 34446;
    HEAP32[$7 >> 2] = $3;
    cbprintf($1, $2, $0, $7);
    if (HEAP8[$7 + 55 | 0] & 1) {
     HEAP8[$7 + 55 | 0] = 0;
    }
    jsfGetJSONWithCallback(HEAP32[$7 + 40 >> 2], HEAP32[$7 + 44 >> 2], HEAP32[$7 + 64 >> 2], HEAP32[$7 + 68 >> 2], HEAP32[$7 + 60 >> 2], HEAP32[$7 + 56 >> 2]);
    HEAP8[$7 + 54 | 0] = HEAP8[$7 + 38 | 0] & 1;
   }
   jsvUnLock2(HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2]);
   jsvObjectIteratorNext(HEAP32[$7 + 76 >> 2]);
   continue;
  }
  break;
 }
 global$0 = $7 + 80 | 0;
 return HEAP8[$7 + 54 | 0] & 1;
}
function TfLiteStatus_20tflite__ops__micro__pack___28anonymous_20namespace_29__PackImpl_unsigned_20char__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor__2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 96 | 0;
 global$0 = $5;
 HEAP32[$5 + 92 >> 2] = $0;
 HEAP32[$5 + 88 >> 2] = $1;
 HEAP32[$5 + 84 >> 2] = $2;
 HEAP32[$5 + 80 >> 2] = $3;
 HEAP32[$5 + 76 >> 2] = $4;
 HEAP32[$5 + 72 >> 2] = HEAP32[HEAP32[HEAP32[$5 + 84 >> 2] + 8 >> 2] >> 2];
 HEAP32[$5 + 68 >> 2] = HEAP32[HEAP32[$5 + 92 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$5 + 88 >> 2] >> 2] + 4 >> 2], 56);
 HEAP32[$5 + 64 >> 2] = HEAP32[HEAP32[$5 + 68 >> 2] + 8 >> 2];
 HEAP32[$5 + 60 >> 2] = HEAP32[HEAP32[$5 + 84 >> 2] + 8 >> 2];
 if (HEAP32[$5 + 76 >> 2] < 0) {
  HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 76 >> 2];
 }
 HEAP32[$5 + 56 >> 2] = 1;
 HEAP32[$5 + 52 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 52 >> 2] < HEAP32[$5 + 76 >> 2]) {
   HEAP32[$5 + 56 >> 2] = Math_imul(HEAP32[(HEAP32[$5 + 60 >> 2] + 4 | 0) + (HEAP32[$5 + 52 >> 2] << 2) >> 2], HEAP32[$5 + 56 >> 2]);
   HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$5 + 48 >> 2] = 1;
 HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
 while (1) {
  if (HEAP32[$5 + 44 >> 2] < HEAP32[$5 + 72 >> 2]) {
   HEAP32[$5 + 48 >> 2] = Math_imul(HEAP32[(HEAP32[$5 + 60 >> 2] + 4 | 0) + (HEAP32[$5 + 44 >> 2] << 2) >> 2], HEAP32[$5 + 48 >> 2]);
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 44 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$5 + 40 >> 2] = 1;
 HEAP32[$5 + 36 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 36 >> 2] < HEAP32[HEAP32[$5 + 64 >> 2] >> 2]) {
   HEAP32[$5 + 40 >> 2] = Math_imul(HEAP32[(HEAP32[$5 + 64 >> 2] + 4 | 0) + (HEAP32[$5 + 36 >> 2] << 2) >> 2], HEAP32[$5 + 40 >> 2]);
   HEAP32[$5 + 36 >> 2] = HEAP32[$5 + 36 >> 2] + 1;
   continue;
  }
  break;
 }
 label$8 : {
  if (HEAP32[$5 + 40 >> 2] != (Math_imul(HEAP32[$5 + 48 >> 2], HEAP32[$5 + 56 >> 2]) | 0)) {
   break label$8;
  }
 }
 HEAP32[$5 + 32 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$5 + 84 >> 2]);
 HEAP32[$5 + 28 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 28 >> 2] < HEAP32[$5 + 80 >> 2]) {
   HEAP32[$5 + 24 >> 2] = HEAP32[HEAP32[$5 + 92 >> 2] + 8 >> 2] + Math_imul(HEAP32[(HEAP32[HEAP32[$5 + 88 >> 2] >> 2] + 4 | 0) + (HEAP32[$5 + 28 >> 2] << 2) >> 2], 56);
   HEAP32[$5 + 20 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$5 + 24 >> 2]);
   HEAP32[$5 + 16 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 56 >> 2]) {
     HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 20 >> 2] + Math_imul(HEAP32[$5 + 48 >> 2], HEAP32[$5 + 16 >> 2]);
     HEAP32[$5 + 8 >> 2] = Math_imul(HEAP32[$5 + 48 >> 2], Math_imul(HEAP32[$5 + 16 >> 2], HEAP32[$5 + 80 >> 2])) + Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 48 >> 2]);
     HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 32 >> 2] + HEAP32[$5 + 8 >> 2];
     HEAP32[$5 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 >> 2] < HEAP32[$5 + 48 >> 2]) {
       HEAP8[HEAP32[$5 + 4 >> 2] + HEAP32[$5 >> 2] | 0] = HEAPU8[HEAP32[$5 + 12 >> 2] + HEAP32[$5 >> 2] | 0];
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 + 96 | 0;
 return 0;
}
function utilTimerRemoveTask($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = 15;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP8[$2 + 3 | 0] = HEAPU8[97073];
 label$1 : {
  if (HEAPU8[$2 + 3 | 0] != HEAPU8[97074]) {
   HEAP8[$2 + 2 | 0] = HEAPU8[97074] + 15 & 15;
   HEAP8[$2 + 3 | 0] = HEAPU8[$2 + 3 | 0] + 15 & 15;
   while (1) {
    if (HEAPU8[$2 + 3 | 0] != HEAPU8[$2 + 2 | 0]) {
     if (FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]](Math_imul(HEAPU8[$2 + 3 | 0], 29) + 97088 | 0, HEAP32[$2 + 4 >> 2]) & 1) {
      HEAP8[$2 + 1 | 0] = HEAPU8[$2 + 3 | 0] + 15 & 15;
      while (1) {
       if (HEAPU8[$2 + 1 | 0] != HEAPU8[$2 + 2 | 0]) {
        $1 = Math_imul(HEAPU8[$2 + 1 | 0], 29) + 97088 | 0;
        $4 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
        $0 = Math_imul(HEAPU8[$2 + 3 | 0], 29) + 97088 | 0;
        $3 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
        HEAP8[$0 | 0] = $3;
        HEAP8[$0 + 1 | 0] = $3 >>> 8;
        HEAP8[$0 + 2 | 0] = $3 >>> 16;
        HEAP8[$0 + 3 | 0] = $3 >>> 24;
        HEAP8[$0 + 4 | 0] = $4;
        HEAP8[$0 + 5 | 0] = $4 >>> 8;
        HEAP8[$0 + 6 | 0] = $4 >>> 16;
        HEAP8[$0 + 7 | 0] = $4 >>> 24;
        $3 = HEAPU8[$1 + 25 | 0] | HEAPU8[$1 + 26 | 0] << 8 | (HEAPU8[$1 + 27 | 0] << 16 | HEAPU8[$1 + 28 | 0] << 24);
        $4 = HEAPU8[$1 + 21 | 0] | HEAPU8[$1 + 22 | 0] << 8 | (HEAPU8[$1 + 23 | 0] << 16 | HEAPU8[$1 + 24 | 0] << 24);
        HEAP8[$0 + 21 | 0] = $4;
        HEAP8[$0 + 22 | 0] = $4 >>> 8;
        HEAP8[$0 + 23 | 0] = $4 >>> 16;
        HEAP8[$0 + 24 | 0] = $4 >>> 24;
        HEAP8[$0 + 25 | 0] = $3;
        HEAP8[$0 + 26 | 0] = $3 >>> 8;
        HEAP8[$0 + 27 | 0] = $3 >>> 16;
        HEAP8[$0 + 28 | 0] = $3 >>> 24;
        $3 = HEAPU8[$1 + 20 | 0] | HEAPU8[$1 + 21 | 0] << 8 | (HEAPU8[$1 + 22 | 0] << 16 | HEAPU8[$1 + 23 | 0] << 24);
        $4 = HEAPU8[$1 + 16 | 0] | HEAPU8[$1 + 17 | 0] << 8 | (HEAPU8[$1 + 18 | 0] << 16 | HEAPU8[$1 + 19 | 0] << 24);
        HEAP8[$0 + 16 | 0] = $4;
        HEAP8[$0 + 17 | 0] = $4 >>> 8;
        HEAP8[$0 + 18 | 0] = $4 >>> 16;
        HEAP8[$0 + 19 | 0] = $4 >>> 24;
        HEAP8[$0 + 20 | 0] = $3;
        HEAP8[$0 + 21 | 0] = $3 >>> 8;
        HEAP8[$0 + 22 | 0] = $3 >>> 16;
        HEAP8[$0 + 23 | 0] = $3 >>> 24;
        $3 = HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8 | (HEAPU8[$1 + 14 | 0] << 16 | HEAPU8[$1 + 15 | 0] << 24);
        $1 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24);
        HEAP8[$0 + 8 | 0] = $1;
        HEAP8[$0 + 9 | 0] = $1 >>> 8;
        HEAP8[$0 + 10 | 0] = $1 >>> 16;
        HEAP8[$0 + 11 | 0] = $1 >>> 24;
        HEAP8[$0 + 12 | 0] = $3;
        HEAP8[$0 + 13 | 0] = $3 >>> 8;
        HEAP8[$0 + 14 | 0] = $3 >>> 16;
        HEAP8[$0 + 15 | 0] = $3 >>> 24;
        HEAP8[$2 + 3 | 0] = HEAPU8[$2 + 1 | 0];
        HEAP8[$2 + 1 | 0] = HEAPU8[$2 + 3 | 0] + 15 & 15;
        continue;
       }
       break;
      }
      HEAP8[97074] = HEAPU8[97074] + 1 & 15;
      HEAP8[$2 + 15 | 0] = 1;
      break label$1;
     } else {
      HEAP8[$2 + 3 | 0] = HEAPU8[$2 + 3 | 0] + 15 & 15;
      continue;
     }
    }
    break;
   }
  }
  HEAP8[$2 + 15 | 0] = 0;
 }
 global$0 = $2 + 16 | 0;
 return HEAP8[$2 + 15 | 0] & 1;
}
function tflite__ops__micro__reshape__ReshapeOutput_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 144 | 0;
 global$0 = $2;
 HEAP32[$2 + 136 >> 2] = $0;
 HEAP32[$2 + 132 >> 2] = $1;
 HEAP32[$2 + 128 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 136 >> 2], HEAP32[$2 + 132 >> 2], 0);
 HEAP32[$2 + 124 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 136 >> 2], HEAP32[$2 + 132 >> 2]);
 HEAP32[$2 + 120 >> 2] = tflite__NumElements_28TfLiteTensor_20const__29(HEAP32[$2 + 128 >> 2]);
 HEAP32[$2 + 116 >> 2] = HEAP32[HEAP32[$2 + 124 >> 2] + 8 >> 2];
 if (!((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 132 >> 2]) | 0) != 1 | HEAP32[HEAP32[$2 + 116 >> 2] >> 2] != 1 | HEAP32[HEAP32[$2 + 116 >> 2] + 4 >> 2])) {
  HEAP32[HEAP32[$2 + 116 >> 2] >> 2] = 0;
 }
 HEAP32[$2 + 112 >> 2] = 1;
 HEAP32[$2 + 108 >> 2] = -1;
 HEAP32[$2 + 104 >> 2] = 0;
 label$2 : {
  while (1) {
   if (HEAP32[$2 + 104 >> 2] < HEAP32[HEAP32[$2 + 116 >> 2] >> 2]) {
    HEAP32[$2 + 100 >> 2] = HEAP32[(HEAP32[$2 + 116 >> 2] + 4 | 0) + (HEAP32[$2 + 104 >> 2] << 2) >> 2];
    label$5 : {
     if (HEAP32[$2 + 100 >> 2] == -1) {
      if (HEAP32[$2 + 108 >> 2] != -1) {
       $0 = HEAP32[HEAP32[$2 + 136 >> 2] + 20 >> 2];
       $1 = HEAP32[$2 + 136 >> 2];
       $3 = HEAP32[$2 + 108 >> 2];
       HEAP32[$2 + 20 >> 2] = -1;
       HEAP32[$2 + 16 >> 2] = $3;
       HEAP32[$2 + 12 >> 2] = 42519;
       HEAP32[$2 + 8 >> 2] = 42507;
       HEAP32[$2 + 4 >> 2] = 54;
       HEAP32[$2 >> 2] = 42409;
       FUNCTION_TABLE[$0]($1, 42383, $2);
       HEAP32[$2 + 140 >> 2] = 1;
       break label$2;
      }
      HEAP32[$2 + 108 >> 2] = HEAP32[$2 + 104 >> 2];
      break label$5;
     }
     HEAP32[$2 + 112 >> 2] = Math_imul(HEAP32[$2 + 100 >> 2], HEAP32[$2 + 112 >> 2]);
    }
    HEAP32[$2 + 104 >> 2] = HEAP32[$2 + 104 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$2 + 108 >> 2] != -1) {
   HEAP32[(HEAP32[$2 + 116 >> 2] + 4 | 0) + (HEAP32[$2 + 108 >> 2] << 2) >> 2] = HEAP32[$2 + 120 >> 2] / HEAP32[$2 + 112 >> 2];
   HEAP32[$2 + 112 >> 2] = Math_imul(HEAP32[(HEAP32[$2 + 116 >> 2] + 4 | 0) + (HEAP32[$2 + 108 >> 2] << 2) >> 2], HEAP32[$2 + 112 >> 2]);
  }
  if (HEAP32[HEAP32[$2 + 128 >> 2] >> 2] != HEAP32[HEAP32[$2 + 124 >> 2] >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 136 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 136 >> 2];
   $3 = HEAP32[HEAP32[$2 + 128 >> 2] >> 2];
   HEAP32[$2 + 52 >> 2] = HEAP32[HEAP32[$2 + 124 >> 2] >> 2];
   HEAP32[$2 + 48 >> 2] = $3;
   HEAP32[$2 + 44 >> 2] = 42534;
   HEAP32[$2 + 40 >> 2] = 42522;
   HEAP32[$2 + 36 >> 2] = 65;
   HEAP32[$2 + 32 >> 2] = 42409;
   FUNCTION_TABLE[$0]($1, 42383, $2 + 32 | 0);
   HEAP32[$2 + 140 >> 2] = 1;
   break label$2;
  }
  if (HEAP32[$2 + 120 >> 2] != HEAP32[$2 + 112 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 136 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 136 >> 2];
   $3 = HEAP32[$2 + 120 >> 2];
   HEAP32[$2 + 84 >> 2] = HEAP32[$2 + 112 >> 2];
   HEAP32[$2 + 80 >> 2] = $3;
   HEAP32[$2 + 76 >> 2] = 42566;
   HEAP32[$2 + 72 >> 2] = 42547;
   HEAP32[$2 + 68 >> 2] = 66;
   HEAP32[$2 + 64 >> 2] = 42409;
   FUNCTION_TABLE[$0]($1, 42383, $2 - -64 | 0);
   HEAP32[$2 + 140 >> 2] = 1;
   break label$2;
  }
  HEAP32[$2 + 140 >> 2] = 0;
 }
 global$0 = $2 + 144 | 0;
 return HEAP32[$2 + 140 >> 2];
}
function graphicsScroll($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $4 = $3 + 8 | 0;
 $5 = $3 + 4 | 0;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 24 >> 2];
 HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 20 >> 2];
 graphicsToDeviceCoordinates(HEAP32[$3 + 28 >> 2], $3 + 16 | 0, $3 + 12 | 0);
 graphicsToDeviceCoordinates(HEAP32[$3 + 28 >> 2], $4, $5);
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 8 >> 2] - HEAP32[$3 + 16 >> 2];
 HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 4 >> 2] - HEAP32[$3 + 12 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 FUNCTION_TABLE[HEAPU8[$0 + 64 | 0] | HEAPU8[$0 + 65 | 0] << 8 | (HEAPU8[$0 + 66 | 0] << 16 | HEAPU8[$0 + 67 | 0] << 24)](HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
 label$1 : {
  if (HEAP32[$3 + 24 >> 2] > 0) {
   $0 = HEAP32[$3 + 28 >> 2];
   $1 = (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) - 1 | 0;
   $0 = HEAP32[$3 + 28 >> 2];
   $2 = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
   $0 = HEAP32[$3 + 28 >> 2];
   FUNCTION_TABLE[HEAPU8[$0 + 56 | 0] | HEAPU8[$0 + 57 | 0] << 8 | (HEAPU8[$0 + 58 | 0] << 16 | HEAPU8[$0 + 59 | 0] << 24)](HEAP32[$3 + 28 >> 2], 0, 0, HEAP32[$3 + 24 >> 2] - 1 | 0, $1, $2);
   break label$1;
  }
  if (HEAP32[$3 + 24 >> 2] < 0) {
   $0 = HEAP32[$3 + 28 >> 2];
   $1 = HEAP32[$3 + 24 >> 2] + (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) | 0;
   $0 = HEAP32[$3 + 28 >> 2];
   $2 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - 1 | 0;
   $0 = HEAP32[$3 + 28 >> 2];
   $4 = (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) - 1 | 0;
   $0 = HEAP32[$3 + 28 >> 2];
   $5 = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
   $0 = HEAP32[$3 + 28 >> 2];
   FUNCTION_TABLE[HEAPU8[$0 + 56 | 0] | HEAPU8[$0 + 57 | 0] << 8 | (HEAPU8[$0 + 58 | 0] << 16 | HEAPU8[$0 + 59 | 0] << 24)](HEAP32[$3 + 28 >> 2], $1, 0, $2, $4, $5);
  }
 }
 label$4 : {
  if (HEAP32[$3 + 20 >> 2] > 0) {
   $0 = HEAP32[$3 + 28 >> 2];
   $1 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - 1 | 0;
   $0 = HEAP32[$3 + 28 >> 2];
   $2 = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
   $0 = HEAP32[$3 + 28 >> 2];
   FUNCTION_TABLE[HEAPU8[$0 + 56 | 0] | HEAPU8[$0 + 57 | 0] << 8 | (HEAPU8[$0 + 58 | 0] << 16 | HEAPU8[$0 + 59 | 0] << 24)](HEAP32[$3 + 28 >> 2], 0, 0, $1, HEAP32[$3 + 20 >> 2] - 1 | 0, $2);
   break label$4;
  }
  if (HEAP32[$3 + 20 >> 2] < 0) {
   $0 = HEAP32[$3 + 28 >> 2];
   $1 = HEAP32[$3 + 20 >> 2] + (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) | 0;
   $0 = HEAP32[$3 + 28 >> 2];
   $2 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - 1 | 0;
   $0 = HEAP32[$3 + 28 >> 2];
   $4 = (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) - 1 | 0;
   $0 = HEAP32[$3 + 28 >> 2];
   $5 = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
   $0 = HEAP32[$3 + 28 >> 2];
   FUNCTION_TABLE[HEAPU8[$0 + 56 | 0] | HEAPU8[$0 + 57 | 0] << 8 | (HEAPU8[$0 + 58 | 0] << 16 | HEAPU8[$0 + 59 | 0] << 24)](HEAP32[$3 + 28 >> 2], 0, $1, $2, $4, $5);
  }
 }
 global$0 = $3 + 32 | 0;
}
function tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 + -64 | 0;
 global$0 = $6;
 HEAP32[$6 + 60 >> 2] = $0;
 HEAP32[$6 + 56 >> 2] = $1;
 HEAP32[$6 + 52 >> 2] = $2;
 HEAP32[$6 + 48 >> 2] = $3;
 HEAP32[$6 + 44 >> 2] = $4;
 HEAP32[$6 + 40 >> 2] = $5;
 HEAPF32[$6 + 36 >> 2] = HEAPF32[HEAP32[$6 + 48 >> 2] + 12 >> 2];
 HEAP32[$6 + 32 >> 2] = HEAP32[HEAP32[$6 + 48 >> 2] + 16 >> 2];
 HEAPF32[$6 + 24 >> 2] = HEAPF32[$6 + 36 >> 2];
 HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 32 >> 2];
 label$1 : {
  if (HEAP32[$6 + 60 >> 2] == 1) {
   $0 = $6 + 56 | 0;
   $1 = $6 + 20 | 0;
   HEAP32[$6 + 20 >> 2] = tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29__$_0__operator_28_29_28float_29_20const($6 + 24 | 0, Math_fround(0));
   $0 = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, $1) >> 2];
   HEAP32[HEAP32[$6 + 44 >> 2] >> 2] = $0;
   HEAP32[HEAP32[$6 + 40 >> 2] >> 2] = HEAP32[$6 + 52 >> 2];
   break label$1;
  }
  label$3 : {
   if (HEAP32[$6 + 60 >> 2] == 3) {
    $0 = $6 + 52 | 0;
    $1 = $6 + 12 | 0;
    $2 = $6 + 56 | 0;
    $3 = $6 + 16 | 0;
    $4 = $6 + 24 | 0;
    HEAP32[$6 + 16 >> 2] = tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29__$_0__operator_28_29_28float_29_20const($4, Math_fround(0));
    $2 = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($2, $3) >> 2];
    HEAP32[HEAP32[$6 + 44 >> 2] >> 2] = $2;
    HEAP32[$6 + 12 >> 2] = tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29__$_0__operator_28_29_28float_29_20const($4, Math_fround(6));
    $0 = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0, $1) >> 2];
    HEAP32[HEAP32[$6 + 40 >> 2] >> 2] = $0;
    break label$3;
   }
   label$5 : {
    if (HEAP32[$6 + 60 >> 2] == 2) {
     $0 = $6 + 52 | 0;
     $1 = $6 + 4 | 0;
     $2 = $6 + 56 | 0;
     $3 = $6 + 8 | 0;
     $4 = $6 + 24 | 0;
     HEAP32[$6 + 8 >> 2] = tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29__$_0__operator_28_29_28float_29_20const($4, Math_fround(-1));
     $2 = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($2, $3) >> 2];
     HEAP32[HEAP32[$6 + 44 >> 2] >> 2] = $2;
     HEAP32[$6 + 4 >> 2] = tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29__$_0__operator_28_29_28float_29_20const($4, Math_fround(1));
     $0 = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0, $1) >> 2];
     HEAP32[HEAP32[$6 + 40 >> 2] >> 2] = $0;
     break label$5;
    }
    HEAP32[HEAP32[$6 + 44 >> 2] >> 2] = HEAP32[$6 + 56 >> 2];
    HEAP32[HEAP32[$6 + 40 >> 2] >> 2] = HEAP32[$6 + 52 >> 2];
   }
  }
 }
 global$0 = $6 - -64 | 0;
}
function graphicsFillRectDevice($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 32 | 0;
 global$0 = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 if (HEAP32[$6 + 24 >> 2] > HEAP32[$6 + 16 >> 2]) {
  HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 24 >> 2];
  HEAP32[$6 + 24 >> 2] = HEAP32[$6 + 16 >> 2];
  HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 4 >> 2];
 }
 if (HEAP32[$6 + 20 >> 2] > HEAP32[$6 + 12 >> 2]) {
  HEAP32[$6 >> 2] = HEAP32[$6 + 20 >> 2];
  HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 12 >> 2];
  HEAP32[$6 + 12 >> 2] = HEAP32[$6 >> 2];
 }
 $0 = HEAP32[$6 + 28 >> 2];
 if (HEAP32[$6 + 24 >> 2] < (HEAPU8[$0 + 32 | 0] | HEAPU8[$0 + 33 | 0] << 8)) {
  $0 = HEAP32[$6 + 28 >> 2];
  HEAP32[$6 + 24 >> 2] = HEAPU8[$0 + 32 | 0] | HEAPU8[$0 + 33 | 0] << 8;
 }
 $0 = HEAP32[$6 + 28 >> 2];
 if (HEAP32[$6 + 20 >> 2] < (HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8)) {
  $0 = HEAP32[$6 + 28 >> 2];
  HEAP32[$6 + 20 >> 2] = HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8;
 }
 $0 = HEAP32[$6 + 28 >> 2];
 if (HEAP32[$6 + 16 >> 2] > (HEAPU8[$0 + 36 | 0] | HEAPU8[$0 + 37 | 0] << 8)) {
  $0 = HEAP32[$6 + 28 >> 2];
  HEAP32[$6 + 16 >> 2] = HEAPU8[$0 + 36 | 0] | HEAPU8[$0 + 37 | 0] << 8;
 }
 $0 = HEAP32[$6 + 28 >> 2];
 if (HEAP32[$6 + 12 >> 2] > (HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8)) {
  $0 = HEAP32[$6 + 28 >> 2];
  HEAP32[$6 + 12 >> 2] = HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8;
 }
 label$7 : {
  if (HEAP32[$6 + 16 >> 2] < HEAP32[$6 + 24 >> 2] | HEAP32[$6 + 12 >> 2] < HEAP32[$6 + 20 >> 2]) {
   break label$7;
  }
  $0 = HEAP32[$6 + 28 >> 2];
  if (HEAP32[$6 + 24 >> 2] < (HEAPU8[$0 + 40 | 0] | HEAPU8[$0 + 41 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$6 + 28 >> 2];
   $1 = HEAP32[$6 + 24 >> 2];
   HEAP8[$0 + 40 | 0] = $1;
   HEAP8[$0 + 41 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$6 + 28 >> 2];
  if (HEAP32[$6 + 16 >> 2] > (HEAPU8[$0 + 44 | 0] | HEAPU8[$0 + 45 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$6 + 28 >> 2];
   $1 = HEAP32[$6 + 16 >> 2];
   HEAP8[$0 + 44 | 0] = $1;
   HEAP8[$0 + 45 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$6 + 28 >> 2];
  if (HEAP32[$6 + 20 >> 2] < (HEAPU8[$0 + 42 | 0] | HEAPU8[$0 + 43 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$6 + 28 >> 2];
   $1 = HEAP32[$6 + 20 >> 2];
   HEAP8[$0 + 42 | 0] = $1;
   HEAP8[$0 + 43 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$6 + 28 >> 2];
  if (HEAP32[$6 + 12 >> 2] > (HEAPU8[$0 + 46 | 0] | HEAPU8[$0 + 47 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$6 + 28 >> 2];
   $1 = HEAP32[$6 + 12 >> 2];
   HEAP8[$0 + 46 | 0] = $1;
   HEAP8[$0 + 47 | 0] = $1 >>> 8;
  }
  if (!(HEAP32[$6 + 24 >> 2] != HEAP32[$6 + 16 >> 2] | HEAP32[$6 + 20 >> 2] != HEAP32[$6 + 12 >> 2])) {
   $0 = HEAP32[$6 + 28 >> 2];
   FUNCTION_TABLE[HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24)](HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 8 >> 2]);
   break label$7;
  }
  $0 = HEAP32[$6 + 28 >> 2];
  FUNCTION_TABLE[HEAPU8[$0 + 56 | 0] | HEAPU8[$0 + 57 | 0] << 8 | (HEAPU8[$0 + 58 | 0] << 16 | HEAPU8[$0 + 59 | 0] << 24)](HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], HEAP32[$6 + 8 >> 2]);
 }
 global$0 = $6 + 32 | 0;
}
function jsvAsString($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 112 | 0;
 global$0 = $1;
 HEAP32[$1 + 108 >> 2] = $0;
 HEAP32[$1 + 104 >> 2] = 0;
 label$1 : {
  label$2 : {
   if (!(jsvHasCharacterData(HEAP32[$1 + 108 >> 2]) & 1)) {
    break label$2;
   }
   if (!(jsvIsName(HEAP32[$1 + 108 >> 2]) & 1)) {
    break label$2;
   }
   HEAP32[$1 + 104 >> 2] = jsvNewFromStringVar(HEAP32[$1 + 108 >> 2], 0, 2147483647);
   break label$1;
  }
  label$3 : {
   if (jsvIsString(HEAP32[$1 + 108 >> 2]) & 1) {
    HEAP32[$1 + 104 >> 2] = jsvLockAgain(HEAP32[$1 + 108 >> 2]);
    break label$3;
   }
   label$5 : {
    if (jsvIsObject(HEAP32[$1 + 108 >> 2]) & 1) {
     HEAP32[$1 + 100 >> 2] = jspGetNamedField(HEAP32[$1 + 108 >> 2], 2647, 0);
     label$7 : {
      if (!(!HEAP32[$1 + 100 >> 2] | HEAP32[HEAP32[$1 + 100 >> 2] >> 2] == 3)) {
       HEAP32[$1 + 96 >> 2] = jspExecuteFunction(HEAP32[$1 + 100 >> 2], HEAP32[$1 + 108 >> 2], 0, 0);
       jsvUnLock(HEAP32[$1 + 100 >> 2]);
       HEAP32[$1 + 104 >> 2] = jsvAsStringAndUnLock(HEAP32[$1 + 96 >> 2]);
       break label$7;
      }
      jsvUnLock(HEAP32[$1 + 100 >> 2]);
      HEAP32[$1 + 104 >> 2] = jsvNewFromString(2656);
     }
     break label$5;
    }
    HEAP32[$1 + 92 >> 2] = jsvGetConstString(HEAP32[$1 + 108 >> 2]);
    label$9 : {
     if (HEAP32[$1 + 92 >> 2]) {
      HEAP32[$1 + 104 >> 2] = jsvNewFromString(HEAP32[$1 + 92 >> 2]);
      break label$9;
     }
     label$11 : {
      if (jsvIsPin(HEAP32[$1 + 108 >> 2]) & 1) {
       $0 = $1 + 16 | 0;
       jshGetPinString($0, HEAP32[HEAP32[$1 + 108 >> 2] >> 2] & 255);
       HEAP32[$1 + 104 >> 2] = jsvNewFromString($0);
       break label$11;
      }
      label$13 : {
       if (jsvIsInt(HEAP32[$1 + 108 >> 2]) & 1) {
        $0 = $1 + 16 | 0;
        itostr(HEAP32[HEAP32[$1 + 108 >> 2] >> 2], $0, 10);
        HEAP32[$1 + 104 >> 2] = jsvNewFromString($0);
        break label$13;
       }
       label$15 : {
        if (jsvIsFloat(HEAP32[$1 + 108 >> 2]) & 1) {
         $0 = HEAP32[$1 + 108 >> 2];
         $2 = HEAP32[$0 + 4 >> 2];
         wasm2js_scratch_store_i32(0, HEAP32[$0 >> 2]);
         wasm2js_scratch_store_i32(1, $2 | 0);
         $3 = +wasm2js_scratch_load_f64();
         $0 = $1 + 16 | 0;
         ftoa_bounded($3, $0, 70);
         HEAP32[$1 + 104 >> 2] = jsvNewFromString($0);
         break label$15;
        }
        label$17 : {
         label$18 : {
          if (!(jsvIsArray(HEAP32[$1 + 108 >> 2]) & 1)) {
           if (!(jsvIsArrayBuffer(HEAP32[$1 + 108 >> 2]) & 1)) {
            break label$18;
           }
          }
          HEAP32[$1 + 12 >> 2] = jsvNewFromString(2672);
          HEAP32[$1 + 104 >> 2] = jsvArrayJoin(HEAP32[$1 + 108 >> 2], HEAP32[$1 + 12 >> 2]);
          jsvUnLock(HEAP32[$1 + 12 >> 2]);
          break label$17;
         }
         label$20 : {
          if (jsvIsFunction(HEAP32[$1 + 108 >> 2]) & 1) {
           HEAP32[$1 + 104 >> 2] = jsvNewFromEmptyString();
           if (HEAP32[$1 + 104 >> 2]) {
            jsfGetJSON(HEAP32[$1 + 108 >> 2], HEAP32[$1 + 104 >> 2], 0);
           }
           break label$20;
          }
          jsExceptionHere(4, 2603, 0);
         }
        }
       }
      }
     }
    }
   }
  }
 }
 global$0 = $1 + 112 | 0;
 return HEAP32[$1 + 104 >> 2];
}
function graphicsFillEllipse($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = global$0 + -64 | 0;
 global$0 = $5;
 $6 = $5 + 48 | 0;
 $7 = $5 + 44 | 0;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 graphicsToDeviceCoordinates(HEAP32[$5 + 60 >> 2], $5 + 56 | 0, $5 + 52 | 0);
 graphicsToDeviceCoordinates(HEAP32[$5 + 60 >> 2], $6, $7);
 HEAP32[$5 + 40 >> 2] = (HEAP32[$5 + 56 >> 2] + HEAP32[$5 + 48 >> 2] | 0) / 2;
 HEAP32[$5 + 36 >> 2] = (HEAP32[$5 + 52 >> 2] + HEAP32[$5 + 44 >> 2] | 0) / 2;
 HEAP32[$5 + 32 >> 2] = (HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 56 >> 2] | 0) / 2;
 HEAP32[$5 + 28 >> 2] = (HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 52 >> 2] | 0) / 2;
 HEAP32[$5 + 24 >> 2] = 0;
 HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 28 >> 2];
 HEAP32[$5 + 16 >> 2] = Math_imul(HEAP32[$5 + 32 >> 2], HEAP32[$5 + 32 >> 2]);
 HEAP32[$5 + 12 >> 2] = Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 28 >> 2]);
 HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 12 >> 2] - Math_imul(HEAP32[$5 + 16 >> 2], (HEAP32[$5 + 28 >> 2] << 1) - 1 | 0);
 HEAP8[$5 + 3 | 0] = 0;
 while (1) {
  HEAP8[$5 + 3 | 0] = 0;
  $0 = HEAP32[$5 + 60 >> 2];
  graphicsFillRectDevice(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 40 >> 2] + HEAP32[$5 + 24 >> 2] | 0, HEAP32[$5 + 36 >> 2] + HEAP32[$5 + 20 >> 2] | 0, HEAP32[$5 + 40 >> 2] - HEAP32[$5 + 24 >> 2] | 0, HEAP32[$5 + 36 >> 2] + HEAP32[$5 + 20 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
  $0 = HEAP32[$5 + 60 >> 2];
  graphicsFillRectDevice(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 40 >> 2] + HEAP32[$5 + 24 >> 2] | 0, HEAP32[$5 + 36 >> 2] - HEAP32[$5 + 20 >> 2] | 0, HEAP32[$5 + 40 >> 2] - HEAP32[$5 + 24 >> 2] | 0, HEAP32[$5 + 36 >> 2] - HEAP32[$5 + 20 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
  HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 8 >> 2] << 1;
  if (HEAP32[$5 + 4 >> 2] < (Math_imul(HEAP32[$5 + 12 >> 2], (HEAP32[$5 + 24 >> 2] << 1) + 1 | 0) | 0)) {
   HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 24 >> 2] + 1;
   HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + Math_imul(HEAP32[$5 + 12 >> 2], (HEAP32[$5 + 24 >> 2] << 1) + 1 | 0);
   HEAP8[$5 + 3 | 0] = 1;
  }
  if (HEAP32[$5 + 4 >> 2] > (Math_imul(HEAP32[$5 + 16 >> 2], 0 - ((HEAP32[$5 + 20 >> 2] << 1) - 1 | 0) | 0) | 0)) {
   HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + -1;
   HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] - Math_imul(HEAP32[$5 + 16 >> 2], (HEAP32[$5 + 20 >> 2] << 1) - 1 | 0);
   HEAP8[$5 + 3 | 0] = 1;
  }
  if (HEAP8[$5 + 3 | 0] & 1 ? HEAP32[$5 + 20 >> 2] >= 0 : 0) {
   continue;
  }
  break;
 }
 while (1) {
  label$7 : {
   $0 = HEAP32[$5 + 24 >> 2];
   HEAP32[$5 + 24 >> 2] = $0 + 1;
   if (($0 | 0) >= HEAP32[$5 + 32 >> 2]) {
    break label$7;
   }
   $0 = HEAP32[$5 + 60 >> 2];
   graphicsFillRectDevice(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 40 >> 2] + HEAP32[$5 + 24 >> 2] | 0, HEAP32[$5 + 36 >> 2], HEAP32[$5 + 40 >> 2] - HEAP32[$5 + 24 >> 2] | 0, HEAP32[$5 + 36 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
   continue;
  }
  break;
 }
 global$0 = $5 - -64 | 0;
}
function jsfCreateFile($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 80 | 0;
 global$0 = $4;
 HEAP32[$4 + 72 >> 2] = $1;
 HEAP32[$4 + 68 >> 2] = $2;
 HEAP32[$4 + 64 >> 2] = $3;
 HEAP32[$4 + 60 >> 2] = jsfAlignAddress(HEAP32[$4 + 72 >> 2]) + 32;
 HEAP8[$4 + 59 | 0] = 0;
 HEAP32[$4 + 52 >> 2] = 0;
 HEAP32[$4 + 12 >> 2] = 0;
 label$1 : {
  while (1) {
   if ((HEAP32[$4 + 12 >> 2] != 0 ^ -1) & 1) {
    HEAP32[$4 + 52 >> 2] = 134437888;
    HEAP32[$4 + 12 >> 2] = 0;
    while (1) {
     if (jsfGetFileHeader(HEAP32[$4 + 52 >> 2], $4 + 16 | 0, 0) & 1) {
      while (1) {
       if (jsfGetNextFileHeader($4 + 52 | 0, $4 + 16 | 0, 0) & 1) {
        continue;
       }
       break;
      }
     }
     label$7 : {
      if (jsfGetSpaceLeftInPage(HEAP32[$4 + 52 >> 2]) >>> 0 < HEAPU32[$4 + 60 >> 2]) {
       HEAP32[$4 + 52 >> 2] = jsfGetAddressOfNextPage(HEAP32[$4 + 52 >> 2]);
       break label$7;
      }
      HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 52 >> 2];
     }
     if ((HEAP32[$4 + 52 >> 2] ? HEAP32[$4 + 12 >> 2] != 0 ^ -1 : 0) & 1) {
      continue;
     }
     break;
    }
    if (!HEAP32[$4 + 12 >> 2]) {
     label$12 : {
      if (!(HEAP8[$4 + 59 | 0] & 1)) {
       HEAP8[$4 + 59 | 0] = 1;
       if (!(jsfCompact() & 1)) {
        HEAP32[$4 + 76 >> 2] = 0;
        break label$1;
       }
       HEAP32[$4 + 52 >> 2] = 134437888;
       break label$12;
      }
      HEAP32[$4 + 76 >> 2] = 0;
      break label$1;
     }
    }
    continue;
   }
   break;
  }
  HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 12 >> 2];
  HEAP32[$4 + 8 >> 2] = jsfGetSpaceLeftInPage(HEAP32[$4 + 52 >> 2]);
  HEAP32[$4 + 4 >> 2] = jsfGetAddressOfNextPage(HEAP32[$4 + 52 >> 2]);
  label$15 : {
   if (!HEAP32[$4 + 4 >> 2] | HEAP32[$4 + 4 >> 2] - HEAP32[$4 + 52 >> 2] >>> 0 >= HEAPU32[$4 + 60 >> 2] | (HEAPU32[$4 + 8 >> 2] <= (HEAP32[$4 + 72 >> 2] + HEAP32[$4 + 4 >> 2] | 0) - HEAP32[$4 + 52 >> 2] >>> 0 | HEAPU32[$4 + 60 >> 2] >= 512)) {
    break label$15;
   }
   if (jsfGetFileHeader(HEAP32[$4 + 4 >> 2], $4 + 16 | 0, 0) & 1) {
    break label$15;
   }
   HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 4 >> 2];
  }
  HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 72 >> 2] | HEAP32[$4 + 68 >> 2] << 24;
  $3 = HEAP32[$0 + 4 >> 2];
  $1 = $4 + 16 | 0;
  HEAP32[$1 + 4 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 8 >> 2] = $3;
  HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
  $2 = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$1 + 24 >> 2] = $2;
  $2 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$1 + 16 >> 2] = $2;
  jshFlashRead($1, HEAP32[$4 + 52 >> 2], 32);
  if (HEAP32[$4 + 64 >> 2]) {
   $0 = $4 + 16 | 0;
   $3 = HEAP32[$0 + 4 >> 2];
   $1 = HEAP32[$4 + 64 >> 2];
   HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $2 = HEAP32[$0 + 28 >> 2];
   HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 24 >> 2];
   HEAP32[$1 + 28 >> 2] = $2;
   $2 = HEAP32[$0 + 20 >> 2];
   HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
   HEAP32[$1 + 20 >> 2] = $2;
   $2 = HEAP32[$0 + 12 >> 2];
   HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
   HEAP32[$1 + 12 >> 2] = $2;
  }
  HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 52 >> 2] + 32;
 }
 global$0 = $4 + 80 | 0;
 return HEAP32[$4 + 76 >> 2];
}
function jswrap_banglejs_setLCDMode($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 96 | 0;
 global$0 = $1;
 HEAP32[$1 + 92 >> 2] = $0;
 HEAP32[$1 + 88 >> 2] = 1;
 label$1 : {
  label$2 : {
   if (!(jsvIsUndefined(HEAP32[$1 + 92 >> 2]) & 1)) {
    if (!(jsvIsStringEqual(HEAP32[$1 + 92 >> 2], 28023) & 1)) {
     break label$2;
    }
   }
   HEAP32[$1 + 88 >> 2] = 1;
   break label$1;
  }
  label$4 : {
   if (jsvIsStringEqual(HEAP32[$1 + 92 >> 2], 28030) & 1) {
    HEAP32[$1 + 88 >> 2] = 0;
    break label$4;
   }
   label$6 : {
    if (jsvIsStringEqual(HEAP32[$1 + 92 >> 2], 28035) & 1) {
     HEAP32[$1 + 88 >> 2] = 2;
     break label$6;
    }
    label$8 : {
     if (jsvIsStringEqual(HEAP32[$1 + 92 >> 2], 28050) & 1) {
      HEAP32[$1 + 88 >> 2] = 3;
      break label$8;
     }
     label$10 : {
      if (jsvIsStringEqual(HEAP32[$1 + 92 >> 2], 28058) & 1) {
       HEAP32[$1 + 88 >> 2] = 4;
       break label$10;
      }
      HEAP32[$1 >> 2] = HEAP32[$1 + 92 >> 2];
      jsExceptionHere(1, 28064, $1);
     }
    }
   }
  }
 }
 HEAP32[$1 + 84 >> 2] = jsvObjectGetChild(HEAP32[23775], 28e3, 0);
 label$12 : {
  if (!HEAP32[$1 + 84 >> 2]) {
   break label$12;
  }
  $0 = $1 + 16 | 0;
  jswrap_graphics_setFont(HEAP32[$1 + 84 >> 2], 0, 1);
  if (!(graphicsGetFromVar($0, HEAP32[$1 + 84 >> 2]) & 1)) {
   break label$12;
  }
  jsvObjectSetOrRemoveChild(HEAPU8[$1 + 16 | 0] | HEAPU8[$1 + 17 | 0] << 8 | (HEAPU8[$1 + 18 | 0] << 16 | HEAPU8[$1 + 19 | 0] << 24));
  HEAP32[$1 + 12 >> 2] = 0;
  $0 = HEAP32[$1 + 88 >> 2];
  label$13 : {
   if ($0 >>> 0 > 4) {
    break label$13;
   }
   label$14 : {
    switch ($0 - 2 | 0) {
    default:
     HEAP8[$1 + 28 | 0] = 240;
     HEAP8[$1 + 29 | 0] = 0;
     HEAP8[$1 + 30 | 0] = 240;
     HEAP8[$1 + 31 | 0] = 0;
     HEAP8[$1 + 32 | 0] = 16;
     break label$13;
    case 0:
     HEAP8[$1 + 28 | 0] = 240;
     HEAP8[$1 + 29 | 0] = 0;
     HEAP8[$1 + 30 | 0] = 160;
     HEAP8[$1 + 31 | 0] = 0;
     HEAP8[$1 + 32 | 0] = 16;
     break label$13;
    case 1:
     HEAP8[$1 + 28 | 0] = 120;
     HEAP8[$1 + 29 | 0] = 0;
     HEAP8[$1 + 30 | 0] = 120;
     HEAP8[$1 + 31 | 0] = 0;
     HEAP8[$1 + 32 | 0] = 8;
     HEAP32[$1 + 12 >> 2] = 14400;
     break label$13;
    case 2:
     break label$14;
    }
   }
   HEAP8[$1 + 28 | 0] = 80;
   HEAP8[$1 + 29 | 0] = 0;
   HEAP8[$1 + 30 | 0] = 80;
   HEAP8[$1 + 31 | 0] = 0;
   HEAP8[$1 + 32 | 0] = 8;
   HEAP32[$1 + 12 >> 2] = 6400;
  }
  if (HEAP32[$1 + 12 >> 2]) {
   jsvGarbageCollect();
   jsvDefragment();
   HEAP32[$1 + 8 >> 2] = jsvNewFlatStringOfLength(HEAP32[$1 + 12 >> 2]);
   label$19 : {
    if (HEAP32[$1 + 8 >> 2]) {
     jsvObjectSetChildAndUnLock(HEAPU8[$1 + 16 | 0] | HEAPU8[$1 + 17 | 0] << 8 | (HEAPU8[$1 + 18 | 0] << 16 | HEAPU8[$1 + 19 | 0] << 24), 28084, jsvNewArrayBufferFromString(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]));
     break label$19;
    }
    jsExceptionHere(1, 28091, 0);
    jswrap_banglejs_setLCDMode(0);
    break label$12;
   }
   jsvUnLock(HEAP32[$1 + 8 >> 2]);
  }
  $0 = $1 + 16 | 0;
  graphicsStructResetState($0);
  graphicsSetVar($0);
  jsvUnLock(HEAP32[$1 + 84 >> 2]);
  lcdST7789_setMode(HEAP32[$1 + 88 >> 2]);
 }
 global$0 = $1 + 96 | 0;
}
function TfLiteStatus_20tflite__ops__micro__maximum_minimum__Eval__28tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__KernelType_290_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext__OpContext_28TfLiteContext__2c_20TfLiteNode__29($2 + 8 | 0, HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2]);
 label$1 : {
  label$2 : {
   label$3 : {
    $0 = HEAP32[HEAP32[$2 + 16 >> 2] >> 2] + -1 | 0;
    if ($0 >>> 0 > 8) {
     break label$3;
    }
    label$4 : {
     switch ($0 - 1 | 0) {
     default:
      void_20tflite__ops__micro__maximum_minimum__TFLiteOperation_float_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext_20const__29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], $2 + 8 | 0);
      break label$2;
     case 1:
      void_20tflite__ops__micro__maximum_minimum__TFLiteOperation_unsigned_20char_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext_20const__29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], $2 + 8 | 0);
      break label$2;
     case 7:
      void_20tflite__ops__micro__maximum_minimum__TFLiteOperation_signed_20char_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext_20const__29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], $2 + 8 | 0);
      break label$2;
     case 0:
      void_20tflite__ops__micro__maximum_minimum__TFLiteOperation_int_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext_20const__29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], $2 + 8 | 0);
      break label$2;
     case 3:
     case 4:
     case 5:
     case 6:
      break label$3;
     case 2:
      break label$4;
     }
    }
    void_20tflite__ops__micro__maximum_minimum__TFLiteOperation_long_20long_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext_20const__29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], $2 + 8 | 0);
    break label$2;
   }
   $0 = HEAP32[HEAP32[$2 + 24 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 24 >> 2];
   $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 16 >> 2] >> 2]);
   HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 16 >> 2] >> 2];
   HEAP32[$2 >> 2] = $3;
   FUNCTION_TABLE[$0]($1, 47310, $2);
   HEAP32[$2 + 28 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function TfLiteStatus_20tflite__ops__micro__maximum_minimum__Eval__28tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__KernelType_290_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext__OpContext_28TfLiteContext__2c_20TfLiteNode__29($2 + 8 | 0, HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2]);
 label$1 : {
  label$2 : {
   label$3 : {
    $0 = HEAP32[HEAP32[$2 + 16 >> 2] >> 2] + -1 | 0;
    if ($0 >>> 0 > 8) {
     break label$3;
    }
    label$4 : {
     switch ($0 - 1 | 0) {
     default:
      void_20tflite__ops__micro__maximum_minimum__TFLiteOperation_float_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext_20const__29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], $2 + 8 | 0);
      break label$2;
     case 1:
      void_20tflite__ops__micro__maximum_minimum__TFLiteOperation_unsigned_20char_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext_20const__29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], $2 + 8 | 0);
      break label$2;
     case 7:
      void_20tflite__ops__micro__maximum_minimum__TFLiteOperation_signed_20char_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext_20const__29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], $2 + 8 | 0);
      break label$2;
     case 0:
      void_20tflite__ops__micro__maximum_minimum__TFLiteOperation_int_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext_20const__29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], $2 + 8 | 0);
      break label$2;
     case 3:
     case 4:
     case 5:
     case 6:
      break label$3;
     case 2:
      break label$4;
     }
    }
    void_20tflite__ops__micro__maximum_minimum__TFLiteOperation_long_20long_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext_20const__29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], $2 + 8 | 0);
    break label$2;
   }
   $0 = HEAP32[HEAP32[$2 + 24 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 24 >> 2];
   $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 16 >> 2] >> 2]);
   HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 16 >> 2] >> 2];
   HEAP32[$2 >> 2] = $3;
   FUNCTION_TABLE[$0]($1, 47310, $2);
   HEAP32[$2 + 28 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function jslPrintTokenLineMarker($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 128 | 0;
 global$0 = $4;
 HEAP32[$4 + 124 >> 2] = $0;
 HEAP32[$4 + 120 >> 2] = $1;
 HEAP32[$4 + 116 >> 2] = $2;
 HEAP32[$4 + 112 >> 2] = $3;
 HEAP32[$4 + 108 >> 2] = 1;
 HEAP32[$4 + 104 >> 2] = 1;
 jsvGetLineAndCol(HEAP32[HEAP32[13768] + 104 >> 2], HEAP32[$4 + 116 >> 2], $4 + 108 | 0, $4 + 104 | 0);
 HEAP32[$4 + 100 >> 2] = jsvGetIndexFromLineAndCol(HEAP32[HEAP32[13768] + 104 >> 2], HEAP32[$4 + 108 >> 2], 1);
 HEAP32[$4 + 96 >> 2] = jsvGetCharsOnLine(HEAP32[HEAP32[13768] + 104 >> 2], HEAP32[$4 + 108 >> 2]);
 HEAP32[$4 + 92 >> 2] = 0;
 if (HEAP32[$4 + 112 >> 2]) {
  FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]](HEAP32[$4 + 112 >> 2], HEAP32[$4 + 120 >> 2]);
  HEAP32[$4 + 92 >> 2] = strlen(HEAP32[$4 + 112 >> 2]);
 }
 if (!(HEAPU32[$4 + 96 >> 2] <= 60 | HEAP32[$4 + 116 >> 2] - HEAP32[$4 + 100 >> 2] >>> 0 <= 30)) {
  cbprintf(HEAP32[$4 + 124 >> 2], HEAP32[$4 + 120 >> 2], 1862, 0);
  HEAP32[$4 + 88 >> 2] = (HEAP32[$4 + 116 >> 2] - 30 | 0) - HEAP32[$4 + 100 >> 2];
  HEAP32[$4 + 100 >> 2] = HEAP32[$4 + 100 >> 2] + (HEAP32[$4 + 88 >> 2] + 3 | 0);
  label$3 : {
   if (HEAPU32[$4 + 88 >> 2] <= HEAPU32[$4 + 104 >> 2]) {
    HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 104 >> 2] - HEAP32[$4 + 88 >> 2];
    break label$3;
   }
   HEAP32[$4 + 104 >> 2] = 0;
  }
  HEAP32[$4 + 96 >> 2] = HEAP32[$4 + 96 >> 2] - HEAP32[$4 + 88 >> 2];
 }
 HEAP32[$4 + 84 >> 2] = 0;
 jsvStringIteratorNew($4 - -64 | 0, HEAP32[HEAP32[13768] + 104 >> 2], HEAP32[$4 + 100 >> 2]);
 HEAP8[$4 + 63 | 0] = 0;
 while (1) {
  label$6 : {
   $1 = !(jsvStringIteratorHasChar($4 - -64 | 0) & 1);
   $0 = 0;
   label$7 : {
    if ($1) {
     break label$7;
    }
    $0 = 0;
    if (HEAP32[$4 + 84 >> 2] >= 60) {
     break label$7;
    }
    $0 = HEAPU8[$4 + 63 | 0] != 255;
   }
   if (!$0) {
    break label$6;
   }
   HEAP8[$4 + 62 | 0] = jsvStringIteratorGetCharAndNext($4 - -64 | 0);
   if (HEAPU8[$4 + 62 | 0] == 10) {
    break label$6;
   }
   if (jslNeedSpaceBetween(HEAPU8[$4 + 63 | 0], HEAPU8[$4 + 62 | 0]) & 1) {
    HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 104 >> 2] + 1;
    FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]](1844, HEAP32[$4 + 120 >> 2]);
   }
   $0 = $4 + 16 | 0;
   jslFunctionCharAsString(HEAPU8[$4 + 62 | 0], $0);
   HEAP32[$4 + 12 >> 2] = strlen($0);
   HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 104 >> 2] + (HEAP32[$4 + 12 >> 2] - 1 | 0);
   FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]]($0, HEAP32[$4 + 120 >> 2]);
   HEAP32[$4 + 84 >> 2] = HEAP32[$4 + 84 >> 2] + 1;
   HEAP8[$4 + 63 | 0] = HEAPU8[$4 + 62 | 0];
   continue;
  }
  break;
 }
 jsvStringIteratorFree($4 - -64 | 0);
 if (HEAPU32[$4 + 96 >> 2] > 60) {
  FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]](1862, HEAP32[$4 + 120 >> 2]);
 }
 FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]](1866, HEAP32[$4 + 120 >> 2]);
 HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 92 >> 2] + HEAP32[$4 + 104 >> 2];
 while (1) {
  $0 = HEAP32[$4 + 104 >> 2];
  HEAP32[$4 + 104 >> 2] = $0 + -1;
  if ($0 >>> 0 > 1) {
   FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]](1844, HEAP32[$4 + 120 >> 2]);
   continue;
  }
  break;
 }
 FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]](1868, HEAP32[$4 + 120 >> 2]);
 global$0 = $4 + 128 | 0;
}
function jsvReadConfigObject($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 label$1 : {
  if (jsvIsUndefined(HEAP32[$3 + 40 >> 2]) & 1) {
   HEAP8[$3 + 47 | 0] = 1;
   break label$1;
  }
  if (!(jsvIsObject(HEAP32[$3 + 40 >> 2]) & 1)) {
   jsExceptionHere(1, 3338, 0);
   HEAP8[$3 + 47 | 0] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($3 + 24 | 0, HEAP32[$3 + 40 >> 2]);
  HEAP8[$3 + 23 | 0] = 1;
  while (1) {
   if (HEAP8[$3 + 23 | 0] & 1) {
    $0 = jsvObjectIteratorHasValue($3 + 24 | 0);
   } else {
    $0 = 0;
   }
   if ($0 & 1) {
    HEAP32[$3 + 16 >> 2] = jsvObjectIteratorGetKey($3 + 24 | 0);
    HEAP8[$3 + 15 | 0] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    while (1) {
     if (HEAP32[$3 + 8 >> 2] < HEAP32[$3 + 32 >> 2]) {
      if (jsvIsStringEqual(HEAP32[$3 + 16 >> 2], HEAP32[HEAP32[$3 + 36 >> 2] + Math_imul(HEAP32[$3 + 8 >> 2], 12) >> 2]) & 1) {
       HEAP8[$3 + 15 | 0] = 1;
       if (HEAP32[(HEAP32[$3 + 36 >> 2] + Math_imul(HEAP32[$3 + 8 >> 2], 12) | 0) + 8 >> 2]) {
        HEAP32[$3 + 4 >> 2] = jsvObjectIteratorGetValue($3 + 24 | 0);
        $0 = HEAPU16[(HEAP32[$3 + 36 >> 2] + Math_imul(HEAP32[$3 + 8 >> 2], 12) | 0) + 4 >> 1];
        label$12 : {
         if ($0 >>> 0 > 27) {
          break label$12;
         }
         label$13 : {
          switch ($0 + -3 | 0) {
          case 0:
          case 2:
          case 4:
          case 24:
           $0 = jsvLockAgain(HEAP32[$3 + 4 >> 2]);
           HEAP32[HEAP32[(HEAP32[$3 + 36 >> 2] + Math_imul(HEAP32[$3 + 8 >> 2], 12) | 0) + 8 >> 2] >> 2] = $0;
           break label$12;
          case 9:
           $0 = jshGetPinFromVar(HEAP32[$3 + 4 >> 2]);
           HEAP8[HEAP32[(HEAP32[$3 + 36 >> 2] + Math_imul(HEAP32[$3 + 8 >> 2], 12) | 0) + 8 >> 2]] = $0;
           break label$12;
          case 8:
           $0 = jsvGetBool(HEAP32[$3 + 4 >> 2]);
           HEAP8[HEAP32[(HEAP32[$3 + 36 >> 2] + Math_imul(HEAP32[$3 + 8 >> 2], 12) | 0) + 8 >> 2]] = $0 & 1;
           break label$12;
          case 6:
           $0 = jsvGetInteger(HEAP32[$3 + 4 >> 2]);
           HEAP32[HEAP32[(HEAP32[$3 + 36 >> 2] + Math_imul(HEAP32[$3 + 8 >> 2], 12) | 0) + 8 >> 2] >> 2] = $0;
           break label$12;
          case 7:
           break label$13;
          default:
           break label$12;
          }
         }
         $4 = jsvGetFloat(HEAP32[$3 + 4 >> 2]);
         HEAPF64[HEAP32[(HEAP32[$3 + 36 >> 2] + Math_imul(HEAP32[$3 + 8 >> 2], 12) | 0) + 8 >> 2] >> 3] = $4;
        }
        jsvUnLock(HEAP32[$3 + 4 >> 2]);
       }
      }
      HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 1;
      continue;
     }
     break;
    }
    if (!(HEAP8[$3 + 15 | 0] & 1)) {
     HEAP32[$3 >> 2] = HEAP32[$3 + 16 >> 2];
     jsExceptionHere(1, 3372, $3);
     HEAP8[$3 + 23 | 0] = 0;
    }
    $0 = $3 + 24 | 0;
    jsvUnLock(HEAP32[$3 + 16 >> 2]);
    jsvObjectIteratorNext($0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($3 + 24 | 0);
  HEAP8[$3 + 47 | 0] = HEAP8[$3 + 23 | 0] & 1;
 }
 global$0 = $3 + 48 | 0;
 return HEAP8[$3 + 47 | 0] & 1;
}
function tflite__SignedSymmetricPerChannelQuantize_28float_20const__2c_20TfLiteIntArray__2c_20int_2c_20signed_20char__2c_20float__29($0, $1, $2, $3) {
 var $4 = 0, $5 = Math_fround(0);
 $4 = global$0 - 80 | 0;
 global$0 = $4;
 HEAP32[$4 + 76 >> 2] = $0;
 HEAP32[$4 + 72 >> 2] = $1;
 HEAP32[$4 + 68 >> 2] = 0;
 HEAP32[$4 + 64 >> 2] = $2;
 HEAP32[$4 + 60 >> 2] = $3;
 HEAP32[$4 + 56 >> 2] = tflite__ElementCount_28TfLiteIntArray_20const__29(HEAP32[$4 + 72 >> 2]);
 HEAP32[$4 + 52 >> 2] = HEAP32[(HEAP32[$4 + 72 >> 2] + 4 | 0) + (HEAP32[$4 + 68 >> 2] << 2) >> 2];
 HEAP32[$4 + 48 >> 2] = HEAP32[$4 + 56 >> 2] / HEAP32[$4 + 52 >> 2];
 HEAP32[$4 + 44 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 44 >> 2] < HEAP32[$4 + 52 >> 2]) {
   HEAPF32[$4 + 40 >> 2] = 0;
   HEAPF32[$4 + 36 >> 2] = 0;
   HEAP32[$4 + 32 >> 2] = 1;
   HEAP32[$4 + 28 >> 2] = 0;
   while (1) {
    if (HEAP32[$4 + 28 >> 2] < HEAP32[$4 + 68 >> 2]) {
     HEAP32[$4 + 32 >> 2] = Math_imul(HEAP32[(HEAP32[$4 + 72 >> 2] + 4 | 0) + (HEAP32[$4 + 28 >> 2] << 2) >> 2], HEAP32[$4 + 32 >> 2]);
     HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 28 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 48 >> 2] / HEAP32[$4 + 32 >> 2];
   HEAP32[$4 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$4 + 20 >> 2] < HEAP32[$4 + 48 >> 2]) {
     HEAP32[$4 + 16 >> 2] = Math_imul(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 24 >> 2]) + Math_imul(HEAP32[$4 + 20 >> 2], HEAP32[$4 + 32 >> 2]);
     HEAPF32[$4 + 40 >> 2] = fminf(HEAPF32[$4 + 40 >> 2], HEAPF32[HEAP32[$4 + 76 >> 2] + (HEAP32[$4 + 16 >> 2] << 2) >> 2]);
     HEAPF32[$4 + 36 >> 2] = fmaxf(HEAPF32[$4 + 36 >> 2], HEAPF32[HEAP32[$4 + 76 >> 2] + (HEAP32[$4 + 16 >> 2] << 2) >> 2]);
     HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   $5 = Math_fround(fmaxf(fabs_28float_29(HEAPF32[$4 + 40 >> 2]), fabs_28float_29(HEAPF32[$4 + 36 >> 2])) / Math_fround(127));
   HEAPF32[HEAP32[$4 + 60 >> 2] + (HEAP32[$4 + 44 >> 2] << 2) >> 2] = $5;
   HEAP32[$4 + 12 >> 2] = 0;
   while (1) {
    if (HEAP32[$4 + 12 >> 2] < HEAP32[$4 + 48 >> 2]) {
     HEAP32[$4 + 8 >> 2] = Math_imul(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 24 >> 2]) + Math_imul(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 32 >> 2]);
     $0 = $4;
     $5 = Math_fround(roundf(Math_fround(Math_fround(HEAPF32[HEAP32[$4 + 76 >> 2] + (HEAP32[$4 + 8 >> 2] << 2) >> 2] / HEAPF32[HEAP32[$4 + 60 >> 2] + (HEAP32[$4 + 44 >> 2] << 2) >> 2]))));
     label$9 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648)) {
       $1 = ~~$5;
       break label$9;
      }
      $1 = -2147483648;
     }
     HEAP32[$0 + 4 >> 2] = $1;
     $5 = fminf(fmaxf(Math_fround(HEAP32[$4 + 4 >> 2]), Math_fround(-127)), Math_fround(127));
     label$11 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648)) {
       $0 = ~~$5;
       break label$11;
      }
      $0 = -2147483648;
     }
     HEAP8[HEAP32[$4 + 64 >> 2] + HEAP32[$4 + 8 >> 2] | 0] = $0;
     HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 44 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $4 + 80 | 0;
}
function jsspiSoftwareFunc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 48 | 0;
 global$0 = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP32[$4 + 32 >> 2] = $3;
 HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 32 >> 2];
 HEAP8[$4 + 27 | 0] = (HEAP8[HEAP32[$4 + 28 >> 2] + 8 | 0] & 1) != 0;
 HEAP8[$4 + 26 | 0] = (HEAPU8[HEAP32[$4 + 28 >> 2] + 8 | 0] & 2) != 0;
 HEAP32[$4 + 20 >> 2] = HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] & 1 ? -1 : 1;
 $0 = $4;
 if (HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] & 1) {
  $1 = -1;
 } else {
  $1 = HEAP32[$4 + 28 >> 2];
  $1 = HEAPU8[$1 + 10 | 0] | HEAPU8[$1 + 11 | 0] << 8 | (HEAPU8[$1 + 12 | 0] << 16 | HEAPU8[$1 + 13 | 0] << 24);
 }
 HEAP32[$0 + 16 >> 2] = $1;
 HEAP32[$4 + 12 >> 2] = 0;
 while (1) {
  if (HEAPU32[$4 + 12 >> 2] < HEAPU32[$4 + 36 >> 2]) {
   HEAP32[$4 + 8 >> 2] = HEAPU8[HEAP32[$4 + 44 >> 2] + HEAP32[$4 + 12 >> 2] | 0];
   HEAP32[$4 + 4 >> 2] = 0;
   $0 = $4;
   label$4 : {
    if (HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] & 1) {
     $1 = HEAP32[$4 + 28 >> 2];
     $1 = (HEAPU8[$1 + 10 | 0] | HEAPU8[$1 + 11 | 0] << 8 | (HEAPU8[$1 + 12 | 0] << 16 | HEAPU8[$1 + 13 | 0] << 24)) - 1 | 0;
     break label$4;
    }
    $1 = 0;
   }
   HEAP32[$0 >> 2] = $1;
   while (1) {
    if (HEAP32[$4 >> 2] != HEAP32[$4 + 16 >> 2]) {
     label$8 : {
      if (!(HEAP8[$4 + 27 | 0] & 1)) {
       if (HEAPU8[HEAP32[$4 + 28 >> 2] + 7 | 0] != 255) {
        jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 7 | 0], (HEAP32[$4 + 8 >> 2] >> HEAP32[$4 >> 2] & 1) != 0);
       }
       if (HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0] != 255) {
        jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0], (HEAPU8[$4 + 26 | 0] ^ -1) & 1);
       }
       if (HEAPU8[HEAP32[$4 + 28 >> 2] + 6 | 0] != 255) {
        HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] << 1 | (jshPinGetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 6 | 0]) & 1 ? 1 : 0);
       }
       if (HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0] != 255) {
        jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0], HEAP8[$4 + 26 | 0] & 1);
       }
       break label$8;
      }
      if (HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0] != 255) {
       jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0], (HEAPU8[$4 + 26 | 0] ^ -1) & 1);
      }
      if (HEAPU8[HEAP32[$4 + 28 >> 2] + 7 | 0] != 255) {
       jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 7 | 0], (HEAP32[$4 + 8 >> 2] >> HEAP32[$4 >> 2] & 1) != 0);
      }
      if (HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0] != 255) {
       jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0], HEAP8[$4 + 26 | 0] & 1);
      }
      if (HEAPU8[HEAP32[$4 + 28 >> 2] + 6 | 0] != 255) {
       HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] << 1 | (jshPinGetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 6 | 0]) & 1 ? 1 : 0);
      }
     }
     HEAP32[$4 >> 2] = HEAP32[$4 + 20 >> 2] + HEAP32[$4 >> 2];
     continue;
    }
    break;
   }
   if (HEAP32[$4 + 40 >> 2]) {
    HEAP8[HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 12 >> 2] | 0] = HEAP32[$4 + 4 >> 2];
   }
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $4 + 48 | 0;
}
function jsvFreePtr($0) {
 var $1 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 if (!(jsvIsNameWithValue(HEAP32[$1 + 44 >> 2]) & 1)) {
  if (jsvHasSingleChild(HEAP32[$1 + 44 >> 2]) & 1) {
   if (jsvGetFirstChild(HEAP32[$1 + 44 >> 2]) & 65535) {
    HEAP32[$1 + 40 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$1 + 44 >> 2]) & 65535);
    jsvUnRef(HEAP32[$1 + 40 >> 2]);
    jsvUnLock(HEAP32[$1 + 40 >> 2]);
   }
  }
 }
 if (jsvHasCharacterData(HEAP32[$1 + 44 >> 2]) & 1) {
  HEAP16[$1 + 38 >> 1] = jsvGetLastChild(HEAP32[$1 + 44 >> 2]);
  while (1) {
   if (HEAPU16[$1 + 38 >> 1]) {
    HEAP32[$1 + 32 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 38 >> 1]);
    HEAP16[$1 + 38 >> 1] = jsvGetLastChild(HEAP32[$1 + 32 >> 2]);
    jsvFreePtrInternal(HEAP32[$1 + 32 >> 2]);
    continue;
   }
   break;
  }
  label$7 : {
   if (jsvIsFlatString(HEAP32[$1 + 44 >> 2]) & 1) {
    HEAP32[$1 + 28 >> 2] = jsvGetFlatStringBlocks(HEAP32[$1 + 44 >> 2]);
    HEAP16[$1 + 26 >> 1] = (jsvGetRef(HEAP32[$1 + 44 >> 2]) & 65535) + HEAP32[$1 + 28 >> 2];
    HEAP16[$1 + 24 >> 1] = HEAPU16[27542];
    HEAP16[$1 + 22 >> 1] = 0;
    while (1) {
     if (HEAPU16[$1 + 24 >> 1] ? HEAPU16[$1 + 24 >> 1] < HEAPU16[$1 + 26 >> 1] : 0) {
      HEAP16[$1 + 22 >> 1] = HEAPU16[$1 + 24 >> 1];
      HEAP16[$1 + 24 >> 1] = jsvGetNextSibling(jsvGetAddressOf(HEAPU16[$1 + 24 >> 1]));
      continue;
     }
     break;
    }
    while (1) {
     label$14 : {
      $0 = HEAP32[$1 + 28 >> 2];
      HEAP32[$1 + 28 >> 2] = $0 + -1;
      if (!$0) {
       break label$14;
      }
      $0 = HEAPU16[$1 + 26 >> 1];
      HEAP16[$1 + 26 >> 1] = $0 + -1;
      HEAP32[$1 + 16 >> 2] = jsvGetAddressOf($0);
      HEAP16[HEAP32[$1 + 16 >> 2] + 14 >> 1] = 0;
      jsvSetNextSibling(HEAP32[$1 + 16 >> 2], HEAPU16[$1 + 24 >> 1]);
      HEAP16[$1 + 24 >> 1] = jsvGetRef(HEAP32[$1 + 16 >> 2]);
      continue;
     }
     break;
    }
    label$15 : {
     if (HEAPU16[$1 + 22 >> 1]) {
      jsvSetNextSibling(jsvGetAddressOf(HEAPU16[$1 + 22 >> 1]), HEAPU16[$1 + 24 >> 1]);
      break label$15;
     }
     HEAP16[27542] = HEAPU16[$1 + 24 >> 1];
    }
    HEAP8[55077] = 1;
    break label$7;
   }
   label$17 : {
    if (!(jsvIsBasicString(HEAP32[$1 + 44 >> 2]) & 1)) {
     break label$17;
    }
   }
  }
 }
 label$18 : {
  if (jsvHasChildren(HEAP32[$1 + 44 >> 2]) & 1) {
   HEAP16[$1 + 14 >> 1] = jsvGetFirstChild(HEAP32[$1 + 44 >> 2]);
   while (1) {
    if (HEAPU16[$1 + 14 >> 1]) {
     HEAP32[$1 + 8 >> 2] = jsvLock(HEAPU16[$1 + 14 >> 1]);
     HEAP16[$1 + 14 >> 1] = jsvGetNextSibling(HEAP32[$1 + 8 >> 2]);
     jsvSetPrevSibling(HEAP32[$1 + 8 >> 2], 0);
     jsvSetNextSibling(HEAP32[$1 + 8 >> 2], 0);
     jsvUnRef(HEAP32[$1 + 8 >> 2]);
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
     continue;
    }
    break;
   }
   break label$18;
  }
  if (jsvIsName(HEAP32[$1 + 44 >> 2]) & 1) {
   if (jsvGetNextSibling(HEAP32[$1 + 44 >> 2]) & 65535) {
    jsvUnRefRef(jsvGetNextSibling(HEAP32[$1 + 44 >> 2]) & 65535);
    jsvUnRefRef(jsvGetPrevSibling(HEAP32[$1 + 44 >> 2]) & 65535);
   }
  }
 }
 jsvFreePtrInternal(HEAP32[$1 + 44 >> 2]);
 global$0 = $1 + 48 | 0;
}
function graphicsDrawLine($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = global$0 + -64 | 0;
 global$0 = $5;
 $6 = $5 + 48 | 0;
 $7 = $5 + 44 | 0;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 graphicsToDeviceCoordinates(HEAP32[$5 + 60 >> 2], $5 + 56 | 0, $5 + 52 | 0);
 graphicsToDeviceCoordinates(HEAP32[$5 + 60 >> 2], $6, $7);
 HEAP32[$5 + 40 >> 2] = HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 56 >> 2];
 HEAP32[$5 + 36 >> 2] = HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 52 >> 2];
 label$1 : {
  if (HEAP32[$5 + 40 >> 2] < 0) {
   HEAP32[$5 + 40 >> 2] = 0 - HEAP32[$5 + 40 >> 2];
   break label$1;
  }
  if (!HEAP32[$5 + 40 >> 2]) {
   HEAP32[$5 + 40 >> 2] = 1;
  }
 }
 label$4 : {
  if (HEAP32[$5 + 36 >> 2] < 0) {
   HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 36 >> 2];
   break label$4;
  }
  if (!HEAP32[$5 + 36 >> 2]) {
   HEAP32[$5 + 36 >> 2] = 1;
  }
 }
 label$7 : {
  if (HEAP32[$5 + 40 >> 2] > HEAP32[$5 + 36 >> 2]) {
   if (HEAP32[$5 + 56 >> 2] > HEAP32[$5 + 48 >> 2]) {
    HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 56 >> 2];
    HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 48 >> 2];
    HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 32 >> 2];
    HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 52 >> 2];
    HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 44 >> 2];
    HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 32 >> 2];
   }
   HEAP32[$5 + 28 >> 2] = (HEAP32[$5 + 52 >> 2] << 8) + 128;
   HEAP32[$5 + 24 >> 2] = (HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 52 >> 2] << 8) / HEAP32[$5 + 40 >> 2];
   HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 56 >> 2];
   while (1) {
    if (HEAP32[$5 + 20 >> 2] <= HEAP32[$5 + 48 >> 2]) {
     $0 = HEAP32[$5 + 60 >> 2];
     graphicsSetPixelDevice(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 28 >> 2] >> 8, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
     HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 24 >> 2] + HEAP32[$5 + 28 >> 2];
     HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   break label$7;
  }
  if (HEAP32[$5 + 52 >> 2] > HEAP32[$5 + 44 >> 2]) {
   HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 56 >> 2];
   HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 48 >> 2];
   HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 16 >> 2];
   HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 52 >> 2];
   HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 44 >> 2];
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 16 >> 2];
  }
  HEAP32[$5 + 12 >> 2] = (HEAP32[$5 + 56 >> 2] << 8) + 128;
  HEAP32[$5 + 8 >> 2] = (HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 56 >> 2] << 8) / HEAP32[$5 + 36 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 52 >> 2];
  while (1) {
   if (HEAP32[$5 + 4 >> 2] <= HEAP32[$5 + 44 >> 2]) {
    $0 = HEAP32[$5 + 60 >> 2];
    graphicsSetPixelDevice(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 12 >> 2] >> 8, HEAP32[$5 + 4 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
    HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 8 >> 2] + HEAP32[$5 + 12 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 global$0 = $5 - -64 | 0;
}
function lcdST7789_blit1Bit($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = global$0 - 96 | 0;
 global$0 = $7;
 HEAP32[$7 + 92 >> 2] = $0;
 HEAP32[$7 + 88 >> 2] = $1;
 HEAP32[$7 + 84 >> 2] = $2;
 HEAP32[$7 + 80 >> 2] = $3;
 HEAP32[$7 + 76 >> 2] = $4;
 HEAP32[$7 + 72 >> 2] = $5;
 HEAP32[$7 + 68 >> 2] = $6;
 HEAP32[$7 + 64 >> 2] = HEAP32[$7 + 88 >> 2] + HEAP32[24390];
 HEAP32[$7 + 60 >> 2] = HEAP32[24390] + (HEAP32[$7 + 88 >> 2] + Math_imul(HEAP32[$7 + 80 >> 2], HEAP32[$7 + 76 >> 2]) | 0);
 if (HEAP32[$7 + 64 >> 2] >= 320) {
  HEAP32[$7 + 64 >> 2] = HEAP32[$7 + 64 >> 2] - 320;
 }
 if (HEAP32[$7 + 60 >> 2] >= 320) {
  HEAP32[$7 + 60 >> 2] = HEAP32[$7 + 60 >> 2] - 320;
 }
 $0 = HEAP32[$7 + 92 >> 2];
 $1 = HEAP32[$7 + 64 >> 2];
 $2 = (HEAP32[$7 + 92 >> 2] + Math_imul(HEAP32[$7 + 84 >> 2], HEAP32[$7 + 76 >> 2]) | 0) - 1 | 0;
 if (HEAP32[$7 + 60 >> 2] > HEAP32[$7 + 64 >> 2]) {
  $3 = HEAP32[$7 + 60 >> 2];
 } else {
  $3 = 239;
 }
 lcdST7789_blitStartRaw($0, $1, $2, $3);
 HEAP32[$7 + 56 >> 2] = jsvStringIteratorGetCharAndNext(HEAP32[$7 + 72 >> 2]) << 24 >> 24;
 HEAP32[$7 + 52 >> 2] = 8;
 HEAP32[$7 + 48 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 48 >> 2] < HEAP32[$7 + 80 >> 2]) {
   jsvStringIteratorClone($7 + 24 | 0, HEAP32[$7 + 72 >> 2]);
   HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 56 >> 2];
   HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 52 >> 2];
   HEAP32[$7 + 12 >> 2] = 1;
   while (1) {
    if (HEAP32[$7 + 12 >> 2] <= HEAP32[$7 + 76 >> 2]) {
     HEAP32[$7 + 64 >> 2] = HEAP32[$7 + 64 >> 2] + 1;
     if (HEAP32[$7 + 64 >> 2] >= 320) {
      lcdST7789_blitStartRaw(HEAP32[$7 + 92 >> 2], 0, (HEAP32[$7 + 92 >> 2] + Math_imul(HEAP32[$7 + 84 >> 2], HEAP32[$7 + 76 >> 2]) | 0) - 1 | 0, HEAP32[$7 + 60 >> 2]);
     }
     HEAP32[$7 + 8 >> 2] = 0;
     while (1) {
      if (HEAP32[$7 + 8 >> 2] < HEAP32[$7 + 84 >> 2]) {
       HEAP16[$7 + 6 >> 1] = HEAPU16[HEAP32[$7 + 68 >> 2] + ((HEAP32[$7 + 56 >> 2] >> 7 & 1) << 1) >> 1];
       HEAP32[$7 + 56 >> 2] = HEAP32[$7 + 56 >> 2] << 1;
       HEAP32[$7 + 52 >> 2] = HEAP32[$7 + 52 >> 2] + -1;
       if (!HEAP32[$7 + 52 >> 2]) {
        HEAP32[$7 + 56 >> 2] = jsvStringIteratorGetCharAndNext(HEAP32[$7 + 72 >> 2]) << 24 >> 24;
        HEAP32[$7 + 52 >> 2] = 8;
       }
       HEAP32[$7 >> 2] = 0;
       while (1) {
        if (HEAP32[$7 >> 2] < HEAP32[$7 + 76 >> 2]) {
         lcdST7789_blitPixel(HEAPU16[$7 + 6 >> 1]);
         HEAP32[$7 >> 2] = HEAP32[$7 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$7 + 8 >> 2] = HEAP32[$7 + 8 >> 2] + 1;
       continue;
      }
      break;
     }
     if (HEAP32[$7 + 12 >> 2] < HEAP32[$7 + 76 >> 2]) {
      $0 = $7 + 24 | 0;
      jsvStringIteratorFree(HEAP32[$7 + 72 >> 2]);
      jsvStringIteratorClone(HEAP32[$7 + 72 >> 2], $0);
      HEAP32[$7 + 56 >> 2] = HEAP32[$7 + 20 >> 2];
      HEAP32[$7 + 52 >> 2] = HEAP32[$7 + 16 >> 2];
     }
     HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   jsvStringIteratorFree($7 + 24 | 0);
   HEAP32[$7 + 48 >> 2] = HEAP32[$7 + 48 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $7 + 96 | 0;
}
function jswrap_waveform_start($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $5 = global$0 - 112 | 0;
 global$0 = $5;
 HEAP32[$5 + 108 >> 2] = $0;
 HEAP8[$5 + 107 | 0] = $1;
 HEAPF64[$5 + 96 >> 3] = $2;
 HEAP32[$5 + 92 >> 2] = $3;
 HEAP8[$5 + 91 | 0] = $4;
 HEAP8[$5 + 90 | 0] = jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$5 + 108 >> 2], 37459, 0)) & 1;
 label$1 : {
  if (HEAP8[$5 + 90 | 0] & 1) {
   jsExceptionHere(1, 37705, 0);
   break label$1;
  }
  if (!(jshIsPinValid(HEAPU8[$5 + 107 | 0]) & 1)) {
   jsExceptionHere(1, 37733, 0);
   break label$1;
  }
  $0 = __DOUBLE_BITS(HEAPF64[$5 + 96 >> 3]);
  $1 = i64toi32_i32$HIGH_BITS & 2147483647;
  if (!(HEAPF64[$5 + 96 >> 3] < .001 ? 0 : !(($1 | 0) == 2146435072 & $0 >>> 0 >= 0 | $1 >>> 0 > 2146435072))) {
   jsExceptionHere(1, 37745, 0);
   break label$1;
  }
  HEAP32[$5 + 80 >> 2] = jshGetSystemTime();
  HEAP32[$5 + 84 >> 2] = i64toi32_i32$HIGH_BITS;
  HEAP8[$5 + 79 | 0] = 0;
  label$7 : {
   if (jsvIsObject(HEAP32[$5 + 92 >> 2]) & 1) {
    HEAPF64[$5 + 64 >> 3] = jsvGetFloatAndUnLock(jsvObjectGetChild(HEAP32[$5 + 92 >> 2], 37777, 0));
    $0 = __DOUBLE_BITS(HEAPF64[$5 + 64 >> 3]);
    $1 = i64toi32_i32$HIGH_BITS & 2147483647;
    if (!(!(HEAPF64[$5 + 64 >> 3] > 0) | (($1 | 0) == 2146435072 & $0 >>> 0 >= 0 | $1 >>> 0 > 2146435072))) {
     HEAP32[$5 + 80 >> 2] = jshGetTimeFromMilliseconds(HEAPF64[$5 + 64 >> 3] * 1e3);
     HEAP32[$5 + 84 >> 2] = i64toi32_i32$HIGH_BITS;
    }
    HEAP8[$5 + 79 | 0] = jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$5 + 92 >> 2], 37782, 0)) & 1;
    break label$7;
   }
   if (!(jsvIsUndefined(HEAP32[$5 + 92 >> 2]) & 1)) {
    HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 92 >> 2];
    jsExceptionHere(1, 37617, $5 + 16 | 0);
   }
  }
  HEAP8[$5 + 63 | 0] = 0;
  HEAP32[$5 + 56 >> 2] = jswrap_waveform_getBuffer(HEAP32[$5 + 108 >> 2], 0, $5 + 63 | 0);
  HEAP32[$5 + 52 >> 2] = jswrap_waveform_getBuffer(HEAP32[$5 + 108 >> 2], 1, 0);
  label$12 : {
   if (HEAP8[$5 + 63 | 0] & 1) {
    HEAP8[$5 + 51 | 0] = HEAP8[$5 + 91 | 0] & 1 ? 5 : 6;
    break label$12;
   }
   HEAP8[$5 + 51 | 0] = HEAP8[$5 + 91 | 0] & 1 ? 3 : 4;
  }
  $1 = HEAP32[$5 + 80 >> 2];
  $3 = HEAP32[$5 + 84 >> 2];
  $4 = jshGetTimeFromMilliseconds(1e3 / HEAPF64[$5 + 96 >> 3]);
  $6 = i64toi32_i32$HIGH_BITS;
  $7 = HEAPU8[$5 + 107 | 0];
  $8 = HEAP32[$5 + 56 >> 2];
  if (HEAP8[$5 + 79 | 0] & 1) {
   if (HEAP32[$5 + 52 >> 2]) {
    $0 = HEAP32[$5 + 52 >> 2];
   } else {
    $0 = HEAP32[$5 + 56 >> 2];
   }
  } else {
   $0 = 0;
  }
  if (!(jstStartSignal($1, $3, $4, $6, $7, $8, $0, HEAPU8[$5 + 51 | 0]) & 1)) {
   jsWarn(37789, 0);
  }
  jsvUnLock2(HEAP32[$5 + 56 >> 2], HEAP32[$5 + 52 >> 2]);
  jsvObjectSetChildAndUnLock(HEAP32[$5 + 108 >> 2], 37459, jsvNewFromBool(1));
  jsvObjectSetChildAndUnLock(HEAP32[$5 + 108 >> 2], 37816, jsvNewFromFloat(HEAPF64[$5 + 96 >> 3]));
  HEAP32[$5 + 44 >> 2] = jsvObjectGetChild(HEAP32[23775], 37454, 3);
  if (!HEAP32[$5 + 44 >> 2]) {
   break label$1;
  }
  jsvArrayPush(HEAP32[$5 + 44 >> 2], HEAP32[$5 + 108 >> 2]);
  jsvUnLock(HEAP32[$5 + 44 >> 2]);
 }
 global$0 = $5 + 112 | 0;
}
function tflite__ops__micro__conv__EvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams__2c_20tflite__ops__micro__conv__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteTensor__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0;
 $8 = global$0 - 240 | 0;
 global$0 = $8;
 $9 = $8 + 112 | 0;
 HEAP32[$8 + 236 >> 2] = $0;
 HEAP32[$8 + 232 >> 2] = $1;
 HEAP32[$8 + 228 >> 2] = $2;
 HEAP32[$8 + 224 >> 2] = $3;
 HEAP32[$8 + 220 >> 2] = $4;
 HEAP32[$8 + 216 >> 2] = $5;
 HEAP32[$8 + 212 >> 2] = $6;
 HEAP32[$8 + 208 >> 2] = 0;
 HEAP32[$8 + 204 >> 2] = 0;
 HEAP32[$8 + 200 >> 2] = $7;
 void_20tflite__CalculateActivationRange_float__28TfLiteFusedActivation_2c_20float__2c_20float__29(HEAP32[HEAP32[$8 + 228 >> 2] + 20 >> 2], $8 + 196 | 0, $8 + 192 | 0);
 HEAP8[$8 + 136 | 0] = tflite__ops__micro__conv__RuntimePaddingType_28TfLitePadding_29(HEAP32[HEAP32[$8 + 228 >> 2] >> 2]);
 HEAP16[$8 + 138 >> 1] = HEAP32[HEAP32[$8 + 224 >> 2] >> 2];
 HEAP16[$8 + 140 >> 1] = HEAP32[HEAP32[$8 + 224 >> 2] + 4 >> 2];
 HEAP16[$8 + 146 >> 1] = HEAP32[HEAP32[$8 + 228 >> 2] + 4 >> 2];
 HEAP16[$8 + 148 >> 1] = HEAP32[HEAP32[$8 + 228 >> 2] + 8 >> 2];
 HEAP16[$8 + 150 >> 1] = HEAP32[HEAP32[$8 + 228 >> 2] + 12 >> 2];
 HEAP16[$8 + 152 >> 1] = HEAP32[HEAP32[$8 + 228 >> 2] + 16 >> 2];
 HEAPF32[$8 + 184 >> 2] = HEAPF32[$8 + 196 >> 2];
 HEAPF32[$8 + 188 >> 2] = HEAPF32[$8 + 192 >> 2];
 tflite__GetTensorShape_28TfLiteTensor_20const__29($9, HEAP32[$8 + 220 >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 220 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 80 | 0, HEAP32[$8 + 216 >> 2]);
 $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 216 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 56 | 0, HEAP32[$8 + 212 >> 2]);
 $2 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 212 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 32 | 0, HEAP32[$8 + 200 >> 2]);
 $3 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 200 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 8 | 0, HEAP32[$8 + 208 >> 2]);
 tflite__reference_ops__Conv_28tflite__ConvParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__2c_20tflite__RuntimeShape_20const__2c_20float__29($8 + 136 | 0, $8 + 112 | 0, $0, $8 + 80 | 0, $1, $8 + 56 | 0, $2, $8 + 32 | 0, $3, $8 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 208 >> 2]));
 $0 = $8 + 112 | 0;
 $1 = $8 + 80 | 0;
 $2 = $8 + 56 | 0;
 $3 = $8 + 32 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($3);
 tflite__RuntimeShape___RuntimeShape_28_29($2);
 tflite__RuntimeShape___RuntimeShape_28_29($1);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $8 + 240 | 0;
}
function jswrap_pipe($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 if (!(!HEAP32[$3 + 44 >> 2] | !HEAP32[$3 + 40 >> 2])) {
  HEAP32[$3 + 32 >> 2] = jspNewObject(0, 35891);
  HEAP32[$3 + 28 >> 2] = pipeGetArray(1);
  HEAP32[$3 + 24 >> 2] = jsvNewFromInteger(0);
  if (!(!HEAP32[$3 + 24 >> 2] | (!HEAP32[$3 + 32 >> 2] | !HEAP32[$3 + 28 >> 2]))) {
   HEAP32[$3 + 20 >> 2] = jspGetNamedField(HEAP32[$3 + 44 >> 2], 35896, 0);
   HEAP32[$3 + 16 >> 2] = jspGetNamedField(HEAP32[$3 + 40 >> 2], 35901, 0);
   label$4 : {
    if (jsvIsFunction(HEAP32[$3 + 20 >> 2]) & 1) {
     if (jsvIsFunction(HEAP32[$3 + 16 >> 2]) & 1) {
      HEAP32[$3 + 12 >> 2] = 64;
      HEAP8[$3 + 11 | 0] = 1;
      label$7 : {
       if (jsvIsObject(HEAP32[$3 + 36 >> 2]) & 1) {
        HEAP32[$3 + 4 >> 2] = jsvObjectGetChild(HEAP32[$3 + 36 >> 2], 35907, 0);
        if (HEAP32[$3 + 4 >> 2]) {
         jsvObjectSetChild(HEAP32[$3 + 32 >> 2], 35916, HEAP32[$3 + 4 >> 2]);
         jsvUnLock(HEAP32[$3 + 4 >> 2]);
        }
        HEAP32[$3 + 4 >> 2] = jsvObjectGetChild(HEAP32[$3 + 36 >> 2], 35928, 0);
        if (HEAP32[$3 + 4 >> 2]) {
         HEAP8[$3 + 11 | 0] = jsvGetBoolAndUnLock(HEAP32[$3 + 4 >> 2]) & 1;
        }
        HEAP32[$3 + 4 >> 2] = jsvObjectGetChild(HEAP32[$3 + 36 >> 2], 35932, 0);
        if (HEAP32[$3 + 4 >> 2]) {
         label$12 : {
          label$13 : {
           if (!(jsvIsNumeric(HEAP32[$3 + 4 >> 2]) & 1)) {
            break label$13;
           }
           if ((jsvGetInteger(HEAP32[$3 + 4 >> 2]) | 0) <= 0) {
            break label$13;
           }
           HEAP32[$3 + 12 >> 2] = jsvGetInteger(HEAP32[$3 + 4 >> 2]);
           break label$12;
          }
          jsExceptionHere(3, 35942, 0);
         }
         jsvUnLock(HEAP32[$3 + 4 >> 2]);
        }
        break label$7;
       }
       if (!(jsvIsUndefined(HEAP32[$3 + 36 >> 2]) & 1)) {
        jsExceptionHere(3, 35975, 0);
       }
      }
      jswrap_object_addEventListener(HEAP32[$3 + 44 >> 2], 36017, 518, 32768);
      jswrap_object_addEventListener(HEAP32[$3 + 40 >> 2], 36023, 517, 8);
      jswrap_object_addEventListener(HEAP32[$3 + 40 >> 2], 36017, 516, 32768);
      jsvObjectSetChildAndUnLock(HEAP32[$3 + 32 >> 2], 35932, jsvNewFromInteger(HEAP32[$3 + 12 >> 2]));
      jsvObjectSetChildAndUnLock(HEAP32[$3 + 32 >> 2], 35928, jsvNewFromBool(HEAP8[$3 + 11 | 0] & 1));
      jsvUnLock3(jsvAddNamedChild(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 24 >> 2], 36029), jsvAddNamedChild(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 44 >> 2], 36038), jsvAddNamedChild(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 40 >> 2], 36045));
      jsvArrayPush(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 32 >> 2]);
      break label$4;
     }
     jsExceptionHere(1, 36057, 0);
     break label$4;
    }
    jsExceptionHere(1, 36148, 0);
   }
   jsvUnLock2(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
  }
  jsvUnLock3(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 24 >> 2]);
 }
 global$0 = $3 + 48 | 0;
}
function jsfSaveToFlash() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = global$0 - 320 | 0;
 global$0 = $0;
 $1 = $0 + 280 | 0;
 HEAP32[$0 + 316 >> 2] = HEAP32[13337] << 4;
 HEAP32[$0 + 312 >> 2] = _jsvGetAddressOf(1);
 jsiConsolePrintString(2087);
 jsfNameFromString($1, 2108);
 HEAP32[$0 + 80 >> 2] = HEAP32[$0 + 304 >> 2];
 $1 = HEAP32[$0 + 300 >> 2];
 HEAP32[$0 + 72 >> 2] = HEAP32[$0 + 296 >> 2];
 HEAP32[$0 + 76 >> 2] = $1;
 $1 = HEAP32[$0 + 292 >> 2];
 HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 288 >> 2];
 HEAP32[$0 + 68 >> 2] = $1;
 $1 = HEAP32[$0 + 284 >> 2];
 HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 280 >> 2];
 HEAP32[$0 + 60 >> 2] = $1;
 jsfEraseFile($0 + 56 | 0);
 jsfCompact();
 jsiConsolePrintString(2116);
 HEAP32[$0 + 276 >> 2] = heatshrink_encode(HEAP32[$0 + 312 >> 2], HEAP32[$0 + 316 >> 2], 0, 0) + 4;
 $1 = HEAP32[$0 + 276 >> 2];
 HEAP32[$0 + 112 >> 2] = HEAP32[$0 + 304 >> 2];
 $2 = HEAP32[$0 + 300 >> 2];
 HEAP32[$0 + 104 >> 2] = HEAP32[$0 + 296 >> 2];
 HEAP32[$0 + 108 >> 2] = $2;
 $2 = HEAP32[$0 + 292 >> 2];
 HEAP32[$0 + 96 >> 2] = HEAP32[$0 + 288 >> 2];
 HEAP32[$0 + 100 >> 2] = $2;
 $2 = HEAP32[$0 + 284 >> 2];
 HEAP32[$0 + 88 >> 2] = HEAP32[$0 + 280 >> 2];
 HEAP32[$0 + 92 >> 2] = $2;
 HEAP32[$0 + 272 >> 2] = jsfCreateFile($0 + 88 | 0, $1, 128, 0);
 if (!HEAP32[$0 + 272 >> 2]) {
  $1 = HEAP32[$0 + 276 >> 2];
  HEAP32[$0 + 52 >> 2] = jsfGetFreeSpace();
  HEAP32[$0 + 48 >> 2] = $1;
  jsiConsolePrintf(2137, $0 + 48 | 0);
  jsvCreateEmptyVarList();
  jspSoftInit();
  jsiConsolePrintString(2187);
  while (1) {
   if (jsiFreeMoreMemory() & 1) {
    continue;
   }
   break;
  }
  jspSoftKill();
  jsvClearEmptyVarList();
  $1 = HEAP32[$0 + 276 >> 2];
  HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 304 >> 2];
  $2 = HEAP32[$0 + 300 >> 2];
  HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 296 >> 2];
  HEAP32[$0 + 36 >> 2] = $2;
  $2 = HEAP32[$0 + 292 >> 2];
  HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 288 >> 2];
  HEAP32[$0 + 28 >> 2] = $2;
  $2 = HEAP32[$0 + 284 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 280 >> 2];
  HEAP32[$0 + 20 >> 2] = $2;
  HEAP32[$0 + 272 >> 2] = jsfCreateFile($0 + 16 | 0, $1, 128, 0);
 }
 label$3 : {
  if (!HEAP32[$0 + 272 >> 2]) {
   if (jsfGetAllocatedSpace(134437888, 0)) {
    jsiConsolePrintString(2233);
    break label$3;
   }
   jsiConsolePrintString(2299);
   break label$3;
  }
  memset($0 + 128 | 0, 0, 144);
  HEAP32[$0 + 128 >> 2] = HEAP32[$0 + 272 >> 2];
  HEAP32[$0 + 132 >> 2] = jsfAlignAddress(HEAP32[$0 + 272 >> 2] + HEAP32[$0 + 276 >> 2] | 0);
  jsiConsolePrintString(2334);
  HEAP32[$0 + 124 >> 2] = getBuildHash();
  HEAP32[$0 + 120 >> 2] = 0;
  while (1) {
   if (HEAP32[$0 + 120 >> 2] < 4) {
    jsfSaveToFlash_writecb(HEAPU8[HEAP32[$0 + 120 >> 2] + ($0 + 124 | 0) | 0], $0 + 128 | 0);
    HEAP32[$0 + 120 >> 2] = HEAP32[$0 + 120 >> 2] + 1;
    continue;
   }
   break;
  }
  $1 = $0 + 128 | 0;
  heatshrink_encode(HEAP32[$0 + 312 >> 2], HEAP32[$0 + 316 >> 2], 1, $1);
  jsfSaveToFlash_finish($1);
  $1 = HEAP32[$0 + 316 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 276 >> 2];
  HEAP32[$0 >> 2] = $1;
  jsiConsolePrintf(2344, $0);
 }
 global$0 = $0 + 320 | 0;
}
function tflite__ops__micro__quantize__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 160 | 0;
 global$0 = $2;
 HEAP32[$2 + 152 >> 2] = $0;
 HEAP32[$2 + 148 >> 2] = $1;
 HEAP32[$2 + 144 >> 2] = HEAP32[HEAP32[$2 + 152 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$2 + 148 >> 2] >> 2] + 4 >> 2], 56);
 HEAP32[$2 + 140 >> 2] = HEAP32[HEAP32[$2 + 152 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$2 + 148 >> 2] + 4 >> 2] + 4 >> 2], 56);
 $0 = global$0 - 16 | 0;
 HEAP32[$0 + 12 >> 2] = $2 + 120;
 $0 = HEAP32[$0 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAPF64[$0 + 8 >> 3] = 0;
 HEAP32[$2 + 120 >> 2] = HEAP32[HEAP32[$2 + 140 >> 2] + 16 >> 2];
 HEAPF64[$2 + 128 >> 3] = HEAPF32[HEAP32[$2 + 140 >> 2] + 12 >> 2];
 label$1 : {
  label$2 : {
   label$3 : {
    $0 = HEAP32[HEAP32[$2 + 140 >> 2] >> 2] + -3 | 0;
    if ($0 >>> 0 > 6) {
     break label$3;
    }
    label$4 : {
     switch ($0 - 1 | 0) {
     case 5:
      tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 96 | 0, HEAP32[$2 + 144 >> 2]);
      $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 144 >> 2]);
      tflite__GetTensorShape_28TfLiteTensor_20const__29($2 - -64 | 0, HEAP32[$2 + 140 >> 2]);
      void_20tflite__reference_ops__AffineQuantize_signed_20char__28tflite__QuantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($2 + 120 | 0, $2 + 96 | 0, $0, $2 - -64 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 140 >> 2]));
      $0 = $2 + 96 | 0;
      tflite__RuntimeShape___RuntimeShape_28_29($2 - -64 | 0);
      break label$2;
     case 0:
     case 1:
     case 2:
     case 3:
     case 4:
      break label$3;
     default:
      break label$4;
     }
    }
    tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 40 | 0, HEAP32[$2 + 144 >> 2]);
    $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 144 >> 2]);
    tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 16 | 0, HEAP32[$2 + 140 >> 2]);
    void_20tflite__reference_ops__AffineQuantize_unsigned_20char__28tflite__QuantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($2 + 120 | 0, $2 + 40 | 0, $0, $2 + 16 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 140 >> 2]));
    $0 = $2 + 40 | 0;
    tflite__RuntimeShape___RuntimeShape_28_29($2 + 16 | 0);
    break label$2;
   }
   $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 152 >> 2];
   $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 144 >> 2] >> 2]);
   HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 140 >> 2] >> 2];
   HEAP32[$2 >> 2] = $3;
   FUNCTION_TABLE[$0]($1, 43422, $2);
   HEAP32[$2 + 156 >> 2] = 1;
   break label$1;
  }
  tflite__RuntimeShape___RuntimeShape_28_29($0);
  HEAP32[$2 + 156 >> 2] = 0;
 }
 global$0 = $2 + 160 | 0;
 return HEAP32[$2 + 156 >> 2];
}
function vfGetCharPtr($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 48 | 0;
 global$0 = $4;
 HEAP8[$4 + 43 | 0] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 HEAP8[$4 + 27 | 0] = HEAPU8[$4 + 43 | 0];
 if (HEAPU8[$4 + 27 | 0] >= 192) {
  HEAP32[$4 + 20 >> 2] = 25472;
  HEAP32[$4 + 16 >> 2] = 25537;
  if (HEAPU8[$4 + 27 | 0] >= 192) {
   HEAP32[$4 + 12 >> 2] = HEAPU8[$4 + 27 | 0] - 192;
   HEAP8[$4 + 27 | 0] = HEAPU8[HEAP32[$4 + 20 >> 2] + HEAP32[$4 + 12 >> 2] | 0];
   if (HEAP32[$4 + 36 >> 2]) {
    HEAP8[$4 + 11 | 0] = HEAPU8[HEAP32[$4 + 16 >> 2] + HEAP32[$4 + 12 >> 2] | 0];
    HEAP32[HEAP32[$4 + 32 >> 2] >> 2] = 0;
    HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = 0;
    label$4 : {
     if (!(HEAP8[$4 + 11 | 0] < 48 | HEAP8[$4 + 11 | 0] > 53)) {
      HEAP32[HEAP32[$4 + 36 >> 2] >> 2] = HEAPU8[(HEAP8[$4 + 11 | 0] - 48 | 0) + 25668 | 0] + 25616;
      label$6 : {
       if (!(HEAPU8[$4 + 27 | 0] < 97 | HEAPU8[$4 + 27 | 0] > 122)) {
        HEAP32[HEAP32[$4 + 32 >> 2] >> 2] = -2;
        HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = -4;
        break label$6;
       }
       HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = -8;
      }
      if (HEAPU8[$4 + 27 | 0] == 73) {
       $0 = HEAP32[$4 + 32 >> 2];
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] - 3;
      }
      if (HEAPU8[$4 + 27 | 0] == 105) {
       $0 = HEAP32[$4 + 32 >> 2];
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] - 2;
      }
      break label$4;
     }
     if (HEAP8[$4 + 11 | 0] != 32) {
      $0 = vfGetCharPtr(HEAP8[$4 + 11 | 0], 0, 0, 0);
      HEAP32[HEAP32[$4 + 36 >> 2] >> 2] = $0;
      if (HEAP8[$4 + 11 | 0] == 69) {
       HEAP32[HEAP32[$4 + 32 >> 2] >> 2] = 8;
      }
      if (HEAP8[$4 + 11 | 0] == 101) {
       HEAP32[HEAP32[$4 + 32 >> 2] >> 2] = 4;
      }
      if (HEAP8[$4 + 11 | 0] == 44) {
       HEAP32[HEAP32[$4 + 32 >> 2] >> 2] = 4;
      }
      if (HEAP8[$4 + 11 | 0] == 43) {
       HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = -4;
      }
      if (HEAP8[$4 + 11 | 0] == 58) {
       HEAP32[HEAP32[$4 + 32 >> 2] >> 2] = 2;
       HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = -2;
      }
      if (HEAP8[$4 + 11 | 0] == 111) {
       HEAP32[HEAP32[$4 + 32 >> 2] >> 2] = 2;
       HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = -1;
      }
     }
    }
   }
  }
 }
 label$17 : {
  if (!(HEAPU8[$4 + 27 | 0] <= 176 ? HEAPU8[$4 + 27 | 0] >= 33 : 0)) {
   HEAP32[$4 + 44 >> 2] = 0;
   break label$17;
  }
  if (HEAPU8[$4 + 27 | 0] == 33) {
   HEAP32[$4 + 44 >> 2] = 25680;
   break label$17;
  }
  HEAP32[$4 + 4 >> 2] = HEAPU8[$4 + 27 | 0] - 33;
  HEAP32[$4 >> 2] = 0;
  while (1) {
   if (HEAPU32[$4 >> 2] < 1956) {
    if (HEAPU8[HEAP32[$4 >> 2] + 25680 | 0] == 255) {
     HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + -1;
     if (!HEAP32[$4 + 4 >> 2]) {
      HEAP32[$4 + 44 >> 2] = HEAP32[$4 >> 2] + 25681;
      break label$17;
     }
    }
    HEAP32[$4 >> 2] = HEAP32[$4 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$4 + 44 >> 2] = 0;
 }
 global$0 = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}
function tflite__ops__micro__depthwise_conv__EvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0;
 $8 = global$0 - 208 | 0;
 global$0 = $8;
 HEAP32[$8 + 204 >> 2] = $0;
 HEAP32[$8 + 200 >> 2] = $1;
 HEAP32[$8 + 196 >> 2] = $2;
 HEAP32[$8 + 192 >> 2] = $3;
 HEAP32[$8 + 188 >> 2] = $4;
 HEAP32[$8 + 184 >> 2] = $5;
 HEAP32[$8 + 180 >> 2] = $6;
 HEAP32[$8 + 176 >> 2] = $7;
 HEAP32[$8 + 172 >> 2] = 0 - HEAP32[HEAP32[$8 + 188 >> 2] + 16 >> 2];
 HEAP32[$8 + 168 >> 2] = 0 - HEAP32[HEAP32[$8 + 184 >> 2] + 16 >> 2];
 HEAP32[$8 + 164 >> 2] = HEAP32[HEAP32[$8 + 176 >> 2] + 16 >> 2];
 HEAP8[$8 + 104 | 0] = 1;
 HEAP16[$8 + 106 >> 1] = HEAP32[HEAP32[$8 + 192 >> 2] >> 2];
 HEAP16[$8 + 108 >> 1] = HEAP32[HEAP32[$8 + 192 >> 2] + 4 >> 2];
 HEAP16[$8 + 114 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 4 >> 2];
 HEAP16[$8 + 116 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 8 >> 2];
 HEAP16[$8 + 118 >> 1] = 1;
 HEAP16[$8 + 120 >> 1] = 1;
 HEAP16[$8 + 122 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 12 >> 2];
 HEAP32[$8 + 144 >> 2] = HEAP32[HEAP32[$8 + 192 >> 2] + 536 >> 2];
 HEAP32[$8 + 148 >> 2] = HEAP32[HEAP32[$8 + 192 >> 2] + 540 >> 2];
 HEAP32[$8 + 124 >> 2] = HEAP32[$8 + 172 >> 2];
 HEAP32[$8 + 128 >> 2] = HEAP32[$8 + 168 >> 2];
 HEAP32[$8 + 132 >> 2] = HEAP32[$8 + 164 >> 2];
 HEAP32[$8 + 136 >> 2] = HEAP32[HEAP32[$8 + 192 >> 2] + 16 >> 2];
 HEAP32[$8 + 140 >> 2] = 0 - HEAP32[HEAP32[$8 + 192 >> 2] + 20 >> 2];
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 80 | 0, HEAP32[$8 + 188 >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 188 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 48 | 0, HEAP32[$8 + 184 >> 2]);
 $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 184 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 24 | 0, HEAP32[$8 + 180 >> 2]);
 $2 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 180 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8, HEAP32[$8 + 176 >> 2]);
 tflite__reference_ops__DepthwiseConv_28tflite__DepthwiseParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($8 + 104 | 0, $8 + 80 | 0, $0, $8 + 48 | 0, $1, $8 + 24 | 0, $2, $8, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 176 >> 2]));
 $0 = $8 + 80 | 0;
 $1 = $8 + 48 | 0;
 $2 = $8 + 24 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($8);
 tflite__RuntimeShape___RuntimeShape_28_29($2);
 tflite__RuntimeShape___RuntimeShape_28_29($1);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $8 + 208 | 0;
}
function tflite__ops__micro__pooling__AverageEval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 HEAP32[$2 + 32 >> 2] = HEAP32[HEAP32[$2 + 36 >> 2] + 20 >> 2];
 HEAP32[$2 + 12 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 0);
 HEAP32[$2 + 8 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
 label$1 : {
  if (tflite__ops__micro__pooling___28anonymous_20namespace_29__CalculateOpData_28TfLiteContext_20const__2c_20TfLitePoolParams_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], $2 + 16 | 0)) {
   HEAP32[$2 + 44 >> 2] = 1;
   break label$1;
  }
  label$3 : {
   label$4 : {
    $0 = HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + -1 | 0;
    if ($0 >>> 0 > 8) {
     break label$4;
    }
    label$5 : {
     switch ($0 - 1 | 0) {
     default:
      tflite__ops__micro__pooling___28anonymous_20namespace_29__AverageEvalFloat_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20TfLitePoolParams_20const__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], $2 + 16 | 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
      break label$3;
     case 1:
      tflite__ops__micro__pooling___28anonymous_20namespace_29__AverageEvalUint8_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20TfLitePoolParams_20const__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], $2 + 16 | 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
      break label$3;
     case 0:
     case 2:
     case 3:
     case 4:
     case 5:
     case 6:
      break label$4;
     case 7:
      break label$5;
     }
    }
    tflite__ops__micro__pooling___28anonymous_20namespace_29__AverageEvalInt8_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20TfLitePoolParams_20const__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], $2 + 16 | 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
    break label$3;
   }
   $0 = HEAP32[HEAP32[$2 + 40 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 40 >> 2];
   HEAP32[$2 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 12 >> 2] >> 2]);
   FUNCTION_TABLE[$0]($1, 44147, $2);
   HEAP32[$2 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 44 >> 2] = 0;
 }
 global$0 = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}
function jsserialSoftwareFunc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 HEAP8[$2 + 79 | 0] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 HEAP32[$2 + 68 >> 2] = HEAP32[$2 + 72 >> 2];
 if (jshIsPinValid(HEAPU8[HEAP32[$2 + 68 >> 2] + 5 | 0]) & 1) {
  $1 = $2 + 8 | 0;
  HEAP32[$2 + 64 >> 2] = (1 << HEAPU8[HEAP32[$2 + 68 >> 2] + 10 | 0]) - 1;
  HEAP32[$2 + 60 >> 2] = HEAPU8[HEAP32[$2 + 68 >> 2] + 10 | 0];
  HEAP32[$2 + 64 >> 2] = HEAPU8[$2 + 79 | 0] & (1 << HEAPU8[HEAP32[$2 + 68 >> 2] + 8 | 0]) - 1 | HEAP32[$2 + 64 >> 2] << HEAPU8[HEAP32[$2 + 68 >> 2] + 8 | 0];
  HEAP32[$2 + 60 >> 2] = HEAPU8[HEAP32[$2 + 68 >> 2] + 8 | 0] + HEAP32[$2 + 60 >> 2];
  HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 64 >> 2] << 1;
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 60 >> 2] + 1;
  $0 = HEAP32[$2 + 68 >> 2];
  HEAP32[$2 + 48 >> 2] = jshGetTimeFromMilliseconds(1e3 / +(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)));
  HEAP32[$2 + 52 >> 2] = i64toi32_i32$HIGH_BITS;
  label$2 : {
   if (jstGetLastPinTimerTask(HEAPU8[HEAP32[$2 + 68 >> 2] + 5 | 0], $1) & 1) {
    $1 = HEAP32[$2 + 52 >> 2] + (HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8 | (HEAPU8[$2 + 14 | 0] << 16 | HEAPU8[$2 + 15 | 0] << 24)) | 0;
    $3 = HEAP32[$2 + 48 >> 2];
    $4 = $3 + (HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8 | (HEAPU8[$2 + 10 | 0] << 16 | HEAPU8[$2 + 11 | 0] << 24)) | 0;
    if ($4 >>> 0 < $3 >>> 0) {
     $1 = $1 + 1 | 0;
    }
    HEAP32[$2 + 40 >> 2] = $4;
    HEAP32[$2 + 44 >> 2] = $1;
    break label$2;
   }
   $4 = jshGetSystemTime();
   $3 = i64toi32_i32$HIGH_BITS;
   $0 = jshGetTimeFromMilliseconds(1);
   $3 = i64toi32_i32$HIGH_BITS + $3 | 0;
   $4 = $0 + $4 | 0;
   if ($4 >>> 0 < $0 >>> 0) {
    $3 = $3 + 1 | 0;
   }
   HEAP32[$2 + 40 >> 2] = $4;
   HEAP32[$2 + 44 >> 2] = $3;
  }
  HEAP32[$2 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 60 >> 2]) {
    HEAP8[$2 + 3 | 0] = (HEAP32[$2 + 64 >> 2] & 1) != 0;
    HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 64 >> 2] >> 1;
    HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 60 >> 2] + -1;
    jstPinOutputAtTime(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 44 >> 2], HEAP32[$2 + 68 >> 2] + 5 | 0, HEAP8[$2 + 3 | 0] & 1);
    $1 = HEAP32[$2 + 52 >> 2] + HEAP32[$2 + 44 >> 2] | 0;
    $3 = HEAP32[$2 + 40 >> 2];
    $4 = $3 + HEAP32[$2 + 48 >> 2] | 0;
    if ($4 >>> 0 < $3 >>> 0) {
     $1 = $1 + 1 | 0;
    }
    HEAP32[$2 + 40 >> 2] = $4;
    HEAP32[$2 + 44 >> 2] = $1;
    continue;
   }
   break;
  }
  $4 = HEAP32[$2 + 40 >> 2];
  $3 = HEAP32[$2 + 44 >> 2];
  $0 = HEAP32[$2 + 4 >> 2];
  $0 = __wasm_i64_mul(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 52 >> 2], $0, $0 >> 31);
  $3 = i64toi32_i32$HIGH_BITS + $3 | 0;
  $4 = $0 + $4 | 0;
  if ($4 >>> 0 < $0 >>> 0) {
   $3 = $3 + 1 | 0;
  }
  HEAP32[$2 + 40 >> 2] = $4;
  HEAP32[$2 + 44 >> 2] = $3;
  jstPinOutputAtTime(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 44 >> 2], HEAP32[$2 + 68 >> 2] + 5 | 0, 1);
 }
 global$0 = $2 + 80 | 0;
}
function jswrap_pin_getInfo($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 HEAP8[$1 + 55 | 0] = jshGetPinFromVar(HEAP32[$1 + 56 >> 2]);
 label$1 : {
  if (!(jshIsPinValid(HEAPU8[$1 + 55 | 0]) & 1)) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 48 >> 2] = Math_imul(HEAPU8[$1 + 55 | 0], 3) + 27904;
  HEAP32[$1 + 44 >> 2] = jsvNewWithFlags(5);
  if (!HEAP32[$1 + 44 >> 2]) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP8[$1 + 42 | 0] = HEAPU8[HEAP32[$1 + 48 >> 2]] - -64;
  HEAP8[$1 + 43 | 0] = 0;
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 44 >> 2], 34700, jsvNewFromString($1 + 42 | 0));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 44 >> 2], 34705, jsvNewFromInteger(HEAPU8[HEAP32[$1 + 48 >> 2] + 1 | 0]));
  if (HEAPU8[HEAP32[$1 + 48 >> 2] + 2 | 0]) {
   HEAP32[$1 + 36 >> 2] = jsvNewWithFlags(5);
   if (HEAP32[$1 + 36 >> 2]) {
    HEAP32[$1 + 32 >> 2] = jsvNewWithFlags(3);
    if (HEAP32[$1 + 32 >> 2]) {
     HEAP32[$1 + 28 >> 2] = 0;
     while (1) {
      if (HEAP32[$1 + 28 >> 2] < 0) {
       if (HEAPU8[HEAP32[$1 + 48 >> 2] + 2 | 0] & 32 << HEAP32[$1 + 28 >> 2]) {
        jsvArrayPushAndUnLock(HEAP32[$1 + 32 >> 2], jsvNewFromInteger(HEAP32[$1 + 28 >> 2] + 1 | 0));
       }
       HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 28 >> 2] + 1;
       continue;
      }
      break;
     }
     jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 34709, HEAP32[$1 + 32 >> 2]);
    }
    jsvObjectSetChildAndUnLock(HEAP32[$1 + 44 >> 2], 34714, jsvNewFromInteger(HEAPU8[HEAP32[$1 + 48 >> 2] + 2 | 0] & 31));
   }
  }
  HEAP32[$1 + 24 >> 2] = jsvNewWithFlags(5);
  if (HEAP32[$1 + 24 >> 2]) {
   HEAP32[$1 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$1 + 20 >> 2] < 0) {
     $0 = (HEAP32[$1 + 48 >> 2] + 3 | 0) + (HEAP32[$1 + 20 >> 2] << 1) | 0;
     if (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8) {
      HEAP32[$1 + 16 >> 2] = jsvNewWithFlags(5);
      if (HEAP32[$1 + 16 >> 2]) {
       $0 = (HEAP32[$1 + 48 >> 2] + 3 | 0) + (HEAP32[$1 + 20 >> 2] << 1) | 0;
       jshPinFunctionToString(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8, 8, $1);
       jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 34722, jsvNewFromString($1));
       $0 = (HEAP32[$1 + 48 >> 2] + 3 | 0) + (HEAP32[$1 + 20 >> 2] << 1) | 0;
       jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 34727, jsvNewFromInteger((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8) & 15));
       $0 = (HEAP32[$1 + 48 >> 2] + 3 | 0) + (HEAP32[$1 + 20 >> 2] << 1) | 0;
       jshPinFunctionToString(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8, 3, $1);
       jsvObjectSetChildAndUnLock(HEAP32[$1 + 24 >> 2], $1, HEAP32[$1 + 16 >> 2]);
      }
     }
     HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 44 >> 2], 34730, HEAP32[$1 + 24 >> 2]);
  }
  HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 44 >> 2];
 }
 global$0 = $1 - -64 | 0;
 return HEAP32[$1 + 60 >> 2];
}
function utilTimerGetLastTask($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP8[$3 + 15 | 0] = HEAPU8[97073];
 label$1 : {
  if (HEAPU8[$3 + 15 | 0] != HEAPU8[97074]) {
   HEAP8[$3 + 15 | 0] = HEAPU8[$3 + 15 | 0] + 15 & 15;
   while (1) {
    if (HEAPU8[$3 + 15 | 0] != (HEAPU8[97074] + 15 & 15)) {
     if (FUNCTION_TABLE[HEAP32[$3 + 24 >> 2]](Math_imul(HEAPU8[$3 + 15 | 0], 29) + 97088 | 0, HEAP32[$3 + 20 >> 2]) & 1) {
      $1 = Math_imul(HEAPU8[$3 + 15 | 0], 29) + 97088 | 0;
      $4 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
      $0 = HEAP32[$3 + 16 >> 2];
      $2 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
      HEAP8[$0 | 0] = $2;
      HEAP8[$0 + 1 | 0] = $2 >>> 8;
      HEAP8[$0 + 2 | 0] = $2 >>> 16;
      HEAP8[$0 + 3 | 0] = $2 >>> 24;
      HEAP8[$0 + 4 | 0] = $4;
      HEAP8[$0 + 5 | 0] = $4 >>> 8;
      HEAP8[$0 + 6 | 0] = $4 >>> 16;
      HEAP8[$0 + 7 | 0] = $4 >>> 24;
      $2 = HEAPU8[$1 + 25 | 0] | HEAPU8[$1 + 26 | 0] << 8 | (HEAPU8[$1 + 27 | 0] << 16 | HEAPU8[$1 + 28 | 0] << 24);
      $4 = HEAPU8[$1 + 21 | 0] | HEAPU8[$1 + 22 | 0] << 8 | (HEAPU8[$1 + 23 | 0] << 16 | HEAPU8[$1 + 24 | 0] << 24);
      HEAP8[$0 + 21 | 0] = $4;
      HEAP8[$0 + 22 | 0] = $4 >>> 8;
      HEAP8[$0 + 23 | 0] = $4 >>> 16;
      HEAP8[$0 + 24 | 0] = $4 >>> 24;
      HEAP8[$0 + 25 | 0] = $2;
      HEAP8[$0 + 26 | 0] = $2 >>> 8;
      HEAP8[$0 + 27 | 0] = $2 >>> 16;
      HEAP8[$0 + 28 | 0] = $2 >>> 24;
      $2 = HEAPU8[$1 + 20 | 0] | HEAPU8[$1 + 21 | 0] << 8 | (HEAPU8[$1 + 22 | 0] << 16 | HEAPU8[$1 + 23 | 0] << 24);
      $4 = HEAPU8[$1 + 16 | 0] | HEAPU8[$1 + 17 | 0] << 8 | (HEAPU8[$1 + 18 | 0] << 16 | HEAPU8[$1 + 19 | 0] << 24);
      HEAP8[$0 + 16 | 0] = $4;
      HEAP8[$0 + 17 | 0] = $4 >>> 8;
      HEAP8[$0 + 18 | 0] = $4 >>> 16;
      HEAP8[$0 + 19 | 0] = $4 >>> 24;
      HEAP8[$0 + 20 | 0] = $2;
      HEAP8[$0 + 21 | 0] = $2 >>> 8;
      HEAP8[$0 + 22 | 0] = $2 >>> 16;
      HEAP8[$0 + 23 | 0] = $2 >>> 24;
      $2 = HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8 | (HEAPU8[$1 + 14 | 0] << 16 | HEAPU8[$1 + 15 | 0] << 24);
      $1 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24);
      HEAP8[$0 + 8 | 0] = $1;
      HEAP8[$0 + 9 | 0] = $1 >>> 8;
      HEAP8[$0 + 10 | 0] = $1 >>> 16;
      HEAP8[$0 + 11 | 0] = $1 >>> 24;
      HEAP8[$0 + 12 | 0] = $2;
      HEAP8[$0 + 13 | 0] = $2 >>> 8;
      HEAP8[$0 + 14 | 0] = $2 >>> 16;
      HEAP8[$0 + 15 | 0] = $2 >>> 24;
      HEAP8[$3 + 31 | 0] = 1;
      break label$1;
     } else {
      HEAP8[$3 + 15 | 0] = HEAPU8[$3 + 15 | 0] + 15 & 15;
      continue;
     }
    }
    break;
   }
  }
  HEAP8[$3 + 31 | 0] = 0;
 }
 global$0 = $3 + 32 | 0;
 return HEAP8[$3 + 31 | 0] & 1;
}
function tflite__reference_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = Math_fround(0);
 $9 = global$0 - 96 | 0;
 global$0 = $9;
 HEAP32[$9 + 92 >> 2] = $0;
 HEAP32[$9 + 88 >> 2] = $1;
 HEAP32[$9 + 84 >> 2] = $2;
 HEAP32[$9 + 80 >> 2] = $3;
 HEAP32[$9 + 76 >> 2] = $4;
 HEAP32[$9 + 72 >> 2] = $5;
 HEAP32[$9 + 68 >> 2] = $6;
 HEAP32[$9 + 64 >> 2] = $7;
 HEAP32[$9 + 60 >> 2] = $8;
 HEAPF32[$9 + 56 >> 2] = HEAPF32[HEAP32[$9 + 92 >> 2] + 28 >> 2];
 HEAPF32[$9 + 52 >> 2] = HEAPF32[HEAP32[$9 + 92 >> 2] + 32 >> 2];
 HEAP32[$9 + 48 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$9 + 64 >> 2]);
 HEAP32[$9 + 44 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$9 + 80 >> 2]);
 HEAP32[$9 + 40 >> 2] = tflite__FlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 64 >> 2], HEAP32[$9 + 48 >> 2] - 1 | 0);
 HEAP32[$9 + 36 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 80 >> 2], HEAP32[$9 + 44 >> 2] - 2 | 0, HEAP32[$9 + 64 >> 2], HEAP32[$9 + 48 >> 2] - 1 | 0);
 HEAP32[$9 + 32 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 80 >> 2], HEAP32[$9 + 44 >> 2] - 1 | 0);
 HEAP32[$9 + 28 >> 2] = 0;
 while (1) {
  if (HEAP32[$9 + 28 >> 2] < HEAP32[$9 + 40 >> 2]) {
   HEAP32[$9 + 24 >> 2] = 0;
   while (1) {
    if (HEAP32[$9 + 24 >> 2] < HEAP32[$9 + 36 >> 2]) {
     HEAPF32[$9 + 20 >> 2] = 0;
     HEAP32[$9 + 16 >> 2] = 0;
     while (1) {
      if (HEAP32[$9 + 16 >> 2] < HEAP32[$9 + 32 >> 2]) {
       HEAPF32[$9 + 20 >> 2] = HEAPF32[$9 + 20 >> 2] + Math_fround(HEAPF32[HEAP32[$9 + 84 >> 2] + (HEAP32[$9 + 16 >> 2] + Math_imul(HEAP32[$9 + 28 >> 2], HEAP32[$9 + 32 >> 2]) << 2) >> 2] * HEAPF32[HEAP32[$9 + 76 >> 2] + (HEAP32[$9 + 16 >> 2] + Math_imul(HEAP32[$9 + 24 >> 2], HEAP32[$9 + 32 >> 2]) << 2) >> 2]);
       HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 16 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAPF32[$9 + 12 >> 2] = 0;
     if (HEAP32[$9 + 68 >> 2]) {
      HEAPF32[$9 + 12 >> 2] = HEAPF32[HEAP32[$9 + 68 >> 2] + (HEAP32[$9 + 24 >> 2] << 2) >> 2];
     }
     $10 = tflite__ActivationFunctionWithMinMax_28float_2c_20float_2c_20float_29(Math_fround(HEAPF32[$9 + 20 >> 2] + HEAPF32[$9 + 12 >> 2]), HEAPF32[$9 + 56 >> 2], HEAPF32[$9 + 52 >> 2]);
     HEAPF32[HEAP32[$9 + 60 >> 2] + (HEAP32[$9 + 24 >> 2] + Math_imul(HEAP32[$9 + 36 >> 2], HEAP32[$9 + 28 >> 2]) << 2) >> 2] = $10;
     HEAP32[$9 + 24 >> 2] = HEAP32[$9 + 24 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$9 + 28 >> 2] = HEAP32[$9 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $9 + 96 | 0;
}
function jspeGetBinaryExpressionPrecedence($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  label$2 : {
   $0 = HEAP32[$1 + 8 >> 2] + -37 | 0;
   if ($0 >>> 0 > 149) {
    break label$2;
   }
   label$3 : {
    switch ($0 - 1 | 0) {
    case 122:
     HEAP32[$1 + 12 >> 2] = 1;
     break label$1;
    case 120:
     HEAP32[$1 + 12 >> 2] = 2;
     break label$1;
    case 86:
     HEAP32[$1 + 12 >> 2] = 3;
     break label$1;
    case 56:
     HEAP32[$1 + 12 >> 2] = 4;
     break label$1;
    case 0:
     HEAP32[$1 + 12 >> 2] = 5;
     break label$1;
    case 100:
    case 101:
    case 102:
    case 103:
     HEAP32[$1 + 12 >> 2] = 6;
     break label$1;
    case 22:
    case 24:
    case 104:
    case 107:
    case 148:
     HEAP32[$1 + 12 >> 2] = 7;
     break label$1;
    case 147:
     HEAP32[$1 + 12 >> 2] = HEAP32[23778] & 256 ? 0 : 7;
     break label$1;
    case 105:
    case 108:
    case 109:
     HEAP32[$1 + 12 >> 2] = 8;
     break label$1;
    case 5:
    case 7:
     HEAP32[$1 + 12 >> 2] = 9;
     break label$1;
    case 1:
    case 2:
    case 3:
    case 6:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 106:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 121:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
     break label$2;
    default:
     break label$3;
    }
   }
   HEAP32[$1 + 12 >> 2] = 10;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 return HEAP32[$1 + 12 >> 2];
}
function jslNewStringFromLexer($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 96 | 0;
 global$0 = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP32[$2 + 84 >> 2] = $1;
 HEAP32[$2 + 80 >> 2] = (HEAP32[$2 + 84 >> 2] + 1 | 0) - jsvStringIteratorGetIndex(HEAP32[$2 + 88 >> 2]);
 HEAP32[$2 + 76 >> 2] = 0;
 label$1 : {
  if (HEAPU32[$2 + 80 >> 2] > 22) {
   HEAP32[$2 + 76 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 80 >> 2]);
   if (HEAP32[$2 + 76 >> 2]) {
    $0 = $2 + 48 | 0;
    HEAP32[$2 + 72 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 76 >> 2]);
    $1 = HEAPU8[HEAP32[$2 + 88 >> 2] + 20 | 0];
    $3 = HEAP32[$2 + 72 >> 2];
    HEAP32[$2 + 72 >> 2] = $3 + 1;
    HEAP8[$3 | 0] = $1;
    jsvStringIteratorClone($0, HEAP32[$2 + 88 >> 2]);
    while (1) {
     if (jsvStringIteratorHasChar($2 + 48 | 0) & 1) {
      $0 = HEAP32[$2 + 80 >> 2] + -1 | 0;
      HEAP32[$2 + 80 >> 2] = $0;
      $0 = $0 >>> 0 > 0;
     } else {
      $0 = 0;
     }
     if ($0) {
      $0 = jsvStringIteratorGetCharAndNext($2 + 48 | 0);
      $1 = HEAP32[$2 + 72 >> 2];
      HEAP32[$2 + 72 >> 2] = $1 + 1;
      HEAP8[$1 | 0] = $0;
      continue;
     }
     break;
    }
    jsvStringIteratorFree($2 + 48 | 0);
    HEAP32[$2 + 92 >> 2] = HEAP32[$2 + 76 >> 2];
    break label$1;
   }
  }
  HEAP32[$2 + 76 >> 2] = jsvNewFromEmptyString();
  if (!HEAP32[$2 + 76 >> 2]) {
   HEAP32[$2 + 92 >> 2] = 0;
   break label$1;
  }
  $0 = $2 + 16 | 0;
  HEAP32[$2 + 44 >> 2] = jsvLockAgain(HEAP32[$2 + 76 >> 2]);
  HEAP8[HEAP32[$2 + 44 >> 2]] = HEAPU8[HEAP32[$2 + 88 >> 2] + 20 | 0];
  HEAP32[$2 + 40 >> 2] = 1;
  HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 80 >> 2];
  jsvStringIteratorClone($0, HEAP32[$2 + 88 >> 2]);
  while (1) {
   label$10 : {
    if (jsvStringIteratorHasChar($2 + 16 | 0) & 1) {
     $0 = HEAP32[$2 + 80 >> 2] + -1 | 0;
     HEAP32[$2 + 80 >> 2] = $0;
     $0 = $0 >>> 0 > 0;
    } else {
     $0 = 0;
    }
    if (!$0) {
     break label$10;
    }
    HEAP8[$2 + 15 | 0] = jsvStringIteratorGetCharAndNext($2 + 16 | 0);
    if (HEAPU32[$2 + 40 >> 2] >= jsvGetMaxCharactersInVar(HEAP32[$2 + 44 >> 2]) >>> 0) {
     jsvSetCharactersInVar(HEAP32[$2 + 44 >> 2], HEAP32[$2 + 40 >> 2]);
     HEAP32[$2 + 8 >> 2] = jsvNewWithFlags(40);
     if (!HEAP32[$2 + 8 >> 2]) {
      break label$10;
     }
     jsvSetLastChild(HEAP32[$2 + 44 >> 2], jsvGetRef(HEAP32[$2 + 8 >> 2]) & 65535);
     jsvUnLock(HEAP32[$2 + 44 >> 2]);
     HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 8 >> 2];
     HEAP32[$2 + 40 >> 2] = 0;
    }
    $0 = HEAPU8[$2 + 15 | 0];
    $1 = HEAP32[$2 + 44 >> 2];
    $3 = HEAP32[$2 + 40 >> 2];
    HEAP32[$2 + 40 >> 2] = $3 + 1;
    HEAP8[$1 + $3 | 0] = $0;
    continue;
   }
   break;
  }
  jsvSetCharactersInVar(HEAP32[$2 + 44 >> 2], HEAP32[$2 + 40 >> 2]);
  jsvUnLock(HEAP32[$2 + 44 >> 2]);
  jsvStringIteratorFree($2 + 16 | 0);
  HEAP32[$2 + 92 >> 2] = HEAP32[$2 + 76 >> 2];
 }
 global$0 = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}
function jswrap_graphics_createImage($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 80 | 0;
 global$0 = $1;
 HEAP32[$1 + 72 >> 2] = $0;
 label$1 : {
  if (!(jsvIsString(HEAP32[$1 + 72 >> 2]) & 1)) {
   jsExceptionHere(3, 38783, 0);
   HEAP32[$1 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 68 >> 2] = 0;
  HEAP32[$1 + 64 >> 2] = 0;
  HEAP32[$1 + 60 >> 2] = 0;
  HEAP32[$1 + 56 >> 2] = 0;
  HEAP32[$1 + 52 >> 2] = 0;
  jsvStringIteratorNew($1 + 32 | 0, HEAP32[$1 + 72 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar($1 + 32 | 0) & 1) {
    HEAP8[$1 + 31 | 0] = jsvStringIteratorGetCharAndNext($1 + 32 | 0);
    label$5 : {
     if (HEAP8[$1 + 31 | 0] == 10) {
      if (!(HEAP32[$1 + 68 >> 2] | HEAP32[$1 + 64 >> 2])) {
       HEAP32[$1 + 52 >> 2] = 1;
      }
      HEAP32[$1 + 68 >> 2] = 0;
      HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 64 >> 2] + 1;
      break label$5;
     }
     if (HEAP32[$1 + 64 >> 2] >= HEAP32[$1 + 56 >> 2]) {
      HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 64 >> 2] + 1;
     }
     HEAP32[$1 + 68 >> 2] = HEAP32[$1 + 68 >> 2] + 1;
     if (HEAP32[$1 + 68 >> 2] > HEAP32[$1 + 60 >> 2]) {
      HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 68 >> 2];
     }
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree($1 + 32 | 0);
  HEAP32[$1 + 24 >> 2] = jsvNewWithFlags(5);
  if (!HEAP32[$1 + 24 >> 2]) {
   HEAP32[$1 + 76 >> 2] = 0;
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 24 >> 2], 38802, jsvNewFromInteger(HEAP32[$1 + 60 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 24 >> 2], 38808, jsvNewFromInteger(HEAP32[$1 + 56 >> 2]));
  HEAP32[$1 + 20 >> 2] = Math_imul(HEAP32[$1 + 60 >> 2], HEAP32[$1 + 56 >> 2]) + 7 >> 3;
  HEAP32[$1 + 16 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 20 >> 2], 0);
  if (!HEAP32[$1 + 16 >> 2]) {
   jsvUnLock(HEAP32[$1 + 24 >> 2]);
   HEAP32[$1 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 68 >> 2] = 0;
  HEAP32[$1 + 64 >> 2] = 0;
  jsvStringIteratorNew($1 + 32 | 0, HEAP32[$1 + 72 >> 2], HEAP32[$1 + 52 >> 2]);
  while (1) {
   if (jsvStringIteratorHasChar($1 + 32 | 0) & 1) {
    HEAP8[$1 + 15 | 0] = jsvStringIteratorGetCharAndNext($1 + 32 | 0);
    label$14 : {
     if (HEAP8[$1 + 15 | 0] == 10) {
      HEAP32[$1 + 68 >> 2] = 0;
      HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 64 >> 2] + 1;
      break label$14;
     }
     if (HEAP8[$1 + 15 | 0] != 32) {
      HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 68 >> 2] + Math_imul(HEAP32[$1 + 64 >> 2], HEAP32[$1 + 60 >> 2]);
      jsvSetCharInString(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 8 >> 2] >>> 3, 128 >> (HEAP32[$1 + 8 >> 2] & 7) << 24 >> 24);
     }
     HEAP32[$1 + 68 >> 2] = HEAP32[$1 + 68 >> 2] + 1;
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree($1 + 32 | 0);
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 24 >> 2], 38815, HEAP32[$1 + 16 >> 2]);
  HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 24 >> 2];
 }
 global$0 = $1 + 80 | 0;
 return HEAP32[$1 + 76 >> 2];
}
function tflite__ops__micro__dequantize__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 160 | 0;
 global$0 = $2;
 HEAP32[$2 + 152 >> 2] = $0;
 HEAP32[$2 + 148 >> 2] = $1;
 HEAP32[$2 + 144 >> 2] = HEAP32[HEAP32[$2 + 152 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$2 + 148 >> 2] >> 2] + 4 >> 2], 56);
 HEAP32[$2 + 140 >> 2] = HEAP32[HEAP32[$2 + 152 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$2 + 148 >> 2] + 4 >> 2] + 4 >> 2], 56);
 HEAP32[$2 + 128 >> 2] = HEAP32[HEAP32[$2 + 144 >> 2] + 16 >> 2];
 HEAPF64[$2 + 120 >> 3] = HEAPF32[HEAP32[$2 + 144 >> 2] + 12 >> 2];
 label$1 : {
  label$2 : {
   label$3 : {
    $0 = HEAP32[HEAP32[$2 + 144 >> 2] >> 2] + -3 | 0;
    if ($0 >>> 0 > 6) {
     break label$3;
    }
    label$4 : {
     switch ($0 - 1 | 0) {
     default:
      tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 96 | 0, HEAP32[$2 + 144 >> 2]);
      $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 144 >> 2]);
      tflite__GetTensorShape_28TfLiteTensor_20const__29($2 - -64 | 0, HEAP32[$2 + 140 >> 2]);
      void_20tflite__reference_ops__Dequantize_unsigned_20char__28tflite__DequantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($2 + 120 | 0, $2 + 96 | 0, $0, $2 - -64 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 140 >> 2]));
      $0 = $2 + 96 | 0;
      tflite__RuntimeShape___RuntimeShape_28_29($2 - -64 | 0);
      break label$2;
     case 0:
     case 1:
     case 2:
     case 3:
     case 4:
      break label$3;
     case 5:
      break label$4;
     }
    }
    tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 40 | 0, HEAP32[$2 + 144 >> 2]);
    $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 144 >> 2]);
    tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 16 | 0, HEAP32[$2 + 140 >> 2]);
    void_20tflite__reference_ops__Dequantize_signed_20char__28tflite__DequantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($2 + 120 | 0, $2 + 40 | 0, $0, $2 + 16 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 140 >> 2]));
    $0 = $2 + 40 | 0;
    tflite__RuntimeShape___RuntimeShape_28_29($2 + 16 | 0);
    break label$2;
   }
   $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 152 >> 2];
   $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 144 >> 2] >> 2]);
   HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 144 >> 2] >> 2];
   HEAP32[$2 >> 2] = $3;
   FUNCTION_TABLE[$0]($1, 43746, $2);
   HEAP32[$2 + 156 >> 2] = 1;
   break label$1;
  }
  tflite__RuntimeShape___RuntimeShape_28_29($0);
  HEAP32[$2 + 156 >> 2] = 0;
 }
 global$0 = $2 + 160 | 0;
 return HEAP32[$2 + 156 >> 2];
}
function tflite__ops__micro__add__EvalAdd_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteAddParams__2c_20tflite__ops__micro__add__OpData_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0;
 $7 = global$0 - 272 | 0;
 global$0 = $7;
 $8 = $7 + 152 | 0;
 HEAP32[$7 + 268 >> 2] = $0;
 HEAP32[$7 + 264 >> 2] = $1;
 HEAP32[$7 + 260 >> 2] = $2;
 HEAP32[$7 + 256 >> 2] = $3;
 HEAP32[$7 + 252 >> 2] = $4;
 HEAP32[$7 + 248 >> 2] = $5;
 HEAP32[$7 + 244 >> 2] = $6;
 void_20tflite__CalculateActivationRange_float__28TfLiteFusedActivation_2c_20float__2c_20float__29(HEAP32[HEAP32[$7 + 260 >> 2] >> 2], $7 + 240 | 0, $7 + 236 | 0);
 void_20tflite__SetActivationParams_tflite__ArithmeticParams__28float_2c_20float_2c_20tflite__ArithmeticParams__29(HEAPF32[$7 + 240 >> 2], HEAPF32[$7 + 236 >> 2], $8);
 label$1 : {
  if (HEAP8[HEAP32[$7 + 256 >> 2]] & 1) {
   tflite__GetTensorShape_28TfLiteTensor_20const__29($7 + 128 | 0, HEAP32[$7 + 252 >> 2]);
   $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$7 + 252 >> 2]);
   tflite__GetTensorShape_28TfLiteTensor_20const__29($7 + 96 | 0, HEAP32[$7 + 248 >> 2]);
   $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$7 + 248 >> 2]);
   tflite__GetTensorShape_28TfLiteTensor_20const__29($7 + 72 | 0, HEAP32[$7 + 244 >> 2]);
   tflite__reference_ops__BroadcastAdd4DSlow_28tflite__ArithmeticParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($7 + 152 | 0, $7 + 128 | 0, $0, $7 + 96 | 0, $1, $7 + 72 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$7 + 244 >> 2]));
   $0 = $7 + 128 | 0;
   $1 = $7 + 96 | 0;
   tflite__RuntimeShape___RuntimeShape_28_29($7 + 72 | 0);
   break label$1;
  }
  tflite__GetTensorShape_28TfLiteTensor_20const__29($7 + 48 | 0, HEAP32[$7 + 252 >> 2]);
  $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$7 + 252 >> 2]);
  tflite__GetTensorShape_28TfLiteTensor_20const__29($7 + 24 | 0, HEAP32[$7 + 248 >> 2]);
  $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$7 + 248 >> 2]);
  tflite__GetTensorShape_28TfLiteTensor_20const__29($7, HEAP32[$7 + 244 >> 2]);
  tflite__reference_ops__Add_28tflite__ArithmeticParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($7 + 152 | 0, $7 + 48 | 0, $0, $7 + 24 | 0, $1, $7, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$7 + 244 >> 2]));
  $0 = $7 + 48 | 0;
  $1 = $7 + 24 | 0;
  tflite__RuntimeShape___RuntimeShape_28_29($7);
 }
 tflite__RuntimeShape___RuntimeShape_28_29($1);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $7 + 272 | 0;
}
function jswrap_spi_send($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 272 | 0;
 global$0 = $3;
 $4 = $3 + 184 | 0;
 HEAP32[$3 + 264 >> 2] = $0;
 HEAP32[$3 + 260 >> 2] = $1;
 HEAP8[$3 + 259 | 0] = $2;
 HEAP8[$3 + 258 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 264 >> 2]);
 label$1 : {
  if (!(jsspiGetSendFunction(HEAP32[$3 + 264 >> 2], $4, $4 + 4 | 0) & 1)) {
   HEAP32[$3 + 268 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 180 >> 2] = 0;
  if (!(HEAPU8[$3 + 258 | 0] < 24 | HEAPU8[$3 + 258 | 0] > 24)) {
   jshPinSetState(HEAPU8[$3 + 258 | 0], 1);
  }
  if (HEAPU8[$3 + 259 | 0] != 255) {
   jshPinOutput(HEAPU8[$3 + 259 | 0], 0);
  }
  label$5 : {
   if (jsvIsNumeric(HEAP32[$3 + 260 >> 2]) & 1) {
    $0 = $3 + 179 | 0;
    $1 = $3 + 184 | 0;
    HEAP8[$3 + 179 | 0] = jsvGetInteger(HEAP32[$3 + 260 >> 2]);
    FUNCTION_TABLE[HEAP32[$3 + 184 >> 2]]($0, $0, 1, $1 + 4 | 0);
    HEAP32[$3 + 180 >> 2] = jsvNewFromInteger(HEAPU8[$3 + 179 | 0]);
    break label$5;
   }
   label$7 : {
    if (jsvIsString(HEAP32[$3 + 260 >> 2]) & 1) {
     $0 = $3 + 24 | 0;
     HEAP32[$3 + 180 >> 2] = jsvNewFromEmptyString();
     jsvStringIteratorNew($0, HEAP32[$3 + 260 >> 2], 0);
     while (1) {
      if (jsvStringIteratorHasChar($3 + 24 | 0) & 1) {
       $0 = jspIsInterrupted() ^ -1;
      } else {
       $0 = 0;
      }
      if ($0 & 1) {
       jsvStringIteratorGetPtrAndNext($3 + 24 | 0, $3 + 20 | 0, $3 + 16 | 0);
       while (1) {
        if (HEAP32[$3 + 16 >> 2]) {
         $0 = $3;
         if (HEAPU32[$3 + 16 >> 2] > 128) {
          $1 = 128;
         } else {
          $1 = HEAP32[$3 + 16 >> 2];
         }
         HEAP32[$0 + 12 >> 2] = $1;
         $0 = $3 + 48 | 0;
         FUNCTION_TABLE[HEAP32[$3 + 184 >> 2]](HEAP32[$3 + 20 >> 2], $0, HEAP32[$3 + 12 >> 2], $3 + 188 | 0);
         jsvAppendStringBuf(HEAP32[$3 + 180 >> 2], $0, HEAP32[$3 + 12 >> 2]);
         HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] - HEAP32[$3 + 12 >> 2];
         HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 12 >> 2] + HEAP32[$3 + 20 >> 2];
         continue;
        }
        break;
       }
       continue;
      }
      break;
     }
     jsvStringIteratorFree($3 + 24 | 0);
     break label$7;
    }
    HEAP32[$3 + 8 >> 2] = jsvIterateCallbackCount(HEAP32[$3 + 260 >> 2]);
    HEAP32[$3 + 180 >> 2] = jsvNewTypedArray(1, HEAP32[$3 + 8 >> 2]);
    if (HEAP32[$3 + 180 >> 2]) {
     HEAP32[$3 + 208 >> 2] = 0;
     HEAP32[$3 + 204 >> 2] = 0;
     $0 = $3 + 184 | 0;
     jsvArrayBufferIteratorNew($0 + 28 | 0, HEAP32[$3 + 180 >> 2], 0);
     jsvIterateBufferCallback(HEAP32[$3 + 260 >> 2], 543, $0);
     jsvArrayBufferIteratorFree($0 + 28 | 0);
    }
   }
  }
  if (HEAPU8[$3 + 259 | 0] != 255) {
   jshPinOutput(HEAPU8[$3 + 259 | 0], 1);
  }
  HEAP32[$3 + 268 >> 2] = HEAP32[$3 + 180 >> 2];
 }
 global$0 = $3 + 272 | 0;
 return HEAP32[$3 + 268 >> 2];
}
function tflite__ops__micro__pooling__MaxEval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 HEAP32[$2 + 32 >> 2] = HEAP32[HEAP32[$2 + 36 >> 2] + 20 >> 2];
 HEAP32[$2 + 12 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 0);
 HEAP32[$2 + 8 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
 label$1 : {
  if (tflite__ops__micro__pooling___28anonymous_20namespace_29__CalculateOpData_28TfLiteContext_20const__2c_20TfLitePoolParams_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], $2 + 16 | 0)) {
   HEAP32[$2 + 44 >> 2] = 1;
   break label$1;
  }
  label$3 : {
   label$4 : {
    $0 = HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + -1 | 0;
    if ($0 >>> 0 > 8) {
     break label$4;
    }
    label$5 : {
     switch ($0 - 1 | 0) {
     default:
      tflite__ops__micro__pooling___28anonymous_20namespace_29__MaxEvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLitePoolParams__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], $2 + 16 | 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
      break label$3;
     case 1:
      tflite__ops__micro__pooling___28anonymous_20namespace_29__MaxEvalQuantizedUInt8_28TfLiteContext__2c_20TfLiteNode__2c_20TfLitePoolParams__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], $2 + 16 | 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
      break label$3;
     case 0:
     case 2:
     case 3:
     case 4:
     case 5:
     case 6:
      break label$4;
     case 7:
      break label$5;
     }
    }
    tflite__ops__micro__pooling___28anonymous_20namespace_29__MaxEvalQuantizedInt8_28TfLiteContext__2c_20TfLiteNode__2c_20TfLitePoolParams__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], $2 + 16 | 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
    break label$3;
   }
   $0 = HEAP32[HEAP32[$2 + 40 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 40 >> 2];
   HEAP32[$2 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 12 >> 2] >> 2]);
   FUNCTION_TABLE[$0]($1, 44188, $2);
   HEAP32[$2 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 44 >> 2] = 0;
 }
 global$0 = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}
function tflite__reference_ops__BroadcastAdd4DSlow_28tflite__ArithmeticParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = Math_fround(0);
 $7 = global$0 - 144 | 0;
 global$0 = $7;
 $8 = $7 + 24 | 0;
 HEAP32[$7 + 140 >> 2] = $0;
 HEAP32[$7 + 136 >> 2] = $1;
 HEAP32[$7 + 132 >> 2] = $2;
 HEAP32[$7 + 128 >> 2] = $3;
 HEAP32[$7 + 124 >> 2] = $4;
 HEAP32[$7 + 120 >> 2] = $5;
 HEAP32[$7 + 116 >> 2] = $6;
 void_20tflite__NdArrayDescsForElementwiseBroadcast_4__28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__2c_20tflite__NdArrayDesc_4___2c_20tflite__NdArrayDesc_4___29(HEAP32[$7 + 136 >> 2], HEAP32[$7 + 128 >> 2], $7 + 80 | 0, $7 + 48 | 0);
 tflite__RuntimeShape__ExtendedShape_28int_2c_20tflite__RuntimeShape_20const__29($8, 4, HEAP32[$7 + 120 >> 2]);
 HEAP32[$7 + 20 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 20 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 24 | 0, 0) | 0)) {
   HEAP32[$7 + 8 >> 2] = 0;
   while (1) {
    if (HEAP32[$7 + 8 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 24 | 0, 1) | 0)) {
     HEAP32[$7 + 4 >> 2] = 0;
     while (1) {
      if (HEAP32[$7 + 4 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 24 | 0, 2) | 0)) {
       HEAP32[$7 >> 2] = 0;
       while (1) {
        if (HEAP32[$7 >> 2] < (tflite__RuntimeShape__Dims_28int_29_20const($7 + 24 | 0, 3) | 0)) {
         $9 = tflite__ActivationFunctionWithMinMax_28float_2c_20float_2c_20float_29(Math_fround(HEAPF32[HEAP32[$7 + 132 >> 2] + (tflite__SubscriptToIndex_28tflite__NdArrayDesc_4__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 80 | 0, HEAP32[$7 + 20 >> 2], HEAP32[$7 + 8 >> 2], HEAP32[$7 + 4 >> 2], HEAP32[$7 >> 2]) << 2) >> 2] + HEAPF32[HEAP32[$7 + 124 >> 2] + (tflite__SubscriptToIndex_28tflite__NdArrayDesc_4__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 48 | 0, HEAP32[$7 + 20 >> 2], HEAP32[$7 + 8 >> 2], HEAP32[$7 + 4 >> 2], HEAP32[$7 >> 2]) << 2) >> 2]), HEAPF32[HEAP32[$7 + 140 >> 2] + 52 >> 2], HEAPF32[HEAP32[$7 + 140 >> 2] + 56 >> 2]);
         HEAPF32[HEAP32[$7 + 116 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29($7 + 24 | 0, HEAP32[$7 + 20 >> 2], HEAP32[$7 + 8 >> 2], HEAP32[$7 + 4 >> 2], HEAP32[$7 >> 2]) << 2) >> 2] = $9;
         HEAP32[$7 >> 2] = HEAP32[$7 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 4 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$7 + 8 >> 2] = HEAP32[$7 + 8 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 24 | 0);
 global$0 = $7 + 144 | 0;
}
function void_20tflite__NdArrayDescsForElementwiseBroadcast_4__28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__2c_20tflite__NdArrayDesc_4___2c_20tflite__NdArrayDesc_4___29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 96 | 0;
 global$0 = $4;
 HEAP32[$4 + 92 >> 2] = $0;
 HEAP32[$4 + 88 >> 2] = $1;
 HEAP32[$4 + 84 >> 2] = $2;
 HEAP32[$4 + 80 >> 2] = $3;
 label$1 : {
  if (!HEAP32[$4 + 84 >> 2]) {
   break label$1;
  }
 }
 label$2 : {
  if (!HEAP32[$4 + 80 >> 2]) {
   break label$2;
  }
 }
 $0 = $4 + 32 | 0;
 tflite__RuntimeShape__ExtendedShape_28int_2c_20tflite__RuntimeShape_20const__29($4 + 56 | 0, 4, HEAP32[$4 + 92 >> 2]);
 tflite__RuntimeShape__ExtendedShape_28int_2c_20tflite__RuntimeShape_20const__29($0, 4, HEAP32[$4 + 88 >> 2]);
 HEAP32[$4 + 20 >> 2] = 1;
 HEAP32[$4 + 16 >> 2] = 1;
 HEAP32[$4 + 12 >> 2] = 3;
 while (1) {
  if (HEAP32[$4 + 12 >> 2] >= 0) {
   $0 = tflite__RuntimeShape__Dims_28int_29_20const($4 + 56 | 0, HEAP32[$4 + 12 >> 2]);
   HEAP32[HEAP32[$4 + 84 >> 2] + (HEAP32[$4 + 12 >> 2] << 2) >> 2] = $0;
   HEAP32[(HEAP32[$4 + 84 >> 2] + 16 | 0) + (HEAP32[$4 + 12 >> 2] << 2) >> 2] = HEAP32[$4 + 20 >> 2];
   HEAP32[$4 + 20 >> 2] = Math_imul(tflite__RuntimeShape__Dims_28int_29_20const($4 + 56 | 0, HEAP32[$4 + 12 >> 2]), HEAP32[$4 + 20 >> 2]);
   $0 = tflite__RuntimeShape__Dims_28int_29_20const($4 + 32 | 0, HEAP32[$4 + 12 >> 2]);
   HEAP32[HEAP32[$4 + 80 >> 2] + (HEAP32[$4 + 12 >> 2] << 2) >> 2] = $0;
   HEAP32[(HEAP32[$4 + 80 >> 2] + 16 | 0) + (HEAP32[$4 + 12 >> 2] << 2) >> 2] = HEAP32[$4 + 16 >> 2];
   HEAP32[$4 + 16 >> 2] = Math_imul(tflite__RuntimeShape__Dims_28int_29_20const($4 + 32 | 0, HEAP32[$4 + 12 >> 2]), HEAP32[$4 + 16 >> 2]);
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + -1;
   continue;
  }
  break;
 }
 HEAP32[$4 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 8 >> 2] < 4) {
   HEAP32[$4 + 4 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const($4 + 56 | 0, HEAP32[$4 + 8 >> 2]);
   HEAP32[$4 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const($4 + 32 | 0, HEAP32[$4 + 8 >> 2]);
   if (HEAP32[$4 + 4 >> 2] != HEAP32[$4 >> 2]) {
    label$8 : {
     if (HEAP32[$4 + 4 >> 2] == 1) {
      HEAP32[(HEAP32[$4 + 84 >> 2] + 16 | 0) + (HEAP32[$4 + 8 >> 2] << 2) >> 2] = 0;
      HEAP32[HEAP32[$4 + 84 >> 2] + (HEAP32[$4 + 8 >> 2] << 2) >> 2] = HEAP32[$4 >> 2];
      break label$8;
     }
     label$10 : {
      if (HEAP32[$4 >> 2] != 1) {
       break label$10;
      }
     }
     HEAP32[(HEAP32[$4 + 80 >> 2] + 16 | 0) + (HEAP32[$4 + 8 >> 2] << 2) >> 2] = 0;
     HEAP32[HEAP32[$4 + 80 >> 2] + (HEAP32[$4 + 8 >> 2] << 2) >> 2] = HEAP32[$4 + 4 >> 2];
    }
   }
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 $0 = $4 + 56 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($4 + 32 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $4 + 96 | 0;
}
function jswrap_graphics_stringWidth($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 144 | 0;
 global$0 = $2;
 HEAP32[$2 + 136 >> 2] = $0;
 HEAP32[$2 + 132 >> 2] = $1;
 label$1 : {
  if (!(graphicsGetFromVar($2 - -64 | 0, HEAP32[$2 + 136 >> 2]) & 1)) {
   HEAP32[$2 + 140 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 60 >> 2] = 0;
  HEAP32[$2 + 56 >> 2] = 0;
  HEAP32[$2 + 52 >> 2] = (HEAPU8[$2 + 89 | 0] | HEAPU8[$2 + 90 | 0] << 8) & 57344;
  HEAP16[$2 + 50 >> 1] = (HEAPU8[$2 + 89 | 0] | HEAPU8[$2 + 90 | 0] << 8) & 8191;
  if (HEAP32[$2 + 52 >> 2] == 24576) {
   HEAP32[$2 + 60 >> 2] = jsvObjectGetChild(HEAP32[$2 + 136 >> 2], 38882, 0);
   HEAP32[$2 + 56 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$2 + 136 >> 2], 38892, 0));
  }
  $0 = $2 + 24 | 0;
  HEAP32[$2 + 44 >> 2] = jsvAsString(HEAP32[$2 + 132 >> 2]);
  jsvStringIteratorNew($0, HEAP32[$2 + 44 >> 2], 0);
  HEAP32[$2 + 20 >> 2] = 0;
  HEAP32[$2 + 16 >> 2] = 0;
  while (1) {
   if (jsvStringIteratorHasChar($2 + 24 | 0) & 1) {
    HEAP8[$2 + 15 | 0] = jsvStringIteratorGetChar($2 + 24 | 0);
    if (HEAP8[$2 + 15 | 0] == 10) {
     if (HEAP32[$2 + 20 >> 2] > HEAP32[$2 + 16 >> 2]) {
      HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 20 >> 2];
     }
     HEAP32[$2 + 20 >> 2] = 0;
    }
    label$8 : {
     if (!HEAP32[$2 + 52 >> 2]) {
      HEAP32[$2 + 20 >> 2] = graphicsVectorCharWidth($2 - -64 | 0, HEAPU16[$2 + 50 >> 1], HEAP8[$2 + 15 | 0]) + HEAP32[$2 + 20 >> 2];
      break label$8;
     }
     label$10 : {
      if (HEAP32[$2 + 52 >> 2] == 8192) {
       HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + (HEAPU16[$2 + 50 >> 1] << 2);
       break label$10;
      }
      label$12 : {
       if (HEAP32[$2 + 52 >> 2] == 16384) {
        HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + Math_imul(HEAPU16[$2 + 50 >> 1], 6);
        break label$12;
       }
       if (HEAP32[$2 + 52 >> 2] == 24576) {
        label$15 : {
         if (jsvIsString(HEAP32[$2 + 60 >> 2]) & 1) {
          if (HEAP8[$2 + 15 | 0] >= HEAP32[$2 + 56 >> 2]) {
           HEAP32[$2 + 20 >> 2] = Math_imul(HEAPU16[$2 + 50 >> 1], jsvGetCharInString(HEAP32[$2 + 60 >> 2], HEAP8[$2 + 15 | 0] - HEAP32[$2 + 56 >> 2] | 0) & 255) + HEAP32[$2 + 20 >> 2];
          }
          break label$15;
         }
         HEAP32[$2 + 20 >> 2] = Math_imul(HEAPU16[$2 + 50 >> 1], jsvGetInteger(HEAP32[$2 + 60 >> 2])) + HEAP32[$2 + 20 >> 2];
        }
       }
      }
     }
    }
    jsvStringIteratorNext($2 + 24 | 0);
    continue;
   }
   break;
  }
  jsvStringIteratorFree($2 + 24 | 0);
  jsvUnLock2(HEAP32[$2 + 44 >> 2], HEAP32[$2 + 60 >> 2]);
  $0 = $2;
  if (HEAP32[$2 + 20 >> 2] > HEAP32[$2 + 16 >> 2]) {
   $1 = HEAP32[$2 + 20 >> 2];
  } else {
   $1 = HEAP32[$2 + 16 >> 2];
  }
  HEAP32[$0 + 140 >> 2] = $1;
 }
 global$0 = $2 + 144 | 0;
 return HEAP32[$2 + 140 >> 2];
}
function tflite__ops__micro__depthwise_conv__EvalQuantizedPerChannel_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0;
 $8 = global$0 - 192 | 0;
 global$0 = $8;
 HEAP32[$8 + 188 >> 2] = $0;
 HEAP32[$8 + 184 >> 2] = $1;
 HEAP32[$8 + 180 >> 2] = $2;
 HEAP32[$8 + 176 >> 2] = $3;
 HEAP32[$8 + 172 >> 2] = $4;
 HEAP32[$8 + 168 >> 2] = $5;
 HEAP32[$8 + 164 >> 2] = $6;
 HEAP32[$8 + 160 >> 2] = $7;
 HEAP8[$8 + 104 | 0] = 1;
 HEAP16[$8 + 106 >> 1] = HEAP32[HEAP32[$8 + 176 >> 2] >> 2];
 HEAP16[$8 + 108 >> 1] = HEAP32[HEAP32[$8 + 176 >> 2] + 4 >> 2];
 HEAP16[$8 + 114 >> 1] = HEAP32[HEAP32[$8 + 180 >> 2] + 4 >> 2];
 HEAP16[$8 + 116 >> 1] = HEAP32[HEAP32[$8 + 180 >> 2] + 8 >> 2];
 HEAP16[$8 + 118 >> 1] = HEAP32[HEAP32[$8 + 180 >> 2] + 20 >> 2];
 HEAP16[$8 + 120 >> 1] = HEAP32[HEAP32[$8 + 180 >> 2] + 24 >> 2];
 HEAP16[$8 + 122 >> 1] = HEAP32[HEAP32[$8 + 180 >> 2] + 12 >> 2];
 HEAP32[$8 + 124 >> 2] = 0 - HEAP32[HEAP32[$8 + 172 >> 2] + 16 >> 2];
 HEAP32[$8 + 128 >> 2] = 0;
 HEAP32[$8 + 132 >> 2] = HEAP32[HEAP32[$8 + 160 >> 2] + 16 >> 2];
 HEAP32[$8 + 144 >> 2] = -128;
 HEAP32[$8 + 148 >> 2] = 127;
 $0 = HEAP32[$8 + 176 >> 2] + 24 | 0;
 $1 = HEAP32[$8 + 176 >> 2] + 280 | 0;
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 80 | 0, HEAP32[$8 + 172 >> 2]);
 $2 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 172 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 48 | 0, HEAP32[$8 + 168 >> 2]);
 $3 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 168 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 24 | 0, HEAP32[$8 + 164 >> 2]);
 $4 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 164 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8, HEAP32[$8 + 160 >> 2]);
 tflite__reference_integer_ops__DepthwiseConvPerChannel_28tflite__DepthwiseParams_20const__2c_20int_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($8 + 104 | 0, $0, $1, $8 + 80 | 0, $2, $8 + 48 | 0, $3, $8 + 24 | 0, $4, $8, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 160 >> 2]));
 $0 = $8 + 80 | 0;
 $1 = $8 + 48 | 0;
 $2 = $8 + 24 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($8);
 tflite__RuntimeShape___RuntimeShape_28_29($2);
 tflite__RuntimeShape___RuntimeShape_28_29($1);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $8 + 192 | 0;
}
function tflite__ops__micro__pack___28anonymous_20namespace_29__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 20 >> 2];
 HEAP32[$2 + 12 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2]);
 label$1 : {
  label$2 : {
   $0 = HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + -1 | 0;
   if ($0 >>> 0 > 8) {
    break label$2;
   }
   label$3 : {
    switch ($0 - 1 | 0) {
    default:
     HEAP32[$2 + 28 >> 2] = TfLiteStatus_20tflite__ops__micro__pack___28anonymous_20namespace_29__PackImpl_float__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor__2c_20int_2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[HEAP32[$2 + 16 >> 2] >> 2], HEAP32[HEAP32[$2 + 16 >> 2] + 4 >> 2]);
     break label$1;
    case 1:
     HEAP32[$2 + 28 >> 2] = TfLiteStatus_20tflite__ops__micro__pack___28anonymous_20namespace_29__PackImpl_unsigned_20char__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor__2c_20int_2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[HEAP32[$2 + 16 >> 2] >> 2], HEAP32[HEAP32[$2 + 16 >> 2] + 4 >> 2]);
     break label$1;
    case 7:
     HEAP32[$2 + 28 >> 2] = TfLiteStatus_20tflite__ops__micro__pack___28anonymous_20namespace_29__PackImpl_unsigned_20char__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor__2c_20int_2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[HEAP32[$2 + 16 >> 2] >> 2], HEAP32[HEAP32[$2 + 16 >> 2] + 4 >> 2]);
     break label$1;
    case 0:
     HEAP32[$2 + 28 >> 2] = TfLiteStatus_20tflite__ops__micro__pack___28anonymous_20namespace_29__PackImpl_int__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor__2c_20int_2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[HEAP32[$2 + 16 >> 2] >> 2], HEAP32[HEAP32[$2 + 16 >> 2] + 4 >> 2]);
     break label$1;
    case 3:
    case 4:
    case 5:
    case 6:
     break label$2;
    case 2:
     break label$3;
    }
   }
   HEAP32[$2 + 28 >> 2] = TfLiteStatus_20tflite__ops__micro__pack___28anonymous_20namespace_29__PackImpl_long_20long__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor__2c_20int_2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[HEAP32[$2 + 16 >> 2] >> 2], HEAP32[HEAP32[$2 + 16 >> 2] + 4 >> 2]);
   break label$1;
  }
  $0 = HEAP32[HEAP32[$2 + 24 >> 2] + 20 >> 2];
  $1 = HEAP32[$2 + 24 >> 2];
  HEAP32[$2 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 12 >> 2] >> 2]);
  FUNCTION_TABLE[$0]($1, 42347, $2);
  HEAP32[$2 + 28 >> 2] = 1;
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function jsvIsBasicVarEqual($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 label$1 : {
  if (HEAP32[$2 + 56 >> 2] == HEAP32[$2 + 52 >> 2]) {
   HEAP8[$2 + 63 | 0] = 1;
   break label$1;
  }
  if (!(HEAP32[$2 + 52 >> 2] ? HEAP32[$2 + 56 >> 2] : 0)) {
   HEAP8[$2 + 63 | 0] = 0;
   break label$1;
  }
  label$5 : {
   if (!(jsvIsNumeric(HEAP32[$2 + 56 >> 2]) & 1)) {
    break label$5;
   }
   if (!(jsvIsNumeric(HEAP32[$2 + 52 >> 2]) & 1)) {
    break label$5;
   }
   if (jsvIsIntegerish(HEAP32[$2 + 56 >> 2]) & 1) {
    if (jsvIsIntegerish(HEAP32[$2 + 52 >> 2]) & 1) {
     HEAP8[$2 + 63 | 0] = HEAP32[HEAP32[$2 + 56 >> 2] >> 2] == HEAP32[HEAP32[$2 + 52 >> 2] >> 2];
     break label$1;
    }
    $3 = +HEAP32[HEAP32[$2 + 56 >> 2] >> 2];
    $0 = HEAP32[$2 + 52 >> 2];
    $1 = HEAP32[$0 + 4 >> 2];
    wasm2js_scratch_store_i32(0, HEAP32[$0 >> 2]);
    wasm2js_scratch_store_i32(1, $1 | 0);
    HEAP8[$2 + 63 | 0] = $3 == +wasm2js_scratch_load_f64();
    break label$1;
   }
   if (jsvIsIntegerish(HEAP32[$2 + 52 >> 2]) & 1) {
    $0 = HEAP32[$2 + 56 >> 2];
    $1 = HEAP32[$0 + 4 >> 2];
    wasm2js_scratch_store_i32(0, HEAP32[$0 >> 2]);
    wasm2js_scratch_store_i32(1, $1 | 0);
    HEAP8[$2 + 63 | 0] = +wasm2js_scratch_load_f64() == +HEAP32[HEAP32[$2 + 52 >> 2] >> 2];
    break label$1;
   }
   $0 = HEAP32[$2 + 56 >> 2];
   $1 = HEAP32[$0 + 4 >> 2];
   wasm2js_scratch_store_i32(0, HEAP32[$0 >> 2]);
   wasm2js_scratch_store_i32(1, $1 | 0);
   $3 = +wasm2js_scratch_load_f64();
   $0 = HEAP32[$2 + 52 >> 2];
   $1 = HEAP32[$0 + 4 >> 2];
   wasm2js_scratch_store_i32(0, HEAP32[$0 >> 2]);
   wasm2js_scratch_store_i32(1, $1 | 0);
   HEAP8[$2 + 63 | 0] = $3 == +wasm2js_scratch_load_f64();
   break label$1;
  }
  label$9 : {
   if (!(jsvIsString(HEAP32[$2 + 56 >> 2]) & 1)) {
    break label$9;
   }
   if (!(jsvIsString(HEAP32[$2 + 52 >> 2]) & 1)) {
    break label$9;
   }
   $0 = $2 + 8 | 0;
   jsvStringIteratorNew($2 + 32 | 0, HEAP32[$2 + 56 >> 2], 0);
   jsvStringIteratorNew($0, HEAP32[$2 + 52 >> 2], 0);
   while (1) {
    $0 = $2 + 8 | 0;
    HEAP8[$2 + 7 | 0] = jsvStringIteratorGetCharAndNext($2 + 32 | 0);
    HEAP8[$2 + 6 | 0] = jsvStringIteratorGetCharAndNext($0);
    if (HEAP8[$2 + 7 | 0] != HEAP8[$2 + 6 | 0]) {
     $0 = $2 + 8 | 0;
     jsvStringIteratorFree($2 + 32 | 0);
     jsvStringIteratorFree($0);
     HEAP8[$2 + 63 | 0] = 0;
     break label$1;
    }
    if (HEAPU8[$2 + 7 | 0]) {
     continue;
    }
    break;
   }
   $0 = $2 + 8 | 0;
   jsvStringIteratorFree($2 + 32 | 0);
   jsvStringIteratorFree($0);
   HEAP8[$2 + 63 | 0] = 1;
   break label$1;
  }
  HEAP8[$2 + 63 | 0] = 0;
 }
 global$0 = $2 - -64 | 0;
 return HEAP8[$2 + 63 | 0] & 1;
}
function jswrap_typedarray_constructor($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 96 | 0;
 global$0 = $4;
 HEAP16[$4 + 90 >> 1] = $0;
 HEAP32[$4 + 84 >> 2] = $1;
 HEAP32[$4 + 80 >> 2] = $2;
 HEAP32[$4 + 76 >> 2] = $3;
 HEAP32[$4 + 72 >> 2] = 0;
 HEAP8[$4 + 71 | 0] = 0;
 label$1 : {
  if (!(!(jsvIsArrayBuffer(HEAP32[$4 + 84 >> 2]) & 1) | HEAPU16[HEAP32[$4 + 84 >> 2] + 4 >> 1] != 129)) {
   HEAP32[$4 + 72 >> 2] = jsvLockAgain(HEAP32[$4 + 84 >> 2]);
   break label$1;
  }
  label$3 : {
   if (jsvIsNumeric(HEAP32[$4 + 84 >> 2]) & 1) {
    HEAP32[$4 + 76 >> 2] = jsvGetInteger(HEAP32[$4 + 84 >> 2]);
    HEAP32[$4 + 80 >> 2] = 0;
    HEAP32[$4 + 72 >> 2] = jswrap_arraybuffer_constructor(Math_imul(HEAP32[$4 + 76 >> 2], HEAPU16[$4 + 90 >> 1] & 15));
    break label$3;
   }
   label$5 : {
    if (!(jsvIsArray(HEAP32[$4 + 84 >> 2]) & 1)) {
     if (!(jsvIsArrayBuffer(HEAP32[$4 + 84 >> 2]) & 1)) {
      break label$5;
     }
    }
    HEAP32[$4 + 76 >> 2] = jsvGetLength(HEAP32[$4 + 84 >> 2]);
    HEAP32[$4 + 80 >> 2] = 0;
    HEAP32[$4 + 72 >> 2] = jswrap_arraybuffer_constructor(Math_imul(HEAP32[$4 + 76 >> 2], HEAPU16[$4 + 90 >> 1] & 15));
    HEAP8[$4 + 71 | 0] = 1;
   }
  }
 }
 label$7 : {
  if (!HEAP32[$4 + 72 >> 2]) {
   HEAP32[$4 >> 2] = HEAP32[$4 + 84 >> 2];
   jsExceptionHere(1, 30853, $4);
   HEAP32[$4 + 92 >> 2] = 0;
   break label$7;
  }
  if (!HEAP32[$4 + 76 >> 2]) {
   HEAP32[$4 + 76 >> 2] = (jsvGetArrayBufferLength(HEAP32[$4 + 72 >> 2]) - HEAP32[$4 + 80 >> 2] | 0) / (HEAPU16[$4 + 90 >> 1] & 15);
   if (HEAP32[$4 + 76 >> 2] < 0) {
    HEAP32[$4 + 76 >> 2] = 0;
   }
  }
  HEAP32[$4 + 64 >> 2] = jsvNewWithFlags(4);
  if (HEAP32[$4 + 64 >> 2]) {
   HEAP16[HEAP32[$4 + 64 >> 2] + 4 >> 1] = HEAPU16[$4 + 90 >> 1];
   HEAP16[HEAP32[$4 + 64 >> 2] >> 1] = HEAP32[$4 + 80 >> 2];
   HEAP16[HEAP32[$4 + 64 >> 2] + 2 >> 1] = HEAP32[$4 + 76 >> 2];
   jsvSetFirstChild(HEAP32[$4 + 64 >> 2], jsvGetRef(jsvRef(HEAP32[$4 + 72 >> 2])) & 65535);
   if (HEAP8[$4 + 71 | 0] & 1) {
    jsvIteratorNew($4 + 16 | 0, HEAP32[$4 + 84 >> 2], 0);
    while (1) {
     if (jsvIteratorHasElement($4 + 16 | 0) & 1) {
      HEAP32[$4 + 12 >> 2] = jsvIteratorGetKey($4 + 16 | 0);
      if (jsvIsInt(HEAP32[$4 + 12 >> 2]) & 1) {
       HEAP32[$4 + 8 >> 2] = jsvIteratorGetValue($4 + 16 | 0);
       jsvArrayBufferSet(HEAP32[$4 + 64 >> 2], jsvGetInteger(HEAP32[$4 + 12 >> 2]), HEAP32[$4 + 8 >> 2]);
       jsvUnLock(HEAP32[$4 + 8 >> 2]);
      }
      $0 = $4 + 16 | 0;
      jsvUnLock(HEAP32[$4 + 12 >> 2]);
      jsvIteratorNext($0);
      continue;
     }
     break;
    }
    jsvIteratorFree($4 + 16 | 0);
   }
  }
  jsvUnLock(HEAP32[$4 + 72 >> 2]);
  HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 64 >> 2];
 }
 global$0 = $4 + 96 | 0;
 return HEAP32[$4 + 92 >> 2];
}
function _jsvCountJsVarsUsedRecursive($0, $1) {
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP8[$2 + 39 | 0] = $1;
 label$1 : {
  if (!HEAP32[$2 + 40 >> 2]) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  label$3 : {
   if (HEAP8[$2 + 39 | 0] & 1) {
    if (!(HEAPU16[HEAP32[$2 + 40 >> 2] + 14 >> 1] & 256)) {
     HEAP32[$2 + 44 >> 2] = 0;
     break label$1;
    }
    $0 = HEAP32[$2 + 40 >> 2];
    HEAP16[$0 + 14 >> 1] = HEAPU16[$0 + 14 >> 1] & -257;
    break label$3;
   }
   if (HEAPU16[HEAP32[$2 + 40 >> 2] + 14 >> 1] & 256) {
    HEAP32[$2 + 44 >> 2] = 0;
    break label$1;
   }
   $0 = HEAP32[$2 + 40 >> 2];
   HEAP16[$0 + 14 >> 1] = HEAPU16[$0 + 14 >> 1] | 256;
  }
  HEAP32[$2 + 32 >> 2] = 1;
  label$7 : {
   label$8 : {
    if (!(jsvHasSingleChild(HEAP32[$2 + 40 >> 2]) & 1)) {
     if (!(jsvHasChildren(HEAP32[$2 + 40 >> 2]) & 1)) {
      break label$8;
     }
    }
    HEAP16[$2 + 30 >> 1] = jsvGetFirstChild(HEAP32[$2 + 40 >> 2]);
    while (1) {
     if (HEAPU16[$2 + 30 >> 1]) {
      HEAP32[$2 + 24 >> 2] = jsvLock(HEAPU16[$2 + 30 >> 1]);
      HEAP32[$2 + 32 >> 2] = _jsvCountJsVarsUsedRecursive(HEAP32[$2 + 24 >> 2], HEAP8[$2 + 39 | 0] & 1) + HEAP32[$2 + 32 >> 2];
      label$12 : {
       if (jsvHasChildren(HEAP32[$2 + 40 >> 2]) & 1) {
        HEAP16[$2 + 30 >> 1] = jsvGetNextSibling(HEAP32[$2 + 24 >> 2]);
        break label$12;
       }
       HEAP16[$2 + 30 >> 1] = 0;
      }
      jsvUnLock(HEAP32[$2 + 24 >> 2]);
      continue;
     }
     break;
    }
    break label$7;
   }
   if (jsvIsFlatString(HEAP32[$2 + 40 >> 2]) & 1) {
    HEAP32[$2 + 32 >> 2] = jsvGetFlatStringBlocks(HEAP32[$2 + 40 >> 2]) + HEAP32[$2 + 32 >> 2];
   }
  }
  if (jsvHasCharacterData(HEAP32[$2 + 40 >> 2]) & 1) {
   HEAP16[$2 + 22 >> 1] = jsvGetLastChild(HEAP32[$2 + 40 >> 2]);
   while (1) {
    if (HEAPU16[$2 + 22 >> 1]) {
     HEAP32[$2 + 16 >> 2] = jsvLock(HEAPU16[$2 + 22 >> 1]);
     HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 32 >> 2] + 1;
     HEAP16[$2 + 22 >> 1] = jsvGetLastChild(HEAP32[$2 + 16 >> 2]);
     jsvUnLock(HEAP32[$2 + 16 >> 2]);
     continue;
    }
    break;
   }
  }
  label$18 : {
   if (!(jsvIsName(HEAP32[$2 + 40 >> 2]) & 1)) {
    break label$18;
   }
   if (jsvIsNameWithValue(HEAP32[$2 + 40 >> 2]) & 1) {
    break label$18;
   }
   if (!(jsvGetFirstChild(HEAP32[$2 + 40 >> 2]) & 65535)) {
    break label$18;
   }
   HEAP32[$2 + 12 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 40 >> 2]) & 65535);
   HEAP32[$2 + 32 >> 2] = _jsvCountJsVarsUsedRecursive(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 39 | 0] & 1) + HEAP32[$2 + 32 >> 2];
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
  }
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
 }
 global$0 = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}
function jsvGetString($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 + -64 | 0;
 global$0 = $3;
 HEAP32[$3 + 56 >> 2] = $0;
 HEAP32[$3 + 52 >> 2] = $1;
 HEAP32[$3 + 48 >> 2] = $2;
 HEAP32[$3 + 44 >> 2] = jsvGetConstString(HEAP32[$3 + 56 >> 2]);
 label$1 : {
  if (HEAP32[$3 + 44 >> 2]) {
   HEAP32[$3 + 48 >> 2] = HEAP32[$3 + 48 >> 2] + -1;
   HEAP32[$3 + 40 >> 2] = 0;
   while (1) {
    if (HEAP8[HEAP32[$3 + 44 >> 2] + HEAP32[$3 + 40 >> 2] | 0] ? HEAPU32[$3 + 40 >> 2] < HEAPU32[$3 + 48 >> 2] : 0) {
     HEAP8[HEAP32[$3 + 52 >> 2] + HEAP32[$3 + 40 >> 2] | 0] = HEAPU8[HEAP32[$3 + 44 >> 2] + HEAP32[$3 + 40 >> 2] | 0];
     HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 40 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP8[HEAP32[$3 + 52 >> 2] + HEAP32[$3 + 40 >> 2] | 0] = 0;
   HEAP32[$3 + 60 >> 2] = HEAP32[$3 + 40 >> 2];
   break label$1;
  }
  if (jsvIsInt(HEAP32[$3 + 56 >> 2]) & 1) {
   itostr(HEAP32[HEAP32[$3 + 56 >> 2] >> 2], HEAP32[$3 + 52 >> 2], 10);
   HEAP32[$3 + 60 >> 2] = strlen(HEAP32[$3 + 52 >> 2]);
   break label$1;
  }
  if (jsvIsFloat(HEAP32[$3 + 56 >> 2]) & 1) {
   $0 = HEAP32[$3 + 56 >> 2];
   $1 = HEAP32[$0 + 4 >> 2];
   wasm2js_scratch_store_i32(0, HEAP32[$0 >> 2]);
   wasm2js_scratch_store_i32(1, $1 | 0);
   ftoa_bounded(+wasm2js_scratch_load_f64(), HEAP32[$3 + 52 >> 2], HEAP32[$3 + 48 >> 2]);
   HEAP32[$3 + 60 >> 2] = strlen(HEAP32[$3 + 52 >> 2]);
   break label$1;
  }
  if (jsvHasCharacterData(HEAP32[$3 + 56 >> 2]) & 1) {
   HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 48 >> 2];
   jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 56 >> 2], 0);
   while (1) {
    if (jsvStringIteratorHasChar($3 + 16 | 0) & 1) {
     $0 = HEAP32[$3 + 36 >> 2];
     HEAP32[$3 + 36 >> 2] = $0 + -1;
     if ($0 >>> 0 <= 1) {
      HEAP8[HEAP32[$3 + 52 >> 2]] = 0;
      jsvStringIteratorFree($3 + 16 | 0);
      HEAP32[$3 + 60 >> 2] = HEAP32[$3 + 48 >> 2];
      break label$1;
     }
     $0 = $3 + 16 | 0;
     $1 = jsvStringIteratorGetChar($0);
     $2 = HEAP32[$3 + 52 >> 2];
     HEAP32[$3 + 52 >> 2] = $2 + 1;
     HEAP8[$2 | 0] = $1;
     jsvStringIteratorNext($0);
     continue;
    }
    break;
   }
   jsvStringIteratorFree($3 + 16 | 0);
   HEAP8[HEAP32[$3 + 52 >> 2]] = 0;
   HEAP32[$3 + 60 >> 2] = HEAP32[$3 + 48 >> 2] - HEAP32[$3 + 36 >> 2];
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvAsString(HEAP32[$3 + 56 >> 2]);
  if (HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 8 >> 2] = jsvGetStringChars(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 52 >> 2], HEAP32[$3 + 48 >> 2]);
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   HEAP32[$3 + 60 >> 2] = HEAP32[$3 + 8 >> 2];
   break label$1;
  }
  HEAP8[HEAP32[$3 + 52 >> 2]] = 0;
  jsExceptionHere(4, 2603, 0);
  HEAP32[$3 + 60 >> 2] = 0;
 }
 global$0 = $3 - -64 | 0;
 return HEAP32[$3 + 60 >> 2];
}
function jswGetSymbolListForObject($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (jsvIsNativeFunction(HEAP32[$1 + 8 >> 2]) & 1) {
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 39) {
    HEAP32[$1 + 12 >> 2] = 16489;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 40) {
    HEAP32[$1 + 12 >> 2] = 16498;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 41) {
    HEAP32[$1 + 12 >> 2] = 16516;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 23) {
    HEAP32[$1 + 12 >> 2] = 16552;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 42) {
    HEAP32[$1 + 12 >> 2] = 16615;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 43) {
    HEAP32[$1 + 12 >> 2] = 16624;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 44) {
    HEAP32[$1 + 12 >> 2] = 16633;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 45) {
    HEAP32[$1 + 12 >> 2] = 16642;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 46) {
    HEAP32[$1 + 12 >> 2] = 16660;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 47) {
    HEAP32[$1 + 12 >> 2] = 16687;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 48) {
    HEAP32[$1 + 12 >> 2] = 16714;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 49) {
    HEAP32[$1 + 12 >> 2] = 16723;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 30) {
    HEAP32[$1 + 12 >> 2] = 16732;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 32) {
    HEAP32[$1 + 12 >> 2] = 16759;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 50) {
    HEAP32[$1 + 12 >> 2] = 16777;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 34) {
    HEAP32[$1 + 12 >> 2] = 16795;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 35) {
    HEAP32[$1 + 12 >> 2] = 16813;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 51) {
    HEAP32[$1 + 12 >> 2] = 16840;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 52) {
    HEAP32[$1 + 12 >> 2] = 16858;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 53) {
    HEAP32[$1 + 12 >> 2] = 16867;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 37) {
    HEAP32[$1 + 12 >> 2] = 16885;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 54) {
    HEAP32[$1 + 12 >> 2] = 16894;
    break label$1;
   }
  }
  if (HEAP32[$1 + 8 >> 2] == HEAP32[23774]) {
   HEAP32[$1 + 12 >> 2] = 16480;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function TfLiteStatus_20tflite__ops__micro__elementwise___28anonymous_20namespace_29__GenericPrepare___28tflite__ops__micro__elementwise___28anonymous_20namespace_29__IsNumericSupportedType_28TfLiteType_29_29__28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 128 | 0;
 global$0 = $2;
 HEAP32[$2 + 120 >> 2] = $0;
 HEAP32[$2 + 116 >> 2] = $1;
 label$1 : {
  if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 116 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 120 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 120 >> 2];
   $3 = tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 116 >> 2]);
   HEAP32[$2 + 20 >> 2] = 1;
   HEAP32[$2 + 16 >> 2] = $3;
   HEAP32[$2 + 12 >> 2] = 47530;
   HEAP32[$2 + 8 >> 2] = 47514;
   HEAP32[$2 + 4 >> 2] = 39;
   HEAP32[$2 >> 2] = 47386;
   FUNCTION_TABLE[$0]($1, 47360, $2);
   HEAP32[$2 + 124 >> 2] = 1;
   break label$1;
  }
  if ((tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 116 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 120 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 120 >> 2];
   $3 = tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 116 >> 2]);
   HEAP32[$2 + 52 >> 2] = 1;
   HEAP32[$2 + 48 >> 2] = $3;
   HEAP32[$2 + 44 >> 2] = 47530;
   HEAP32[$2 + 40 >> 2] = 47532;
   HEAP32[$2 + 36 >> 2] = 40;
   HEAP32[$2 + 32 >> 2] = 47386;
   FUNCTION_TABLE[$0]($1, 47360, $2 + 32 | 0);
   HEAP32[$2 + 124 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 112 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 120 >> 2], HEAP32[$2 + 116 >> 2], 0);
  HEAP32[$2 + 108 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 120 >> 2], HEAP32[$2 + 116 >> 2]);
  if (HEAP32[HEAP32[$2 + 112 >> 2] >> 2] != HEAP32[HEAP32[$2 + 108 >> 2] >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 120 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 120 >> 2];
   $3 = HEAP32[HEAP32[$2 + 112 >> 2] >> 2];
   HEAP32[$2 + 84 >> 2] = HEAP32[HEAP32[$2 + 108 >> 2] >> 2];
   HEAP32[$2 + 80 >> 2] = $3;
   HEAP32[$2 + 76 >> 2] = 47549;
   HEAP32[$2 + 72 >> 2] = 47488;
   HEAP32[$2 + 68 >> 2] = 43;
   HEAP32[$2 + 64 >> 2] = 47386;
   FUNCTION_TABLE[$0]($1, 47360, $2 - -64 | 0);
   HEAP32[$2 + 124 >> 2] = 1;
   break label$1;
  }
  if (!HEAP32[HEAP32[$2 + 112 >> 2] >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 120 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 120 >> 2];
   $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 112 >> 2] >> 2]);
   HEAP32[$2 + 100 >> 2] = HEAP32[HEAP32[$2 + 112 >> 2] >> 2];
   HEAP32[$2 + 96 >> 2] = $3;
   FUNCTION_TABLE[$0]($1, 47562, $2 + 96 | 0);
   HEAP32[$2 + 124 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 124 >> 2] = 0;
 }
 global$0 = $2 + 128 | 0;
 return HEAP32[$2 + 124 >> 2];
}
function jswrap_espruino_nativeCall($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 192 | 0;
 global$0 = $3;
 HEAP32[$3 + 184 >> 2] = $0;
 HEAP32[$3 + 180 >> 2] = $1;
 HEAP32[$3 + 176 >> 2] = $2;
 HEAP32[$3 + 172 >> 2] = 0;
 label$1 : {
  if (!(jsvIsUndefined(HEAP32[$3 + 180 >> 2]) & 1)) {
   label$3 : {
    if (jsvIsString(HEAP32[$3 + 180 >> 2]) & 1) {
     HEAP32[$3 + 36 >> 2] = jslSetLex($3 + 40 | 0);
     jslInit(HEAP32[$3 + 180 >> 2]);
     HEAP8[$3 + 31 | 0] = 1;
     HEAP32[$3 + 24 >> 2] = 0;
     HEAP32[$3 + 32 >> 2] = nativeCallGetCType();
     label$5 : {
      if (HEAP32[$3 + 32 >> 2] >= 0) {
       $0 = HEAP32[$3 + 32 >> 2];
       $1 = HEAP32[$3 + 24 >> 2];
       HEAP32[$3 + 24 >> 2] = $1 + 1;
       HEAP32[$3 + 172 >> 2] = HEAP32[$3 + 172 >> 2] | $0 << Math_imul($1, 3);
       break label$5;
      }
      HEAP8[$3 + 31 | 0] = 0;
     }
     if (HEAP8[$3 + 31 | 0] & 1) {
      HEAP8[$3 + 31 | 0] = jslMatch(40) & 1;
     }
     while (1) {
      $0 = 0;
      label$9 : {
       if (!(HEAP8[$3 + 31 | 0] & 1)) {
        break label$9;
       }
       $0 = 0;
       if (!HEAP16[$3 + 42 >> 1]) {
        break label$9;
       }
       $0 = HEAP16[$3 + 42 >> 1] != 41;
      }
      if ($0) {
       HEAP32[$3 + 32 >> 2] = nativeCallGetCType();
       label$11 : {
        if (HEAP32[$3 + 32 >> 2] >= 0) {
         $0 = HEAP32[$3 + 32 >> 2];
         $1 = HEAP32[$3 + 24 >> 2];
         HEAP32[$3 + 24 >> 2] = $1 + 1;
         HEAP32[$3 + 172 >> 2] = HEAP32[$3 + 172 >> 2] | $0 << Math_imul($1, 3);
         if (HEAP16[$3 + 42 >> 1] != 41) {
          HEAP8[$3 + 31 | 0] = jslMatch(44) & 1;
         }
         break label$11;
        }
        HEAP8[$3 + 31 | 0] = 0;
       }
       continue;
      }
      break;
     }
     if (HEAP8[$3 + 31 | 0] & 1) {
      HEAP8[$3 + 31 | 0] = jslMatch(41) & 1;
     }
     jslKill();
     jslSetLex(HEAP32[$3 + 36 >> 2]);
     if (HEAP32[$3 + 172 >> 2] & -65536) {
      HEAP8[$3 + 31 | 0] = 0;
     }
     if (!(HEAP8[$3 + 31 | 0] & 1)) {
      HEAP32[$3 >> 2] = HEAP32[$3 + 24 >> 2];
      jsExceptionHere(1, 31622, $3);
      HEAP32[$3 + 188 >> 2] = 0;
      break label$1;
     }
     break label$3;
    }
    jsExceptionHere(1, 31668, 0);
    HEAP32[$3 + 188 >> 2] = 0;
    break label$1;
   }
  }
  HEAP32[$3 + 20 >> 2] = jsvNewNativeFunction(HEAP32[$3 + 184 >> 2], HEAP32[$3 + 172 >> 2] & 65535);
  if (HEAP32[$3 + 176 >> 2]) {
   HEAP32[$3 + 16 >> 2] = jsvAsFlatString(HEAP32[$3 + 176 >> 2]);
   jsvUnLock2(jsvAddNamedChild(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2], 31686), HEAP32[$3 + 16 >> 2]);
  }
  HEAP32[$3 + 188 >> 2] = HEAP32[$3 + 20 >> 2];
 }
 global$0 = $3 + 192 | 0;
 return HEAP32[$3 + 188 >> 2];
}
function jsiDumpObjectState($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 + -64 | 0;
 global$0 = $4;
 $5 = $4 + 40 | 0;
 HEAP32[$4 + 60 >> 2] = $0;
 HEAP32[$4 + 56 >> 2] = $1;
 HEAP32[$4 + 52 >> 2] = $2;
 HEAP32[$4 + 48 >> 2] = $3;
 HEAP32[$4 + 44 >> 2] = jsvGetInternalFunctionCheckerFor(HEAP32[$4 + 48 >> 2]);
 jsvObjectIteratorNew($5, HEAP32[$4 + 48 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue($4 + 40 | 0) & 1) {
   $0 = $4 + 40 | 0;
   HEAP32[$4 + 36 >> 2] = jsvObjectIteratorGetKey($0);
   HEAP32[$4 + 32 >> 2] = jsvObjectIteratorGetValue($0);
   label$3 : {
    if (HEAP32[$4 + 44 >> 2]) {
     if (FUNCTION_TABLE[HEAP32[$4 + 44 >> 2]](HEAP32[$4 + 36 >> 2]) & 1) {
      break label$3;
     }
    }
    label$5 : {
     if (jsvIsStringEqual(HEAP32[$4 + 36 >> 2], 5308) & 1) {
      HEAP32[$4 + 28 >> 2] = jsvNewFromStringVar(HEAP32[$4 + 52 >> 2], 0, 2147483647);
      if (HEAP32[$4 + 28 >> 2]) {
       jsvAppendString(HEAP32[$4 + 28 >> 2], 5318);
       jsiDumpObjectState(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 28 >> 2], HEAP32[$4 + 32 >> 2]);
       jsvUnLock(HEAP32[$4 + 28 >> 2]);
      }
      break label$5;
     }
     label$8 : {
      if (jsvIsStringEqualOrStartsWith(HEAP32[$4 + 36 >> 2], 5329, 1) & 1) {
       if (jsvIsArray(HEAP32[$4 + 32 >> 2]) & 1) {
        jsvObjectIteratorNew($4 + 24 | 0, HEAP32[$4 + 32 >> 2]);
        while (1) {
         if (jsvObjectIteratorHasValue($4 + 24 | 0) & 1) {
          $0 = $4 + 24 | 0;
          HEAP32[$4 + 20 >> 2] = jsvObjectIteratorGetValue($0);
          jsiDumpEvent(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 52 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 20 >> 2]);
          jsvUnLock(HEAP32[$4 + 20 >> 2]);
          jsvObjectIteratorNext($0);
          continue;
         }
         break;
        }
        jsvObjectIteratorFree($4 + 24 | 0);
        break label$8;
       }
       jsiDumpEvent(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 52 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 32 >> 2]);
       break label$8;
      }
      if (!(jsvIsNative(HEAP32[$4 + 32 >> 2]) & 1)) {
       $0 = HEAP32[$4 + 60 >> 2];
       $1 = HEAP32[$4 + 56 >> 2];
       $2 = HEAP32[$4 + 52 >> 2];
       HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 36 >> 2];
       HEAP32[$4 >> 2] = $2;
       cbprintf($0, $1, 5333, $4);
       jsiDumpJSON(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 32 >> 2], 0);
       FUNCTION_TABLE[HEAP32[$4 + 60 >> 2]](5342, HEAP32[$4 + 56 >> 2]);
      }
     }
    }
   }
   $0 = $4 + 40 | 0;
   jsvUnLock2(HEAP32[$4 + 32 >> 2], HEAP32[$4 + 36 >> 2]);
   jsvObjectIteratorNext($0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree($4 + 40 | 0);
 global$0 = $4 - -64 | 0;
}
function jsvNewFlatStringOfLength($0) {
 var $1 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 HEAP32[$1 + 40 >> 2] = $0;
 HEAP8[$1 + 39 | 0] = 1;
 HEAP32[$1 + 32 >> 2] = (HEAP32[$1 + 40 >> 2] + 15 >>> 4) + 1;
 HEAP32[$1 + 28 >> 2] = 0;
 label$1 : {
  if (HEAP32[13770]) {
   HEAP8[95095] = HEAPU8[95095] | 32;
   HEAP32[$1 + 44 >> 2] = 0;
   break label$1;
  }
  while (1) {
   HEAP8[$1 + 27 | 0] = 1;
   while (1) {
    if (HEAP8[$1 + 27 | 0] & 1) {
     HEAP8[$1 + 27 | 0] = 0;
     HEAP8[55077] = 0;
     HEAP16[$1 + 24 >> 1] = 0;
     HEAP16[$1 + 22 >> 1] = HEAPU16[27542];
     HEAP16[$1 + 20 >> 1] = HEAPU16[$1 + 22 >> 1];
     HEAP32[$1 + 16 >> 2] = 1;
     while (1) {
      label$7 : {
       if (!((HEAPU16[$1 + 22 >> 1] ? HEAPU8[55077] ^ -1 : 0) & 1)) {
        break label$7;
       }
       HEAP32[$1 + 12 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 22 >> 1]);
       HEAP16[$1 + 10 >> 1] = jsvGetNextSibling(HEAP32[$1 + 12 >> 2]);
       label$10 : {
        if (HEAPU16[$1 + 10 >> 1] == (HEAPU16[$1 + 22 >> 1] + 1 | 0)) {
         HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 16 >> 2] + 1;
         if (HEAPU32[$1 + 16 >> 2] >= HEAPU32[$1 + 32 >> 2]) {
          HEAP32[$1 + 4 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 10 >> 1]);
          HEAP16[$1 + 2 >> 1] = jsvGetNextSibling(HEAP32[$1 + 4 >> 2]);
          if (!(HEAP8[55077] & 1)) {
           label$14 : {
            if (HEAPU16[$1 + 24 >> 1]) {
             jsvSetNextSibling(jsvGetAddressOf(HEAPU16[$1 + 24 >> 1]), HEAPU16[$1 + 2 >> 1]);
             break label$14;
            }
            HEAP16[27542] = HEAPU16[$1 + 2 >> 1];
           }
           HEAP32[$1 + 28 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 20 >> 1]);
           jsvResetVariable(HEAP32[$1 + 28 >> 2], 38);
           HEAP32[HEAP32[$1 + 28 >> 2] >> 2] = HEAP32[$1 + 40 >> 2];
          }
          if (HEAP32[$1 + 28 >> 2]) {
           break label$7;
          }
         }
         break label$10;
        }
        HEAP32[$1 + 16 >> 2] = 1;
        HEAP16[$1 + 24 >> 1] = HEAPU16[$1 + 22 >> 1];
        HEAP16[$1 + 20 >> 1] = HEAPU16[$1 + 10 >> 1];
       }
       HEAP16[$1 + 22 >> 1] = HEAPU16[$1 + 10 >> 1];
       continue;
      }
      break;
     }
     if (HEAP8[55077] & 1) {
      HEAP8[$1 + 27 | 0] = 1;
     }
     continue;
    }
    break;
   }
   if (!(HEAP32[$1 + 28 >> 2] | !(HEAP8[$1 + 39 | 0] & 1))) {
    HEAP8[$1 + 39 | 0] = 0;
    jsvGarbageCollect();
    continue;
   }
   break;
  }
  if (!HEAP32[$1 + 28 >> 2]) {
   HEAP32[$1 + 44 >> 2] = 0;
   break label$1;
  }
  memset(HEAP32[$1 + 28 >> 2] + 16 | 0, 0, HEAP32[$1 + 32 >> 2] - 1 << 4);
  HEAP8[55077] = 1;
  HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 28 >> 2];
 }
 global$0 = $1 + 48 | 0;
 return HEAP32[$1 + 44 >> 2];
}
function jswrap_e_dumpVariables() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 96 | 0;
 global$0 = $0;
 HEAP32[$0 + 92 >> 2] = 0;
 jsiConsolePrintf(32124, 0);
 HEAP32[$0 + 88 >> 2] = 0;
 while (1) {
  if (HEAPU32[$0 + 88 >> 2] < HEAPU32[13337]) {
   HEAP16[$0 + 86 >> 1] = HEAP32[$0 + 88 >> 2] + 1;
   HEAP32[$0 + 80 >> 2] = _jsvGetAddressOf(HEAPU16[$0 + 86 >> 1]);
   label$3 : {
    if (!(HEAPU16[HEAP32[$0 + 80 >> 2] + 14 >> 1] & 63)) {
     break label$3;
    }
    if (jsvIsStringExt(HEAP32[$0 + 80 >> 2]) & 1) {
     break label$3;
    }
    HEAP32[$0 + 76 >> 2] = 1;
    label$4 : {
     if (jsvIsFlatString(HEAP32[$0 + 80 >> 2]) & 1) {
      HEAP32[$0 + 72 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 80 >> 2]);
      HEAP32[$0 + 88 >> 2] = HEAP32[$0 + 72 >> 2] + HEAP32[$0 + 88 >> 2];
      HEAP32[$0 + 76 >> 2] = HEAP32[$0 + 72 >> 2] + HEAP32[$0 + 76 >> 2];
      break label$4;
     }
     if (jsvHasCharacterData(HEAP32[$0 + 80 >> 2]) & 1) {
      HEAP16[$0 + 70 >> 1] = jsvGetLastChild(HEAP32[$0 + 80 >> 2]);
      while (1) {
       if (HEAPU16[$0 + 70 >> 1]) {
        HEAP32[$0 + 64 >> 2] = jsvLock(HEAPU16[$0 + 70 >> 1]);
        HEAP32[$0 + 76 >> 2] = HEAP32[$0 + 76 >> 2] + 1;
        HEAP16[$0 + 70 >> 1] = jsvGetLastChild(HEAP32[$0 + 64 >> 2]);
        jsvUnLock(HEAP32[$0 + 64 >> 2]);
        continue;
       }
       break;
      }
     }
    }
    $1 = HEAPU16[$0 + 86 >> 1];
    HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 76 >> 2];
    HEAP32[$0 + 48 >> 2] = $1;
    jsiConsolePrintf(32148, $0 + 48 | 0);
    label$9 : {
     if (jsvIsName(HEAP32[$0 + 80 >> 2]) & 1) {
      HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 80 >> 2];
      jsiConsolePrintf(32155, $0 + 16 | 0);
      break label$9;
     }
     HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 80 >> 2];
     jsiConsolePrintf(32159, $0 + 32 | 0);
    }
    label$11 : {
     if (!(jsvHasSingleChild(HEAP32[$0 + 80 >> 2]) & 1)) {
      if (!(jsvHasChildren(HEAP32[$0 + 80 >> 2]) & 1)) {
       break label$11;
      }
     }
     HEAP16[$0 + 62 >> 1] = jsvGetFirstChild(HEAP32[$0 + 80 >> 2]);
     while (1) {
      if (HEAPU16[$0 + 62 >> 1]) {
       HEAP32[$0 + 56 >> 2] = jsvLock(HEAPU16[$0 + 62 >> 1]);
       HEAP32[$0 >> 2] = HEAPU16[$0 + 62 >> 1];
       jsiConsolePrintf(32161, $0);
       label$15 : {
        if (jsvHasChildren(HEAP32[$0 + 80 >> 2]) & 1) {
         HEAP16[$0 + 62 >> 1] = jsvGetNextSibling(HEAP32[$0 + 56 >> 2]);
         break label$15;
        }
        HEAP16[$0 + 62 >> 1] = 0;
       }
       jsvUnLock(HEAP32[$0 + 56 >> 2]);
       continue;
      }
      break;
     }
    }
    jsiConsolePrintString(32116);
   }
   HEAP32[$0 + 88 >> 2] = HEAP32[$0 + 88 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $0 + 96 | 0;
}
function _jswrap_drawImageLayerGetPixel($0, $1) {
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 HEAP32[$2 + 32 >> 2] = HEAP32[HEAP32[$2 + 40 >> 2] + 136 >> 2] + 127;
 HEAP32[$2 + 28 >> 2] = HEAP32[HEAP32[$2 + 40 >> 2] + 140 >> 2] + 127;
 label$1 : {
  if (!(HEAP32[$2 + 32 >> 2] < 0 | HEAP32[$2 + 28 >> 2] < 0 | (HEAP32[$2 + 32 >> 2] >= HEAP32[HEAP32[$2 + 40 >> 2] + 112 >> 2] | HEAP32[$2 + 28 >> 2] >= HEAP32[HEAP32[$2 + 40 >> 2] + 116 >> 2]))) {
   HEAP32[$2 + 24 >> 2] = 0;
   HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 32 >> 2] >> 8;
   HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 28 >> 2] >> 8;
   label$3 : {
    if (HEAP32[HEAP32[$2 + 40 >> 2] + 44 >> 2] == 8) {
     jsvStringIteratorGoto(HEAP32[$2 + 40 >> 2] + 92 | 0, HEAP32[HEAP32[$2 + 40 >> 2] + 56 >> 2], (HEAP32[HEAP32[$2 + 40 >> 2] + 60 >> 2] + HEAP32[$2 + 20 >> 2] | 0) + Math_imul(HEAP32[$2 + 16 >> 2], HEAP32[HEAP32[$2 + 40 >> 2] + 80 >> 2]) | 0);
     HEAP32[$2 + 24 >> 2] = jsvStringIteratorGetChar(HEAP32[$2 + 40 >> 2] + 92 | 0) & 255;
     break label$3;
    }
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 20 >> 2] + Math_imul(HEAP32[$2 + 16 >> 2], HEAP32[HEAP32[$2 + 40 >> 2] + 36 >> 2]);
    HEAP32[$2 + 8 >> 2] = Math_imul(HEAP32[$2 + 12 >> 2], HEAP32[HEAP32[$2 + 40 >> 2] + 44 >> 2]);
    jsvStringIteratorGoto(HEAP32[$2 + 40 >> 2] + 92 | 0, HEAP32[HEAP32[$2 + 40 >> 2] + 56 >> 2], HEAP32[HEAP32[$2 + 40 >> 2] + 60 >> 2] + (HEAP32[$2 + 8 >> 2] >> 3) | 0);
    HEAP32[$2 + 24 >> 2] = jsvStringIteratorGetChar(HEAP32[$2 + 40 >> 2] + 92 | 0) & 255;
    HEAP32[$2 + 4 >> 2] = 8;
    while (1) {
     if (HEAP32[$2 + 4 >> 2] < HEAP32[HEAP32[$2 + 40 >> 2] + 44 >> 2]) {
      jsvStringIteratorNext(HEAP32[$2 + 40 >> 2] + 92 | 0);
      HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] << 8 | jsvStringIteratorGetChar(HEAP32[$2 + 40 >> 2] + 92 | 0) & 255;
      HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 8;
      continue;
     }
     break;
    }
    HEAP32[$2 + 24 >> 2] = HEAP32[HEAP32[$2 + 40 >> 2] + 72 >> 2] & HEAP32[$2 + 24 >> 2] >>> Math_imul(HEAP32[HEAP32[$2 + 40 >> 2] + 44 >> 2], HEAP32[HEAP32[$2 + 40 >> 2] + 76 >> 2] - (HEAP32[$2 + 12 >> 2] & HEAP32[HEAP32[$2 + 40 >> 2] + 76 >> 2]) | 0);
   }
   if (HEAP32[HEAP32[$2 + 40 >> 2] + 52 >> 2] != HEAP32[$2 + 24 >> 2]) {
    if (HEAP32[HEAP32[$2 + 40 >> 2] + 64 >> 2]) {
     HEAP32[$2 + 24 >> 2] = HEAPU16[HEAP32[HEAP32[$2 + 40 >> 2] + 64 >> 2] + ((HEAP32[$2 + 24 >> 2] & HEAP32[HEAP32[$2 + 40 >> 2] + 68 >> 2]) << 1) >> 1];
    }
    HEAP32[HEAP32[$2 + 36 >> 2] >> 2] = HEAP32[$2 + 24 >> 2];
    HEAP8[$2 + 47 | 0] = 1;
    break label$1;
   }
  }
  HEAP8[$2 + 47 | 0] = 0;
 }
 global$0 = $2 + 48 | 0;
 return HEAP8[$2 + 47 | 0] & 1;
}
function jswrap_atob($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 96 | 0;
 global$0 = $1;
 HEAP32[$1 + 88 >> 2] = $0;
 label$1 : {
  if (!(jsvIsString(HEAP32[$1 + 88 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 88 >> 2];
   jsExceptionHere(1, 32943, $1);
   HEAP32[$1 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 84 >> 2] = jsvGetStringLength(HEAP32[$1 + 88 >> 2]);
  HEAP32[$1 + 80 >> 2] = Math_imul(HEAP32[$1 + 84 >> 2], 3) >>> 2;
  if ((jsvGetCharInString(HEAP32[$1 + 88 >> 2], HEAP32[$1 + 84 >> 2] - 1 | 0) & 255) == 61) {
   HEAP32[$1 + 80 >> 2] = HEAP32[$1 + 80 >> 2] + -1;
  }
  if ((jsvGetCharInString(HEAP32[$1 + 88 >> 2], HEAP32[$1 + 84 >> 2] - 2 | 0) & 255) == 61) {
   HEAP32[$1 + 80 >> 2] = HEAP32[$1 + 80 >> 2] + -1;
  }
  HEAP32[$1 + 76 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 80 >> 2], 0);
  if (!HEAP32[$1 + 76 >> 2]) {
   HEAP32[$1 + 92 >> 2] = 0;
   break label$1;
  }
  $0 = $1 + 32 | 0;
  jsvStringIteratorNew($1 + 56 | 0, HEAP32[$1 + 88 >> 2], 0);
  jsvStringIteratorNew($0, HEAP32[$1 + 76 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar($1 + 56 | 0) & 1) {
    $0 = isWhitespace(jsvStringIteratorGetChar($1 + 56 | 0) << 24 >> 24);
   } else {
    $0 = 0;
   }
   if ($0 & 1) {
    jsvStringIteratorNext($1 + 56 | 0);
    continue;
   }
   break;
  }
  while (1) {
   if (jsvStringIteratorHasChar($1 + 56 | 0) & 1) {
    $0 = jspIsInterrupted() ^ -1;
   } else {
    $0 = 0;
   }
   if ($0 & 1) {
    HEAP32[$1 + 28 >> 2] = 0;
    HEAP32[$1 + 20 >> 2] = 0;
    HEAP32[$1 + 24 >> 2] = 0;
    while (1) {
     if (HEAP32[$1 + 24 >> 2] < 4) {
      if (jsvStringIteratorHasChar($1 + 56 | 0) & 1) {
       HEAP32[$1 + 16 >> 2] = jswrap_atob_decode(jsvStringIteratorGetCharAndNext($1 + 56 | 0) << 24 >> 24);
       if (HEAP32[$1 + 16 >> 2] >= 0) {
        HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 28 >> 2] | HEAP32[$1 + 16 >> 2] << Math_imul(3 - HEAP32[$1 + 24 >> 2] | 0, 6);
        HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 24 >> 2];
       }
      }
      HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + 1;
      continue;
     }
     break;
    }
    if (HEAP32[$1 + 20 >> 2] > 0) {
     jsvStringIteratorSetCharAndNext($1 + 32 | 0, HEAP32[$1 + 28 >> 2] >>> 16 << 24 >> 24);
    }
    if (HEAP32[$1 + 20 >> 2] > 1) {
     jsvStringIteratorSetCharAndNext($1 + 32 | 0, HEAP32[$1 + 28 >> 2] >>> 8 << 24 >> 24);
    }
    if (HEAP32[$1 + 20 >> 2] > 2) {
     jsvStringIteratorSetCharAndNext($1 + 32 | 0, HEAP32[$1 + 28 >> 2] << 24 >> 24);
    }
    continue;
   }
   break;
  }
  $0 = $1 + 32 | 0;
  jsvStringIteratorFree($1 + 56 | 0);
  jsvStringIteratorFree($0);
  HEAP32[$1 + 92 >> 2] = HEAP32[$1 + 76 >> 2];
 }
 global$0 = $1 + 96 | 0;
 return HEAP32[$1 + 92 >> 2];
}
function tflite__strided_slice__StridedSlicePadIndices_28tflite__StridedSliceParams__2c_20int_29($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = 4;
 if (HEAP32[$1 + 24 >> 2] > 4) {
  abort();
  abort();
 }
 if (HEAP32[$1 + 24 >> 2] < HEAP8[HEAP32[$1 + 28 >> 2]]) {
  abort();
  abort();
 }
 if (HEAP8[HEAP32[$1 + 28 >> 2]] != HEAP8[HEAP32[$1 + 28 >> 2] + 10 | 0]) {
  abort();
  abort();
 }
 if (HEAP8[HEAP32[$1 + 28 >> 2] + 10 | 0] != HEAP8[HEAP32[$1 + 28 >> 2] + 20 | 0]) {
  abort();
  abort();
 }
 HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 24 >> 2] - HEAP8[HEAP32[$1 + 28 >> 2]];
 HEAP32[$1 + 16 >> 2] = HEAP8[HEAP32[$1 + 28 >> 2]] - 1;
 while (1) {
  if (HEAP32[$1 + 16 >> 2] >= 0) {
   HEAP16[(HEAP32[$1 + 28 >> 2] + 22 | 0) + (HEAP32[$1 + 16 >> 2] + HEAP32[$1 + 20 >> 2] << 1) >> 1] = HEAPU16[(HEAP32[$1 + 28 >> 2] + 22 | 0) + (HEAP32[$1 + 16 >> 2] << 1) >> 1];
   HEAP16[(HEAP32[$1 + 28 >> 2] + 2 | 0) + (HEAP32[$1 + 16 >> 2] + HEAP32[$1 + 20 >> 2] << 1) >> 1] = HEAPU16[(HEAP32[$1 + 28 >> 2] + 2 | 0) + (HEAP32[$1 + 16 >> 2] << 1) >> 1];
   HEAP16[(HEAP32[$1 + 28 >> 2] + 12 | 0) + (HEAP32[$1 + 16 >> 2] + HEAP32[$1 + 20 >> 2] << 1) >> 1] = HEAPU16[(HEAP32[$1 + 28 >> 2] + 12 | 0) + (HEAP32[$1 + 16 >> 2] << 1) >> 1];
   HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 16 >> 2] + -1;
   continue;
  }
  break;
 }
 HEAP32[$1 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 12 >> 2] < HEAP32[$1 + 20 >> 2]) {
   HEAP16[(HEAP32[$1 + 28 >> 2] + 2 | 0) + (HEAP32[$1 + 12 >> 2] << 1) >> 1] = 0;
   HEAP16[(HEAP32[$1 + 28 >> 2] + 12 | 0) + (HEAP32[$1 + 12 >> 2] << 1) >> 1] = 1;
   HEAP16[(HEAP32[$1 + 28 >> 2] + 22 | 0) + (HEAP32[$1 + 12 >> 2] << 1) >> 1] = 1;
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 $0 = HEAP32[$1 + 28 >> 2];
 HEAP16[$0 + 38 >> 1] = HEAP16[$0 + 38 >> 1] << HEAP32[$1 + 20 >> 2];
 $0 = HEAP32[$1 + 28 >> 2];
 HEAP16[$0 + 32 >> 1] = HEAP16[$0 + 32 >> 1] << HEAP32[$1 + 20 >> 2];
 $0 = HEAP32[$1 + 28 >> 2];
 HEAP16[$0 + 36 >> 1] = HEAP16[$0 + 36 >> 1] << HEAP32[$1 + 20 >> 2];
 $0 = HEAP32[$1 + 28 >> 2];
 HEAP16[$0 + 30 >> 1] = HEAP16[$0 + 30 >> 1] << HEAP32[$1 + 20 >> 2];
 $0 = HEAP32[$1 + 28 >> 2];
 HEAP16[$0 + 34 >> 1] = HEAP16[$0 + 34 >> 1] << HEAP32[$1 + 20 >> 2];
 $0 = HEAP32[$1 + 28 >> 2];
 HEAP16[$0 + 30 >> 1] = HEAP16[$0 + 30 >> 1] | (1 << HEAP32[$1 + 20 >> 2]) - 1;
 $0 = HEAP32[$1 + 28 >> 2];
 HEAP16[$0 + 34 >> 1] = HEAP16[$0 + 34 >> 1] | (1 << HEAP32[$1 + 20 >> 2]) - 1;
 HEAP8[HEAP32[$1 + 28 >> 2]] = HEAP32[$1 + 24 >> 2];
 HEAP8[HEAP32[$1 + 28 >> 2] + 10 | 0] = HEAP32[$1 + 24 >> 2];
 HEAP8[HEAP32[$1 + 28 >> 2] + 20 | 0] = HEAP32[$1 + 24 >> 2];
 global$0 = $1 + 32 | 0;
}
function jswrap_string_match($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1 : {
  if (!(jsvIsString(HEAP32[$2 + 40 >> 2]) & 1)) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  if (jsvIsUndefined(HEAP32[$2 + 36 >> 2]) & 1) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  if (jsvIsInstanceOf(HEAP32[$2 + 36 >> 2]) & 1) {
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 36 >> 2], 37412, jsvNewFromInteger(0));
   HEAP32[$2 + 32 >> 2] = jswrap_regexp_exec(HEAP32[$2 + 36 >> 2], HEAP32[$2 + 40 >> 2]);
   if (!(jswrap_regexp_hasFlag(HEAP32[$2 + 36 >> 2], 103) & 1)) {
    HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
    break label$1;
   }
   HEAP32[$2 + 28 >> 2] = jsvNewWithFlags(3);
   if (!HEAP32[$2 + 28 >> 2]) {
    HEAP32[$2 + 44 >> 2] = 0;
    break label$1;
   }
   while (1) {
    if (HEAP32[$2 + 32 >> 2]) {
     $0 = jsvIsNull(HEAP32[$2 + 32 >> 2]) ^ -1;
    } else {
     $0 = 0;
    }
    if ($0 & 1) {
     HEAP32[$2 + 24 >> 2] = jsvGetArrayItem(HEAP32[$2 + 32 >> 2], 0);
     HEAP32[$2 + 20 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$2 + 32 >> 2], 37422, 0));
     HEAP32[$2 + 16 >> 2] = jsvGetStringLength(HEAP32[$2 + 24 >> 2]);
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 20 >> 2] + HEAP32[$2 + 16 >> 2];
     jsvArrayPushAndUnLock(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]);
     jsvUnLock(HEAP32[$2 + 32 >> 2]);
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 36 >> 2], 37412, jsvNewFromInteger(HEAP32[$2 + 12 >> 2]));
     HEAP32[$2 + 32 >> 2] = jswrap_regexp_exec(HEAP32[$2 + 36 >> 2], HEAP32[$2 + 40 >> 2]);
     continue;
    }
    break;
   }
   jsvUnLock(HEAP32[$2 + 32 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 36 >> 2], 37412, jsvNewFromInteger(0));
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 28 >> 2];
   break label$1;
  }
  HEAP32[$2 + 36 >> 2] = jsvAsString(HEAP32[$2 + 36 >> 2]);
  HEAP32[$2 + 8 >> 2] = jswrap_string_indexOf(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 0, 0);
  if (HEAP32[$2 + 8 >> 2] >= 0) {
   HEAP32[$2 + 4 >> 2] = jsvNewWithFlags(3);
   if (!HEAP32[$2 + 4 >> 2]) {
    jsvUnLock(HEAP32[$2 + 36 >> 2]);
    HEAP32[$2 + 44 >> 2] = 0;
    break label$1;
   }
   jsvArrayPush(HEAP32[$2 + 4 >> 2], HEAP32[$2 + 36 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 4 >> 2], 37422, jsvNewFromInteger(HEAP32[$2 + 8 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 4 >> 2], 37428, HEAP32[$2 + 36 >> 2]);
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 4 >> 2];
   break label$1;
  }
  jsvUnLock(HEAP32[$2 + 36 >> 2]);
  HEAP32[$2 + 44 >> 2] = jsvNewWithFlags(2);
 }
 global$0 = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}
function tflite__ops__micro__add__CalculateOpData_28TfLiteContext__2c_20TfLiteAddParams__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20tflite__ops__micro__add__OpData__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = Math_fround(0);
 $6 = global$0 + -64 | 0;
 global$0 = $6;
 HEAP32[$6 + 60 >> 2] = $0;
 HEAP32[$6 + 56 >> 2] = $1;
 HEAP32[$6 + 52 >> 2] = $2;
 HEAP32[$6 + 48 >> 2] = $3;
 HEAP32[$6 + 44 >> 2] = $4;
 HEAP32[$6 + 40 >> 2] = $5;
 $0 = tflite__HaveSameShapes_28TfLiteTensor_20const__2c_20TfLiteTensor_20const__29(HEAP32[$6 + 52 >> 2], HEAP32[$6 + 48 >> 2]) ^ -1;
 HEAP8[HEAP32[$6 + 40 >> 2]] = $0 & 1;
 if (!(HEAP32[HEAP32[$6 + 44 >> 2] >> 2] != 9 ? HEAP32[HEAP32[$6 + 44 >> 2] >> 2] != 3 : 0)) {
  HEAP32[HEAP32[$6 + 40 >> 2] + 40 >> 2] = 0 - HEAP32[HEAP32[$6 + 52 >> 2] + 16 >> 2];
  HEAP32[HEAP32[$6 + 40 >> 2] + 44 >> 2] = 0 - HEAP32[HEAP32[$6 + 48 >> 2] + 16 >> 2];
  HEAP32[HEAP32[$6 + 40 >> 2] + 48 >> 2] = HEAP32[HEAP32[$6 + 44 >> 2] + 16 >> 2];
  HEAP32[HEAP32[$6 + 40 >> 2] + 36 >> 2] = 20;
  $7 = HEAPF32[float_20const__20std____2__max_float__28float_20const__2c_20float_20const__29(HEAP32[$6 + 52 >> 2] + 12 | 0, HEAP32[$6 + 48 >> 2] + 12 | 0) >> 2];
  HEAPF64[$6 + 32 >> 3] = Math_fround($7 + $7);
  HEAPF64[$6 + 24 >> 3] = +HEAPF32[HEAP32[$6 + 52 >> 2] + 12 >> 2] / HEAPF64[$6 + 32 >> 3];
  HEAPF64[$6 + 16 >> 3] = +HEAPF32[HEAP32[$6 + 48 >> 2] + 12 >> 2] / HEAPF64[$6 + 32 >> 3];
  HEAPF64[$6 + 8 >> 3] = HEAPF64[$6 + 32 >> 3] / +Math_fround(Math_fround(1 << HEAP32[HEAP32[$6 + 40 >> 2] + 36 >> 2]) * HEAPF32[HEAP32[$6 + 44 >> 2] + 12 >> 2]);
  tflite__QuantizeMultiplierSmallerThanOneExp_28double_2c_20int__2c_20int__29(HEAPF64[$6 + 24 >> 3], HEAP32[$6 + 40 >> 2] + 20 | 0, HEAP32[$6 + 40 >> 2] + 4 | 0);
  tflite__QuantizeMultiplierSmallerThanOneExp_28double_2c_20int__2c_20int__29(HEAPF64[$6 + 16 >> 3], HEAP32[$6 + 40 >> 2] + 24 | 0, HEAP32[$6 + 40 >> 2] + 8 | 0);
  tflite__QuantizeMultiplierSmallerThanOneExp_28double_2c_20int__2c_20int__29(HEAPF64[$6 + 8 >> 3], HEAP32[$6 + 40 >> 2] + 28 | 0, HEAP32[$6 + 40 >> 2] + 32 | 0);
  label$3 : {
   if (HEAP32[HEAP32[$6 + 44 >> 2] >> 2] == 3) {
    tflite__CalculateActivationRangeUint8_28TfLiteFusedActivation_2c_20TfLiteTensor__2c_20int__2c_20int__29(HEAP32[HEAP32[$6 + 56 >> 2] >> 2], HEAP32[$6 + 44 >> 2], HEAP32[$6 + 40 >> 2] + 12 | 0, HEAP32[$6 + 40 >> 2] + 16 | 0);
    break label$3;
   }
   tflite__CalculateActivationRangeInt8_28TfLiteFusedActivation_2c_20TfLiteTensor__2c_20int__2c_20int__29(HEAP32[HEAP32[$6 + 56 >> 2] >> 2], HEAP32[$6 + 44 >> 2], HEAP32[$6 + 40 >> 2] + 12 | 0, HEAP32[$6 + 40 >> 2] + 16 | 0);
  }
 }
 global$0 = $6 - -64 | 0;
 return 0;
}
function jswrap_require($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 256 | 0;
 global$0 = $1;
 HEAP32[$1 + 248 >> 2] = $0;
 label$1 : {
  if (!(jsvIsString(HEAP32[$1 + 248 >> 2]) & 1)) {
   HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 248 >> 2];
   jsExceptionHere(3, 34448, $1 + 48 | 0);
   HEAP32[$1 + 252 >> 2] = 0;
   break label$1;
  }
  if (jsvGetString(HEAP32[$1 + 248 >> 2], $1 + 112 | 0, 128) >>> 0 >= 128) {
   jsExceptionHere(3, 34496, 0);
   HEAP32[$1 + 252 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 108 >> 2] = jswrap_modules_getModuleList();
  if (!HEAP32[$1 + 108 >> 2]) {
   HEAP32[$1 + 252 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 104 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAP32[$1 + 108 >> 2], $1 + 112 | 0, 0));
  jsvUnLock(HEAP32[$1 + 108 >> 2]);
  if (HEAP32[$1 + 104 >> 2]) {
   HEAP32[$1 + 252 >> 2] = HEAP32[$1 + 104 >> 2];
   break label$1;
  }
  HEAP32[$1 + 100 >> 2] = jswGetBuiltInLibrary($1 + 112 | 0);
  if (HEAP32[$1 + 100 >> 2]) {
   HEAP32[$1 + 104 >> 2] = jsvNewNativeFunction(HEAP32[$1 + 100 >> 2], 0);
  }
  label$7 : {
   if (HEAP32[$1 + 104 >> 2]) {
    break label$7;
   }
   if (strlen($1 + 112 | 0) >>> 0 > 28) {
    break label$7;
   }
   jsfNameFromString($1 + 72 | 0, $1 + 112 | 0);
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 96 >> 2];
   $0 = HEAP32[$1 + 92 >> 2];
   HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 88 >> 2];
   HEAP32[$1 + 36 >> 2] = $0;
   $0 = HEAP32[$1 + 84 >> 2];
   HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 80 >> 2];
   HEAP32[$1 + 28 >> 2] = $0;
   $0 = HEAP32[$1 + 76 >> 2];
   HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 72 >> 2];
   HEAP32[$1 + 20 >> 2] = $0;
   HEAP32[$1 + 68 >> 2] = jsfReadFile($1 + 16 | 0, 0, 0);
   if (HEAP32[$1 + 68 >> 2]) {
    HEAP32[$1 + 104 >> 2] = jspEvaluateModule(HEAP32[$1 + 68 >> 2]);
    jsvUnLock(HEAP32[$1 + 68 >> 2]);
   }
  }
  if (!HEAP32[$1 + 104 >> 2]) {
   HEAP32[$1 + 64 >> 2] = jswGetBuiltInJSLibrary($1 + 112 | 0);
   if (HEAP32[$1 + 64 >> 2]) {
    HEAP32[$1 + 60 >> 2] = jsvNewNativeString(HEAP32[$1 + 64 >> 2], strlen(HEAP32[$1 + 64 >> 2]));
    if (HEAP32[$1 + 60 >> 2]) {
     HEAP32[$1 + 104 >> 2] = jspEvaluateModule(HEAP32[$1 + 60 >> 2]);
     jsvUnLock(HEAP32[$1 + 60 >> 2]);
    }
   }
  }
  label$12 : {
   if (HEAP32[$1 + 104 >> 2]) {
    HEAP32[$1 + 56 >> 2] = jswrap_modules_getModuleList();
    if (HEAP32[$1 + 56 >> 2]) {
     jsvObjectSetChild(HEAP32[$1 + 56 >> 2], $1 + 112 | 0, HEAP32[$1 + 104 >> 2]);
    }
    jsvUnLock(HEAP32[$1 + 56 >> 2]);
    break label$12;
   }
   HEAP32[$1 >> 2] = $1 + 112;
   jsExceptionHere(1, 34533, $1);
  }
  HEAP32[$1 + 252 >> 2] = HEAP32[$1 + 104 >> 2];
 }
 global$0 = $1 + 256 | 0;
 return HEAP32[$1 + 252 >> 2];
}
function tflite__reference_ops__Softmax_28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = global$0 + -64 | 0;
 global$0 = $5;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 HEAP32[$5 + 40 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$5 + 56 >> 2]) - 1;
 HEAP32[$5 + 36 >> 2] = tflite__MatchingFlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 56 >> 2], HEAP32[$5 + 40 >> 2], HEAP32[$5 + 48 >> 2]);
 HEAP32[$5 + 32 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 56 >> 2], HEAP32[$5 + 40 >> 2], HEAP32[$5 + 48 >> 2], HEAP32[$5 + 40 >> 2]);
 HEAP32[$5 + 28 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 28 >> 2] < HEAP32[$5 + 36 >> 2]) {
   HEAPF32[$5 + 24 >> 2] = -3.4028234663852886e+38;
   HEAP32[$5 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 20 >> 2] < HEAP32[$5 + 32 >> 2]) {
     HEAPF32[$5 + 24 >> 2] = HEAPF32[float_20const__20std____2__max_float__28float_20const__2c_20float_20const__29($5 + 24 | 0, HEAP32[$5 + 52 >> 2] + (HEAP32[$5 + 20 >> 2] + Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 32 >> 2]) << 2) | 0) >> 2];
     HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAPF32[$5 + 16 >> 2] = 0;
   HEAP32[$5 + 12 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 32 >> 2]) {
     $6 = exp(+Math_fround(HEAPF32[HEAP32[$5 + 52 >> 2] + (HEAP32[$5 + 12 >> 2] + Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 32 >> 2]) << 2) >> 2] - HEAPF32[$5 + 24 >> 2]) * HEAPF64[HEAP32[$5 + 60 >> 2] >> 3]);
     HEAPF32[$5 + 16 >> 2] = +HEAPF32[$5 + 16 >> 2] + $6;
     HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 8 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 8 >> 2] < HEAP32[$5 + 32 >> 2]) {
     $6 = exp(+Math_fround(HEAPF32[HEAP32[$5 + 52 >> 2] + (HEAP32[$5 + 8 >> 2] + Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 32 >> 2]) << 2) >> 2] - HEAPF32[$5 + 24 >> 2]) * HEAPF64[HEAP32[$5 + 60 >> 2] >> 3]);
     HEAPF32[HEAP32[$5 + 44 >> 2] + (HEAP32[$5 + 8 >> 2] + Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 32 >> 2]) << 2) >> 2] = $6 / +HEAPF32[$5 + 16 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 - -64 | 0;
}
function jsfGetJSONForFunctionWithCallback($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 + -64 | 0;
 global$0 = $4;
 HEAP32[$4 + 60 >> 2] = $0;
 HEAP32[$4 + 56 >> 2] = $1;
 HEAP32[$4 + 52 >> 2] = $2;
 HEAP32[$4 + 48 >> 2] = $3;
 HEAP32[$4 + 44 >> 2] = 0;
 jsvObjectIteratorNew($4 + 40 | 0, HEAP32[$4 + 60 >> 2]);
 HEAP8[$4 + 39 | 0] = 1;
 cbprintf(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 34205, 0);
 while (1) {
  if (jsvObjectIteratorHasValue($4 + 40 | 0) & 1) {
   HEAP32[$4 + 32 >> 2] = jsvObjectIteratorGetKey($4 + 40 | 0);
   label$3 : {
    if (jsvIsFunctionParameter(HEAP32[$4 + 32 >> 2]) & 1) {
     label$5 : {
      if (HEAP8[$4 + 39 | 0] & 1) {
       HEAP8[$4 + 39 | 0] = 0;
       break label$5;
      }
      cbprintf(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 34207, 0);
     }
     HEAP32[$4 + 28 >> 2] = jsvNewFromStringVar(HEAP32[$4 + 32 >> 2], 1, 2147483647);
     $0 = HEAP32[$4 + 52 >> 2];
     $1 = HEAP32[$4 + 48 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$4 + 28 >> 2];
     cbprintf($0, $1, 34209, $4);
     jsvUnLock(HEAP32[$4 + 28 >> 2]);
     break label$3;
    }
    label$7 : {
     if (!(jsvIsString(HEAP32[$4 + 32 >> 2]) & 1)) {
      break label$7;
     }
     if (!(jsvIsStringEqual(HEAP32[$4 + 32 >> 2], 34212) & 1)) {
      break label$7;
     }
     HEAP32[$4 + 44 >> 2] = jsvObjectIteratorGetValue($4 + 40 | 0);
    }
   }
   $0 = $4 + 40 | 0;
   jsvUnLock(HEAP32[$4 + 32 >> 2]);
   jsvObjectIteratorNext($0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree($4 + 40 | 0);
 cbprintf(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 34217, 0);
 label$8 : {
  if (jsvIsNative(HEAP32[$4 + 60 >> 2]) & 1) {
   cbprintf(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 34220, 0);
   break label$8;
  }
  label$10 : {
   if (HEAP32[$4 + 44 >> 2]) {
    if (HEAP32[$4 + 56 >> 2] & 8) {
     $0 = HEAP32[$4 + 52 >> 2];
     $1 = HEAP32[$4 + 48 >> 2];
     HEAP32[$4 + 16 >> 2] = HEAP32[13355];
     cbprintf($0, $1, 34238, $4 + 16 | 0);
     break label$10;
    }
    HEAP8[$4 + 27 | 0] = (jsvGetStringIndexOf(HEAP32[$4 + 44 >> 2]) | 0) >= 0;
    FUNCTION_TABLE[HEAP32[$4 + 52 >> 2]](HEAP8[$4 + 27 | 0] & 1 ? 34243 : 34248, HEAP32[$4 + 48 >> 2]);
    if (jsvIsFunctionReturn(HEAP32[$4 + 60 >> 2]) & 1) {
     FUNCTION_TABLE[HEAP32[$4 + 52 >> 2]](34250, HEAP32[$4 + 48 >> 2]);
    }
    jslPrintTokenisedString(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2]);
    FUNCTION_TABLE[HEAP32[$4 + 52 >> 2]](HEAP8[$4 + 27 | 0] & 1 ? 34258 : 34261, HEAP32[$4 + 48 >> 2]);
    break label$10;
   }
   cbprintf(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 34263, 0);
  }
 }
 jsvUnLock(HEAP32[$4 + 44 >> 2]);
 global$0 = $4 - -64 | 0;
}
function jspGetVarNamedField($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 112 | 0;
 global$0 = $3;
 HEAP32[$3 + 104 >> 2] = $0;
 HEAP32[$3 + 100 >> 2] = $1;
 HEAP8[$3 + 99 | 0] = $2;
 HEAP32[$3 + 92 >> 2] = 0;
 if (jsvHasChildren(HEAP32[$3 + 104 >> 2]) & 1) {
  HEAP32[$3 + 92 >> 2] = jsvFindChildFromVar(HEAP32[$3 + 104 >> 2], HEAP32[$3 + 100 >> 2], 0);
 }
 if (!HEAP32[$3 + 92 >> 2]) {
  label$3 : {
   label$4 : {
    if (!(jsvIsArrayBuffer(HEAP32[$3 + 104 >> 2]) & 1)) {
     break label$4;
    }
    if (!(jsvIsInt(HEAP32[$3 + 100 >> 2]) & 1)) {
     break label$4;
    }
    HEAP32[$3 + 92 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(jsvGetInteger(HEAP32[$3 + 100 >> 2])), HEAP32[$3 + 104 >> 2]);
    if (HEAP32[$3 + 92 >> 2]) {
     HEAP16[HEAP32[$3 + 92 >> 2] + 14 >> 1] = HEAPU16[HEAP32[$3 + 92 >> 2] + 14 >> 1] & -64 | 13;
    }
    break label$3;
   }
   label$6 : {
    label$7 : {
     if (!(jsvIsString(HEAP32[$3 + 104 >> 2]) & 1)) {
      break label$7;
     }
     if (!(jsvIsInt(HEAP32[$3 + 100 >> 2]) & 1)) {
      break label$7;
     }
     HEAP32[$3 + 88 >> 2] = jsvGetInteger(HEAP32[$3 + 100 >> 2]);
     label$8 : {
      label$9 : {
       if (HEAP32[$3 + 88 >> 2] < 0) {
        break label$9;
       }
       if (HEAP32[$3 + 88 >> 2] >= (jsvGetStringLength(HEAP32[$3 + 104 >> 2]) | 0)) {
        break label$9;
       }
       $0 = $3 + 87 | 0;
       HEAP8[$3 + 87 | 0] = jsvGetCharInString(HEAP32[$3 + 104 >> 2], HEAP32[$3 + 88 >> 2]);
       HEAP32[$3 + 92 >> 2] = jsvNewStringOfLength(1, $0);
       break label$8;
      }
      if (HEAP8[$3 + 99 | 0] & 1) {
       HEAP32[$3 + 92 >> 2] = jsvCreateNewChild(HEAP32[$3 + 104 >> 2], HEAP32[$3 + 100 >> 2], 0);
      }
     }
     break label$6;
    }
    $0 = $3 + 16 | 0;
    jsvGetString(HEAP32[$3 + 100 >> 2], $0, 64);
    HEAP32[$3 + 92 >> 2] = jspGetNamedFieldInParents(HEAP32[$3 + 104 >> 2], $0, HEAP8[$3 + 99 | 0] & 1);
    label$11 : {
     if (HEAP32[$3 + 92 >> 2]) {
      break label$11;
     }
     if (!(jsvIsFunction(HEAP32[$3 + 104 >> 2]) & 1)) {
      break label$11;
     }
     if (!(jsvIsStringEqual(HEAP32[$3 + 100 >> 2], 3674) & 1)) {
      break label$11;
     }
     HEAP32[$3 + 12 >> 2] = jsvNewWithFlags(5);
     HEAP32[$3 + 92 >> 2] = jsvAddNamedChild(HEAP32[$3 + 104 >> 2], HEAP32[$3 + 12 >> 2], 3674);
     jsvUnLock(HEAP32[$3 + 12 >> 2]);
    }
   }
  }
 }
 label$12 : {
  if (HEAP8[$3 + 99 | 0] & 1) {
   HEAP32[$3 + 108 >> 2] = HEAP32[$3 + 92 >> 2];
   break label$12;
  }
  HEAP32[$3 + 108 >> 2] = jsvSkipNameAndUnLock(HEAP32[$3 + 92 >> 2]);
 }
 global$0 = $3 + 112 | 0;
 return HEAP32[$3 + 108 >> 2];
}
function tflite__ops__micro__depthwise_conv__EvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0;
 $8 = global$0 - 208 | 0;
 global$0 = $8;
 $9 = $8 + 88 | 0;
 HEAP32[$8 + 204 >> 2] = $0;
 HEAP32[$8 + 200 >> 2] = $1;
 HEAP32[$8 + 196 >> 2] = $2;
 HEAP32[$8 + 192 >> 2] = $3;
 HEAP32[$8 + 188 >> 2] = $4;
 HEAP32[$8 + 184 >> 2] = $5;
 HEAP32[$8 + 180 >> 2] = $6;
 HEAP32[$8 + 176 >> 2] = $7;
 void_20tflite__CalculateActivationRange_float__28TfLiteFusedActivation_2c_20float__2c_20float__29(HEAP32[HEAP32[$8 + 196 >> 2] + 16 >> 2], $8 + 172 | 0, $8 + 168 | 0);
 HEAP8[$8 + 112 | 0] = 1;
 HEAP16[$8 + 114 >> 1] = HEAP32[HEAP32[$8 + 192 >> 2] >> 2];
 HEAP16[$8 + 116 >> 1] = HEAP32[HEAP32[$8 + 192 >> 2] + 4 >> 2];
 HEAP16[$8 + 122 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 4 >> 2];
 HEAP16[$8 + 124 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 8 >> 2];
 HEAP16[$8 + 126 >> 1] = 1;
 HEAP16[$8 + 128 >> 1] = 1;
 HEAP16[$8 + 130 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 12 >> 2];
 HEAPF32[$8 + 160 >> 2] = HEAPF32[$8 + 172 >> 2];
 HEAPF32[$8 + 164 >> 2] = HEAPF32[$8 + 168 >> 2];
 tflite__GetTensorShape_28TfLiteTensor_20const__29($9, HEAP32[$8 + 188 >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 188 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 56 | 0, HEAP32[$8 + 184 >> 2]);
 $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 184 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 32 | 0, HEAP32[$8 + 180 >> 2]);
 $2 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 180 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 8 | 0, HEAP32[$8 + 176 >> 2]);
 tflite__reference_ops__DepthwiseConv_28tflite__DepthwiseParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($8 + 112 | 0, $8 + 88 | 0, $0, $8 + 56 | 0, $1, $8 + 32 | 0, $2, $8 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 176 >> 2]));
 $0 = $8 + 88 | 0;
 $1 = $8 + 56 | 0;
 $2 = $8 + 32 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($2);
 tflite__RuntimeShape___RuntimeShape_28_29($1);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $8 + 208 | 0;
}
function jsvGetInteger($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 label$1 : {
  if (!HEAP32[$1 + 56 >> 2]) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  if (jsvIsNull(HEAP32[$1 + 56 >> 2]) & 1) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  if (jsvIsUndefined(HEAP32[$1 + 56 >> 2]) & 1) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  label$5 : {
   if (!(jsvIsIntegerish(HEAP32[$1 + 56 >> 2]) & 1)) {
    if (!(jsvIsArrayBufferName(HEAP32[$1 + 56 >> 2]) & 1)) {
     break label$5;
    }
   }
   HEAP32[$1 + 60 >> 2] = HEAP32[HEAP32[$1 + 56 >> 2] >> 2];
   break label$1;
  }
  label$7 : {
   if (!(jsvIsArray(HEAP32[$1 + 56 >> 2]) & 1)) {
    if (!(jsvIsArrayBuffer(HEAP32[$1 + 56 >> 2]) & 1)) {
     break label$7;
    }
   }
   HEAP32[$1 + 52 >> 2] = jsvGetLength(HEAP32[$1 + 56 >> 2]);
   if (!HEAP32[$1 + 52 >> 2]) {
    HEAP32[$1 + 60 >> 2] = 0;
    break label$1;
   }
   if (HEAP32[$1 + 52 >> 2] == 1) {
    if (jsvIsArrayBuffer(HEAP32[$1 + 56 >> 2]) & 1) {
     HEAP32[$1 + 60 >> 2] = jsvGetIntegerAndUnLock(jsvArrayBufferGet(HEAP32[$1 + 56 >> 2], 0));
     break label$1;
    }
    HEAP32[$1 + 60 >> 2] = jsvGetIntegerAndUnLock(jsvSkipNameAndUnLock(jsvGetArrayItem(HEAP32[$1 + 56 >> 2], 0)));
    break label$1;
   }
  }
  if (jsvIsFloat(HEAP32[$1 + 56 >> 2]) & 1) {
   $0 = HEAP32[$1 + 56 >> 2];
   $2 = HEAP32[$0 + 4 >> 2];
   wasm2js_scratch_store_i32(0, HEAP32[$0 >> 2]);
   wasm2js_scratch_store_i32(1, $2 | 0);
   $0 = __DOUBLE_BITS(+wasm2js_scratch_load_f64());
   $2 = i64toi32_i32$HIGH_BITS & 2147483647;
   if (!(($2 | 0) == 2146435072 & $0 >>> 0 >= 0 | $2 >>> 0 > 2146435072)) {
    $4 = $1;
    $2 = HEAP32[$1 + 56 >> 2];
    $0 = HEAP32[$2 + 4 >> 2];
    wasm2js_scratch_store_i32(0, HEAP32[$2 >> 2]);
    wasm2js_scratch_store_i32(1, $0 | 0);
    $3 = +wasm2js_scratch_load_f64();
    label$15 : {
     if (Math_abs($3) < 0x8000000000000000) {
      $0 = ~~$3 >>> 0;
      break label$15;
     }
     $0 = 0;
    }
    HEAP32[$4 + 60 >> 2] = $0;
    break label$1;
   }
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  label$17 : {
   if (!(jsvIsString(HEAP32[$1 + 56 >> 2]) & 1)) {
    break label$17;
   }
   if (!(jsvIsStringNumericInt(HEAP32[$1 + 56 >> 2], 1) & 1)) {
    break label$17;
   }
   label$18 : {
    if ((jsvGetString(HEAP32[$1 + 56 >> 2], $1 + 16 | 0, 32) | 0) == 32) {
     jsExceptionHere(1, 2674, 0);
     break label$18;
    }
    HEAP32[$1 + 60 >> 2] = stringToInt($1 + 16 | 0);
    break label$1;
   }
  }
  HEAP32[$1 + 60 >> 2] = 0;
 }
 global$0 = $1 - -64 | 0;
 return HEAP32[$1 + 60 >> 2];
}
function handlePipe($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 + -64 | 0;
 global$0 = $3;
 HEAP32[$3 + 56 >> 2] = $0;
 HEAP32[$3 + 52 >> 2] = $1;
 HEAP32[$3 + 48 >> 2] = $2;
 HEAP8[$3 + 47 | 0] = jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$3 + 48 >> 2], 36239, 0)) & 1;
 label$1 : {
  if (HEAP8[$3 + 47 | 0] & 1) {
   HEAP8[$3 + 63 | 0] = 0;
   break label$1;
  }
  HEAP32[$3 + 40 >> 2] = jsvObjectGetChild(HEAP32[$3 + 48 >> 2], 36029, 0);
  HEAP32[$3 + 36 >> 2] = jsvObjectGetChild(HEAP32[$3 + 48 >> 2], 35932, 0);
  HEAP32[$3 + 32 >> 2] = jsvObjectGetChild(HEAP32[$3 + 48 >> 2], 36038, 0);
  HEAP32[$3 + 28 >> 2] = jsvObjectGetChild(HEAP32[$3 + 48 >> 2], 36045, 0);
  HEAP8[$3 + 27 | 0] = 0;
  if (!(!HEAP32[$3 + 32 >> 2] | !HEAP32[$3 + 28 >> 2] | (!HEAP32[$3 + 36 >> 2] | !HEAP32[$3 + 40 >> 2]))) {
   HEAP32[$3 + 20 >> 2] = jspGetNamedField(HEAP32[$3 + 32 >> 2], 35896, 0);
   HEAP32[$3 + 16 >> 2] = jspGetNamedField(HEAP32[$3 + 28 >> 2], 35901, 0);
   label$4 : {
    label$5 : {
     if (!(jsvIsFunction(HEAP32[$3 + 20 >> 2]) & 1)) {
      break label$5;
     }
     if (!(jsvIsFunction(HEAP32[$3 + 16 >> 2]) & 1)) {
      break label$5;
     }
     HEAP32[$3 + 12 >> 2] = jspExecuteFunction(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 32 >> 2], 1, $3 + 36 | 0);
     if (HEAP32[$3 + 12 >> 2]) {
      HEAP32[$3 + 8 >> 2] = jsvGetLength(HEAP32[$3 + 12 >> 2]);
      if (HEAP32[$3 + 8 >> 2] > 0) {
       HEAP32[$3 + 4 >> 2] = jspExecuteFunction(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 28 >> 2], 1, $3 + 12 | 0);
       label$8 : {
        if (!(jsvIsBoolean(HEAP32[$3 + 4 >> 2]) & 1)) {
         break label$8;
        }
        if (jsvGetBool(HEAP32[$3 + 4 >> 2]) & 1) {
         break label$8;
        }
        jsvObjectSetChildAndUnLock(HEAP32[$3 + 48 >> 2], 36239, jsvNewFromBool(1));
       }
       jsvUnLock(HEAP32[$3 + 4 >> 2]);
       jsvSetInteger(HEAP32[$3 + 40 >> 2], jsvGetInteger(HEAP32[$3 + 40 >> 2]) + HEAP32[$3 + 8 >> 2] | 0);
      }
      jsvUnLock(HEAP32[$3 + 12 >> 2]);
      HEAP8[$3 + 27 | 0] = 1;
     }
     break label$4;
    }
    if (!(jsvIsFunction(HEAP32[$3 + 20 >> 2]) & 1)) {
     jsExceptionHere(1, 36249, 0);
    }
    if (!(jsvIsFunction(HEAP32[$3 + 16 >> 2]) & 1)) {
     jsExceptionHere(1, 36316, 0);
    }
   }
   jsvUnLock2(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
  }
  if (!(HEAP8[$3 + 27 | 0] & 1)) {
   handlePipeClose(HEAP32[$3 + 56 >> 2], HEAP32[$3 + 52 >> 2], HEAP32[$3 + 48 >> 2]);
  }
  jsvUnLock3(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 36 >> 2]);
  jsvUnLock(HEAP32[$3 + 40 >> 2]);
  HEAP8[$3 + 63 | 0] = HEAP8[$3 + 27 | 0] & 1;
 }
 global$0 = $3 - -64 | 0;
 return HEAP8[$3 + 63 | 0] & 1;
}
function tflite__ops__micro__conv__EvalQuantizedPerChannel_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams__2c_20tflite__ops__micro__conv__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0;
 $8 = global$0 - 208 | 0;
 global$0 = $8;
 HEAP32[$8 + 204 >> 2] = $0;
 HEAP32[$8 + 200 >> 2] = $1;
 HEAP32[$8 + 196 >> 2] = $2;
 HEAP32[$8 + 192 >> 2] = $3;
 HEAP32[$8 + 188 >> 2] = $4;
 HEAP32[$8 + 184 >> 2] = $5;
 HEAP32[$8 + 180 >> 2] = $6;
 HEAP32[$8 + 176 >> 2] = $7;
 HEAP32[$8 + 172 >> 2] = 0;
 HEAP32[$8 + 132 >> 2] = 0 - HEAP32[HEAP32[$8 + 188 >> 2] + 16 >> 2];
 HEAP32[$8 + 140 >> 2] = HEAP32[HEAP32[$8 + 176 >> 2] + 16 >> 2];
 HEAP16[$8 + 124 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 8 >> 2];
 HEAP16[$8 + 122 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 4 >> 2];
 HEAP16[$8 + 128 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 16 >> 2];
 HEAP16[$8 + 126 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 12 >> 2];
 HEAP16[$8 + 116 >> 1] = HEAP32[HEAP32[$8 + 192 >> 2] + 4 >> 2];
 HEAP16[$8 + 114 >> 1] = HEAP32[HEAP32[$8 + 192 >> 2] >> 2];
 $0 = HEAP32[$8 + 192 >> 2] + 24 | 0;
 $1 = HEAP32[$8 + 192 >> 2] + 280 | 0;
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 88 | 0, HEAP32[$8 + 188 >> 2]);
 $2 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 188 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 56 | 0, HEAP32[$8 + 184 >> 2]);
 $3 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 184 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 32 | 0, HEAP32[$8 + 180 >> 2]);
 $4 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 180 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 8 | 0, HEAP32[$8 + 176 >> 2]);
 tflite__reference_integer_ops__ConvPerChannel_28tflite__ConvParams_20const__2c_20int_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($8 + 112 | 0, $0, $1, $8 + 88 | 0, $2, $8 + 56 | 0, $3, $8 + 32 | 0, $4, $8 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 176 >> 2]));
 $0 = $8 + 88 | 0;
 $1 = $8 + 56 | 0;
 $2 = $8 + 32 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($2);
 tflite__RuntimeShape___RuntimeShape_28_29($1);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $8 + 208 | 0;
}
function jspeFactorFunctionCall() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 48 | 0;
 global$0 = $0;
 HEAP8[$0 + 43 | 0] = 0;
 label$1 : {
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 184) {
   jslGetNextToken();
   HEAP8[$0 + 43 | 0] = 1;
   if (HEAP16[HEAP32[13768] + 2 >> 1] == 184) {
    jsExceptionHere(1, 4277, 0);
    jspSetError();
    HEAP32[$0 + 44 >> 2] = 0;
    break label$1;
   }
  }
  $1 = $0 + 36 | 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 35 | 0] = HEAP16[HEAP32[13768] + 2 >> 1] == 196;
  HEAP32[$0 + 28 >> 2] = jspeFactorMember(jspeFactor(), $1);
  if (HEAP8[$0 + 35 | 0] & 1) {
   jsvUnLock(HEAP32[$0 + 36 >> 2]);
   HEAP32[$0 + 36 >> 2] = jsvLockAgainSafe(HEAP32[23777]);
  }
  while (1) {
   label$6 : {
    if (HEAP16[HEAP32[13768] + 2 >> 1] != 40) {
     $1 = 0;
     if (!(HEAP8[$0 + 43 | 0] & 1)) {
      break label$6;
     }
     $1 = 0;
     if ((HEAP32[23778] & 63) != 1) {
      break label$6;
     }
    }
    $1 = jspIsInterrupted() ^ -1;
   }
   if ($1 & 1) {
    HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 28 >> 2];
    HEAP32[$0 + 20 >> 2] = jsvSkipName(HEAP32[$0 + 24 >> 2]);
    label$9 : {
     if (!(!(HEAP8[$0 + 43 | 0] & 1) | (HEAP32[23778] & 63) != 1)) {
      HEAP8[$0 + 19 | 0] = HEAP16[HEAP32[13768] + 2 >> 1] == 40;
      HEAP32[$0 + 28 >> 2] = jspeConstruct(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2], HEAP8[$0 + 19 | 0] & 1);
      HEAP8[$0 + 43 | 0] = 0;
      break label$9;
     }
     HEAP32[$0 + 28 >> 2] = jspeFunctionCall(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2], HEAP32[$0 + 36 >> 2], 1, 0, 0);
    }
    $1 = $0 + 36 | 0;
    jsvUnLock3(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 20 >> 2], HEAP32[$0 + 36 >> 2]);
    HEAP32[$0 + 36 >> 2] = 0;
    HEAP32[$0 + 28 >> 2] = jspeFactorMember(HEAP32[$0 + 28 >> 2], $1);
    continue;
   }
   break;
  }
  label$11 : {
   if (!HEAP32[$0 + 36 >> 2]) {
    break label$11;
   }
   if (!(jsvIsBasicName(HEAP32[$0 + 28 >> 2]) & 1)) {
    break label$11;
   }
   if (jsvIsNewChild(HEAP32[$0 + 28 >> 2]) & 1) {
    break label$11;
   }
   HEAP32[$0 + 12 >> 2] = jsvLockSafe(jsvGetFirstChild(HEAP32[$0 + 28 >> 2]) & 65535);
   if (jsvIsGetterOrSetter(HEAP32[$0 + 12 >> 2]) & 1) {
    HEAP32[$0 + 8 >> 2] = jsvCopyNameOnly(HEAP32[$0 + 28 >> 2], 0, 1);
    HEAP32[$0 + 4 >> 2] = jsvCreateNewChild(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2]);
    jsvUnLock2(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 28 >> 2]);
    HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 4 >> 2];
   }
   jsvUnLock(HEAP32[$0 + 12 >> 2]);
  }
  jsvUnLock(HEAP32[$0 + 36 >> 2]);
  HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 28 >> 2];
 }
 global$0 = $0 + 48 | 0;
 return HEAP32[$0 + 44 >> 2];
}
function jsserialEventCallbackIdle() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $0 = global$0 + -64 | 0;
 global$0 = $0;
 HEAP8[$0 + 62 | 0] = 0;
 HEAP32[$0 + 56 >> 2] = jsserialGetSerialList(0);
 label$1 : {
  if (!HEAP32[$0 + 56 >> 2]) {
   HEAP8[$0 + 63 | 0] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($0 + 48 | 0, HEAP32[$0 + 56 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($0 + 48 | 0) & 1) {
    HEAP32[$0 + 44 >> 2] = jsvObjectIteratorGetValue($0 + 48 | 0);
    HEAP32[$0 + 40 >> 2] = jsvObjectGetChild(HEAP32[$0 + 44 >> 2], 7755, 0);
    HEAP32[$0 + 36 >> 2] = jsvGetFlatStringPointer(HEAP32[$0 + 40 >> 2]);
    if (HEAP32[$0 + 36 >> 2]) {
     if (HEAPU8[HEAP32[$0 + 36 >> 2] + 88 | 0]) {
      HEAP32[$0 + 24 >> 2] = jshGetSystemTime();
      HEAP32[$0 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
      $2 = HEAP32[$0 + 24 >> 2];
      $1 = HEAP32[$0 + 36 >> 2];
      $3 = HEAP32[$1 + 72 >> 2];
      $1 = HEAP32[$0 + 28 >> 2] - (($2 >>> 0 < $3 >>> 0) + HEAP32[$1 + 76 >> 2] | 0) | 0;
      HEAP32[$0 + 16 >> 2] = $2 - $3;
      HEAP32[$0 + 20 >> 2] = $1;
      $3 = $0;
      $4 = jshGetMillisecondsFromTime(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2]) * +HEAP32[HEAP32[$0 + 36 >> 2] + 80 >> 2] / 1e3 + .5;
      label$7 : {
       if (Math_abs($4) < 2147483648) {
        $2 = ~~$4;
        break label$7;
       }
       $2 = -2147483648;
      }
      HEAP32[$3 + 12 >> 2] = $2;
      label$9 : {
       if (HEAP32[$0 + 12 >> 2] > 10) {
        $1 = HEAP32[$0 + 36 >> 2];
        HEAP32[$1 + 84 >> 2] = HEAP32[$1 + 84 >> 2] | (1 << HEAP32[$0 + 12 >> 2]) - 1 << HEAPU8[HEAP32[$0 + 36 >> 2] + 88 | 0];
        $1 = HEAP32[$0 + 36 >> 2];
        HEAP8[$1 + 88 | 0] = HEAP32[$0 + 12 >> 2] + HEAPU8[$1 + 88 | 0];
        jsserialCheckForCharacter(HEAP32[$0 + 36 >> 2]);
        HEAP8[HEAP32[$0 + 36 >> 2] + 88 | 0] = 0;
        break label$9;
       }
       HEAP8[$0 + 62 | 0] = 1;
      }
     }
     if (HEAPU8[HEAP32[$0 + 36 >> 2] + 64 | 0]) {
      HEAP32[$0 + 8 >> 2] = jsvNewStringOfLength(HEAPU8[HEAP32[$0 + 36 >> 2] + 64 | 0], HEAP32[$0 + 36 >> 2]);
      HEAP8[HEAP32[$0 + 36 >> 2] + 64 | 0] = 0;
      if (HEAP32[$0 + 8 >> 2]) {
       jswrap_stream_pushData(HEAP32[$0 + 44 >> 2], HEAP32[$0 + 8 >> 2]);
       jsvUnLock(HEAP32[$0 + 8 >> 2]);
      }
     }
    }
    $1 = $0 + 48 | 0;
    jsvUnLock2(HEAP32[$0 + 40 >> 2], HEAP32[$0 + 44 >> 2]);
    jsvObjectIteratorNext($1);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($0 + 48 | 0);
  jsvUnLock(HEAP32[$0 + 56 >> 2]);
  HEAP8[$0 + 63 | 0] = HEAP8[$0 + 62 | 0] & 1;
 }
 global$0 = $0 - -64 | 0;
 return HEAP8[$0 + 63 | 0] & 1;
}
function handlePipeClose($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 jsiQueueObjectCallbacks(HEAP32[$3 + 36 >> 2], 35916, $3 + 36 | 0, 1);
 HEAP32[$3 + 32 >> 2] = jsvObjectGetChild(HEAP32[$3 + 36 >> 2], 36038, 0);
 HEAP32[$3 + 28 >> 2] = jsvObjectGetChild(HEAP32[$3 + 36 >> 2], 36045, 0);
 if (!(!HEAP32[$3 + 32 >> 2] | !HEAP32[$3 + 28 >> 2])) {
  HEAP32[$3 + 24 >> 2] = jsvObjectGetChild(HEAP32[$3 + 32 >> 2], 36389, 0);
  label$2 : {
   if (!HEAP32[$3 + 24 >> 2]) {
    break label$2;
   }
   if (!jsvGetStringLength(HEAP32[$3 + 24 >> 2])) {
    break label$2;
   }
   jsvObjectRemoveChild(HEAP32[$3 + 32 >> 2], 36389);
   HEAP32[$3 + 20 >> 2] = jspGetNamedField(HEAP32[$3 + 28 >> 2], 35901, 0);
   if (jsvIsFunction(HEAP32[$3 + 20 >> 2]) & 1) {
    jsvUnLock(jspExecuteFunction(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 28 >> 2], 1, $3 + 24 | 0));
   }
   jsvUnLock(HEAP32[$3 + 20 >> 2]);
   HEAP32[$3 + 16 >> 2] = jsvObjectGetChild(HEAP32[$3 + 36 >> 2], 36029, 0);
   jsvSetInteger(HEAP32[$3 + 16 >> 2], jsvGetInteger(HEAP32[$3 + 16 >> 2]) + jsvGetStringLength(HEAP32[$3 + 24 >> 2]) | 0);
   jsvUnLock(HEAP32[$3 + 16 >> 2]);
  }
  jsvUnLock(HEAP32[$3 + 24 >> 2]);
 }
 if (jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$3 + 36 >> 2], 35928, 0)) & 1) {
  if (HEAP32[$3 + 28 >> 2]) {
   jswrap_object_removeAllListeners_cstr(HEAP32[$3 + 28 >> 2], 36023);
   jswrap_object_removeAllListeners_cstr(HEAP32[$3 + 28 >> 2], 36017);
   HEAP32[$3 + 12 >> 2] = jspGetNamedField(HEAP32[$3 + 28 >> 2], 35928, 0);
   if (jsvIsFunction(HEAP32[$3 + 12 >> 2]) & 1) {
    jsvUnLock(jspExecuteFunction(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 28 >> 2], 0, 0));
   }
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   HEAP32[$3 + 8 >> 2] = jspGetNamedField(HEAP32[$3 + 28 >> 2], 36017, 0);
   if (jsvIsFunction(HEAP32[$3 + 8 >> 2]) & 1) {
    jsvUnLock(jspExecuteFunction(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 28 >> 2], 0, 0));
   }
   jsvUnLock(HEAP32[$3 + 8 >> 2]);
  }
  if (HEAP32[$3 + 32 >> 2]) {
   jswrap_object_removeAllListeners_cstr(HEAP32[$3 + 32 >> 2], 36017);
   HEAP32[$3 + 4 >> 2] = jspGetNamedField(HEAP32[$3 + 32 >> 2], 36017, 0);
   if (jsvIsFunction(HEAP32[$3 + 4 >> 2]) & 1) {
    jsvUnLock(jspExecuteFunction(HEAP32[$3 + 4 >> 2], HEAP32[$3 + 32 >> 2], 0, 0));
   }
   jsvUnLock(HEAP32[$3 + 4 >> 2]);
  }
 }
 jsvUnLock2(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2]);
 HEAP32[$3 >> 2] = jsvObjectIteratorGetKey(HEAP32[$3 + 40 >> 2]);
 jsvRemoveChild(HEAP32[$3 + 44 >> 2], HEAP32[$3 >> 2]);
 jsvUnLock(HEAP32[$3 >> 2]);
 global$0 = $3 + 48 | 0;
}
function jspeTemplateLiteral() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 96 | 0;
 global$0 = $0;
 HEAP32[$0 + 92 >> 2] = 0;
 if ((HEAP32[23778] & 63) == 1) {
  HEAP32[$0 + 88 >> 2] = jslGetTokenValueAsVar();
  HEAP32[$0 + 92 >> 2] = jsvNewFromEmptyString();
  if (!(!HEAP32[$0 + 92 >> 2] | !HEAP32[$0 + 88 >> 2])) {
   $1 = $0 + 40 | 0;
   jsvStringIteratorNew($0 - -64 | 0, HEAP32[$0 + 88 >> 2], 0);
   jsvStringIteratorNew($1, HEAP32[$0 + 92 >> 2], 0);
   while (1) {
    label$4 : {
     if (!(jsvStringIteratorHasChar($0 - -64 | 0) & 1)) {
      break label$4;
     }
     HEAP8[$0 + 39 | 0] = jsvStringIteratorGetCharAndNext($0 - -64 | 0);
     label$5 : {
      if (HEAP8[$0 + 39 | 0] == 36) {
       HEAP8[$0 + 39 | 0] = jsvStringIteratorGetChar($0 - -64 | 0);
       label$7 : {
        if (HEAP8[$0 + 39 | 0] == 123) {
         jsvStringIteratorNext($0 - -64 | 0);
         HEAP32[$0 + 32 >> 2] = 1;
         HEAP32[$0 + 28 >> 2] = jsvNewFromEmptyString();
         if (!HEAP32[$0 + 28 >> 2]) {
          break label$4;
         }
         jsvStringIteratorNew($0 + 8 | 0, HEAP32[$0 + 28 >> 2], 0);
         while (1) {
          label$10 : {
           if (!(jsvStringIteratorHasChar($0 - -64 | 0) & 1)) {
            break label$10;
           }
           HEAP8[$0 + 39 | 0] = jsvStringIteratorGetCharAndNext($0 - -64 | 0);
           if (HEAP8[$0 + 39 | 0] == 123) {
            HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 32 >> 2] + 1;
           }
           if (HEAP8[$0 + 39 | 0] == 125) {
            HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 32 >> 2] + -1;
            if (!HEAP32[$0 + 32 >> 2]) {
             break label$10;
            }
           }
           jsvStringIteratorAppend($0 + 8 | 0, HEAP8[$0 + 39 | 0]);
           continue;
          }
          break;
         }
         $1 = $0 + 40 | 0;
         jsvStringIteratorFree($0 + 8 | 0);
         HEAP32[$0 + 4 >> 2] = jspEvaluateExpressionVar(HEAP32[$0 + 28 >> 2]);
         jsvUnLock(HEAP32[$0 + 28 >> 2]);
         HEAP32[$0 + 4 >> 2] = jsvAsStringAndUnLock(HEAP32[$0 + 4 >> 2]);
         jsvStringIteratorAppendString($1, HEAP32[$0 + 4 >> 2], 0);
         jsvUnLock(HEAP32[$0 + 4 >> 2]);
         break label$7;
        }
        jsvStringIteratorAppend($0 + 40 | 0, 36);
       }
       break label$5;
      }
      jsvStringIteratorAppend($0 + 40 | 0, HEAP8[$0 + 39 | 0]);
     }
     continue;
    }
    break;
   }
   $1 = $0 + 40 | 0;
   jsvStringIteratorFree($0 - -64 | 0);
   jsvStringIteratorFree($1);
  }
  jsvUnLock(HEAP32[$0 + 88 >> 2]);
 }
 jslGetNextToken();
 global$0 = $0 + 96 | 0;
 return HEAP32[$0 + 92 >> 2];
}
function jswrap_btoa($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 112 | 0;
 global$0 = $1;
 HEAP32[$1 + 104 >> 2] = $0;
 label$1 : {
  if (!(jsvIsIterable(HEAP32[$1 + 104 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 104 >> 2];
   jsExceptionHere(1, 32907, $1);
   HEAP32[$1 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 100 >> 2] = jsvGetLength(HEAP32[$1 + 104 >> 2]);
  HEAP32[$1 + 96 >> 2] = (HEAP32[$1 + 100 >> 2] + 2 >>> 0) / 3 << 2;
  HEAP32[$1 + 92 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 96 >> 2], 0);
  if (!HEAP32[$1 + 92 >> 2]) {
   HEAP32[$1 + 108 >> 2] = 0;
   break label$1;
  }
  $0 = $1 + 24 | 0;
  jsvIteratorNew($1 + 48 | 0, HEAP32[$1 + 104 >> 2], 1);
  jsvStringIteratorNew($0, HEAP32[$1 + 92 >> 2], 0);
  HEAP32[$1 + 20 >> 2] = 0;
  while (1) {
   if (jsvIteratorHasElement($1 + 48 | 0) & 1) {
    $0 = jspIsInterrupted() ^ -1;
   } else {
    $0 = 0;
   }
   if ($0 & 1) {
    $0 = $1 + 48 | 0;
    HEAP32[$1 + 16 >> 2] = jsvIteratorGetIntegerValue($0) & 255;
    jsvIteratorNext($0);
    HEAP32[$1 + 12 >> 2] = 0;
    HEAP32[$1 + 8 >> 2] = 0;
    label$8 : {
     if (jsvIteratorHasElement($0) & 1) {
      $0 = $1 + 48 | 0;
      HEAP32[$1 + 12 >> 2] = jsvIteratorGetIntegerValue($0) & 255;
      jsvIteratorNext($0);
      label$10 : {
       if (jsvIteratorHasElement($0) & 1) {
        $0 = $1 + 48 | 0;
        HEAP32[$1 + 8 >> 2] = jsvIteratorGetIntegerValue($0) & 255;
        jsvIteratorNext($0);
        HEAP32[$1 + 20 >> 2] = 0;
        break label$10;
       }
       HEAP32[$1 + 20 >> 2] = 1;
      }
      break label$8;
     }
     HEAP32[$1 + 20 >> 2] = 2;
    }
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 8 >> 2] + ((HEAP32[$1 + 16 >> 2] << 16) + (HEAP32[$1 + 12 >> 2] << 8) | 0);
    $0 = $1 + 24 | 0;
    jsvStringIteratorSetCharAndNext($0, jswrap_btoa_encode(HEAP32[$1 + 4 >> 2] >> 18) << 24 >> 24);
    jsvStringIteratorSetCharAndNext($0, jswrap_btoa_encode(HEAP32[$1 + 4 >> 2] >> 12) << 24 >> 24);
    $0 = $1 + 24 | 0;
    if (HEAP32[$1 + 20 >> 2] > 1) {
     $2 = 61;
    } else {
     $2 = jswrap_btoa_encode(HEAP32[$1 + 4 >> 2] >> 6);
    }
    jsvStringIteratorSetCharAndNext($0, $2 << 24 >> 24);
    $0 = $1 + 24 | 0;
    if (HEAP32[$1 + 20 >> 2] > 0) {
     $2 = 61;
    } else {
     $2 = jswrap_btoa_encode(HEAP32[$1 + 4 >> 2]);
    }
    jsvStringIteratorSetCharAndNext($0, $2 << 24 >> 24);
    continue;
   }
   break;
  }
  $0 = $1 + 24 | 0;
  jsvIteratorFree($1 + 48 | 0);
  jsvStringIteratorFree($0);
  HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 92 >> 2];
 }
 global$0 = $1 + 112 | 0;
 return HEAP32[$1 + 108 >> 2];
}
function jsvAddName($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = jsvRef(HEAP32[$2 + 24 >> 2]);
 label$1 : {
  if (!(jsvIsArray(HEAP32[$2 + 28 >> 2]) & 1)) {
   break label$1;
  }
  if (!(jsvIsInt(HEAP32[$2 + 24 >> 2]) & 1)) {
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] >> 2];
  if (HEAP32[$2 + 20 >> 2] >= (jsvGetArrayLength(HEAP32[$2 + 28 >> 2]) | 0)) {
   jsvSetArrayLength(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2] + 1 | 0);
  }
 }
 label$3 : {
  if (jsvGetLastChild(HEAP32[$2 + 28 >> 2]) & 65535) {
   HEAP32[$2 + 16 >> 2] = jsvLock(jsvGetLastChild(HEAP32[$2 + 28 >> 2]) & 65535);
   if (jsvIsArray(HEAP32[$2 + 28 >> 2]) & 1) {
    while (1) {
     if (HEAP32[$2 + 16 >> 2]) {
      $0 = (jsvCompareInteger(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 16 >> 2]) | 0) < 0;
     } else {
      $0 = 0;
     }
     if ($0) {
      HEAP16[$2 + 14 >> 1] = jsvGetPrevSibling(HEAP32[$2 + 16 >> 2]);
      jsvUnLock(HEAP32[$2 + 16 >> 2]);
      HEAP32[$2 + 16 >> 2] = jsvLockSafe(HEAPU16[$2 + 14 >> 1]);
      continue;
     }
     break;
    }
   }
   label$10 : {
    if (HEAP32[$2 + 16 >> 2]) {
     label$12 : {
      if (jsvGetNextSibling(HEAP32[$2 + 16 >> 2]) & 65535) {
       HEAP32[$2 + 8 >> 2] = jsvLock(jsvGetNextSibling(HEAP32[$2 + 16 >> 2]) & 65535);
       jsvSetPrevSibling(HEAP32[$2 + 8 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
       jsvSetNextSibling(HEAP32[$2 + 24 >> 2], jsvGetRef(HEAP32[$2 + 8 >> 2]) & 65535);
       jsvUnLock(HEAP32[$2 + 8 >> 2]);
       break label$12;
      }
      jsvSetLastChild(HEAP32[$2 + 28 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
     }
     jsvSetNextSibling(HEAP32[$2 + 16 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
     jsvSetPrevSibling(HEAP32[$2 + 24 >> 2], jsvGetRef(HEAP32[$2 + 16 >> 2]) & 65535);
     jsvUnLock(HEAP32[$2 + 16 >> 2]);
     break label$10;
    }
    HEAP32[$2 + 4 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 28 >> 2]) & 65535);
    jsvSetPrevSibling(HEAP32[$2 + 4 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
    jsvUnLock(HEAP32[$2 + 4 >> 2]);
    jsvSetNextSibling(HEAP32[$2 + 24 >> 2], jsvGetFirstChild(HEAP32[$2 + 28 >> 2]) & 65535);
    jsvSetFirstChild(HEAP32[$2 + 28 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
   }
   break label$3;
  }
  HEAP16[$2 + 2 >> 1] = jsvGetRef(HEAP32[$2 + 24 >> 2]);
  jsvSetFirstChild(HEAP32[$2 + 28 >> 2], HEAPU16[$2 + 2 >> 1]);
  jsvSetLastChild(HEAP32[$2 + 28 >> 2], HEAPU16[$2 + 2 >> 1]);
 }
 global$0 = $2 + 32 | 0;
}
function jswGetBasicObjectName($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 17171;
   break label$1;
  }
  if (!(!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) | HEAPU16[HEAP32[$1 + 8 >> 2] + 4 >> 1] != 20)) {
   HEAP32[$1 + 12 >> 2] = 17063;
   break label$1;
  }
  if (!(!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) | HEAPU16[HEAP32[$1 + 8 >> 2] + 4 >> 1] != 65)) {
   HEAP32[$1 + 12 >> 2] = 16988;
   break label$1;
  }
  if (!(!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) | HEAPU16[HEAP32[$1 + 8 >> 2] + 4 >> 1] != 4)) {
   HEAP32[$1 + 12 >> 2] = 17051;
   break label$1;
  }
  if (jsvIsPin(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 17201;
   break label$1;
  }
  if (!(!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) | HEAPU16[HEAP32[$1 + 8 >> 2] + 4 >> 1] != 129)) {
   HEAP32[$1 + 12 >> 2] = 16949;
   break label$1;
  }
  if (jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 17212;
   break label$1;
  }
  if (!(!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) | HEAPU16[HEAP32[$1 + 8 >> 2] + 4 >> 1] != 1)) {
   HEAP32[$1 + 12 >> 2] = 16977;
   break label$1;
  }
  if (!(!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) | HEAPU16[HEAP32[$1 + 8 >> 2] + 4 >> 1] != 2)) {
   HEAP32[$1 + 12 >> 2] = 17016;
   break label$1;
  }
  if (!(!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) | HEAPU16[HEAP32[$1 + 8 >> 2] + 4 >> 1] != 40)) {
   HEAP32[$1 + 12 >> 2] = 17087;
   break label$1;
  }
  if (jsvIsNumeric(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 17205;
   break label$1;
  }
  if (!(!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) | HEAPU16[HEAP32[$1 + 8 >> 2] + 4 >> 1] != 17)) {
   HEAP32[$1 + 12 >> 2] = 17006;
   break label$1;
  }
  if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 16943;
   break label$1;
  }
  if (!(!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) | HEAPU16[HEAP32[$1 + 8 >> 2] + 4 >> 1] != 18)) {
   HEAP32[$1 + 12 >> 2] = 17028;
   break label$1;
  }
  if (!(!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) | HEAPU16[HEAP32[$1 + 8 >> 2] + 4 >> 1] != 36)) {
   HEAP32[$1 + 12 >> 2] = 17074;
   break label$1;
  }
  if (!(!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) | HEAPU16[HEAP32[$1 + 8 >> 2] + 4 >> 1] != 3)) {
   HEAP32[$1 + 12 >> 2] = 17039;
   break label$1;
  }
  if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 17288;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jswrap_graphics_setRotation($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP8[$3 + 83 | 0] = $2;
 label$1 : {
  if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  $0 = (HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24)) & -113;
  HEAP8[$3 + 16 | 0] = $0;
  HEAP8[$3 + 17 | 0] = $0 >>> 8;
  HEAP8[$3 + 18 | 0] = $0 >>> 16;
  HEAP8[$3 + 19 | 0] = $0 >>> 24;
  $0 = HEAP32[$3 + 84 >> 2];
  label$3 : {
   if ($0 >>> 0 > 3) {
    break label$3;
   }
   label$4 : {
    switch ($0 - 1 | 0) {
    case 0:
     $0 = HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24) | 48;
     HEAP8[$3 + 16 | 0] = $0;
     HEAP8[$3 + 17 | 0] = $0 >>> 8;
     HEAP8[$3 + 18 | 0] = $0 >>> 16;
     HEAP8[$3 + 19 | 0] = $0 >>> 24;
     break label$3;
    case 1:
     $0 = HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24) | 96;
     HEAP8[$3 + 16 | 0] = $0;
     HEAP8[$3 + 17 | 0] = $0 >>> 8;
     HEAP8[$3 + 18 | 0] = $0 >>> 16;
     HEAP8[$3 + 19 | 0] = $0 >>> 24;
     break label$3;
    case 2:
     break label$4;
    default:
     break label$3;
    }
   }
   $0 = HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24) | 80;
   HEAP8[$3 + 16 | 0] = $0;
   HEAP8[$3 + 17 | 0] = $0 >>> 8;
   HEAP8[$3 + 18 | 0] = $0 >>> 16;
   HEAP8[$3 + 19 | 0] = $0 >>> 24;
  }
  if (HEAP8[$3 + 83 | 0] & 1) {
   label$8 : {
    if ((HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24)) & 16) {
     $0 = (HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24)) ^ 64;
     HEAP8[$3 + 16 | 0] = $0;
     HEAP8[$3 + 17 | 0] = $0 >>> 8;
     HEAP8[$3 + 18 | 0] = $0 >>> 16;
     HEAP8[$3 + 19 | 0] = $0 >>> 24;
     break label$8;
    }
    $0 = (HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24)) ^ 32;
    HEAP8[$3 + 16 | 0] = $0;
    HEAP8[$3 + 17 | 0] = $0 >>> 8;
    HEAP8[$3 + 18 | 0] = $0 >>> 16;
    HEAP8[$3 + 19 | 0] = $0 >>> 24;
   }
  }
  graphicsSetVar($3 + 8 | 0);
  HEAP32[$3 + 92 >> 2] = jsvLockAgain(HEAP32[$3 + 88 >> 2]);
 }
 global$0 = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}
function _jswrap_promise_resolve_or_reject($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 + -64 | 0;
 global$0 = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 HEAP32[$3 + 52 >> 2] = $2;
 HEAP32[$3 + 48 >> 2] = 0;
 label$1 : {
  if (jsvIsArray(HEAP32[$3 + 52 >> 2]) & 1) {
   jsvObjectIteratorNew($3 + 40 | 0, HEAP32[$3 + 52 >> 2]);
   HEAP8[$3 + 39 | 0] = 1;
   while (1) {
    if (jsvObjectIteratorHasValue($3 + 40 | 0) & 1) {
     $0 = $3 + 56 | 0;
     HEAP32[$3 + 32 >> 2] = jsvObjectIteratorGetValue($3 + 40 | 0);
     HEAP32[$3 + 28 >> 2] = jspExecuteFunction(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 60 >> 2], 1, $0);
     label$5 : {
      if (HEAP8[$3 + 39 | 0] & 1) {
       HEAP8[$3 + 39 | 0] = 0;
       HEAP32[$3 + 48 >> 2] = HEAP32[$3 + 28 >> 2];
       break label$5;
      }
      jsvUnLock(HEAP32[$3 + 28 >> 2]);
     }
     $0 = $3 + 40 | 0;
     jsvUnLock(HEAP32[$3 + 32 >> 2]);
     jsvObjectIteratorNext($0);
     continue;
    }
    break;
   }
   jsvObjectIteratorFree($3 + 40 | 0);
   break label$1;
  }
  if (HEAP32[$3 + 52 >> 2]) {
   HEAP32[$3 + 48 >> 2] = jspExecuteFunction(HEAP32[$3 + 52 >> 2], HEAP32[$3 + 60 >> 2], 1, $3 + 56 | 0);
  }
 }
 jsvObjectRemoveChild(HEAP32[$3 + 60 >> 2], 36539);
 jsvObjectRemoveChild(HEAP32[$3 + 60 >> 2], 36544);
 HEAP32[$3 + 24 >> 2] = jsvObjectGetChild(HEAP32[$3 + 60 >> 2], 36549, 0);
 jsvObjectRemoveChild(HEAP32[$3 + 60 >> 2], 36549);
 HEAP32[$3 + 20 >> 2] = jspGetException();
 label$8 : {
  if (HEAP32[$3 + 20 >> 2]) {
   _jswrap_promise_queuereject(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
   jsvUnLock3(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 48 >> 2], HEAP32[$3 + 24 >> 2]);
   break label$8;
  }
  if (HEAP32[$3 + 24 >> 2]) {
   label$11 : {
    if (_jswrap_promise_is_promise(HEAP32[$3 + 48 >> 2]) & 1) {
     HEAP32[$3 + 16 >> 2] = jsvNewNativeFunction(537, 32776);
     HEAP32[$3 + 12 >> 2] = jsvNewNativeFunction(536, 32776);
     if (!(!HEAP32[$3 + 16 >> 2] | !HEAP32[$3 + 12 >> 2])) {
      jsvObjectSetChild(HEAP32[$3 + 16 >> 2], 36555, HEAP32[$3 + 24 >> 2]);
      jsvObjectSetChild(HEAP32[$3 + 12 >> 2], 36555, HEAP32[$3 + 24 >> 2]);
      _jswrap_promise_add(HEAP32[$3 + 48 >> 2], HEAP32[$3 + 16 >> 2], 1);
      _jswrap_promise_add(HEAP32[$3 + 48 >> 2], HEAP32[$3 + 12 >> 2], 0);
     }
     jsvUnLock2(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2]);
     break label$11;
    }
    _jswrap_promise_queueresolve(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 48 >> 2]);
   }
  }
  jsvUnLock2(HEAP32[$3 + 48 >> 2], HEAP32[$3 + 24 >> 2]);
 }
 global$0 = $3 - -64 | 0;
}
function memcpy($0, $1, $2) {
 var $3 = 0, $4 = 0;
 if ($2 >>> 0 >= 8192) {
  emscripten_memcpy_big($0 | 0, $1 | 0, $2 | 0) | 0;
  return;
 }
 $3 = $0 + $2 | 0;
 label$2 : {
  if (!(($0 ^ $1) & 3)) {
   label$4 : {
    if (($2 | 0) < 1) {
     $2 = $0;
     break label$4;
    }
    if (!($0 & 3)) {
     $2 = $0;
     break label$4;
    }
    $2 = $0;
    while (1) {
     HEAP8[$2 | 0] = HEAPU8[$1 | 0];
     $1 = $1 + 1 | 0;
     $2 = $2 + 1 | 0;
     if ($2 >>> 0 >= $3 >>> 0) {
      break label$4;
     }
     if ($2 & 3) {
      continue;
     }
     break;
    }
   }
   $0 = $3 & -4;
   label$8 : {
    if ($0 >>> 0 < 64) {
     break label$8;
    }
    $4 = $0 + -64 | 0;
    if ($2 >>> 0 > $4 >>> 0) {
     break label$8;
    }
    while (1) {
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
     HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
     HEAP32[$2 + 20 >> 2] = HEAP32[$1 + 20 >> 2];
     HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
     HEAP32[$2 + 28 >> 2] = HEAP32[$1 + 28 >> 2];
     HEAP32[$2 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
     HEAP32[$2 + 36 >> 2] = HEAP32[$1 + 36 >> 2];
     HEAP32[$2 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
     HEAP32[$2 + 44 >> 2] = HEAP32[$1 + 44 >> 2];
     HEAP32[$2 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
     HEAP32[$2 + 52 >> 2] = HEAP32[$1 + 52 >> 2];
     HEAP32[$2 + 56 >> 2] = HEAP32[$1 + 56 >> 2];
     HEAP32[$2 + 60 >> 2] = HEAP32[$1 + 60 >> 2];
     $1 = $1 - -64 | 0;
     $2 = $2 - -64 | 0;
     if ($2 >>> 0 <= $4 >>> 0) {
      continue;
     }
     break;
    }
   }
   if ($2 >>> 0 >= $0 >>> 0) {
    break label$2;
   }
   while (1) {
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    $1 = $1 + 4 | 0;
    $2 = $2 + 4 | 0;
    if ($2 >>> 0 < $0 >>> 0) {
     continue;
    }
    break;
   }
   break label$2;
  }
  if ($3 >>> 0 < 4) {
   $2 = $0;
   break label$2;
  }
  $4 = $3 + -4 | 0;
  if ($4 >>> 0 < $0 >>> 0) {
   $2 = $0;
   break label$2;
  }
  $2 = $0;
  while (1) {
   HEAP8[$2 | 0] = HEAPU8[$1 | 0];
   HEAP8[$2 + 1 | 0] = HEAPU8[$1 + 1 | 0];
   HEAP8[$2 + 2 | 0] = HEAPU8[$1 + 2 | 0];
   HEAP8[$2 + 3 | 0] = HEAPU8[$1 + 3 | 0];
   $1 = $1 + 4 | 0;
   $2 = $2 + 4 | 0;
   if ($2 >>> 0 <= $4 >>> 0) {
    continue;
   }
   break;
  }
 }
 if ($2 >>> 0 < $3 >>> 0) {
  while (1) {
   HEAP8[$2 | 0] = HEAPU8[$1 | 0];
   $1 = $1 + 1 | 0;
   $2 = $2 + 1 | 0;
   if (($3 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
}
function tflite__reference_integer_ops__AddElementwise_28int_2c_20tflite__ArithmeticParams_20const__2c_20signed_20char_20const__2c_20signed_20char_20const__2c_20signed_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 + -64 | 0;
 global$0 = $5;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 HEAP32[$5 + 40 >> 2] = 127;
 label$1 : {
  if (HEAP32[HEAP32[$5 + 56 >> 2] + 4 >> 2] < -127) {
   break label$1;
  }
 }
 label$2 : {
  if (HEAP32[HEAP32[$5 + 56 >> 2] + 8 >> 2] < -127) {
   break label$2;
  }
 }
 label$3 : {
  if (HEAP32[HEAP32[$5 + 56 >> 2] + 4 >> 2] > 127) {
   break label$3;
  }
 }
 label$4 : {
  if (HEAP32[HEAP32[$5 + 56 >> 2] + 8 >> 2] > 127) {
   break label$4;
  }
 }
 HEAP32[$5 + 36 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 36 >> 2] < HEAP32[$5 + 60 >> 2]) {
   $0 = $5 + 4 | 0;
   HEAP32[$5 + 32 >> 2] = HEAP32[HEAP32[$5 + 56 >> 2] + 4 >> 2] + HEAP8[HEAP32[$5 + 52 >> 2] + HEAP32[$5 + 36 >> 2] | 0];
   HEAP32[$5 + 28 >> 2] = HEAP32[HEAP32[$5 + 56 >> 2] + 8 >> 2] + HEAP8[HEAP32[$5 + 48 >> 2] + HEAP32[$5 + 36 >> 2] | 0];
   HEAP32[$5 + 24 >> 2] = Math_imul(HEAP32[$5 + 32 >> 2], 1 << HEAP32[HEAP32[$5 + 56 >> 2] + 24 >> 2]);
   HEAP32[$5 + 20 >> 2] = Math_imul(HEAP32[$5 + 28 >> 2], 1 << HEAP32[HEAP32[$5 + 56 >> 2] + 24 >> 2]);
   HEAP32[$5 + 16 >> 2] = tflite__MultiplyByQuantizedMultiplierSmallerThanOneExp_28int_2c_20int_2c_20int_29(HEAP32[$5 + 24 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] + 28 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] + 32 >> 2]);
   HEAP32[$5 + 12 >> 2] = tflite__MultiplyByQuantizedMultiplierSmallerThanOneExp_28int_2c_20int_2c_20int_29(HEAP32[$5 + 20 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] + 36 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] + 40 >> 2]);
   HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 16 >> 2] + HEAP32[$5 + 12 >> 2];
   HEAP32[$5 + 4 >> 2] = tflite__MultiplyByQuantizedMultiplierSmallerThanOneExp_28int_2c_20int_2c_20int_29(HEAP32[$5 + 8 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] + 16 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] + 20 >> 2]) + HEAP32[HEAP32[$5 + 56 >> 2] + 12 >> 2];
   HEAP32[$5 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29(HEAP32[$5 + 56 >> 2] + 48 | 0, int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29(HEAP32[$5 + 56 >> 2] + 44 | 0, $0)) >> 2];
   HEAP8[HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 36 >> 2] | 0] = HEAP32[$5 >> 2];
   HEAP32[$5 + 36 >> 2] = HEAP32[$5 + 36 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 - -64 | 0;
}
function tflite__ops__micro__unpack___28anonymous_20namespace_29__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 20 >> 2];
 HEAP32[$2 + 12 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 label$1 : {
  label$2 : {
   $0 = HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + -1 | 0;
   if ($0 >>> 0 > 8) {
    break label$2;
   }
   label$3 : {
    switch ($0 - 1 | 0) {
    default:
     HEAP32[$2 + 28 >> 2] = TfLiteStatus_20tflite__ops__micro__unpack___28anonymous_20namespace_29__UnpackImpl_float__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor_20const__2c_20int_2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[HEAP32[$2 + 16 >> 2] >> 2], HEAP32[HEAP32[$2 + 16 >> 2] + 4 >> 2]);
     break label$1;
    case 0:
     HEAP32[$2 + 28 >> 2] = TfLiteStatus_20tflite__ops__micro__unpack___28anonymous_20namespace_29__UnpackImpl_int__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor_20const__2c_20int_2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[HEAP32[$2 + 16 >> 2] >> 2], HEAP32[HEAP32[$2 + 16 >> 2] + 4 >> 2]);
     break label$1;
    case 1:
     HEAP32[$2 + 28 >> 2] = TfLiteStatus_20tflite__ops__micro__unpack___28anonymous_20namespace_29__UnpackImpl_unsigned_20char__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor_20const__2c_20int_2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[HEAP32[$2 + 16 >> 2] >> 2], HEAP32[HEAP32[$2 + 16 >> 2] + 4 >> 2]);
     break label$1;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
     break label$2;
    case 7:
     break label$3;
    }
   }
   HEAP32[$2 + 28 >> 2] = TfLiteStatus_20tflite__ops__micro__unpack___28anonymous_20namespace_29__UnpackImpl_unsigned_20char__28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteTensor_20const__2c_20int_2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[HEAP32[$2 + 16 >> 2] >> 2], HEAP32[HEAP32[$2 + 16 >> 2] + 4 >> 2]);
   break label$1;
  }
  $0 = HEAP32[HEAP32[$2 + 24 >> 2] + 20 >> 2];
  $1 = HEAP32[$2 + 24 >> 2];
  HEAP32[$2 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 12 >> 2] >> 2]);
  FUNCTION_TABLE[$0]($1, 45067, $2);
  HEAP32[$2 + 28 >> 2] = 1;
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function tflite__reference_ops__AddElementwise_28int_2c_20tflite__ArithmeticParams_20const__2c_20unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 + -64 | 0;
 global$0 = $5;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 label$1 : {
  if (HEAP32[HEAP32[$5 + 56 >> 2] + 4 >> 2] <= -256) {
   break label$1;
  }
 }
 label$2 : {
  if (HEAP32[HEAP32[$5 + 56 >> 2] + 8 >> 2] <= -256) {
   break label$2;
  }
 }
 label$3 : {
  if (HEAP32[HEAP32[$5 + 56 >> 2] + 4 >> 2] >= 256) {
   break label$3;
  }
 }
 label$4 : {
  if (HEAP32[HEAP32[$5 + 56 >> 2] + 8 >> 2] >= 256) {
   break label$4;
  }
 }
 HEAP32[$5 + 40 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 40 >> 2] < HEAP32[$5 + 60 >> 2]) {
   $0 = $5 + 8 | 0;
   HEAP32[$5 + 36 >> 2] = HEAP32[HEAP32[$5 + 56 >> 2] + 4 >> 2] + HEAPU8[HEAP32[$5 + 52 >> 2] + HEAP32[$5 + 40 >> 2] | 0];
   HEAP32[$5 + 32 >> 2] = HEAP32[HEAP32[$5 + 56 >> 2] + 8 >> 2] + HEAPU8[HEAP32[$5 + 48 >> 2] + HEAP32[$5 + 40 >> 2] | 0];
   HEAP32[$5 + 28 >> 2] = Math_imul(HEAP32[$5 + 36 >> 2], 1 << HEAP32[HEAP32[$5 + 56 >> 2] + 24 >> 2]);
   HEAP32[$5 + 24 >> 2] = Math_imul(HEAP32[$5 + 32 >> 2], 1 << HEAP32[HEAP32[$5 + 56 >> 2] + 24 >> 2]);
   HEAP32[$5 + 20 >> 2] = tflite__MultiplyByQuantizedMultiplierSmallerThanOneExp_28int_2c_20int_2c_20int_29(HEAP32[$5 + 28 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] + 28 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] + 32 >> 2]);
   HEAP32[$5 + 16 >> 2] = tflite__MultiplyByQuantizedMultiplierSmallerThanOneExp_28int_2c_20int_2c_20int_29(HEAP32[$5 + 24 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] + 36 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] + 40 >> 2]);
   HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 20 >> 2] + HEAP32[$5 + 16 >> 2];
   HEAP32[$5 + 8 >> 2] = tflite__MultiplyByQuantizedMultiplierSmallerThanOneExp_28int_2c_20int_2c_20int_29(HEAP32[$5 + 12 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] + 16 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] + 20 >> 2]) + HEAP32[HEAP32[$5 + 56 >> 2] + 12 >> 2];
   HEAP32[$5 + 4 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29(HEAP32[$5 + 56 >> 2] + 48 | 0, int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29(HEAP32[$5 + 56 >> 2] + 44 | 0, $0)) >> 2];
   HEAP8[HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 40 >> 2] | 0] = HEAP32[$5 + 4 >> 2];
   HEAP32[$5 + 40 >> 2] = HEAP32[$5 + 40 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 - -64 | 0;
}
function jswrap_array_slice($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP32[$3 + 80 >> 2] = $2;
 HEAP32[$3 + 76 >> 2] = jsvGetLength(HEAP32[$3 + 88 >> 2]);
 HEAP32[$3 + 72 >> 2] = HEAP32[$3 + 76 >> 2];
 if (!(jsvIsUndefined(HEAP32[$3 + 80 >> 2]) & 1)) {
  HEAP32[$3 + 72 >> 2] = jsvGetInteger(HEAP32[$3 + 80 >> 2]);
 }
 HEAP32[$3 + 68 >> 2] = 0;
 HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 76 >> 2];
 HEAP32[$3 + 60 >> 2] = jsvNewWithFlags(3);
 label$2 : {
  if (!HEAP32[$3 + 60 >> 2]) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$2;
  }
  label$4 : {
   if (HEAP32[$3 + 84 >> 2] < 0) {
    $0 = $3;
    if ((HEAP32[$3 + 76 >> 2] + HEAP32[$3 + 84 >> 2] | 0) > 0) {
     $1 = HEAP32[$3 + 76 >> 2] + HEAP32[$3 + 84 >> 2] | 0;
    } else {
     $1 = 0;
    }
    HEAP32[$0 + 68 >> 2] = $1;
    break label$4;
   }
   $0 = $3;
   if (HEAP32[$3 + 84 >> 2] < HEAP32[$3 + 76 >> 2]) {
    $1 = HEAP32[$3 + 84 >> 2];
   } else {
    $1 = HEAP32[$3 + 76 >> 2];
   }
   HEAP32[$0 + 68 >> 2] = $1;
  }
  label$10 : {
   if (HEAP32[$3 + 72 >> 2] < 0) {
    $0 = $3;
    if ((HEAP32[$3 + 76 >> 2] + HEAP32[$3 + 72 >> 2] | 0) > 0) {
     $1 = HEAP32[$3 + 76 >> 2] + HEAP32[$3 + 72 >> 2] | 0;
    } else {
     $1 = 0;
    }
    HEAP32[$0 + 64 >> 2] = $1;
    break label$10;
   }
   $0 = $3;
   if (HEAP32[$3 + 72 >> 2] < HEAP32[$3 + 76 >> 2]) {
    $1 = HEAP32[$3 + 72 >> 2];
   } else {
    $1 = HEAP32[$3 + 76 >> 2];
   }
   HEAP32[$0 + 64 >> 2] = $1;
  }
  HEAP8[$3 + 59 | 0] = 0;
  jsvIteratorNew($3 + 8 | 0, HEAP32[$3 + 88 >> 2], 1);
  while (1) {
   if (jsvIteratorHasElement($3 + 8 | 0) & 1) {
    $0 = HEAPU8[$3 + 59 | 0] ^ -1;
   } else {
    $0 = 0;
   }
   if ($0 & 1) {
    HEAP32[$3 + 4 >> 2] = jsvGetIntegerAndUnLock(jsvIteratorGetKey($3 + 8 | 0));
    label$20 : {
     if (HEAP32[$3 + 4 >> 2] < HEAP32[$3 + 68 >> 2]) {
      jsvIteratorNext($3 + 8 | 0);
      break label$20;
     }
     label$22 : {
      if (HEAP32[$3 + 68 >> 2] < HEAP32[$3 + 64 >> 2]) {
       $0 = $3 + 8 | 0;
       jsvArrayPushAndUnLock(HEAP32[$3 + 60 >> 2], jsvIteratorGetValue($0));
       jsvIteratorNext($0);
       HEAP32[$3 + 68 >> 2] = HEAP32[$3 + 68 >> 2] + 1;
       break label$22;
      }
      HEAP8[$3 + 59 | 0] = 1;
     }
    }
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 8 | 0);
  HEAP32[$3 + 92 >> 2] = HEAP32[$3 + 60 >> 2];
 }
 global$0 = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}
function jswrap_graphics_createCallback($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 128 | 0;
 global$0 = $4;
 HEAP32[$4 + 120 >> 2] = $0;
 HEAP32[$4 + 116 >> 2] = $1;
 HEAP32[$4 + 112 >> 2] = $2;
 HEAP32[$4 + 108 >> 2] = $3;
 label$1 : {
  label$2 : {
   if (!(HEAP32[$4 + 120 >> 2] <= 0 | HEAP32[$4 + 116 >> 2] <= 0 | HEAP32[$4 + 120 >> 2] > 32767)) {
    if (HEAP32[$4 + 116 >> 2] <= 32767) {
     break label$2;
    }
   }
   jsExceptionHere(1, 38468, 0);
   HEAP32[$4 + 124 >> 2] = 0;
   break label$1;
  }
  if (!(isValidBPP(HEAP32[$4 + 112 >> 2]) & 1)) {
   jsExceptionHere(1, 38481, 0);
   HEAP32[$4 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 104 >> 2] = 0;
  HEAP32[$4 + 100 >> 2] = 0;
  label$5 : {
   if (jsvIsObject(HEAP32[$4 + 108 >> 2]) & 1) {
    jsvUnLock(HEAP32[$4 + 104 >> 2]);
    HEAP32[$4 + 104 >> 2] = jsvObjectGetChild(HEAP32[$4 + 108 >> 2], 38713, 0);
    HEAP32[$4 + 100 >> 2] = jsvObjectGetChild(HEAP32[$4 + 108 >> 2], 38722, 0);
    break label$5;
   }
   HEAP32[$4 + 104 >> 2] = jsvLockAgain(HEAP32[$4 + 108 >> 2]);
  }
  if (!(jsvIsFunction(HEAP32[$4 + 104 >> 2]) & 1)) {
   HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 104 >> 2];
   jsExceptionHere(1, 38731, $4 + 16 | 0);
   jsvUnLock2(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2]);
   HEAP32[$4 + 124 >> 2] = 0;
   break label$1;
  }
  label$8 : {
   if (jsvIsUndefined(HEAP32[$4 + 100 >> 2]) & 1) {
    break label$8;
   }
   if (jsvIsFunction(HEAP32[$4 + 100 >> 2]) & 1) {
    break label$8;
   }
   HEAP32[$4 >> 2] = HEAP32[$4 + 100 >> 2];
   jsExceptionHere(1, 38731, $4);
   jsvUnLock2(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2]);
   HEAP32[$4 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 96 >> 2] = jspNewObject(0, 38493);
  if (!HEAP32[$4 + 96 >> 2]) {
   HEAP32[$4 + 124 >> 2] = 0;
   break label$1;
  }
  $1 = $4 + 24 | 0;
  graphicsStructInit($1, HEAP32[$4 + 120 >> 2], HEAP32[$4 + 116 >> 2], HEAP32[$4 + 112 >> 2]);
  HEAP8[$4 + 28 | 0] = 1;
  HEAP8[$4 + 29 | 0] = 0;
  HEAP8[$4 + 30 | 0] = 0;
  HEAP8[$4 + 31 | 0] = 0;
  $0 = HEAP32[$4 + 96 >> 2];
  HEAP8[$4 + 24 | 0] = $0;
  HEAP8[$4 + 25 | 0] = $0 >>> 8;
  HEAP8[$4 + 26 | 0] = $0 >>> 16;
  HEAP8[$4 + 27 | 0] = $0 >>> 24;
  lcdInit_JS($1, HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2]);
  graphicsSetVar($1);
  jsvUnLock2(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2]);
  HEAP32[$4 + 124 >> 2] = HEAP32[$4 + 96 >> 2];
 }
 global$0 = $4 + 128 | 0;
 return HEAP32[$4 + 124 >> 2];
}
function heatshrink_encoder_poll($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = 128;
 HEAP32[$3 + 28 >> 2] = $2;
 label$1 : {
  if (!(HEAP32[$3 + 28 >> 2] ? !(!HEAP32[$3 + 40 >> 2] | !HEAP32[$3 + 36 >> 2]) : 0)) {
   HEAP32[$3 + 44 >> 2] = -1;
   break label$1;
  }
  if (!HEAP32[$3 + 32 >> 2]) {
   HEAP32[$3 + 44 >> 2] = -2;
   break label$1;
  }
  HEAP32[HEAP32[$3 + 28 >> 2] >> 2] = 0;
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 36 >> 2];
  HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 32 >> 2];
  HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 28 >> 2];
  while (1) {
   HEAP8[$3 + 15 | 0] = HEAPU8[HEAP32[$3 + 40 >> 2] + 12 | 0];
   label$6 : {
    $0 = HEAPU8[$3 + 15 | 0];
    if ($0 >>> 0 <= 9) {
     label$8 : {
      switch ($0 - 1 | 0) {
      default:
       HEAP32[$3 + 44 >> 2] = 0;
       break label$1;
      case 0:
       do_indexing(HEAP32[$3 + 40 >> 2]);
       HEAP8[HEAP32[$3 + 40 >> 2] + 12 | 0] = 2;
       break label$6;
      case 1:
       $0 = st_step_search(HEAP32[$3 + 40 >> 2]);
       HEAP8[HEAP32[$3 + 40 >> 2] + 12 | 0] = $0;
       break label$6;
      case 2:
       $0 = st_yield_tag_bit(HEAP32[$3 + 40 >> 2], $3 + 16 | 0);
       HEAP8[HEAP32[$3 + 40 >> 2] + 12 | 0] = $0;
       break label$6;
      case 3:
       $0 = st_yield_literal(HEAP32[$3 + 40 >> 2], $3 + 16 | 0);
       HEAP8[HEAP32[$3 + 40 >> 2] + 12 | 0] = $0;
       break label$6;
      case 4:
       $0 = st_yield_br_index(HEAP32[$3 + 40 >> 2], $3 + 16 | 0);
       HEAP8[HEAP32[$3 + 40 >> 2] + 12 | 0] = $0;
       break label$6;
      case 5:
       $0 = st_yield_br_length(HEAP32[$3 + 40 >> 2], $3 + 16 | 0);
       HEAP8[HEAP32[$3 + 40 >> 2] + 12 | 0] = $0;
       break label$6;
      case 6:
       $0 = st_save_backlog(HEAP32[$3 + 40 >> 2]);
       HEAP8[HEAP32[$3 + 40 >> 2] + 12 | 0] = $0;
       break label$6;
      case 7:
       $0 = st_flush_bit_buffer(HEAP32[$3 + 40 >> 2], $3 + 16 | 0);
       HEAP8[HEAP32[$3 + 40 >> 2] + 12 | 0] = $0;
       break;
      case 8:
       break label$8;
      }
     }
     HEAP32[$3 + 44 >> 2] = 0;
     break label$1;
    }
    HEAP32[$3 + 44 >> 2] = -2;
    break label$1;
   }
   if (HEAPU8[HEAP32[$3 + 40 >> 2] + 12 | 0] == HEAPU8[$3 + 15 | 0]) {
    if (HEAP32[HEAP32[$3 + 28 >> 2] >> 2] == HEAP32[$3 + 32 >> 2]) {
     HEAP32[$3 + 44 >> 2] = 1;
     break label$1;
    }
   }
   continue;
  }
 }
 global$0 = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}
function jsvSetValueOfName($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1 : {
  if (jsvIsNameWithValue(HEAP32[$2 + 24 >> 2]) & 1) {
   label$3 : {
    if (jsvIsString(HEAP32[$2 + 24 >> 2]) & 1) {
     $0 = HEAPU16[HEAP32[$2 + 24 >> 2] + 14 >> 1] & 65472;
     $1 = jsvGetCharactersInVar(HEAP32[$2 + 24 >> 2]);
     HEAP16[HEAP32[$2 + 24 >> 2] + 14 >> 1] = $0 | $1 + 22;
     break label$3;
    }
    HEAP16[HEAP32[$2 + 24 >> 2] + 14 >> 1] = HEAPU16[HEAP32[$2 + 24 >> 2] + 14 >> 1] & 65472 | 14;
   }
   jsvSetFirstChild(HEAP32[$2 + 24 >> 2], 0);
   break label$1;
  }
  if (jsvGetFirstChild(HEAP32[$2 + 24 >> 2]) & 65535) {
   jsvUnRefRef(jsvGetFirstChild(HEAP32[$2 + 24 >> 2]) & 65535);
  }
 }
 label$6 : {
  if (HEAP32[$2 + 20 >> 2]) {
   label$8 : {
    if (jsvIsInt(HEAP32[$2 + 24 >> 2]) & 1) {
     if (!(jsvIsInt(HEAP32[$2 + 20 >> 2]) & 1)) {
      if (!(jsvIsBoolean(HEAP32[$2 + 20 >> 2]) & 1)) {
       break label$8;
      }
     }
     if (jsvIsPin(HEAP32[$2 + 20 >> 2]) & 1) {
      break label$8;
     }
     HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] >> 2];
     if (!(HEAP32[$2 + 16 >> 2] < -32768 | HEAP32[$2 + 16 >> 2] > 32767)) {
      $0 = HEAPU16[HEAP32[$2 + 24 >> 2] + 14 >> 1] & 65472;
      $1 = jsvIsInt(HEAP32[$2 + 20 >> 2]);
      HEAP16[HEAP32[$2 + 24 >> 2] + 14 >> 1] = $0 | ($1 & 1 ? 15 : 16);
      jsvSetFirstChild(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 16 >> 2] & 65535);
      break label$6;
     }
     break label$8;
    }
    if (jsvIsString(HEAP32[$2 + 24 >> 2]) & 1) {
     label$13 : {
      if (!(jsvIsInt(HEAP32[$2 + 20 >> 2]) & 1)) {
       break label$13;
      }
      if (jsvIsPin(HEAP32[$2 + 20 >> 2]) & 1) {
       break label$13;
      }
      HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] >> 2];
      if (!(HEAP32[$2 + 12 >> 2] < -32768 | HEAP32[$2 + 12 >> 2] > 32767)) {
       $0 = HEAPU16[HEAP32[$2 + 24 >> 2] + 14 >> 1] & 65472;
       $1 = jsvGetCharactersInVar(HEAP32[$2 + 24 >> 2]);
       HEAP16[HEAP32[$2 + 24 >> 2] + 14 >> 1] = $0 | $1 + 17;
       jsvSetFirstChild(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 12 >> 2] & 65535);
       break label$6;
      }
     }
    }
   }
   jsvSetFirstChild(HEAP32[$2 + 24 >> 2], jsvGetRef(jsvRef(HEAP32[$2 + 20 >> 2])) & 65535);
   break label$6;
  }
  jsvSetFirstChild(HEAP32[$2 + 24 >> 2], 0);
 }
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 24 >> 2];
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function stringToIntWithRadix($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 + -64 | 0;
 global$0 = $4;
 HEAP32[$4 + 52 >> 2] = $0;
 HEAP32[$4 + 48 >> 2] = $1;
 HEAP32[$4 + 44 >> 2] = $2;
 HEAP32[$4 + 40 >> 2] = $3;
 while (1) {
  if (isWhitespace(HEAP8[HEAP32[$4 + 52 >> 2]]) & 1) {
   HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP8[$4 + 39 | 0] = 0;
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$4 + 28 >> 2] = 0;
 label$3 : {
  if (HEAP8[HEAP32[$4 + 52 >> 2]] == 45) {
   HEAP8[$4 + 39 | 0] = 1;
   HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
   break label$3;
  }
  if (HEAP8[HEAP32[$4 + 52 >> 2]] == 43) {
   HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
  }
 }
 HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 52 >> 2];
 if (HEAP32[$4 + 40 >> 2]) {
  HEAP32[HEAP32[$4 + 40 >> 2] >> 2] = HEAP32[$4 + 52 >> 2];
 }
 $0 = $4;
 if (HEAP32[$4 + 48 >> 2]) {
  $1 = HEAP32[$4 + 48 >> 2];
 } else {
  $1 = getRadix($4 + 52 | 0, HEAP32[$4 + 44 >> 2]);
 }
 HEAP32[$0 + 16 >> 2] = $1;
 label$9 : {
  if (!HEAP32[$4 + 16 >> 2]) {
   HEAP32[$4 + 56 >> 2] = 0;
   HEAP32[$4 + 60 >> 2] = 0;
   break label$9;
  }
  while (1) {
   label$12 : {
    if (!HEAPU8[HEAP32[$4 + 52 >> 2]]) {
     break label$12;
    }
    HEAP32[$4 + 12 >> 2] = chtod(HEAP8[HEAP32[$4 + 52 >> 2]]);
    if (HEAP32[$4 + 12 >> 2] < 0 | HEAP32[$4 + 12 >> 2] >= HEAP32[$4 + 16 >> 2]) {
     break label$12;
    }
    $0 = HEAP32[$4 + 12 >> 2];
    $3 = $0;
    $2 = $0 >> 31;
    $0 = HEAP32[$4 + 16 >> 2];
    $0 = __wasm_i64_mul(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 28 >> 2], $0, $0 >> 31);
    $2 = i64toi32_i32$HIGH_BITS + $2 | 0;
    $3 = $0 + $3 | 0;
    if ($3 >>> 0 < $0 >>> 0) {
     $2 = $2 + 1 | 0;
    }
    HEAP32[$4 + 24 >> 2] = $3;
    HEAP32[$4 + 28 >> 2] = $2;
    HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$4 + 44 >> 2]) {
   HEAP8[HEAP32[$4 + 44 >> 2]] = HEAP32[$4 + 52 >> 2] == HEAP32[$4 + 20 >> 2];
  }
  if (HEAP32[$4 + 40 >> 2]) {
   HEAP32[HEAP32[$4 + 40 >> 2] >> 2] = HEAP32[$4 + 52 >> 2];
  }
  if (HEAP8[$4 + 39 | 0] & 1) {
   $0 = HEAP32[$4 + 24 >> 2];
   $1 = 0 - (HEAP32[$4 + 28 >> 2] + (0 < $0 >>> 0) | 0) | 0;
   HEAP32[$4 + 56 >> 2] = 0 - $0;
   HEAP32[$4 + 60 >> 2] = $1;
   break label$9;
  }
  $0 = HEAP32[$4 + 28 >> 2];
  HEAP32[$4 + 56 >> 2] = HEAP32[$4 + 24 >> 2];
  HEAP32[$4 + 60 >> 2] = $0;
 }
 global$0 = $4 - -64 | 0;
 i64toi32_i32$HIGH_BITS = HEAP32[$4 + 60 >> 2];
 return HEAP32[$4 + 56 >> 2];
}
function tflite__ops__micro__fully_connected__EvalQuantizedInt8_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteFullyConnectedParams__2c_20tflite__ops__micro__fully_connected___28anonymous_20namespace_29__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0;
 $8 = global$0 - 176 | 0;
 global$0 = $8;
 HEAP32[$8 + 172 >> 2] = $0;
 HEAP32[$8 + 168 >> 2] = $1;
 HEAP32[$8 + 164 >> 2] = $2;
 HEAP32[$8 + 160 >> 2] = $3;
 HEAP32[$8 + 156 >> 2] = $4;
 HEAP32[$8 + 152 >> 2] = $5;
 HEAP32[$8 + 148 >> 2] = $6;
 HEAP32[$8 + 144 >> 2] = $7;
 HEAP32[$8 + 104 >> 2] = 0 - HEAP32[HEAP32[$8 + 156 >> 2] + 16 >> 2];
 HEAP32[$8 + 108 >> 2] = 0 - HEAP32[HEAP32[$8 + 152 >> 2] + 16 >> 2];
 HEAP32[$8 + 112 >> 2] = HEAP32[HEAP32[$8 + 144 >> 2] + 16 >> 2];
 HEAP32[$8 + 116 >> 2] = HEAP32[HEAP32[$8 + 160 >> 2] >> 2];
 HEAP32[$8 + 120 >> 2] = 0 - HEAP32[HEAP32[$8 + 160 >> 2] + 4 >> 2];
 HEAP32[$8 + 124 >> 2] = HEAP32[HEAP32[$8 + 160 >> 2] + 8 >> 2];
 HEAP32[$8 + 128 >> 2] = HEAP32[HEAP32[$8 + 160 >> 2] + 12 >> 2];
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 80 | 0, HEAP32[$8 + 156 >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 156 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 48 | 0, HEAP32[$8 + 152 >> 2]);
 $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 152 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 24 | 0, HEAP32[$8 + 148 >> 2]);
 $2 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 148 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8, HEAP32[$8 + 144 >> 2]);
 tflite__reference_integer_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($8 + 104 | 0, $8 + 80 | 0, $0, $8 + 48 | 0, $1, $8 + 24 | 0, $2, $8, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 144 >> 2]));
 $0 = $8 + 80 | 0;
 $1 = $8 + 48 | 0;
 $2 = $8 + 24 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($8);
 tflite__RuntimeShape___RuntimeShape_28_29($2);
 tflite__RuntimeShape___RuntimeShape_28_29($1);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $8 + 176 | 0;
 return 0;
}
function lcdGetPixel_ArrayBuffer($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 $4 = $3 + 32 | 0;
 HEAP32[$3 + 92 >> 2] = $0;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP32[$3 + 84 >> 2] = $2;
 HEAP32[$3 + 80 >> 2] = 0;
 $0 = HEAP32[$3 + 92 >> 2];
 HEAP32[$3 + 76 >> 2] = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
 HEAP32[$3 + 72 >> 2] = lcdGetPixelIndex_ArrayBuffer(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2], HEAP32[$3 + 84 >> 2], 1);
 jsvArrayBufferIteratorNew($4, HEAP32[$3 + 76 >> 2], HEAP32[$3 + 72 >> 2] >>> 3);
 label$1 : {
  if (HEAPU8[HEAP32[$3 + 92 >> 2] + 16 | 0] & 7) {
   HEAP32[$3 + 72 >> 2] = HEAP32[$3 + 72 >> 2] & 7;
   HEAP32[$3 + 28 >> 2] = (1 << HEAPU8[HEAP32[$3 + 92 >> 2] + 16 | 0]) - 1;
   HEAP32[$3 + 24 >> 2] = jsvArrayBufferIteratorGetIntegerValue($3 + 32 | 0);
   $0 = $3;
   $1 = HEAP32[$3 + 92 >> 2];
   $2 = 8 - (HEAP32[$3 + 72 >> 2] + HEAPU8[HEAP32[$3 + 92 >> 2] + 16 | 0] | 0) | 0;
   label$3 : {
    if ((HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24)) & 4) {
     break label$3;
    }
    $2 = HEAP32[$3 + 72 >> 2];
   }
   HEAP32[$0 + 20 >> 2] = $2;
   HEAP32[$3 + 80 >> 2] = HEAP32[$3 + 28 >> 2] & HEAP32[$3 + 24 >> 2] >>> HEAP32[$3 + 20 >> 2];
   break label$1;
  }
  $0 = HEAP32[$3 + 92 >> 2];
  label$5 : {
   if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
    HEAP32[$3 + 16 >> 2] = HEAPU8[HEAP32[$3 + 92 >> 2] + 16 | 0] - 8;
    while (1) {
     if (HEAP32[$3 + 16 >> 2] >= 0) {
      $0 = $3 + 32 | 0;
      HEAP32[$3 + 80 >> 2] = jsvArrayBufferIteratorGetIntegerValue($0) << HEAP32[$3 + 16 >> 2] | HEAP32[$3 + 80 >> 2];
      jsvArrayBufferIteratorNext($0);
      HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] - 8;
      continue;
     }
     break;
    }
    break label$5;
   }
   HEAP32[$3 + 12 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 12 >> 2] < HEAPU8[HEAP32[$3 + 92 >> 2] + 16 | 0]) {
     $0 = $3 + 32 | 0;
     HEAP32[$3 + 80 >> 2] = jsvArrayBufferIteratorGetIntegerValue($0) << HEAP32[$3 + 12 >> 2] | HEAP32[$3 + 80 >> 2];
     jsvArrayBufferIteratorNext($0);
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 8;
     continue;
    }
    break;
   }
  }
 }
 jsvArrayBufferIteratorFree($3 + 32 | 0);
 global$0 = $3 + 96 | 0;
 return HEAP32[$3 + 80 >> 2];
}
function jswGetSymbolListForObjectProto($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (jsvIsNativeFunction(HEAP32[$1 + 8 >> 2]) & 1) {
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 41) {
    HEAP32[$1 + 12 >> 2] = 16507;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 55) {
    HEAP32[$1 + 12 >> 2] = 16525;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 56) {
    HEAP32[$1 + 12 >> 2] = 16534;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 57) {
    HEAP32[$1 + 12 >> 2] = 16651;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 46) {
    HEAP32[$1 + 12 >> 2] = 16669;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 58) {
    HEAP32[$1 + 12 >> 2] = 16696;
    break label$1;
   }
   if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 51) {
    HEAP32[$1 + 12 >> 2] = 16831;
    break label$1;
   }
  }
  $0 = $1;
  label$10 : {
   if (jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1) {
    $2 = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAP32[$1 + 8 >> 2], 16922, 0));
    break label$10;
   }
   $2 = 0;
  }
  HEAP32[$0 + 4 >> 2] = $2;
  label$12 : {
   if (!HEAP32[$1 + 4 >> 2]) {
    break label$12;
   }
   if (!(jsvIsNativeFunction(HEAP32[$1 + 4 >> 2]) & 1)) {
    break label$12;
   }
   HEAP32[$1 >> 2] = jswGetSymbolListForConstructorProto(HEAP32[$1 + 4 >> 2]);
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   if (HEAP32[$1 >> 2]) {
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
    break label$1;
   }
  }
  if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 16507;
   break label$1;
  }
  if (!(!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) | HEAPU16[HEAP32[$1 + 8 >> 2] + 4 >> 1] != 129)) {
   HEAP32[$1 + 12 >> 2] = 16525;
   break label$1;
  }
  if (!(!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) | HEAPU16[HEAP32[$1 + 8 >> 2] + 4 >> 1] == 129)) {
   HEAP32[$1 + 12 >> 2] = 16534;
   break label$1;
  }
  if (jsvIsPin(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 16651;
   break label$1;
  }
  if (jsvIsNumeric(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 16669;
   break label$1;
  }
  if (jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 16696;
   break label$1;
  }
  if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 16831;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 16678;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jswrap_function_replaceWith($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1 : {
  label$2 : {
   if (jsvIsFunction(HEAP32[$2 + 28 >> 2]) & 1) {
    if (jsvIsFunction(HEAP32[$2 + 24 >> 2]) & 1) {
     break label$2;
    }
   }
   jsExceptionHere(3, 35609, 0);
   break label$1;
  }
  if ((jsvIsNativeFunction(HEAP32[$2 + 28 >> 2]) & 1) != (jsvIsNativeFunction(HEAP32[$2 + 24 >> 2]) & 1)) {
   label$5 : {
    if (jsvIsNativeFunction(HEAP32[$2 + 24 >> 2]) & 1) {
     $0 = HEAP32[$2 + 28 >> 2];
     HEAP16[$0 + 14 >> 1] = HEAPU16[$0 + 14 >> 1] | 64;
     break label$5;
    }
    $0 = HEAP32[$2 + 28 >> 2];
    HEAP16[$0 + 14 >> 1] = HEAPU16[$0 + 14 >> 1] & -65;
   }
  }
  if ((jsvIsFunctionReturn(HEAP32[$2 + 28 >> 2]) & 1) != (jsvIsFunctionReturn(HEAP32[$2 + 24 >> 2]) & 1)) {
   label$8 : {
    if (jsvIsFunctionReturn(HEAP32[$2 + 24 >> 2]) & 1) {
     HEAP16[HEAP32[$2 + 28 >> 2] + 14 >> 1] = HEAPU16[HEAP32[$2 + 28 >> 2] + 14 >> 1] & -64 | 8;
     break label$8;
    }
    HEAP16[HEAP32[$2 + 28 >> 2] + 14 >> 1] = HEAPU16[HEAP32[$2 + 28 >> 2] + 14 >> 1] & -64 | 7;
   }
  }
  $0 = $2 + 8 | 0;
  HEAP32[$2 + 20 >> 2] = jsvFindChildFromString(HEAP32[$2 + 28 >> 2], 35639, 0);
  HEAP32[$2 + 16 >> 2] = jsvFindChildFromString(HEAP32[$2 + 28 >> 2], 35644, 0);
  jsvRemoveAllChildren(HEAP32[$2 + 28 >> 2]);
  jsvObjectIteratorNew($0, HEAP32[$2 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($2 + 8 | 0) & 1) {
    $0 = $2 + 8 | 0;
    HEAP32[$2 + 4 >> 2] = jsvObjectIteratorGetKey($0);
    jsvObjectIteratorNext($0);
    label$12 : {
     if (jsvIsStringEqual(HEAP32[$2 + 4 >> 2], 35639) & 1) {
      break label$12;
     }
     if (jsvIsStringEqual(HEAP32[$2 + 4 >> 2], 35644) & 1) {
      break label$12;
     }
     HEAP32[$2 >> 2] = jsvCopy(HEAP32[$2 + 4 >> 2], 1);
     if (HEAP32[$2 >> 2]) {
      jsvAddName(HEAP32[$2 + 28 >> 2], HEAP32[$2 >> 2]);
      jsvUnLock(HEAP32[$2 >> 2]);
     }
    }
    jsvUnLock(HEAP32[$2 + 4 >> 2]);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($2 + 8 | 0);
  if (HEAP32[$2 + 20 >> 2]) {
   jsvAddName(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2]);
  }
  jsvUnLock(HEAP32[$2 + 20 >> 2]);
  if (HEAP32[$2 + 16 >> 2]) {
   jsvAddName(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 16 >> 2]);
  }
  jsvUnLock(HEAP32[$2 + 16 >> 2]);
 }
 global$0 = $2 + 32 | 0;
}
function jsiHandleNewLine($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP8[$1 + 31 | 0] = $0;
 label$1 : {
  if (jsiAtEndOfInputLine() & 1) {
   label$3 : {
    if (!(HEAP8[$1 + 31 | 0] & 1)) {
     break label$3;
    }
    if ((jsiCountBracketsInInput() | 0) > 0) {
     break label$3;
    }
    if (jsiShowInputLine() & 1) {
     jsiConsolePrintString(5719);
    }
    if (!(HEAPU16[47566] & 2)) {
     HEAP8[95140] = 1;
    }
    HEAP32[$1 + 24 >> 2] = jsvStringTrimRight(HEAP32[23784]);
    jsiClearInputLine(0);
    label$6 : {
     if (HEAPU16[47566] & 8) {
      jsiDebuggerLine(HEAP32[$1 + 24 >> 2]);
      jsiHistoryAddLine(HEAP32[$1 + 24 >> 2]);
      jsvUnLock(HEAP32[$1 + 24 >> 2]);
      break label$6;
     }
     HEAP32[$1 + 20 >> 2] = jspEvaluateVar(HEAP32[$1 + 24 >> 2], 0, HEAPU16[47578]);
     HEAP8[$1 + 19 | 0] = jsvIsEmptyString(HEAP32[$1 + 24 >> 2]) & 1;
     if (!(HEAP8[$1 + 19 | 0] & 1)) {
      jsiHistoryAddLine(HEAP32[$1 + 24 >> 2]);
     }
     jsvUnLock(HEAP32[$1 + 24 >> 2]);
     HEAP16[47578] = 0;
     label$9 : {
      if (!(jsiEcho() & 1)) {
       break label$9;
      }
      if (jspHasError() & 1 | HEAP8[$1 + 19 | 0] & 1) {
       break label$9;
      }
      jsiConsolePrintChar(61);
      jsfPrintJSON(HEAP32[$1 + 20 >> 2], 813);
      jsiConsolePrintString(5719);
     }
     jsvUnLock(HEAP32[$1 + 20 >> 2]);
    }
    jsiCheckErrors();
    HEAP16[47566] = HEAPU16[47566] & -3;
    break label$1;
   }
   if (jsiShowInputLine() & 1) {
    jsiConsolePrintString(5906);
   }
   jsiIsAboutToEditInputLine();
   jsiAppendToInputLine(5719);
   HEAP32[23786] = HEAP32[23786] + 1;
   break label$1;
  }
  jsiIsAboutToEditInputLine();
  if (jsiShowInputLine() & 1) {
   jsiConsolePrintString(5202);
  }
  HEAP32[$1 + 12 >> 2] = jsvNewFromEmptyString();
  if (HEAPU32[23786] > 0) {
   jsvAppendStringVar(HEAP32[$1 + 12 >> 2], HEAP32[23784], 0, HEAP32[23786]);
  }
  jsvAppendCharacter(HEAP32[$1 + 12 >> 2], 10);
  jsvAppendStringVar(HEAP32[$1 + 12 >> 2], HEAP32[23784], HEAP32[23786], 2147483647);
  jsiInputLineCursorMoved();
  jsvUnLock(HEAP32[23784]);
  HEAP32[23784] = HEAP32[$1 + 12 >> 2];
  if (jsiShowInputLine() & 1) {
   jsiConsolePrintStringVarWithNewLineChar(HEAP32[23784], HEAP32[23786], 58);
   jsiMoveCursorChar(HEAP32[23784], jsvGetStringLength(HEAP32[23784]), HEAP32[23786] + 1 | 0);
  }
  HEAP32[23786] = HEAP32[23786] + 1;
 }
 global$0 = $1 + 32 | 0;
}
function jshFromDeviceString($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (HEAP8[HEAP32[$1 + 8 >> 2]] == 76) {
   if (!strcmp(HEAP32[$1 + 8 >> 2] + 1 | 0, 7349)) {
    HEAP8[$1 + 15 | 0] = 17;
    break label$1;
   }
   if (!strcmp(HEAP32[$1 + 8 >> 2] + 1 | 0, 7358)) {
    HEAP8[$1 + 15 | 0] = 18;
    break label$1;
   }
  }
  if (!(HEAP8[HEAP32[$1 + 8 >> 2]] != 85 | HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] != 83 | (HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] | HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] != 66))) {
   HEAP8[$1 + 15 | 0] = 21;
   break label$1;
  }
  label$6 : {
   if (HEAP8[HEAP32[$1 + 8 >> 2]] == 84) {
    if (!strcmp(HEAP32[$1 + 8 >> 2] + 1 | 0, 7367)) {
     HEAP8[$1 + 15 | 0] = 20;
     break label$1;
    }
    break label$6;
   }
   label$9 : {
    if (HEAP8[HEAP32[$1 + 8 >> 2]] == 83) {
     label$11 : {
      if (HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] != 101 | HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] != 114 | (HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] != 105 | HEAP8[HEAP32[$1 + 8 >> 2] + 4 | 0] != 97)) {
       break label$11;
      }
      if (HEAP8[HEAP32[$1 + 8 >> 2] + 5 | 0] != 108 | HEAP8[HEAP32[$1 + 8 >> 2] + 6 | 0] < 49 | (HEAP8[HEAP32[$1 + 8 >> 2] + 7 | 0] | (HEAP8[HEAP32[$1 + 8 >> 2] + 6 | 0] - 49 | 0) >= 1)) {
       break label$11;
      }
      HEAP8[$1 + 15 | 0] = HEAP8[HEAP32[$1 + 8 >> 2] + 6 | 0] + -27;
      break label$1;
     }
     label$12 : {
      if (HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] != 80 | HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] != 73 | (HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] < 49 | (HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] - 49 | 0) >= 1)) {
       break label$12;
      }
      if (HEAP8[HEAP32[$1 + 8 >> 2] + 4 | 0]) {
       break label$12;
      }
      HEAP8[$1 + 15 | 0] = HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] + -25;
      break label$1;
     }
     break label$9;
    }
    label$13 : {
     if (HEAP8[HEAP32[$1 + 8 >> 2]] != 73 | HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] != 50 | (HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] != 67 | HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] < 49)) {
      break label$13;
     }
     if (HEAP8[HEAP32[$1 + 8 >> 2] + 4 | 0] | (HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] - 49 | 0) >= 1) {
      break label$13;
     }
     HEAP8[$1 + 15 | 0] = HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] + -24;
     break label$1;
    }
   }
  }
  HEAP8[$1 + 15 | 0] = 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAPU8[$1 + 15 | 0];
}
function jswrap_waveform_idle() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 80 | 0;
 global$0 = $0;
 HEAP32[$0 + 76 >> 2] = jsvObjectGetChild(HEAP32[23775], 37454, 0);
 if (HEAP32[$0 + 76 >> 2]) {
  jsvObjectIteratorNew($0 + 72 | 0, HEAP32[$0 + 76 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($0 + 72 | 0) & 1) {
    HEAP32[$0 + 68 >> 2] = jsvObjectIteratorGetValue($0 + 72 | 0);
    HEAP8[$0 + 67 | 0] = jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$0 + 68 >> 2], 37459, 0)) & 1;
    if (HEAP8[$0 + 67 | 0] & 1) {
     $1 = $0 + 24 | 0;
     HEAP32[$0 + 60 >> 2] = jswrap_waveform_getBuffer(HEAP32[$0 + 68 >> 2], 0, 0);
     label$5 : {
      if (!(jstGetLastBufferTimerTask(HEAP32[$0 + 60 >> 2], $1) & 1)) {
       $1 = $0 + 20 | 0;
       HEAP32[$0 + 20 >> 2] = jsvObjectGetChild(HEAP32[$0 + 68 >> 2], 37467, 0);
       jsiQueueObjectCallbacks(HEAP32[$0 + 68 >> 2], 37474, $1, 1);
       jsvUnLock(HEAP32[$0 + 20 >> 2]);
       HEAP8[$0 + 67 | 0] = 0;
       jsvObjectSetChildAndUnLock(HEAP32[$0 + 68 >> 2], 37459, jsvNewFromBool(HEAP8[$0 + 67 | 0] & 1));
       break label$5;
      }
      if (!(!(HEAPU8[$0 + 42 | 0] | HEAPU8[$0 + 43 | 0] << 8) | (HEAPU8[$0 + 42 | 0] | HEAPU8[$0 + 43 | 0] << 8) == (HEAPU8[$0 + 40 | 0] | HEAPU8[$0 + 41 | 0] << 8))) {
       HEAP32[$0 + 16 >> 2] = (jsvGetRef(HEAP32[$0 + 60 >> 2]) & 65535) == (HEAPU8[$0 + 40 | 0] | HEAPU8[$0 + 41 | 0] << 8) ? 0 : 1;
       HEAP32[$0 + 12 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$0 + 68 >> 2], 37484, 9));
       if (HEAP32[$0 + 12 >> 2] != HEAP32[$0 + 16 >> 2]) {
        $1 = $0 + 8 | 0;
        jsvObjectSetChildAndUnLock(HEAP32[$0 + 68 >> 2], 37484, jsvNewFromInteger(HEAP32[$0 + 16 >> 2]));
        HEAP32[$0 + 8 >> 2] = jsvObjectGetChild(HEAP32[$0 + 68 >> 2], HEAP32[$0 + 16 >> 2] ? 37467 : 37498, 0);
        jsiQueueObjectCallbacks(HEAP32[$0 + 68 >> 2], 37506, $1, 1);
        jsvUnLock(HEAP32[$0 + 8 >> 2]);
       }
      }
     }
     jsvUnLock(HEAP32[$0 + 60 >> 2]);
    }
    jsvUnLock(HEAP32[$0 + 68 >> 2]);
    label$9 : {
     if (!(HEAP8[$0 + 67 | 0] & 1)) {
      jsvObjectIteratorRemoveAndGotoNext($0 + 72 | 0, HEAP32[$0 + 76 >> 2]);
      break label$9;
     }
     jsvObjectIteratorNext($0 + 72 | 0);
    }
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($0 + 72 | 0);
  jsvUnLock(HEAP32[$0 + 76 >> 2]);
 }
 global$0 = $0 + 80 | 0;
 return 0;
}
function jswrap_spi_write($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 $3 = $2 - -64 | 0;
 $4 = $2 + 48 | 0;
 HEAP32[$2 + 76 >> 2] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 HEAP8[$2 + 71 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 76 >> 2]);
 label$1 : {
  if (!(jsspiGetSendFunction(HEAP32[$2 + 76 >> 2], $3, $4) & 1)) {
   break label$1;
  }
  HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 64 >> 2];
  $1 = $2 + 48 | 0;
  $4 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
  $0 = $2 + 24 | 0;
  $3 = $0;
  $5 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
  HEAP8[$3 + 4 | 0] = $5;
  HEAP8[$3 + 5 | 0] = $5 >>> 8;
  HEAP8[$3 + 6 | 0] = $5 >>> 16;
  HEAP8[$3 + 7 | 0] = $5 >>> 24;
  HEAP8[$3 + 8 | 0] = $4;
  HEAP8[$3 + 9 | 0] = $4 >>> 8;
  HEAP8[$3 + 10 | 0] = $4 >>> 16;
  HEAP8[$3 + 11 | 0] = $4 >>> 24;
  $3 = HEAPU8[$1 + 10 | 0] | HEAPU8[$1 + 11 | 0] << 8 | (HEAPU8[$1 + 12 | 0] << 16 | HEAPU8[$1 + 13 | 0] << 24);
  $1 = HEAPU8[$1 + 6 | 0] | HEAPU8[$1 + 7 | 0] << 8 | (HEAPU8[$1 + 8 | 0] << 16 | HEAPU8[$1 + 9 | 0] << 24);
  HEAP8[$0 + 10 | 0] = $1;
  HEAP8[$0 + 11 | 0] = $1 >>> 8;
  HEAP8[$0 + 12 | 0] = $1 >>> 16;
  HEAP8[$0 + 13 | 0] = $1 >>> 24;
  HEAP8[$0 + 14 | 0] = $3;
  HEAP8[$0 + 15 | 0] = $3 >>> 8;
  HEAP8[$0 + 16 | 0] = $3 >>> 16;
  HEAP8[$0 + 17 | 0] = $3 >>> 24;
  HEAP8[$2 + 23 | 0] = 255;
  HEAP32[$2 + 16 >> 2] = jsvGetArrayLength(HEAP32[$2 + 72 >> 2]);
  if (HEAP32[$2 + 16 >> 2] > 0) {
   HEAP32[$2 + 12 >> 2] = jsvGetArrayItem(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 16 >> 2] - 1 | 0);
   if (jsvIsPin(HEAP32[$2 + 12 >> 2]) & 1) {
    HEAP8[$2 + 23 | 0] = jshGetPinFromVar(HEAP32[$2 + 12 >> 2]);
    jsvUnLock(jsvArrayPop(HEAP32[$2 + 72 >> 2]));
   }
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
  }
  if (!(HEAPU8[$2 + 71 | 0] < 24 | HEAPU8[$2 + 71 | 0] > 24)) {
   jshPinSetState(HEAPU8[$2 + 71 | 0], 0);
  }
  if (HEAPU8[$2 + 23 | 0] != 255) {
   jshPinOutput(HEAPU8[$2 + 23 | 0], 0);
  }
  jsvIterateBufferCallback(HEAP32[$2 + 72 >> 2], 544, $2 + 24 | 0);
  if (!(HEAPU8[$2 + 71 | 0] < 24 | HEAPU8[$2 + 71 | 0] > 24)) {
   jshUSARTKick(HEAPU8[$2 + 71 | 0]);
  }
  if (HEAPU8[$2 + 23 | 0] == 255) {
   break label$1;
  }
  jshPinOutput(HEAPU8[$2 + 23 | 0], 1);
 }
 global$0 = $2 + 80 | 0;
}
function jsspiGetSendFunction($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 HEAP8[$3 + 31 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 40 >> 2]);
 label$1 : {
  if (!(HEAPU8[$3 + 31 | 0] < 24 | HEAPU8[$3 + 31 | 0] > 24)) {
   if (!(jshIsDeviceInitialised(HEAPU8[$3 + 31 | 0]) & 1)) {
    $0 = $3 + 16 | 0;
    jshSPIInitInfo($0);
    jshUSARTSetup(HEAPU8[$3 + 31 | 0], $0);
   }
   HEAP32[HEAP32[$3 + 36 >> 2] >> 2] = 19;
   HEAP8[HEAP32[$3 + 32 >> 2]] = HEAPU8[$3 + 31 | 0];
   HEAP8[$3 + 47 | 0] = 1;
   break label$1;
  }
  if (!HEAPU8[$3 + 31 | 0]) {
   $0 = $3 + 16 | 0;
   HEAP32[$3 + 12 >> 2] = jsvObjectGetChild(HEAP32[$3 + 40 >> 2], 7915, 0);
   jsspiPopulateSPIInfo($0, HEAP32[$3 + 12 >> 2]);
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   label$5 : {
    label$6 : {
     if (HEAPU8[$3 + 23 | 0] == 255 | HEAPU8[$3 + 22 | 0] != 255 | (HEAPU8[$3 + 24 | 0] | HEAPU8[$3 + 21 | 0] == 255)) {
      break label$6;
     }
     if (!(HEAP8[$3 + 25 | 0] & 1)) {
      break label$6;
     }
     HEAP32[HEAP32[$3 + 36 >> 2] >> 2] = 20;
     break label$5;
    }
    HEAP32[HEAP32[$3 + 36 >> 2] >> 2] = 21;
   }
   $2 = $3 + 16 | 0;
   $0 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
   $1 = HEAP32[$3 + 32 >> 2];
   $4 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
   HEAP8[$1 | 0] = $4;
   HEAP8[$1 + 1 | 0] = $4 >>> 8;
   HEAP8[$1 + 2 | 0] = $4 >>> 16;
   HEAP8[$1 + 3 | 0] = $4 >>> 24;
   HEAP8[$1 + 4 | 0] = $0;
   HEAP8[$1 + 5 | 0] = $0 >>> 8;
   HEAP8[$1 + 6 | 0] = $0 >>> 16;
   HEAP8[$1 + 7 | 0] = $0 >>> 24;
   $0 = HEAPU8[$2 + 10 | 0] | HEAPU8[$2 + 11 | 0] << 8 | (HEAPU8[$2 + 12 | 0] << 16 | HEAPU8[$2 + 13 | 0] << 24);
   $2 = HEAPU8[$2 + 6 | 0] | HEAPU8[$2 + 7 | 0] << 8 | (HEAPU8[$2 + 8 | 0] << 16 | HEAPU8[$2 + 9 | 0] << 24);
   HEAP8[$1 + 6 | 0] = $2;
   HEAP8[$1 + 7 | 0] = $2 >>> 8;
   HEAP8[$1 + 8 | 0] = $2 >>> 16;
   HEAP8[$1 + 9 | 0] = $2 >>> 24;
   HEAP8[$1 + 10 | 0] = $0;
   HEAP8[$1 + 11 | 0] = $0 >>> 8;
   HEAP8[$1 + 12 | 0] = $0 >>> 16;
   HEAP8[$1 + 13 | 0] = $0 >>> 24;
   HEAP8[$3 + 47 | 0] = 1;
   break label$1;
  }
  HEAP8[$3 + 47 | 0] = 0;
 }
 global$0 = $3 + 48 | 0;
 return HEAP8[$3 + 47 | 0] & 1;
}
function __trunctfdf2($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $6 = global$0 - 32 | 0;
 global$0 = $6;
 $4 = $3 & 2147483647;
 $8 = $4;
 $4 = $4 + -1006698496 | 0;
 $7 = $2;
 $5 = $2;
 if ($2 >>> 0 < 0) {
  $4 = $4 + 1 | 0;
 }
 $9 = $5;
 $5 = $4;
 $4 = $8 + -1140785152 | 0;
 $10 = $7;
 if ($7 >>> 0 < 0) {
  $4 = $4 + 1 | 0;
 }
 label$1 : {
  if (($4 | 0) == ($5 | 0) & $9 >>> 0 < $10 >>> 0 | $5 >>> 0 < $4 >>> 0) {
   $4 = $3 << 4 | $2 >>> 28;
   $2 = $2 << 4 | $1 >>> 28;
   $1 = $1 & 268435455;
   $7 = $1;
   if (($1 | 0) == 134217728 & $0 >>> 0 >= 1 | $1 >>> 0 > 134217728) {
    $4 = $4 + 1073741824 | 0;
    $0 = $2 + 1 | 0;
    if ($0 >>> 0 < 1) {
     $4 = $4 + 1 | 0;
    }
    $5 = $0;
    break label$1;
   }
   $5 = $2;
   $4 = $4 - (($2 >>> 0 < 0) + -1073741824 | 0) | 0;
   if ($0 | $7 ^ 134217728) {
    break label$1;
   }
   $0 = $5 + ($5 & 1) | 0;
   if ($0 >>> 0 < $5 >>> 0) {
    $4 = $4 + 1 | 0;
   }
   $5 = $0;
   break label$1;
  }
  if (!(!$7 & ($8 | 0) == 2147418112 ? !($0 | $1) : ($8 | 0) == 2147418112 & $7 >>> 0 < 0 | $8 >>> 0 < 2147418112)) {
   $4 = $3 << 4 | $2 >>> 28;
   $5 = $2 << 4 | $1 >>> 28;
   $4 = $4 & 524287 | 2146959360;
   break label$1;
  }
  $5 = 0;
  $4 = 2146435072;
  if (($8 | 0) == 1140785151 & $7 >>> 0 > 4294967295 | $8 >>> 0 > 1140785151) {
   break label$1;
  }
  $4 = 0;
  $7 = $8 >>> 16;
  if ($7 >>> 0 < 15249) {
   break label$1;
  }
  $4 = $3 & 65535 | 65536;
  __lshrti3($6, $0, $1, $2, $4, 15361 - $7 | 0);
  __ashlti3($6 + 16 | 0, $0, $1, $2, $4, $7 + -15233 | 0);
  $2 = HEAP32[$6 + 4 >> 2];
  $0 = HEAP32[$6 + 8 >> 2];
  $4 = HEAP32[$6 + 12 >> 2] << 4 | $0 >>> 28;
  $5 = $0 << 4 | $2 >>> 28;
  $0 = $2 & 268435455;
  $2 = $0;
  $1 = HEAP32[$6 >> 2] | ((HEAP32[$6 + 16 >> 2] | HEAP32[$6 + 24 >> 2]) != 0 | (HEAP32[$6 + 20 >> 2] | HEAP32[$6 + 28 >> 2]) != 0);
  if (($0 | 0) == 134217728 & $1 >>> 0 >= 1 | $0 >>> 0 > 134217728) {
   $0 = $5 + 1 | 0;
   if ($0 >>> 0 < 1) {
    $4 = $4 + 1 | 0;
   }
   $5 = $0;
   break label$1;
  }
  if ($1 | $2 ^ 134217728) {
   break label$1;
  }
  $0 = $5 + ($5 & 1) | 0;
  if ($0 >>> 0 < $5 >>> 0) {
   $4 = $4 + 1 | 0;
  }
  $5 = $0;
 }
 global$0 = $6 + 32 | 0;
 $0 = $3 & -2147483648 | $4;
 wasm2js_scratch_store_i32(0, $5 | 0);
 wasm2js_scratch_store_i32(1, $0 | 0);
 return +wasm2js_scratch_load_f64();
}
function tflite__ops__micro__dequantize__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 112 | 0;
 global$0 = $2;
 HEAP32[$2 + 104 >> 2] = $0;
 HEAP32[$2 + 100 >> 2] = $1;
 label$1 : {
  if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 100 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 104 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 104 >> 2];
   $3 = tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 100 >> 2]);
   HEAP32[$2 + 20 >> 2] = 1;
   HEAP32[$2 + 16 >> 2] = $3;
   HEAP32[$2 + 12 >> 2] = 43615;
   HEAP32[$2 + 8 >> 2] = 43599;
   HEAP32[$2 + 4 >> 2] = 29;
   HEAP32[$2 >> 2] = 43498;
   FUNCTION_TABLE[$0]($1, 43472, $2);
   HEAP32[$2 + 108 >> 2] = 1;
   break label$1;
  }
  if ((tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 100 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 104 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 104 >> 2];
   $3 = tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 100 >> 2]);
   HEAP32[$2 + 52 >> 2] = 1;
   HEAP32[$2 + 48 >> 2] = $3;
   HEAP32[$2 + 44 >> 2] = 43615;
   HEAP32[$2 + 40 >> 2] = 43617;
   HEAP32[$2 + 36 >> 2] = 30;
   HEAP32[$2 + 32 >> 2] = 43498;
   FUNCTION_TABLE[$0]($1, 43472, $2 + 32 | 0);
   HEAP32[$2 + 108 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 96 >> 2] = HEAP32[HEAP32[$2 + 104 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$2 + 100 >> 2] >> 2] + 4 >> 2], 56);
  HEAP32[$2 + 92 >> 2] = HEAP32[HEAP32[$2 + 104 >> 2] + 8 >> 2] + Math_imul(HEAP32[HEAP32[HEAP32[$2 + 100 >> 2] + 4 >> 2] + 4 >> 2], 56);
  if (!(HEAP32[HEAP32[$2 + 96 >> 2] >> 2] == 3 | HEAP32[HEAP32[$2 + 96 >> 2] >> 2] == 9)) {
   $0 = HEAP32[HEAP32[$2 + 104 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 104 >> 2];
   HEAP32[$2 + 88 >> 2] = 43657;
   HEAP32[$2 + 84 >> 2] = 37;
   HEAP32[$2 + 80 >> 2] = 43498;
   FUNCTION_TABLE[$0]($1, 43634, $2 + 80 | 0);
   HEAP32[$2 + 108 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[$2 + 92 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$2 + 104 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 104 >> 2];
   HEAP32[$2 + 72 >> 2] = 43715;
   HEAP32[$2 + 68 >> 2] = 38;
   HEAP32[$2 + 64 >> 2] = 43498;
   FUNCTION_TABLE[$0]($1, 43634, $2 - -64 | 0);
   HEAP32[$2 + 108 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 108 >> 2] = 0;
 }
 global$0 = $2 + 112 | 0;
 return HEAP32[$2 + 108 >> 2];
}
function jswrap_array_includes($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP32[$3 + 80 >> 2] = $2;
 if (HEAP32[$3 + 80 >> 2] < 0) {
  HEAP32[$3 + 80 >> 2] = jsvGetLength(HEAP32[$3 + 88 >> 2]) + HEAP32[$3 + 80 >> 2];
 }
 if (HEAP32[$3 + 80 >> 2] < 0) {
  HEAP32[$3 + 80 >> 2] = 0;
 }
 $1 = jsvIsFloat(HEAP32[$3 + 84 >> 2]) & 1;
 $0 = $3;
 if ($1) {
  $1 = __DOUBLE_BITS(jsvGetFloat(HEAP32[$3 + 84 >> 2]));
  $2 = i64toi32_i32$HIGH_BITS & 2147483647;
  $1 = ($2 | 0) == 2146435072 & $1 >>> 0 > 0 | $2 >>> 0 > 2146435072;
 } else {
  $1 = 0;
 }
 HEAP8[$0 + 79 | 0] = $1;
 label$5 : {
  if (!(jsvIsIterable(HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP8[$3 + 95 | 0] = 0;
   break label$5;
  }
  jsvIteratorNew($3 + 32 | 0, HEAP32[$3 + 88 >> 2], 0);
  while (1) {
   if (jsvIteratorHasElement($3 + 32 | 0) & 1) {
    HEAP32[$3 + 28 >> 2] = jsvIteratorGetKey($3 + 32 | 0);
    label$9 : {
     if (!(jsvIsInt(HEAP32[$3 + 28 >> 2]) & 1)) {
      break label$9;
     }
     if ((jsvGetInteger(HEAP32[$3 + 28 >> 2]) | 0) < HEAP32[$3 + 80 >> 2]) {
      break label$9;
     }
     HEAP32[$3 + 24 >> 2] = jsvIteratorGetValue($3 + 32 | 0);
     label$10 : {
      label$11 : {
       if (HEAP32[$3 + 24 >> 2] == HEAP32[$3 + 84 >> 2]) {
        break label$11;
       }
       if (jsvMathsOpTypeEqual(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 84 >> 2]) & 1) {
        break label$11;
       }
       if (!(HEAP8[$3 + 79 | 0] & 1)) {
        break label$10;
       }
       if (!(jsvIsFloat(HEAP32[$3 + 24 >> 2]) & 1)) {
        break label$10;
       }
       $0 = __DOUBLE_BITS(jsvGetFloat(HEAP32[$3 + 24 >> 2]));
       $1 = i64toi32_i32$HIGH_BITS & 2147483647;
       if (($1 | 0) == 2146435072 & $0 >>> 0 > 0 | $1 >>> 0 > 2146435072) {
        break label$11;
       }
       break label$10;
      }
      $0 = $3 + 32 | 0;
      jsvUnLock2(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2]);
      jsvIteratorFree($0);
      HEAP8[$3 + 95 | 0] = 1;
      break label$5;
     }
     jsvUnLock(HEAP32[$3 + 24 >> 2]);
    }
    $0 = $3 + 32 | 0;
    jsvUnLock(HEAP32[$3 + 28 >> 2]);
    jsvIteratorNext($0);
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 32 | 0);
  HEAP8[$3 + 95 | 0] = 0;
 }
 global$0 = $3 + 96 | 0;
 return HEAP8[$3 + 95 | 0] & 1;
}
function jswrap_banglejs_setOptions($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 192 | 0;
 global$0 = $1;
 HEAP32[$1 + 188 >> 2] = $0;
 HEAP8[$1 + 187 | 0] = (HEAP32[62815] & 2) != 0;
 HEAP8[$1 + 186 | 0] = (HEAP32[62815] & 4) != 0;
 HEAP8[$1 + 185 | 0] = (HEAP32[62815] & 8) != 0;
 HEAP8[$1 + 184 | 0] = (HEAP32[62815] & 1) != 0;
 HEAP8[$1 + 183 | 0] = (HEAP32[62815] & 16) != 0;
 HEAP8[$1 + 182 | 0] = (HEAP32[62815] & 32) != 0;
 HEAP32[$1 >> 2] = 28155;
 HEAP16[$1 + 4 >> 1] = 9;
 HEAP32[$1 + 8 >> 2] = 53376;
 HEAP32[$1 + 12 >> 2] = 28174;
 HEAP16[$1 + 16 >> 1] = 9;
 HEAP32[$1 + 20 >> 2] = 53380;
 HEAP32[$1 + 24 >> 2] = 28191;
 HEAP16[$1 + 28 >> 1] = 9;
 HEAP32[$1 + 32 >> 2] = 53384;
 HEAP32[$1 + 36 >> 2] = 28212;
 HEAP16[$1 + 40 >> 1] = 9;
 HEAP32[$1 + 44 >> 2] = 53388;
 HEAP32[$1 + 48 >> 2] = 28229;
 HEAP16[$1 + 52 >> 1] = 9;
 HEAP32[$1 + 56 >> 2] = 53392;
 HEAP32[$1 + 60 >> 2] = 28253;
 HEAP16[$1 + 64 >> 1] = 9;
 HEAP32[$1 + 68 >> 2] = 53396;
 HEAP32[$1 + 72 >> 2] = 28278;
 HEAP16[$1 + 76 >> 1] = 9;
 HEAP32[$1 + 80 >> 2] = 53400;
 HEAP32[$1 + 84 >> 2] = 28293;
 HEAP16[$1 + 88 >> 1] = 9;
 HEAP32[$1 + 92 >> 2] = 53408;
 HEAP32[$1 + 96 >> 2] = 28306;
 HEAP16[$1 + 100 >> 1] = 9;
 HEAP32[$1 + 104 >> 2] = 53404;
 HEAP32[$1 + 108 >> 2] = 28316;
 HEAP16[$1 + 112 >> 1] = 11;
 HEAP32[$1 + 116 >> 2] = $1 + 187;
 HEAP32[$1 + 120 >> 2] = 28327;
 HEAP16[$1 + 124 >> 1] = 11;
 HEAP32[$1 + 128 >> 2] = $1 + 186;
 HEAP32[$1 + 132 >> 2] = 28338;
 HEAP16[$1 + 136 >> 1] = 11;
 HEAP32[$1 + 140 >> 2] = $1 + 185;
 HEAP32[$1 + 144 >> 2] = 28349;
 HEAP16[$1 + 148 >> 1] = 11;
 HEAP32[$1 + 152 >> 2] = $1 + 184;
 HEAP32[$1 + 156 >> 2] = 28362;
 HEAP16[$1 + 160 >> 1] = 11;
 HEAP32[$1 + 164 >> 2] = $1 + 183;
 HEAP32[$1 + 168 >> 2] = 28374;
 HEAP16[$1 + 172 >> 1] = 11;
 HEAP32[$1 + 176 >> 2] = $1 + 182;
 if (jsvReadConfigObject(HEAP32[$1 + 188 >> 2], $1, 15) & 1) {
  HEAP32[62815] = HEAP32[62815] & -3 | (HEAP8[$1 + 187 | 0] & 1 ? 2 : 0);
  HEAP32[62815] = HEAP32[62815] & -5 | (HEAP8[$1 + 186 | 0] & 1 ? 4 : 0);
  HEAP32[62815] = HEAP32[62815] & -9 | (HEAP8[$1 + 185 | 0] & 1 ? 8 : 0);
  HEAP32[62815] = HEAP32[62815] & -2 | (HEAP8[$1 + 184 | 0] & 1 ? 1 : 0);
  HEAP32[62815] = HEAP32[62815] & -17 | (HEAP8[$1 + 183 | 0] & 1 ? 16 : 0);
  HEAP32[62815] = HEAP32[62815] & -33 | (HEAP8[$1 + 182 | 0] & 1 ? 32 : 0);
 }
 global$0 = $1 + 192 | 0;
}
function graphicsGetFromVar($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP8[$0 | 0] = $1;
 HEAP8[$0 + 1 | 0] = $1 >>> 8;
 HEAP8[$0 + 2 | 0] = $1 >>> 16;
 HEAP8[$0 + 3 | 0] = $1 >>> 24;
 HEAP32[$2 >> 2] = jsvObjectGetChild(HEAP32[$2 + 4 >> 2], 27636, 0);
 label$1 : {
  if (HEAP32[$2 >> 2]) {
   jsvGetStringChars(HEAP32[$2 >> 2], HEAP32[$2 + 8 >> 2] + 4 | 0, 44);
   jsvUnLock(HEAP32[$2 >> 2]);
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP8[$0 + 52 | 0] = 486;
   HEAP8[$0 + 53 | 0] = 1;
   HEAP8[$0 + 54 | 0] = 0;
   HEAP8[$0 + 55 | 0] = 0;
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP8[$0 + 60 | 0] = 485;
   HEAP8[$0 + 61 | 0] = 1;
   HEAP8[$0 + 62 | 0] = 0;
   HEAP8[$0 + 63 | 0] = 0;
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP8[$0 + 56 | 0] = 484;
   HEAP8[$0 + 57 | 0] = 1;
   HEAP8[$0 + 58 | 0] = 0;
   HEAP8[$0 + 59 | 0] = 0;
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP8[$0 + 64 | 0] = 483;
   HEAP8[$0 + 65 | 0] = 1;
   HEAP8[$0 + 66 | 0] = 0;
   HEAP8[$0 + 67 | 0] = 0;
   $0 = HEAP32[$2 + 8 >> 2];
   label$3 : {
    if (!(HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24))) {
     lcdSetCallbacks_ArrayBuffer(HEAP32[$2 + 8 >> 2]);
     break label$3;
    }
    $0 = HEAP32[$2 + 8 >> 2];
    label$5 : {
     if ((HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) == 1) {
      $1 = global$0 - 16 | 0;
      HEAP32[$1 + 12 >> 2] = HEAP32[$2 + 8 >> 2];
      $0 = HEAP32[$1 + 12 >> 2];
      HEAP8[$0 + 52 | 0] = 500;
      HEAP8[$0 + 53 | 0] = 1;
      HEAP8[$0 + 54 | 0] = 0;
      HEAP8[$0 + 55 | 0] = 0;
      $0 = HEAP32[$1 + 12 >> 2];
      HEAP8[$0 + 56 | 0] = 499;
      HEAP8[$0 + 57 | 0] = 1;
      HEAP8[$0 + 58 | 0] = 0;
      HEAP8[$0 + 59 | 0] = 0;
      break label$5;
     }
     $0 = HEAP32[$2 + 8 >> 2];
     label$7 : {
      if ((HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) == 5) {
       lcdST7789_setCallbacks(HEAP32[$2 + 8 >> 2]);
       break label$7;
      }
      jsExceptionHere(4, 27641, 0);
     }
    }
   }
   HEAP8[$2 + 15 | 0] = 1;
   break label$1;
  }
  HEAP8[$2 + 15 | 0] = 0;
 }
 global$0 = $2 + 16 | 0;
 return HEAP8[$2 + 15 | 0] & 1;
}
function escapeCharacter($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP8[$2 + 11 | 0] = $0;
 HEAP8[$2 + 10 | 0] = $1;
 label$1 : {
  if (HEAP8[$2 + 11 | 0] == 8) {
   HEAP32[$2 + 12 >> 2] = 3572;
   break label$1;
  }
  if (HEAP8[$2 + 11 | 0] == 9) {
   HEAP32[$2 + 12 >> 2] = 3575;
   break label$1;
  }
  if (HEAP8[$2 + 11 | 0] == 10) {
   HEAP32[$2 + 12 >> 2] = 3578;
   break label$1;
  }
  if (!(HEAP8[$2 + 10 | 0] & 1 | HEAP8[$2 + 11 | 0] != 11)) {
   HEAP32[$2 + 12 >> 2] = 3581;
   break label$1;
  }
  if (HEAP8[$2 + 11 | 0] == 12) {
   HEAP32[$2 + 12 >> 2] = 3584;
   break label$1;
  }
  if (HEAP8[$2 + 11 | 0] == 13) {
   HEAP32[$2 + 12 >> 2] = 3587;
   break label$1;
  }
  if (HEAP8[$2 + 11 | 0] == 92) {
   HEAP32[$2 + 12 >> 2] = 3590;
   break label$1;
  }
  if (HEAP8[$2 + 11 | 0] == 34) {
   HEAP32[$2 + 12 >> 2] = 3593;
   break label$1;
  }
  HEAP8[$2 + 9 | 0] = HEAPU8[$2 + 11 | 0];
  if (!(HEAP8[$2 + 10 | 0] & 1 | HEAPU8[$2 + 9 | 0] >= 8)) {
   HEAP8[95088] = 92;
   HEAP8[95089] = HEAPU8[$2 + 9 | 0] + 48;
   HEAP8[95090] = 0;
   HEAP32[$2 + 12 >> 2] = 95088;
   break label$1;
  }
  if (!(HEAPU8[$2 + 9 | 0] < 127 ? HEAPU8[$2 + 9 | 0] >= 32 : 0)) {
   HEAP8[95088] = 92;
   HEAP32[$2 + 4 >> 2] = 2;
   label$13 : {
    if (HEAP8[$2 + 10 | 0] & 1) {
     HEAP8[95089] = 117;
     $0 = HEAP32[$2 + 4 >> 2];
     HEAP32[$2 + 4 >> 2] = $0 + 1;
     HEAP8[$0 + 95088 | 0] = 48;
     $0 = HEAP32[$2 + 4 >> 2];
     HEAP32[$2 + 4 >> 2] = $0 + 1;
     HEAP8[$0 + 95088 | 0] = 48;
     break label$13;
    }
    HEAP8[95089] = 120;
   }
   HEAP32[$2 >> 2] = HEAPU8[$2 + 9 | 0] >> 4;
   if (HEAP32[$2 >> 2] < 10) {
    $0 = HEAP32[$2 >> 2] + 48 | 0;
   } else {
    $0 = HEAP32[$2 >> 2] + 55 | 0;
   }
   $1 = HEAP32[$2 + 4 >> 2];
   HEAP32[$2 + 4 >> 2] = $1 + 1;
   HEAP8[$1 + 95088 | 0] = $0;
   HEAP32[$2 >> 2] = HEAPU8[$2 + 9 | 0] & 15;
   if (HEAP32[$2 >> 2] < 10) {
    $0 = HEAP32[$2 >> 2] + 48 | 0;
   } else {
    $0 = HEAP32[$2 >> 2] + 55 | 0;
   }
   $1 = HEAP32[$2 + 4 >> 2];
   HEAP32[$2 + 4 >> 2] = $1 + 1;
   HEAP8[$1 + 95088 | 0] = $0;
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$2 + 4 >> 2] = $0 + 1;
   HEAP8[$0 + 95088 | 0] = 0;
   HEAP32[$2 + 12 >> 2] = 95088;
   break label$1;
  }
  HEAP8[95089] = 0;
  HEAP8[95088] = HEAPU8[$2 + 11 | 0];
  HEAP32[$2 + 12 >> 2] = 95088;
 }
 return HEAP32[$2 + 12 >> 2];
}
function jswrap_array_reduce($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 160 | 0;
 global$0 = $3;
 HEAP32[$3 + 152 >> 2] = $0;
 HEAP32[$3 + 148 >> 2] = $1;
 HEAP32[$3 + 144 >> 2] = $2;
 HEAP32[$3 + 140 >> 2] = 30543;
 label$1 : {
  if (!(jsvIsIterable(HEAP32[$3 + 152 >> 2]) & 1)) {
   HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 140 >> 2];
   jsExceptionHere(1, 30550, $3 + 32 | 0);
   HEAP32[$3 + 156 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsFunction(HEAP32[$3 + 148 >> 2]) & 1)) {
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 140 >> 2];
   jsExceptionHere(1, 30600, $3 + 16 | 0);
   HEAP32[$3 + 156 >> 2] = 0;
   break label$1;
  }
  $0 = $3 + 88 | 0;
  HEAP32[$3 + 136 >> 2] = jsvLockAgainSafe(HEAP32[$3 + 144 >> 2]);
  jsvIteratorNew($0, HEAP32[$3 + 152 >> 2], 0);
  if (!HEAP32[$3 + 136 >> 2]) {
   HEAP8[$3 + 87 | 0] = 0;
   while (1) {
    if (HEAP8[$3 + 87 | 0] & 1) {
     $0 = 0;
    } else {
     $0 = jsvIteratorHasElement($3 + 88 | 0);
    }
    if ($0 & 1) {
     HEAP32[$3 + 80 >> 2] = jsvIteratorGetKey($3 + 88 | 0);
     if (jsvIsInt(HEAP32[$3 + 80 >> 2]) & 1) {
      HEAP32[$3 + 136 >> 2] = jsvIteratorGetValue($3 + 88 | 0);
      HEAP8[$3 + 87 | 0] = 1;
     }
     $0 = $3 + 88 | 0;
     jsvUnLock(HEAP32[$3 + 80 >> 2]);
     jsvIteratorNext($0);
     continue;
    }
    break;
   }
   if (!HEAP32[$3 + 136 >> 2]) {
    HEAP32[$3 >> 2] = HEAP32[$3 + 140 >> 2];
    jsExceptionHere(1, 30647, $3);
   }
  }
  while (1) {
   if (jsvIteratorHasElement($3 + 88 | 0) & 1) {
    HEAP32[$3 + 76 >> 2] = jsvIteratorGetKey($3 + 88 | 0);
    if (jsvIsInt(HEAP32[$3 + 76 >> 2]) & 1) {
     $0 = $3 + 48 | 0;
     $1 = $3 + 88 | 0;
     HEAP32[$3 + 72 >> 2] = jsvGetInteger(HEAP32[$3 + 76 >> 2]);
     HEAP32[$3 + 48 >> 2] = HEAP32[$3 + 136 >> 2];
     HEAP32[$3 + 52 >> 2] = jsvIteratorGetValue($1);
     HEAP32[$3 + 56 >> 2] = jsvNewFromInteger(HEAP32[$3 + 72 >> 2]);
     HEAP32[$3 + 60 >> 2] = HEAP32[$3 + 152 >> 2];
     HEAP32[$3 + 136 >> 2] = jspeFunctionCall(HEAP32[$3 + 148 >> 2], 0, 0, 0, 4, $0);
     jsvUnLockMany(3, $0);
    }
    $0 = $3 + 88 | 0;
    jsvUnLock(HEAP32[$3 + 76 >> 2]);
    jsvIteratorNext($0);
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 88 | 0);
  HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 136 >> 2];
 }
 global$0 = $3 + 160 | 0;
 return HEAP32[$3 + 156 >> 2];
}
function jswrap_io_shiftOut($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 92 >> 2] = $0;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP32[$3 + 84 >> 2] = $2;
 HEAP32[$3 + 76 >> 2] = 0;
 HEAP8[$3 + 72 | 0] = 255;
 HEAP8[$3 + 73 | 0] = 0;
 HEAP32[$3 + 80 >> 2] = 1;
 HEAP32[$3 + 16 >> 2] = 33618;
 HEAP16[$3 + 20 >> 1] = 12;
 $0 = $3 - -64 | 0;
 HEAP32[$3 + 24 >> 2] = $0 + 8;
 HEAP32[$3 + 28 >> 2] = 33622;
 HEAP16[$3 + 32 >> 1] = 11;
 HEAP32[$3 + 36 >> 2] = $0 + 9;
 HEAP32[$3 + 40 >> 2] = 33629;
 HEAP16[$3 + 44 >> 1] = 9;
 HEAP32[$3 + 48 >> 2] = $0 + 16;
 label$1 : {
  if (!(jsvReadConfigObject(HEAP32[$3 + 88 >> 2], $3 + 16 | 0, 3) & 1)) {
   break label$1;
  }
  HEAP8[$3 + 73 | 0] = ((HEAP8[$3 + 73 | 0] & 1 ? 1 : 0) | 0) != 0;
  if (HEAP32[$3 + 80 >> 2] < 1) {
   HEAP32[$3 + 80 >> 2] = 1;
  }
  label$3 : {
   if (jsvIsArray(HEAP32[$3 + 92 >> 2]) & 1) {
    jsvObjectIteratorNew($3 + 8 | 0, HEAP32[$3 + 92 >> 2]);
    while (1) {
     if (jsvObjectIteratorHasValue($3 + 8 | 0) & 1) {
      if (HEAP32[$3 + 76 >> 2] >= 8) {
       HEAP32[$3 >> 2] = 8;
       jsExceptionHere(1, 33636, $3);
       break label$1;
      }
      $0 = $3 - -64 | 0;
      $1 = $3 + 8 | 0;
      $2 = jshGetPinFromVarAndUnLock(jsvObjectIteratorGetValue($1));
      HEAP8[$0 + HEAP32[$3 + 76 >> 2] | 0] = $2;
      HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
      jsvObjectIteratorNext($1);
      continue;
     }
     break;
    }
    jsvObjectIteratorFree($3 + 8 | 0);
    break label$3;
   }
   $0 = $3 - -64 | 0;
   $1 = jshGetPinFromVar(HEAP32[$3 + 92 >> 2]);
   $2 = HEAP32[$3 + 76 >> 2];
   HEAP32[$3 + 76 >> 2] = $2 + 1;
   HEAP8[$0 + $2 | 0] = $1;
  }
  HEAP32[$3 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 4 >> 2] < HEAP32[$3 + 76 >> 2]) {
    if (jshIsPinValid(HEAPU8[HEAP32[$3 + 4 >> 2] + ($3 - -64 | 0) | 0]) & 1) {
     if (!(jshGetPinStateIsManual(HEAPU8[HEAP32[$3 + 4 >> 2] + ($3 - -64 | 0) | 0]) & 1)) {
      jshPinSetState(HEAPU8[HEAP32[$3 + 4 >> 2] + ($3 - -64 | 0) | 0], 1);
     }
    }
    HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
  if (jshIsPinValid(HEAPU8[$3 + 72 | 0]) & 1) {
   jshPinSetState(HEAPU8[$3 + 72 | 0], 1);
  }
  jsvIterateCallback(HEAP32[$3 + 84 >> 2], 513, $3 - -64 | 0);
 }
 global$0 = $3 + 96 | 0;
}
function jswrap_i2c_readFrom($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0;
 $4 = global$0 - 96 | 0;
 $3 = $4;
 global$0 = $3;
 $5 = $3 + 78 | 0;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP32[$3 + 80 >> 2] = $2;
 HEAP8[$3 + 79 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 88 >> 2]);
 HEAP8[$3 + 78 | 0] = 1;
 HEAP32[$3 + 72 >> 2] = i2c_get_address(HEAP32[$3 + 84 >> 2], $5);
 label$1 : {
  if (HEAP32[$3 + 80 >> 2] <= 0) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$3 + 80 >> 2] + 256 >>> 0 > 1e6) {
   jsExceptionHere(1, 37274, 0);
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  $0 = $4 - (HEAP32[$3 + 80 >> 2] + 15 & -16) | 0;
  global$0 = $0;
  HEAP32[$3 + 68 >> 2] = $0;
  label$4 : {
   if (!(HEAPU8[$3 + 79 | 0] < 25 | HEAPU8[$3 + 79 | 0] > 25)) {
    jshI2CWrite(HEAPU8[$3 + 79 | 0], HEAP32[$3 + 72 >> 2] & 255, HEAP32[$3 + 80 >> 2], HEAP32[$3 + 68 >> 2], HEAP8[$3 + 78 | 0] & 1);
    break label$4;
   }
   label$6 : {
    if (!HEAPU8[$3 + 79 | 0]) {
     $0 = $3 + 56 | 0;
     HEAP32[$3 + 52 >> 2] = jsvObjectGetChild(HEAP32[$3 + 88 >> 2], 37088, 0);
     if (jsi2cPopulateI2CInfo($0, HEAP32[$3 + 52 >> 2]) & 1) {
      $0 = $3 + 56 | 0;
      HEAP8[$3 + 62 | 0] = jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$3 + 88 >> 2], 37266, 0)) & 1;
      jsi2cRead($0, HEAP32[$3 + 72 >> 2] & 255, HEAP32[$3 + 80 >> 2], HEAP32[$3 + 68 >> 2], HEAP8[$3 + 78 | 0] & 1);
     }
     jsvUnLock2(jsvObjectSetChild(HEAP32[$3 + 88 >> 2], 37266, jsvNewFromBool(HEAP8[$3 + 62 | 0] & 1)), HEAP32[$3 + 52 >> 2]);
     break label$6;
    }
    HEAP32[$3 + 92 >> 2] = 0;
    break label$1;
   }
  }
  HEAP32[$3 + 48 >> 2] = jsvNewTypedArray(1, HEAP32[$3 + 80 >> 2]);
  if (HEAP32[$3 + 48 >> 2]) {
   jsvArrayBufferIteratorNew($3 + 8 | 0, HEAP32[$3 + 48 >> 2], 0);
   HEAP32[$3 + 4 >> 2] = 0;
   while (1) {
    if (HEAPU32[$3 + 4 >> 2] < HEAPU32[$3 + 80 >> 2]) {
     $0 = $3 + 8 | 0;
     jsvArrayBufferIteratorSetByteValue($0, HEAP8[HEAP32[$3 + 68 >> 2] + HEAP32[$3 + 4 >> 2] | 0]);
     jsvArrayBufferIteratorNext($0);
     HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
     continue;
    }
    break;
   }
   jsvArrayBufferIteratorFree($3 + 8 | 0);
  }
  HEAP32[$3 + 92 >> 2] = HEAP32[$3 + 48 >> 2];
 }
 global$0 = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}
function lcdGetPixel_ArrayBuffer_flat($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 HEAP32[$3 + 32 >> 2] = 0;
 $0 = HEAP32[$3 + 44 >> 2];
 HEAP32[$3 + 28 >> 2] = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
 HEAP32[$3 + 24 >> 2] = lcdGetPixelIndex_ArrayBuffer(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2], HEAP32[$3 + 36 >> 2], 1);
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 24 >> 2] >>> 3);
 label$1 : {
  if (HEAPU8[HEAP32[$3 + 44 >> 2] + 16 | 0] & 7) {
   HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] & 7;
   HEAP32[$3 + 20 >> 2] = (1 << HEAPU8[HEAP32[$3 + 44 >> 2] + 16 | 0]) - 1;
   HEAP32[$3 + 16 >> 2] = HEAPU8[HEAP32[$3 + 28 >> 2]];
   $0 = $3;
   $1 = HEAP32[$3 + 44 >> 2];
   $2 = 8 - (HEAP32[$3 + 24 >> 2] + HEAPU8[HEAP32[$3 + 44 >> 2] + 16 | 0] | 0) | 0;
   label$3 : {
    if ((HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24)) & 4) {
     break label$3;
    }
    $2 = HEAP32[$3 + 24 >> 2];
   }
   HEAP32[$0 + 12 >> 2] = $2;
   HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 20 >> 2] & HEAP32[$3 + 16 >> 2] >>> HEAP32[$3 + 12 >> 2];
   break label$1;
  }
  $0 = HEAP32[$3 + 44 >> 2];
  label$5 : {
   if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
    HEAP32[$3 + 8 >> 2] = HEAPU8[HEAP32[$3 + 44 >> 2] + 16 | 0] - 8;
    while (1) {
     if (HEAP32[$3 + 8 >> 2] >= 0) {
      HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] | HEAPU8[HEAP32[$3 + 28 >> 2]] << HEAP32[$3 + 8 >> 2];
      HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 28 >> 2] + 1;
      HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] - 8;
      continue;
     }
     break;
    }
    break label$5;
   }
   HEAP32[$3 + 4 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 4 >> 2] < HEAPU8[HEAP32[$3 + 44 >> 2] + 16 | 0]) {
     HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] | HEAPU8[HEAP32[$3 + 28 >> 2]] << HEAP32[$3 + 4 >> 2];
     HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 28 >> 2] + 1;
     HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 8;
     continue;
    }
    break;
   }
  }
 }
 global$0 = $3 + 48 | 0;
 return HEAP32[$3 + 32 >> 2];
}
function tflite__ops__micro__add__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 68 >> 2] = $1;
 HEAP32[$2 + 64 >> 2] = HEAP32[HEAP32[$2 + 68 >> 2] + 20 >> 2];
 HEAP32[$2 + 60 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 68 >> 2], 0);
 HEAP32[$2 + 56 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 68 >> 2], 1);
 HEAP32[$2 + 52 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 68 >> 2]);
 label$1 : {
  if (tflite__ops__micro__add__CalculateOpData_28TfLiteContext__2c_20TfLiteAddParams__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20tflite__ops__micro__add__OpData__29(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 64 >> 2], HEAP32[$2 + 60 >> 2], HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], $2)) {
   HEAP32[$2 + 76 >> 2] = 1;
   break label$1;
  }
  label$3 : {
   if (HEAP32[HEAP32[$2 + 52 >> 2] >> 2] == 1) {
    tflite__ops__micro__add__EvalAdd_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteAddParams__2c_20tflite__ops__micro__add__OpData_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 68 >> 2], HEAP32[$2 + 64 >> 2], $2, HEAP32[$2 + 60 >> 2], HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2]);
    break label$3;
   }
   label$5 : {
    if (!(HEAP32[HEAP32[$2 + 52 >> 2] >> 2] != 9 ? HEAP32[HEAP32[$2 + 52 >> 2] >> 2] != 3 : 0)) {
     if (tflite__ops__micro__add__EvalAddQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteAddParams__2c_20tflite__ops__micro__add__OpData_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 68 >> 2], HEAP32[$2 + 64 >> 2], $2, HEAP32[$2 + 60 >> 2], HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2])) {
      HEAP32[$2 + 76 >> 2] = 1;
      break label$1;
     }
     break label$5;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$2 + 72 >> 2] + 20 >> 2]](HEAP32[$2 + 72 >> 2], 45105, 0);
    HEAP32[$2 + 76 >> 2] = 1;
    break label$1;
   }
  }
  HEAP32[$2 + 76 >> 2] = 0;
 }
 global$0 = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}
function jsserialGetSendFunction($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 HEAP8[$3 + 31 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 40 >> 2]);
 label$1 : {
  if (!(HEAPU8[$3 + 31 | 0] < 17 | HEAPU8[$3 + 31 | 0] > 22)) {
   label$3 : {
    if (HEAPU8[$3 + 31 | 0] < 22 | HEAPU8[$3 + 31 | 0] > 22) {
     break label$3;
    }
    if (jshIsDeviceInitialised(HEAPU8[$3 + 31 | 0]) & 1) {
     break label$3;
    }
    $0 = $3 + 16 | 0;
    jshUSARTInitInfo($0);
    jshUSARTSetup(HEAPU8[$3 + 31 | 0], $0);
   }
   HEAP32[HEAP32[$3 + 36 >> 2] >> 2] = 16;
   HEAP8[HEAP32[$3 + 32 >> 2]] = HEAPU8[$3 + 31 | 0];
   HEAP8[$3 + 47 | 0] = 1;
   break label$1;
  }
  if (!HEAPU8[$3 + 31 | 0]) {
   $1 = $3 + 16 | 0;
   HEAP32[$3 + 12 >> 2] = jsvObjectGetChild(HEAP32[$3 + 40 >> 2], 7689, 0);
   HEAP32[$3 + 8 >> 2] = jsvObjectGetChild(HEAP32[$3 + 40 >> 2], 7699, 0);
   jsserialPopulateUSARTInfo($1, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
   jsvUnLock(HEAP32[$3 + 8 >> 2]);
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   HEAP32[HEAP32[$3 + 36 >> 2] >> 2] = 17;
   $4 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
   $0 = HEAP32[$3 + 32 >> 2];
   $2 = $0;
   $5 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
   HEAP8[$2 | 0] = $5;
   HEAP8[$2 + 1 | 0] = $5 >>> 8;
   HEAP8[$2 + 2 | 0] = $5 >>> 16;
   HEAP8[$2 + 3 | 0] = $5 >>> 24;
   HEAP8[$2 + 4 | 0] = $4;
   HEAP8[$2 + 5 | 0] = $4 >>> 8;
   HEAP8[$2 + 6 | 0] = $4 >>> 16;
   HEAP8[$2 + 7 | 0] = $4 >>> 24;
   $2 = HEAPU8[$1 + 9 | 0] | HEAPU8[$1 + 10 | 0] << 8 | (HEAPU8[$1 + 11 | 0] << 16 | HEAPU8[$1 + 12 | 0] << 24);
   $1 = HEAPU8[$1 + 5 | 0] | HEAPU8[$1 + 6 | 0] << 8 | (HEAPU8[$1 + 7 | 0] << 16 | HEAPU8[$1 + 8 | 0] << 24);
   HEAP8[$0 + 5 | 0] = $1;
   HEAP8[$0 + 6 | 0] = $1 >>> 8;
   HEAP8[$0 + 7 | 0] = $1 >>> 16;
   HEAP8[$0 + 8 | 0] = $1 >>> 24;
   HEAP8[$0 + 9 | 0] = $2;
   HEAP8[$0 + 10 | 0] = $2 >>> 8;
   HEAP8[$0 + 11 | 0] = $2 >>> 16;
   HEAP8[$0 + 12 | 0] = $2 >>> 24;
   HEAP8[$3 + 47 | 0] = 1;
   break label$1;
  }
  HEAP8[$3 + 47 | 0] = 0;
 }
 global$0 = $3 + 48 | 0;
 return HEAP8[$3 + 47 | 0] & 1;
}
function jswrap_arraybufferview_map($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 144 | 0;
 global$0 = $3;
 HEAP32[$3 + 136 >> 2] = $0;
 HEAP32[$3 + 132 >> 2] = $1;
 HEAP32[$3 + 128 >> 2] = $2;
 label$1 : {
  if (!(jsvIsArrayBuffer(HEAP32[$3 + 136 >> 2]) & 1)) {
   jsExceptionHere(1, 30940, 0);
   HEAP32[$3 + 140 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsFunction(HEAP32[$3 + 132 >> 2]) & 1)) {
   jsExceptionHere(1, 31001, 0);
   HEAP32[$3 + 140 >> 2] = 0;
   break label$1;
  }
  label$4 : {
   if (jsvIsUndefined(HEAP32[$3 + 128 >> 2]) & 1) {
    break label$4;
   }
   if (jsvIsObject(HEAP32[$3 + 128 >> 2]) & 1) {
    break label$4;
   }
   jsExceptionHere(1, 31059, 0);
   HEAP32[$3 + 140 >> 2] = 0;
   break label$1;
  }
  HEAP16[$3 + 126 >> 1] = HEAPU16[HEAP32[$3 + 136 >> 2] + 4 >> 1];
  HEAP32[$3 + 120 >> 2] = jsvNewTypedArray(HEAPU16[$3 + 126 >> 1], jsvGetArrayBufferLength(HEAP32[$3 + 136 >> 2]));
  if (!HEAP32[$3 + 120 >> 2]) {
   HEAP32[$3 + 140 >> 2] = 0;
   break label$1;
  }
  $0 = $3 + 32 | 0;
  jsvIteratorNew($3 + 72 | 0, HEAP32[$3 + 136 >> 2], 1);
  jsvArrayBufferIteratorNew($0, HEAP32[$3 + 120 >> 2], 0);
  while (1) {
   if (jsvIteratorHasElement($3 + 72 | 0) & 1) {
    HEAP32[$3 + 28 >> 2] = jsvIteratorGetKey($3 + 72 | 0);
    if (jsvIsInt(HEAP32[$3 + 28 >> 2]) & 1) {
     $0 = $3 + 12 | 0;
     $1 = $3 + 72 | 0;
     HEAP32[$3 + 24 >> 2] = jsvGetInteger(HEAP32[$3 + 28 >> 2]);
     HEAP32[$3 + 12 >> 2] = jsvIteratorGetValue($1);
     HEAP32[$3 + 16 >> 2] = jsvNewFromInteger(HEAP32[$3 + 24 >> 2]);
     HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 136 >> 2];
     HEAP32[$3 + 8 >> 2] = jspeFunctionCall(HEAP32[$3 + 132 >> 2], 0, HEAP32[$3 + 128 >> 2], 0, 3, $0);
     jsvUnLockMany(2, $0);
     if (HEAP32[$3 + 8 >> 2]) {
      jsvArrayBufferIteratorSetValue($3 + 32 | 0, HEAP32[$3 + 8 >> 2]);
      jsvUnLock(HEAP32[$3 + 8 >> 2]);
     }
    }
    $0 = $3 + 32 | 0;
    $1 = $3 + 72 | 0;
    jsvUnLock(HEAP32[$3 + 28 >> 2]);
    jsvIteratorNext($1);
    jsvArrayBufferIteratorNext($0);
    continue;
   }
   break;
  }
  $0 = $3 + 32 | 0;
  jsvIteratorFree($3 + 72 | 0);
  jsvArrayBufferIteratorFree($0);
  HEAP32[$3 + 140 >> 2] = HEAP32[$3 + 120 >> 2];
 }
 global$0 = $3 + 144 | 0;
 return HEAP32[$3 + 140 >> 2];
}
function jsvCopyNameOnly($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP8[$3 + 23 | 0] = $1;
 HEAP8[$3 + 22 | 0] = $2;
 HEAP16[$3 + 20 >> 1] = HEAPU16[HEAP32[$3 + 24 >> 2] + 14 >> 1];
 HEAP32[$3 + 16 >> 2] = 0;
 label$1 : {
  if (!(HEAP8[$3 + 22 | 0] & 1)) {
   HEAP16[$3 + 14 >> 1] = HEAPU16[HEAP32[$3 + 24 >> 2] + 14 >> 1] & 63;
   label$3 : {
    if (!(HEAPU16[$3 + 14 >> 1] < 14 | HEAPU16[$3 + 14 >> 1] > 16)) {
     HEAP16[$3 + 20 >> 1] = HEAPU16[$3 + 20 >> 1] & -64 | 9;
     break label$3;
    }
    label$5 : {
     if (jsvGetLastChild(HEAP32[$3 + 24 >> 2]) & 65535) {
      HEAP32[$3 + 16 >> 2] = jsvNewFromStringVar(HEAP32[$3 + 24 >> 2], 0, 2147483647);
      if (!HEAP32[$3 + 16 >> 2]) {
       HEAP32[$3 + 28 >> 2] = 0;
       break label$1;
      }
      break label$5;
     }
     HEAP16[$3 + 20 >> 1] = HEAPU16[$3 + 20 >> 1] & 65472 | jsvGetCharactersInVar(HEAP32[$3 + 24 >> 2]) + 27;
    }
   }
  }
  if (!HEAP32[$3 + 16 >> 2]) {
   HEAP32[$3 + 16 >> 2] = jsvNewWithFlags(HEAPU16[$3 + 20 >> 1] & 127);
   if (!HEAP32[$3 + 16 >> 2]) {
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;
   }
   HEAP32[HEAP32[$3 + 16 >> 2] >> 2] = HEAP32[HEAP32[$3 + 24 >> 2] >> 2];
   if (jsvHasCharacterData(HEAP32[$3 + 24 >> 2]) & 1) {
    if (jsvGetLastChild(HEAP32[$3 + 24 >> 2]) & 65535) {
     HEAP32[$3 + 8 >> 2] = jsvLock(jsvGetLastChild(HEAP32[$3 + 24 >> 2]) & 65535);
     HEAP32[$3 + 4 >> 2] = jsvCopy(HEAP32[$3 + 8 >> 2], 1);
     if (HEAP32[$3 + 4 >> 2]) {
      jsvSetLastChild(HEAP32[$3 + 16 >> 2], jsvGetRef(HEAP32[$3 + 4 >> 2]) & 65535);
      jsvUnLock(HEAP32[$3 + 4 >> 2]);
     }
     jsvUnLock(HEAP32[$3 + 8 >> 2]);
    }
   }
  }
  label$13 : {
   if (!(HEAP8[$3 + 23 | 0] & 1)) {
    break label$13;
   }
   if (!(jsvGetFirstChild(HEAP32[$3 + 24 >> 2]) & 65535)) {
    break label$13;
   }
   label$14 : {
    if (jsvIsNameWithValue(HEAP32[$3 + 24 >> 2]) & 1) {
     jsvSetFirstChild(HEAP32[$3 + 16 >> 2], jsvGetFirstChild(HEAP32[$3 + 24 >> 2]) & 65535);
     break label$14;
    }
    jsvSetFirstChild(HEAP32[$3 + 16 >> 2], jsvRefRef(jsvGetFirstChild(HEAP32[$3 + 24 >> 2]) & 65535) & 65535);
   }
  }
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 16 >> 2];
 }
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function heatshrink_encode_cb($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 848 | 0;
 global$0 = $4;
 HEAP32[$4 + 844 >> 2] = $0;
 HEAP32[$4 + 840 >> 2] = $1;
 HEAP32[$4 + 836 >> 2] = $2;
 HEAP32[$4 + 832 >> 2] = $3;
 heatshrink_encoder_reset($4 + 304 | 0);
 HEAP32[$4 + 40 >> 2] = 0;
 HEAP32[$4 + 36 >> 2] = 0;
 HEAP32[$4 + 32 >> 2] = 0;
 HEAP32[$4 + 28 >> 2] = 0;
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$4 + 20 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 28 >> 2] < 0 ? HEAPU32[$4 + 24 >> 2] > 0 : 1) {
   if (!HEAP32[$4 + 24 >> 2]) {
    HEAP32[$4 + 20 >> 2] = 0;
    while (1) {
     if (HEAPU32[$4 + 24 >> 2] < 128 ? HEAP32[$4 + 28 >> 2] >= 0 : 0) {
      HEAP32[$4 + 28 >> 2] = FUNCTION_TABLE[HEAP32[$4 + 844 >> 2]](HEAP32[$4 + 840 >> 2]);
      if (HEAP32[$4 + 28 >> 2] >= 0) {
       $0 = HEAP32[$4 + 28 >> 2];
       $1 = HEAP32[$4 + 24 >> 2];
       HEAP32[$4 + 24 >> 2] = $1 + 1;
       HEAP8[$1 + ($4 + 176 | 0) | 0] = $0;
      }
      continue;
     }
     break;
    }
   }
   HEAP8[$4 + 19 | 0] = (heatshrink_encoder_sink($4 + 304 | 0, HEAP32[$4 + 20 >> 2] + ($4 + 176 | 0) | 0, HEAP32[$4 + 24 >> 2], $4 + 40 | 0) | 0) >= 0;
   HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] - HEAP32[$4 + 40 >> 2];
   HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 20 >> 2];
   HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 36 >> 2];
   if (!(HEAP32[$4 + 24 >> 2] | HEAP32[$4 + 28 >> 2] >= 0)) {
    heatshrink_encoder_finish($4 + 304 | 0);
   }
   while (1) {
    HEAP32[$4 + 12 >> 2] = heatshrink_encoder_poll($4 + 304 | 0, $4 + 48 | 0, $4 + 40 | 0);
    if (HEAP32[$4 + 836 >> 2]) {
     HEAP32[$4 + 44 >> 2] = 0;
     while (1) {
      if (HEAPU32[$4 + 44 >> 2] < HEAPU32[$4 + 40 >> 2]) {
       FUNCTION_TABLE[HEAP32[$4 + 836 >> 2]](HEAPU8[HEAP32[$4 + 44 >> 2] + ($4 + 48 | 0) | 0], HEAP32[$4 + 832 >> 2]);
       HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 44 >> 2] + 1;
       continue;
      }
      break;
     }
    }
    HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 32 >> 2];
    if (HEAP32[$4 + 12 >> 2] == 1) {
     continue;
    }
    break;
   }
   if (!(HEAP32[$4 + 24 >> 2] | HEAP32[$4 + 28 >> 2] >= 0)) {
    heatshrink_encoder_finish($4 + 304 | 0);
   }
   continue;
  }
  break;
 }
 global$0 = $4 + 848 | 0;
 return HEAP32[$4 + 32 >> 2];
}
function jstStartSignal($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0;
 $8 = global$0 - 80 | 0;
 global$0 = $8;
 HEAP32[$8 + 64 >> 2] = $0;
 HEAP32[$8 + 68 >> 2] = $1;
 HEAP32[$8 + 56 >> 2] = $2;
 HEAP32[$8 + 60 >> 2] = $3;
 HEAP8[$8 + 55 | 0] = $4;
 HEAP32[$8 + 48 >> 2] = $5;
 HEAP32[$8 + 44 >> 2] = $6;
 HEAP8[$8 + 43 | 0] = $7;
 label$1 : {
  if (!(jshIsPinValid(HEAPU8[$8 + 55 | 0]) & 1)) {
   HEAP8[$8 + 79 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$8 + 56 >> 2];
  HEAP8[$8 + 16 | 0] = $0;
  HEAP8[$8 + 17 | 0] = $0 >>> 8;
  HEAP8[$8 + 18 | 0] = $0 >>> 16;
  HEAP8[$8 + 19 | 0] = $0 >>> 24;
  $1 = HEAP32[$8 + 68 >> 2] + HEAP32[$8 + 60 >> 2] | 0;
  $2 = HEAP32[$8 + 56 >> 2];
  $3 = $2 + HEAP32[$8 + 64 >> 2] | 0;
  if ($3 >>> 0 < $2 >>> 0) {
   $1 = $1 + 1 | 0;
  }
  $2 = $3;
  HEAP8[$8 + 8 | 0] = $2;
  HEAP8[$8 + 9 | 0] = $2 >>> 8;
  HEAP8[$8 + 10 | 0] = $2 >>> 16;
  HEAP8[$8 + 11 | 0] = $2 >>> 24;
  HEAP8[$8 + 12 | 0] = $1;
  HEAP8[$8 + 13 | 0] = $1 >>> 8;
  HEAP8[$8 + 14 | 0] = $1 >>> 16;
  HEAP8[$8 + 15 | 0] = $1 >>> 24;
  HEAP8[$8 + 36 | 0] = HEAPU8[$8 + 43 | 0];
  label$3 : {
   if (!(HEAPU8[$8 + 43 | 0] != 5 ? HEAPU8[$8 + 43 | 0] != 3 : 0)) {
    HEAP8[(global$0 - 16 | 0) + 15 | 0] = HEAPU8[$8 + 55 | 0];
    HEAP8[$8 + 34 | 0] = 0;
    HEAP8[$8 + 35 | 0] = 0;
    if (!(HEAPU8[$8 + 34 | 0] | HEAPU8[$8 + 35 | 0] << 8)) {
     HEAP8[$8 + 79 | 0] = 0;
     break label$1;
    }
    break label$3;
   }
   label$7 : {
    if (!(HEAPU8[$8 + 43 | 0] != 6 ? HEAPU8[$8 + 43 | 0] != 4 : 0)) {
     if (!HEAPU8[(Math_imul(HEAPU8[$8 + 55 | 0], 3) + 27904 | 0) + 2 | 0]) {
      HEAP8[$8 + 79 | 0] = 0;
      break label$1;
     }
     HEAP8[$8 + 34 | 0] = HEAPU8[$8 + 55 | 0];
     break label$7;
    }
    HEAP8[$8 + 79 | 0] = 0;
    break label$1;
   }
  }
  $0 = jsvGetRef(HEAP32[$8 + 48 >> 2]);
  HEAP8[$8 + 24 | 0] = $0;
  HEAP8[$8 + 25 | 0] = $0 >>> 8;
  label$11 : {
   if (HEAP32[$8 + 44 >> 2]) {
    $0 = jsvGetRef(HEAP32[$8 + 44 >> 2]);
    HEAP8[$8 + 26 | 0] = $0;
    HEAP8[$8 + 27 | 0] = $0 >>> 8;
    break label$11;
   }
   HEAP8[$8 + 26 | 0] = 0;
   HEAP8[$8 + 27 | 0] = 0;
  }
  $0 = $8 + 8 | 0;
  jstUtilTimerSetupBuffer($0);
  HEAP8[$8 + 79 | 0] = utilTimerInsertTask($0) & 1;
 }
 global$0 = $8 + 80 | 0;
 return HEAP8[$8 + 79 | 0] & 1;
}
function tflite__ops__micro__fully_connected__EvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteFullyConnectedParams__2c_20tflite__ops__micro__fully_connected___28anonymous_20namespace_29__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0;
 $8 = global$0 - 192 | 0;
 global$0 = $8;
 $9 = $8 + 88 | 0;
 HEAP32[$8 + 188 >> 2] = $0;
 HEAP32[$8 + 184 >> 2] = $1;
 HEAP32[$8 + 180 >> 2] = $2;
 HEAP32[$8 + 176 >> 2] = $3;
 HEAP32[$8 + 172 >> 2] = $4;
 HEAP32[$8 + 168 >> 2] = $5;
 HEAP32[$8 + 164 >> 2] = $6;
 HEAP32[$8 + 160 >> 2] = $7;
 void_20tflite__CalculateActivationRange_float__28TfLiteFusedActivation_2c_20float__2c_20float__29(HEAP32[HEAP32[$8 + 180 >> 2] >> 2], $8 + 156 | 0, $8 + 152 | 0);
 HEAPF32[$8 + 140 >> 2] = HEAPF32[$8 + 156 >> 2];
 HEAPF32[$8 + 144 >> 2] = HEAPF32[$8 + 152 >> 2];
 tflite__GetTensorShape_28TfLiteTensor_20const__29($9, HEAP32[$8 + 172 >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 172 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 56 | 0, HEAP32[$8 + 168 >> 2]);
 $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 168 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 32 | 0, HEAP32[$8 + 164 >> 2]);
 $2 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 164 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($8 + 8 | 0, HEAP32[$8 + 160 >> 2]);
 tflite__reference_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($8 + 112 | 0, $8 + 88 | 0, $0, $8 + 56 | 0, $1, $8 + 32 | 0, $2, $8 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$8 + 160 >> 2]));
 $0 = $8 + 88 | 0;
 $1 = $8 + 56 | 0;
 $2 = $8 + 32 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($2);
 tflite__RuntimeShape___RuntimeShape_28_29($1);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $8 + 192 | 0;
 return 0;
}
function tflite__GetRegistrationFromOpCode_28tflite__OperatorCode_20const__2c_20tflite__OpResolver_20const__2c_20tflite__ErrorReporter__2c_20TfLiteRegistration_20const___29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 + -64 | 0;
 global$0 = $4;
 HEAP32[$4 + 60 >> 2] = $0;
 HEAP32[$4 + 56 >> 2] = $1;
 HEAP32[$4 + 52 >> 2] = $2;
 HEAP32[$4 + 48 >> 2] = $3;
 HEAP32[$4 + 44 >> 2] = 0;
 HEAP32[HEAP32[$4 + 48 >> 2] >> 2] = 0;
 HEAP32[$4 + 40 >> 2] = tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$4 + 60 >> 2]);
 HEAP32[$4 + 36 >> 2] = tflite__OperatorCode__version_28_29_20const(HEAP32[$4 + 60 >> 2]);
 label$1 : {
  if (!(HEAP32[$4 + 40 >> 2] >= 0 ? HEAP32[$4 + 40 >> 2] <= 121 : 0)) {
   $0 = HEAP32[$4 + 52 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$4 + 40 >> 2];
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 48912, $4);
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  label$4 : {
   if (HEAP32[$4 + 40 >> 2] != 32) {
    $0 = HEAP32[$4 + 56 >> 2];
    $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, HEAP32[$4 + 40 >> 2], HEAP32[$4 + 36 >> 2]) | 0;
    HEAP32[HEAP32[$4 + 48 >> 2] >> 2] = $0;
    if (!HEAP32[HEAP32[$4 + 48 >> 2] >> 2]) {
     $0 = HEAP32[$4 + 52 >> 2];
     $1 = tflite__EnumNameBuiltinOperator_28tflite__BuiltinOperator_29(HEAP32[$4 + 40 >> 2]);
     HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 36 >> 2];
     HEAP32[$4 + 16 >> 2] = $1;
     tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 48996, $4 + 16 | 0);
     HEAP32[$4 + 44 >> 2] = 1;
    }
    break label$4;
   }
   label$7 : {
    if (!tflite__Model__operator_codes_28_29_20const(HEAP32[$4 + 60 >> 2])) {
     tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$4 + 52 >> 2], 49049, 0);
     HEAP32[$4 + 44 >> 2] = 1;
     break label$7;
    }
    HEAP32[$4 + 32 >> 2] = flatbuffers__Vector_unsigned_20char___data_28_29_20const(tflite__Model__operator_codes_28_29_20const(HEAP32[$4 + 60 >> 2]));
    $0 = HEAP32[$4 + 56 >> 2];
    $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, HEAP32[$4 + 32 >> 2], HEAP32[$4 + 36 >> 2]) | 0;
    HEAP32[HEAP32[$4 + 48 >> 2] >> 2] = $0;
    if (!HEAP32[HEAP32[$4 + 48 >> 2] >> 2]) {
     HEAP32[$4 + 44 >> 2] = 1;
    }
   }
  }
 }
 global$0 = $4 - -64 | 0;
 return HEAP32[$4 + 44 >> 2];
}
function jswrap_io_pinMode($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP8[$3 + 15 | 0] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 label$1 : {
  if (!(jshIsPinValid(HEAPU8[$3 + 15 | 0]) & 1)) {
   jsExceptionHere(1, 33486, 0);
   break label$1;
  }
  HEAP8[$3 + 6 | 0] = 0;
  if (jsvIsString(HEAP32[$3 + 8 >> 2]) & 1) {
   label$4 : {
    if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 33498) & 1) {
     HEAP8[$3 + 6 | 0] = 7;
     break label$4;
    }
    label$6 : {
     if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 33505) & 1) {
      HEAP8[$3 + 6 | 0] = 4;
      break label$6;
     }
     label$8 : {
      if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 33511) & 1) {
       HEAP8[$3 + 6 | 0] = 5;
       break label$8;
      }
      label$10 : {
       if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 33524) & 1) {
        HEAP8[$3 + 6 | 0] = 6;
        break label$10;
       }
       label$12 : {
        if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 33539) & 1) {
         HEAP8[$3 + 6 | 0] = 1;
         break label$12;
        }
        label$14 : {
         if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 33546) & 1) {
          HEAP8[$3 + 6 | 0] = 2;
          break label$14;
         }
         label$16 : {
          if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 33556) & 1) {
           HEAP8[$3 + 6 | 0] = 3;
           break label$16;
          }
          label$18 : {
           if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 33573) & 1) {
            HEAP8[$3 + 6 | 0] = 8;
            break label$18;
           }
           if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 33583) & 1) {
            HEAP8[$3 + 6 | 0] = 9;
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
  if (HEAPU8[$3 + 6 | 0]) {
   jshSetPinStateIsManual(HEAPU8[$3 + 15 | 0], (HEAPU8[$3 + 7 | 0] ^ -1) & 1);
   jshPinSetState(HEAPU8[$3 + 15 | 0], HEAPU8[$3 + 6 | 0]);
   break label$1;
  }
  jshSetPinStateIsManual(HEAPU8[$3 + 15 | 0], 0);
  label$22 : {
   if (jsvIsUndefined(HEAP32[$3 + 8 >> 2]) & 1) {
    break label$22;
   }
   if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 33596) & 1) {
    break label$22;
   }
   jsExceptionHere(1, 33601, 0);
  }
 }
 global$0 = $3 + 16 | 0;
}
function jswrap_function_apply_or_call($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $4 = global$0 - 112 | 0;
 $3 = $4;
 global$0 = $3;
 HEAP32[$3 + 104 >> 2] = $0;
 HEAP32[$3 + 100 >> 2] = $1;
 HEAP32[$3 + 96 >> 2] = $2;
 HEAP32[$3 + 88 >> 2] = 0;
 HEAP32[$3 + 84 >> 2] = 0;
 label$1 : {
  label$2 : {
   if (jsvIsIterable(HEAP32[$3 + 96 >> 2]) & 1) {
    HEAP32[$3 + 84 >> 2] = jsvGetLength(HEAP32[$3 + 96 >> 2]);
    if (HEAPU32[$3 + 84 >> 2] > 64) {
     HEAP32[$3 >> 2] = HEAP32[$3 + 84 >> 2];
     jsExceptionHere(1, 35654, $3);
     HEAP32[$3 + 108 >> 2] = 0;
     break label$1;
    }
    $0 = $4 - ((HEAP32[$3 + 84 >> 2] << 2) + 15 & -16) | 0;
    global$0 = $0;
    HEAP32[$3 + 88 >> 2] = $0;
    HEAP32[$3 + 92 >> 2] = 0;
    while (1) {
     if (HEAPU32[$3 + 92 >> 2] < HEAPU32[$3 + 84 >> 2]) {
      HEAP32[HEAP32[$3 + 88 >> 2] + (HEAP32[$3 + 92 >> 2] << 2) >> 2] = 0;
      HEAP32[$3 + 92 >> 2] = HEAP32[$3 + 92 >> 2] + 1;
      continue;
     }
     break;
    }
    jsvIteratorNew($3 + 40 | 0, HEAP32[$3 + 96 >> 2], 1);
    while (1) {
     if (jsvIteratorHasElement($3 + 40 | 0) & 1) {
      HEAP32[$3 + 36 >> 2] = jsvIteratorGetKey($3 + 40 | 0);
      if (jsvIsIntegerish(HEAP32[$3 + 36 >> 2]) & 1) {
       HEAP32[$3 + 32 >> 2] = jsvGetInteger(HEAP32[$3 + 36 >> 2]);
       if (!(HEAP32[$3 + 32 >> 2] < 0 | HEAP32[$3 + 32 >> 2] >= HEAP32[$3 + 84 >> 2])) {
        $0 = jsvIteratorGetValue($3 + 40 | 0);
        HEAP32[HEAP32[$3 + 88 >> 2] + (HEAP32[$3 + 32 >> 2] << 2) >> 2] = $0;
       }
      }
      $0 = $3 + 40 | 0;
      jsvUnLock(HEAP32[$3 + 36 >> 2]);
      jsvIteratorNext($0);
      continue;
     }
     break;
    }
    jsvIteratorFree($3 + 40 | 0);
    break label$2;
   }
   if (!(jsvIsUndefined(HEAP32[$3 + 96 >> 2]) & 1)) {
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 96 >> 2];
    jsExceptionHere(1, 35726, $3 + 16 | 0);
    HEAP32[$3 + 108 >> 2] = 0;
    break label$1;
   }
  }
  HEAP32[$3 + 28 >> 2] = jspeFunctionCall(HEAP32[$3 + 104 >> 2], 0, HEAP32[$3 + 100 >> 2], 0, HEAP32[$3 + 84 >> 2], HEAP32[$3 + 88 >> 2]);
  jsvUnLockMany(HEAP32[$3 + 84 >> 2], HEAP32[$3 + 88 >> 2]);
  HEAP32[$3 + 108 >> 2] = HEAP32[$3 + 28 >> 2];
 }
 global$0 = $3 + 112 | 0;
 return HEAP32[$3 + 108 >> 2];
}
function heatshrink_decode_cb($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 624 | 0;
 global$0 = $4;
 HEAP32[$4 + 620 >> 2] = $0;
 HEAP32[$4 + 616 >> 2] = $1;
 HEAP32[$4 + 612 >> 2] = $2;
 HEAP32[$4 + 608 >> 2] = $3;
 heatshrink_decoder_reset($4 + 304 | 0);
 HEAP32[$4 + 40 >> 2] = 0;
 HEAP32[$4 + 36 >> 2] = 0;
 HEAP32[$4 + 32 >> 2] = 0;
 HEAP32[$4 + 28 >> 2] = 0;
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$4 + 20 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 28 >> 2] < 0 ? HEAPU32[$4 + 24 >> 2] > 0 : 1) {
   if (!HEAP32[$4 + 24 >> 2]) {
    HEAP32[$4 + 20 >> 2] = 0;
    while (1) {
     if (HEAPU32[$4 + 24 >> 2] < 128 ? HEAP32[$4 + 28 >> 2] >= 0 : 0) {
      HEAP32[$4 + 28 >> 2] = FUNCTION_TABLE[HEAP32[$4 + 620 >> 2]](HEAP32[$4 + 616 >> 2]);
      if (HEAP32[$4 + 28 >> 2] >= 0) {
       $0 = HEAP32[$4 + 28 >> 2];
       $1 = HEAP32[$4 + 24 >> 2];
       HEAP32[$4 + 24 >> 2] = $1 + 1;
       HEAP8[$1 + ($4 + 176 | 0) | 0] = $0;
      }
      continue;
     }
     break;
    }
   }
   HEAP8[$4 + 19 | 0] = (heatshrink_decoder_sink($4 + 304 | 0, HEAP32[$4 + 20 >> 2] + ($4 + 176 | 0) | 0, HEAP32[$4 + 24 >> 2], $4 + 40 | 0) | 0) >= 0;
   HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] - HEAP32[$4 + 40 >> 2];
   HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 20 >> 2];
   HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 36 >> 2];
   if (!(HEAP32[$4 + 24 >> 2] | HEAP32[$4 + 28 >> 2] >= 0)) {
    heatshrink_decoder_finish($4 + 304 | 0);
   }
   while (1) {
    HEAP32[$4 + 12 >> 2] = heatshrink_decoder_poll($4 + 304 | 0, $4 + 48 | 0, $4 + 40 | 0);
    if (HEAP32[$4 + 612 >> 2]) {
     HEAP32[$4 + 44 >> 2] = 0;
     while (1) {
      if (HEAPU32[$4 + 44 >> 2] < HEAPU32[$4 + 40 >> 2]) {
       FUNCTION_TABLE[HEAP32[$4 + 612 >> 2]](HEAPU8[HEAP32[$4 + 44 >> 2] + ($4 + 48 | 0) | 0], HEAP32[$4 + 608 >> 2]);
       HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 44 >> 2] + 1;
       continue;
      }
      break;
     }
    }
    HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 32 >> 2];
    if (HEAP32[$4 + 12 >> 2] == 1) {
     continue;
    }
    break;
   }
   if (HEAP32[$4 + 28 >> 2] < 0) {
    heatshrink_decoder_finish($4 + 304 | 0);
   }
   continue;
  }
  break;
 }
 global$0 = $4 + 624 | 0;
 return HEAP32[$4 + 32 >> 2];
}
function TfLiteStatus_20tflite__ops__micro__elementwise___28anonymous_20namespace_29__EvalImpl_float__28TfLiteContext__2c_20TfLiteNode__2c_20float_20_28__29_28float_29_2c_20TfLiteType_29($0, $1, $2) {
 var $3 = 0, $4 = Math_fround(0);
 $3 = global$0 - 80 | 0;
 global$0 = $3;
 HEAP32[$3 + 72 >> 2] = $0;
 HEAP32[$3 + 68 >> 2] = $1;
 HEAP32[$3 + 64 >> 2] = $2;
 HEAP32[$3 + 60 >> 2] = 1;
 HEAP32[$3 + 56 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$3 + 72 >> 2], HEAP32[$3 + 68 >> 2], 0);
 HEAP32[$3 + 52 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$3 + 72 >> 2], HEAP32[$3 + 68 >> 2]);
 label$1 : {
  if (HEAP32[HEAP32[$3 + 56 >> 2] >> 2] != HEAP32[$3 + 60 >> 2]) {
   $0 = HEAP32[HEAP32[$3 + 72 >> 2] + 20 >> 2];
   $1 = HEAP32[$3 + 72 >> 2];
   $2 = HEAP32[HEAP32[$3 + 56 >> 2] >> 2];
   HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 60 >> 2];
   HEAP32[$3 + 16 >> 2] = $2;
   HEAP32[$3 + 12 >> 2] = 47500;
   HEAP32[$3 + 8 >> 2] = 47488;
   HEAP32[$3 + 4 >> 2] = 57;
   HEAP32[$3 >> 2] = 47386;
   FUNCTION_TABLE[$0]($1, 47360, $3);
   HEAP32[$3 + 76 >> 2] = 1;
   break label$1;
  }
  HEAP32[$3 + 40 >> 2] = tflite__NumElements_28TfLiteTensor_20const__29(HEAP32[$3 + 56 >> 2]);
  HEAP32[$3 + 44 >> 2] = i64toi32_i32$HIGH_BITS;
  HEAP32[$3 + 36 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$3 + 56 >> 2]);
  HEAP32[$3 + 32 >> 2] = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$3 + 52 >> 2]);
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  while (1) {
   $0 = HEAP32[$3 + 28 >> 2];
   $1 = HEAP32[$3 + 44 >> 2];
   if (($0 | 0) < ($1 | 0) ? 1 : ($0 | 0) <= ($1 | 0) ? HEAPU32[$3 + 24 >> 2] >= HEAPU32[$3 + 40 >> 2] ? 0 : 1 : 0) {
    $4 = Math_fround(FUNCTION_TABLE[HEAP32[$3 + 64 >> 2]](HEAPF32[HEAP32[$3 + 36 >> 2] + (HEAP32[$3 + 24 >> 2] << 2) >> 2]));
    HEAPF32[HEAP32[$3 + 32 >> 2] + (HEAP32[$3 + 24 >> 2] << 2) >> 2] = $4;
    $1 = HEAP32[$3 + 28 >> 2];
    $2 = HEAP32[$3 + 24 >> 2] + 1 | 0;
    if ($2 >>> 0 < 1) {
     $1 = $1 + 1 | 0;
    }
    HEAP32[$3 + 24 >> 2] = $2;
    HEAP32[$3 + 28 >> 2] = $1;
    continue;
   }
   break;
  }
  HEAP32[$3 + 76 >> 2] = 0;
 }
 global$0 = $3 + 80 | 0;
 return HEAP32[$3 + 76 >> 2];
}
function jspeStatementTry() {
 var $0 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 jslGetNextToken();
 HEAP8[$0 + 27 | 0] = (HEAP32[23778] & 63) == 1;
 jspeBlock();
 HEAP8[$0 + 26 | 0] = HEAP8[$0 + 27 | 0] & 1 ? (HEAP32[23778] & 32) != 0 : 0;
 HEAP8[$0 + 25 | 0] = 0;
 label$3 : {
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 178) {
   jslGetNextToken();
   HEAP8[$0 + 25 | 0] = 1;
   if (!(jslMatch(40) & 1)) {
    break label$3;
   }
   HEAP32[$0 + 20 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   if (HEAP8[$0 + 26 | 0] & 1) {
    HEAP32[$0 + 20 >> 2] = jsvNewWithFlags(5);
    if (HEAP32[$0 + 20 >> 2]) {
     HEAP32[$0 + 16 >> 2] = jsvFindChildFromString(HEAP32[$0 + 20 >> 2], jslGetTokenValueAsString(), 1);
    }
   }
   if (!(jslMatch(128) & 1)) {
    jsvUnLock2(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2]);
    break label$3;
   }
   if (!(jslMatch(41) & 1)) {
    jsvUnLock2(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2]);
    break label$3;
   }
   if (HEAP32[$0 + 16 >> 2]) {
    HEAP32[$0 + 12 >> 2] = jspGetException();
    if (HEAP32[$0 + 12 >> 2]) {
     jsvSetValueOfName(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 12 >> 2]);
     jsvUnLock(HEAP32[$0 + 12 >> 2]);
    }
    HEAP32[23778] = HEAP32[23778] & -161;
    jsvUnLock(HEAP32[$0 + 16 >> 2]);
   }
   label$11 : {
    if (!(!(HEAP8[$0 + 27 | 0] & 1) | HEAP8[$0 + 26 | 0] & 1)) {
     HEAP32[$0 + 8 >> 2] = HEAP32[23778];
     jspSetNoExecute();
     jspeBlock();
     HEAP32[23778] = HEAP32[23778] & -1664 | HEAP32[$0 + 8 >> 2] & 1663;
     break label$11;
    }
    label$13 : {
     if (HEAP32[$0 + 20 >> 2]) {
      if (!(jspeiAddScope(HEAP32[$0 + 20 >> 2]) & 1)) {
       break label$13;
      }
     }
     jspeBlock();
     if (HEAP32[$0 + 20 >> 2]) {
      jspeiRemoveScope();
     }
    }
   }
   jsvUnLock(HEAP32[$0 + 20 >> 2]);
  }
  if (!(HEAP8[$0 + 25 | 0] & 1 | HEAP32[23778] & 80 ? HEAP16[HEAP32[13768] + 2 >> 1] != 179 : 0)) {
   if (!(jslMatch(179) & 1)) {
    break label$3;
   }
   if (HEAP8[$0 + 26 | 0] & 1) {
    HEAP32[23778] = HEAP32[23778] & -33;
   }
   jspeBlock();
   if (!(!(HEAP8[$0 + 26 | 0] & 1) | HEAP8[$0 + 25 | 0] & 1)) {
    HEAP32[23778] = HEAP32[23778] | 32;
   }
  }
 }
 HEAP32[$0 + 28 >> 2] = 0;
 global$0 = $0 + 32 | 0;
 return HEAP32[$0 + 28 >> 2];
}
function jswrap_string_indexOf($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 48 | 0;
 global$0 = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP8[$4 + 31 | 0] = $3;
 label$1 : {
  if (!(jsvIsString(HEAP32[$4 + 40 >> 2]) & 1)) {
   HEAP32[$4 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 36 >> 2] = jsvAsString(HEAP32[$4 + 36 >> 2]);
  if (!HEAP32[$4 + 36 >> 2]) {
   HEAP32[$4 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 24 >> 2] = jsvGetStringLength(HEAP32[$4 + 40 >> 2]);
  HEAP32[$4 + 20 >> 2] = jsvGetStringLength(HEAP32[$4 + 36 >> 2]);
  if (HEAP32[$4 + 20 >> 2] > HEAP32[$4 + 24 >> 2]) {
   jsvUnLock(HEAP32[$4 + 36 >> 2]);
   HEAP32[$4 + 44 >> 2] = -1;
   break label$1;
  }
  HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 24 >> 2] - HEAP32[$4 + 20 >> 2];
  label$5 : {
   if (!(HEAP8[$4 + 31 | 0] & 1)) {
    HEAP32[$4 + 8 >> 2] = 1;
    HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 16 >> 2] + 1;
    HEAP32[$4 + 12 >> 2] = 0;
    if (jsvIsNumeric(HEAP32[$4 + 32 >> 2]) & 1) {
     HEAP32[$4 + 12 >> 2] = jsvGetInteger(HEAP32[$4 + 32 >> 2]);
     if (HEAP32[$4 + 12 >> 2] < 0) {
      HEAP32[$4 + 12 >> 2] = 0;
     }
     if (HEAP32[$4 + 12 >> 2] > HEAP32[$4 + 4 >> 2]) {
      HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 4 >> 2];
     }
    }
    break label$5;
   }
   HEAP32[$4 + 8 >> 2] = -1;
   HEAP32[$4 + 4 >> 2] = -1;
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 16 >> 2];
   if (jsvIsNumeric(HEAP32[$4 + 32 >> 2]) & 1) {
    HEAP32[$4 + 12 >> 2] = jsvGetInteger(HEAP32[$4 + 32 >> 2]);
    if (HEAP32[$4 + 12 >> 2] < 0) {
     HEAP32[$4 + 12 >> 2] = 0;
    }
    if (HEAP32[$4 + 12 >> 2] > HEAP32[$4 + 16 >> 2]) {
     HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 16 >> 2];
    }
   }
  }
  while (1) {
   if (HEAP32[$4 + 12 >> 2] != HEAP32[$4 + 4 >> 2]) {
    if (jsvCompareString(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 12 >> 2], 1)) {
     HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 8 >> 2] + HEAP32[$4 + 12 >> 2];
     continue;
    } else {
     jsvUnLock(HEAP32[$4 + 36 >> 2]);
     HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 12 >> 2];
     break label$1;
    }
   }
   break;
  }
  jsvUnLock(HEAP32[$4 + 36 >> 2]);
  HEAP32[$4 + 44 >> 2] = -1;
 }
 global$0 = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}
function _parse_time($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = stringToIntWithRadix(jslGetTokenValueAsString() + HEAP32[$2 + 20 >> 2] | 0, 10, 0, 0);
 HEAP32[HEAP32[$2 + 24 >> 2] + 16 >> 2] = $0;
 jslGetNextToken();
 label$1 : {
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 58) {
   jslGetNextToken();
   if (HEAP16[HEAP32[13768] + 2 >> 1] == 129) {
    $0 = _parse_int();
    HEAP32[HEAP32[$2 + 24 >> 2] + 12 >> 2] = $0;
    jslGetNextToken();
    if (HEAP16[HEAP32[13768] + 2 >> 1] == 58) {
     jslGetNextToken();
     if (!(HEAP16[HEAP32[13768] + 2 >> 1] != 130 ? HEAP16[HEAP32[13768] + 2 >> 1] != 129 : 0)) {
      HEAPF64[$2 + 8 >> 3] = stringToFloat(jslGetTokenValueAsString());
      $0 = HEAP32[$2 + 24 >> 2];
      $3 = HEAPF64[$2 + 8 >> 3];
      label$7 : {
       if (Math_abs($3) < 2147483648) {
        $1 = ~~$3;
        break label$7;
       }
       $1 = -2147483648;
      }
      HEAP32[$0 + 8 >> 2] = $1;
      $0 = HEAP32[$2 + 24 >> 2];
      $3 = HEAPF64[$2 + 8 >> 3] * 1e3;
      label$9 : {
       if (Math_abs($3) < 2147483648) {
        $1 = ~~$3;
        break label$9;
       }
       $1 = -2147483648;
      }
      HEAP32[$0 + 4 >> 2] = ($1 | 0) % 1e3;
      jslGetNextToken();
      label$11 : {
       if (HEAP16[HEAP32[13768] + 2 >> 1] != 128) {
        break label$11;
       }
       if (strcmp(jslGetTokenValueAsString(), 31515)) {
        break label$11;
       }
       HEAP32[HEAP32[$2 + 24 >> 2] + 20 >> 2] = 0;
       jslGetNextToken();
      }
      if (!(HEAP16[HEAP32[13768] + 2 >> 1] != 45 ? HEAP16[HEAP32[13768] + 2 >> 1] != 43 : 0)) {
       HEAP32[$2 + 4 >> 2] = HEAP16[HEAP32[13768] + 2 >> 1] == 43 ? 1 : -1;
       jslGetNextToken();
       if (HEAP16[HEAP32[13768] + 2 >> 1] == 129) {
        HEAP32[$2 >> 2] = _parse_int();
        HEAP32[$2 >> 2] = Math_imul(HEAP32[$2 >> 2] / 100 | 0, 60) + (HEAP32[$2 >> 2] % 100 | 0);
        HEAP32[HEAP32[$2 + 24 >> 2] + 20 >> 2] = Math_imul(HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]);
        jslGetNextToken();
       }
      }
      HEAP8[$2 + 31 | 0] = 1;
      break label$1;
     }
    }
   }
  }
  HEAP8[$2 + 31 | 0] = 0;
 }
 global$0 = $2 + 32 | 0;
}
function jswrap_promise_all($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 HEAP32[$1 + 40 >> 2] = $0;
 label$1 : {
  if (!(jsvIsIterable(HEAP32[$1 + 40 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 40 >> 2];
   jsExceptionHere(3, 36625, $1);
   HEAP32[$1 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 36 >> 2] = jspNewObject(0, 36617);
  if (!HEAP32[$1 + 36 >> 2]) {
   HEAP32[$1 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 32 >> 2] = jsvNewNativeFunction(540, 32776);
  if (HEAP32[$1 + 32 >> 2]) {
   $0 = $1 + 16 | 0;
   jsvObjectSetChild(HEAP32[$1 + 32 >> 2], 36555, HEAP32[$1 + 36 >> 2]);
   HEAP32[$1 + 28 >> 2] = jsvNewWithFlags(3);
   HEAP32[$1 + 24 >> 2] = 0;
   HEAP32[$1 + 20 >> 2] = 0;
   jsvObjectIteratorNew($0, HEAP32[$1 + 40 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue($1 + 16 | 0) & 1) {
     HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue($1 + 16 | 0);
     label$7 : {
      if (_jswrap_promise_is_promise(HEAP32[$1 + 12 >> 2]) & 1) {
       HEAP32[$1 + 8 >> 2] = jsvNewNativeFunction(541, 32864);
       HEAP32[$1 + 4 >> 2] = jsvNewFromInteger(HEAP32[$1 + 24 >> 2]);
       jsvAddFunctionParameter(HEAP32[$1 + 8 >> 2], 0, HEAP32[$1 + 4 >> 2]);
       jsvUnLock(HEAP32[$1 + 4 >> 2]);
       jsvObjectSetChild(HEAP32[$1 + 8 >> 2], 36555, HEAP32[$1 + 36 >> 2]);
       jsvUnLock2(jswrap_promise_then(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 32 >> 2]), HEAP32[$1 + 8 >> 2]);
       break label$7;
      }
      jsvSetArrayItem(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 24 >> 2], HEAP32[$1 + 12 >> 2]);
      HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 20 >> 2] + 1;
     }
     $0 = $1 + 16 | 0;
     jsvUnLock(HEAP32[$1 + 12 >> 2]);
     HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + 1;
     jsvObjectIteratorNext($0);
     continue;
    }
    break;
   }
   jsvObjectIteratorFree($1 + 16 | 0);
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 36606, jsvNewFromInteger(HEAP32[$1 + 24 >> 2] - HEAP32[$1 + 20 >> 2] | 0));
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 36612, HEAP32[$1 + 28 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 32 >> 2]);
  HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 36 >> 2];
 }
 global$0 = $1 + 48 | 0;
 return HEAP32[$1 + 44 >> 2];
}
function jsspiPopulateSPIInfo($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 128 | 0;
 global$0 = $2;
 $3 = $2 + 16 | 0;
 $4 = $2 + 116 | 0;
 $5 = $2 + 112 | 0;
 HEAP32[$2 + 124 >> 2] = $0;
 HEAP32[$2 + 120 >> 2] = $1;
 jshSPIInitInfo(HEAP32[$2 + 124 >> 2]);
 HEAP32[$2 + 116 >> 2] = 0;
 HEAP32[$2 + 112 >> 2] = HEAPU8[HEAP32[$2 + 124 >> 2] + 8 | 0];
 HEAP32[$2 + 16 >> 2] = 7815;
 HEAP16[$2 + 20 >> 1] = 12;
 HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 124 >> 2] + 5;
 HEAP32[$2 + 28 >> 2] = 7819;
 HEAP16[$2 + 32 >> 1] = 12;
 HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 124 >> 2] + 6;
 HEAP32[$2 + 40 >> 2] = 7824;
 HEAP16[$2 + 44 >> 1] = 12;
 HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 124 >> 2] + 7;
 HEAP32[$2 + 52 >> 2] = 7829;
 HEAP16[$2 + 56 >> 1] = 9;
 HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 124 >> 2];
 HEAP32[$2 + 64 >> 2] = 7834;
 HEAP16[$2 + 68 >> 1] = 9;
 HEAP32[$2 + 72 >> 2] = $5;
 HEAP32[$2 + 76 >> 2] = 7839;
 HEAP16[$2 + 80 >> 1] = 5;
 HEAP32[$2 + 84 >> 2] = $4;
 HEAP32[$2 + 88 >> 2] = 7845;
 HEAP16[$2 + 92 >> 1] = 9;
 HEAP32[$2 + 96 >> 2] = HEAP32[$2 + 124 >> 2] + 10;
 HEAP8[$2 + 15 | 0] = 1;
 if (jsvReadConfigObject(HEAP32[$2 + 120 >> 2], $3, 7) & 1) {
  HEAP8[HEAP32[$2 + 124 >> 2] + 8 | 0] = HEAP32[$2 + 112 >> 2] & 3;
  label$2 : {
   label$3 : {
    if (!(jsvIsString(HEAP32[$2 + 116 >> 2]) & 1)) {
     break label$3;
    }
    if (!(jsvIsStringEqual(HEAP32[$2 + 116 >> 2], 7850) & 1)) {
     break label$3;
    }
    HEAP8[HEAP32[$2 + 124 >> 2] + 9 | 0] = 1;
    break label$2;
   }
   label$4 : {
    label$5 : {
     if (!(jsvIsString(HEAP32[$2 + 116 >> 2]) & 1)) {
      break label$5;
     }
     if (!(jsvIsStringEqual(HEAP32[$2 + 116 >> 2], 7854) & 1)) {
      break label$5;
     }
     HEAP8[HEAP32[$2 + 124 >> 2] + 9 | 0] = 0;
     break label$4;
    }
    if (!(jsvIsUndefined(HEAP32[$2 + 116 >> 2]) & 1)) {
     jsExceptionHere(1, 7858, 0);
     HEAP8[$2 + 15 | 0] = 0;
    }
   }
  }
  $0 = HEAP32[$2 + 124 >> 2];
  if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) < 100) {
   jsExceptionHere(1, 7893, 0);
   HEAP8[$2 + 15 | 0] = 0;
  }
 }
 jsvUnLock(HEAP32[$2 + 116 >> 2]);
 global$0 = $2 + 128 | 0;
 return HEAP8[$2 + 15 | 0] & 1;
}
function jsvGetPathTo_int($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 112 | 0;
 global$0 = $5;
 HEAP32[$5 + 104 >> 2] = $0;
 HEAP32[$5 + 100 >> 2] = $1;
 HEAP32[$5 + 96 >> 2] = $2;
 HEAP32[$5 + 92 >> 2] = $3;
 HEAP32[$5 + 88 >> 2] = $4;
 label$1 : {
  if (HEAP32[$5 + 96 >> 2] <= 0) {
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 96 >> 2] + 1;
  HEAP32[$5 + 80 >> 2] = 0;
  jsvIteratorNew($5 + 32 | 0, HEAP32[$5 + 104 >> 2], 0);
  while (1) {
   if (jsvIteratorHasElement($5 + 32 | 0) & 1) {
    HEAP32[$5 + 28 >> 2] = jsvIteratorGetValue($5 + 32 | 0);
    if (!(HEAP32[$5 + 104 >> 2] == HEAP32[$5 + 92 >> 2] | HEAP32[$5 + 28 >> 2] != HEAP32[$5 + 100 >> 2])) {
     $0 = $5 + 32 | 0;
     HEAP32[$5 + 24 >> 2] = jsvAsStringAndUnLock(jsvIteratorGetKey($0));
     jsvIteratorFree($0);
     HEAP32[$5 + 108 >> 2] = HEAP32[$5 + 24 >> 2];
     break label$1;
    }
    label$6 : {
     label$7 : {
      if (jsvIsObject(HEAP32[$5 + 28 >> 2]) & 1) {
       break label$7;
      }
      if (jsvIsArray(HEAP32[$5 + 28 >> 2]) & 1) {
       break label$7;
      }
      if (!(jsvIsFunction(HEAP32[$5 + 28 >> 2]) & 1)) {
       break label$6;
      }
     }
     HEAP32[$5 + 16 >> 2] = jsvGetPathTo_int(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 100 >> 2], HEAP32[$5 + 96 >> 2] - 1 | 0, HEAP32[$5 + 92 >> 2], $5 + 20 | 0);
     if (!(!HEAP32[$5 + 16 >> 2] | HEAP32[$5 + 20 >> 2] >= HEAP32[$5 + 84 >> 2])) {
      HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 20 >> 2];
      HEAP32[$5 + 12 >> 2] = jsvIteratorGetKey($5 + 32 | 0);
      jsvUnLock(HEAP32[$5 + 80 >> 2]);
      $0 = jsvIsObject(HEAP32[$5 + 28 >> 2]);
      $1 = HEAP32[$5 + 12 >> 2];
      HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 16 >> 2];
      HEAP32[$5 >> 2] = $1;
      HEAP32[$5 + 80 >> 2] = jsvVarPrintf($0 & 1 ? 3390 : 3396, $5);
      jsvUnLock(HEAP32[$5 + 12 >> 2]);
     }
     jsvUnLock(HEAP32[$5 + 16 >> 2]);
    }
    jsvIteratorNext($5 + 32 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($5 + 32 | 0);
  HEAP32[HEAP32[$5 + 88 >> 2] >> 2] = HEAP32[$5 + 84 >> 2];
  HEAP32[$5 + 108 >> 2] = HEAP32[$5 + 80 >> 2];
 }
 global$0 = $5 + 112 | 0;
 return HEAP32[$5 + 108 >> 2];
}
function jswrap_interface_clearWatch($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 HEAP32[$1 + 60 >> 2] = $0;
 label$1 : {
  label$2 : {
   if (!(jsvIsUndefined(HEAP32[$1 + 60 >> 2]) & 1)) {
    if (jsvGetArrayLength(HEAP32[$1 + 60 >> 2])) {
     break label$2;
    }
   }
   $0 = $1 + 48 | 0;
   HEAP32[$1 + 56 >> 2] = jsvLock(HEAPU16[47565]);
   jsvObjectIteratorNew($0, HEAP32[$1 + 56 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue($1 + 48 | 0) & 1) {
     HEAP32[$1 + 44 >> 2] = jsvObjectIteratorGetValue($1 + 48 | 0);
     HEAP32[$1 + 40 >> 2] = jsvObjectGetChild(HEAP32[$1 + 44 >> 2], 33943, 0);
     HEAP8[$1 + 39 | 0] = jshGetPinFromVar(HEAP32[$1 + 40 >> 2]);
     if (!(jshGetPinShouldStayWatched(HEAPU8[$1 + 39 | 0]) & 1)) {
      jshPinWatch(HEAPU8[$1 + 39 | 0], 0);
     }
     $0 = $1 + 48 | 0;
     jsvUnLock2(HEAP32[$1 + 40 >> 2], HEAP32[$1 + 44 >> 2]);
     jsvObjectIteratorNext($0);
     continue;
    }
    break;
   }
   jsvObjectIteratorFree($1 + 48 | 0);
   jsvRemoveAllChildren(HEAP32[$1 + 56 >> 2]);
   jsvUnLock(HEAP32[$1 + 56 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 32 >> 2] = jsvGetArrayItem(HEAP32[$1 + 60 >> 2], 0);
  if (jsvIsUndefined(HEAP32[$1 + 32 >> 2]) & 1) {
   jsExceptionHere(1, 34089, 0);
   break label$1;
  }
  HEAP32[$1 + 28 >> 2] = jsvLock(HEAPU16[47565]);
  HEAP32[$1 + 24 >> 2] = jsvFindChildFromVar(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 32 >> 2], 0);
  jsvUnLock(HEAP32[$1 + 28 >> 2]);
  label$8 : {
   if (HEAP32[$1 + 24 >> 2]) {
    HEAP32[$1 + 20 >> 2] = jsvSkipName(HEAP32[$1 + 24 >> 2]);
    HEAP8[$1 + 19 | 0] = jshGetPinFromVarAndUnLock(jsvObjectGetChild(HEAP32[$1 + 20 >> 2], 33943, 0));
    jsvUnLock(HEAP32[$1 + 20 >> 2]);
    HEAP32[$1 + 12 >> 2] = jsvLock(HEAPU16[47565]);
    jsvRemoveChild(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 24 >> 2]);
    jsvUnLock2(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 12 >> 2]);
    if (!(jsiIsWatchingPin(HEAPU8[$1 + 19 | 0]) & 1)) {
     jshPinWatch(HEAPU8[$1 + 19 | 0], 0);
    }
    break label$8;
   }
   HEAP32[$1 >> 2] = HEAP32[$1 + 32 >> 2];
   jsExceptionHere(1, 34150, $1);
  }
  jsvUnLock(HEAP32[$1 + 32 >> 2]);
 }
 global$0 = $1 - -64 | 0;
}
function jswrap_encodeURIComponent($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 80 | 0;
 global$0 = $1;
 HEAP32[$1 + 72 >> 2] = $0;
 HEAP32[$1 + 68 >> 2] = jsvAsString(HEAP32[$1 + 72 >> 2]);
 label$1 : {
  if (!HEAP32[$1 + 68 >> 2]) {
   HEAP32[$1 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 64 >> 2] = jsvNewFromEmptyString();
  if (HEAP32[$1 + 64 >> 2]) {
   $0 = $1 + 16 | 0;
   jsvStringIteratorNew($1 + 40 | 0, HEAP32[$1 + 68 >> 2], 0);
   jsvStringIteratorNew($0, HEAP32[$1 + 64 >> 2], 0);
   while (1) {
    if (jsvStringIteratorHasChar($1 + 40 | 0) & 1) {
     HEAP8[$1 + 15 | 0] = jsvStringIteratorGetCharAndNext($1 + 40 | 0);
     label$6 : {
      label$7 : {
       label$8 : {
        if (isAlpha(HEAP8[$1 + 15 | 0]) & 1) {
         break label$8;
        }
        if (isNumeric(HEAP8[$1 + 15 | 0]) & 1 | HEAP8[$1 + 15 | 0] == 45 | (HEAP8[$1 + 15 | 0] == 46 | HEAP8[$1 + 15 | 0] == 33)) {
         break label$8;
        }
        if (HEAP8[$1 + 15 | 0] == 126 | HEAP8[$1 + 15 | 0] == 42 | (HEAP8[$1 + 15 | 0] == 39 | HEAP8[$1 + 15 | 0] == 40)) {
         break label$8;
        }
        if (HEAP8[$1 + 15 | 0] != 41) {
         break label$7;
        }
       }
       jsvStringIteratorAppend($1 + 16 | 0, HEAP8[$1 + 15 | 0]);
       break label$6;
      }
      jsvStringIteratorAppend($1 + 16 | 0, 37);
      HEAP32[$1 + 8 >> 2] = HEAP8[$1 + 15 | 0] >>> 4;
      $0 = $1 + 16 | 0;
      if (HEAPU32[$1 + 8 >> 2] > 9) {
       $2 = HEAP32[$1 + 8 >> 2] + 55 | 0;
      } else {
       $2 = HEAP32[$1 + 8 >> 2] + 48 | 0;
      }
      jsvStringIteratorAppend($0, $2 << 24 >> 24);
      HEAP32[$1 + 8 >> 2] = HEAP8[$1 + 15 | 0] & 15;
      $0 = $1 + 16 | 0;
      if (HEAPU32[$1 + 8 >> 2] > 9) {
       $2 = HEAP32[$1 + 8 >> 2] + 55 | 0;
      } else {
       $2 = HEAP32[$1 + 8 >> 2] + 48 | 0;
      }
      jsvStringIteratorAppend($0, $2 << 24 >> 24);
     }
     continue;
    }
    break;
   }
   $0 = $1 + 40 | 0;
   jsvStringIteratorFree($1 + 16 | 0);
   jsvStringIteratorFree($0);
  }
  jsvUnLock(HEAP32[$1 + 68 >> 2]);
  HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 64 >> 2];
 }
 global$0 = $1 + 80 | 0;
 return HEAP32[$1 + 76 >> 2];
}
function jsiHandleDelete($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP8[$1 + 31 | 0] = $0;
 HEAP32[$1 + 24 >> 2] = jsvGetStringLength(HEAP32[23784]);
 label$1 : {
  if (!(HEAP32[23786] | !(HEAP8[$1 + 31 | 0] & 1)) | !(HEAP8[$1 + 31 | 0] & 1 | HEAPU32[23786] < HEAPU32[$1 + 24 >> 2])) {
   break label$1;
  }
  $3 = $1;
  label$4 : {
   if (HEAP8[$1 + 31 | 0] & 1) {
    $0 = (jsvGetCharInString(HEAP32[23784], HEAP32[23786] - 1 | 0) & 255) == 10;
    $2 = 1;
    if ($0) {
     break label$4;
    }
   }
   if (HEAP8[$1 + 31 | 0] & 1) {
    $2 = 0;
   } else {
    $2 = (jsvGetCharInString(HEAP32[23784], HEAP32[23786]) & 255) == 10;
   }
  }
  HEAP8[$3 + 23 | 0] = $2 & 1;
  label$8 : {
   if (!(HEAP8[$1 + 23 | 0] & 1)) {
    break label$8;
   }
   if (!(jsiShowInputLine() & 1)) {
    break label$8;
   }
   jsiConsolePrintString(5202);
   if (HEAP8[$1 + 31 | 0] & 1) {
    jsiConsolePrintString(5737);
    jsiMoveCursorChar(HEAP32[23784], HEAP32[23786], HEAP32[23786] - 1 | 0);
    jsiInputLineCursorMoved();
   }
  }
  HEAP32[$1 + 16 >> 2] = jsvNewFromEmptyString();
  HEAP32[$1 + 12 >> 2] = HEAP32[23786];
  if (HEAP8[$1 + 31 | 0] & 1) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] + -1;
  }
  if (HEAPU32[$1 + 12 >> 2] > 0) {
   jsvAppendStringVar(HEAP32[$1 + 16 >> 2], HEAP32[23784], 0, HEAP32[$1 + 12 >> 2]);
  }
  if (HEAP32[$1 + 12 >> 2] + 1 >>> 0 < HEAPU32[$1 + 24 >> 2]) {
   jsvAppendStringVar(HEAP32[$1 + 16 >> 2], HEAP32[23784], HEAP32[$1 + 12 >> 2] + 1 | 0, 2147483647);
  }
  jsiInputLineCursorMoved();
  jsvUnLock(HEAP32[23784]);
  HEAP32[23784] = HEAP32[$1 + 16 >> 2];
  if (HEAP8[$1 + 31 | 0] & 1) {
   HEAP32[23786] = HEAP32[23786] + -1;
  }
  if (!(jsiShowInputLine() & 1)) {
   break label$1;
  }
  label$14 : {
   if (HEAP8[$1 + 23 | 0] & 1) {
    jsiConsolePrintStringVarWithNewLineChar(HEAP32[23784], HEAP32[23786], 58);
    jsiMoveCursorChar(HEAP32[23784], jsvGetStringLength(HEAP32[23784]), HEAP32[23786]);
    break label$14;
   }
   if (HEAP8[$1 + 31 | 0] & 1) {
    jsiConsolePrintChar(8);
   }
   jsiConsolePrintStringVarUntilEOL(HEAP32[23784], HEAP32[23786]);
  }
 }
 global$0 = $1 + 32 | 0;
}
function tflite__MicroAllocator__MicroAllocator_28TfLiteContext__2c_20tflite__Model_20const__2c_20unsigned_20char__2c_20unsigned_20long_2c_20tflite__ErrorReporter__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 48 | 0;
 global$0 = $6;
 HEAP32[$6 + 40 >> 2] = $0;
 HEAP32[$6 + 36 >> 2] = $1;
 HEAP32[$6 + 32 >> 2] = $2;
 HEAP32[$6 + 28 >> 2] = $3;
 HEAP32[$6 + 24 >> 2] = $4;
 HEAP32[$6 + 20 >> 2] = $5;
 $0 = HEAP32[$6 + 40 >> 2];
 HEAP32[$6 + 44 >> 2] = $0;
 HEAP32[$0 >> 2] = HEAP32[$6 + 32 >> 2];
 tflite__SimpleMemoryAllocator__SimpleMemoryAllocator_28unsigned_20char__2c_20unsigned_20long_29($0 + 4 | 0, HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2]);
 HEAP32[$0 + 16 >> 2] = HEAP32[$6 + 20 >> 2];
 HEAP32[$0 + 20 >> 2] = HEAP32[$6 + 36 >> 2];
 HEAP32[$0 + 24 >> 2] = HEAP32[$6 + 28 >> 2];
 HEAP32[$0 + 28 >> 2] = HEAP32[$6 + 24 >> 2];
 HEAP32[$6 + 16 >> 2] = tflite__Model__subgraphs_28_29_20const(HEAP32[$6 + 32 >> 2]);
 label$1 : {
  if ((flatbuffers__Vector_int___size_28_29_20const(HEAP32[$6 + 16 >> 2]) | 0) != 1) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$6 + 20 >> 2], 42120, 0);
   break label$1;
  }
  HEAP32[$0 + 32 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph__20___operator_5b_5d_28unsigned_20int_29_20const(HEAP32[$6 + 16 >> 2], 0);
  HEAP32[$0 + 40 >> 2] = tflite__Tensor__shape_28_29_20const(HEAP32[$0 + 32 >> 2]);
  HEAP32[$0 + 36 >> 2] = tflite__SubGraph__operators_28_29_20const(HEAP32[$0 + 32 >> 2]);
  $1 = flatbuffers__Vector_int___size_28_29_20const(HEAP32[$0 + 40 >> 2]);
  HEAP32[HEAP32[$0 + 20 >> 2] >> 2] = $1;
  $1 = tflite__SimpleMemoryAllocator__AllocateFromTail_28unsigned_20long_2c_20unsigned_20long_29($0 + 4 | 0, Math_imul(HEAP32[HEAP32[$0 + 20 >> 2] >> 2], 56), 4);
  HEAP32[HEAP32[$0 + 20 >> 2] + 8 >> 2] = $1;
  HEAP32[$6 + 12 >> 2] = 0;
  while (1) {
   if (HEAPU32[$6 + 12 >> 2] >= HEAPU32[HEAP32[$0 + 20 >> 2] >> 2]) {
    break label$1;
   }
   HEAP32[(HEAP32[HEAP32[$0 + 20 >> 2] + 8 >> 2] + Math_imul(HEAP32[$6 + 12 >> 2], 56) | 0) + 4 >> 2] = 0;
   HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 12 >> 2] + 1;
   continue;
  }
 }
 global$0 = $6 + 48 | 0;
}
function jsiDebuggerLoop() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 if (!(HEAPU16[47566] & 10)) {
  HEAP32[23778] = HEAP32[23778] & -63489;
  jsiClearInputLine(1);
  jsiConsoleRemoveInputLine();
  HEAP16[47566] = HEAPU16[47566] & -4 | 8;
  if (HEAP32[13768]) {
   label$3 : {
    if (HEAPU16[HEAP32[13768] + 102 >> 1]) {
     $1 = $0 + 23 | 0;
     itostr((jslGetLineNumber() + HEAPU16[HEAP32[13768] + 102 >> 1] | 0) - 1 | 0, $1, 10);
     break label$3;
    }
    HEAP8[$0 + 23 | 0] = 0;
   }
   HEAP32[$0 + 16 >> 2] = strlen($0 + 23 | 0);
   while (1) {
    if (HEAPU32[$0 + 16 >> 2] < 8) {
     $1 = HEAP32[$0 + 16 >> 2];
     HEAP32[$0 + 16 >> 2] = $1 + 1;
     HEAP8[$1 + ($0 + 23 | 0) | 0] = 32;
     continue;
    }
    break;
   }
   $1 = $0 + 23 | 0;
   HEAP8[$1 + HEAP32[$0 + 16 >> 2] | 0] = 0;
   jslPrintTokenLineMarker(9, 0, HEAP32[HEAP32[13768] + 28 >> 2], $1);
  }
  while (1) {
   if ((HEAPU16[47566] & 16 ? 0 : (HEAP32[23778] & 6144) != 0 ^ -1) & 1) {
    jsiConsoleReturnInputLine();
    jshIdle();
    while (1) {
     $1 = (jshGetEventsUsed() | 0) <= 127;
     $2 = 0;
     label$12 : {
      if ($1) {
       break label$12;
      }
      $2 = 0;
      if (HEAPU16[47566] & 16) {
       break label$12;
      }
      $2 = (HEAP32[23778] & 6144) != 0 ^ -1;
     }
     if ($2 & 1) {
      if (!(jshPopIOEvent($0 + 8 | 0) & 1) | HEAPU8[53360] != (HEAPU8[$0 + 8 | 0] & 31)) {
       continue;
      }
      jsiHandleIOEventForConsole($0 + 8 | 0);
      continue;
     }
     break;
    }
    while (1) {
     $1 = !(jshPopIOEventOfType(HEAPU8[53360], $0 + 8 | 0) & 1);
     $2 = 0;
     label$15 : {
      if ($1) {
       break label$15;
      }
      $2 = 0;
      if (HEAPU16[47566] & 16) {
       break label$15;
      }
      $2 = (HEAP32[23778] & 6144) != 0 ^ -1;
     }
     if ($2 & 1) {
      jsiHandleIOEventForConsole($0 + 8 | 0);
      continue;
     }
     break;
    }
    continue;
   }
   break;
  }
  jsiConsoleRemoveInputLine();
  if (HEAP32[23778] & 6144) {
   HEAP32[23778] = HEAP32[23778] | 16;
  }
  HEAP16[47566] = HEAPU16[47566] & -25;
 }
 global$0 = $0 + 32 | 0;
}
function atan2($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 wasm2js_scratch_store_f64(+$1);
 $2 = wasm2js_scratch_load_i32(1) | 0;
 $3 = wasm2js_scratch_load_i32(0) | 0;
 label$1 : {
  $5 = $2 & 2147483647;
  if (($5 | 0) == 2146435072 & $3 >>> 0 <= 0 | $5 >>> 0 < 2146435072) {
   wasm2js_scratch_store_f64(+$0);
   $5 = wasm2js_scratch_load_i32(1) | 0;
   $6 = wasm2js_scratch_load_i32(0) | 0;
   $4 = $5 & 2147483647;
   if (($4 | 0) == 2146435072 & $6 >>> 0 < 1 | $4 >>> 0 < 2146435072) {
    break label$1;
   }
  }
  return $0 + $1;
 }
 $9 = $3;
 $4 = $2;
 if (!($3 | $2 + -1072693248)) {
  return atan($0);
 }
 $8 = $2 >>> 30 & 2;
 $2 = $5;
 $3 = $8 | $2 >>> 31;
 label$4 : {
  label$5 : {
   label$6 : {
    $2 = $2 & 2147483647;
    if (!($6 | $2)) {
     label$8 : {
      switch ($3 - 2 | 0) {
      case 0:
       break label$6;
      case 1:
       break label$8;
      default:
       break label$5;
      }
     }
     return -3.141592653589793;
    }
    $4 = $4 & 2147483647;
    if (!($4 | $9)) {
     break label$4;
    }
    label$9 : {
     if (($4 | 0) == 2146435072) {
      if (($2 | 0) != 2146435072) {
       break label$9;
      }
      return HEAPF64[($3 << 3) + 53248 >> 3];
     }
     if (!($4 + 67108864 >>> 0 >= $2 >>> 0 ? ($2 | 0) != 2146435072 : 0)) {
      break label$4;
     }
     label$11 : {
      if ($8) {
       $7 = 0;
       if ($2 + 67108864 >>> 0 < $4 >>> 0) {
        break label$11;
       }
      }
      $7 = atan(Math_abs($0 / $1));
     }
     $0 = $7;
     if ($3 >>> 0 <= 2) {
      label$14 : {
       switch ($3 - 1 | 0) {
       case 0:
        return -$0;
       case 1:
        break label$14;
       default:
        break label$5;
       }
      }
      return 3.141592653589793 - ($0 + -1.2246467991473532e-16);
     }
     return $0 + -1.2246467991473532e-16 + -3.141592653589793;
    }
    return HEAPF64[($3 << 3) + 53280 >> 3];
   }
   $0 = 3.141592653589793;
  }
  return $0;
 }
 return (($5 | 0) < 0 ? 1 : ($5 | 0) <= 0 ? $6 >>> 0 >= 0 ? 0 : 1 : 0) ? -1.5707963267948966 : 1.5707963267948966;
}
function jswrap_number_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1 : {
  if (!jsvGetArrayLength(HEAP32[$1 + 24 >> 2])) {
   HEAP32[$1 + 28 >> 2] = jsvNewFromInteger(0);
   break label$1;
  }
  HEAP32[$1 + 20 >> 2] = jsvGetArrayItem(HEAP32[$1 + 24 >> 2], 0);
  HEAP32[$1 + 16 >> 2] = 0;
  label$3 : {
   if (jsvIsArray(HEAP32[$1 + 20 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = jsvGetArrayLength(HEAP32[$1 + 20 >> 2]);
    label$5 : {
     if (!HEAP32[$1 + 12 >> 2]) {
      HEAP32[$1 + 16 >> 2] = jsvNewFromInteger(0);
      break label$5;
     }
     if (HEAP32[$1 + 12 >> 2] == 1) {
      HEAP32[$1 + 8 >> 2] = jsvGetArrayItem(HEAP32[$1 + 20 >> 2], 0);
      label$8 : {
       label$9 : {
        if (!(jsvIsString(HEAP32[$1 + 8 >> 2]) & 1)) {
         break label$9;
        }
        if (!(jsvIsEmptyString(HEAP32[$1 + 8 >> 2]) & 1)) {
         break label$9;
        }
        HEAP32[$1 + 16 >> 2] = jsvNewFromInteger(0);
        break label$8;
       }
       if (!(jsvIsBoolean(HEAP32[$1 + 8 >> 2]) & 1)) {
        HEAP32[$1 + 16 >> 2] = jsvAsNumber(HEAP32[$1 + 8 >> 2]);
       }
      }
      jsvUnLock(HEAP32[$1 + 8 >> 2]);
     }
    }
    break label$3;
   }
   label$11 : {
    label$12 : {
     if (!(jsvIsUndefined(HEAP32[$1 + 20 >> 2]) & 1)) {
      if (!(jsvIsObject(HEAP32[$1 + 20 >> 2]) & 1)) {
       break label$12;
      }
     }
     HEAP32[$1 + 16 >> 2] = 0;
     break label$11;
    }
    label$14 : {
     label$15 : {
      if (!(jsvIsString(HEAP32[$1 + 20 >> 2]) & 1)) {
       break label$15;
      }
      if (!(jsvIsEmptyString(HEAP32[$1 + 20 >> 2]) & 1)) {
       break label$15;
      }
      HEAP32[$1 + 16 >> 2] = jsvNewFromInteger(0);
      break label$14;
     }
     HEAP32[$1 + 16 >> 2] = jsvAsNumber(HEAP32[$1 + 20 >> 2]);
    }
   }
  }
  jsvUnLock(HEAP32[$1 + 20 >> 2]);
  if (HEAP32[$1 + 16 >> 2]) {
   HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 16 >> 2];
   break label$1;
  }
  HEAP32[$1 + 28 >> 2] = jsvNewFromFloat(nan);
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function jsiSoftInit($0) {
 var $1 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 HEAP8[$1 + 47 | 0] = $0;
 HEAP8[95095] = 0;
 HEAP8[95151] = 0;
 HEAP32[23781] = jsvNewWithFlags(3);
 HEAP32[23784] = jsvNewFromEmptyString();
 HEAP32[23786] = 0;
 HEAP16[47578] = 0;
 jsiInputLineCursorMoved();
 HEAP32[23793] = 0;
 jsfSetFlag(1, 0);
 HEAP8[53361] = 255;
 HEAP8[53362] = 255;
 HEAP16[47564] = _jsiInitNamedArray(5237);
 HEAP16[47565] = _jsiInitNamedArray(5244);
 HEAP32[23796] = jshGetSystemTime();
 HEAP32[23797] = i64toi32_i32$HIGH_BITS;
 HEAP32[23798] = -1;
 HEAP32[$1 + 40 >> 2] = jsvObjectGetChild(HEAP32[23775], 5252, 0);
 if (HEAP32[$1 + 40 >> 2]) {
  HEAP8[55076] = jsvGetIntegerAndUnLock(HEAP32[$1 + 40 >> 2]);
  jsvObjectRemoveChild(HEAP32[23775], 5252);
 }
 jswrap_banglejs_init();
 terminalControlCharsReset();
 HEAP8[252036] = 0;
 HEAP8[53496] = 29;
 jsfLoadBootCodeFromFlash(HEAP8[$1 + 47 | 0] & 1);
 HEAP32[$1 + 36 >> 2] = jsvObjectGetChild(HEAP32[23775], 5258, 0);
 if (HEAP32[$1 + 36 >> 2]) {
  jsvUnLock2(jspEvaluateVar(HEAP32[$1 + 36 >> 2], 0, 0), HEAP32[$1 + 36 >> 2]);
  jsvObjectRemoveChild(HEAP32[23775], 5258);
 }
 if (HEAPU16[47565]) {
  $0 = $1 + 24 | 0;
  HEAP32[$1 + 32 >> 2] = jsvLock(HEAPU16[47565]);
  jsvObjectIteratorNew($0, HEAP32[$1 + 32 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($1 + 24 | 0) & 1) {
    $0 = $1 + 24 | 0;
    HEAP32[$1 + 20 >> 2] = jsvObjectIteratorGetValue($0);
    HEAP32[$1 + 16 >> 2] = jsvObjectGetChild(HEAP32[$1 + 20 >> 2], 5263, 0);
    jshPinWatch(jshGetPinFromVar(HEAP32[$1 + 16 >> 2]) & 255, 1);
    jsvUnLock2(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
    jsvObjectIteratorNext($0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($1 + 24 | 0);
  jsvUnLock(HEAP32[$1 + 32 >> 2]);
 }
 jsiExecuteEventCallbackOn(5267, 5269, 0, 0);
 HEAP32[$1 + 12 >> 2] = jsvObjectGetChild(HEAP32[23774], 5277, 0);
 if (HEAP32[$1 + 12 >> 2]) {
  if (jsiEcho() & 1) {
   jsiConsolePrintString(5284);
  }
  jsiExecuteEventCallback(0, HEAP32[$1 + 12 >> 2], 0, 0);
  jsvUnLock(HEAP32[$1 + 12 >> 2]);
 }
 global$0 = $1 + 48 | 0;
}
function tflite__MicroInterpreter__MicroInterpreter_28tflite__Model_20const__2c_20tflite__OpResolver_20const__2c_20unsigned_20char__2c_20unsigned_20long_2c_20tflite__ErrorReporter__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 32 | 0;
 global$0 = $6;
 HEAP32[$6 + 24 >> 2] = $0;
 HEAP32[$6 + 20 >> 2] = $1;
 HEAP32[$6 + 16 >> 2] = $2;
 HEAP32[$6 + 12 >> 2] = $3;
 HEAP32[$6 + 8 >> 2] = $4;
 HEAP32[$6 + 4 >> 2] = $5;
 $0 = HEAP32[$6 + 24 >> 2];
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$0 >> 2] = HEAP32[$6 + 20 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$6 + 16 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$6 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP32[$0 + 64 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 tflite__MicroAllocator__MicroAllocator_28TfLiteContext__2c_20tflite__Model_20const__2c_20unsigned_20char__2c_20unsigned_20long_2c_20tflite__ErrorReporter__29($0 + 68 | 0, $0 + 12 | 0, HEAP32[$0 >> 2], HEAP32[$6 + 12 >> 2], HEAP32[$6 + 8 >> 2], HEAP32[$0 + 8 >> 2]);
 HEAP8[$0 + 112 | 0] = 0;
 HEAP32[$6 >> 2] = tflite__Model__subgraphs_28_29_20const(HEAP32[$6 + 20 >> 2]);
 label$1 : {
  if ((flatbuffers__Vector_int___size_28_29_20const(HEAP32[$6 >> 2]) | 0) != 1) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$6 + 4 >> 2], 39888, 0);
   HEAP32[$0 + 116 >> 2] = 1;
   break label$1;
  }
  HEAP32[$0 + 128 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph__20___operator_5b_5d_28unsigned_20int_29_20const(HEAP32[$6 >> 2], 0);
  HEAP32[$0 + 120 >> 2] = tflite__Tensor__shape_28_29_20const(HEAP32[$0 + 128 >> 2]);
  HEAP32[$0 + 124 >> 2] = tflite__SubGraph__operators_28_29_20const(HEAP32[$0 + 128 >> 2]);
  HEAP32[$0 + 24 >> 2] = $0;
  HEAP32[$0 + 32 >> 2] = 551;
  HEAP32[$0 + 48 >> 2] = 1;
  HEAP32[$0 + 116 >> 2] = 0;
 }
 global$0 = $6 + 32 | 0;
}
function jswrap_spi_send8bit($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = global$0 - 96 | 0;
 global$0 = $5;
 HEAP32[$5 + 92 >> 2] = $0;
 HEAP32[$5 + 88 >> 2] = $1;
 HEAP32[$5 + 84 >> 2] = $2;
 HEAP32[$5 + 80 >> 2] = $3;
 HEAP8[$5 + 79 | 0] = $4;
 HEAP8[$5 + 78 | 0] = jsiGetDeviceFromClass(HEAP32[$5 + 92 >> 2]);
 label$1 : {
  if (!(HEAPU8[$5 + 78 | 0] <= 24 ? HEAPU8[$5 + 78 | 0] >= 24 : 0)) {
   jsExceptionHere(1, 37187, 0);
   break label$1;
  }
  jshPinSetState(HEAPU8[$5 + 78 | 0], 1);
  if (!(HEAP32[$5 + 84 >> 2] | HEAP32[$5 + 80 >> 2])) {
   HEAP32[$5 + 84 >> 2] = 3;
   HEAP32[$5 + 80 >> 2] = 15;
  }
  HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 84 >> 2] & 255;
  HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 80 >> 2] & 255;
  if (!(jshIsDeviceInitialised(HEAPU8[$5 + 78 | 0]) & 1)) {
   $0 = $5 - -64 | 0;
   jshSPIInitInfo($0);
   jshUSARTSetup(HEAPU8[$5 + 78 | 0], $0);
  }
  jshPinSetState(HEAPU8[$5 + 78 | 0], 0);
  if (HEAPU8[$5 + 79 | 0] != 255) {
   jshPinOutput(HEAPU8[$5 + 79 | 0], 0);
  }
  label$7 : {
   if (jsvIsNumeric(HEAP32[$5 + 88 >> 2]) & 1) {
    jsspiSend8bit(HEAPU8[$5 + 78 | 0], jsvGetInteger(HEAP32[$5 + 88 >> 2]) & 255, HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2]);
    break label$7;
   }
   label$9 : {
    if (jsvIsIterable(HEAP32[$5 + 88 >> 2]) & 1) {
     jsvIteratorNew($5 + 16 | 0, HEAP32[$5 + 88 >> 2], 1);
     while (1) {
      if (jsvIteratorHasElement($5 + 16 | 0) & 1) {
       $0 = $5 + 16 | 0;
       HEAP8[$5 + 15 | 0] = jsvIteratorGetIntegerValue($0);
       jsspiSend8bit(HEAPU8[$5 + 78 | 0], HEAPU8[$5 + 15 | 0], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2]);
       jsvIteratorNext($0);
       continue;
      }
      break;
     }
     jsvIteratorFree($5 + 16 | 0);
     break label$9;
    }
    HEAP32[$5 >> 2] = HEAP32[$5 + 88 >> 2];
    jsExceptionHere(1, 37137, $5);
   }
  }
  jshUSARTKick(HEAPU8[$5 + 78 | 0]);
  if (HEAPU8[$5 + 79 | 0] != 255) {
   jshPinOutput(HEAPU8[$5 + 79 | 0], 1);
  }
  jshPinSetState(HEAPU8[$5 + 78 | 0], 0);
 }
 global$0 = $5 + 96 | 0;
}
function jswrap_spi_send4bit($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = global$0 - 96 | 0;
 global$0 = $5;
 HEAP32[$5 + 92 >> 2] = $0;
 HEAP32[$5 + 88 >> 2] = $1;
 HEAP32[$5 + 84 >> 2] = $2;
 HEAP32[$5 + 80 >> 2] = $3;
 HEAP8[$5 + 79 | 0] = $4;
 HEAP8[$5 + 78 | 0] = jsiGetDeviceFromClass(HEAP32[$5 + 92 >> 2]);
 label$1 : {
  if (!(HEAPU8[$5 + 78 | 0] <= 24 ? HEAPU8[$5 + 78 | 0] >= 24 : 0)) {
   jsExceptionHere(1, 37097, 0);
   break label$1;
  }
  jshPinSetState(HEAPU8[$5 + 78 | 0], 1);
  if (!(HEAP32[$5 + 84 >> 2] | HEAP32[$5 + 80 >> 2])) {
   HEAP32[$5 + 84 >> 2] = 1;
   HEAP32[$5 + 80 >> 2] = 3;
  }
  HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 84 >> 2] & 15;
  HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 80 >> 2] & 15;
  if (!(jshIsDeviceInitialised(HEAPU8[$5 + 78 | 0]) & 1)) {
   $0 = $5 - -64 | 0;
   jshSPIInitInfo($0);
   jshUSARTSetup(HEAPU8[$5 + 78 | 0], $0);
  }
  jshPinSetState(HEAPU8[$5 + 78 | 0], 0);
  if (HEAPU8[$5 + 79 | 0] != 255) {
   jshPinOutput(HEAPU8[$5 + 79 | 0], 0);
  }
  label$7 : {
   if (jsvIsNumeric(HEAP32[$5 + 88 >> 2]) & 1) {
    jsspiSend4bit(HEAPU8[$5 + 78 | 0], jsvGetInteger(HEAP32[$5 + 88 >> 2]) & 255, HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2]);
    break label$7;
   }
   label$9 : {
    if (jsvIsIterable(HEAP32[$5 + 88 >> 2]) & 1) {
     jsvIteratorNew($5 + 16 | 0, HEAP32[$5 + 88 >> 2], 1);
     while (1) {
      if (jsvIteratorHasElement($5 + 16 | 0) & 1) {
       $0 = $5 + 16 | 0;
       HEAP8[$5 + 15 | 0] = jsvIteratorGetIntegerValue($0);
       jsspiSend4bit(HEAPU8[$5 + 78 | 0], HEAPU8[$5 + 15 | 0], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2]);
       jsvIteratorNext($0);
       continue;
      }
      break;
     }
     jsvIteratorFree($5 + 16 | 0);
     break label$9;
    }
    HEAP32[$5 >> 2] = HEAP32[$5 + 88 >> 2];
    jsExceptionHere(1, 37137, $5);
   }
  }
  jshUSARTKick(HEAPU8[$5 + 78 | 0]);
  if (HEAPU8[$5 + 79 | 0] != 255) {
   jshPinOutput(HEAPU8[$5 + 79 | 0], 1);
  }
  jshPinSetState(HEAPU8[$5 + 78 | 0], 0);
 }
 global$0 = $5 + 96 | 0;
}
function tflite__reference_ops__Softmax_28float_20const__2c_20int_2c_20int_2c_20float_2c_20float__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 48 | 0;
 global$0 = $5;
 HEAP32[$5 + 44 >> 2] = $0;
 HEAP32[$5 + 40 >> 2] = $1;
 HEAP32[$5 + 36 >> 2] = $2;
 HEAPF32[$5 + 32 >> 2] = $3;
 HEAP32[$5 + 28 >> 2] = $4;
 HEAP32[$5 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 24 >> 2] < HEAP32[$5 + 36 >> 2]) {
   HEAPF32[$5 + 20 >> 2] = HEAPF32[HEAP32[$5 + 44 >> 2] >> 2];
   HEAP32[$5 + 16 >> 2] = 1;
   while (1) {
    if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 40 >> 2]) {
     if (HEAPF32[HEAP32[$5 + 44 >> 2] + (HEAP32[$5 + 16 >> 2] << 2) >> 2] > HEAPF32[$5 + 20 >> 2]) {
      HEAPF32[$5 + 20 >> 2] = HEAPF32[HEAP32[$5 + 44 >> 2] + (HEAP32[$5 + 16 >> 2] << 2) >> 2];
     }
     HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAPF32[$5 + 12 >> 2] = 0;
   HEAP32[$5 + 8 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 8 >> 2] < HEAP32[$5 + 40 >> 2]) {
     $3 = exp_28float_29(Math_fround(Math_fround(HEAPF32[HEAP32[$5 + 44 >> 2] + (HEAP32[$5 + 8 >> 2] << 2) >> 2] - HEAPF32[$5 + 20 >> 2]) * HEAPF32[$5 + 32 >> 2]));
     HEAPF32[HEAP32[$5 + 28 >> 2] + (HEAP32[$5 + 8 >> 2] << 2) >> 2] = $3;
     HEAPF32[$5 + 12 >> 2] = HEAPF32[$5 + 12 >> 2] + HEAPF32[HEAP32[$5 + 28 >> 2] + (HEAP32[$5 + 8 >> 2] << 2) >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAPF32[$5 + 4 >> 2] = Math_fround(1) / HEAPF32[$5 + 12 >> 2];
   HEAP32[$5 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 >> 2] < HEAP32[$5 + 40 >> 2]) {
     $0 = HEAP32[$5 + 28 >> 2] + (HEAP32[$5 >> 2] << 2) | 0;
     HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] * HEAPF32[$5 + 4 >> 2];
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 44 >> 2] + (HEAP32[$5 + 40 >> 2] << 2);
   HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] + (HEAP32[$5 + 40 >> 2] << 2);
   HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 + 48 | 0;
}
function jspeiFindChildFromStringInParents($0, $1) {
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1 : {
  label$2 : {
   if (jsvIsObject(HEAP32[$2 + 40 >> 2]) & 1) {
    HEAP32[$2 + 32 >> 2] = jsvObjectGetChild(HEAP32[$2 + 40 >> 2], 3684, 0);
    if (!HEAP32[$2 + 32 >> 2]) {
     HEAP32[$2 + 32 >> 2] = jspFindPrototypeFor(3694);
    }
    label$5 : {
     if (!(!HEAP32[$2 + 32 >> 2] | HEAP32[$2 + 32 >> 2] == HEAP32[$2 + 40 >> 2])) {
      HEAP32[$2 + 28 >> 2] = jsvFindChildFromString(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 36 >> 2], 0);
      if (!HEAP32[$2 + 28 >> 2]) {
       HEAP32[$2 + 28 >> 2] = jspeiFindChildFromStringInParents(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 36 >> 2]);
      }
      jsvUnLock(HEAP32[$2 + 32 >> 2]);
      if (HEAP32[$2 + 28 >> 2]) {
       HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 28 >> 2];
       break label$1;
      }
      break label$5;
     }
     jsvUnLock(HEAP32[$2 + 32 >> 2]);
    }
    break label$2;
   }
   HEAP32[$2 + 24 >> 2] = jswGetBasicObjectName(HEAP32[$2 + 40 >> 2]);
   while (1) {
    if (HEAP32[$2 + 24 >> 2]) {
     HEAP32[$2 + 20 >> 2] = jsvFindChildFromString(HEAP32[23774], HEAP32[$2 + 24 >> 2], 0);
     if (HEAP32[$2 + 20 >> 2]) {
      HEAP32[$2 + 16 >> 2] = 0;
      HEAP32[$2 + 12 >> 2] = jsvSkipNameAndUnLock(HEAP32[$2 + 20 >> 2]);
      if (jsvHasChildren(HEAP32[$2 + 12 >> 2]) & 1) {
       HEAP32[$2 + 8 >> 2] = jsvObjectGetChild(HEAP32[$2 + 12 >> 2], 3674, 0);
       if (HEAP32[$2 + 8 >> 2]) {
        HEAP32[$2 + 16 >> 2] = jsvFindChildFromString(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 36 >> 2], 0);
        jsvUnLock(HEAP32[$2 + 8 >> 2]);
       }
      }
      jsvUnLock(HEAP32[$2 + 12 >> 2]);
      if (HEAP32[$2 + 16 >> 2]) {
       HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 16 >> 2];
       break label$1;
      }
     }
     HEAP32[$2 + 24 >> 2] = jswGetBasicObjectPrototypeName(HEAP32[$2 + 24 >> 2]);
     continue;
    }
    break;
   }
  }
  HEAP32[$2 + 44 >> 2] = 0;
 }
 global$0 = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}
function jsvReplaceWith($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 label$1 : {
  if (jsvIsArrayBufferName(HEAP32[$2 + 44 >> 2]) & 1) {
   HEAP32[$2 + 36 >> 2] = jsvGetInteger(HEAP32[$2 + 44 >> 2]);
   HEAP32[$2 + 32 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 44 >> 2]) & 65535);
   jsvArrayBufferSet(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 40 >> 2]);
   jsvUnLock(HEAP32[$2 + 32 >> 2]);
   break label$1;
  }
  if (!(jsvIsName(HEAP32[$2 + 44 >> 2]) & 1)) {
   HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 44 >> 2];
   jsExceptionHere(1, 2775, $2 + 16 | 0);
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = jsvGetValueOfName(HEAP32[$2 + 44 >> 2]);
  if (jsvIsGetterOrSetter(HEAP32[$2 + 28 >> 2]) & 1) {
   $0 = $2;
   label$5 : {
    if (jsvIsNewChild(HEAP32[$2 + 44 >> 2]) & 1) {
     $1 = jsvLock(jsvGetNextSibling(HEAP32[$2 + 44 >> 2]) & 65535);
     break label$5;
    }
    $1 = 0;
   }
   HEAP32[$0 + 24 >> 2] = $1;
   jsvExecuteSetter(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 40 >> 2]);
   jsvUnLock2(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]);
   break label$1;
  }
  jsvUnLock(HEAP32[$2 + 28 >> 2]);
  jsvSetValueOfName(HEAP32[$2 + 44 >> 2], HEAP32[$2 + 40 >> 2]);
  if (!(jsvIsNewChild(HEAP32[$2 + 44 >> 2]) & 1)) {
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = jsvLock(jsvGetNextSibling(HEAP32[$2 + 44 >> 2]) & 65535);
  if (!(jsvIsString(HEAP32[$2 + 20 >> 2]) & 1)) {
   label$8 : {
    if (!(jsvHasChildren(HEAP32[$2 + 20 >> 2]) & 1)) {
     $0 = HEAP32[$2 + 44 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 20 >> 2];
     HEAP32[$2 >> 2] = $0;
     jsExceptionHere(1, 2818, $2);
     break label$8;
    }
    jsvUnRef(HEAP32[$2 + 20 >> 2]);
    jsvSetNextSibling(HEAP32[$2 + 44 >> 2], 0);
    jsvUnRef(HEAP32[$2 + 20 >> 2]);
    jsvSetPrevSibling(HEAP32[$2 + 44 >> 2], 0);
    jsvAddName(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 44 >> 2]);
   }
  }
  jsvUnLock(HEAP32[$2 + 20 >> 2]);
 }
 global$0 = $2 + 48 | 0;
}
function jswrap_object_on($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 label$1 : {
  if (!(jsvHasChildren(HEAP32[$3 + 44 >> 2]) & 1)) {
   jsExceptionHere(3, 35149, 0);
   break label$1;
  }
  if (!(jsvIsString(HEAP32[$3 + 40 >> 2]) & 1)) {
   jsExceptionHere(3, 35204, 0);
   break label$1;
  }
  label$4 : {
   if (jsvIsFunction(HEAP32[$3 + 36 >> 2]) & 1) {
    break label$4;
   }
   if (jsvIsString(HEAP32[$3 + 36 >> 2]) & 1) {
    break label$4;
   }
   jsExceptionHere(3, 35259, 0);
   break label$1;
  }
  HEAP32[$3 >> 2] = HEAP32[$3 + 40 >> 2];
  HEAP32[$3 + 32 >> 2] = jsvVarPrintf(35347, $3);
  if (!HEAP32[$3 + 32 >> 2]) {
   break label$1;
  }
  HEAP32[$3 + 28 >> 2] = jsvFindChildFromVar(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2], 1);
  jsvUnLock(HEAP32[$3 + 32 >> 2]);
  HEAP32[$3 + 24 >> 2] = jsvSkipName(HEAP32[$3 + 28 >> 2]);
  label$5 : {
   if (jsvIsUndefined(HEAP32[$3 + 24 >> 2]) & 1) {
    jsvSetValueOfName(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 36 >> 2]);
    break label$5;
   }
   label$7 : {
    if (jsvIsArray(HEAP32[$3 + 24 >> 2]) & 1) {
     jsvArrayPush(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 36 >> 2]);
     break label$7;
    }
    HEAP32[$3 + 20 >> 2] = jsvNewWithFlags(3);
    jsvArrayPush(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 24 >> 2]);
    jsvArrayPush(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 36 >> 2]);
    jsvSetValueOfName(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 20 >> 2]);
    jsvUnLock(HEAP32[$3 + 20 >> 2]);
   }
  }
  jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 28 >> 2]);
  if (!(jsvIsStringEqual(HEAP32[$3 + 40 >> 2], 35353) & 1)) {
   break label$1;
  }
  HEAP32[$3 + 16 >> 2] = jsvObjectGetChild(HEAP32[$3 + 44 >> 2], 35358, 0);
  if (jsvIsString(HEAP32[$3 + 16 >> 2]) & 1) {
   jsiQueueObjectCallbacks(HEAP32[$3 + 44 >> 2], 35363, $3 + 16 | 0, 1);
   jsvObjectRemoveChild(HEAP32[$3 + 44 >> 2], 35358);
  }
  jsvUnLock(HEAP32[$3 + 16 >> 2]);
 }
 global$0 = $3 + 48 | 0;
}
function graphicsSetPixelDevice($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 label$1 : {
  if (HEAP32[$4 + 8 >> 2] < (HEAPU8[$0 + 32 | 0] | HEAPU8[$0 + 33 | 0] << 8)) {
   break label$1;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  if (HEAP32[$4 + 4 >> 2] < (HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8)) {
   break label$1;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  if (HEAP32[$4 + 8 >> 2] > (HEAPU8[$0 + 36 | 0] | HEAPU8[$0 + 37 | 0] << 8)) {
   break label$1;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  if (HEAP32[$4 + 4 >> 2] > (HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8)) {
   break label$1;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  if (HEAP32[$4 + 8 >> 2] < (HEAPU8[$0 + 40 | 0] | HEAPU8[$0 + 41 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$4 + 12 >> 2];
   $1 = HEAP32[$4 + 8 >> 2];
   HEAP8[$0 + 40 | 0] = $1;
   HEAP8[$0 + 41 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  if (HEAP32[$4 + 8 >> 2] > (HEAPU8[$0 + 44 | 0] | HEAPU8[$0 + 45 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$4 + 12 >> 2];
   $1 = HEAP32[$4 + 8 >> 2];
   HEAP8[$0 + 44 | 0] = $1;
   HEAP8[$0 + 45 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  if (HEAP32[$4 + 4 >> 2] < (HEAPU8[$0 + 42 | 0] | HEAPU8[$0 + 43 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$4 + 12 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   HEAP8[$0 + 42 | 0] = $1;
   HEAP8[$0 + 43 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  if (HEAP32[$4 + 4 >> 2] > (HEAPU8[$0 + 46 | 0] | HEAPU8[$0 + 47 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$4 + 12 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   HEAP8[$0 + 46 | 0] = $1;
   HEAP8[$0 + 47 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  FUNCTION_TABLE[HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24)](HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2] & (1 << HEAPU8[HEAP32[$4 + 12 >> 2] + 16 | 0]) - 1);
 }
 global$0 = $4 + 16 | 0;
}
function jswrap_graphics_drawPoly($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 160 | 0;
 global$0 = $3;
 HEAP32[$3 + 152 >> 2] = $0;
 HEAP32[$3 + 148 >> 2] = $1;
 HEAP8[$3 + 147 | 0] = $2;
 label$1 : {
  if (!(graphicsGetFromVar($3 + 72 | 0, HEAP32[$3 + 152 >> 2]) & 1)) {
   HEAP32[$3 + 156 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsIterable(HEAP32[$3 + 148 >> 2]) & 1)) {
   HEAP32[$3 + 156 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 52 >> 2] = 0;
  jsvIteratorNew($3 + 8 | 0, HEAP32[$3 + 148 >> 2], 1);
  while (1) {
   if (jsvIteratorHasElement($3 + 8 | 0) & 1) {
    HEAP32[$3 + 4 >> 2] = jsvIteratorGetIntegerValue($3 + 8 | 0);
    label$6 : {
     if (HEAP32[$3 + 52 >> 2] & 1) {
      HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 4 >> 2];
      label$8 : {
       if (HEAP32[$3 + 52 >> 2] == 1) {
        HEAP32[$3 + 60 >> 2] = HEAP32[$3 + 68 >> 2];
        HEAP32[$3 + 56 >> 2] = HEAP32[$3 + 64 >> 2];
        break label$8;
       }
       graphicsDrawLine($3 + 72 | 0, (HEAPU8[$3 + 99 | 0] | HEAPU8[$3 + 100 | 0] << 8) << 16 >> 16, (HEAPU8[$3 + 101 | 0] | HEAPU8[$3 + 102 | 0] << 8) << 16 >> 16, HEAP32[$3 + 68 >> 2], HEAP32[$3 + 64 >> 2]);
      }
      $0 = HEAP32[$3 + 68 >> 2];
      HEAP8[$3 + 99 | 0] = $0;
      HEAP8[$3 + 100 | 0] = $0 >>> 8;
      $0 = HEAP32[$3 + 64 >> 2];
      HEAP8[$3 + 101 | 0] = $0;
      HEAP8[$3 + 102 | 0] = $0 >>> 8;
      break label$6;
     }
     HEAP32[$3 + 68 >> 2] = HEAP32[$3 + 4 >> 2];
    }
    HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
    jsvIteratorNext($3 + 8 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 8 | 0);
  if (HEAP8[$3 + 147 | 0] & 1) {
   graphicsDrawLine($3 + 72 | 0, (HEAPU8[$3 + 99 | 0] | HEAPU8[$3 + 100 | 0] << 8) << 16 >> 16, (HEAPU8[$3 + 101 | 0] | HEAPU8[$3 + 102 | 0] << 8) << 16 >> 16, HEAP32[$3 + 60 >> 2], HEAP32[$3 + 56 >> 2]);
  }
  graphicsSetVar($3 + 72 | 0);
  HEAP32[$3 + 156 >> 2] = jsvLockAgain(HEAP32[$3 + 152 >> 2]);
 }
 global$0 = $3 + 160 | 0;
 return HEAP32[$3 + 156 >> 2];
}
function jswrap_espruino_FFT($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $4 = global$0 - 48 | 0;
 $3 = $4;
 global$0 = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP8[$3 + 39 | 0] = $2;
 label$1 : {
  label$2 : {
   if (jsvIsIterable(HEAP32[$3 + 44 >> 2]) & 1) {
    if (jsvIsUndefined(HEAP32[$3 + 40 >> 2]) & 1) {
     break label$2;
    }
    if (jsvIsIterable(HEAP32[$3 + 40 >> 2]) & 1) {
     break label$2;
    }
   }
   $0 = HEAP32[$3 + 44 >> 2];
   HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 40 >> 2];
   HEAP32[$3 >> 2] = $0;
   jsExceptionHere(1, 31845, $3);
   break label$1;
  }
  HEAP32[$3 + 32 >> 2] = jsvGetLength(HEAP32[$3 + 44 >> 2]);
  HEAP32[$3 + 28 >> 2] = 1;
  HEAP32[$3 + 24 >> 2] = 0;
  while (1) {
   if (HEAPU32[$3 + 28 >> 2] < HEAPU32[$3 + 32 >> 2]) {
    HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 28 >> 2] << 1;
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] + 1;
    continue;
   }
   break;
  }
  if (1e6 < (HEAP32[$3 + 28 >> 2] << 4) + 256 >>> 0) {
   jsExceptionHere(1, 31916, 0);
   break label$1;
  }
  $0 = $4 - (HEAP32[$3 + 28 >> 2] << 4) | 0;
  global$0 = $0;
  HEAP32[$3 + 20 >> 2] = $0;
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 20 >> 2] + (HEAP32[$3 + 28 >> 2] << 3);
  _jswrap_espruino_FFT_getData(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 44 >> 2], HEAP32[$3 + 28 >> 2]);
  _jswrap_espruino_FFT_getData(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 40 >> 2], HEAP32[$3 + 28 >> 2]);
  FFT((HEAP8[$3 + 39 | 0] & 1 ? -1 : 1) << 16 >> 16, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
  HEAP8[$3 + 15 | 0] = jsvIsIterable(HEAP32[$3 + 40 >> 2]) & 1;
  $2 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$3 + 20 >> 2];
  if (HEAP8[$3 + 15 | 0] & 1) {
   $0 = 0;
  } else {
   $0 = HEAP32[$3 + 16 >> 2];
  }
  _jswrap_espruino_FFT_setData($2, $1, $0, HEAP32[$3 + 28 >> 2]);
  if (!(HEAP8[$3 + 15 | 0] & 1)) {
   break label$1;
  }
  _jswrap_espruino_FFT_setData(HEAP32[$3 + 40 >> 2], HEAP32[$3 + 16 >> 2], 0, HEAP32[$3 + 28 >> 2]);
 }
 global$0 = $3 + 48 | 0;
}
function jsiExecuteEventCallback($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 48 | 0;
 global$0 = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 HEAP32[$4 + 24 >> 2] = jsvSkipName(HEAP32[$4 + 36 >> 2]);
 HEAP8[$4 + 23 | 0] = 1;
 if (HEAP32[$4 + 24 >> 2]) {
  label$2 : {
   if (jsvIsArray(HEAP32[$4 + 24 >> 2]) & 1) {
    jsvObjectIteratorNew($4 + 16 | 0, HEAP32[$4 + 24 >> 2]);
    while (1) {
     if (HEAP8[$4 + 23 | 0] & 1) {
      $0 = jsvObjectIteratorHasValue($4 + 16 | 0);
     } else {
      $0 = 0;
     }
     if ($0 & 1) {
      $0 = $4 + 16 | 0;
      HEAP32[$4 + 12 >> 2] = jsvObjectIteratorGetValue($0);
      HEAP8[$4 + 23 | 0] = (jsiExecuteEventCallback(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 12 >> 2], HEAP32[$4 + 32 >> 2], HEAP32[$4 + 28 >> 2]) & 1 & (HEAP8[$4 + 23 | 0] & 1)) != 0;
      jsvUnLock(HEAP32[$4 + 12 >> 2]);
      jsvObjectIteratorNext($0);
      continue;
     }
     break;
    }
    jsvObjectIteratorFree($4 + 16 | 0);
    break label$2;
   }
   label$8 : {
    if (jsvIsFunction(HEAP32[$4 + 24 >> 2]) & 1) {
     jsvUnLock(jspExecuteFunction(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 40 >> 2], HEAP32[$4 + 32 >> 2], HEAP32[$4 + 28 >> 2]));
     break label$8;
    }
    label$10 : {
     if (jsvIsString(HEAP32[$4 + 24 >> 2]) & 1) {
      jsvUnLock(jspEvaluateVar(HEAP32[$4 + 24 >> 2], 0, 0));
      break label$10;
     }
     jsError(5974, 0);
    }
   }
  }
  jsvUnLock(HEAP32[$4 + 24 >> 2]);
 }
 label$12 : {
  label$13 : {
   label$14 : {
    if (!(HEAP8[$4 + 23 | 0] & 1)) {
     break label$14;
    }
    if (jspIsInterrupted() & 1) {
     break label$14;
    }
    $1 = HEAPU32[23798] < jshGetTimeFromMilliseconds(100) >>> 0 ? 0 : 1;
    $0 = i64toi32_i32$HIGH_BITS;
    if (0 > ($0 | 0) ? 1 : 0 >= ($0 | 0) ? $1 : 0) {
     break label$13;
    }
   }
   HEAP8[95196] = 1;
   HEAP8[$4 + 47 | 0] = 0;
   break label$12;
  }
  HEAP8[$4 + 47 | 0] = 1;
 }
 global$0 = $4 + 48 | 0;
 return HEAP8[$4 + 47 | 0] & 1;
}
function jsvSkipNameWithParent($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP8[$3 + 23 | 0] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1 : {
  if (!HEAP32[$3 + 24 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  if (jsvIsArrayBufferName(HEAP32[$3 + 24 >> 2]) & 1) {
   HEAP32[$3 + 28 >> 2] = jsvArrayBufferGetFromName(HEAP32[$3 + 24 >> 2]);
   break label$1;
  }
  if (jsvIsNameInt(HEAP32[$3 + 24 >> 2]) & 1) {
   HEAP32[$3 + 28 >> 2] = jsvNewFromInteger(jsvGetFirstChildSigned(HEAP32[$3 + 24 >> 2]) << 16 >> 16);
   break label$1;
  }
  if (jsvIsNameIntBool(HEAP32[$3 + 24 >> 2]) & 1) {
   HEAP32[$3 + 28 >> 2] = jsvNewFromBool((jsvGetFirstChild(HEAP32[$3 + 24 >> 2]) & 65535) != 0);
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvLockAgain(HEAP32[$3 + 24 >> 2]);
  while (1) {
   if (jsvIsName(HEAP32[$3 + 12 >> 2]) & 1) {
    HEAP16[$3 + 10 >> 1] = jsvGetFirstChild(HEAP32[$3 + 12 >> 2]);
    jsvUnLock(HEAP32[$3 + 12 >> 2]);
    if (!HEAPU16[$3 + 10 >> 1]) {
     if (HEAP32[$3 + 12 >> 2] == HEAP32[$3 + 24 >> 2]) {
      jsvCheckReferenceError(HEAP32[$3 + 24 >> 2]);
     }
     HEAP32[$3 + 28 >> 2] = 0;
     break label$1;
    }
    HEAP32[$3 + 12 >> 2] = jsvLock(HEAPU16[$3 + 10 >> 1]);
    if (HEAP8[$3 + 23 | 0] & 1) {
     continue;
    }
   }
   break;
  }
  if (jsvIsGetterOrSetter(HEAP32[$3 + 12 >> 2]) & 1) {
   $0 = $3;
   label$11 : {
    if (jsvIsNewChild(HEAP32[$3 + 24 >> 2]) & 1) {
     $1 = jsvLock(jsvGetNextSibling(HEAP32[$3 + 24 >> 2]) & 65535);
     break label$11;
    }
    $1 = 0;
   }
   HEAP32[$0 + 4 >> 2] = $1;
   $0 = $3;
   if (HEAP32[$3 + 4 >> 2]) {
    $1 = HEAP32[$3 + 4 >> 2];
   } else {
    $1 = HEAP32[$3 + 16 >> 2];
   }
   HEAP32[$0 >> 2] = jsvExecuteGetter($1, HEAP32[$3 + 12 >> 2]);
   jsvUnLock2(HEAP32[$3 + 4 >> 2], HEAP32[$3 + 12 >> 2]);
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 >> 2];
  }
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function expf($0) {
 var $1 = 0, $2 = Math_fround(0), $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0);
 $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
 $5 = $4 >>> 31;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     $3 = $0;
     label$5 : {
      label$6 : {
       $1 = $4 & 2147483647;
       label$7 : {
        if ($1 >>> 0 >= 1118743632) {
         if ($1 >>> 0 > 2139095040) {
          return $0;
         }
         if (!(($4 | 0) < 0 | $1 >>> 0 < 1118925336)) {
          return Math_fround($0 * Math_fround(1.7014118346046923e+38));
         }
         if ($1 >>> 0 <= 1120924084 | ($4 | 0) > -1) {
          break label$7;
         }
         break label$2;
        }
        if ($1 >>> 0 < 1051816473) {
         break label$4;
        }
        if ($1 >>> 0 < 1065686419) {
         break label$6;
        }
       }
       $0 = Math_fround(Math_fround($0 * Math_fround(1.4426950216293335)) + HEAPF32[($5 << 2) + 53328 >> 2]);
       if (Math_fround(Math_abs($0)) < Math_fround(2147483648)) {
        $1 = ~~$0;
        break label$5;
       }
       $1 = -2147483648;
       break label$5;
      }
      $1 = ($5 ^ 1) - $5 | 0;
     }
     $2 = Math_fround($1 | 0);
     $0 = Math_fround($3 + Math_fround($2 * Math_fround(-.693145751953125)));
     $6 = Math_fround($2 * Math_fround(1428606765330187e-21));
     $3 = Math_fround($0 - $6);
     break label$3;
    }
    if ($1 >>> 0 <= 956301312) {
     break label$1;
    }
    $1 = 0;
    $3 = $0;
   }
   $2 = $3;
   $7 = $0;
   $2 = Math_fround($2 * $2);
   $0 = Math_fround($3 - Math_fround($2 * Math_fround(Math_fround($2 * Math_fround(-.0027667332906275988)) + Math_fround(.16666625440120697))));
   $2 = Math_fround(Math_fround($7 + Math_fround(Math_fround(Math_fround($3 * $0) / Math_fround(Math_fround(2) - $0)) - $6)) + Math_fround(1));
   if (!$1) {
    break label$2;
   }
   $2 = scalbnf($2, $1);
  }
  return $2;
 }
 return Math_fround($0 + Math_fround(1));
}
function _jswrap_interface_setTimeoutOrInterval($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 + -64 | 0;
 global$0 = $4;
 HEAP32[$4 + 56 >> 2] = $0;
 HEAPF64[$4 + 48 >> 3] = $1;
 HEAP32[$4 + 44 >> 2] = $2;
 HEAP8[$4 + 43 | 0] = $3;
 label$1 : {
  label$2 : {
   if (jsvIsFunction(HEAP32[$4 + 56 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsString(HEAP32[$4 + 56 >> 2]) & 1) {
    break label$2;
   }
   jsExceptionHere(1, 33150, 0);
   HEAP32[$4 + 60 >> 2] = 0;
   break label$1;
  }
  $0 = __DOUBLE_BITS(HEAPF64[$4 + 48 >> 3]);
  $2 = i64toi32_i32$HIGH_BITS & 2147483647;
  if (!(HEAPF64[$4 + 48 >> 3] < .1 ? 0 : ($2 | 0) == 2146435072 & $0 >>> 0 <= 0 | $2 >>> 0 < 2146435072)) {
   HEAPF64[$4 + 48 >> 3] = .1;
  }
  if (HEAPF64[$4 + 48 >> 3] > 31536000001e3) {
   jsExceptionHere(1, 33183, 0);
   HEAP32[$4 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 36 >> 2] = jsvNewWithFlags(5);
  HEAP32[$4 + 24 >> 2] = jshGetTimeFromMilliseconds(HEAPF64[$4 + 48 >> 3]);
  HEAP32[$4 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
  $6 = HEAP32[$4 + 36 >> 2];
  $0 = jshGetSystemTime();
  $3 = HEAP32[23796];
  $5 = HEAP32[$4 + 24 >> 2];
  $2 = ($0 - $3 | 0) + $5 | 0;
  $0 = HEAP32[$4 + 28 >> 2] + (i64toi32_i32$HIGH_BITS - (HEAP32[23797] + ($0 >>> 0 < $3 >>> 0) | 0) | 0) | 0;
  jsvObjectSetChildAndUnLock($6, 33217, jsvNewFromLongInteger($2, $2 >>> 0 < $5 >>> 0 ? $0 + 1 | 0 : $0));
  if (!(HEAP8[$4 + 43 | 0] & 1)) {
   jsvObjectSetChildAndUnLock(HEAP32[$4 + 36 >> 2], 33222, jsvNewFromLongInteger(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 28 >> 2]));
  }
  jsvObjectSetChild(HEAP32[$4 + 36 >> 2], 33231, HEAP32[$4 + 56 >> 2]);
  if (jsvGetArrayLength(HEAP32[$4 + 44 >> 2])) {
   jsvObjectSetChild(HEAP32[$4 + 36 >> 2], 33240, HEAP32[$4 + 44 >> 2]);
  }
  HEAP32[$4 + 20 >> 2] = jsvNewFromInteger(jsiTimerAdd(HEAP32[$4 + 36 >> 2]));
  jsvUnLock(HEAP32[$4 + 36 >> 2]);
  jsiTimersChanged();
  HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 20 >> 2];
 }
 global$0 = $4 - -64 | 0;
 return HEAP32[$4 + 60 >> 2];
}
function jswrap_object_getOwnPropertyDescriptor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1 : {
  if (!(jswrap_object_hasOwnProperty(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]) & 1)) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 32 >> 2] = jsvAsArrayIndex(HEAP32[$2 + 36 >> 2]);
  HEAP32[$2 + 28 >> 2] = jspGetVarNamedField(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 32 >> 2], 1);
  jsvUnLock(HEAP32[$2 + 32 >> 2]);
  if (!HEAP32[$2 + 28 >> 2]) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 24 >> 2] = jsvNewWithFlags(5);
  if (!HEAP32[$2 + 24 >> 2]) {
   jsvUnLock(HEAP32[$2 + 28 >> 2]);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP8[$2 + 23 | 0] = jsvIsNewChild(HEAP32[$2 + 28 >> 2]) & 1;
  HEAP32[$2 + 16 >> 2] = jsvGetInternalFunctionCheckerFor(HEAP32[$2 + 40 >> 2]);
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 34886, jsvNewFromBool(1));
  $0 = HEAP32[$2 + 24 >> 2];
  if (HEAP32[$2 + 16 >> 2]) {
   $1 = FUNCTION_TABLE[HEAP32[$2 + 16 >> 2]](HEAP32[$2 + 28 >> 2]) ^ -1;
  } else {
   $1 = 1;
  }
  jsvObjectSetChildAndUnLock($0, 34895, jsvNewFromBool($1 & 1));
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 34906, jsvNewFromBool((HEAPU8[$2 + 23 | 0] ^ -1) & 1));
  HEAP32[$2 + 12 >> 2] = jsvGetValueOfName(HEAP32[$2 + 28 >> 2]);
  label$7 : {
   if (jsvIsGetterOrSetter(HEAP32[$2 + 12 >> 2]) & 1) {
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 34919, jsvObjectGetChild(HEAP32[$2 + 12 >> 2], 34919, 0));
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 34923, jsvObjectGetChild(HEAP32[$2 + 12 >> 2], 34923, 0));
    break label$7;
   }
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 34927, jsvSkipName(HEAP32[$2 + 28 >> 2]));
  }
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  jsvUnLock(HEAP32[$2 + 28 >> 2]);
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 24 >> 2];
 }
 global$0 = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}
function jsvIsStringNumericInt($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP8[$2 + 55 | 0] = $1;
 jsvStringIteratorNew($2 + 32 | 0, HEAP32[$2 + 56 >> 2], 0);
 while (1) {
  if (jsvStringIteratorHasChar($2 + 32 | 0) & 1) {
   $0 = isWhitespace(jsvStringIteratorGetChar($2 + 32 | 0) << 24 >> 24);
  } else {
   $0 = 0;
  }
  if ($0 & 1) {
   jsvStringIteratorNext($2 + 32 | 0);
   continue;
  }
  break;
 }
 label$5 : {
  if ((jsvStringIteratorGetChar($2 + 32 | 0) & 255) != 45) {
   if ((jsvStringIteratorGetChar($2 + 32 | 0) & 255) != 43) {
    break label$5;
   }
  }
  jsvStringIteratorNext($2 + 32 | 0);
 }
 HEAP32[$2 + 28 >> 2] = 0;
 if ((jsvStringIteratorGetChar($2 + 32 | 0) & 255) == 48) {
  $0 = $2 + 25 | 0;
  $1 = $2 + 20 | 0;
  $3 = $2 + 32 | 0;
  jsvStringIteratorNext($3);
  HEAP8[$2 + 25 | 0] = 48;
  HEAP8[$2 + 26 | 0] = jsvStringIteratorGetChar($3);
  HEAP8[$2 + 27 | 0] = 0;
  HEAP32[$2 + 20 >> 2] = $0;
  HEAP32[$2 + 28 >> 2] = getRadix($1, 0);
  if (HEAPU32[$2 + 20 >> 2] > $0 + 1 >>> 0) {
   jsvStringIteratorNext($2 + 32 | 0);
  }
 }
 if (!HEAP32[$2 + 28 >> 2]) {
  HEAP32[$2 + 28 >> 2] = 10;
 }
 HEAP32[$2 + 16 >> 2] = 0;
 label$10 : {
  while (1) {
   if (jsvStringIteratorHasChar($2 + 32 | 0) & 1) {
    HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] + 1;
    HEAP8[$2 + 15 | 0] = jsvStringIteratorGetCharAndNext($2 + 32 | 0);
    label$13 : {
     if (!(!(HEAP8[$2 + 55 | 0] & 1) | HEAP8[$2 + 15 | 0] != 46)) {
      HEAP8[$2 + 55 | 0] = 0;
      break label$13;
     }
     HEAP32[$2 + 8 >> 2] = chtod(HEAP8[$2 + 15 | 0]);
     if (!(HEAP32[$2 + 8 >> 2] < HEAP32[$2 + 28 >> 2] ? HEAP32[$2 + 8 >> 2] >= 0 : 0)) {
      jsvStringIteratorFree($2 + 32 | 0);
      HEAP8[$2 + 63 | 0] = 0;
      break label$10;
     }
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree($2 + 32 | 0);
  HEAP8[$2 + 63 | 0] = HEAP32[$2 + 16 >> 2] > 0;
 }
 global$0 = $2 - -64 | 0;
 return HEAP8[$2 + 63 | 0] & 1;
}
function jsvGetArrayIndex($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP16[$2 + 18 >> 1] = jsvGetLastChild(HEAP32[$2 + 24 >> 2]);
 HEAP32[$2 + 12 >> 2] = 0;
 label$1 : {
  while (1) {
   label$3 : {
    if (!HEAPU16[$2 + 18 >> 1]) {
     break label$3;
    }
    HEAP32[$2 + 8 >> 2] = jsvLock(HEAPU16[$2 + 18 >> 1]);
    if (jsvIsInt(HEAP32[$2 + 8 >> 2]) & 1) {
     HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
     if (HEAP32[$2 + 12 >> 2] == HEAP32[$2 + 20 >> 2]) {
      HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
      break label$1;
     }
     jsvUnLock(HEAP32[$2 + 8 >> 2]);
     break label$3;
    }
    HEAP16[$2 + 18 >> 1] = jsvGetPrevSibling(HEAP32[$2 + 8 >> 2]);
    jsvUnLock(HEAP32[$2 + 8 >> 2]);
    continue;
   }
   break;
  }
  if (HEAP32[$2 + 20 >> 2] > HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  label$7 : {
   if (HEAP32[$2 + 20 >> 2] > (HEAP32[$2 + 12 >> 2] / 2 | 0)) {
    while (1) {
     if (HEAPU16[$2 + 18 >> 1]) {
      HEAP32[$2 + 4 >> 2] = jsvLock(HEAPU16[$2 + 18 >> 1]);
      if (HEAP32[HEAP32[$2 + 4 >> 2] >> 2] == HEAP32[$2 + 20 >> 2]) {
       HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 4 >> 2];
       break label$1;
      }
      HEAP16[$2 + 18 >> 1] = jsvGetPrevSibling(HEAP32[$2 + 4 >> 2]);
      jsvUnLock(HEAP32[$2 + 4 >> 2]);
      continue;
     }
     break;
    }
    break label$7;
   }
   HEAP16[$2 + 18 >> 1] = jsvGetFirstChild(HEAP32[$2 + 24 >> 2]);
   while (1) {
    if (HEAPU16[$2 + 18 >> 1]) {
     HEAP32[$2 >> 2] = jsvLock(HEAPU16[$2 + 18 >> 1]);
     if (HEAP32[HEAP32[$2 >> 2] >> 2] == HEAP32[$2 + 20 >> 2]) {
      HEAP32[$2 + 28 >> 2] = HEAP32[$2 >> 2];
      break label$1;
     }
     HEAP16[$2 + 18 >> 1] = jsvGetNextSibling(HEAP32[$2 >> 2]);
     jsvUnLock(HEAP32[$2 >> 2]);
     continue;
    }
    break;
   }
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function _jswrap_array_sort($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 128 | 0;
 global$0 = $3;
 HEAP32[$3 + 124 >> 2] = $0;
 HEAP32[$3 + 120 >> 2] = $1;
 HEAP32[$3 + 116 >> 2] = $2;
 label$1 : {
  if (HEAP32[$3 + 120 >> 2] < 2) {
   break label$1;
  }
  $0 = $3 + 8 | 0;
  $1 = $3 + 72 | 0;
  jsvIteratorClone($1, HEAP32[$3 + 124 >> 2]);
  HEAP8[$3 + 71 | 0] = 1;
  HEAP32[$3 + 64 >> 2] = jsvIteratorGetValue($1);
  HEAP32[$3 + 60 >> 2] = 0;
  HEAP32[$3 + 56 >> 2] = 0;
  jsvIteratorClone($0, HEAP32[$3 + 124 >> 2]);
  jsvIteratorNext($0);
  while (1) {
   $0 = HEAP32[$3 + 120 >> 2] + -1 | 0;
   HEAP32[$3 + 120 >> 2] = $0;
   if ($0) {
    $0 = jspIsInterrupted() ^ -1;
   } else {
    $0 = 0;
   }
   if ($0 & 1) {
    HEAP32[$3 + 4 >> 2] = jsvIteratorGetValue($3 + 8 | 0);
    HEAP32[$3 >> 2] = _jswrap_array_sort_compare(HEAP32[$3 + 4 >> 2], HEAP32[$3 + 64 >> 2], HEAP32[$3 + 116 >> 2]);
    label$6 : {
     if (HEAP32[$3 >> 2] <= 0) {
      if (HEAP32[$3 >> 2] < 0) {
       HEAP8[$3 + 71 | 0] = 0;
      }
      $1 = $3 + 8 | 0;
      HEAP32[$3 + 60 >> 2] = HEAP32[$3 + 60 >> 2] + 1;
      $0 = $3 + 72 | 0;
      jsvIteratorSetValue($0, HEAP32[$3 + 4 >> 2]);
      jsvIteratorNext($0);
      jsvUnLock(jsvIteratorSetValue($1, jsvIteratorGetValue($0)));
      jsvIteratorSetValue($0, HEAP32[$3 + 64 >> 2]);
      break label$6;
     }
     HEAP32[$3 + 56 >> 2] = HEAP32[$3 + 56 >> 2] + 1;
    }
    $0 = $3 + 8 | 0;
    jsvUnLock(HEAP32[$3 + 4 >> 2]);
    jsvIteratorNext($0);
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 8 | 0);
  jsvUnLock(HEAP32[$3 + 64 >> 2]);
  if (jspIsInterrupted() & 1) {
   jsvIteratorFree($3 + 72 | 0);
   break label$1;
  }
  $0 = $3 + 72 | 0;
  jsvIteratorNext($0);
  _jswrap_array_sort($0, HEAP32[$3 + 56 >> 2], HEAP32[$3 + 116 >> 2]);
  jsvIteratorFree($0);
  if (HEAP8[$3 + 71 | 0] & 1) {
   break label$1;
  }
  _jswrap_array_sort(HEAP32[$3 + 124 >> 2], HEAP32[$3 + 60 >> 2], HEAP32[$3 + 116 >> 2]);
 }
 global$0 = $3 + 128 | 0;
}
function jswrap_interface_edit($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = 0;
 label$1 : {
  if (jsvIsString(HEAP32[$1 + 28 >> 2]) & 1) {
   HEAP32[$1 + 28 >> 2] = jsvLockAgain(HEAP32[$1 + 28 >> 2]);
   HEAP32[$1 + 24 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromVar(HEAP32[23774], HEAP32[$1 + 28 >> 2], 0));
   break label$1;
  }
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 28 >> 2];
  HEAP32[$1 + 28 >> 2] = jsvGetPathTo(HEAP32[23774], HEAP32[$1 + 24 >> 2], 0);
 }
 label$3 : {
  if (jsvIsString(HEAP32[$1 + 28 >> 2]) & 1) {
   if (jsvIsFunction(HEAP32[$1 + 24 >> 2]) & 1) {
    HEAP32[$1 + 20 >> 2] = jsvFindChildFromString(HEAP32[$1 + 24 >> 2], 33004, 0);
    HEAP32[$1 + 16 >> 2] = jsvGetIndexOf(HEAP32[23774], HEAP32[$1 + 24 >> 2], 1);
    HEAP8[$1 + 15 | 0] = HEAP32[$1 + 20 >> 2] ? 0 : HEAP32[$1 + 16 >> 2] != 0;
    jsvUnLock2(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
    HEAP32[$1 + 8 >> 2] = jsvNewFromEmptyString();
    if (HEAP32[$1 + 8 >> 2]) {
     HEAP32[$1 + 4 >> 2] = jsvAsString(HEAP32[$1 + 24 >> 2]);
     label$9 : {
      if (HEAP8[$1 + 15 | 0] & 1) {
       jsvAppendString(HEAP32[$1 + 8 >> 2], 33009);
       jsvAppendStringVarComplete(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 28 >> 2]);
       jsvAppendStringVar(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2], 9, 2147483647);
       break label$9;
      }
      jsvAppendStringVarComplete(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 28 >> 2]);
      jsvAppendString(HEAP32[$1 + 8 >> 2], 33019);
      jsvAppendStringVarComplete(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]);
      jsvAppendString(HEAP32[$1 + 8 >> 2], 33033);
     }
     jsvUnLock(HEAP32[$1 + 4 >> 2]);
     jsiReplaceInputLine(HEAP32[$1 + 8 >> 2]);
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
    }
    break label$3;
   }
   jsExceptionHere(1, 33036, 0);
   break label$3;
  }
  jsExceptionHere(1, 33086, 0);
 }
 jsvUnLock2(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 28 >> 2]);
 global$0 = $1 + 32 | 0;
}
function tflite__ops__micro__pooling___28anonymous_20namespace_29__AverageEvalInt8_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20TfLitePoolParams_20const__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = global$0 - 144 | 0;
 global$0 = $6;
 $7 = $6 + 40 | 0;
 HEAP32[$6 + 140 >> 2] = $0;
 HEAP32[$6 + 136 >> 2] = $1;
 HEAP32[$6 + 132 >> 2] = $2;
 HEAP32[$6 + 128 >> 2] = $3;
 HEAP32[$6 + 124 >> 2] = $4;
 HEAP32[$6 + 120 >> 2] = $5;
 tflite__CalculateActivationRangeInt8_28TfLiteFusedActivation_2c_20TfLiteTensor__2c_20int__2c_20int__29(HEAP32[HEAP32[$6 + 132 >> 2] + 20 >> 2], HEAP32[$6 + 120 >> 2], $6 + 116 | 0, $6 + 112 | 0);
 HEAP32[$6 + 76 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 8 >> 2];
 HEAP32[$6 + 80 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 4 >> 2];
 HEAP32[$6 + 84 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 16 >> 2];
 HEAP32[$6 + 88 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 12 >> 2];
 HEAP16[$6 + 68 >> 1] = HEAP32[HEAP32[$6 + 128 >> 2] + 4 >> 2];
 HEAP16[$6 + 66 >> 1] = HEAP32[HEAP32[$6 + 128 >> 2] >> 2];
 HEAP32[$6 + 92 >> 2] = HEAP32[$6 + 116 >> 2];
 HEAP32[$6 + 96 >> 2] = HEAP32[$6 + 112 >> 2];
 tflite__GetTensorShape_28TfLiteTensor_20const__29($7, HEAP32[$6 + 124 >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$6 + 124 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($6 + 8 | 0, HEAP32[$6 + 120 >> 2]);
 tflite__reference_integer_ops__AveragePool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($6 - -64 | 0, $6 + 40 | 0, $0, $6 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$6 + 120 >> 2]));
 $0 = $6 + 40 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($6 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $6 + 144 | 0;
}
function jswrap_graphics_setFont($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 label$1 : {
  if (!(jsvIsString(HEAP32[$3 + 36 >> 2]) & 1)) {
   HEAP32[$3 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP16[$3 + 30 >> 1] = 65535;
  HEAP8[$3 + 29 | 0] = 0;
  if (jsvIsStringEqualOrStartsWith(HEAP32[$3 + 36 >> 2], 38997, 1) & 1) {
   HEAP16[$3 + 30 >> 1] = jsvGetIntegerAndUnLock(jsvNewFromStringVar(HEAP32[$3 + 36 >> 2], 6, 2147483647));
   if (HEAP32[$3 + 32 >> 2] > 0) {
    HEAP16[$3 + 30 >> 1] = HEAP32[$3 + 32 >> 2];
   }
   HEAP8[$3 + 29 | 0] = 1;
  }
  if (HEAP32[$3 + 32 >> 2] < 1) {
   HEAP32[$3 + 32 >> 2] = 1;
  }
  if (HEAP32[$3 + 32 >> 2] > 8191) {
   HEAP32[$3 + 32 >> 2] = 8191;
  }
  label$7 : {
   if (!(jsvIsUndefined(HEAP32[$3 + 36 >> 2]) & 1)) {
    if (!(jsvIsStringEqual(HEAP32[$3 + 36 >> 2], 39004) & 1)) {
     break label$7;
    }
   }
   HEAP16[$3 + 30 >> 1] = HEAP32[$3 + 32 >> 2] - -8192;
  }
  if (jsvIsStringEqual(HEAP32[$3 + 36 >> 2], 39008) & 1) {
   HEAP16[$3 + 30 >> 1] = HEAP32[$3 + 32 >> 2] + 16384;
  }
  if (HEAPU16[$3 + 30 >> 1] == 65535) {
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 36 >> 2];
   HEAP32[$3 + 24 >> 2] = jsvVarPrintf(39012, $3 + 16 | 0);
   HEAP32[$3 + 20 >> 2] = jspGetVarNamedField(HEAP32[$3 + 40 >> 2], HEAP32[$3 + 24 >> 2], 0);
   if (HEAP32[$3 + 20 >> 2]) {
    jsvUnLock(jspExecuteFunction(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 40 >> 2], 0, 0));
    HEAP16[$3 + 30 >> 1] = HEAP32[$3 + 32 >> 2] + 24576;
   }
   jsvUnLock2(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 24 >> 2]);
  }
  if (HEAPU16[$3 + 30 >> 1] == 65535) {
   HEAP32[$3 >> 2] = HEAP32[$3 + 36 >> 2];
   jsExceptionHere(1, 39022, $3);
  }
  HEAP32[$3 + 44 >> 2] = jswrap_graphics_setFontSizeX(HEAP32[$3 + 40 >> 2], HEAPU16[$3 + 30 >> 1], HEAP8[$3 + 29 | 0] & 1);
 }
 global$0 = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}
function tflite__ops__micro__pooling___28anonymous_20namespace_29__AverageEvalUint8_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20TfLitePoolParams_20const__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = global$0 - 144 | 0;
 global$0 = $6;
 $7 = $6 + 40 | 0;
 HEAP32[$6 + 140 >> 2] = $0;
 HEAP32[$6 + 136 >> 2] = $1;
 HEAP32[$6 + 132 >> 2] = $2;
 HEAP32[$6 + 128 >> 2] = $3;
 HEAP32[$6 + 124 >> 2] = $4;
 HEAP32[$6 + 120 >> 2] = $5;
 tflite__CalculateActivationRangeUint8_28TfLiteFusedActivation_2c_20TfLiteTensor__2c_20int__2c_20int__29(HEAP32[HEAP32[$6 + 132 >> 2] + 20 >> 2], HEAP32[$6 + 120 >> 2], $6 + 116 | 0, $6 + 112 | 0);
 HEAP32[$6 + 76 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 8 >> 2];
 HEAP32[$6 + 80 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 4 >> 2];
 HEAP32[$6 + 84 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 16 >> 2];
 HEAP32[$6 + 88 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 12 >> 2];
 HEAP16[$6 + 68 >> 1] = HEAP32[HEAP32[$6 + 128 >> 2] + 4 >> 2];
 HEAP16[$6 + 66 >> 1] = HEAP32[HEAP32[$6 + 128 >> 2] >> 2];
 HEAP32[$6 + 92 >> 2] = HEAP32[$6 + 116 >> 2];
 HEAP32[$6 + 96 >> 2] = HEAP32[$6 + 112 >> 2];
 tflite__GetTensorShape_28TfLiteTensor_20const__29($7, HEAP32[$6 + 124 >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$6 + 124 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($6 + 8 | 0, HEAP32[$6 + 120 >> 2]);
 tflite__reference_ops__AveragePool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($6 - -64 | 0, $6 + 40 | 0, $0, $6 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$6 + 120 >> 2]));
 $0 = $6 + 40 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($6 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $6 + 144 | 0;
}
function tflite__ops__micro__activations___28anonymous_20namespace_29__CalculateSoftmaxOpData_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteSoftmaxParams_20const__2c_20tflite__ops__micro__activations___28anonymous_20namespace_29__OpData__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = global$0 - 80 | 0;
 global$0 = $5;
 HEAP32[$5 + 72 >> 2] = $0;
 HEAP32[$5 + 68 >> 2] = $1;
 HEAP32[$5 + 64 >> 2] = $2;
 HEAP32[$5 + 60 >> 2] = $3;
 HEAP32[$5 + 56 >> 2] = $4;
 label$1 : {
  if (HEAP32[HEAP32[$5 + 68 >> 2] >> 2] == 3) {
   if (HEAP32[HEAP32[$5 + 64 >> 2] + 16 >> 2]) {
    $0 = HEAP32[HEAP32[$5 + 72 >> 2] + 20 >> 2];
    $1 = HEAP32[$5 + 72 >> 2];
    $2 = HEAP32[HEAP32[$5 + 64 >> 2] + 16 >> 2];
    HEAP32[$5 + 20 >> 2] = 0;
    HEAP32[$5 + 16 >> 2] = $2;
    HEAP32[$5 + 12 >> 2] = 44543;
    HEAP32[$5 + 8 >> 2] = 44517;
    HEAP32[$5 + 4 >> 2] = 44;
    HEAP32[$5 >> 2] = 44419;
    FUNCTION_TABLE[$0]($1, 44393, $5);
    HEAP32[$5 + 76 >> 2] = 1;
    break label$1;
   }
   if (HEAPF32[HEAP32[$5 + 64 >> 2] + 12 >> 2] != Math_fround(.00390625)) {
    $0 = HEAP32[HEAP32[$5 + 72 >> 2] + 20 >> 2];
    $1 = HEAP32[$5 + 72 >> 2];
    HEAP32[$5 + 40 >> 2] = 44568;
    HEAP32[$5 + 36 >> 2] = 45;
    HEAP32[$5 + 32 >> 2] = 44419;
    FUNCTION_TABLE[$0]($1, 44545, $5 + 32 | 0);
    HEAP32[$5 + 76 >> 2] = 1;
    break label$1;
   }
   tflite__PreprocessSoftmaxScaling_28double_2c_20double_2c_20int_2c_20int__2c_20int__29(+HEAPF32[HEAP32[$5 + 60 >> 2] >> 2], +HEAPF32[HEAP32[$5 + 68 >> 2] + 12 >> 2], HEAP32[$5 + 56 >> 2], HEAP32[$5 + 56 >> 2] + 4 | 0);
   $6 = -1 * +(tflite__CalculateInputRadius_28int_2c_20int_2c_20int_29(HEAP32[HEAP32[$5 + 56 >> 2] + 4 >> 2]) | 0);
   label$5 : {
    if (Math_abs($6) < 2147483648) {
     $0 = ~~$6;
     break label$5;
    }
    $0 = -2147483648;
   }
   HEAP32[HEAP32[$5 + 56 >> 2] + 12 >> 2] = $0;
  }
  HEAP32[$5 + 76 >> 2] = 0;
 }
 global$0 = $5 + 80 | 0;
 return HEAP32[$5 + 76 >> 2];
}
function jswrap_regexp_exec($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $3 = global$0 - 48 | 0;
 $2 = $3;
 global$0 = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 HEAP32[$2 + 32 >> 2] = jsvAsString(HEAP32[$2 + 36 >> 2]);
 HEAP32[$2 + 28 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$2 + 40 >> 2], 36800, 0));
 HEAP32[$2 + 24 >> 2] = jsvObjectGetChild(HEAP32[$2 + 40 >> 2], 36787, 0);
 label$1 : {
  if (!(jsvIsString(HEAP32[$2 + 24 >> 2]) & 1)) {
   jsvUnLock2(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = jsvGetStringLength(HEAP32[$2 + 24 >> 2]);
  $0 = $3 - (HEAP32[$2 + 20 >> 2] + 16 & -16) | 0;
  global$0 = $0;
  HEAP32[$2 + 16 >> 2] = $0;
  if (!HEAP32[$2 + 16 >> 2]) {
   jsvUnLock2(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  jsvGetString(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2] + 1 | 0);
  jsvUnLock(HEAP32[$2 + 24 >> 2]);
  HEAP32[$2 + 12 >> 2] = match(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 28 >> 2], jswrap_regexp_hasFlag(HEAP32[$2 + 40 >> 2], 105) & 1);
  jsvUnLock(HEAP32[$2 + 32 >> 2]);
  label$4 : {
   if (!HEAP32[$2 + 12 >> 2]) {
    HEAP32[$2 + 12 >> 2] = jsvNewWithFlags(2);
    HEAP32[$2 + 28 >> 2] = 0;
    break label$4;
   }
   label$6 : {
    if (jswrap_regexp_hasFlag(HEAP32[$2 + 40 >> 2], 103) & 1) {
     HEAP32[$2 + 8 >> 2] = jsvGetArrayItem(HEAP32[$2 + 12 >> 2], 0);
     HEAP32[$2 + 28 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$2 + 12 >> 2], 36810, 0)) + jsvGetStringLength(HEAP32[$2 + 8 >> 2]);
     jsvUnLock(HEAP32[$2 + 8 >> 2]);
     break label$6;
    }
    HEAP32[$2 + 28 >> 2] = 0;
   }
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 40 >> 2], 36800, jsvNewFromInteger(HEAP32[$2 + 28 >> 2]));
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 global$0 = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}
function jswBinarySearch($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 HEAP8[$3 + 31 | 0] = HEAPU8[HEAP32[$3 + 40 >> 2] + 8 | 0];
 HEAP32[$3 + 24 >> 2] = 0;
 HEAP32[$3 + 20 >> 2] = HEAPU8[$3 + 31 | 0] - 1;
 label$1 : {
  while (1) {
   if (HEAP32[$3 + 24 >> 2] <= HEAP32[$3 + 20 >> 2]) {
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 24 >> 2] + HEAP32[$3 + 20 >> 2] >> 1;
    $0 = HEAP32[$3 + 40 >> 2];
    HEAP32[$3 + 12 >> 2] = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) + (HEAP32[$3 + 16 >> 2] << 3);
    $0 = HEAP32[$3 + 12 >> 2];
    HEAP16[$3 + 10 >> 1] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
    $0 = HEAP32[$3 + 40 >> 2];
    HEAP32[$3 + 4 >> 2] = strcmp(HEAP32[$3 + 32 >> 2], HEAPU16[$3 + 10 >> 1] + (HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) | 0);
    if (HEAP32[$3 + 4 >> 2]) {
     if (HEAP32[$3 + 4 >> 2] < 0) {
      HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 16 >> 2] - 1;
      continue;
     }
     HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
     continue;
    } else {
     $0 = HEAP32[$3 + 12 >> 2];
     HEAP16[$3 + 2 >> 1] = HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8;
     if ((HEAPU16[$3 + 2 >> 1] & 32256) == 28672) {
      $0 = HEAP32[$3 + 12 >> 2];
      HEAP32[$3 + 44 >> 2] = jsnCallFunction(HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24), HEAPU16[$3 + 2 >> 1], HEAP32[$3 + 36 >> 2], 0, 0);
      break label$1;
     }
     $0 = HEAP32[$3 + 12 >> 2];
     HEAP32[$3 + 44 >> 2] = jsvNewNativeFunction(HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24), HEAPU16[$3 + 2 >> 1]);
     break label$1;
    }
   }
   break;
  }
  HEAP32[$3 + 44 >> 2] = 0;
 }
 global$0 = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}
function jswrap_waveform_constructor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1 : {
  if (HEAP32[$2 + 40 >> 2] <= 0) {
   jsExceptionHere(1, 37545, 0);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP8[$2 + 35 | 0] = 0;
  HEAP8[$2 + 34 | 0] = 0;
  label$3 : {
   if (jsvIsObject(HEAP32[$2 + 36 >> 2]) & 1) {
    HEAP8[$2 + 35 | 0] = jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$2 + 36 >> 2], 37576, 0)) & 1;
    HEAP32[$2 + 28 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$2 + 36 >> 2], 37589, 0));
    if (!(!HEAP32[$2 + 28 >> 2] | HEAP32[$2 + 28 >> 2] == 8 | HEAP32[$2 + 28 >> 2] == 16)) {
     jsExceptionHere(1, 37594, 0);
     HEAP32[$2 + 44 >> 2] = 0;
     break label$1;
    }
    if (HEAP32[$2 + 28 >> 2] == 16) {
     HEAP8[$2 + 34 | 0] = 1;
    }
    break label$3;
   }
   if (!(jsvIsUndefined(HEAP32[$2 + 36 >> 2]) & 1)) {
    HEAP32[$2 >> 2] = HEAP32[$2 + 36 >> 2];
    jsExceptionHere(1, 37617, $2);
   }
  }
  HEAP16[$2 + 26 >> 1] = HEAP8[$2 + 34 | 0] & 1 ? 2 : 1;
  HEAP32[$2 + 20 >> 2] = jsvNewTypedArray(HEAPU16[$2 + 26 >> 1], HEAP32[$2 + 40 >> 2]);
  HEAP32[$2 + 16 >> 2] = 0;
  if (HEAP8[$2 + 35 | 0] & 1) {
   HEAP32[$2 + 16 >> 2] = jsvNewTypedArray(HEAPU16[$2 + 26 >> 1], HEAP32[$2 + 40 >> 2]);
  }
  HEAP32[$2 + 12 >> 2] = jspNewObject(0, 37672);
  if (!(HEAP32[$2 + 16 >> 2] | !(HEAP8[$2 + 35 | 0] & 1) ? !(!HEAP32[$2 + 12 >> 2] | !HEAP32[$2 + 20 >> 2]) : 0)) {
   jsvUnLock3(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 37467, HEAP32[$2 + 20 >> 2]);
  if (HEAP32[$2 + 16 >> 2]) {
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 37498, HEAP32[$2 + 16 >> 2]);
  }
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 global$0 = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}
function jsfListFiles($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 112 | 0;
 global$0 = $1;
 HEAP32[$1 + 104 >> 2] = $0;
 HEAP32[$1 + 100 >> 2] = jsvNewWithFlags(3);
 label$1 : {
  if (!HEAP32[$1 + 100 >> 2]) {
   HEAP32[$1 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 60 >> 2] = 134437888;
  $0 = $1 + 24 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  if (jsfGetFileHeader(HEAP32[$1 + 60 >> 2], $0, 1) & 1) {
   while (1) {
    if (HEAP32[$1 + 28 >> 2]) {
     $2 = HEAP32[$1 + 32 >> 2];
     $0 = $1 - -64 | 0;
     HEAP32[$0 >> 2] = HEAP32[$1 + 28 >> 2];
     HEAP32[$0 + 4 >> 2] = $2;
     HEAP32[$0 + 24 >> 2] = HEAP32[$1 + 52 >> 2];
     $2 = HEAP32[$1 + 48 >> 2];
     HEAP32[$0 + 16 >> 2] = HEAP32[$1 + 44 >> 2];
     HEAP32[$0 + 20 >> 2] = $2;
     $2 = HEAP32[$1 + 40 >> 2];
     HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 36 >> 2];
     HEAP32[$0 + 12 >> 2] = $2;
     HEAP8[$1 + 92 | 0] = 0;
     HEAP32[$1 + 20 >> 2] = jsvNewFromString($0);
     HEAP8[$1 + 19 | 0] = 1;
     if (HEAP32[$1 + 104 >> 2]) {
      HEAP32[$1 + 12 >> 2] = jswrap_string_match(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 104 >> 2]);
      $0 = $1;
      if (jsvIsUndefined(HEAP32[$1 + 12 >> 2]) & 1) {
       $2 = 1;
      } else {
       $2 = jsvIsNull(HEAP32[$1 + 12 >> 2]);
      }
      HEAP8[$0 + 19 | 0] = ($2 ^ -1) & 1;
      jsvUnLock(HEAP32[$1 + 12 >> 2]);
     }
     label$9 : {
      if (HEAP8[$1 + 19 | 0] & 1) {
       jsvArrayPushAndUnLock(HEAP32[$1 + 100 >> 2], HEAP32[$1 + 20 >> 2]);
       break label$9;
      }
      jsvUnLock(HEAP32[$1 + 20 >> 2]);
     }
    }
    if (jsfGetNextFileHeader($1 + 60 | 0, $1 + 24 | 0, 1) & 1) {
     continue;
    }
    break;
   }
  }
  HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 100 >> 2];
 }
 global$0 = $1 + 112 | 0;
 return HEAP32[$1 + 108 >> 2];
}
function jsvIsStringEqualOrStartsWithOffset($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 + -64 | 0;
 global$0 = $4;
 HEAP32[$4 + 56 >> 2] = $0;
 HEAP32[$4 + 52 >> 2] = $1;
 HEAP8[$4 + 51 | 0] = $2;
 HEAP32[$4 + 44 >> 2] = 0;
 HEAP8[$4 + 43 | 0] = $3;
 label$1 : {
  if (!(jsvHasCharacterData(HEAP32[$4 + 56 >> 2]) & 1)) {
   HEAP8[$4 + 63 | 0] = 0;
   break label$1;
  }
  jsvStringIteratorNew($4 + 16 | 0, HEAP32[$4 + 56 >> 2], HEAP32[$4 + 44 >> 2]);
  label$3 : {
   if (HEAP8[$4 + 43 | 0] & 1) {
    while (1) {
     $1 = !(jsvStringIteratorHasChar($4 + 16 | 0) & 1);
     $0 = 0;
     label$6 : {
      if ($1) {
       break label$6;
      }
      $0 = 0;
      if (!HEAP8[HEAP32[$4 + 52 >> 2]]) {
       break label$6;
      }
      $0 = (jsvStringCharToLower(jsvStringIteratorGetChar($4 + 16 | 0) << 24 >> 24) & 255) == (jsvStringCharToLower(HEAP8[HEAP32[$4 + 52 >> 2]]) & 255);
     }
     if ($0) {
      HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
      jsvStringIteratorNext($4 + 16 | 0);
      continue;
     }
     break;
    }
    break label$3;
   }
   while (1) {
    $1 = !(jsvStringIteratorHasChar($4 + 16 | 0) & 1);
    $0 = 0;
    label$9 : {
     if ($1) {
      break label$9;
     }
     $0 = 0;
     if (!HEAP8[HEAP32[$4 + 52 >> 2]]) {
      break label$9;
     }
     $0 = (jsvStringIteratorGetChar($4 + 16 | 0) & 255) == HEAPU8[HEAP32[$4 + 52 >> 2]];
    }
    if ($0) {
     HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
     jsvStringIteratorNext($4 + 16 | 0);
     continue;
    }
    break;
   }
  }
  $0 = $4;
  label$11 : {
   if (HEAP8[$4 + 51 | 0] & 1) {
    $1 = 1;
    if (!HEAPU8[HEAP32[$4 + 52 >> 2]]) {
     break label$11;
    }
   }
   $1 = (jsvStringIteratorGetChar($4 + 16 | 0) & 255) == HEAPU8[HEAP32[$4 + 52 >> 2]];
  }
  HEAP8[$0 + 15 | 0] = $1;
  jsvStringIteratorFree($4 + 16 | 0);
  HEAP8[$4 + 63 | 0] = HEAP8[$4 + 15 | 0] & 1;
 }
 global$0 = $4 - -64 | 0;
 return HEAP8[$4 + 63 | 0] & 1;
}
function tflite__ops__micro__pooling___28anonymous_20namespace_29__MaxEvalQuantizedInt8_28TfLiteContext__2c_20TfLiteNode__2c_20TfLitePoolParams__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = global$0 - 144 | 0;
 global$0 = $6;
 $7 = $6 + 40 | 0;
 HEAP32[$6 + 140 >> 2] = $0;
 HEAP32[$6 + 136 >> 2] = $1;
 HEAP32[$6 + 132 >> 2] = $2;
 HEAP32[$6 + 128 >> 2] = $3;
 HEAP32[$6 + 124 >> 2] = $4;
 HEAP32[$6 + 120 >> 2] = $5;
 tflite__CalculateActivationRangeInt8_28TfLiteFusedActivation_2c_20TfLiteTensor__2c_20int__2c_20int__29(HEAP32[HEAP32[$6 + 132 >> 2] + 20 >> 2], HEAP32[$6 + 120 >> 2], $6 + 116 | 0, $6 + 112 | 0);
 HEAP32[$6 + 76 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 8 >> 2];
 HEAP32[$6 + 80 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 4 >> 2];
 HEAP32[$6 + 84 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 16 >> 2];
 HEAP32[$6 + 88 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 12 >> 2];
 HEAP16[$6 + 68 >> 1] = HEAP32[HEAP32[$6 + 128 >> 2] + 4 >> 2];
 HEAP16[$6 + 66 >> 1] = HEAP32[HEAP32[$6 + 128 >> 2] >> 2];
 HEAP32[$6 + 92 >> 2] = HEAP32[$6 + 116 >> 2];
 HEAP32[$6 + 96 >> 2] = HEAP32[$6 + 112 >> 2];
 tflite__GetTensorShape_28TfLiteTensor_20const__29($7, HEAP32[$6 + 124 >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$6 + 124 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($6 + 8 | 0, HEAP32[$6 + 120 >> 2]);
 tflite__reference_integer_ops__MaxPool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($6 - -64 | 0, $6 + 40 | 0, $0, $6 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$6 + 120 >> 2]));
 $0 = $6 + 40 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($6 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $6 + 144 | 0;
}
function _jswrap_array_reverse_block($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 144 | 0;
 global$0 = $3;
 HEAP32[$3 + 140 >> 2] = $0;
 HEAP32[$3 + 136 >> 2] = $1;
 HEAP32[$3 + 132 >> 2] = $2;
 $0 = $3 + 40 | 0;
 jsvIteratorClone($3 + 88 | 0, HEAP32[$3 + 136 >> 2]);
 jsvIteratorClone($0, HEAP32[$3 + 136 >> 2]);
 HEAP32[$3 + 36 >> 2] = (HEAP32[$3 + 132 >> 2] + 1 | 0) / 2;
 while (1) {
  if (HEAP32[$3 + 36 >> 2] > 0) {
   jsvIteratorNext($3 + 40 | 0);
   HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 36 >> 2] + -1;
   continue;
  }
  break;
 }
 if (HEAP32[$3 + 132 >> 2] > 3) {
  $0 = $3 + 40 | 0;
  _jswrap_array_reverse_block(HEAP32[$3 + 140 >> 2], $3 + 88 | 0, HEAP32[$3 + 132 >> 2] / 2 | 0);
  _jswrap_array_reverse_block(HEAP32[$3 + 140 >> 2], $0, HEAP32[$3 + 132 >> 2] / 2 | 0);
 }
 HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 132 >> 2] / 2;
 while (1) {
  if (HEAP32[$3 + 36 >> 2] > 0) {
   $0 = $3 + 40 | 0;
   $1 = $3 + 88 | 0;
   HEAP32[$3 + 32 >> 2] = jsvIteratorGetValue($1);
   HEAP32[$3 + 28 >> 2] = jsvIteratorGetValue($0);
   jsvIteratorSetValue($1, HEAP32[$3 + 28 >> 2]);
   jsvIteratorSetValue($0, HEAP32[$3 + 32 >> 2]);
   jsvUnLock2(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2]);
   if (jsvIsArray(HEAP32[$3 + 140 >> 2]) & 1) {
    $0 = $3 + 40 | 0;
    HEAP32[$3 + 24 >> 2] = jsvIteratorGetKey($3 + 88 | 0);
    HEAP32[$3 + 20 >> 2] = jsvIteratorGetKey($0);
    HEAP32[$3 + 16 >> 2] = jsvGetInteger(HEAP32[$3 + 24 >> 2]);
    HEAP32[$3 + 12 >> 2] = jsvGetInteger(HEAP32[$3 + 20 >> 2]);
    jsvSetInteger(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 12 >> 2]);
    jsvSetInteger(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
    jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
   }
   $0 = $3 + 40 | 0;
   jsvIteratorNext($3 + 88 | 0);
   jsvIteratorNext($0);
   HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 36 >> 2] + -1;
   continue;
  }
  break;
 }
 $0 = $3 + 40 | 0;
 jsvIteratorFree($3 + 88 | 0);
 jsvIteratorFree($0);
 global$0 = $3 + 144 | 0;
}
function tflite__ops__micro__pooling___28anonymous_20namespace_29__MaxEvalQuantizedUInt8_28TfLiteContext__2c_20TfLiteNode__2c_20TfLitePoolParams__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = global$0 - 144 | 0;
 global$0 = $6;
 $7 = $6 + 40 | 0;
 HEAP32[$6 + 140 >> 2] = $0;
 HEAP32[$6 + 136 >> 2] = $1;
 HEAP32[$6 + 132 >> 2] = $2;
 HEAP32[$6 + 128 >> 2] = $3;
 HEAP32[$6 + 124 >> 2] = $4;
 HEAP32[$6 + 120 >> 2] = $5;
 tflite__CalculateActivationRangeUint8_28TfLiteFusedActivation_2c_20TfLiteTensor__2c_20int__2c_20int__29(HEAP32[HEAP32[$6 + 132 >> 2] + 20 >> 2], HEAP32[$6 + 120 >> 2], $6 + 116 | 0, $6 + 112 | 0);
 HEAP32[$6 + 76 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 8 >> 2];
 HEAP32[$6 + 80 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 4 >> 2];
 HEAP32[$6 + 84 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 16 >> 2];
 HEAP32[$6 + 88 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 12 >> 2];
 HEAP16[$6 + 68 >> 1] = HEAP32[HEAP32[$6 + 128 >> 2] + 4 >> 2];
 HEAP16[$6 + 66 >> 1] = HEAP32[HEAP32[$6 + 128 >> 2] >> 2];
 HEAP32[$6 + 92 >> 2] = HEAP32[$6 + 116 >> 2];
 HEAP32[$6 + 96 >> 2] = HEAP32[$6 + 112 >> 2];
 tflite__GetTensorShape_28TfLiteTensor_20const__29($7, HEAP32[$6 + 124 >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$6 + 124 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($6 + 8 | 0, HEAP32[$6 + 120 >> 2]);
 tflite__reference_ops__MaxPool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($6 - -64 | 0, $6 + 40 | 0, $0, $6 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$6 + 120 >> 2]));
 $0 = $6 + 40 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($6 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $6 + 144 | 0;
}
function memmove($0, $1, $2) {
 var $3 = 0, $4 = 0;
 label$1 : {
  if (($0 | 0) == ($1 | 0)) {
   break label$1;
  }
  label$2 : {
   if ($1 + $2 >>> 0 > $0 >>> 0) {
    $4 = $0 + $2 | 0;
    if ($4 >>> 0 > $1 >>> 0) {
     break label$2;
    }
   }
   memcpy($0, $1, $2);
   return;
  }
  $3 = ($0 ^ $1) & 3;
  label$4 : {
   label$5 : {
    if ($0 >>> 0 < $1 >>> 0) {
     if ($3) {
      break label$4;
     }
     if (!($0 & 3)) {
      break label$5;
     }
     while (1) {
      if (!$2) {
       break label$1;
      }
      HEAP8[$0 | 0] = HEAPU8[$1 | 0];
      $1 = $1 + 1 | 0;
      $2 = $2 + -1 | 0;
      $0 = $0 + 1 | 0;
      if ($0 & 3) {
       continue;
      }
      break;
     }
     break label$5;
    }
    label$8 : {
     if ($3) {
      break label$8;
     }
     if ($4 & 3) {
      while (1) {
       if (!$2) {
        break label$1;
       }
       $2 = $2 + -1 | 0;
       $3 = $2 + $0 | 0;
       HEAP8[$3 | 0] = HEAPU8[$1 + $2 | 0];
       if ($3 & 3) {
        continue;
       }
       break;
      }
     }
     if ($2 >>> 0 <= 3) {
      break label$8;
     }
     while (1) {
      $2 = $2 + -4 | 0;
      HEAP32[$2 + $0 >> 2] = HEAP32[$1 + $2 >> 2];
      if ($2 >>> 0 > 3) {
       continue;
      }
      break;
     }
    }
    if (!$2) {
     break label$1;
    }
    while (1) {
     $2 = $2 + -1 | 0;
     HEAP8[$2 + $0 | 0] = HEAPU8[$1 + $2 | 0];
     if ($2) {
      continue;
     }
     break;
    }
    break label$1;
   }
   if ($2 >>> 0 <= 3) {
    break label$4;
   }
   $3 = $2;
   while (1) {
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
    $1 = $1 + 4 | 0;
    $0 = $0 + 4 | 0;
    $3 = $3 + -4 | 0;
    if ($3 >>> 0 > 3) {
     continue;
    }
    break;
   }
   $2 = $2 & 3;
  }
  if (!$2) {
   break label$1;
  }
  while (1) {
   HEAP8[$0 | 0] = HEAPU8[$1 | 0];
   $0 = $0 + 1 | 0;
   $1 = $1 + 1 | 0;
   $2 = $2 + -1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
}
function tflite__ops__micro__pooling___28anonymous_20namespace_29__AverageEvalFloat_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20TfLitePoolParams_20const__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = global$0 - 144 | 0;
 global$0 = $6;
 $7 = $6 + 40 | 0;
 HEAP32[$6 + 140 >> 2] = $0;
 HEAP32[$6 + 136 >> 2] = $1;
 HEAP32[$6 + 132 >> 2] = $2;
 HEAP32[$6 + 128 >> 2] = $3;
 HEAP32[$6 + 124 >> 2] = $4;
 HEAP32[$6 + 120 >> 2] = $5;
 void_20tflite__CalculateActivationRange_float__28TfLiteFusedActivation_2c_20float__2c_20float__29(HEAP32[HEAP32[$6 + 132 >> 2] + 20 >> 2], $6 + 116 | 0, $6 + 112 | 0);
 HEAP32[$6 + 76 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 8 >> 2];
 HEAP32[$6 + 80 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 4 >> 2];
 HEAP32[$6 + 84 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 16 >> 2];
 HEAP32[$6 + 88 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 12 >> 2];
 HEAP16[$6 + 68 >> 1] = HEAP32[HEAP32[$6 + 128 >> 2] + 4 >> 2];
 HEAP16[$6 + 66 >> 1] = HEAP32[HEAP32[$6 + 128 >> 2] >> 2];
 HEAPF32[$6 + 100 >> 2] = HEAPF32[$6 + 116 >> 2];
 HEAPF32[$6 + 104 >> 2] = HEAPF32[$6 + 112 >> 2];
 tflite__GetTensorShape_28TfLiteTensor_20const__29($7, HEAP32[$6 + 124 >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$6 + 124 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($6 + 8 | 0, HEAP32[$6 + 120 >> 2]);
 tflite__reference_ops__AveragePool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($6 - -64 | 0, $6 + 40 | 0, $0, $6 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$6 + 120 >> 2]));
 $0 = $6 + 40 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($6 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $6 + 144 | 0;
}
function jsvGetFloat($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 80 | 0;
 global$0 = $1;
 HEAP32[$1 + 68 >> 2] = $0;
 label$1 : {
  if (!HEAP32[$1 + 68 >> 2]) {
   HEAPF64[$1 + 72 >> 3] = nan;
   break label$1;
  }
  if (jsvIsFloat(HEAP32[$1 + 68 >> 2]) & 1) {
   $0 = HEAP32[$1 + 68 >> 2];
   $2 = HEAP32[$0 + 4 >> 2];
   wasm2js_scratch_store_i32(0, HEAP32[$0 >> 2]);
   wasm2js_scratch_store_i32(1, $2 | 0);
   HEAPF64[$1 + 72 >> 3] = wasm2js_scratch_load_f64();
   break label$1;
  }
  if (jsvIsIntegerish(HEAP32[$1 + 68 >> 2]) & 1) {
   HEAPF64[$1 + 72 >> 3] = HEAP32[HEAP32[$1 + 68 >> 2] >> 2];
   break label$1;
  }
  label$5 : {
   if (!(jsvIsArray(HEAP32[$1 + 68 >> 2]) & 1)) {
    if (!(jsvIsArrayBuffer(HEAP32[$1 + 68 >> 2]) & 1)) {
     break label$5;
    }
   }
   HEAP32[$1 + 64 >> 2] = jsvGetLength(HEAP32[$1 + 68 >> 2]);
   if (!HEAP32[$1 + 64 >> 2]) {
    HEAPF64[$1 + 72 >> 3] = 0;
    break label$1;
   }
   if (HEAP32[$1 + 64 >> 2] == 1) {
    if (jsvIsArrayBuffer(HEAP32[$1 + 68 >> 2]) & 1) {
     HEAPF64[$1 + 72 >> 3] = jsvGetFloatAndUnLock(jsvArrayBufferGet(HEAP32[$1 + 68 >> 2], 0));
     break label$1;
    }
    HEAPF64[$1 + 72 >> 3] = jsvGetFloatAndUnLock(jsvSkipNameAndUnLock(jsvGetArrayItem(HEAP32[$1 + 68 >> 2], 0)));
    break label$1;
   }
  }
  if (jsvIsString(HEAP32[$1 + 68 >> 2]) & 1) {
   label$11 : {
    if ((jsvGetString(HEAP32[$1 + 68 >> 2], $1, 64) | 0) == 64) {
     jsExceptionHere(1, 2712, 0);
     break label$11;
    }
    if (!HEAP8[$1 | 0]) {
     HEAPF64[$1 + 72 >> 3] = 0;
     break label$1;
    }
    if (!strcmp($1, 2748)) {
     HEAPF64[$1 + 72 >> 3] = infinity;
     break label$1;
    }
    if (!strcmp($1, 2757)) {
     HEAPF64[$1 + 72 >> 3] = -infinity;
     break label$1;
    }
    HEAPF64[$1 + 72 >> 3] = stringToFloat($1);
    break label$1;
   }
  }
  HEAPF64[$1 + 72 >> 3] = nan;
 }
 global$0 = $1 + 80 | 0;
 return +HEAPF64[$1 + 72 >> 3];
}
function jsserialEventCallback($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP8[$2 + 47 | 0] = $0;
 HEAP8[$2 + 46 | 0] = $1;
 HEAP32[$2 + 40 >> 2] = jsserialGetSerialList(0);
 label$1 : {
  if (!HEAP32[$2 + 40 >> 2]) {
   break label$1;
  }
  HEAP32[$2 + 36 >> 2] = jsvGetArrayItem(HEAP32[$2 + 40 >> 2], HEAPU8[$2 + 46 | 0]);
  if (!HEAP32[$2 + 36 >> 2]) {
   break label$1;
  }
  HEAP32[$2 + 32 >> 2] = jsvObjectGetChild(HEAP32[$2 + 36 >> 2], 7755, 0);
  HEAP32[$2 + 28 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 32 >> 2]);
  if (!HEAP32[$2 + 28 >> 2]) {
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = jshGetSystemTime();
  HEAP32[$2 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$2 + 16 >> 2];
  $1 = HEAP32[$2 + 28 >> 2];
  $3 = HEAP32[$1 + 72 >> 2];
  $1 = HEAP32[$2 + 20 >> 2] - (($0 >>> 0 < $3 >>> 0) + HEAP32[$1 + 76 >> 2] | 0) | 0;
  HEAP32[$2 + 8 >> 2] = $0 - $3;
  HEAP32[$2 + 12 >> 2] = $1;
  $1 = HEAP32[$2 + 20 >> 2];
  $0 = HEAP32[$2 + 28 >> 2];
  HEAP32[$0 + 72 >> 2] = HEAP32[$2 + 16 >> 2];
  HEAP32[$0 + 76 >> 2] = $1;
  HEAP8[$2 + 7 | 0] = (HEAPU8[$2 + 47 | 0] ^ -1) & 1;
  $0 = $2;
  $4 = jshGetMillisecondsFromTime(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]) * +HEAP32[HEAP32[$2 + 28 >> 2] + 80 >> 2] / 1e3 + .5;
  label$2 : {
   if (Math_abs($4) < 2147483648) {
    $1 = ~~$4;
    break label$2;
   }
   $1 = -2147483648;
  }
  HEAP32[$0 >> 2] = $1;
  if (!(HEAPU8[HEAP32[$2 + 28 >> 2] + 88 | 0] | !(HEAP8[$2 + 7 | 0] & 1)) | HEAP32[$2 >> 2] > 12) {
   break label$1;
  }
  if (HEAP8[$2 + 7 | 0] & 1) {
   $0 = HEAP32[$2 + 28 >> 2];
   HEAP32[$0 + 84 >> 2] = HEAP32[$0 + 84 >> 2] | (1 << HEAP32[$2 >> 2]) - 1 << HEAPU8[HEAP32[$2 + 28 >> 2] + 88 | 0];
  }
  $0 = HEAP32[$2 + 28 >> 2];
  HEAP8[$0 + 88 | 0] = HEAP32[$2 >> 2] + HEAPU8[$0 + 88 | 0];
  jsserialCheckForCharacter(HEAP32[$2 + 28 >> 2]);
 }
 global$0 = $2 + 48 | 0;
}
function lcdGetPixelIndex_ArrayBuffer($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 $0 = HEAP32[$4 + 24 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 1) {
  if (HEAP32[$4 + 16 >> 2] & 1) {
   $0 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 20 >> 2] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - (HEAP32[$4 + 20 >> 2] + HEAP32[$4 + 12 >> 2] | 0);
  }
 }
 $0 = HEAP32[$4 + 24 >> 2];
 label$3 : {
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 8) {
   $0 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 8 >> 2] = (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) >> 1;
   HEAP32[$4 + 4 >> 2] = 0;
   if (HEAP32[$4 + 16 >> 2] >= HEAP32[$4 + 8 >> 2]) {
    HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 16 >> 2] - HEAP32[$4 + 8 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAPU8[HEAP32[$4 + 24 >> 2] + 16 | 0];
   }
   $0 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 4 >> 2] + Math_imul(HEAP32[$4 + 20 >> 2] + Math_imul(HEAP32[$4 + 16 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) | 0, HEAPU8[HEAP32[$4 + 24 >> 2] + 16 | 0] << 1);
   break label$3;
  }
  $0 = HEAP32[$4 + 24 >> 2];
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 2) {
   $0 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 16 >> 2] & 7 | HEAP32[$4 + 20 >> 2] + Math_imul(HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8, HEAP32[$4 + 16 >> 2] >> 3) << 3;
   break label$3;
  }
  $0 = HEAP32[$4 + 24 >> 2];
  HEAP32[$4 + 28 >> 2] = Math_imul(HEAPU8[HEAP32[$4 + 24 >> 2] + 16 | 0], HEAP32[$4 + 20 >> 2] + Math_imul(HEAP32[$4 + 16 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) | 0);
 }
 return HEAP32[$4 + 28 >> 2];
}
function nmea_to_jsVar() {
 var $0 = 0, $1 = 0;
 $0 = global$0 + -64 | 0;
 global$0 = $0;
 HEAP32[$0 + 60 >> 2] = 251352;
 HEAP32[$0 + 56 >> 2] = jsvNewWithFlags(5);
 if (HEAP32[$0 + 56 >> 2]) {
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 56 >> 2], 1024, jsvNewFromFloat(HEAPF64[HEAP32[$0 + 60 >> 2] >> 3]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 56 >> 2], 1028, jsvNewFromFloat(HEAPF64[HEAP32[$0 + 60 >> 2] + 8 >> 3]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 56 >> 2], 1032, jsvNewFromFloat(HEAPF64[HEAP32[$0 + 60 >> 2] + 16 >> 3]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 56 >> 2], 1036, jsvNewFromFloat(HEAPF64[HEAP32[$0 + 60 >> 2] + 24 >> 3]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 56 >> 2], 1042, jsvNewFromFloat(HEAPF64[HEAP32[$0 + 60 >> 2] + 32 >> 3]));
  label$2 : {
   if (HEAPU8[HEAP32[$0 + 60 >> 2] + 56 | 0]) {
    $1 = $0 + 8 | 0;
    HEAP32[$0 + 36 >> 2] = HEAPU8[HEAP32[$0 + 60 >> 2] + 56 | 0];
    HEAP32[$0 + 40 >> 2] = HEAPU8[HEAP32[$0 + 60 >> 2] + 57 | 0] - 1;
    HEAP32[$0 + 44 >> 2] = HEAPU8[HEAP32[$0 + 60 >> 2] + 58 | 0] + 2e3;
    HEAP32[$0 + 8 >> 2] = fromCalenderDate($0 + 32 | 0);
    HEAP32[$0 + 24 >> 2] = HEAP32[HEAP32[$0 + 60 >> 2] + 40 >> 2];
    HEAP32[$0 + 20 >> 2] = HEAP32[HEAP32[$0 + 60 >> 2] + 44 >> 2];
    HEAP32[$0 + 16 >> 2] = HEAP32[HEAP32[$0 + 60 >> 2] + 48 >> 2];
    HEAP32[$0 + 12 >> 2] = HEAP32[HEAP32[$0 + 60 >> 2] + 52 >> 2];
    HEAP32[$0 + 28 >> 2] = 0;
    jsvObjectSetChildAndUnLock(HEAP32[$0 + 56 >> 2], 1049, jswrap_date_from_milliseconds(fromTimeInDay($1)));
    break label$2;
   }
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 56 >> 2], 1049, 0);
  }
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 56 >> 2], 1054, jsvNewFromInteger(HEAPU8[HEAP32[$0 + 60 >> 2] + 60 | 0]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 56 >> 2], 1065, jsvNewFromInteger(HEAPU8[HEAP32[$0 + 60 >> 2] + 59 | 0]));
 }
 global$0 = $0 - -64 | 0;
 return HEAP32[$0 + 56 >> 2];
}
function jsvFindChildFromString($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP8[$3 + 19 | 0] = $2;
 HEAP8[$3 + 15 | 0] = HEAPU8[HEAP32[$3 + 20 >> 2]];
 label$1 : {
  if (HEAPU8[HEAP32[$3 + 20 >> 2]]) {
   HEAP8[$3 + 16 | 0] = HEAPU8[HEAP32[$3 + 20 >> 2] + 1 | 0];
   label$3 : {
    if (HEAPU8[HEAP32[$3 + 20 >> 2] + 1 | 0]) {
     HEAP8[$3 + 17 | 0] = HEAPU8[HEAP32[$3 + 20 >> 2] + 2 | 0];
     label$5 : {
      if (HEAPU8[HEAP32[$3 + 20 >> 2] + 2 | 0]) {
       HEAP8[$3 + 18 | 0] = HEAPU8[HEAP32[$3 + 20 >> 2] + 3 | 0];
       break label$5;
      }
      HEAP8[$3 + 18 | 0] = 0;
     }
     break label$3;
    }
    HEAP8[$3 + 17 | 0] = 0;
    HEAP8[$3 + 18 | 0] = 0;
   }
   break label$1;
  }
  HEAP8[$3 + 16 | 0] = 0;
  HEAP8[$3 + 17 | 0] = 0;
  HEAP8[$3 + 18 | 0] = 0;
 }
 HEAP16[$3 + 12 >> 1] = jsvGetFirstChild(HEAP32[$3 + 24 >> 2]);
 label$7 : {
  while (1) {
   if (HEAPU16[$3 + 12 >> 1]) {
    HEAP32[$3 + 8 >> 2] = jsvGetAddressOf(HEAPU16[$3 + 12 >> 1]);
    label$10 : {
     if (HEAP32[HEAP32[$3 + 8 >> 2] >> 2] != (HEAPU8[$3 + 15 | 0] | HEAPU8[$3 + 16 | 0] << 8 | (HEAPU8[$3 + 17 | 0] << 16 | HEAPU8[$3 + 18 | 0] << 24))) {
      break label$10;
     }
     if (!(jsvIsStringEqual(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 20 >> 2]) & 1)) {
      break label$10;
     }
     HEAP32[$3 + 28 >> 2] = jsvLockAgain(HEAP32[$3 + 8 >> 2]);
     break label$7;
    }
    HEAP16[$3 + 12 >> 1] = jsvGetNextSibling(HEAP32[$3 + 8 >> 2]);
    continue;
   }
   break;
  }
  HEAP32[$3 + 4 >> 2] = 0;
  if (HEAP8[$3 + 19 | 0] & 1) {
   HEAP32[$3 + 4 >> 2] = jsvMakeIntoVariableName(jsvNewFromString(HEAP32[$3 + 20 >> 2]), 0);
   if (HEAP32[$3 + 4 >> 2]) {
    jsvAddName(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 4 >> 2]);
   }
  }
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 4 >> 2];
 }
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function _jsvTraceGetLowestLevel($0, $1) {
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1 : {
  if (HEAP32[$2 + 40 >> 2] == HEAP32[$2 + 36 >> 2]) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 32 >> 2] = -1;
  if (HEAPU16[HEAP32[$2 + 40 >> 2] + 14 >> 1] & 256) {
   HEAP32[$2 + 44 >> 2] = -1;
   break label$1;
  }
  $0 = HEAP32[$2 + 40 >> 2];
  HEAP16[$0 + 14 >> 1] = HEAPU16[$0 + 14 >> 1] | 256;
  label$4 : {
   if (!(jsvHasSingleChild(HEAP32[$2 + 40 >> 2]) & 1)) {
    break label$4;
   }
   if (!(jsvGetFirstChild(HEAP32[$2 + 40 >> 2]) & 65535)) {
    break label$4;
   }
   HEAP32[$2 + 28 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 40 >> 2]) & 65535);
   HEAP32[$2 + 24 >> 2] = _jsvTraceGetLowestLevel(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 36 >> 2]);
   jsvUnLock(HEAP32[$2 + 28 >> 2]);
   if (!(HEAP32[$2 + 24 >> 2] < 0 | (HEAP32[$2 + 24 >> 2] >= HEAP32[$2 + 32 >> 2] ? HEAP32[$2 + 32 >> 2] >= 0 : 0))) {
    HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 24 >> 2] + 1;
   }
  }
  if (jsvHasChildren(HEAP32[$2 + 40 >> 2]) & 1) {
   HEAP16[$2 + 22 >> 1] = jsvGetFirstChild(HEAP32[$2 + 40 >> 2]);
   while (1) {
    if (HEAPU16[$2 + 22 >> 1]) {
     HEAP32[$2 + 16 >> 2] = jsvLock(HEAPU16[$2 + 22 >> 1]);
     HEAP32[$2 + 12 >> 2] = _jsvTraceGetLowestLevel(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 36 >> 2]);
     if (!(HEAP32[$2 + 12 >> 2] < 0 | (HEAP32[$2 + 12 >> 2] >= HEAP32[$2 + 32 >> 2] ? HEAP32[$2 + 32 >> 2] >= 0 : 0))) {
      HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
     }
     HEAP16[$2 + 22 >> 1] = jsvGetNextSibling(HEAP32[$2 + 16 >> 2]);
     jsvUnLock(HEAP32[$2 + 16 >> 2]);
     continue;
    }
    break;
   }
  }
  $0 = HEAP32[$2 + 40 >> 2];
  HEAP16[$0 + 14 >> 1] = HEAPU16[$0 + 14 >> 1] & -257;
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
 }
 global$0 = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}
function jsiCheckErrors() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 48 | 0;
 global$0 = $0;
 if (HEAP8[95196] & 1) {
  jspSetInterrupted(0);
  HEAP8[95196] = 0;
  jsiConsoleRemoveInputLine();
  jsiConsolePrintString(5740);
 }
 HEAP8[$0 + 47 | 0] = 0;
 HEAP32[$0 + 40 >> 2] = jspGetException();
 if (HEAP32[$0 + 40 >> 2]) {
  if (jsiExecuteEventCallbackOn(5788, 5796, 1, $0 + 40 | 0) & 1) {
   jsvUnLock(HEAP32[$0 + 40 >> 2]);
   HEAP32[$0 + 40 >> 2] = 0;
  }
 }
 if (HEAP32[$0 + 40 >> 2]) {
  jsiConsoleRemoveInputLine();
  HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 40 >> 2];
  jsiConsolePrintf(5817, $0 + 16 | 0);
  HEAP8[$0 + 47 | 0] = 1;
  if (jsvIsObject(HEAP32[$0 + 40 >> 2]) & 1) {
   HEAP32[$0 + 36 >> 2] = jsvObjectGetChild(HEAP32[$0 + 40 >> 2], 5830, 0);
   if (HEAP32[$0 + 36 >> 2]) {
    jsiConsolePrintStringVar(HEAP32[$0 + 36 >> 2]);
    jsvUnLock(HEAP32[$0 + 36 >> 2]);
   }
  }
  jsvUnLock(HEAP32[$0 + 40 >> 2]);
 }
 if (!(!(jspIsInterrupted() & 1) | HEAPU16[47566] & 16)) {
  jsiConsoleRemoveInputLine();
  jsiConsolePrintString(5836);
  jspSetInterrupted(0);
  HEAP8[$0 + 47 | 0] = 1;
 }
 HEAP32[$0 + 32 >> 2] = jspGetStackTrace();
 if (HEAP32[$0 + 32 >> 2]) {
  if (HEAP8[$0 + 47 | 0] & 1) {
   jsiConsolePrintStringVar(HEAP32[$0 + 32 >> 2]);
  }
  jsvUnLock(HEAP32[$0 + 32 >> 2]);
 }
 if (jspHasError() & 1) {
  HEAP32[23778] = HEAP32[23778] & -113;
 }
 if (HEAPU8[95151] != HEAPU8[95095]) {
  HEAP8[$0 + 31 | 0] = HEAPU8[95095] & (HEAPU8[95151] ^ -1);
  if (HEAPU8[$0 + 31 | 0] & -9) {
   $1 = $0 + 24 | 0;
   HEAP32[$0 + 24 >> 2] = jswrap_espruino_getErrorFlagArray(HEAPU8[$0 + 31 | 0]);
   jsiExecuteEventCallbackOn(5267, 5859, 1, $1);
   if (HEAP32[$0 + 24 >> 2]) {
    jsiConsoleRemoveInputLine();
    HEAP32[$0 >> 2] = HEAP32[$0 + 24 >> 2];
    jsiConsolePrintf(5872, $0);
    jsvUnLock(HEAP32[$0 + 24 >> 2]);
   }
  }
  HEAP8[95151] = HEAPU8[95095];
 }
 global$0 = $0 + 48 | 0;
}
function tflite__ops__micro__strided_slice__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 96 | 0;
 global$0 = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP32[$2 + 84 >> 2] = $1;
 label$1 : {
  if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 84 >> 2]) | 0) != 4) {
   $0 = HEAP32[HEAP32[$2 + 88 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 88 >> 2];
   $3 = tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 84 >> 2]);
   HEAP32[$2 + 20 >> 2] = 4;
   HEAP32[$2 + 16 >> 2] = $3;
   HEAP32[$2 + 12 >> 2] = 47957;
   HEAP32[$2 + 8 >> 2] = 47941;
   HEAP32[$2 + 4 >> 2] = 124;
   HEAP32[$2 >> 2] = 47766;
   FUNCTION_TABLE[$0]($1, 47740, $2);
   HEAP32[$2 + 92 >> 2] = 1;
   break label$1;
  }
  if ((tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 84 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 88 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 88 >> 2];
   $3 = tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 84 >> 2]);
   HEAP32[$2 + 52 >> 2] = 1;
   HEAP32[$2 + 48 >> 2] = $3;
   HEAP32[$2 + 44 >> 2] = 47976;
   HEAP32[$2 + 40 >> 2] = 47959;
   HEAP32[$2 + 36 >> 2] = 125;
   HEAP32[$2 + 32 >> 2] = 47766;
   FUNCTION_TABLE[$0]($1, 47740, $2 + 32 | 0);
   HEAP32[$2 + 92 >> 2] = 1;
   break label$1;
  }
  tflite__ops__micro__strided_slice__StridedSliceContext__StridedSliceContext_28TfLiteContext__2c_20TfLiteNode__29($2 + 56 | 0, HEAP32[$2 + 88 >> 2], HEAP32[$2 + 84 >> 2]);
  if (HEAP32[$2 + 80 >> 2] > 4) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 + 88 >> 2] + 20 >> 2]](HEAP32[$2 + 88 >> 2], 47978, 0);
   HEAP32[$2 + 92 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 92 >> 2] = tflite__ops__micro__strided_slice__CheckOutputSize_28TfLiteContext__2c_20tflite__ops__micro__strided_slice__StridedSliceContext__29(HEAP32[$2 + 88 >> 2], $2 + 56 | 0);
 }
 global$0 = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}
function tflite__ops__micro__pooling___28anonymous_20namespace_29__MaxEvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLitePoolParams__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = global$0 - 144 | 0;
 global$0 = $6;
 $7 = $6 + 40 | 0;
 HEAP32[$6 + 140 >> 2] = $0;
 HEAP32[$6 + 136 >> 2] = $1;
 HEAP32[$6 + 132 >> 2] = $2;
 HEAP32[$6 + 128 >> 2] = $3;
 HEAP32[$6 + 124 >> 2] = $4;
 HEAP32[$6 + 120 >> 2] = $5;
 void_20tflite__CalculateActivationRange_float__28TfLiteFusedActivation_2c_20float__2c_20float__29(HEAP32[HEAP32[$6 + 132 >> 2] + 20 >> 2], $6 + 116 | 0, $6 + 112 | 0);
 HEAP32[$6 + 76 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 8 >> 2];
 HEAP32[$6 + 80 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 4 >> 2];
 HEAP32[$6 + 84 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 16 >> 2];
 HEAP32[$6 + 88 >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] + 12 >> 2];
 HEAP16[$6 + 68 >> 1] = HEAP32[HEAP32[$6 + 128 >> 2] + 4 >> 2];
 HEAP16[$6 + 66 >> 1] = HEAP32[HEAP32[$6 + 128 >> 2] >> 2];
 HEAPF32[$6 + 100 >> 2] = HEAPF32[$6 + 116 >> 2];
 HEAPF32[$6 + 104 >> 2] = HEAPF32[$6 + 112 >> 2];
 tflite__GetTensorShape_28TfLiteTensor_20const__29($7, HEAP32[$6 + 124 >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$6 + 124 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($6 + 8 | 0, HEAP32[$6 + 120 >> 2]);
 tflite__reference_ops__MaxPool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($6 - -64 | 0, $6 + 40 | 0, $0, $6 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$6 + 120 >> 2]));
 $0 = $6 + 40 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($6 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $6 + 144 | 0;
}
function graphicsFallbackScrollX($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 label$1 : {
  if (HEAP32[$4 + 24 >> 2] <= 0) {
   $0 = HEAP32[$4 + 28 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 24 >> 2] + (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
   HEAP32[$4 + 12 >> 2] = 0;
   while (1) {
    if (HEAP32[$4 + 12 >> 2] < HEAP32[$4 + 8 >> 2]) {
     $0 = HEAP32[$4 + 28 >> 2];
     $1 = HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24);
     $0 = HEAP32[$4 + 28 >> 2];
     FUNCTION_TABLE[$1](HEAP32[$4 + 28 >> 2], HEAP32[$4 + 12 >> 2], HEAP32[$4 + 16 >> 2], FUNCTION_TABLE[HEAPU8[$0 + 60 | 0] | HEAPU8[$0 + 61 | 0] << 8 | (HEAPU8[$0 + 62 | 0] << 16 | HEAPU8[$0 + 63 | 0] << 24)](HEAP32[$4 + 28 >> 2], HEAP32[$4 + 12 >> 2] - HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 20 >> 2]) | 0);
     HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   break label$1;
  }
  $0 = HEAP32[$4 + 28 >> 2];
  HEAP32[$4 + 12 >> 2] = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - HEAP32[$4 + 24 >> 2] | 0) - 1;
  while (1) {
   if (HEAP32[$4 + 12 >> 2] >= 0) {
    $0 = HEAP32[$4 + 28 >> 2];
    $1 = HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24);
    $0 = HEAP32[$4 + 28 >> 2];
    FUNCTION_TABLE[$1](HEAP32[$4 + 28 >> 2], HEAP32[$4 + 12 >> 2] + HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 16 >> 2], FUNCTION_TABLE[HEAPU8[$0 + 60 | 0] | HEAPU8[$0 + 61 | 0] << 8 | (HEAPU8[$0 + 62 | 0] << 16 | HEAPU8[$0 + 63 | 0] << 24)](HEAP32[$4 + 28 >> 2], HEAP32[$4 + 12 >> 2], HEAP32[$4 + 20 >> 2]) | 0);
    HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + -1;
    continue;
   }
   break;
  }
 }
 global$0 = $4 + 32 | 0;
}
function _jswrap_interface_clearTimeoutOrInterval($0, $1) {
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP8[$2 + 43 | 0] = $1;
 HEAP32[$2 + 36 >> 2] = jsvLock(HEAPU16[47564]);
 label$1 : {
  label$2 : {
   if (!(jsvIsUndefined(HEAP32[$2 + 44 >> 2]) & 1)) {
    if (jsvGetArrayLength(HEAP32[$2 + 44 >> 2])) {
     break label$2;
    }
   }
   jsvObjectIteratorNew($2 + 32 | 0, HEAP32[$2 + 36 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue($2 + 32 | 0) & 1) {
     HEAP32[$2 + 28 >> 2] = jsvObjectIteratorGetValue($2 + 32 | 0);
     HEAP32[$2 + 24 >> 2] = jsvObjectGetChild(HEAP32[$2 + 28 >> 2], 33245, 0);
     label$6 : {
      if (!HEAP32[$2 + 24 >> 2]) {
       jsvObjectIteratorRemoveAndGotoNext($2 + 32 | 0, HEAP32[$2 + 36 >> 2]);
       break label$6;
      }
      jsvObjectIteratorNext($2 + 32 | 0);
     }
     jsvUnLock2(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 28 >> 2]);
     continue;
    }
    break;
   }
   jsvObjectIteratorFree($2 + 32 | 0);
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = jsvGetArrayItem(HEAP32[$2 + 44 >> 2], 0);
  label$8 : {
   if (jsvIsUndefined(HEAP32[$2 + 20 >> 2]) & 1) {
    HEAP32[$2 + 16 >> 2] = HEAP8[$2 + 43 | 0] & 1 ? 33251 : 33259;
    $0 = HEAP32[$2 + 16 >> 2];
    HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 16 >> 2];
    HEAP32[$2 >> 2] = $0;
    jsExceptionHere(1, 33268, $2);
    break label$8;
   }
   $0 = $2;
   label$10 : {
    if (jsvIsBasic(HEAP32[$2 + 20 >> 2]) & 1) {
     $1 = jsvFindChildFromVar(HEAP32[$2 + 36 >> 2], HEAP32[$2 + 20 >> 2], 0);
     break label$10;
    }
    $1 = 0;
   }
   HEAP32[$0 + 12 >> 2] = $1;
   if (HEAP32[$2 + 12 >> 2]) {
    jsvRemoveChild(HEAP32[$2 + 36 >> 2], HEAP32[$2 + 12 >> 2]);
    jsvUnLock(HEAP32[$2 + 12 >> 2]);
   }
   jsvUnLock(HEAP32[$2 + 20 >> 2]);
  }
 }
 jsvUnLock(HEAP32[$2 + 36 >> 2]);
 jsiTimersChanged();
 global$0 = $2 + 48 | 0;
}
function jswrap_espruino_convolve($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 144 | 0;
 global$0 = $3;
 HEAP32[$3 + 132 >> 2] = $0;
 HEAP32[$3 + 128 >> 2] = $1;
 HEAP32[$3 + 124 >> 2] = $2;
 label$1 : {
  label$2 : {
   if (jsvIsIterable(HEAP32[$3 + 132 >> 2]) & 1) {
    if (jsvIsIterable(HEAP32[$3 + 128 >> 2]) & 1) {
     break label$2;
    }
   }
   $0 = HEAP32[$3 + 132 >> 2];
   HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 128 >> 2];
   HEAP32[$3 >> 2] = $0;
   jsExceptionHere(1, 31787, $3);
   HEAPF64[$3 + 136 >> 3] = nan;
   break label$1;
  }
  $0 = $3 + 16 | 0;
  HEAPF64[$3 + 112 >> 3] = 0;
  jsvIteratorNew($3 - -64 | 0, HEAP32[$3 + 132 >> 2], 1);
  jsvIteratorNew($0, HEAP32[$3 + 128 >> 2], 1);
  HEAP32[$3 + 12 >> 2] = jsvGetLength(HEAP32[$3 + 128 >> 2]);
  HEAP32[$3 + 124 >> 2] = HEAP32[$3 + 124 >> 2] % HEAP32[$3 + 12 >> 2];
  if (HEAP32[$3 + 124 >> 2] < 0) {
   HEAP32[$3 + 124 >> 2] = HEAP32[$3 + 12 >> 2] + HEAP32[$3 + 124 >> 2];
  }
  while (1) {
   label$6 : {
    $0 = HEAP32[$3 + 124 >> 2];
    HEAP32[$3 + 124 >> 2] = $0 + -1;
    if (($0 | 0) <= 0) {
     break label$6;
    }
    jsvIteratorNext($3 + 16 | 0);
    continue;
   }
   break;
  }
  while (1) {
   if (jsvIteratorHasElement($3 - -64 | 0) & 1) {
    $0 = $3 + 16 | 0;
    $1 = $3 - -64 | 0;
    $4 = jsvIteratorGetFloatValue($1) * jsvIteratorGetFloatValue($0);
    HEAPF64[$3 + 112 >> 3] = HEAPF64[$3 + 112 >> 3] + $4;
    jsvIteratorNext($1);
    jsvIteratorNext($0);
    if (!(jsvIteratorHasElement($0) & 1)) {
     $0 = $3 + 16 | 0;
     jsvIteratorFree($0);
     jsvIteratorNew($0, HEAP32[$3 + 128 >> 2], 1);
    }
    continue;
   }
   break;
  }
  $0 = $3 + 16 | 0;
  jsvIteratorFree($3 - -64 | 0);
  jsvIteratorFree($0);
  HEAPF64[$3 + 136 >> 3] = HEAPF64[$3 + 112 >> 3];
 }
 global$0 = $3 + 144 | 0;
 return +HEAPF64[$3 + 136 >> 3];
}
function jswrap_i2c_writeTo($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 48 | 0;
 $3 = $4;
 global$0 = $3;
 $5 = $3 + 24 | 0;
 $6 = $3 + 34 | 0;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 HEAP8[$3 + 35 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 44 >> 2]);
 HEAP8[$3 + 34 | 0] = 1;
 HEAP32[$3 + 28 >> 2] = i2c_get_address(HEAP32[$3 + 40 >> 2], $6);
 HEAP32[$3 + 24 >> 2] = 0;
 HEAP32[$3 + 20 >> 2] = jsvGetDataPointer(HEAP32[$3 + 36 >> 2], $5);
 if (!HEAP32[$3 + 20 >> 2]) {
  HEAP32[$3 + 24 >> 2] = jsvIterateCallbackCount(HEAP32[$3 + 36 >> 2]);
  label$2 : {
   if (HEAP32[$3 + 24 >> 2] + 256 >>> 0 > 1e6) {
    jsExceptionHere(1, 37227, 0);
    break label$2;
   }
   $0 = $4 - (HEAP32[$3 + 24 >> 2] + 15 & -16) | 0;
   global$0 = $0;
   HEAP32[$3 + 20 >> 2] = $0;
   jsvIterateCallbackToBytes(HEAP32[$3 + 36 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 24 >> 2]);
  }
 }
 if (!(!HEAP32[$3 + 20 >> 2] | !HEAP32[$3 + 24 >> 2])) {
  label$5 : {
   if (!(HEAPU8[$3 + 35 | 0] < 25 | HEAPU8[$3 + 35 | 0] > 25)) {
    jshI2CWrite(HEAPU8[$3 + 35 | 0], HEAP32[$3 + 28 >> 2] & 255, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP8[$3 + 34 | 0] & 1);
    break label$5;
   }
   if (!HEAPU8[$3 + 35 | 0]) {
    $0 = $3 + 8 | 0;
    HEAP32[$3 + 4 >> 2] = jsvObjectGetChild(HEAP32[$3 + 44 >> 2], 37088, 0);
    if (jsi2cPopulateI2CInfo($0, HEAP32[$3 + 4 >> 2]) & 1) {
     $0 = $3 + 8 | 0;
     HEAP8[$3 + 14 | 0] = jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$3 + 44 >> 2], 37266, 0)) & 1;
     jsi2cWrite($0, HEAP32[$3 + 28 >> 2] & 255, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP8[$3 + 34 | 0] & 1);
    }
    jsvUnLock2(jsvObjectSetChild(HEAP32[$3 + 44 >> 2], 37266, jsvNewFromBool(HEAP8[$3 + 14 | 0] & 1)), HEAP32[$3 + 4 >> 2]);
   }
  }
 }
 global$0 = $3 + 48 | 0;
}
function jswrap_date_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 80 | 0;
 global$0 = $1;
 HEAP32[$1 + 76 >> 2] = $0;
 HEAPF64[$1 + 64 >> 3] = 0;
 label$1 : {
  if (!jsvGetArrayLength(HEAP32[$1 + 76 >> 2])) {
   HEAPF64[$1 + 64 >> 3] = jswrap_date_now();
   break label$1;
  }
  label$3 : {
   if ((jsvGetArrayLength(HEAP32[$1 + 76 >> 2]) | 0) == 1) {
    HEAP32[$1 + 60 >> 2] = jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 0);
    label$5 : {
     if (jsvIsNumeric(HEAP32[$1 + 60 >> 2]) & 1) {
      HEAPF64[$1 + 64 >> 3] = jsvGetFloat(HEAP32[$1 + 60 >> 2]);
      break label$5;
     }
     label$7 : {
      if (jsvIsString(HEAP32[$1 + 60 >> 2]) & 1) {
       HEAPF64[$1 + 64 >> 3] = jswrap_date_parse(HEAP32[$1 + 60 >> 2]);
       break label$7;
      }
      HEAP32[$1 >> 2] = HEAP32[$1 + 60 >> 2];
      jsExceptionHere(3, 31350, $1);
     }
    }
    jsvUnLock(HEAP32[$1 + 60 >> 2]);
    break label$3;
   }
   $0 = $1 + 16 | 0;
   $2 = $1 + 40 | 0;
   HEAP32[$1 + 52 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 0));
   HEAP32[$1 + 48 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 1));
   HEAP32[$1 + 44 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 2));
   HEAP32[$1 + 16 >> 2] = fromCalenderDate($2);
   HEAP32[$1 + 32 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 3));
   HEAP32[$1 + 28 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 4));
   HEAP32[$1 + 24 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 5));
   HEAP32[$1 + 20 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 6));
   HEAP32[$1 + 36 >> 2] = jsdGetTimeZone();
   HEAPF64[$1 + 64 >> 3] = fromTimeInDay($0);
  }
 }
 $0 = jswrap_date_from_milliseconds(HEAPF64[$1 + 64 >> 3]);
 global$0 = $1 + 80 | 0;
 return $0 | 0;
}
function lcdST7789_setCallbacks($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 if (HEAP32[24392]) {
  label$2 : {
   if (!(HEAP32[24392] != 4 ? HEAP32[24392] != 3 : 0)) {
    $2 = $1 + 16 | 0;
    HEAP32[$1 + 24 >> 2] = HEAP32[24392] == 3 ? 14400 : 6400;
    $0 = HEAP32[$1 + 28 >> 2];
    HEAP32[$1 + 20 >> 2] = jsvObjectGetChild(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 27691, 0);
    HEAP32[$1 + 16 >> 2] = 0;
    HEAP32[$1 + 12 >> 2] = jsvGetDataPointer(HEAP32[$1 + 20 >> 2], $2);
    jsvUnLock(HEAP32[$1 + 20 >> 2]);
    if (!(!HEAP32[$1 + 12 >> 2] | HEAPU32[$1 + 16 >> 2] < HEAPU32[$1 + 24 >> 2])) {
     $0 = HEAP32[$1 + 28 >> 2];
     $2 = HEAP32[$1 + 12 >> 2];
     HEAP8[$0 + 48 | 0] = $2;
     HEAP8[$0 + 49 | 0] = $2 >>> 8;
     HEAP8[$0 + 50 | 0] = $2 >>> 16;
     HEAP8[$0 + 51 | 0] = $2 >>> 24;
     $0 = HEAP32[$1 + 28 >> 2];
     HEAP8[$0 + 52 | 0] = 493;
     HEAP8[$0 + 53 | 0] = 1;
     HEAP8[$0 + 54 | 0] = 0;
     HEAP8[$0 + 55 | 0] = 0;
     $0 = HEAP32[$1 + 28 >> 2];
     HEAP8[$0 + 60 | 0] = 492;
     HEAP8[$0 + 61 | 0] = 1;
     HEAP8[$0 + 62 | 0] = 0;
     HEAP8[$0 + 63 | 0] = 0;
     $0 = HEAP32[$1 + 28 >> 2];
     HEAP8[$0 + 56 | 0] = 491;
     HEAP8[$0 + 57 | 0] = 1;
     HEAP8[$0 + 58 | 0] = 0;
     HEAP8[$0 + 59 | 0] = 0;
     $0 = HEAP32[$1 + 28 >> 2];
     HEAP8[$0 + 64 | 0] = 490;
     HEAP8[$0 + 65 | 0] = 1;
     HEAP8[$0 + 66 | 0] = 0;
     HEAP8[$0 + 67 | 0] = 0;
    }
    break label$2;
   }
   $0 = HEAP32[$1 + 28 >> 2];
   HEAP8[$0 + 52 | 0] = 502;
   HEAP8[$0 + 53 | 0] = 1;
   HEAP8[$0 + 54 | 0] = 0;
   HEAP8[$0 + 55 | 0] = 0;
   $0 = HEAP32[$1 + 28 >> 2];
   HEAP8[$0 + 64 | 0] = 501;
   HEAP8[$0 + 65 | 0] = 1;
   HEAP8[$0 + 66 | 0] = 0;
   HEAP8[$0 + 67 | 0] = 0;
  }
 }
 global$0 = $1 + 32 | 0;
}
function jswrap_io_digitalPulse($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 112 | 0;
 global$0 = $3;
 HEAP8[$3 + 111 | 0] = $0;
 HEAP8[$3 + 110 | 0] = $1;
 HEAP32[$3 + 104 >> 2] = $2;
 label$1 : {
  if (jsvIsNumeric(HEAP32[$3 + 104 >> 2]) & 1) {
   HEAPF64[$3 + 96 >> 3] = jsvGetFloat(HEAP32[$3 + 104 >> 2]);
   label$3 : {
    label$4 : {
     label$5 : {
      if (HEAPF64[$3 + 96 >> 3] < 0) {
       break label$5;
      }
      $0 = __DOUBLE_BITS(HEAPF64[$3 + 96 >> 3]);
      $1 = i64toi32_i32$HIGH_BITS & 2147483647;
      if (($1 | 0) == 2146435072 & $0 >>> 0 > 0 | $1 >>> 0 > 2146435072) {
       break label$5;
      }
      break label$4;
     }
     jsExceptionHere(1, 33360, 0);
     break label$3;
    }
    jshPinPulse(HEAPU8[$3 + 111 | 0], HEAP8[$3 + 110 | 0] & 1, HEAPF64[$3 + 96 >> 3]);
   }
   break label$1;
  }
  label$6 : {
   if (jsvIsIterable(HEAP32[$3 + 104 >> 2]) & 1) {
    jsvIteratorNew($3 + 48 | 0, HEAP32[$3 + 104 >> 2], 1);
    while (1) {
     if (jsvIteratorHasElement($3 + 48 | 0) & 1) {
      HEAPF64[$3 + 40 >> 3] = jsvIteratorGetFloatValue($3 + 48 | 0);
      label$10 : {
       if (!(HEAPF64[$3 + 40 >> 3] >= 0)) {
        break label$10;
       }
       $0 = __DOUBLE_BITS(HEAPF64[$3 + 40 >> 3]);
       $1 = i64toi32_i32$HIGH_BITS & 2147483647;
       if (($1 | 0) == 2146435072 & $0 >>> 0 > 0 | $1 >>> 0 > 2146435072) {
        break label$10;
       }
       jshPinPulse(HEAPU8[$3 + 111 | 0], HEAP8[$3 + 110 | 0] & 1, HEAPF64[$3 + 40 >> 3]);
      }
      HEAP8[$3 + 110 | 0] = (HEAPU8[$3 + 110 | 0] ^ -1) & 1;
      jsvIteratorNext($3 + 48 | 0);
      continue;
     }
     break;
    }
    jsvIteratorFree($3 + 48 | 0);
    break label$6;
   }
   HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 104 >> 2];
   jsExceptionHere(1, 33426, $3 + 32 | 0);
  }
 }
 global$0 = $3 + 112 | 0;
}
function jshPopIOEventOfType($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 14 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 label$1 : {
  if (HEAPU8[$2 + 14 | 0] == (HEAPU8[Math_imul(HEAPU8[95203], 5) + 95792 | 0] & 31)) {
   HEAP8[$2 + 15 | 0] = jshPopIOEvent(HEAP32[$2 + 8 >> 2]) & 1;
   break label$1;
  }
  HEAP8[$2 + 7 | 0] = HEAPU8[95203];
  while (1) {
   if (HEAPU8[95202] != HEAPU8[$2 + 7 | 0]) {
    if (HEAPU8[$2 + 14 | 0] == (HEAPU8[Math_imul(HEAPU8[$2 + 7 | 0], 5) + 95792 | 0] & 31)) {
     $0 = HEAP32[$2 + 8 >> 2];
     $1 = Math_imul(HEAPU8[$2 + 7 | 0], 5) + 95792 | 0;
     $3 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
     HEAP8[$0 | 0] = $3;
     HEAP8[$0 + 1 | 0] = $3 >>> 8;
     HEAP8[$0 + 2 | 0] = $3 >>> 16;
     HEAP8[$0 + 3 | 0] = $3 >>> 24;
     HEAP8[$0 + 4 | 0] = HEAPU8[$1 + 4 | 0];
     HEAP8[$2 + 6 | 0] = HEAPU8[$2 + 7 | 0] + 255;
     while (1) {
      if (HEAPU8[$2 + 6 | 0] != HEAPU8[95203]) {
       $0 = Math_imul(HEAPU8[$2 + 7 | 0], 5) + 95792 | 0;
       $1 = Math_imul(HEAPU8[$2 + 6 | 0], 5) + 95792 | 0;
       $3 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
       HEAP8[$0 | 0] = $3;
       HEAP8[$0 + 1 | 0] = $3 >>> 8;
       HEAP8[$0 + 2 | 0] = $3 >>> 16;
       HEAP8[$0 + 3 | 0] = $3 >>> 24;
       HEAP8[$0 + 4 | 0] = HEAPU8[$1 + 4 | 0];
       HEAP8[$2 + 7 | 0] = HEAPU8[$2 + 6 | 0];
       HEAP8[$2 + 6 | 0] = HEAPU8[$2 + 6 | 0] + 255;
       continue;
      }
      break;
     }
     HEAP8[95203] = HEAPU8[95203] + 1;
     HEAP8[$2 + 15 | 0] = 1;
     break label$1;
    } else {
     HEAP8[$2 + 7 | 0] = HEAPU8[$2 + 7 | 0] + 1;
     continue;
    }
   }
   break;
  }
  HEAP8[$2 + 15 | 0] = 0;
 }
 global$0 = $2 + 16 | 0;
 return HEAP8[$2 + 15 | 0] & 1;
}
function jswrap_espruino_getSizeOf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1 : {
  label$2 : {
   if (HEAP32[$2 + 36 >> 2] <= 0) {
    break label$2;
   }
   if (!(jsvHasChildren(HEAP32[$2 + 40 >> 2]) & 1)) {
    break label$2;
   }
   HEAP32[$2 + 32 >> 2] = jsvNewWithFlags(3);
   if (!HEAP32[$2 + 32 >> 2]) {
    HEAP32[$2 + 44 >> 2] = 0;
    break label$1;
   }
   jsvObjectIteratorNew($2 + 24 | 0, HEAP32[$2 + 40 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue($2 + 24 | 0) & 1) {
     HEAP32[$2 + 20 >> 2] = jsvObjectIteratorGetKey($2 + 24 | 0);
     HEAP32[$2 + 16 >> 2] = jsvSkipName(HEAP32[$2 + 20 >> 2]);
     HEAP32[$2 + 12 >> 2] = jsvNewWithFlags(5);
     if (HEAP32[$2 + 12 >> 2]) {
      jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 32165, jsvAsString(HEAP32[$2 + 20 >> 2]));
      jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 32170, jswrap_espruino_getSizeOf(HEAP32[$2 + 20 >> 2], 0));
      label$7 : {
       if (HEAP32[$2 + 36 >> 2] <= 1) {
        break label$7;
       }
       if (!(jsvHasChildren(HEAP32[$2 + 16 >> 2]) & 1)) {
        break label$7;
       }
       jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 32175, jswrap_espruino_getSizeOf(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 36 >> 2] - 1 | 0));
      }
      jsvArrayPushAndUnLock(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 12 >> 2]);
     }
     $0 = $2 + 24 | 0;
     jsvUnLock2(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2]);
     jsvObjectIteratorNext($0);
     continue;
    }
    break;
   }
   jsvObjectIteratorFree($2 + 24 | 0);
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
   break label$1;
  }
  HEAP32[$2 + 44 >> 2] = jsvNewFromInteger(jsvCountJsVarsUsed(HEAP32[$2 + 40 >> 2]));
 }
 global$0 = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}
function jsserialEventCallbackInit($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = jsvNewFlatStringOfLength(96);
 label$1 : {
  if (!HEAP32[$2 + 16 >> 2]) {
   jsExceptionHere(1, 7717, 0);
   HEAP8[$2 + 31 | 0] = 0;
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 7755, HEAP32[$2 + 16 >> 2]);
  HEAP32[$2 + 12 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 16 >> 2]);
  HEAP8[HEAP32[$2 + 12 >> 2] + 64 | 0] = 0;
  $0 = jshGetSystemTime();
  $1 = HEAP32[$2 + 12 >> 2];
  HEAP32[$1 + 72 >> 2] = $0;
  HEAP32[$1 + 76 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$2 + 20 >> 2];
  HEAP32[HEAP32[$2 + 12 >> 2] + 80 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
  HEAP32[HEAP32[$2 + 12 >> 2] + 84 >> 2] = 0;
  HEAP8[HEAP32[$2 + 12 >> 2] + 88 | 0] = 0;
  HEAP8[HEAP32[$2 + 12 >> 2] + 89 | 0] = (HEAPU8[HEAP32[$2 + 20 >> 2] + 8 | 0] + HEAPU8[HEAP32[$2 + 20 >> 2] + 10 | 0] | 0) + (HEAPU8[HEAP32[$2 + 20 >> 2] + 9 | 0] ? 1 : 0);
  HEAP8[$2 + 11 | 0] = jshPinWatch(HEAPU8[HEAP32[$2 + 20 >> 2] + 4 | 0], 1);
  label$3 : {
   if (HEAPU8[$2 + 11 | 0]) {
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 7763, jsvNewFromInteger(HEAPU8[$2 + 11 | 0]));
    HEAP32[$2 + 4 >> 2] = jsserialGetSerialList(1);
    if (!HEAP32[$2 + 4 >> 2]) {
     HEAP8[$2 + 31 | 0] = 0;
     break label$1;
    }
    jsvSetArrayItem(HEAP32[$2 + 4 >> 2], HEAPU8[$2 + 11 | 0], HEAP32[$2 + 24 >> 2]);
    jsvUnLock(HEAP32[$2 + 4 >> 2]);
    jshSetEventCallback(HEAPU8[$2 + 11 | 0], 18);
    break label$3;
   }
   HEAP32[$2 >> 2] = HEAPU8[HEAP32[$2 + 20 >> 2] + 4 | 0];
   jsExceptionHere(1, 7768, $2);
   HEAP8[$2 + 31 | 0] = 0;
   break label$1;
  }
  HEAP8[$2 + 31 | 0] = 1;
 }
 global$0 = $2 + 32 | 0;
}
function heatshrink_decoder_poll($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = 128;
 HEAP32[$3 + 28 >> 2] = $2;
 label$1 : {
  if (!(HEAP32[$3 + 28 >> 2] ? !(!HEAP32[$3 + 40 >> 2] | !HEAP32[$3 + 36 >> 2]) : 0)) {
   HEAP32[$3 + 44 >> 2] = -1;
   break label$1;
  }
  HEAP32[HEAP32[$3 + 28 >> 2] >> 2] = 0;
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 36 >> 2];
  HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 32 >> 2];
  HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 28 >> 2];
  while (1) {
   HEAP8[$3 + 15 | 0] = HEAPU8[HEAP32[$3 + 40 >> 2] + 10 | 0];
   label$5 : {
    $0 = HEAPU8[$3 + 15 | 0];
    if ($0 >>> 0 <= 6) {
     label$7 : {
      switch ($0 - 1 | 0) {
      default:
       $0 = st_tag_bit(HEAP32[$3 + 40 >> 2]);
       break label$5;
      case 0:
       $0 = st_yield_literal_1(HEAP32[$3 + 40 >> 2], $3 + 16 | 0);
       break label$5;
      case 1:
       $0 = st_backref_index_msb(HEAP32[$3 + 40 >> 2]);
       break label$5;
      case 2:
       $0 = st_backref_index_lsb(HEAP32[$3 + 40 >> 2]);
       break label$5;
      case 3:
       $0 = st_backref_count_msb(HEAP32[$3 + 40 >> 2]);
       break label$5;
      case 4:
       $0 = st_backref_count_lsb(HEAP32[$3 + 40 >> 2]);
       break label$5;
      case 5:
       break label$7;
      }
     }
     $0 = st_yield_backref(HEAP32[$3 + 40 >> 2], $3 + 16 | 0);
     break label$5;
    }
    HEAP32[$3 + 44 >> 2] = -2;
    break label$1;
   }
   HEAP8[HEAP32[$3 + 40 >> 2] + 10 | 0] = $0;
   if (HEAPU8[HEAP32[$3 + 40 >> 2] + 10 | 0] != HEAPU8[$3 + 15 | 0]) {
    continue;
   }
   break;
  }
  if (HEAP32[HEAP32[$3 + 28 >> 2] >> 2] == HEAP32[$3 + 32 >> 2]) {
   HEAP32[$3 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$3 + 44 >> 2] = 0;
 }
 global$0 = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}
function jsvNewStringOfLength($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1 : {
  if (HEAPU32[$2 + 24 >> 2] > 22) {
   HEAP32[$2 + 16 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 24 >> 2]);
   if (HEAP32[$2 + 16 >> 2]) {
    if (HEAP32[$2 + 20 >> 2]) {
     jsvSetString(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 24 >> 2]);
    }
    HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
    break label$1;
   }
  }
  HEAP32[$2 + 12 >> 2] = jsvNewWithFlags(27);
  if (!HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 8 >> 2] = jsvLockAgain(HEAP32[$2 + 12 >> 2]);
  while (1) {
   label$7 : {
    HEAP32[$2 + 4 >> 2] = jsvGetMaxCharactersInVar(HEAP32[$2 + 8 >> 2]);
    if (HEAPU32[$2 + 4 >> 2] >= HEAPU32[$2 + 24 >> 2]) {
     if (HEAP32[$2 + 20 >> 2]) {
      memcpy(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 24 >> 2]);
     }
     jsvSetCharactersInVar(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 24 >> 2]);
     break label$7;
    }
    if (HEAP32[$2 + 20 >> 2]) {
     memcpy(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 4 >> 2]);
     HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 4 >> 2] + HEAP32[$2 + 20 >> 2];
    }
    jsvSetCharactersInVar(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
    HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] - HEAP32[$2 + 4 >> 2];
    HEAP32[$2 >> 2] = jsvNewWithFlags(40);
    if (!HEAP32[$2 >> 2]) {
     break label$7;
    }
    jsvSetLastChild(HEAP32[$2 + 8 >> 2], jsvGetRef(HEAP32[$2 >> 2]) & 65535);
    jsvUnLock(HEAP32[$2 + 8 >> 2]);
    HEAP32[$2 + 8 >> 2] = HEAP32[$2 >> 2];
    continue;
   }
   break;
  }
  jsvUnLock(HEAP32[$2 + 8 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function jswrap_math_mod($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 HEAPF64[$2 + 64 >> 3] = $0;
 HEAPF64[$2 + 56 >> 3] = $1;
 HEAPF64[$2 + 32 >> 3] = HEAPF64[$2 + 64 >> 3];
 $4 = __DOUBLE_BITS(HEAPF64[$2 + 64 >> 3]);
 label$1 : {
  label$2 : {
   label$3 : {
    $3 = i64toi32_i32$HIGH_BITS & 2147483647;
    if (($3 | 0) == 2146435072 & $4 >>> 0 >= 0 | $3 >>> 0 > 2146435072) {
     break label$3;
    }
    $4 = __DOUBLE_BITS(HEAPF64[$2 + 56 >> 3]);
    $3 = i64toi32_i32$HIGH_BITS & 2147483647;
    if (($3 | 0) == 2146435072 & $4 >>> 0 > 0 | $3 >>> 0 > 2146435072) {
     break label$3;
    }
    break label$2;
   }
   HEAPF64[$2 + 72 >> 3] = nan;
   break label$1;
  }
  if (0 > HEAPF64[$2 + 32 >> 3]) {
   HEAPF64[$2 + 64 >> 3] = -HEAPF64[$2 + 64 >> 3];
  }
  if (0 > HEAPF64[$2 + 56 >> 3]) {
   HEAPF64[$2 + 56 >> 3] = -HEAPF64[$2 + 56 >> 3];
  }
  label$7 : {
   if (!(!(1.7976931348623157e+308 >= HEAPF64[$2 + 64 >> 3]) | (!(1.7976931348623157e+308 >= HEAPF64[$2 + 56 >> 3]) | HEAPF64[$2 + 56 >> 3] == 0))) {
    while (1) {
     if (HEAPF64[$2 + 64 >> 3] >= HEAPF64[$2 + 56 >> 3]) {
      HEAPF64[$2 + 48 >> 3] = HEAPF64[$2 + 64 >> 3] / 2;
      HEAPF64[$2 + 40 >> 3] = HEAPF64[$2 + 56 >> 3];
      while (1) {
       if (HEAPF64[$2 + 48 >> 3] >= HEAPF64[$2 + 40 >> 3]) {
        HEAPF64[$2 + 40 >> 3] = HEAPF64[$2 + 40 >> 3] * 2;
        continue;
       }
       break;
      }
      HEAPF64[$2 + 64 >> 3] = HEAPF64[$2 + 64 >> 3] - HEAPF64[$2 + 40 >> 3];
      continue;
     }
     break;
    }
    break label$7;
   }
   HEAPF64[$2 + 64 >> 3] = 0;
  }
  $3 = $2;
  if (0 > HEAPF64[$2 + 32 >> 3]) {
   $0 = -HEAPF64[$2 + 64 >> 3];
  } else {
   $0 = HEAPF64[$2 + 64 >> 3];
  }
  HEAPF64[$3 + 72 >> 3] = $0;
 }
 global$0 = $2 + 80 | 0;
 return HEAPF64[$2 + 72 >> 3];
}
function find_longest_match($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 48 | 0;
 HEAP32[$5 + 40 >> 2] = $0;
 HEAP16[$5 + 38 >> 1] = $1;
 HEAP16[$5 + 36 >> 1] = $2;
 HEAP16[$5 + 34 >> 1] = $3;
 HEAP32[$5 + 28 >> 2] = $4;
 HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 40 >> 2] + 15;
 HEAP16[$5 + 22 >> 1] = 0;
 HEAP16[$5 + 20 >> 1] = 65535;
 HEAP16[$5 + 18 >> 1] = 0;
 HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 24 >> 2] + HEAPU16[$5 + 36 >> 1];
 HEAP16[$5 + 10 >> 1] = HEAPU16[$5 + 36 >> 1] - 1;
 while (1) {
  label$2 : {
   if ((HEAP16[$5 + 10 >> 1] - HEAP16[$5 + 38 >> 1] | 0) < 0) {
    break label$2;
   }
   HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 24 >> 2] + HEAP16[$5 + 10 >> 1];
   if (!(HEAPU8[HEAP32[$5 + 4 >> 2] + HEAPU16[$5 + 22 >> 1] | 0] != HEAPU8[HEAP32[$5 + 12 >> 2] + HEAPU16[$5 + 22 >> 1] | 0] | HEAPU8[HEAP32[$5 + 4 >> 2]] != HEAPU8[HEAP32[$5 + 12 >> 2]])) {
    HEAP16[$5 + 18 >> 1] = 1;
    while (1) {
     if (!(HEAPU8[HEAP32[$5 + 4 >> 2] + HEAPU16[$5 + 18 >> 1] | 0] != HEAPU8[HEAP32[$5 + 12 >> 2] + HEAPU16[$5 + 18 >> 1] | 0] | HEAPU16[$5 + 18 >> 1] >= HEAPU16[$5 + 34 >> 1])) {
      HEAP16[$5 + 18 >> 1] = HEAPU16[$5 + 18 >> 1] + 1;
      continue;
     }
     break;
    }
    if (HEAPU16[$5 + 18 >> 1] > HEAPU16[$5 + 22 >> 1]) {
     HEAP16[$5 + 22 >> 1] = HEAPU16[$5 + 18 >> 1];
     HEAP16[$5 + 20 >> 1] = HEAPU16[$5 + 10 >> 1];
     if (HEAPU16[$5 + 18 >> 1] == HEAPU16[$5 + 34 >> 1]) {
      break label$2;
     }
    }
   }
   HEAP16[$5 + 10 >> 1] = HEAPU16[$5 + 10 >> 1] + -1;
   continue;
  }
  break;
 }
 HEAP32[$5 >> 2] = 15;
 label$7 : {
  if (HEAPU16[$5 + 22 >> 1] > 1) {
   HEAP16[HEAP32[$5 + 28 >> 2] >> 1] = HEAPU16[$5 + 22 >> 1];
   HEAP16[$5 + 46 >> 1] = HEAPU16[$5 + 36 >> 1] - HEAPU16[$5 + 20 >> 1];
   break label$7;
  }
  HEAP16[$5 + 46 >> 1] = 65535;
 }
 return HEAPU16[$5 + 46 >> 1];
}
function jswrap_onewire_select($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 HEAP32[$2 + 60 >> 2] = $0;
 HEAP32[$2 + 56 >> 2] = $1;
 HEAP8[$2 + 55 | 0] = onewire_getpin(HEAP32[$2 + 60 >> 2]);
 label$1 : {
  if (!(jshIsPinValid(HEAPU8[$2 + 55 | 0]) & 1)) {
   break label$1;
  }
  label$2 : {
   if (jsvIsString(HEAP32[$2 + 56 >> 2]) & 1) {
    if ((jsvGetStringLength(HEAP32[$2 + 56 >> 2]) | 0) == 16) {
     break label$2;
    }
   }
   HEAP32[$2 >> 2] = HEAP32[$2 + 56 >> 2];
   jsExceptionHere(3, 35857, $2);
   break label$1;
  }
  $0 = $2 + 16 | 0;
  OneWireReset(HEAPU8[$2 + 55 | 0]);
  HEAP32[$2 + 40 >> 2] = 0;
  HEAP32[$2 + 44 >> 2] = 0;
  jsvStringIteratorNew($0, HEAP32[$2 + 56 >> 2], 0);
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 12 >> 2] < 8) {
    $0 = $2 + 9 | 0;
    $1 = $2 + 16 | 0;
    HEAP8[$2 + 9 | 0] = jsvStringIteratorGetCharAndNext($1);
    HEAP8[$2 + 10 | 0] = jsvStringIteratorGetCharAndNext($1);
    HEAP8[$2 + 11 | 0] = 0;
    $1 = HEAP32[$2 + 40 >> 2];
    $6 = HEAP32[$2 + 44 >> 2];
    $4 = stringToIntWithRadix($0, 16, 0, 0);
    $0 = $2;
    $7 = $2;
    $8 = $1;
    $3 = i64toi32_i32$HIGH_BITS;
    $5 = HEAP32[$2 + 12 >> 2] << 3;
    $1 = $5 & 31;
    if (32 <= ($5 & 63) >>> 0) {
     $3 = $4 << $1;
     $1 = 0;
    } else {
     $3 = (1 << $1) - 1 & $4 >>> 32 - $1 | $3 << $1;
     $1 = $4 << $1;
    }
    HEAP32[$7 + 40 >> 2] = $8 | $1;
    HEAP32[$0 + 44 >> 2] = $3 | $6;
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  jsvStringIteratorFree($2 + 16 | 0);
  OneWireWrite(HEAPU8[$2 + 55 | 0], 8, 85, 0);
  OneWireWrite(HEAPU8[$2 + 55 | 0], 64, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 44 >> 2]);
 }
 global$0 = $2 - -64 | 0;
}
function jslLexRegex() {
 var $0 = 0, $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 $0 = jsvNewFromEmptyString();
 HEAP32[HEAP32[13768] + 96 >> 2] = $0;
 label$1 : {
  if (!HEAP32[HEAP32[13768] + 96 >> 2]) {
   HEAP16[HEAP32[13768] + 2 >> 1] = 0;
   break label$1;
  }
  $0 = $1 + 8 | 0;
  jsvStringIteratorNew($0, HEAP32[HEAP32[13768] + 96 >> 2], 0);
  jsvStringIteratorAppend($0, 47);
  jslGetNextCh();
  while (1) {
   label$4 : {
    if (!(HEAP8[HEAP32[13768]] ? HEAP8[HEAP32[13768]] != 47 : 0)) {
     break label$4;
    }
    label$7 : {
     if (HEAP8[HEAP32[13768]] == 92) {
      jsvStringIteratorAppend($1 + 8 | 0, HEAP8[HEAP32[13768]]);
      jslGetNextCh();
      break label$7;
     }
     if (HEAP8[HEAP32[13768]] == 10) {
      break label$4;
     }
    }
    jsvStringIteratorAppend($1 + 8 | 0, HEAP8[HEAP32[13768]]);
    jslGetNextCh();
    continue;
   }
   break;
  }
  HEAP16[HEAP32[13768] + 2 >> 1] = 135;
  label$9 : {
   if (HEAP8[HEAP32[13768]] != 47) {
    $0 = HEAP32[13768];
    HEAP16[$0 + 2 >> 1] = HEAPU16[$0 + 2 >> 1] + 1;
    break label$9;
   }
   jsvStringIteratorAppend($1 + 8 | 0, 47);
   jslGetNextCh();
   while (1) {
    $0 = 1;
    label$12 : {
     if (HEAP8[HEAP32[13768]] == 103) {
      break label$12;
     }
     $0 = 1;
     if (HEAP8[HEAP32[13768]] == 105) {
      break label$12;
     }
     $0 = 1;
     if (HEAP8[HEAP32[13768]] == 109) {
      break label$12;
     }
     $0 = 1;
     if (HEAP8[HEAP32[13768]] == 121) {
      break label$12;
     }
     $0 = HEAP8[HEAP32[13768]] == 117;
    }
    if ($0) {
     $0 = $1 + 8 | 0;
     jslTokenAppendChar(HEAP8[HEAP32[13768]]);
     jsvStringIteratorAppend($0, HEAP8[HEAP32[13768]]);
     jslGetNextCh();
     continue;
    }
    break;
   }
  }
  jsvStringIteratorFree($1 + 8 | 0);
 }
 global$0 = $1 + 32 | 0;
}
function graphicsFallbackScroll($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 if (HEAP32[$3 + 24 >> 2] | HEAP32[$3 + 20 >> 2]) {
  label$3 : {
   if (HEAP32[$3 + 20 >> 2] <= 0) {
    $0 = HEAP32[$3 + 28 >> 2];
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 20 >> 2] + (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8);
    HEAP32[$3 + 16 >> 2] = 0;
    while (1) {
     if (HEAP32[$3 + 16 >> 2] < HEAP32[$3 + 12 >> 2]) {
      graphicsFallbackScrollX(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 16 >> 2] - HEAP32[$3 + 20 >> 2] | 0, HEAP32[$3 + 16 >> 2]);
      HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
      continue;
     }
     break;
    }
    break label$3;
   }
   $0 = HEAP32[$3 + 28 >> 2];
   HEAP32[$3 + 16 >> 2] = ((HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) - HEAP32[$3 + 20 >> 2] | 0) - 1;
   while (1) {
    if (HEAP32[$3 + 16 >> 2] >= 0) {
     graphicsFallbackScrollX(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 16 >> 2], HEAP32[$3 + 16 >> 2] + HEAP32[$3 + 20 >> 2] | 0);
     HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + -1;
     continue;
    }
    break;
   }
  }
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP8[$0 + 40 | 0] = 0;
  HEAP8[$0 + 41 | 0] = 0;
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP8[$0 + 42 | 0] = 0;
  HEAP8[$0 + 43 | 0] = 0;
  $0 = HEAP32[$3 + 28 >> 2];
  $1 = HEAP32[$3 + 28 >> 2];
  $1 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) - 1 | 0;
  HEAP8[$0 + 44 | 0] = $1;
  HEAP8[$0 + 45 | 0] = $1 >>> 8;
  $0 = HEAP32[$3 + 28 >> 2];
  $1 = HEAP32[$3 + 28 >> 2];
  $1 = (HEAPU8[$1 + 14 | 0] | HEAPU8[$1 + 15 | 0] << 8) - 1 | 0;
  HEAP8[$0 + 46 | 0] = $1;
  HEAP8[$0 + 47 | 0] = $1 >>> 8;
 }
 global$0 = $3 + 32 | 0;
}
function jsvIteratorGetIntegerValue($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[HEAP32[$1 + 8 >> 2] >> 2] + -1 | 0;
 label$1 : {
  if ($0 >>> 0 <= 3) {
   label$3 : {
    switch ($0 - 1 | 0) {
    case 2:
     label$7 : {
      if (!(jsvIsNameInt(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) & 1)) {
       break label$7;
      }
      if ((jsvGetInteger(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) | 0) != HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2]) {
       break label$7;
      }
      HEAP32[$1 + 12 >> 2] = jsvGetFirstChildSigned(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) << 16 >> 16;
      break label$1;
     }
     label$8 : {
      if (!(jsvIsIntegerish(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) & 1)) {
       break label$8;
      }
      if ((jsvGetInteger(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) | 0) != HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2]) {
       break label$8;
      }
      HEAP32[$1 + 12 >> 2] = jsvGetIntegerAndUnLock(jsvObjectIteratorGetValue(HEAP32[$1 + 8 >> 2] + 4 | 0));
      break label$1;
     }
     HEAP32[$1 + 12 >> 2] = 0;
     break label$1;
    case 0:
     if (jsvIsNameInt(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) & 1) {
      HEAP32[$1 + 12 >> 2] = jsvGetFirstChildSigned(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) << 16 >> 16;
      break label$1;
     }
     HEAP32[$1 + 12 >> 2] = jsvGetIntegerAndUnLock(jsvObjectIteratorGetValue(HEAP32[$1 + 8 >> 2] + 4 | 0));
     break label$1;
    default:
     HEAP32[$1 + 12 >> 2] = jsvStringIteratorGetChar(HEAP32[$1 + 8 >> 2] + 4 | 0) << 24 >> 24;
     break label$1;
    case 1:
     break label$3;
    }
   }
   HEAP32[$1 + 12 >> 2] = jsvArrayBufferIteratorGetIntegerValue(HEAP32[$1 + 8 >> 2] + 4 | 0);
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function exp($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 wasm2js_scratch_store_f64(+$0);
 $3 = wasm2js_scratch_load_i32(1) | 0;
 $7 = wasm2js_scratch_load_i32(0) | 0;
 $5 = $3 >>> 31;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     $4 = $0;
     label$5 : {
      label$6 : {
       $2 = $3;
       $3 = $2 & 2147483647;
       label$7 : {
        if ($3 >>> 0 >= 1082532651) {
         $2 = $2 & 2147483647;
         if (($2 | 0) == 2146435072 & $7 >>> 0 > 0 | $2 >>> 0 > 2146435072) {
          return +$0;
         }
         if (!!($0 > 709.782712893384)) {
          return +($0 * 8.98846567431158e+307);
         }
         if (!($0 < -745.1332191019411) | $0 < -708.3964185322641 ^ 1) {
          break label$7;
         }
         break label$2;
        }
        if ($3 >>> 0 < 1071001155) {
         break label$4;
        }
        if ($3 >>> 0 < 1072734898) {
         break label$6;
        }
       }
       $0 = $0 * 1.4426950408889634 + HEAPF64[($5 << 3) + 53312 >> 3];
       if (Math_abs($0) < 2147483648) {
        $2 = ~~$0;
        break label$5;
       }
       $2 = -2147483648;
       break label$5;
      }
      $2 = ($5 ^ 1) - $5 | 0;
     }
     $1 = +($2 | 0);
     $0 = $4 + $1 * -.6931471803691238;
     $6 = $1 * 1.9082149292705877e-10;
     $4 = $0 - $6;
     break label$3;
    }
    if ($3 >>> 0 <= 1043333120) {
     break label$1;
    }
    $2 = 0;
    $4 = $0;
   }
   $1 = $4;
   $8 = $0;
   $1 = $1 * $1;
   $0 = $4 - $1 * ($1 * ($1 * ($1 * ($1 * 4.1381367970572385e-8 + -16533902205465252e-22) + 6613756321437934e-20) + -.0027777777777015593) + .16666666666666602);
   $1 = $8 + ($4 * $0 / (2 - $0) - $6) + 1;
   if (!$2) {
    break label$2;
   }
   $1 = scalbn($1, $2);
  }
  return +$1;
 }
 return +($0 + 1);
}
function jspGetNamedFieldInParents($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP8[$3 + 39 | 0] = $2;
 HEAP32[$3 + 32 >> 2] = jspeiFindChildFromStringInParents(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2]);
 if (!HEAP32[$3 + 32 >> 2]) {
  HEAP32[$3 + 32 >> 2] = jswFindBuiltInFunction(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2]);
 }
 if (!(!HEAP32[$3 + 32 >> 2] | !(HEAP8[$3 + 39 | 0] & 1))) {
  if (jsvIsName(HEAP32[$3 + 32 >> 2]) & 1) {
   HEAP32[$3 + 28 >> 2] = jsvGetValueOfName(HEAP32[$3 + 32 >> 2]);
   jsvUnLock(HEAP32[$3 + 32 >> 2]);
   HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 28 >> 2];
  }
  HEAP32[$3 + 24 >> 2] = jsvNewFromString(HEAP32[$3 + 40 >> 2]);
  HEAP32[$3 + 20 >> 2] = jsvCreateNewChild(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 32 >> 2]);
  jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 32 >> 2]);
  HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 20 >> 2];
 }
 if (!HEAP32[$3 + 32 >> 2]) {
  label$5 : {
   label$6 : {
    if (!(jsvIsFunction(HEAP32[$3 + 44 >> 2]) & 1)) {
     break label$6;
    }
    if (strcmp(HEAP32[$3 + 40 >> 2], 3674)) {
     break label$6;
    }
    HEAP32[$3 + 16 >> 2] = jsvNewWithFlags(5);
    jsvObjectSetChild(HEAP32[$3 + 16 >> 2], 4362, HEAP32[$3 + 44 >> 2]);
    HEAP32[$3 + 32 >> 2] = jsvAddNamedChild(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 16 >> 2], 3674);
    jspEnsureIsPrototype(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2]);
    jsvUnLock(HEAP32[$3 + 16 >> 2]);
    break label$5;
   }
   if (!strcmp(HEAP32[$3 + 40 >> 2], 3684)) {
    HEAP32[$3 + 12 >> 2] = jswGetBasicObjectName(HEAP32[$3 + 44 >> 2]);
    if (HEAP32[$3 + 12 >> 2]) {
     HEAP32[$3 + 32 >> 2] = jspNewPrototype(HEAP32[$3 + 12 >> 2]);
    }
   }
  }
 }
 global$0 = $3 + 48 | 0;
 return HEAP32[$3 + 32 >> 2];
}
function jswrap_graphics_setFontCustom($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = global$0 - 112 | 0;
 global$0 = $5;
 HEAP32[$5 + 104 >> 2] = $0;
 HEAP32[$5 + 100 >> 2] = $1;
 HEAP32[$5 + 96 >> 2] = $2;
 HEAP32[$5 + 92 >> 2] = $3;
 HEAP32[$5 + 88 >> 2] = $4;
 label$1 : {
  if (!(graphicsGetFromVar($5 + 16 | 0, HEAP32[$5 + 104 >> 2]) & 1)) {
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsString(HEAP32[$5 + 100 >> 2]) & 1)) {
   jsExceptionHere(1, 38897, 0);
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  if (!(HEAP32[$5 + 96 >> 2] <= 255 ? HEAP32[$5 + 96 >> 2] >= 0 : 0)) {
   jsExceptionHere(1, 38926, 0);
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  label$6 : {
   if (jsvIsString(HEAP32[$5 + 92 >> 2]) & 1) {
    break label$6;
   }
   if (jsvIsInt(HEAP32[$5 + 92 >> 2]) & 1) {
    break label$6;
   }
   jsExceptionHere(1, 38955, 0);
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 88 >> 2] >> 8;
  if (HEAP32[$5 + 12 >> 2] < 1) {
   HEAP32[$5 + 12 >> 2] = 1;
  }
  $0 = $5 + 16 | 0;
  HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] & 255;
  jsvObjectSetChild(HEAP32[$5 + 104 >> 2], 38877, HEAP32[$5 + 100 >> 2]);
  jsvObjectSetChild(HEAP32[$5 + 104 >> 2], 38882, HEAP32[$5 + 92 >> 2]);
  jsvObjectSetChildAndUnLock(HEAP32[$5 + 104 >> 2], 38887, jsvNewFromInteger(HEAP32[$5 + 88 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$5 + 104 >> 2], 38892, jsvNewFromInteger(HEAP32[$5 + 96 >> 2]));
  $1 = HEAP32[$5 + 12 >> 2] + 24576 | 0;
  HEAP8[$5 + 41 | 0] = $1;
  HEAP8[$5 + 42 | 0] = $1 >>> 8;
  graphicsSetVar($0);
  HEAP32[$5 + 108 >> 2] = jsvLockAgain(HEAP32[$5 + 104 >> 2]);
 }
 global$0 = $5 + 112 | 0;
 return HEAP32[$5 + 108 >> 2];
}
function jswrap_array_reverse($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 112 | 0;
 global$0 = $1;
 HEAP32[$1 + 104 >> 2] = $0;
 label$1 : {
  label$2 : {
   if (jsvIsIterable(HEAP32[$1 + 104 >> 2]) & 1) {
    if (!(jsvIsObject(HEAP32[$1 + 104 >> 2]) & 1)) {
     break label$2;
    }
   }
   HEAP32[$1 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 100 >> 2] = 0;
  label$4 : {
   if (jsvIsArray(HEAP32[$1 + 104 >> 2]) & 1) {
    jsvIteratorNew($1 + 56 | 0, HEAP32[$1 + 104 >> 2], 0);
    while (1) {
     if (jsvIteratorHasElement($1 + 56 | 0) & 1) {
      HEAP32[$1 + 52 >> 2] = jsvIteratorGetKey($1 + 56 | 0);
      if (jsvIsInt(HEAP32[$1 + 52 >> 2]) & 1) {
       HEAP32[$1 + 100 >> 2] = HEAP32[$1 + 100 >> 2] + 1;
      }
      $0 = $1 + 56 | 0;
      jsvUnLock(HEAP32[$1 + 52 >> 2]);
      jsvIteratorNext($0);
      continue;
     }
     break;
    }
    jsvIteratorFree($1 + 56 | 0);
    break label$4;
   }
   HEAP32[$1 + 100 >> 2] = jsvGetLength(HEAP32[$1 + 104 >> 2]);
  }
  jsvIteratorNew($1 + 8 | 0, HEAP32[$1 + 104 >> 2], 0);
  if (HEAP32[$1 + 100 >> 2] > 1) {
   _jswrap_array_reverse_block(HEAP32[$1 + 104 >> 2], $1 + 8 | 0, HEAP32[$1 + 100 >> 2]);
  }
  if (jsvIsArray(HEAP32[$1 + 104 >> 2]) & 1) {
   HEAP32[$1 + 4 >> 2] = jsvGetArrayLength(HEAP32[$1 + 104 >> 2]) - 1;
   while (1) {
    if (jsvIteratorHasElement($1 + 8 | 0) & 1) {
     $0 = $1 + 8 | 0;
     HEAP32[$1 >> 2] = jsvIteratorGetKey($0);
     jsvSetInteger(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2] - jsvGetInteger(HEAP32[$1 >> 2]) | 0);
     jsvUnLock(HEAP32[$1 >> 2]);
     jsvIteratorNext($0);
     continue;
    }
    break;
   }
  }
  jsvIteratorFree($1 + 8 | 0);
  HEAP32[$1 + 108 >> 2] = jsvLockAgain(HEAP32[$1 + 104 >> 2]);
 }
 global$0 = $1 + 112 | 0;
 return HEAP32[$1 + 108 >> 2];
}
function jswGetSymbolListForConstructorProto($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = HEAP32[HEAP32[$1 + 8 >> 2] >> 2];
 label$1 : {
  if (HEAP32[$1 + 4 >> 2] == 22) {
   HEAP32[$1 + 12 >> 2] = 16543;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 23) {
   HEAP32[$1 + 12 >> 2] = 16561;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 24) {
   HEAP32[$1 + 12 >> 2] = 16570;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 25) {
   HEAP32[$1 + 12 >> 2] = 16579;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 26) {
   HEAP32[$1 + 12 >> 2] = 16588;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 27) {
   HEAP32[$1 + 12 >> 2] = 16597;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 28) {
   HEAP32[$1 + 12 >> 2] = 16606;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 29) {
   HEAP32[$1 + 12 >> 2] = 16705;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 30) {
   HEAP32[$1 + 12 >> 2] = 16741;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 31) {
   HEAP32[$1 + 12 >> 2] = 16750;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 32) {
   HEAP32[$1 + 12 >> 2] = 16768;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 33) {
   HEAP32[$1 + 12 >> 2] = 16786;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 34) {
   HEAP32[$1 + 12 >> 2] = 16804;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 35) {
   HEAP32[$1 + 12 >> 2] = 16822;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 36) {
   HEAP32[$1 + 12 >> 2] = 16849;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 37) {
   HEAP32[$1 + 12 >> 2] = 16876;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 38) {
   HEAP32[$1 + 12 >> 2] = 16903;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 return HEAP32[$1 + 12 >> 2];
}
function jspeFactorArray() {
 var $0 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 label$1 : {
  if ((HEAP32[23778] & 63) == 1) {
   HEAP32[$0 + 20 >> 2] = jsvNewWithFlags(3);
   if (!HEAP32[$0 + 20 >> 2]) {
    jspSetError();
    HEAP32[$0 + 28 >> 2] = 0;
    break label$1;
   }
  }
  if (!(jslMatch(91) & 1)) {
   HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 20 >> 2];
   break label$1;
  }
  while (1) {
   if (HEAP32[23778] & 80 ? 0 : HEAP16[HEAP32[13768] + 2 >> 1] != 93) {
    label$9 : {
     if ((HEAP32[23778] & 63) == 1) {
      HEAP32[$0 + 16 >> 2] = 0;
      HEAP32[$0 + 12 >> 2] = 0;
      if (HEAP16[HEAP32[13768] + 2 >> 1] != 44) {
       HEAP32[$0 + 16 >> 2] = jsvSkipNameAndUnLock(__jspeAssignmentExpression(jspeConditionalExpression()));
       HEAP32[$0 + 12 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(HEAP32[$0 + 24 >> 2]), HEAP32[$0 + 16 >> 2]);
      }
      if (HEAP32[$0 + 12 >> 2]) {
       jsvAddName(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 12 >> 2]);
       jsvUnLock(HEAP32[$0 + 12 >> 2]);
      }
      jsvUnLock(HEAP32[$0 + 16 >> 2]);
      break label$9;
     }
     jsvUnLock(__jspeAssignmentExpression(jspeConditionalExpression()));
    }
    if (HEAP16[HEAP32[13768] + 2 >> 1] != 93) {
     if (!(jslMatch(44) & 1)) {
      HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 20 >> 2];
      break label$1;
     }
    }
    HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$0 + 20 >> 2]) {
   jsvSetArrayLength(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2]);
  }
  if (!(jslMatch(93) & 1)) {
   HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 20 >> 2];
   break label$1;
  }
  HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 20 >> 2];
 }
 global$0 = $0 + 32 | 0;
 return HEAP32[$0 + 28 >> 2];
}
function jswrap_tfmicrointerpreter_tensorToArrayBuffer($0, $1) {
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 HEAP32[$2 + 32 >> 2] = jswrap_tfmicrointerpreter_getTFMI(HEAP32[$2 + 40 >> 2]);
 HEAP32[$2 + 28 >> 2] = jsvObjectGetChild(HEAP32[$2 + 40 >> 2], 39691, 0);
 label$1 : {
  if (!(HEAP32[$2 + 36 >> 2] | HEAP32[$2 + 28 >> 2])) {
   jsExceptionHere(1, 39733, 0);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP16[$2 + 26 >> 1] = 0;
  label$3 : {
   label$4 : {
    $0 = HEAP32[HEAP32[$2 + 36 >> 2] >> 2] + -1 | 0;
    if ($0 >>> 0 > 8) {
     break label$4;
    }
    label$5 : {
     switch ($0 - 1 | 0) {
     default:
      HEAP16[$2 + 26 >> 1] = 36;
      break label$3;
     case 0:
      HEAP16[$2 + 26 >> 1] = 20;
      break label$3;
     case 1:
      HEAP16[$2 + 26 >> 1] = 1;
      break label$3;
     case 5:
      HEAP16[$2 + 26 >> 1] = 18;
      break label$3;
     case 2:
     case 3:
     case 4:
     case 6:
      break label$4;
     case 7:
      break label$5;
     }
    }
    HEAP16[$2 + 26 >> 1] = 17;
    break label$3;
   }
   HEAP32[$2 >> 2] = HEAP32[HEAP32[$2 + 36 >> 2] >> 2];
   jsExceptionHere(3, 39754, $2);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = jsvNewArrayBufferFromString(HEAP32[$2 + 28 >> 2], 0);
  HEAP32[$2 + 16 >> 2] = jswrap_typedarray_constructor(HEAPU16[$2 + 26 >> 1], HEAP32[$2 + 20 >> 2], HEAP32[HEAP32[$2 + 36 >> 2] + 4 >> 2] - HEAP32[$2 + 32 >> 2] | 0, HEAPU32[HEAP32[$2 + 36 >> 2] + 24 >> 2] / ((HEAPU16[$2 + 26 >> 1] & 15) >>> 0) | 0);
  jsvUnLock2(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 28 >> 2]);
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 16 >> 2];
 }
 global$0 = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}
function jswrap_math_pow($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAPF64[$2 + 32 >> 3] = $0;
 HEAPF64[$2 + 24 >> 3] = $1;
 $4 = $2;
 $0 = HEAPF64[$2 + 24 >> 3];
 label$1 : {
  if (Math_abs($0) < 2147483648) {
   $3 = ~~$0;
   break label$1;
  }
  $3 = -2147483648;
 }
 HEAP32[$4 + 12 >> 2] = $3;
 label$3 : {
  if (!(HEAP32[$2 + 12 >> 2] < 0 | HEAP32[$2 + 12 >> 2] >= 10 | +HEAP32[$2 + 12 >> 2] != HEAPF64[$2 + 24 >> 3])) {
   if (!HEAP32[$2 + 12 >> 2]) {
    HEAPF64[$2 + 40 >> 3] = 1;
    break label$3;
   }
   HEAPF64[$2 + 16 >> 3] = HEAPF64[$2 + 32 >> 3];
   while (1) {
    if (HEAP32[$2 + 12 >> 2] > 1) {
     HEAPF64[$2 + 16 >> 3] = HEAPF64[$2 + 16 >> 3] * HEAPF64[$2 + 32 >> 3];
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + -1;
     continue;
    }
    break;
   }
   HEAPF64[$2 + 40 >> 3] = HEAPF64[$2 + 16 >> 3];
   break label$3;
  }
  label$8 : {
   label$9 : {
    if (!(HEAPF64[$2 + 32 >> 3] < 0)) {
     break label$9;
    }
    if (jswrap_math_mod(HEAPF64[$2 + 24 >> 3], 1) != 0) {
     break label$9;
    }
    label$10 : {
     if (jswrap_math_mod(HEAPF64[$2 + 24 >> 3], 2) == 0) {
      HEAPF64[$2 + 16 >> 3] = exp(log(-HEAPF64[$2 + 32 >> 3]) * HEAPF64[$2 + 24 >> 3]);
      break label$10;
     }
     HEAPF64[$2 + 16 >> 3] = -exp(log(-HEAPF64[$2 + 32 >> 3]) * HEAPF64[$2 + 24 >> 3]);
    }
    break label$8;
   }
   label$12 : {
    if (!(0 >= HEAPF64[$2 + 24 >> 3] ? 0 : HEAPF64[$2 + 32 >> 3] == 0)) {
     HEAPF64[$2 + 16 >> 3] = exp(log(HEAPF64[$2 + 32 >> 3]) * HEAPF64[$2 + 24 >> 3]);
     break label$12;
    }
    HEAPF64[$2 + 16 >> 3] = 0;
   }
  }
  HEAPF64[$2 + 40 >> 3] = HEAPF64[$2 + 16 >> 3];
 }
 global$0 = $2 + 48 | 0;
 return +HEAPF64[$2 + 40 >> 3];
}
function tflite__ops__micro__fully_connected___28anonymous_20namespace_29__CalculateOpData_28TfLiteContext__2c_20TfLiteFullyConnectedParams__2c_20TfLiteType_2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20tflite__ops__micro__fully_connected___28anonymous_20namespace_29__OpData__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0;
 $8 = global$0 + -64 | 0;
 global$0 = $8;
 HEAP32[$8 + 56 >> 2] = $0;
 HEAP32[$8 + 52 >> 2] = $1;
 HEAP32[$8 + 48 >> 2] = $2;
 HEAP32[$8 + 44 >> 2] = $3;
 HEAP32[$8 + 40 >> 2] = $4;
 HEAP32[$8 + 36 >> 2] = $5;
 HEAP32[$8 + 32 >> 2] = $6;
 HEAP32[$8 + 28 >> 2] = $7;
 HEAP32[$8 + 24 >> 2] = 0;
 label$1 : {
  if (HEAP32[$8 + 48 >> 2] != 1) {
   HEAPF64[$8 + 16 >> 3] = 0;
   if (tflite__GetQuantizedConvolutionMultipler_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20double__29(HEAP32[$8 + 56 >> 2], HEAP32[$8 + 44 >> 2], HEAP32[$8 + 40 >> 2], HEAP32[$8 + 36 >> 2], HEAP32[$8 + 32 >> 2], $8 + 16 | 0)) {
    HEAP32[$8 + 60 >> 2] = 1;
    break label$1;
   }
   tflite__QuantizeMultiplier_28double_2c_20int__2c_20int__29(HEAPF64[$8 + 16 >> 3], HEAP32[$8 + 28 >> 2], $8 + 12 | 0);
   HEAP32[HEAP32[$8 + 28 >> 2] + 4 >> 2] = 0 - HEAP32[$8 + 12 >> 2];
   if (tflite__CalculateActivationRangeQuantized_28TfLiteContext__2c_20TfLiteFusedActivation_2c_20TfLiteTensor__2c_20int__2c_20int__29(HEAP32[$8 + 56 >> 2], HEAP32[HEAP32[$8 + 52 >> 2] >> 2], HEAP32[$8 + 32 >> 2], HEAP32[$8 + 28 >> 2] + 8 | 0, HEAP32[$8 + 28 >> 2] + 12 | 0)) {
    HEAP32[$8 + 60 >> 2] = 1;
    break label$1;
   }
  }
  HEAP32[$8 + 60 >> 2] = HEAP32[$8 + 24 >> 2];
 }
 global$0 = $8 - -64 | 0;
 return HEAP32[$8 + 60 >> 2];
}
function st_step_search($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP16[$1 + 22 >> 1] = get_input_buffer_size(HEAP32[$1 + 24 >> 2]);
 HEAP32[(global$0 - 16 | 0) + 12 >> 2] = HEAP32[$1 + 24 >> 2];
 HEAP16[$1 + 20 >> 1] = 64;
 HEAP16[$1 + 18 >> 1] = HEAPU16[HEAP32[$1 + 24 >> 2] + 2 >> 1];
 HEAP8[$1 + 17 | 0] = (is_finishing(HEAP32[$1 + 24 >> 2]) | 0) != 0;
 $0 = HEAPU16[$1 + 18 >> 1];
 $3 = HEAPU16[HEAP32[$1 + 24 >> 2] >> 1];
 if (HEAP8[$1 + 17 | 0] & 1) {
  $2 = 1;
 } else {
  $2 = HEAPU16[$1 + 20 >> 1];
 }
 label$1 : {
  if (($0 | 0) > ($3 - $2 | 0)) {
   HEAP32[$1 + 28 >> 2] = HEAP8[$1 + 17 | 0] & 1 ? 8 : 7;
   break label$1;
  }
  HEAP16[$1 + 14 >> 1] = get_input_offset(HEAP32[$1 + 24 >> 2]);
  HEAP16[$1 + 12 >> 1] = HEAPU16[$1 + 14 >> 1] + HEAPU16[$1 + 18 >> 1];
  HEAP16[$1 + 10 >> 1] = HEAPU16[$1 + 12 >> 1] - HEAPU16[$1 + 22 >> 1];
  HEAP16[$1 + 8 >> 1] = HEAPU16[$1 + 20 >> 1];
  if ((HEAPU16[HEAP32[$1 + 24 >> 2] >> 1] - HEAPU16[$1 + 18 >> 1] | 0) < HEAPU16[$1 + 20 >> 1]) {
   HEAP16[$1 + 8 >> 1] = HEAPU16[HEAP32[$1 + 24 >> 2] >> 1] - HEAPU16[$1 + 18 >> 1];
  }
  HEAP16[$1 + 6 >> 1] = 0;
  HEAP16[$1 + 4 >> 1] = find_longest_match(HEAP32[$1 + 24 >> 2], HEAPU16[$1 + 10 >> 1], HEAPU16[$1 + 12 >> 1], HEAPU16[$1 + 8 >> 1], $1 + 6 | 0);
  if (HEAPU16[$1 + 4 >> 1] == 65535) {
   $0 = HEAP32[$1 + 24 >> 2];
   HEAP16[$0 + 2 >> 1] = HEAPU16[$0 + 2 >> 1] + 1;
   HEAP16[HEAP32[$1 + 24 >> 2] + 4 >> 1] = 0;
   HEAP32[$1 + 28 >> 2] = 3;
   break label$1;
  }
  HEAP16[HEAP32[$1 + 24 >> 2] + 6 >> 1] = HEAPU16[$1 + 4 >> 1];
  HEAP16[HEAP32[$1 + 24 >> 2] + 4 >> 1] = HEAPU16[$1 + 6 >> 1];
  HEAP32[$1 + 28 >> 2] = 3;
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function jsfFindFile($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 HEAP32[$2 + 56 >> 2] = $1;
 HEAP32[$2 + 52 >> 2] = 134437888;
 $1 = $2 + 16 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 24 >> 2] = 0;
 HEAP32[$1 + 28 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 label$1 : {
  if (jsfGetFileHeader(HEAP32[$2 + 52 >> 2], $1, 0) & 1) {
   while (1) {
    if (HEAP32[$2 + 20 >> 2] == HEAP32[$0 >> 2]) {
     $1 = $2 + 16 | 0;
     jsfGetFileHeader(HEAP32[$2 + 52 >> 2], $1, 1);
     if (!memcmp($1 + 4 | 0, $0, 28)) {
      HEAP32[$2 + 12 >> 2] = (HEAP32[$2 + 52 >> 2] + 32 | 0) + jsfGetFileSize($2 + 16 | 0);
      if (!(HEAPU32[$2 + 12 >> 2] <= 134479872 ? HEAPU32[$2 + 12 >> 2] >= HEAPU32[$2 + 52 >> 2] : 0)) {
       HEAP32[$2 + 60 >> 2] = 0;
       break label$1;
      }
      if (HEAP32[$2 + 56 >> 2]) {
       $0 = $2 + 16 | 0;
       $3 = HEAP32[$0 + 4 >> 2];
       $1 = HEAP32[$2 + 56 >> 2];
       HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
       HEAP32[$1 + 4 >> 2] = $3;
       $3 = HEAP32[$0 + 28 >> 2];
       HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 24 >> 2];
       HEAP32[$1 + 28 >> 2] = $3;
       $3 = HEAP32[$0 + 20 >> 2];
       HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
       HEAP32[$1 + 20 >> 2] = $3;
       $3 = HEAP32[$0 + 12 >> 2];
       HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
       HEAP32[$1 + 12 >> 2] = $3;
      }
      HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 52 >> 2] + 32;
      break label$1;
     }
    }
    if (jsfGetNextFileHeader($2 + 52 | 0, $2 + 16 | 0, 3) & 1) {
     continue;
    }
    break;
   }
  }
  HEAP32[$2 + 60 >> 2] = 0;
 }
 global$0 = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}
function jswrap_serial_setup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 HEAP8[$3 + 35 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 44 >> 2]);
 label$1 : {
  if (jsvIsUndefined(HEAP32[$3 + 36 >> 2]) & 1) {
   HEAP32[$3 + 36 >> 2] = jsvObjectGetChild(HEAP32[$3 + 44 >> 2], 36865, 0);
   break label$1;
  }
  jsvLockAgain(HEAP32[$3 + 36 >> 2]);
 }
 HEAP8[$3 + 15 | 0] = jsserialPopulateUSARTInfo($3 + 16 | 0, HEAP32[$3 + 40 >> 2], HEAP32[$3 + 36 >> 2]) & 1;
 label$3 : {
  if (!(HEAP8[$3 + 15 | 0] & 1)) {
   jsvUnLock(HEAP32[$3 + 36 >> 2]);
   break label$3;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$3 + 44 >> 2], 36874, jsvNewFromInteger(HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24)));
  label$5 : {
   if (HEAP32[$3 + 36 >> 2]) {
    jsvObjectSetChildAndUnLock(HEAP32[$3 + 44 >> 2], 36865, HEAP32[$3 + 36 >> 2]);
    break label$5;
   }
   jsvObjectRemoveChild(HEAP32[$3 + 44 >> 2], 36865);
  }
  if (!(HEAPU8[$3 + 35 | 0] < 17 | HEAPU8[$3 + 35 | 0] > 22)) {
   if (!(HEAPU8[$3 + 35 | 0] < 22 | HEAPU8[$3 + 35 | 0] > 22)) {
    jshUSARTSetup(HEAPU8[$3 + 35 | 0], $3 + 16 | 0);
   }
   break label$3;
  }
  if (!HEAPU8[$3 + 35 | 0]) {
   if (HEAPU8[$3 + 21 | 0] != 255) {
    jshPinSetState(HEAPU8[$3 + 21 | 0], 1);
    jshPinOutput(HEAPU8[$3 + 21 | 0], 1);
   }
   if (HEAPU8[$3 + 20 | 0] != 255) {
    $0 = $3 + 16 | 0;
    jshPinSetState(HEAPU8[$3 + 20 | 0], 5);
    jsserialEventCallbackInit(HEAP32[$3 + 44 >> 2], $0);
   }
   if (HEAPU8[$3 + 22 | 0] != 255) {
    jsExceptionHere(1, 36884, 0);
   }
  }
 }
 global$0 = $3 + 48 | 0;
}
function _jswrap_promise_resolve_or_reject_chain($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP8[$3 + 39 | 0] = $2;
 HEAP32[$3 + 32 >> 2] = HEAP8[$3 + 39 | 0] & 1 ? 36539 : 36544;
 HEAP32[$3 + 28 >> 2] = jsvObjectGetChild(HEAP32[$3 + 44 >> 2], 36560, 0);
 label$1 : {
  if (HEAP32[$3 + 28 >> 2]) {
   jsvUnLock(HEAP32[$3 + 28 >> 2]);
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$3 + 44 >> 2], 36560, jsvNewFromBool(1));
  HEAP32[$3 + 24 >> 2] = jsvObjectGetChild(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2], 0);
  if (!HEAP32[$3 + 24 >> 2]) {
   HEAP32[$3 + 20 >> 2] = jsvObjectGetChild(HEAP32[$3 + 44 >> 2], 36549, 0);
   while (1) {
    if (HEAP32[$3 + 20 >> 2]) {
     HEAP32[$3 + 24 >> 2] = jsvObjectGetChild(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 32 >> 2], 0);
     if (HEAP32[$3 + 24 >> 2]) {
      _jswrap_promise_resolve_or_reject(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 40 >> 2], HEAP32[$3 + 24 >> 2]);
      jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
      break label$1;
     }
     HEAP32[$3 + 16 >> 2] = jsvObjectGetChild(HEAP32[$3 + 20 >> 2], 36549, 0);
     jsvUnLock(HEAP32[$3 + 20 >> 2]);
     HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 16 >> 2];
     continue;
    }
    break;
   }
  }
  if (HEAP8[$3 + 39 | 0] & 1) {
   jsvObjectSetChild(HEAP32[$3 + 44 >> 2], 36565, HEAP32[$3 + 40 >> 2]);
  }
  if (HEAP32[$3 + 24 >> 2]) {
   _jswrap_promise_resolve_or_reject(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2], HEAP32[$3 + 24 >> 2]);
   jsvUnLock(HEAP32[$3 + 24 >> 2]);
   break label$1;
  }
  if (!(HEAP8[$3 + 39 | 0] & 1)) {
   HEAP32[$3 >> 2] = HEAP32[$3 + 40 >> 2];
   jsExceptionHere(1, 36574, $3);
  }
 }
 global$0 = $3 + 48 | 0;
}
function void_20tflite__ops__micro__maximum_minimum__TFLiteOperation_unsigned_20char_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 92 >> 2] = $0;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP32[$3 + 84 >> 2] = $2;
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 - -64 | 0, HEAP32[HEAP32[$3 + 84 >> 2] >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 32 | 0, HEAP32[HEAP32[$3 + 84 >> 2] + 4 >> 2]);
 $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] + 4 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 8 | 0, HEAP32[HEAP32[$3 + 84 >> 2] + 8 >> 2]);
 void_20tflite__reference_ops__MaximumMinimumBroadcast4DSlow_unsigned_20char_2c_20unsigned_20char_20_28__29_28unsigned_20char_2c_20unsigned_20char_29__28tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__2c_20unsigned_20char_20_28__29_28unsigned_20char_2c_20unsigned_20char_29_29($3 - -64 | 0, $0, $3 + 32 | 0, $1, $3 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] + 8 >> 2]), 623);
 $0 = $3 - -64 | 0;
 $1 = $3 + 32 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($3 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($1);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $3 + 96 | 0;
}
function void_20tflite__ops__micro__maximum_minimum__TFLiteOperation_unsigned_20char_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 92 >> 2] = $0;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP32[$3 + 84 >> 2] = $2;
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 - -64 | 0, HEAP32[HEAP32[$3 + 84 >> 2] >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 32 | 0, HEAP32[HEAP32[$3 + 84 >> 2] + 4 >> 2]);
 $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] + 4 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 8 | 0, HEAP32[HEAP32[$3 + 84 >> 2] + 8 >> 2]);
 void_20tflite__reference_ops__MaximumMinimumBroadcast4DSlow_unsigned_20char_2c_20unsigned_20char_20_28__29_28unsigned_20char_2c_20unsigned_20char_29__28tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__2c_20unsigned_20char_20_28__29_28unsigned_20char_2c_20unsigned_20char_29_29($3 - -64 | 0, $0, $3 + 32 | 0, $1, $3 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] + 8 >> 2]), 618);
 $0 = $3 - -64 | 0;
 $1 = $3 + 32 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($3 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($1);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $3 + 96 | 0;
}
function jsvArrayBufferIteratorSetValue($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1 : {
  if (!HEAPU16[HEAP32[$2 + 28 >> 2] + 20 >> 1]) {
   break label$1;
  }
  HEAP32[$2 + 8 >> 2] = HEAPU16[HEAP32[$2 + 28 >> 2] + 20 >> 1] & 15;
  label$2 : {
   if (HEAPU16[HEAP32[$2 + 28 >> 2] + 20 >> 1] & 32) {
    jsvArrayBufferIteratorFloatToData($2 + 16 | 0, HEAP32[$2 + 8 >> 2], HEAPU16[HEAP32[$2 + 28 >> 2] + 20 >> 1], jsvGetFloat(HEAP32[$2 + 24 >> 2]));
    break label$2;
   }
   jsvArrayBufferIteratorIntToData($2 + 16 | 0, HEAP32[$2 + 8 >> 2], HEAPU16[HEAP32[$2 + 28 >> 2] + 20 >> 1], jsvGetInteger(HEAP32[$2 + 24 >> 2]));
  }
  label$4 : {
   if (HEAPU16[HEAP32[$2 + 28 >> 2] + 20 >> 1] & 256) {
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 8 >> 2] - 1;
    while (1) {
     if (HEAP32[$2 + 12 >> 2] >= 0) {
      jsvStringIteratorSetChar(HEAP32[$2 + 28 >> 2], HEAP8[HEAP32[$2 + 12 >> 2] + ($2 + 16 | 0) | 0]);
      if (HEAP32[$2 + 8 >> 2] != 1) {
       jsvStringIteratorNext(HEAP32[$2 + 28 >> 2]);
      }
      HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + -1;
      continue;
     }
     break;
    }
    break label$4;
   }
   HEAP32[$2 + 12 >> 2] = 0;
   while (1) {
    if (HEAP32[$2 + 12 >> 2] < HEAP32[$2 + 8 >> 2]) {
     jsvStringIteratorSetChar(HEAP32[$2 + 28 >> 2], HEAP8[HEAP32[$2 + 12 >> 2] + ($2 + 16 | 0) | 0]);
     if (HEAP32[$2 + 8 >> 2] != 1) {
      jsvStringIteratorNext(HEAP32[$2 + 28 >> 2]);
     }
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
  }
  if (HEAP32[$2 + 8 >> 2] == 1) {
   break label$1;
  }
  HEAP8[HEAP32[$2 + 28 >> 2] + 36 | 0] = 1;
 }
 global$0 = $2 + 32 | 0;
}
function jsExceptionHere($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 label$1 : {
  if (jspHasError() & 1) {
   break label$1;
  }
  jsiConsoleRemoveInputLine();
  HEAP32[$3 + 36 >> 2] = jsvNewFromEmptyString();
  if (!HEAP32[$3 + 36 >> 2]) {
   jspSetError();
   break label$1;
  }
  $1 = $3 + 8 | 0;
  $0 = $3 + 16 | 0;
  jsvStringIteratorNew($0, HEAP32[$3 + 36 >> 2], 0);
  jsvStringIteratorGotoEnd($0);
  HEAP32[$3 + 12 >> 2] = 4;
  HEAP32[$1 >> 2] = $2;
  vcbprintf(HEAP32[$3 + 12 >> 2], $0, HEAP32[$3 + 40 >> 2], HEAP32[$3 + 8 >> 2]);
  jsvStringIteratorFree($0);
  if (HEAP32[$3 + 44 >> 2]) {
   HEAP32[$3 + 4 >> 2] = 0;
   label$4 : {
    if (HEAP32[$3 + 44 >> 2] == 1) {
     HEAP32[$3 + 4 >> 2] = jswrap_error_constructor(HEAP32[$3 + 36 >> 2]);
     break label$4;
    }
    label$6 : {
     if (HEAP32[$3 + 44 >> 2] == 2) {
      HEAP32[$3 + 4 >> 2] = jswrap_syntaxerror_constructor(HEAP32[$3 + 36 >> 2]);
      break label$6;
     }
     label$8 : {
      if (HEAP32[$3 + 44 >> 2] == 3) {
       HEAP32[$3 + 4 >> 2] = jswrap_typeerror_constructor(HEAP32[$3 + 36 >> 2]);
       break label$8;
      }
      label$10 : {
       if (HEAP32[$3 + 44 >> 2] == 4) {
        HEAP32[$3 + 4 >> 2] = jswrap_internalerror_constructor(HEAP32[$3 + 36 >> 2]);
        break label$10;
       }
       if (HEAP32[$3 + 44 >> 2] == 5) {
        HEAP32[$3 + 4 >> 2] = jswrap_referenceerror_constructor(HEAP32[$3 + 36 >> 2]);
       }
      }
     }
    }
   }
   jsvUnLock(HEAP32[$3 + 36 >> 2]);
   HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 4 >> 2];
  }
  jspSetException(HEAP32[$3 + 36 >> 2]);
  jsvUnLock(HEAP32[$3 + 36 >> 2]);
 }
 global$0 = $3 + 48 | 0;
}
function tflite__QuantizeMultiplier_28double_2c_20int__2c_20int__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAPF64[$3 + 24 >> 3] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1 : {
  if (HEAPF64[$3 + 24 >> 3] == 0) {
   HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 0;
   HEAP32[HEAP32[$3 + 16 >> 2] >> 2] = 0;
   break label$1;
  }
  HEAPF64[$3 + 8 >> 3] = frexp(HEAPF64[$3 + 24 >> 3], HEAP32[$3 + 16 >> 2]);
  $1 = $3;
  $5 = $3;
  $0 = double_20tflite__TfLiteRound_double__28double_29(HEAPF64[$3 + 8 >> 3] * 2147483648);
  label$3 : {
   if (Math_abs($0) < 0x8000000000000000) {
    $2 = Math_abs($0) >= 1 ? $0 > 0 ? ~~Math_min(Math_floor($0 / 4294967296), 4294967295) >>> 0 : ~~Math_ceil(($0 - +(~~$0 >>> 0 >>> 0)) / 4294967296) >>> 0 : 0;
    $4 = ~~$0 >>> 0;
    break label$3;
   }
   $2 = -2147483648;
   $4 = 0;
  }
  HEAP32[$5 >> 2] = $4;
  HEAP32[$1 + 4 >> 2] = $2;
  $1 = HEAP32[$3 + 4 >> 2];
  if (($1 | 0) > 0 ? 1 : ($1 | 0) >= 0 ? HEAPU32[$3 >> 2] <= 2147483648 ? 0 : 1 : 0) {
   abort();
   abort();
  }
  if (!HEAP32[$3 + 4 >> 2] & HEAP32[$3 >> 2] == -2147483648) {
   HEAP32[$3 >> 2] = __wasm_i64_sdiv(HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2], 2);
   HEAP32[$3 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
   $1 = HEAP32[$3 + 16 >> 2];
   HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1;
  }
  $1 = HEAP32[$3 + 4 >> 2];
  if (($1 | 0) > 0 ? 1 : ($1 | 0) >= 0 ? HEAPU32[$3 >> 2] <= 2147483647 ? 0 : 1 : 0) {
   abort();
   abort();
  }
  if (HEAP32[HEAP32[$3 + 16 >> 2] >> 2] < -31) {
   HEAP32[HEAP32[$3 + 16 >> 2] >> 2] = 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
  }
  HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = HEAP32[$3 >> 2];
 }
 global$0 = $3 + 32 | 0;
}
function tflite__strided_slice__StopForAxis_28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 48 | 0;
 global$0 = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP32[$4 + 32 >> 2] = $3;
 HEAP16[$4 + 30 >> 1] = HEAPU16[HEAP32[$4 + 44 >> 2] + 34 >> 1];
 HEAP16[$4 + 28 >> 1] = HEAPU16[HEAP32[$4 + 44 >> 2] + 38 >> 1];
 HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 44 >> 2] + 12;
 HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 44 >> 2] + 22;
 HEAP8[$4 + 19 | 0] = (HEAP16[$4 + 28 >> 1] & 1 << HEAP32[$4 + 36 >> 2]) != 0;
 HEAP32[$4 + 12 >> 2] = HEAP16[HEAP32[$4 + 24 >> 2] + (HEAP32[$4 + 36 >> 2] << 1) >> 1];
 if (HEAP8[$4 + 19 | 0] & 1) {
  HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 32 >> 2] + 1;
 }
 if (HEAP16[$4 + 30 >> 1] & 1 << HEAP32[$4 + 36 >> 2]) {
  label$3 : {
   if (HEAP16[HEAP32[$4 + 20 >> 2] + (HEAP32[$4 + 36 >> 2] << 1) >> 1] > 0) {
    HEAP32[$4 + 12 >> 2] = 2147483647;
    break label$3;
   }
   HEAP32[$4 + 12 >> 2] = -2147483648;
  }
 }
 HEAP32[$4 + 8 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 36 >> 2]);
 if (HEAP32[$4 + 12 >> 2] < 0) {
  HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 8 >> 2] + HEAP32[$4 + 12 >> 2];
 }
 label$6 : {
  if (HEAP16[HEAP32[$4 + 20 >> 2] + (HEAP32[$4 + 36 >> 2] << 1) >> 1] > 0) {
   HEAP32[$4 + 12 >> 2] = tflite__strided_slice__Clamp_28int_2c_20int_2c_20int_29(HEAP32[$4 + 12 >> 2], 0, HEAP32[$4 + 8 >> 2]);
   break label$6;
  }
  HEAP32[$4 + 12 >> 2] = tflite__strided_slice__Clamp_28int_2c_20int_2c_20int_29(HEAP32[$4 + 12 >> 2], -1, HEAP32[$4 + 8 >> 2] - 1 | 0);
 }
 global$0 = $4 + 48 | 0;
 return HEAP32[$4 + 12 >> 2];
}
function jsvRemoveChild($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP16[$2 + 22 >> 1] = jsvGetRef(HEAP32[$2 + 24 >> 2]);
 HEAP8[$2 + 21 | 0] = 0;
 if ((jsvGetFirstChild(HEAP32[$2 + 28 >> 2]) & 65535) == HEAPU16[$2 + 22 >> 1]) {
  jsvSetFirstChild(HEAP32[$2 + 28 >> 2], jsvGetNextSibling(HEAP32[$2 + 24 >> 2]) & 65535);
  HEAP8[$2 + 21 | 0] = 1;
 }
 if ((jsvGetLastChild(HEAP32[$2 + 28 >> 2]) & 65535) == HEAPU16[$2 + 22 >> 1]) {
  jsvSetLastChild(HEAP32[$2 + 28 >> 2], jsvGetPrevSibling(HEAP32[$2 + 24 >> 2]) & 65535);
  HEAP8[$2 + 21 | 0] = 1;
  if (jsvIsArray(HEAP32[$2 + 28 >> 2]) & 1) {
   HEAP32[$2 + 16 >> 2] = 0;
   if (jsvGetLastChild(HEAP32[$2 + 28 >> 2]) & 65535) {
    HEAP32[$2 + 16 >> 2] = jsvGetIntegerAndUnLock(jsvLock(jsvGetLastChild(HEAP32[$2 + 28 >> 2]) & 65535)) + 1;
   }
   jsvSetArrayLength(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 16 >> 2]);
  }
 }
 if (jsvGetPrevSibling(HEAP32[$2 + 24 >> 2]) & 65535) {
  HEAP32[$2 + 12 >> 2] = jsvLock(jsvGetPrevSibling(HEAP32[$2 + 24 >> 2]) & 65535);
  jsvSetNextSibling(HEAP32[$2 + 12 >> 2], jsvGetNextSibling(HEAP32[$2 + 24 >> 2]) & 65535);
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  HEAP8[$2 + 21 | 0] = 1;
 }
 if (jsvGetNextSibling(HEAP32[$2 + 24 >> 2]) & 65535) {
  HEAP32[$2 + 8 >> 2] = jsvLock(jsvGetNextSibling(HEAP32[$2 + 24 >> 2]) & 65535);
  jsvSetPrevSibling(HEAP32[$2 + 8 >> 2], jsvGetPrevSibling(HEAP32[$2 + 24 >> 2]) & 65535);
  jsvUnLock(HEAP32[$2 + 8 >> 2]);
  HEAP8[$2 + 21 | 0] = 1;
 }
 jsvSetPrevSibling(HEAP32[$2 + 24 >> 2], 0);
 jsvSetNextSibling(HEAP32[$2 + 24 >> 2], 0);
 if (HEAP8[$2 + 21 | 0] & 1) {
  jsvUnRef(HEAP32[$2 + 24 >> 2]);
 }
 global$0 = $2 + 32 | 0;
}
function getRadix($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = 10;
 if (HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] >> 2]] == 48) {
  HEAP32[$2 + 4 >> 2] = 8;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
  label$2 : {
   if (!(HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] >> 2]] != 79 ? HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] >> 2]] != 111 : 0)) {
    HEAP32[$2 + 4 >> 2] = 8;
    $0 = HEAP32[$2 + 12 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    break label$2;
   }
   label$5 : {
    if (!(HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] >> 2]] != 88 ? HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] >> 2]] != 120 : 0)) {
     HEAP32[$2 + 4 >> 2] = 16;
     $0 = HEAP32[$2 + 12 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     break label$5;
    }
    label$8 : {
     if (!(HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] >> 2]] != 66 ? HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] >> 2]] != 98 : 0)) {
      HEAP32[$2 + 4 >> 2] = 2;
      $0 = HEAP32[$2 + 12 >> 2];
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
      break label$8;
     }
     HEAP32[$2 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] >> 2];
     while (1) {
      label$12 : {
       if (!HEAPU8[HEAP32[$2 >> 2]]) {
        break label$12;
       }
       label$13 : {
        if (!(HEAP8[HEAP32[$2 >> 2]] != 57 ? !(HEAP8[HEAP32[$2 >> 2]] == 46 | HEAP8[HEAP32[$2 >> 2]] == 56) : 0)) {
         HEAP32[$2 + 4 >> 2] = 10;
         break label$13;
        }
        if (HEAP8[HEAP32[$2 >> 2]] < 48 | HEAP8[HEAP32[$2 >> 2]] > 57) {
         break label$12;
        }
       }
       HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
       continue;
      }
      break;
     }
    }
   }
  }
 }
 return HEAP32[$2 + 4 >> 2];
}
function jswrap_banglejs_getCompass() {
 var $0 = 0;
 $0 = global$0 - 48 | 0;
 global$0 = $0;
 HEAP32[$0 + 44 >> 2] = jsvNewWithFlags(5);
 if (HEAP32[$0 + 44 >> 2]) {
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 44 >> 2], 28425, jsvNewFromInteger(HEAP16[125645]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 44 >> 2], 28427, jsvNewFromInteger(HEAP16[125646]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 44 >> 2], 28429, jsvNewFromInteger(HEAP16[125647]));
  HEAP32[$0 + 40 >> 2] = HEAP16[125645] - ((HEAP16[125648] + HEAP16[125651] | 0) / 2 | 0);
  HEAP32[$0 + 36 >> 2] = HEAP16[125646] - ((HEAP16[125649] + HEAP16[125652] | 0) / 2 | 0);
  HEAP32[$0 + 32 >> 2] = HEAP16[125647] - ((HEAP16[125650] + HEAP16[125653] | 0) / 2 | 0);
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 44 >> 2], 28431, jsvNewFromInteger(HEAP32[$0 + 40 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 44 >> 2], 28434, jsvNewFromInteger(HEAP32[$0 + 36 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 44 >> 2], 28437, jsvNewFromInteger(HEAP32[$0 + 32 >> 2]));
  HEAP32[$0 + 28 >> 2] = HEAP16[125651] - HEAP16[125648];
  HEAP32[$0 + 24 >> 2] = HEAP16[125652] - HEAP16[125649];
  HEAP32[$0 + 20 >> 2] = Math_imul(HEAP32[$0 + 28 >> 2], HEAP32[$0 + 28 >> 2]) + Math_imul(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 24 >> 2]);
  HEAPF64[$0 + 8 >> 3] = nan;
  if (HEAP32[$0 + 20 >> 2] > 3e3) {
   HEAPF64[$0 + 8 >> 3] = jswrap_math_atan2(+HEAP32[$0 + 40 >> 2], +HEAP32[$0 + 36 >> 2]) * 180 / 3.141592653589793;
   if (HEAPF64[$0 + 8 >> 3] < 0) {
    HEAPF64[$0 + 8 >> 3] = HEAPF64[$0 + 8 >> 3] + 360;
   }
  }
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 44 >> 2], 28440, jsvNewFromFloat(HEAPF64[$0 + 8 >> 3]));
 }
 global$0 = $0 + 48 | 0;
 return HEAP32[$0 + 44 >> 2];
}
function void_20tflite__ops__micro__maximum_minimum__TFLiteOperation_signed_20char_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 92 >> 2] = $0;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP32[$3 + 84 >> 2] = $2;
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 - -64 | 0, HEAP32[HEAP32[$3 + 84 >> 2] >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 32 | 0, HEAP32[HEAP32[$3 + 84 >> 2] + 4 >> 2]);
 $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] + 4 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 8 | 0, HEAP32[HEAP32[$3 + 84 >> 2] + 8 >> 2]);
 void_20tflite__reference_ops__MaximumMinimumBroadcast4DSlow_signed_20char_2c_20signed_20char_20_28__29_28signed_20char_2c_20signed_20char_29__28tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__2c_20signed_20char_20_28__29_28signed_20char_2c_20signed_20char_29_29($3 - -64 | 0, $0, $3 + 32 | 0, $1, $3 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] + 8 >> 2]), 624);
 $0 = $3 - -64 | 0;
 $1 = $3 + 32 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($3 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($1);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $3 + 96 | 0;
}
function void_20tflite__ops__micro__maximum_minimum__TFLiteOperation_signed_20char_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 92 >> 2] = $0;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP32[$3 + 84 >> 2] = $2;
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 - -64 | 0, HEAP32[HEAP32[$3 + 84 >> 2] >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 32 | 0, HEAP32[HEAP32[$3 + 84 >> 2] + 4 >> 2]);
 $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] + 4 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 8 | 0, HEAP32[HEAP32[$3 + 84 >> 2] + 8 >> 2]);
 void_20tflite__reference_ops__MaximumMinimumBroadcast4DSlow_signed_20char_2c_20signed_20char_20_28__29_28signed_20char_2c_20signed_20char_29__28tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__2c_20signed_20char_20_28__29_28signed_20char_2c_20signed_20char_29_29($3 - -64 | 0, $0, $3 + 32 | 0, $1, $3 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] + 8 >> 2]), 619);
 $0 = $3 - -64 | 0;
 $1 = $3 + 32 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($3 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($1);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $3 + 96 | 0;
}
function jsfSaveBootCodeToFlash($0, $1) {
 var $2 = 0;
 $2 = global$0 - 208 | 0;
 global$0 = $2;
 HEAP32[$2 + 204 >> 2] = $0;
 HEAP8[$2 + 203 | 0] = $1;
 jsfNameFromString($2 + 168 | 0, 2462);
 HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 192 >> 2];
 $0 = HEAP32[$2 + 188 >> 2];
 HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 184 >> 2];
 HEAP32[$2 + 60 >> 2] = $0;
 $0 = HEAP32[$2 + 180 >> 2];
 HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 176 >> 2];
 HEAP32[$2 + 52 >> 2] = $0;
 $0 = HEAP32[$2 + 172 >> 2];
 HEAP32[$2 + 40 >> 2] = HEAP32[$2 + 168 >> 2];
 HEAP32[$2 + 44 >> 2] = $0;
 jsfEraseFile($2 + 40 | 0);
 jsfNameFromString($2 + 136 | 0, 2471);
 HEAP32[$2 + 96 >> 2] = HEAP32[$2 + 160 >> 2];
 $0 = HEAP32[$2 + 156 >> 2];
 HEAP32[$2 + 88 >> 2] = HEAP32[$2 + 152 >> 2];
 HEAP32[$2 + 92 >> 2] = $0;
 $0 = HEAP32[$2 + 148 >> 2];
 HEAP32[$2 + 80 >> 2] = HEAP32[$2 + 144 >> 2];
 HEAP32[$2 + 84 >> 2] = $0;
 $0 = HEAP32[$2 + 140 >> 2];
 HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 136 >> 2];
 HEAP32[$2 + 76 >> 2] = $0;
 jsfEraseFile($2 + 72 | 0);
 label$1 : {
  if (jsvIsUndefined(HEAP32[$2 + 204 >> 2]) & 1) {
   break label$1;
  }
  if (!jsvGetLength(HEAP32[$2 + 204 >> 2])) {
   break label$1;
  }
  jsfNameFromString($2 + 104 | 0, HEAP8[$2 + 203 | 0] & 1 ? 2471 : 2462);
  $0 = HEAP32[$2 + 204 >> 2];
  HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 128 >> 2];
  $1 = HEAP32[$2 + 124 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 120 >> 2];
  HEAP32[$2 + 28 >> 2] = $1;
  $1 = HEAP32[$2 + 116 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 112 >> 2];
  HEAP32[$2 + 20 >> 2] = $1;
  $1 = HEAP32[$2 + 108 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 104 >> 2];
  HEAP32[$2 + 12 >> 2] = $1;
  jsfWriteFile($2 + 8 | 0, $0, 0, 0, 0);
 }
 global$0 = $2 + 208 | 0;
}
function jswrap_array_fill($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 80 | 0;
 global$0 = $4;
 HEAP32[$4 + 72 >> 2] = $0;
 HEAP32[$4 + 68 >> 2] = $1;
 HEAP32[$4 + 64 >> 2] = $2;
 HEAP32[$4 + 60 >> 2] = $3;
 label$1 : {
  if (!(jsvIsIterable(HEAP32[$4 + 72 >> 2]) & 1)) {
   HEAP32[$4 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 56 >> 2] = jsvGetLength(HEAP32[$4 + 72 >> 2]);
  if (HEAP32[$4 + 64 >> 2] < 0) {
   HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 64 >> 2] + HEAP32[$4 + 56 >> 2];
  }
  if (HEAP32[$4 + 64 >> 2] < 0) {
   HEAP32[$4 + 76 >> 2] = 0;
   break label$1;
  }
  $0 = $4;
  label$5 : {
   if (jsvIsNumeric(HEAP32[$4 + 60 >> 2]) & 1) {
    $1 = jsvGetInteger(HEAP32[$4 + 60 >> 2]);
    break label$5;
   }
   $1 = HEAP32[$4 + 56 >> 2];
  }
  HEAP32[$0 + 52 >> 2] = $1;
  if (HEAP32[$4 + 52 >> 2] < 0) {
   HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + HEAP32[$4 + 56 >> 2];
  }
  if (HEAP32[$4 + 52 >> 2] < 0) {
   HEAP32[$4 + 76 >> 2] = 0;
   break label$1;
  }
  jsvIteratorNew($4 + 8 | 0, HEAP32[$4 + 72 >> 2], 1);
  while (1) {
   if (jsvIteratorHasElement($4 + 8 | 0) & 1) {
    $0 = jspIsInterrupted() ^ -1;
   } else {
    $0 = 0;
   }
   if ($0 & 1) {
    HEAP32[$4 + 4 >> 2] = jsvGetIntegerAndUnLock(jsvIteratorGetKey($4 + 8 | 0));
    if (!(HEAP32[$4 + 4 >> 2] < HEAP32[$4 + 64 >> 2] | HEAP32[$4 + 4 >> 2] >= HEAP32[$4 + 52 >> 2])) {
     jsvIteratorSetValue($4 + 8 | 0, HEAP32[$4 + 68 >> 2]);
    }
    jsvIteratorNext($4 + 8 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($4 + 8 | 0);
  HEAP32[$4 + 76 >> 2] = jsvLockAgain(HEAP32[$4 + 72 >> 2]);
 }
 global$0 = $4 + 80 | 0;
 return HEAP32[$4 + 76 >> 2];
}
function jswrap_parseInt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 144 | 0;
 global$0 = $2;
 HEAP32[$2 + 136 >> 2] = $0;
 HEAP32[$2 + 132 >> 2] = $1;
 HEAP32[$2 + 128 >> 2] = 0;
 if (jsvIsNumeric(HEAP32[$2 + 132 >> 2]) & 1) {
  HEAP32[$2 + 128 >> 2] = jsvGetInteger(HEAP32[$2 + 132 >> 2]);
 }
 label$2 : {
  label$3 : {
   if (!(jsvIsFloat(HEAP32[$2 + 136 >> 2]) & 1)) {
    break label$3;
   }
   $0 = __DOUBLE_BITS(jsvGetFloat(HEAP32[$2 + 136 >> 2]));
   $1 = i64toi32_i32$HIGH_BITS & 2147483647;
   if (($1 | 0) == 2146435072 & $0 >>> 0 < 0 | $1 >>> 0 < 2146435072) {
    break label$3;
   }
   HEAP32[$2 + 140 >> 2] = jsvNewFromFloat(nan);
   break label$2;
  }
  $0 = $2 + 48 | 0;
  HEAP32[$2 + 44 >> 2] = $0;
  jsvGetString(HEAP32[$2 + 136 >> 2], $0, 70);
  HEAP8[$2 + 43 | 0] = 0;
  if (!(HEAP8[$2 + 48 | 0] != 48 | (HEAP32[$2 + 128 >> 2] != 16 ? HEAP32[$2 + 128 >> 2] : 0) | (HEAP8[$2 + 49 | 0] != 88 ? HEAP8[$2 + 49 | 0] != 120 : 0))) {
   HEAP32[$2 + 128 >> 2] = 16;
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 44 >> 2] + 2;
  }
  if (!HEAP32[$2 + 128 >> 2]) {
   HEAP32[$2 + 128 >> 2] = 10;
  }
  HEAP32[$2 + 24 >> 2] = stringToIntWithRadix(HEAP32[$2 + 44 >> 2], HEAP32[$2 + 128 >> 2], $2 + 43 | 0, $2 + 36 | 0);
  HEAP32[$2 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
  if (HEAP8[$2 + 43 | 0] & 1) {
   HEAP32[$2 + 140 >> 2] = jsvNewFromFloat(nan);
   break label$2;
  }
  if (HEAP32[$2 + 36 >> 2] == ($2 + 117 | 0)) {
   jsExceptionHere(1, 32814, 0);
   HEAP32[$2 + 140 >> 2] = jsvNewFromFloat(nan);
   break label$2;
  }
  HEAP32[$2 + 140 >> 2] = jsvNewFromLongInteger(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 28 >> 2]);
 }
 global$0 = $2 + 144 | 0;
 return HEAP32[$2 + 140 >> 2];
}
function jsfLoadBootCodeFromFlash($0) {
 var $1 = 0;
 $1 = global$0 - 80 | 0;
 global$0 = $1;
 HEAP8[$1 + 78 | 0] = $0;
 if ((jshPinGetValue(24) & 1) != 1) {
  $0 = HEAPU8[2483] | HEAPU8[2484] << 8 | (HEAPU8[2485] << 16 | HEAPU8[2486] << 24);
  HEAP8[$1 + 74 | 0] = $0;
  HEAP8[$1 + 75 | 0] = $0 >>> 8;
  HEAP8[$1 + 76 | 0] = $0 >>> 16;
  HEAP8[$1 + 77 | 0] = $0 >>> 24;
  $0 = HEAPU8[2480] | HEAPU8[2481] << 8 | (HEAPU8[2482] << 16 | HEAPU8[2483] << 24);
  HEAP8[$1 + 71 | 0] = $0;
  HEAP8[$1 + 72 | 0] = $0 >>> 8;
  HEAP8[$1 + 73 | 0] = $0 >>> 16;
  HEAP8[$1 + 74 | 0] = $0 >>> 24;
  HEAP32[$1 + 64 >> 2] = 0;
  while (1) {
   if (HEAP32[$1 + 64 >> 2] < 4) {
    HEAP8[$1 + 76 | 0] = HEAP32[$1 + 64 >> 2] + 48;
    jsfNameFromString($1 + 32 | 0, $1 + 71 | 0);
    HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 56 >> 2];
    $0 = HEAP32[$1 + 52 >> 2];
    HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 48 >> 2];
    HEAP32[$1 + 20 >> 2] = $0;
    $0 = HEAP32[$1 + 44 >> 2];
    HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 40 >> 2];
    HEAP32[$1 + 12 >> 2] = $0;
    $0 = HEAP32[$1 + 36 >> 2];
    HEAP32[$1 >> 2] = HEAP32[$1 + 32 >> 2];
    HEAP32[$1 + 4 >> 2] = $0;
    HEAP32[$1 + 60 >> 2] = jsfReadFile($1, 0, 0);
    if (HEAP32[$1 + 60 >> 2]) {
     jsvUnLock2(jspEvaluateVar(HEAP32[$1 + 60 >> 2], 0, 0), HEAP32[$1 + 60 >> 2]);
    }
    HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 64 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 HEAP32[$1 + 28 >> 2] = jsfGetBootCodeFromFlash(HEAP8[$1 + 78 | 0] & 1);
 label$5 : {
  if (!HEAP32[$1 + 28 >> 2]) {
   HEAP8[$1 + 79 | 0] = 0;
   break label$5;
  }
  jsvUnLock2(jspEvaluateVar(HEAP32[$1 + 28 >> 2], 0, 0), HEAP32[$1 + 28 >> 2]);
  HEAP8[$1 + 79 | 0] = 1;
 }
 global$0 = $1 + 80 | 0;
}
function log($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     wasm2js_scratch_store_f64(+$0);
     $1 = wasm2js_scratch_load_i32(1) | 0;
     $3 = wasm2js_scratch_load_i32(0) | 0;
     if (($1 | 0) > 0 ? 1 : ($1 | 0) >= 0 ? $3 >>> 0 < 0 ? 0 : 1 : 0) {
      $5 = $1;
      if ($1 >>> 0 > 1048575) {
       break label$4;
      }
     }
     if (!($1 & 2147483647 | $3)) {
      return +(-1 / ($0 * $0));
     }
     if (($1 | 0) > -1 ? 1 : ($1 | 0) >= -1 ? $3 >>> 0 <= 4294967295 ? 0 : 1 : 0) {
      break label$3;
     }
     return +(($0 - $0) / 0);
    }
    if ($5 >>> 0 > 2146435071) {
     break label$1;
    }
    $1 = 1072693248;
    $6 = -1023;
    if (($5 | 0) != 1072693248) {
     $1 = $5;
     break label$2;
    }
    if ($3) {
     break label$2;
    }
    return 0;
   }
   wasm2js_scratch_store_f64(+($0 * 0x40000000000000));
   $1 = wasm2js_scratch_load_i32(1) | 0;
   $3 = wasm2js_scratch_load_i32(0) | 0;
   $6 = -1077;
  }
  $1 = $1 + 614242 | 0;
  $4 = +(($1 >>> 20) + $6 | 0);
  $7 = $4 * .6931471803691238;
  $1 = ($1 & 1048575) + 1072079006 | 0;
  wasm2js_scratch_store_i32(0, $3 | 0);
  wasm2js_scratch_store_i32(1, $1 | 0);
  $0 = +wasm2js_scratch_load_f64() + -1;
  $2 = $0 / ($0 + 2);
  $8 = $0;
  $9 = $4 * 1.9082149292705877e-10;
  $10 = $2;
  $4 = $0 * ($0 * .5);
  $2 = $2 * $2;
  $0 = $2 * $2;
  $0 = $7 + ($8 + ($9 + $10 * ($4 + ($0 * ($0 * ($0 * .15313837699209373 + .22222198432149784) + .3999999999940942) + $2 * ($0 * ($0 * ($0 * .14798198605116586 + .1818357216161805) + .2857142874366239) + .6666666666666735))) - $4));
 }
 return +$0;
}
function void_20tflite__ops__micro__maximum_minimum__TFLiteOperation_long_20long_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 92 >> 2] = $0;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP32[$3 + 84 >> 2] = $2;
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 - -64 | 0, HEAP32[HEAP32[$3 + 84 >> 2] >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 32 | 0, HEAP32[HEAP32[$3 + 84 >> 2] + 4 >> 2]);
 $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] + 4 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 8 | 0, HEAP32[HEAP32[$3 + 84 >> 2] + 8 >> 2]);
 void_20tflite__reference_ops__MaximumMinimumBroadcast4DSlow_long_20long_2c_20long_20long_20_28__29_28long_20long_2c_20long_20long_29__28tflite__RuntimeShape_20const__2c_20long_20long_20const__2c_20tflite__RuntimeShape_20const__2c_20long_20long_20const__2c_20tflite__RuntimeShape_20const__2c_20long_20long__2c_20long_20long_20_28__29_28long_20long_2c_20long_20long_29_29($3 - -64 | 0, $0, $3 + 32 | 0, $1, $3 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] + 8 >> 2]), 626);
 $0 = $3 - -64 | 0;
 $1 = $3 + 32 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($3 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($1);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $3 + 96 | 0;
}
function void_20tflite__ops__micro__maximum_minimum__TFLiteOperation_long_20long_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 92 >> 2] = $0;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP32[$3 + 84 >> 2] = $2;
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 - -64 | 0, HEAP32[HEAP32[$3 + 84 >> 2] >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 32 | 0, HEAP32[HEAP32[$3 + 84 >> 2] + 4 >> 2]);
 $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] + 4 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 8 | 0, HEAP32[HEAP32[$3 + 84 >> 2] + 8 >> 2]);
 void_20tflite__reference_ops__MaximumMinimumBroadcast4DSlow_long_20long_2c_20long_20long_20_28__29_28long_20long_2c_20long_20long_29__28tflite__RuntimeShape_20const__2c_20long_20long_20const__2c_20tflite__RuntimeShape_20const__2c_20long_20long_20const__2c_20tflite__RuntimeShape_20const__2c_20long_20long__2c_20long_20long_20_28__29_28long_20long_2c_20long_20long_29_29($3 - -64 | 0, $0, $3 + 32 | 0, $1, $3 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] + 8 >> 2]), 621);
 $0 = $3 - -64 | 0;
 $1 = $3 + 32 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($3 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($1);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $3 + 96 | 0;
}
function tflite__ops__micro__floor__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 96 | 0;
 global$0 = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP32[$2 + 84 >> 2] = $1;
 HEAP32[$2 + 80 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 88 >> 2], HEAP32[$2 + 84 >> 2], 0);
 label$1 : {
  if (HEAP32[HEAP32[$2 + 80 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$2 + 88 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 88 >> 2];
   $3 = HEAP32[HEAP32[$2 + 80 >> 2] >> 2];
   HEAP32[$2 + 20 >> 2] = 1;
   HEAP32[$2 + 16 >> 2] = $3;
   HEAP32[$2 + 12 >> 2] = 45672;
   HEAP32[$2 + 8 >> 2] = 45660;
   HEAP32[$2 + 4 >> 2] = 31;
   HEAP32[$2 >> 2] = 45564;
   FUNCTION_TABLE[$0]($1, 45538, $2);
   HEAP32[$2 + 92 >> 2] = 1;
   break label$1;
  }
  $0 = $2 + 56 | 0;
  HEAP32[$2 + 76 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 88 >> 2], HEAP32[$2 + 84 >> 2]);
  tflite__GetTensorShape_28TfLiteTensor_20const__29($0, HEAP32[$2 + 80 >> 2]);
  $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 80 >> 2]);
  tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 24 | 0, HEAP32[$2 + 76 >> 2]);
  tflite__reference_ops__Floor_28tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($2 + 56 | 0, $0, $2 + 24 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 76 >> 2]));
  $0 = $2 + 56 | 0;
  tflite__RuntimeShape___RuntimeShape_28_29($2 + 24 | 0);
  tflite__RuntimeShape___RuntimeShape_28_29($0);
  HEAP32[$2 + 92 >> 2] = 0;
 }
 global$0 = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}
function jswrap_tensorflow_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1 : {
  if (HEAP32[$2 + 40 >> 2] < 512) {
   jsExceptionHere(1, 39530, 0);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 32 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = jsvGetDataPointer(HEAP32[$2 + 36 >> 2], $2 + 32 | 0);
  if (!HEAP32[$2 + 28 >> 2]) {
   jsExceptionHere(3, 39549, 0);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 24 >> 2] = jspNewObject(0, 39588);
  if (!HEAP32[$2 + 24 >> 2]) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  $1 = HEAP32[$2 + 32 >> 2];
  $0 = global$0 - 16 | 0;
  HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 40 >> 2];
  HEAP32[$0 + 8 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = HEAP32[$0 + 12 >> 2] + 4240;
  HEAP32[$2 + 16 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 20 >> 2]);
  if (!HEAP32[$2 + 16 >> 2]) {
   jsExceptionHere(1, 39607, 0);
   jsvUnLock(HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvGetDataPointer(HEAP32[$2 + 16 >> 2], $2 + 20 | 0);
  if (!HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  if (!(tf_create(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 28 >> 2]) & 1)) {
   jsExceptionHere(1, 39652, 0);
   jsvUnLock2(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 16 >> 2]);
  }
  jsvObjectSetChild(HEAP32[$2 + 24 >> 2], 39685, HEAP32[$2 + 36 >> 2]);
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 39691, HEAP32[$2 + 16 >> 2]);
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 24 >> 2];
 }
 global$0 = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}
function tflite__ComputePaddingHeightWidth_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLitePadding_2c_20int__2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 var $12 = 0;
 $12 = global$0 - 48 | 0;
 global$0 = $12;
 HEAP32[$12 + 44 >> 2] = $1;
 HEAP32[$12 + 40 >> 2] = $2;
 HEAP32[$12 + 36 >> 2] = $3;
 HEAP32[$12 + 32 >> 2] = $4;
 HEAP32[$12 + 28 >> 2] = $5;
 HEAP32[$12 + 24 >> 2] = $6;
 HEAP32[$12 + 20 >> 2] = $7;
 HEAP32[$12 + 16 >> 2] = $8;
 HEAP32[$12 + 12 >> 2] = $9;
 HEAP32[$12 + 8 >> 2] = $10;
 HEAP32[$12 + 4 >> 2] = $11;
 $1 = tflite__ComputeOutSize_28TfLitePadding_2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$12 + 12 >> 2], HEAP32[$12 + 24 >> 2], HEAP32[$12 + 16 >> 2], HEAP32[$12 + 40 >> 2], HEAP32[$12 + 32 >> 2]);
 HEAP32[HEAP32[$12 + 4 >> 2] >> 2] = $1;
 $1 = tflite__ComputeOutSize_28TfLitePadding_2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$12 + 12 >> 2], HEAP32[$12 + 28 >> 2], HEAP32[$12 + 20 >> 2], HEAP32[$12 + 44 >> 2], HEAP32[$12 + 36 >> 2]);
 HEAP32[HEAP32[$12 + 8 >> 2] >> 2] = $1;
 HEAP32[$12 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = tflite__ComputePaddingWithOffset_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__29(HEAP32[$12 + 44 >> 2], HEAP32[$12 + 36 >> 2], HEAP32[$12 + 28 >> 2], HEAP32[$12 + 20 >> 2], HEAP32[HEAP32[$12 + 8 >> 2] >> 2], $12);
 HEAP32[$0 + 12 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$0 >> 2] = tflite__ComputePaddingWithOffset_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__29(HEAP32[$12 + 40 >> 2], HEAP32[$12 + 32 >> 2], HEAP32[$12 + 24 >> 2], HEAP32[$12 + 16 >> 2], HEAP32[HEAP32[$12 + 4 >> 2] >> 2], $12);
 HEAP32[$0 + 8 >> 2] = HEAP32[$12 >> 2];
 global$0 = $12 + 48 | 0;
}
function jsiSoftKill() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 48 | 0;
 global$0 = $0;
 jsiExecuteEventCallbackOn(5267, 5521, 0, 0);
 HEAP32[23786] = 0;
 jsiInputLineCursorMoved();
 jsvUnLock(HEAP32[23784]);
 HEAP32[23784] = 0;
 jswrap_banglejs_kill();
 jswrap_pipe_kill();
 jswrap_waveform_kill();
 HEAP8[97073] = 0;
 HEAP8[97074] = 0;
 if (HEAP32[23781]) {
  jsvUnLock(HEAP32[23781]);
  HEAP32[23781] = 0;
 }
 if (HEAPU16[47564]) {
  jsvUnRefRef(HEAPU16[47564]);
  HEAP16[47564] = 0;
 }
 if (HEAPU16[47565]) {
  $1 = $0 + 40 | 0;
  HEAP32[$0 + 44 >> 2] = jsvLock(HEAPU16[47565]);
  jsvObjectIteratorNew($1, HEAP32[$0 + 44 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($0 + 40 | 0) & 1) {
    $1 = $0 + 40 | 0;
    HEAP32[$0 + 36 >> 2] = jsvObjectIteratorGetValue($1);
    HEAP32[$0 + 32 >> 2] = jsvObjectGetChild(HEAP32[$0 + 36 >> 2], 5263, 0);
    jshPinWatch(jshGetPinFromVar(HEAP32[$0 + 32 >> 2]) & 255, 0);
    jsvUnLock2(HEAP32[$0 + 32 >> 2], HEAP32[$0 + 36 >> 2]);
    jsvObjectIteratorNext($1);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($0 + 40 | 0);
  jsvUnRef(HEAP32[$0 + 44 >> 2]);
  jsvUnLock(HEAP32[$0 + 44 >> 2]);
  HEAP16[47565] = 0;
 }
 if (HEAPU8[55076]) {
  jsvObjectSetChildAndUnLock(HEAP32[23775], 5252, jsvNewFromInteger(HEAPU8[55076]));
 }
 HEAP32[$0 + 28 >> 2] = jsvNewFromEmptyString();
 if (HEAP32[$0 + 28 >> 2]) {
  $1 = $0 + 8 | 0;
  jsvStringIteratorNew($1, HEAP32[$0 + 28 >> 2], 0);
  jsiDumpHardwareInitialisation(4, $1, 0);
  jsvStringIteratorFree($1);
  jsvObjectSetChild(HEAP32[23775], 5258, HEAP32[$0 + 28 >> 2]);
  jsvUnLock(HEAP32[$0 + 28 >> 2]);
 }
 HEAP16[47566] = HEAPU16[47566] & -2049;
 global$0 = $0 + 48 | 0;
}
function jswrap_e_dumpFragmentation() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 while (1) {
  if (HEAPU32[$0 + 8 >> 2] < HEAPU32[13337]) {
   HEAP32[$0 + 4 >> 2] = _jsvGetAddressOf(HEAP32[$0 + 8 >> 2] + 1 & 65535);
   label$3 : {
    if (!(HEAPU16[HEAP32[$0 + 4 >> 2] + 14 >> 1] & 63)) {
     jsiConsolePrintString(32114);
     $1 = HEAP32[$0 + 12 >> 2];
     HEAP32[$0 + 12 >> 2] = $1 + 1;
     if (($1 | 0) > 80) {
      jsiConsolePrintString(32116);
      HEAP32[$0 + 12 >> 2] = 0;
     }
     break label$3;
    }
    label$6 : {
     if (jsvGetLocks(HEAP32[$0 + 4 >> 2]) & 255) {
      jsiConsolePrintString(32118);
      break label$6;
     }
     jsiConsolePrintString(32120);
    }
    $1 = HEAP32[$0 + 12 >> 2];
    HEAP32[$0 + 12 >> 2] = $1 + 1;
    if (($1 | 0) > 80) {
     jsiConsolePrintString(32116);
     HEAP32[$0 + 12 >> 2] = 0;
    }
    if (jsvIsFlatString(HEAP32[$0 + 4 >> 2]) & 1) {
     HEAP32[$0 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 4 >> 2]);
     HEAP32[$0 + 8 >> 2] = HEAP32[$0 >> 2] + HEAP32[$0 + 8 >> 2];
     while (1) {
      label$11 : {
       $1 = HEAP32[$0 >> 2];
       HEAP32[$0 >> 2] = $1 + -1;
       if (!$1) {
        break label$11;
       }
       jsiConsolePrintString(32122);
       $1 = HEAP32[$0 + 12 >> 2];
       HEAP32[$0 + 12 >> 2] = $1 + 1;
       if (($1 | 0) > 80) {
        jsiConsolePrintString(32116);
        HEAP32[$0 + 12 >> 2] = 0;
       }
       continue;
      }
      break;
     }
    }
   }
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 jsiConsolePrintString(32116);
 global$0 = $0 + 16 | 0;
}
function jswrap_object_defineProperty($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 + -64 | 0;
 global$0 = $3;
 HEAP32[$3 + 56 >> 2] = $0;
 HEAP32[$3 + 52 >> 2] = $1;
 HEAP32[$3 + 48 >> 2] = $2;
 label$1 : {
  if (!(jsvIsObject(HEAP32[$3 + 56 >> 2]) & 1)) {
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 56 >> 2];
   jsExceptionHere(1, 34933, $3 + 16 | 0);
   HEAP32[$3 + 60 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsObject(HEAP32[$3 + 48 >> 2]) & 1)) {
   HEAP32[$3 >> 2] = HEAP32[$3 + 48 >> 2];
   jsExceptionHere(1, 34974, $3);
   HEAP32[$3 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 44 >> 2] = jsvAsArrayIndex(HEAP32[$3 + 52 >> 2]);
  HEAP32[$3 + 40 >> 2] = 0;
  HEAP32[$3 + 36 >> 2] = jsvObjectGetChild(HEAP32[$3 + 48 >> 2], 34919, 0);
  HEAP32[$3 + 32 >> 2] = jsvObjectGetChild(HEAP32[$3 + 48 >> 2], 34923, 0);
  if (!(HEAP32[$3 + 32 >> 2] ? 0 : !HEAP32[$3 + 36 >> 2])) {
   HEAP32[$3 + 40 >> 2] = jsvNewWithFlags(6);
   if (HEAP32[$3 + 40 >> 2]) {
    if (HEAP32[$3 + 36 >> 2]) {
     jsvObjectSetChild(HEAP32[$3 + 40 >> 2], 34919, HEAP32[$3 + 36 >> 2]);
    }
    if (HEAP32[$3 + 32 >> 2]) {
     jsvObjectSetChild(HEAP32[$3 + 40 >> 2], 34923, HEAP32[$3 + 32 >> 2]);
    }
   }
   jsvUnLock2(HEAP32[$3 + 36 >> 2], HEAP32[$3 + 32 >> 2]);
  }
  if (!HEAP32[$3 + 40 >> 2]) {
   HEAP32[$3 + 40 >> 2] = jsvObjectGetChild(HEAP32[$3 + 48 >> 2], 34927, 0);
  }
  jsvObjectSetChildVar(HEAP32[$3 + 56 >> 2], HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2]);
  jsvUnLock2(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2]);
  HEAP32[$3 + 60 >> 2] = jsvLockAgain(HEAP32[$3 + 56 >> 2]);
 }
 global$0 = $3 - -64 | 0;
 return HEAP32[$3 + 60 >> 2];
}
function jswrap_process_memory() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = global$0 - 48 | 0;
 global$0 = $0;
 HEAP32[$0 + 40 >> 2] = jshGetSystemTime();
 HEAP32[$0 + 44 >> 2] = i64toi32_i32$HIGH_BITS;
 HEAP32[$0 + 36 >> 2] = jsvGarbageCollect();
 HEAP32[$0 + 24 >> 2] = jshGetSystemTime();
 HEAP32[$0 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
 HEAP32[$0 + 20 >> 2] = jsvNewWithFlags(5);
 if (HEAP32[$0 + 20 >> 2]) {
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = jsvObjectGetChild(HEAP32[23775], 36494, 0);
  if (HEAP32[$0 + 12 >> 2]) {
   HEAP32[$0 + 16 >> 2] = jsvCountJsVarsUsed(HEAP32[$0 + 12 >> 2]);
   jsvUnLock(HEAP32[$0 + 12 >> 2]);
  }
  HEAP32[$0 + 8 >> 2] = jsvGetMemoryUsage() - HEAP32[$0 + 16 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[13337];
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 20 >> 2], 36502, jsvNewFromInteger(HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 20 >> 2], 36507, jsvNewFromInteger(HEAP32[$0 + 8 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 20 >> 2], 36513, jsvNewFromInteger(HEAP32[$0 + 4 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 20 >> 2], 36494, jsvNewFromInteger(HEAP32[$0 + 16 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 20 >> 2], 36519, jsvNewFromInteger(HEAP32[$0 + 36 >> 2]));
  $1 = HEAP32[$0 + 24 >> 2];
  $2 = HEAP32[$0 + 40 >> 2];
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 20 >> 2], 36522, jsvNewFromFloat(jshGetMillisecondsFromTime($1 - $2 | 0, HEAP32[$0 + 28 >> 2] - (HEAP32[$0 + 44 >> 2] + ($1 >>> 0 < $2 >>> 0) | 0) | 0)));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 20 >> 2], 36529, jsvNewFromInteger(16));
 }
 global$0 = $0 + 48 | 0;
 return HEAP32[$0 + 20 >> 2];
}
function jswrap_object_emit($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 80 | 0;
 global$0 = $3;
 HEAP32[$3 + 76 >> 2] = $0;
 HEAP32[$3 + 72 >> 2] = $1;
 HEAP32[$3 + 68 >> 2] = $2;
 label$1 : {
  if (!(jsvHasChildren(HEAP32[$3 + 76 >> 2]) & 1)) {
   jsExceptionHere(3, 35149, 0);
   break label$1;
  }
  if (!(jsvIsString(HEAP32[$3 + 72 >> 2]) & 1)) {
   jsExceptionHere(3, 35371, 0);
   break label$1;
  }
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 72 >> 2];
  HEAP32[$3 + 64 >> 2] = jsvVarPrintf(35347, $3 + 16 | 0);
  if (!HEAP32[$3 + 64 >> 2]) {
   break label$1;
  }
  HEAP32[$3 + 60 >> 2] = 4;
  HEAP32[$3 + 28 >> 2] = 0;
  jsvObjectIteratorNew($3 + 24 | 0, HEAP32[$3 + 68 >> 2]);
  while (1) {
   label$5 : {
    if (!(jsvObjectIteratorHasValue($3 + 24 | 0) & 1)) {
     break label$5;
    }
    if (HEAPU32[$3 + 28 >> 2] >= 4) {
     HEAP32[$3 >> 2] = 4;
     jsExceptionHere(3, 35428, $3);
     break label$5;
    }
    $0 = $3 + 32 | 0;
    $1 = $3 + 24 | 0;
    $2 = jsvObjectIteratorGetValue($1);
    $4 = HEAP32[$3 + 28 >> 2];
    HEAP32[$3 + 28 >> 2] = $4 + 1;
    HEAP32[$0 + ($4 << 2) >> 2] = $2;
    jsvObjectIteratorNext($1);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($3 + 24 | 0);
  HEAP32[$3 + 20 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromVar(HEAP32[$3 + 76 >> 2], HEAP32[$3 + 64 >> 2], 0));
  jsvUnLock(HEAP32[$3 + 64 >> 2]);
  if (HEAP32[$3 + 20 >> 2]) {
   jsiQueueEvents(HEAP32[$3 + 76 >> 2], HEAP32[$3 + 20 >> 2], $3 + 32 | 0, HEAP32[$3 + 28 >> 2]);
  }
  $0 = $3 + 32 | 0;
  jsvUnLock(HEAP32[$3 + 20 >> 2]);
  jsvUnLockMany(HEAP32[$3 + 28 >> 2], $0);
 }
 global$0 = $3 + 80 | 0;
}
function jswrap_espruino_toString($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 HEAP32[$1 + 40 >> 2] = $0;
 label$1 : {
  if ((jsvGetArrayLength(HEAP32[$1 + 40 >> 2]) | 0) == 1) {
   HEAP32[$1 + 36 >> 2] = jsvGetArrayItem(HEAP32[$1 + 40 >> 2], 0);
   if (jsvIsFlatString(HEAP32[$1 + 36 >> 2]) & 1) {
    HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 36 >> 2];
    break label$1;
   }
   if (!(!(jsvIsArrayBuffer(HEAP32[$1 + 36 >> 2]) & 1) | (HEAPU16[HEAP32[$1 + 36 >> 2] + 4 >> 1] & 15) != 1 | HEAPU16[HEAP32[$1 + 36 >> 2] >> 1])) {
    HEAP32[$1 + 32 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$1 + 36 >> 2]);
    label$5 : {
     if (!(jsvIsFlatString(HEAP32[$1 + 32 >> 2]) & 1)) {
      break label$5;
     }
     if ((jsvGetCharactersInVar(HEAP32[$1 + 32 >> 2]) | 0) != HEAPU16[HEAP32[$1 + 36 >> 2] + 2 >> 1]) {
      break label$5;
     }
     jsvUnLock(HEAP32[$1 + 36 >> 2]);
     HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 32 >> 2];
     break label$1;
    }
    jsvUnLock(HEAP32[$1 + 32 >> 2]);
   }
   jsvUnLock(HEAP32[$1 + 36 >> 2]);
  }
  HEAP32[$1 + 28 >> 2] = jsvIterateCallbackCount(HEAP32[$1 + 40 >> 2]);
  HEAP32[$1 + 24 >> 2] = jsvNewFlatStringOfLength(HEAP32[$1 + 28 >> 2]);
  if (!HEAP32[$1 + 24 >> 2]) {
   jsvGarbageCollect();
   HEAP32[$1 + 24 >> 2] = jsvNewFlatStringOfLength(HEAP32[$1 + 28 >> 2]);
  }
  if (!HEAP32[$1 + 24 >> 2]) {
   HEAP32[$1 + 44 >> 2] = 0;
   break label$1;
  }
  jsvStringIteratorNew($1, HEAP32[$1 + 24 >> 2], 0);
  jsvIterateCallback(HEAP32[$1 + 40 >> 2], 511, $1);
  jsvStringIteratorFree($1);
  HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 24 >> 2];
 }
 global$0 = $1 + 48 | 0;
 return HEAP32[$1 + 44 >> 2];
}
function jswrap_arraybufferview_set($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 112 | 0;
 global$0 = $3;
 HEAP32[$3 + 108 >> 2] = $0;
 HEAP32[$3 + 104 >> 2] = $1;
 HEAP32[$3 + 100 >> 2] = $2;
 label$1 : {
  label$2 : {
   if (jsvIsString(HEAP32[$3 + 104 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsArray(HEAP32[$3 + 104 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsArrayBuffer(HEAP32[$3 + 104 >> 2]) & 1) {
    break label$2;
   }
   HEAP32[$3 >> 2] = HEAP32[$3 + 104 >> 2];
   jsExceptionHere(1, 30892, $3);
   break label$1;
  }
  $0 = $3 + 16 | 0;
  jsvIteratorNew($3 + 56 | 0, HEAP32[$3 + 104 >> 2], 1);
  jsvArrayBufferIteratorNew($0, HEAP32[$3 + 108 >> 2], HEAP32[$3 + 100 >> 2]);
  $0 = $3;
  if (HEAPU16[$3 + 36 >> 1] & 32) {
   $1 = jsvIsString(HEAP32[$3 + 104 >> 2]);
  } else {
   $1 = 1;
  }
  HEAP8[$0 + 15 | 0] = $1 & 1;
  while (1) {
   if (jsvIteratorHasElement($3 + 56 | 0) & 1) {
    $0 = jsvArrayBufferIteratorHasElement($3 + 16 | 0);
   } else {
    $0 = 0;
   }
   if ($0 & 1) {
    label$9 : {
     if (HEAP8[$3 + 15 | 0] & 1) {
      jsvArrayBufferIteratorSetIntegerValue($3 + 16 | 0, jsvIteratorGetIntegerValue($3 + 56 | 0));
      break label$9;
     }
     $0 = $3 + 16 | 0;
     HEAP32[$3 + 8 >> 2] = jsvIteratorGetValue($3 + 56 | 0);
     jsvArrayBufferIteratorSetValue($0, HEAP32[$3 + 8 >> 2]);
     jsvUnLock(HEAP32[$3 + 8 >> 2]);
    }
    $0 = $3 + 56 | 0;
    jsvArrayBufferIteratorNext($3 + 16 | 0);
    jsvIteratorNext($0);
    continue;
   }
   break;
  }
  $0 = $3 + 56 | 0;
  jsvArrayBufferIteratorFree($3 + 16 | 0);
  jsvIteratorFree($0);
 }
 global$0 = $3 + 112 | 0;
}
function atan($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 wasm2js_scratch_store_f64(+$0);
 $1 = wasm2js_scratch_load_i32(1) | 0;
 $5 = wasm2js_scratch_load_i32(0) | 0;
 $4 = $1;
 $1 = $1 & 2147483647;
 label$1 : {
  if ($1 >>> 0 >= 1141899264) {
   $1 = $4 & 2147483647;
   if (($1 | 0) == 2146435072 & $5 >>> 0 > 0 | $1 >>> 0 > 2146435072) {
    break label$1;
   }
   return (($4 | 0) < 0 ? 1 : ($4 | 0) <= 0 ? $5 >>> 0 >= 0 ? 0 : 1 : 0) ? -1.5707963267948966 : 1.5707963267948966;
  }
  label$3 : {
   if ($1 >>> 0 <= 1071382527) {
    $3 = -1;
    if ($1 >>> 0 >= 1044381696) {
     break label$3;
    }
    break label$1;
   }
   $0 = Math_abs($0);
   if ($1 >>> 0 <= 1072889855) {
    if ($1 >>> 0 <= 1072037887) {
     $0 = ($0 + $0 + -1) / ($0 + 2);
     $3 = 0;
     break label$3;
    }
    $0 = ($0 + -1) / ($0 + 1);
    $3 = 1;
    break label$3;
   }
   if ($1 >>> 0 <= 1073971199) {
    $0 = ($0 + -1.5) / ($0 * 1.5 + 1);
    $3 = 2;
    break label$3;
   }
   $0 = -1 / $0;
   $3 = 3;
  }
  $1 = $3;
  $6 = $0 * $0;
  $2 = $6 * $6;
  $7 = $2 * ($2 * ($2 * ($2 * ($2 * -.036531572744216916 + -.058335701337905735) + -.0769187620504483) + -.11111110405462356) + -.19999999999876483);
  $2 = $6 * ($2 * ($2 * ($2 * ($2 * ($2 * .016285820115365782 + .049768779946159324) + .06661073137387531) + .09090887133436507) + .14285714272503466) + .3333333333333293);
  if (($1 | 0) <= -1) {
   return $0 - $0 * ($7 + $2);
  }
  $1 = $1 << 3;
  $0 = HEAPF64[$1 + 53184 >> 3] - ($0 * ($7 + $2) - HEAPF64[$1 + 53216 >> 3] - $0);
  $0 = (($4 | 0) < 0 ? 1 : ($4 | 0) <= 0 ? $5 >>> 0 >= 0 ? 0 : 1 : 0) ? -$0 : $0;
 }
 return $0;
}
function logf($0) {
 var $1 = 0, $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0);
 $1 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
 label$1 : {
  label$2 : {
   if (!(($1 | 0) > -1 ? $1 >>> 0 >= 8388608 : 0)) {
    if (!($1 & 2147483647)) {
     return Math_fround(Math_fround(-1) / Math_fround($0 * $0));
    }
    if (($1 | 0) <= -1) {
     return Math_fround(Math_fround($0 - $0) / Math_fround(0));
    }
    $1 = (wasm2js_scratch_store_f32(Math_fround($0 * Math_fround(33554432))), wasm2js_scratch_load_i32(0));
    $5 = -152;
    break label$2;
   }
   if ($1 >>> 0 > 2139095039) {
    break label$1;
   }
   $5 = -127;
   $0 = Math_fround(0);
   if (($1 | 0) == 1065353216) {
    break label$1;
   }
  }
  $1 = $1 + 4913933 | 0;
  $6 = Math_fround(($1 >>> 23) + $5 | 0);
  $0 = Math_fround((wasm2js_scratch_store_i32(0, ($1 & 8388607) + 1060439283 | 0), wasm2js_scratch_load_f32()) + Math_fround(-1));
  $2 = Math_fround($0 / Math_fround($0 + Math_fround(2)));
  $3 = Math_fround($2 * $2);
  $4 = Math_fround($3 * $3);
  $7 = $0;
  $0 = Math_fround($0 * Math_fround($0 * Math_fround(.5)));
  $0 = Math_fround(Math_fround($6 * Math_fround(.6931381225585938)) + Math_fround($7 + Math_fround(Math_fround(Math_fround($6 * Math_fround(905800061445916e-20)) + Math_fround($2 * Math_fround($0 + Math_fround(Math_fround($3 * Math_fround(Math_fround($4 * Math_fround(.2849878668785095)) + Math_fround(.6666666269302368))) + Math_fround($4 * Math_fround(Math_fround($4 * Math_fround(.24279078841209412)) + Math_fround(.40000972151756287))))))) - $0)));
 }
 return $0;
}
function jshFlashWriteAligned($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 28 >> 2];
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 24 >> 2] & 3;
 label$1 : {
  if (HEAP32[$3 + 12 >> 2]) {
   jshFlashRead($3 + 8 | 0, HEAP32[$3 + 24 >> 2] - HEAP32[$3 + 12 >> 2] | 0, 4);
   HEAP32[$3 + 4 >> 2] = 4 - HEAP32[$3 + 12 >> 2];
   if (HEAPU32[$3 + 4 >> 2] > HEAPU32[$3 + 20 >> 2]) {
    HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 20 >> 2];
   }
   $0 = $3 + 8 | 0;
   memcpy($0 + HEAP32[$3 + 12 >> 2] | 0, HEAP32[$3 + 16 >> 2], HEAP32[$3 + 4 >> 2]);
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 4 >> 2] + HEAP32[$3 + 16 >> 2];
   jshFlashRead($0, HEAP32[$3 + 24 >> 2] - HEAP32[$3 + 12 >> 2] | 0, 4);
   HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 4 >> 2] + HEAP32[$3 + 24 >> 2];
   if (HEAPU32[$3 + 4 >> 2] >= HEAPU32[$3 + 20 >> 2]) {
    break label$1;
   }
   HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 4 >> 2];
  }
  HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 20 >> 2] & 3;
  HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 12 >> 2];
  if (HEAP32[$3 + 20 >> 2]) {
   jshFlashRead(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
  }
  HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 20 >> 2] + HEAP32[$3 + 24 >> 2];
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 20 >> 2] + HEAP32[$3 + 16 >> 2];
  if (!HEAP32[$3 + 12 >> 2]) {
   break label$1;
  }
  jshFlashRead($3, HEAP32[$3 + 24 >> 2], 4);
  memcpy($3, HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2]);
  jshFlashRead($3, HEAP32[$3 + 24 >> 2], 4);
 }
 global$0 = $3 + 32 | 0;
}
function jstPinOutputAtTime($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 + -64 | 0;
 global$0 = $4;
 HEAP32[$4 + 56 >> 2] = $0;
 HEAP32[$4 + 60 >> 2] = $1;
 HEAP32[$4 + 52 >> 2] = $2;
 HEAP32[$4 + 48 >> 2] = 1;
 HEAP8[$4 + 47 | 0] = $3;
 $0 = HEAP32[$4 + 60 >> 2];
 $1 = HEAP32[$4 + 56 >> 2];
 HEAP8[$4 + 16 | 0] = $1;
 HEAP8[$4 + 17 | 0] = $1 >>> 8;
 HEAP8[$4 + 18 | 0] = $1 >>> 16;
 HEAP8[$4 + 19 | 0] = $1 >>> 24;
 HEAP8[$4 + 20 | 0] = $0;
 HEAP8[$4 + 21 | 0] = $0 >>> 8;
 HEAP8[$4 + 22 | 0] = $0 >>> 16;
 HEAP8[$4 + 23 | 0] = $0 >>> 24;
 HEAP8[$4 + 24 | 0] = 0;
 HEAP8[$4 + 25 | 0] = 0;
 HEAP8[$4 + 26 | 0] = 0;
 HEAP8[$4 + 27 | 0] = 0;
 HEAP8[$4 + 44 | 0] = 1;
 HEAP32[$4 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 12 >> 2] < 4) {
   $0 = HEAP32[$4 + 12 >> 2] + ($4 + 28 | 0) | 0;
   if (HEAP32[$4 + 12 >> 2] < HEAP32[$4 + 48 >> 2]) {
    $1 = HEAPU8[HEAP32[$4 + 52 >> 2] + HEAP32[$4 + 12 >> 2] | 0];
   } else {
    $1 = 255;
   }
   HEAP8[$0 | 0] = $1;
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP8[$4 + 32 | 0] = HEAPU8[$4 + 47 | 0];
 HEAP32[$4 + 8 >> 2] = 2e6;
 while (1) {
  $1 = !(utilTimerIsFull() & 1);
  $0 = 0;
  label$6 : {
   if ($1) {
    break label$6;
   }
   $1 = jspIsInterrupted() & 1;
   $0 = 0;
   if ($1) {
    break label$6;
   }
   $0 = HEAP32[$4 + 8 >> 2];
   HEAP32[$4 + 8 >> 2] = $0 + -1;
   $0 = ($0 | 0) > 0;
  }
  if ($0) {
   continue;
  }
  break;
 }
 label$7 : {
  if (HEAP32[$4 + 8 >> 2] > 0) {
   if (!(jspIsInterrupted() & 1)) {
    break label$7;
   }
  }
  jsExceptionHere(4, 7375, 0);
 }
 utilTimerInsertTask($4 + 16 | 0);
 global$0 = $4 - -64 | 0;
}
function jswrap_io_digitalRead($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 HEAP32[$1 + 40 >> 2] = $0;
 label$1 : {
  if (jsvIsArray(HEAP32[$1 + 40 >> 2]) & 1) {
   HEAP32[$1 + 36 >> 2] = 0;
   HEAP32[$1 + 32 >> 2] = 0;
   jsvObjectIteratorNew($1 + 24 | 0, HEAP32[$1 + 40 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue($1 + 24 | 0) & 1) {
     $0 = $1 + 24 | 0;
     HEAP32[$1 + 20 >> 2] = jsvObjectIteratorGetValue($0);
     HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 32 >> 2] << 1 | jshPinInput(jshGetPinFromVar(HEAP32[$1 + 20 >> 2]) & 255) & 1;
     jsvUnLock(HEAP32[$1 + 20 >> 2]);
     jsvObjectIteratorNext($0);
     HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 36 >> 2] + 1;
     continue;
    }
    break;
   }
   jsvObjectIteratorFree($1 + 24 | 0);
   if (!HEAP32[$1 + 36 >> 2]) {
    HEAP32[$1 + 44 >> 2] = 0;
    break label$1;
   }
   HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 32 >> 2];
   break label$1;
  }
  if (jsvIsObject(HEAP32[$1 + 40 >> 2]) & 1) {
   HEAP32[$1 + 16 >> 2] = 0;
   HEAP32[$1 + 12 >> 2] = jspGetNamedField(HEAP32[$1 + 40 >> 2], 33481, 0);
   label$7 : {
    if (jsvIsFunction(HEAP32[$1 + 12 >> 2]) & 1) {
     HEAP32[$1 + 16 >> 2] = jsvGetIntegerAndUnLock(jspeFunctionCall(HEAP32[$1 + 12 >> 2], 0, HEAP32[$1 + 40 >> 2], 0, 0, 0));
     break label$7;
    }
    jsExceptionHere(1, 33468, 0);
   }
   jsvUnLock(HEAP32[$1 + 12 >> 2]);
   HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 16 >> 2];
   break label$1;
  }
  HEAP8[$1 + 11 | 0] = jshGetPinFromVar(HEAP32[$1 + 40 >> 2]);
  HEAP32[$1 + 44 >> 2] = jshPinInput(HEAPU8[$1 + 11 | 0]) & 1;
 }
 global$0 = $1 + 48 | 0;
 return HEAP32[$1 + 44 >> 2];
}
function __jspeConditionalExpression($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1 : {
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 63) {
   jslGetNextToken();
   label$3 : {
    if ((HEAP32[23778] & 63) != 1) {
     jsvUnLock(__jspeAssignmentExpression(jspeConditionalExpression()));
     if (!(jslMatch(58) & 1)) {
      HEAP32[$1 + 28 >> 2] = 0;
      break label$1;
     }
     jsvUnLock(__jspeAssignmentExpression(jspeConditionalExpression()));
     break label$3;
    }
    HEAP8[$1 + 23 | 0] = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$1 + 24 >> 2])) & 1;
    jsvUnLock(HEAP32[$1 + 24 >> 2]);
    label$6 : {
     if (HEAP8[$1 + 23 | 0] & 1) {
      HEAP32[$1 + 24 >> 2] = __jspeAssignmentExpression(jspeConditionalExpression());
      if (!(jslMatch(58) & 1)) {
       HEAP32[$1 + 28 >> 2] = 0;
       break label$1;
      }
      HEAP32[$1 + 16 >> 2] = HEAP32[23778];
      jspSetNoExecute();
      jsvUnLock(__jspeAssignmentExpression(jspeConditionalExpression()));
      HEAP32[23778] = HEAP32[23778] & -1664 | HEAP32[$1 + 16 >> 2] & 1663;
      break label$6;
     }
     HEAP32[$1 + 12 >> 2] = HEAP32[23778];
     jspSetNoExecute();
     jsvUnLock(__jspeAssignmentExpression(jspeConditionalExpression()));
     HEAP32[23778] = HEAP32[23778] & -1664 | HEAP32[$1 + 12 >> 2] & 1663;
     if (!(jslMatch(58) & 1)) {
      HEAP32[$1 + 28 >> 2] = 0;
      break label$1;
     }
     HEAP32[$1 + 24 >> 2] = __jspeAssignmentExpression(jspeConditionalExpression());
    }
   }
  }
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 24 >> 2];
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function jswrap_json_stringify($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 HEAP32[$3 + 32 >> 2] = 3280;
 HEAP32[$3 + 28 >> 2] = jsvNewFromEmptyString();
 if (HEAP32[$3 + 28 >> 2]) {
  $0 = $3 + 17 | 0;
  HEAP8[$0 | 0] = 0;
  HEAP8[$0 + 1 | 0] = 0;
  HEAP8[$0 + 2 | 0] = 0;
  HEAP8[$0 + 3 | 0] = 0;
  HEAP8[$0 + 4 | 0] = 0;
  HEAP8[$0 + 5 | 0] = 0;
  HEAP8[$0 + 6 | 0] = 0;
  HEAP8[$0 + 7 | 0] = 0;
  HEAP8[$0 + 7 | 0] = 0;
  HEAP8[$0 + 8 | 0] = 0;
  HEAP8[$0 + 9 | 0] = 0;
  HEAP8[$0 + 10 | 0] = 0;
  label$2 : {
   if (jsvIsUndefined(HEAP32[$3 + 36 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsNull(HEAP32[$3 + 36 >> 2]) & 1) {
    break label$2;
   }
   label$4 : {
    if (jsvIsNumeric(HEAP32[$3 + 36 >> 2]) & 1) {
     HEAP32[$3 + 12 >> 2] = jsvGetInteger(HEAP32[$3 + 36 >> 2]);
     if (HEAPU32[$3 + 12 >> 2] > 10) {
      HEAP32[$3 + 12 >> 2] = 10;
     }
     HEAP8[HEAP32[$3 + 12 >> 2] + ($3 + 17 | 0) | 0] = 0;
     while (1) {
      if (HEAP32[$3 + 12 >> 2]) {
       $0 = HEAP32[$3 + 12 >> 2] + -1 | 0;
       HEAP32[$3 + 12 >> 2] = $0;
       HEAP8[$0 + ($3 + 17 | 0) | 0] = 32;
       continue;
      }
      break;
     }
     break label$4;
    }
    jsvGetString(HEAP32[$3 + 36 >> 2], $3 + 17 | 0, 11);
   }
  }
  if (strlen($3 + 17 | 0)) {
   HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] | 6;
  }
  jsfGetJSONWhitespace(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 32 >> 2], $3 + 17 | 0);
 }
 global$0 = $3 + 48 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function void_20tflite__reference_ops__AffineQuantize_unsigned_20char__28tflite__QuantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = global$0 + -64 | 0;
 global$0 = $5;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 HEAP32[$5 + 40 >> 2] = HEAP32[HEAP32[$5 + 60 >> 2] >> 2];
 HEAPF64[$5 + 32 >> 3] = HEAPF64[HEAP32[$5 + 60 >> 2] + 8 >> 3];
 HEAP32[$5 + 28 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 56 >> 2], HEAP32[$5 + 48 >> 2]);
 HEAP32[$5 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 24 >> 2] < HEAP32[$5 + 28 >> 2]) {
   $2 = $5 + 16 | 0;
   HEAPF32[$5 + 20 >> 2] = HEAPF32[HEAP32[$5 + 52 >> 2] + (HEAP32[$5 + 24 >> 2] << 2) >> 2];
   $0 = $5;
   $6 = double_20tflite__TfLiteRound_double__28double_29(+HEAPF32[$5 + 20 >> 2] / HEAPF64[$5 + 32 >> 3]);
   label$3 : {
    if (Math_abs($6) < 2147483648) {
     $1 = ~~$6;
     break label$3;
    }
    $1 = -2147483648;
   }
   HEAP32[$0 + 16 >> 2] = $1 + HEAP32[$5 + 40 >> 2];
   HEAP32[$5 + 12 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29(int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($2, 43464), 43468) >> 2];
   HEAP8[HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 24 >> 2] | 0] = HEAP32[$5 + 12 >> 2];
   HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 - -64 | 0;
}
function void_20tflite__ops__micro__maximum_minimum__TFLiteOperation_float_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 92 >> 2] = $0;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP32[$3 + 84 >> 2] = $2;
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 - -64 | 0, HEAP32[HEAP32[$3 + 84 >> 2] >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 32 | 0, HEAP32[HEAP32[$3 + 84 >> 2] + 4 >> 2]);
 $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] + 4 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 8 | 0, HEAP32[HEAP32[$3 + 84 >> 2] + 8 >> 2]);
 void_20tflite__reference_ops__MaximumMinimumBroadcast4DSlow_float_2c_20float_20_28__29_28float_2c_20float_29__28tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__2c_20float_20_28__29_28float_2c_20float_29_29($3 - -64 | 0, $0, $3 + 32 | 0, $1, $3 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] + 8 >> 2]), 622);
 $0 = $3 - -64 | 0;
 $1 = $3 + 32 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($3 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($1);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $3 + 96 | 0;
}
function void_20tflite__ops__micro__maximum_minimum__TFLiteOperation_float_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 92 >> 2] = $0;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP32[$3 + 84 >> 2] = $2;
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 - -64 | 0, HEAP32[HEAP32[$3 + 84 >> 2] >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 32 | 0, HEAP32[HEAP32[$3 + 84 >> 2] + 4 >> 2]);
 $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] + 4 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 8 | 0, HEAP32[HEAP32[$3 + 84 >> 2] + 8 >> 2]);
 void_20tflite__reference_ops__MaximumMinimumBroadcast4DSlow_float_2c_20float_20_28__29_28float_2c_20float_29__28tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__2c_20float_20_28__29_28float_2c_20float_29_29($3 - -64 | 0, $0, $3 + 32 | 0, $1, $3 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] + 8 >> 2]), 617);
 $0 = $3 - -64 | 0;
 $1 = $3 + 32 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($3 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($1);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $3 + 96 | 0;
}
function get_bits($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP8[$2 + 7 | 0] = $1;
 HEAP16[$2 + 4 >> 1] = 0;
 HEAP32[$2 >> 2] = 0;
 label$1 : {
  if (HEAPU8[$2 + 7 | 0] > 15) {
   HEAP16[$2 + 14 >> 1] = 65535;
   break label$1;
  }
  if (!HEAPU16[HEAP32[$2 + 8 >> 2] >> 1]) {
   if (HEAPU8[HEAP32[$2 + 8 >> 2] + 12 | 0] < 1 << HEAPU8[$2 + 7 | 0] - 1) {
    HEAP16[$2 + 14 >> 1] = 65535;
    break label$1;
   }
  }
  HEAP32[$2 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 >> 2] < HEAPU8[$2 + 7 | 0]) {
    if (!HEAPU8[HEAP32[$2 + 8 >> 2] + 12 | 0]) {
     if (!HEAPU16[HEAP32[$2 + 8 >> 2] >> 1]) {
      HEAP16[$2 + 14 >> 1] = 65535;
      break label$1;
     }
     $0 = HEAP32[$2 + 8 >> 2];
     $1 = HEAPU16[$0 + 2 >> 1];
     HEAP16[$0 + 2 >> 1] = $1 + 1;
     HEAP8[HEAP32[$2 + 8 >> 2] + 11 | 0] = HEAPU8[$1 + ($0 + 13 | 0) | 0];
     if (HEAPU16[HEAP32[$2 + 8 >> 2] + 2 >> 1] == HEAPU16[HEAP32[$2 + 8 >> 2] >> 1]) {
      HEAP16[HEAP32[$2 + 8 >> 2] + 2 >> 1] = 0;
      HEAP16[HEAP32[$2 + 8 >> 2] >> 1] = 0;
     }
     HEAP8[HEAP32[$2 + 8 >> 2] + 12 | 0] = 128;
    }
    HEAP16[$2 + 4 >> 1] = HEAPU16[$2 + 4 >> 1] << 1;
    if (HEAPU8[HEAP32[$2 + 8 >> 2] + 11 | 0] & HEAPU8[HEAP32[$2 + 8 >> 2] + 12 | 0]) {
     HEAP16[$2 + 4 >> 1] = HEAPU16[$2 + 4 >> 1] | 1;
    }
    $0 = HEAP32[$2 + 8 >> 2];
    HEAP8[$0 + 12 | 0] = HEAPU8[$0 + 12 | 0] >> 1;
    HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
    continue;
   }
   break;
  }
  label$11 : {
   if (HEAPU8[$2 + 7 | 0] <= 1) {
    break label$11;
   }
  }
  HEAP16[$2 + 14 >> 1] = HEAPU16[$2 + 4 >> 1];
 }
 return HEAPU16[$2 + 14 >> 1];
}
function void_20tflite__reference_ops__AffineQuantize_signed_20char__28tflite__QuantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = global$0 + -64 | 0;
 global$0 = $5;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 HEAP32[$5 + 40 >> 2] = HEAP32[HEAP32[$5 + 60 >> 2] >> 2];
 HEAPF64[$5 + 32 >> 3] = HEAPF64[HEAP32[$5 + 60 >> 2] + 8 >> 3];
 HEAP32[$5 + 28 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 56 >> 2], HEAP32[$5 + 48 >> 2]);
 HEAP32[$5 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 24 >> 2] < HEAP32[$5 + 28 >> 2]) {
   $2 = $5 + 16 | 0;
   HEAPF32[$5 + 20 >> 2] = HEAPF32[HEAP32[$5 + 52 >> 2] + (HEAP32[$5 + 24 >> 2] << 2) >> 2];
   $0 = $5;
   $6 = double_20tflite__TfLiteRound_double__28double_29(+HEAPF32[$5 + 20 >> 2] / HEAPF64[$5 + 32 >> 3]);
   label$3 : {
    if (Math_abs($6) < 2147483648) {
     $1 = ~~$6;
     break label$3;
    }
    $1 = -2147483648;
   }
   HEAP32[$0 + 16 >> 2] = $1 + HEAP32[$5 + 40 >> 2];
   HEAP32[$5 + 12 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29(int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($2, 43456), 43460) >> 2];
   HEAP8[HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 24 >> 2] | 0] = HEAP32[$5 + 12 >> 2];
   HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 - -64 | 0;
}
function vfDrawCharPtr($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 176 | 0;
 global$0 = $5;
 HEAP32[$5 + 172 >> 2] = $0;
 HEAP32[$5 + 168 >> 2] = $1;
 HEAP32[$5 + 164 >> 2] = $2;
 HEAP32[$5 + 160 >> 2] = $3;
 HEAP32[$5 + 156 >> 2] = $4;
 HEAP32[$5 + 168 >> 2] = HEAP32[$5 + 168 >> 2] << 4;
 HEAP32[$5 + 164 >> 2] = HEAP32[$5 + 164 >> 2] << 4;
 HEAP32[$5 + 28 >> 2] = 0;
 HEAP32[$5 + 24 >> 2] = 0;
 while (1) {
  if (HEAPU8[HEAP32[$5 + 156 >> 2]] != 255) {
   label$3 : {
    if (HEAPU8[HEAP32[$5 + 156 >> 2]] == 254) {
     graphicsFillPoly(HEAP32[$5 + 172 >> 2], HEAP32[$5 + 28 >> 2], $5 + 32 | 0);
     HEAP32[$5 + 28 >> 2] = 0;
     break label$3;
    }
    HEAP8[$5 + 23 | 0] = HEAPU8[HEAP32[$5 + 156 >> 2]];
    HEAP32[$5 + 16 >> 2] = HEAPU8[$5 + 23 | 0] & 15;
    HEAP32[$5 + 12 >> 2] = HEAPU8[$5 + 23 | 0] >> 4;
    if (HEAP32[$5 + 16 >> 2] > HEAP32[$5 + 24 >> 2]) {
     HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 16 >> 2];
    }
    $0 = $5 + 32 | 0;
    HEAP16[$0 + (HEAP32[$5 + 28 >> 2] << 2) >> 1] = HEAP32[$5 + 168 >> 2] + ((Math_imul(HEAP32[$5 + 16 >> 2], HEAP32[$5 + 160 >> 2]) << 4) / 12 | 0);
    HEAP16[$0 + ((HEAP32[$5 + 28 >> 2] << 1) + 1 << 1) >> 1] = HEAP32[$5 + 164 >> 2] + ((Math_imul(HEAP32[$5 + 12 >> 2], HEAP32[$5 + 160 >> 2]) << 4) / 12 | 0);
    HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] + 1;
   }
   HEAP32[$5 + 156 >> 2] = HEAP32[$5 + 156 >> 2] + 1;
   continue;
  }
  break;
 }
 graphicsFillPoly(HEAP32[$5 + 172 >> 2], HEAP32[$5 + 28 >> 2], $5 + 32 | 0);
 global$0 = $5 + 176 | 0;
 return ((Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 24 >> 2] + 1 | 0) << 4) / 12 | 0) + 7 >> 4;
}
function jswrap_decodeURIComponent($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 80 | 0;
 global$0 = $1;
 HEAP32[$1 + 72 >> 2] = $0;
 HEAP32[$1 + 68 >> 2] = jsvAsString(HEAP32[$1 + 72 >> 2]);
 label$1 : {
  if (!HEAP32[$1 + 68 >> 2]) {
   HEAP32[$1 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 64 >> 2] = jsvNewFromEmptyString();
  if (HEAP32[$1 + 64 >> 2]) {
   $0 = $1 + 16 | 0;
   jsvStringIteratorNew($1 + 40 | 0, HEAP32[$1 + 68 >> 2], 0);
   jsvStringIteratorNew($0, HEAP32[$1 + 64 >> 2], 0);
   while (1) {
    label$5 : {
     if (!(jsvStringIteratorHasChar($1 + 40 | 0) & 1)) {
      break label$5;
     }
     HEAP8[$1 + 15 | 0] = jsvStringIteratorGetCharAndNext($1 + 40 | 0);
     if (HEAP8[$1 + 15 | 0] >> 7) {
      jsExceptionHere(1, 32970, 0);
      break label$5;
     }
     if (HEAP8[$1 + 15 | 0] == 37) {
      $0 = $1 + 40 | 0;
      HEAP32[$1 + 8 >> 2] = jsvStringIteratorGetCharAndNext($0) << 24 >> 24;
      HEAP32[$1 + 4 >> 2] = jsvStringIteratorGetCharAndNext($0) << 24 >> 24;
      HEAP32[$1 >> 2] = hexToByte(HEAP32[$1 + 8 >> 2] << 24 >> 24, HEAP32[$1 + 4 >> 2] << 24 >> 24) << 24 >> 24;
      if (HEAP32[$1 >> 2] < 0) {
       jsExceptionHere(1, 32982, 0);
       break label$5;
      }
      HEAP8[$1 + 15 | 0] = HEAP32[$1 >> 2];
     }
     jsvStringIteratorAppend($1 + 16 | 0, HEAP8[$1 + 15 | 0]);
     continue;
    }
    break;
   }
   $0 = $1 + 40 | 0;
   jsvStringIteratorFree($1 + 16 | 0);
   jsvStringIteratorFree($0);
  }
  jsvUnLock(HEAP32[$1 + 68 >> 2]);
  HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 64 >> 2];
 }
 global$0 = $1 + 80 | 0;
 return HEAP32[$1 + 76 >> 2];
}
function getCalendarDate($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $1;
 HEAP32[$2 >> 2] = 31200;
 HEAP32[$0 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 12 >> 2] / 1461;
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] - Math_imul(HEAP32[$2 + 8 >> 2], 1461);
 if (HEAP32[$2 + 12 >> 2] < 0) {
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1461;
  HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + -1;
 }
 HEAP32[$2 + 8 >> 2] = (HEAP32[$2 + 8 >> 2] << 2) + 1970;
 if (HEAP32[$2 + 12 >> 2] >= 365) {
  HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 1;
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] - 365;
  if (HEAP32[$2 + 12 >> 2] >= 365) {
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 1;
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] - 365;
   label$4 : {
    if (HEAP32[$2 + 12 >> 2] >= 366) {
     HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 1;
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] - 366;
     break label$4;
    }
    HEAP32[$2 >> 2] = 31232;
   }
  }
 }
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$2 + 4 >> 2] = 0;
 while (1) {
  if (HEAP16[HEAP32[$2 >> 2] + (HEAP32[$2 + 4 >> 2] << 1) >> 1] < (HEAP32[$2 + 12 >> 2] + 1 | 0) ? HEAP32[$2 + 4 >> 2] < 12 : 0) {
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 4 >> 2] - 1;
 HEAP32[$0 + 4 >> 2] = (HEAP32[$2 + 12 >> 2] - HEAP16[HEAP32[$2 >> 2] + (HEAP32[$0 + 8 >> 2] << 1) >> 1] | 0) + 1;
 HEAP32[$0 + 16 >> 2] = (HEAP32[$0 >> 2] + 4 | 0) % 7;
 if (HEAP32[$0 + 16 >> 2] < 0) {
  HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] + 7;
 }
}
function pop_arg($0, $1, $2) {
 label$1 : {
  label$2 : {
   if ($1 >>> 0 > 20) {
    break label$2;
   }
   $1 = $1 + -9 | 0;
   if ($1 >>> 0 > 9) {
    break label$2;
   }
   label$3 : {
    switch ($1 - 1 | 0) {
    default:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
     return;
    case 0:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     $1 = HEAP32[$1 >> 2];
     HEAP32[$0 >> 2] = $1;
     HEAP32[$0 + 4 >> 2] = $1 >> 31;
     return;
    case 1:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$0 + 4 >> 2] = 0;
     return;
    case 3:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     $1 = HEAP16[$1 >> 1];
     HEAP32[$0 >> 2] = $1;
     HEAP32[$0 + 4 >> 2] = $1 >> 31;
     return;
    case 4:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     HEAP32[$0 >> 2] = HEAPU16[$1 >> 1];
     HEAP32[$0 + 4 >> 2] = 0;
     return;
    case 5:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     $1 = HEAP8[$1 | 0];
     HEAP32[$0 >> 2] = $1;
     HEAP32[$0 + 4 >> 2] = $1 >> 31;
     return;
    case 6:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     HEAP32[$0 >> 2] = HEAPU8[$1 | 0];
     HEAP32[$0 + 4 >> 2] = 0;
     return;
    case 2:
    case 7:
     break label$1;
    case 8:
     break label$3;
    }
   }
   FUNCTION_TABLE[665]($0, $2);
  }
  return;
 }
 $1 = HEAP32[$2 >> 2] + 7 & -8;
 HEAP32[$2 >> 2] = $1 + 8;
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = $2;
}
function void_20tflite__ops__micro__maximum_minimum__TFLiteOperation_int_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 92 >> 2] = $0;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP32[$3 + 84 >> 2] = $2;
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 - -64 | 0, HEAP32[HEAP32[$3 + 84 >> 2] >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 32 | 0, HEAP32[HEAP32[$3 + 84 >> 2] + 4 >> 2]);
 $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] + 4 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 8 | 0, HEAP32[HEAP32[$3 + 84 >> 2] + 8 >> 2]);
 void_20tflite__reference_ops__MaximumMinimumBroadcast4DSlow_int_2c_20int_20_28__29_28int_2c_20int_29__28tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int__2c_20int_20_28__29_28int_2c_20int_29_29($3 - -64 | 0, $0, $3 + 32 | 0, $1, $3 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] + 8 >> 2]), 625);
 $0 = $3 - -64 | 0;
 $1 = $3 + 32 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($3 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($1);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $3 + 96 | 0;
}
function void_20tflite__ops__micro__maximum_minimum__TFLiteOperation_int_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 92 >> 2] = $0;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP32[$3 + 84 >> 2] = $2;
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 - -64 | 0, HEAP32[HEAP32[$3 + 84 >> 2] >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 32 | 0, HEAP32[HEAP32[$3 + 84 >> 2] + 4 >> 2]);
 $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] + 4 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 8 | 0, HEAP32[HEAP32[$3 + 84 >> 2] + 8 >> 2]);
 void_20tflite__reference_ops__MaximumMinimumBroadcast4DSlow_int_2c_20int_20_28__29_28int_2c_20int_29__28tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int__2c_20int_20_28__29_28int_2c_20int_29_29($3 - -64 | 0, $0, $3 + 32 | 0, $1, $3 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$3 + 84 >> 2] + 8 >> 2]), 620);
 $0 = $3 - -64 | 0;
 $1 = $3 + 32 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($3 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($1);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $3 + 96 | 0;
}
function jspeStatementIf() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 HEAP32[$0 + 16 >> 2] = 0;
 jslGetNextToken();
 label$1 : {
  if (!(jslMatch(40) & 1)) {
   HEAP32[$0 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 20 >> 2] = jspeExpression();
  if (HEAP32[23778] & 80) {
   HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 20 >> 2];
   break label$1;
  }
  if (!(jslMatch(41) & 1)) {
   HEAP32[$0 + 28 >> 2] = 0;
   break label$1;
  }
  $2 = $0;
  if ((HEAP32[23778] & 63) == 1) {
   $1 = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$0 + 20 >> 2]));
  } else {
   $1 = 0;
  }
  HEAP8[$2 + 27 | 0] = $1 & 1;
  jsvUnLock(HEAP32[$0 + 20 >> 2]);
  HEAP32[$0 + 12 >> 2] = HEAP32[23778];
  if (!(HEAP8[$0 + 27 | 0] & 1)) {
   jspSetNoExecute();
  }
  HEAP32[$0 + 8 >> 2] = jspeBlockOrStatement();
  label$8 : {
   if (!(HEAP8[$0 + 27 | 0] & 1)) {
    jsvUnLock(HEAP32[$0 + 8 >> 2]);
    HEAP32[23778] = HEAP32[23778] & -1664 | HEAP32[$0 + 12 >> 2] & 1663;
    break label$8;
   }
   HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 8 >> 2];
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 164) {
   jslGetNextToken();
   HEAP32[$0 + 4 >> 2] = HEAP32[23778];
   if (HEAP8[$0 + 27 | 0] & 1) {
    jspSetNoExecute();
   }
   HEAP32[$0 >> 2] = jspeBlockOrStatement();
   label$12 : {
    if (HEAP8[$0 + 27 | 0] & 1) {
     jsvUnLock(HEAP32[$0 >> 2]);
     HEAP32[23778] = HEAP32[23778] & -1664 | HEAP32[$0 + 4 >> 2] & 1663;
     break label$12;
    }
    HEAP32[$0 + 16 >> 2] = HEAP32[$0 >> 2];
   }
  }
  HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 16 >> 2];
 }
 global$0 = $0 + 32 | 0;
 return HEAP32[$0 + 28 >> 2];
}
function lcdFillRect_ArrayBuffer_flat1($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = global$0 - 48 | 0;
 HEAP32[$6 + 44 >> 2] = $0;
 HEAP32[$6 + 40 >> 2] = $1;
 HEAP32[$6 + 36 >> 2] = $2;
 HEAP32[$6 + 32 >> 2] = $3;
 HEAP32[$6 + 28 >> 2] = $4;
 HEAP32[$6 + 24 >> 2] = $5;
 HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 36 >> 2];
 while (1) {
  if (HEAP32[$6 + 20 >> 2] <= HEAP32[$6 + 28 >> 2]) {
   $0 = HEAP32[$6 + 44 >> 2];
   HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 40 >> 2] + Math_imul(HEAP32[$6 + 20 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
   HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 40 >> 2];
   while (1) {
    if (HEAP32[$6 + 12 >> 2] <= HEAP32[$6 + 32 >> 2]) {
     label$5 : {
      if (HEAP32[$6 + 24 >> 2]) {
       $0 = HEAP32[$6 + 44 >> 2];
       $0 = (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) + (HEAP32[$6 + 16 >> 2] >> 3) | 0;
       HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 128 >> (HEAP32[$6 + 16 >> 2] & 7) & 255;
       break label$5;
      }
      $0 = HEAP32[$6 + 44 >> 2];
      $0 = (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) + (HEAP32[$6 + 16 >> 2] >> 3) | 0;
      HEAP8[$0 | 0] = HEAPU8[$0 | 0] & (65407 >> (HEAP32[$6 + 16 >> 2] & 7) & 255);
     }
     HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 16 >> 2] + 1;
     HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
}
function cosf($0) {
 var $1 = Math_fround(0), $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
 $2 = $4 & 2147483647;
 label$1 : {
  if ($2 >>> 0 <= 1061752794) {
   $1 = Math_fround(1);
   if ($2 >>> 0 < 964689920) {
    break label$1;
   }
   $1 = __cosdf(+$0);
   break label$1;
  }
  if ($2 >>> 0 <= 1081824209) {
   $5 = +$0;
   if ($2 >>> 0 >= 1075235812) {
    $1 = Math_fround(-__cosdf((($4 | 0) < 0 ? 3.141592653589793 : -3.141592653589793) + $5));
    break label$1;
   }
   if (($4 | 0) <= -1) {
    $1 = __sindf($5 + 1.5707963267948966);
    break label$1;
   }
   $1 = __sindf(1.5707963267948966 - $5);
   break label$1;
  }
  if ($2 >>> 0 <= 1088565717) {
   if ($2 >>> 0 >= 1085271520) {
    $1 = __cosdf((($4 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + +$0);
    break label$1;
   }
   if (($4 | 0) <= -1) {
    $1 = __sindf(-4.71238898038469 - +$0);
    break label$1;
   }
   $1 = __sindf(+$0 + -4.71238898038469);
   break label$1;
  }
  $1 = Math_fround($0 - $0);
  if ($2 >>> 0 >= 2139095040) {
   break label$1;
  }
  $2 = __rem_pio2f($0, $3 + 8 | 0) & 3;
  if ($2 >>> 0 <= 2) {
   label$10 : {
    switch ($2 - 1 | 0) {
    default:
     $1 = __cosdf(HEAPF64[$3 + 8 >> 3]);
     break label$1;
    case 0:
     $1 = __sindf(-HEAPF64[$3 + 8 >> 3]);
     break label$1;
    case 1:
     break label$10;
    }
   }
   $1 = Math_fround(-__cosdf(HEAPF64[$3 + 8 >> 3]));
   break label$1;
  }
  $1 = __sindf(HEAPF64[$3 + 8 >> 3]);
 }
 $0 = $1;
 global$0 = $3 + 16 | 0;
 return $0;
}
function tflite__reference_integer_ops__Add_28tflite__ArithmeticParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = global$0 - 48 | 0;
 global$0 = $7;
 HEAP32[$7 + 44 >> 2] = $0;
 HEAP32[$7 + 40 >> 2] = $1;
 HEAP32[$7 + 36 >> 2] = $2;
 HEAP32[$7 + 32 >> 2] = $3;
 HEAP32[$7 + 28 >> 2] = $4;
 HEAP32[$7 + 24 >> 2] = $5;
 HEAP32[$7 + 20 >> 2] = $6;
 label$1 : {
  if (HEAP32[HEAP32[$7 + 44 >> 2] + 44 >> 2] > HEAP32[HEAP32[$7 + 44 >> 2] + 48 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$7 + 16 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$7 + 40 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 24 >> 2]);
 HEAP32[$7 + 12 >> 2] = 127;
 label$2 : {
  if (HEAP32[HEAP32[$7 + 44 >> 2] + 4 >> 2] < -127) {
   break label$2;
  }
 }
 label$3 : {
  if (HEAP32[HEAP32[$7 + 44 >> 2] + 8 >> 2] < -127) {
   break label$3;
  }
 }
 label$4 : {
  if (HEAP32[HEAP32[$7 + 44 >> 2] + 4 >> 2] > 127) {
   break label$4;
  }
 }
 label$5 : {
  if (HEAP32[HEAP32[$7 + 44 >> 2] + 8 >> 2] > 127) {
   break label$5;
  }
 }
 tflite__reference_integer_ops__AddElementwise_28int_2c_20tflite__ArithmeticParams_20const__2c_20signed_20char_20const__2c_20signed_20char_20const__2c_20signed_20char__29(HEAP32[$7 + 16 >> 2], HEAP32[$7 + 44 >> 2], HEAP32[$7 + 36 >> 2], HEAP32[$7 + 28 >> 2], HEAP32[$7 + 20 >> 2]);
 global$0 = $7 + 48 | 0;
}
function sinf($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
 $1 = $4 & 2147483647;
 label$1 : {
  if ($1 >>> 0 <= 1061752794) {
   if ($1 >>> 0 < 964689920) {
    break label$1;
   }
   $0 = __sindf(+$0);
   break label$1;
  }
  if ($1 >>> 0 <= 1081824209) {
   $3 = +$0;
   if ($1 >>> 0 <= 1075235811) {
    if (($4 | 0) <= -1) {
     $0 = Math_fround(-__cosdf($3 + 1.5707963267948966));
     break label$1;
    }
    $0 = __cosdf($3 + -1.5707963267948966);
    break label$1;
   }
   $0 = __sindf(-((($4 | 0) < 0 ? 3.141592653589793 : -3.141592653589793) + $3));
   break label$1;
  }
  if ($1 >>> 0 <= 1088565717) {
   $3 = +$0;
   if ($1 >>> 0 <= 1085271519) {
    if (($4 | 0) <= -1) {
     $0 = __cosdf($3 + 4.71238898038469);
     break label$1;
    }
    $0 = Math_fround(-__cosdf($3 + -4.71238898038469));
    break label$1;
   }
   $0 = __sindf((($4 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + $3);
   break label$1;
  }
  if ($1 >>> 0 >= 2139095040) {
   $0 = Math_fround($0 - $0);
   break label$1;
  }
  $1 = __rem_pio2f($0, $2 + 8 | 0) & 3;
  if ($1 >>> 0 <= 2) {
   label$11 : {
    switch ($1 - 1 | 0) {
    default:
     $0 = __sindf(HEAPF64[$2 + 8 >> 3]);
     break label$1;
    case 0:
     $0 = __cosdf(HEAPF64[$2 + 8 >> 3]);
     break label$1;
    case 1:
     break label$11;
    }
   }
   $0 = __sindf(-HEAPF64[$2 + 8 >> 3]);
   break label$1;
  }
  $0 = Math_fround(-__cosdf(HEAPF64[$2 + 8 >> 3]));
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function jshGetCharToTransmit($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP8[$1 + 11 | 0] = $0;
 label$1 : {
  if (!(HEAPU8[$1 + 11 | 0] < 21 | HEAPU8[$1 + 11 | 0] > 22)) {
   HEAP32[$1 + 4 >> 2] = HEAPU8[$1 + 11 | 0] + 95183;
   if (HEAP8[HEAP32[$1 + 4 >> 2]] & 1) {
    HEAP8[HEAP32[$1 + 4 >> 2]] = HEAPU8[HEAP32[$1 + 4 >> 2]] & -2 | 4;
    HEAP32[$1 + 12 >> 2] = 19;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 4 >> 2]] & 2) {
    HEAP8[HEAP32[$1 + 4 >> 2]] = HEAPU8[HEAP32[$1 + 4 >> 2]] & -7;
    HEAP32[$1 + 12 >> 2] = 17;
    break label$1;
   }
  }
  HEAP8[$1 + 3 | 0] = HEAPU8[95201];
  while (1) {
   if (HEAPU8[95200] != HEAPU8[$1 + 3 | 0]) {
    if (HEAPU8[$1 + 11 | 0] == (HEAPU8[(HEAPU8[$1 + 3 | 0] << 1) + 95280 | 0] & 31)) {
     HEAP8[$1 + 2 | 0] = HEAPU8[((HEAPU8[$1 + 3 | 0] << 1) + 95280 | 0) + 1 | 0];
     if (HEAPU8[$1 + 3 | 0] != HEAPU8[95201]) {
      HEAP8[$1 + 1 | 0] = HEAPU8[$1 + 3 | 0];
      HEAP8[$1 | 0] = HEAPU8[$1 + 1 | 0] + 255;
      while (1) {
       if (HEAPU8[$1 + 1 | 0] != HEAPU8[95201]) {
        HEAP16[(HEAPU8[$1 + 1 | 0] << 1) + 95280 >> 1] = HEAPU16[(HEAPU8[$1 | 0] << 1) + 95280 >> 1];
        HEAP8[$1 + 1 | 0] = HEAPU8[$1 | 0];
        HEAP8[$1 | 0] = HEAPU8[$1 + 1 | 0] + 255;
        continue;
       }
       break;
      }
     }
     HEAP8[95201] = HEAPU8[95201] + 1;
     HEAP32[$1 + 12 >> 2] = HEAPU8[$1 + 2 | 0];
     break label$1;
    } else {
     HEAP8[$1 + 3 | 0] = HEAPU8[$1 + 3 | 0] + 1;
     continue;
    }
   }
   break;
  }
  HEAP32[$1 + 12 >> 2] = -1;
 }
 return HEAP32[$1 + 12 >> 2];
}
function jsfFlashContainsCode() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = global$0 - 192 | 0;
 global$0 = $0;
 jsfNameFromString($0 + 160 | 0, 2108);
 HEAP32[$0 + 88 >> 2] = HEAP32[$0 + 184 >> 2];
 $1 = HEAP32[$0 + 180 >> 2];
 HEAP32[$0 + 80 >> 2] = HEAP32[$0 + 176 >> 2];
 HEAP32[$0 + 84 >> 2] = $1;
 $1 = HEAP32[$0 + 172 >> 2];
 HEAP32[$0 + 72 >> 2] = HEAP32[$0 + 168 >> 2];
 HEAP32[$0 + 76 >> 2] = $1;
 $1 = HEAP32[$0 + 164 >> 2];
 HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 160 >> 2];
 HEAP32[$0 + 68 >> 2] = $1;
 $1 = jsfFindFile($0 - -64 | 0, 0);
 $2 = 1;
 label$1 : {
  if ($1) {
   break label$1;
  }
  jsfNameFromString($0 + 128 | 0, 2462);
  HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 152 >> 2];
  $1 = HEAP32[$0 + 148 >> 2];
  HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 144 >> 2];
  HEAP32[$0 + 52 >> 2] = $1;
  $1 = HEAP32[$0 + 140 >> 2];
  HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 136 >> 2];
  HEAP32[$0 + 44 >> 2] = $1;
  $1 = HEAP32[$0 + 132 >> 2];
  HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 128 >> 2];
  HEAP32[$0 + 36 >> 2] = $1;
  $1 = jsfFindFile($0 + 32 | 0, 0);
  $2 = 1;
  if ($1) {
   break label$1;
  }
  jsfNameFromString($0 + 96 | 0, 2471);
  HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 120 >> 2];
  $1 = HEAP32[$0 + 116 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 112 >> 2];
  HEAP32[$0 + 20 >> 2] = $1;
  $1 = HEAP32[$0 + 108 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 104 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
  $1 = HEAP32[$0 + 100 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 + 96 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
  $2 = (jsfFindFile($0, 0) | 0) != 0;
 }
 $1 = $2;
 global$0 = $0 + 192 | 0;
 return $1;
}
function jsvGetDataPointer($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1 : {
  if (jsvIsArrayBuffer(HEAP32[$2 + 24 >> 2]) & 1) {
   HEAP32[$2 + 16 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 12 >> 2] = jsvGetDataPointer(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2]);
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   if (HEAP32[$2 + 12 >> 2]) {
    HEAP32[$2 + 12 >> 2] = HEAPU16[HEAP32[$2 + 24 >> 2] >> 1] + HEAP32[$2 + 12 >> 2];
    HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = HEAPU16[HEAP32[$2 + 24 >> 2] + 2 >> 1];
   }
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
   break label$1;
  }
  if (jsvIsNativeString(HEAP32[$2 + 24 >> 2]) & 1) {
   HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 4 >> 2];
   HEAP32[$2 + 28 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] >> 2];
   break label$1;
  }
  if (jsvIsFlatString(HEAP32[$2 + 24 >> 2]) & 1) {
   $0 = jsvGetStringLength(HEAP32[$2 + 24 >> 2]);
   HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = $0;
   HEAP32[$2 + 28 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 24 >> 2]);
   break label$1;
  }
  label$6 : {
   if (!(jsvIsBasicString(HEAP32[$2 + 24 >> 2]) & 1)) {
    break label$6;
   }
   if (jsvGetLastChild(HEAP32[$2 + 24 >> 2]) & 65535) {
    break label$6;
   }
   $0 = jsvGetCharactersInVar(HEAP32[$2 + 24 >> 2]);
   HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = $0;
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 24 >> 2];
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function memset($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $4 = $0 + $2 | 0;
  HEAP8[$4 + -1 | 0] = $1;
  HEAP8[$0 | 0] = $1;
  if ($2 >>> 0 < 3) {
   break label$1;
  }
  HEAP8[$4 + -2 | 0] = $1;
  HEAP8[$0 + 1 | 0] = $1;
  HEAP8[$4 + -3 | 0] = $1;
  HEAP8[$0 + 2 | 0] = $1;
  if ($2 >>> 0 < 7) {
   break label$1;
  }
  HEAP8[$4 + -4 | 0] = $1;
  HEAP8[$0 + 3 | 0] = $1;
  if ($2 >>> 0 < 9) {
   break label$1;
  }
  $5 = $0;
  $0 = 0 - $0 & 3;
  $3 = $5 + $0 | 0;
  $1 = Math_imul($1 & 255, 16843009);
  HEAP32[$3 >> 2] = $1;
  $0 = $2 - $0 & -4;
  $2 = $0 + $3 | 0;
  HEAP32[$2 + -4 >> 2] = $1;
  if ($0 >>> 0 < 9) {
   break label$1;
  }
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$2 + -8 >> 2] = $1;
  HEAP32[$2 + -12 >> 2] = $1;
  if ($0 >>> 0 < 25) {
   break label$1;
  }
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $1;
  HEAP32[$3 + 12 >> 2] = $1;
  HEAP32[$2 + -16 >> 2] = $1;
  HEAP32[$2 + -20 >> 2] = $1;
  HEAP32[$2 + -24 >> 2] = $1;
  HEAP32[$2 + -28 >> 2] = $1;
  $4 = $3 & 4 | 24;
  $2 = $0 - $4 | 0;
  if ($2 >>> 0 < 32) {
   break label$1;
  }
  $0 = $1;
  $5 = $1;
  $1 = $3 + $4 | 0;
  while (1) {
   HEAP32[$1 + 24 >> 2] = $5;
   HEAP32[$1 + 28 >> 2] = $0;
   HEAP32[$1 + 16 >> 2] = $5;
   HEAP32[$1 + 20 >> 2] = $0;
   HEAP32[$1 + 8 >> 2] = $5;
   HEAP32[$1 + 12 >> 2] = $0;
   HEAP32[$1 >> 2] = $5;
   HEAP32[$1 + 4 >> 2] = $0;
   $1 = $1 + 32 | 0;
   $2 = $2 + -32 | 0;
   if ($2 >>> 0 > 31) {
    continue;
   }
   break;
  }
 }
}
function lcdST7789_flip($0) {
 var $1 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 HEAP32[$1 + 60 >> 2] = $0;
 $0 = HEAP32[24392];
 label$1 : {
  if ($0 >>> 0 > 4) {
   break label$1;
  }
  label$2 : {
   switch ($0 + -2 | 0) {
   case 0:
    label$5 : {
     if (!HEAP32[24390]) {
      HEAP32[24390] = 160;
      break label$5;
     }
     HEAP32[24390] = 0;
    }
    lcdST7789_scrollCmd();
    break label$1;
   case 1:
    $0 = HEAP32[$1 + 60 >> 2];
    HEAP32[$1 + 56 >> 2] = jsvObjectGetChild(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 27691, 0);
    HEAP32[$1 + 52 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$1 + 56 >> 2]);
    if (HEAP32[$1 + 52 >> 2]) {
     $0 = $1 + 32 | 0;
     jsvStringIteratorNew($0, HEAP32[$1 + 52 >> 2], 0);
     lcdST7789_blit8Bit(0, 0, 120, 120, 2, $0, 37920);
     jsvStringIteratorFree($0);
    }
    jsvUnLock2(HEAP32[$1 + 52 >> 2], HEAP32[$1 + 56 >> 2]);
    break label$1;
   case 2:
    break label$2;
   default:
    break label$1;
   }
  }
  $0 = HEAP32[$1 + 60 >> 2];
  HEAP32[$1 + 28 >> 2] = jsvObjectGetChild(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 27691, 0);
  HEAP32[$1 + 24 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$1 + 28 >> 2]);
  if (HEAP32[$1 + 24 >> 2]) {
   jsvStringIteratorNew($1, HEAP32[$1 + 24 >> 2], 0);
   lcdST7789_blit8Bit(0, 0, 80, 80, 3, $1, 37920);
   jsvStringIteratorFree($1);
  }
  jsvUnLock2(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 28 >> 2]);
 }
 global$0 = $1 - -64 | 0;
}
function tflite__ops__micro__neg__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 68 >> 2] = $1;
 HEAP32[$2 + 64 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 68 >> 2], 0);
 HEAP32[$2 + 60 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 68 >> 2]);
 label$1 : {
  label$2 : {
   if (HEAP32[HEAP32[$2 + 64 >> 2] >> 2] == 1) {
    tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 40 | 0, HEAP32[$2 + 64 >> 2]);
    $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 64 >> 2]);
    tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 8 | 0, HEAP32[$2 + 60 >> 2]);
    void_20tflite__reference_ops__Negate_float__28tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($2 + 40 | 0, $0, $2 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 60 >> 2]));
    $0 = $2 + 40 | 0;
    tflite__RuntimeShape___RuntimeShape_28_29($2 + 8 | 0);
    tflite__RuntimeShape___RuntimeShape_28_29($0);
    break label$2;
   }
   $0 = HEAP32[HEAP32[$2 + 72 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 72 >> 2];
   HEAP32[$2 >> 2] = HEAP32[HEAP32[$2 + 64 >> 2] >> 2];
   FUNCTION_TABLE[$0]($1, 45493, $2);
   HEAP32[$2 + 76 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 76 >> 2] = 0;
 }
 global$0 = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}
function tflite__CalculateActivationRangeQuantized_28TfLiteContext__2c_20TfLiteFusedActivation_2c_20TfLiteTensor__2c_20int__2c_20int__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 48 | 0;
 global$0 = $5;
 HEAP32[$5 + 40 >> 2] = $0;
 HEAP32[$5 + 36 >> 2] = $1;
 HEAP32[$5 + 32 >> 2] = $2;
 HEAP32[$5 + 28 >> 2] = $3;
 HEAP32[$5 + 24 >> 2] = $4;
 HEAP32[$5 + 20 >> 2] = 0;
 HEAP32[$5 + 16 >> 2] = 0;
 label$1 : {
  label$2 : {
   if (HEAP32[HEAP32[$5 + 32 >> 2] >> 2] == 3) {
    HEAP32[$5 + 20 >> 2] = 0;
    HEAP32[$5 + 16 >> 2] = 255;
    break label$2;
   }
   label$4 : {
    if (HEAP32[HEAP32[$5 + 32 >> 2] >> 2] == 9) {
     HEAP32[$5 + 20 >> 2] = -128;
     HEAP32[$5 + 16 >> 2] = 127;
     break label$4;
    }
    label$6 : {
     if (HEAP32[HEAP32[$5 + 32 >> 2] >> 2] == 7) {
      HEAP32[$5 + 20 >> 2] = -32768;
      HEAP32[$5 + 16 >> 2] = 32767;
      break label$6;
     }
     $0 = HEAP32[HEAP32[$5 + 40 >> 2] + 20 >> 2];
     $1 = HEAP32[$5 + 40 >> 2];
     HEAP32[$5 + 8 >> 2] = 49611;
     HEAP32[$5 + 4 >> 2] = 169;
     HEAP32[$5 >> 2] = 49130;
     FUNCTION_TABLE[$0]($1, 49290, $5);
     HEAP32[$5 + 44 >> 2] = 1;
     break label$1;
    }
   }
  }
  tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29(HEAP32[$5 + 36 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 32 >> 2], HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2]);
  HEAP32[$5 + 44 >> 2] = 0;
 }
 global$0 = $5 + 48 | 0;
 return HEAP32[$5 + 44 >> 2];
}
function jsvGetIndexOfFull($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 80 | 0;
 global$0 = $5;
 HEAP32[$5 + 72 >> 2] = $0;
 HEAP32[$5 + 68 >> 2] = $1;
 HEAP8[$5 + 67 | 0] = $2;
 HEAP8[$5 + 66 | 0] = $3;
 HEAP32[$5 + 60 >> 2] = $4;
 label$1 : {
  if (!(jsvIsIterable(HEAP32[$5 + 72 >> 2]) & 1)) {
   HEAP32[$5 + 76 >> 2] = 0;
   break label$1;
  }
  jsvIteratorNew($5 + 16 | 0, HEAP32[$5 + 72 >> 2], 0);
  while (1) {
   if (jsvIteratorHasElement($5 + 16 | 0) & 1) {
    HEAP32[$5 + 12 >> 2] = jsvIteratorGetKey($5 + 16 | 0);
    label$5 : {
     if (HEAP8[$5 + 66 | 0] & 1) {
      if (!(jsvIsInt(HEAP32[$5 + 12 >> 2]) & 1)) {
       break label$5;
      }
      if ((jsvGetInteger(HEAP32[$5 + 12 >> 2]) | 0) < HEAP32[$5 + 60 >> 2]) {
       break label$5;
      }
     }
     HEAP32[$5 + 8 >> 2] = jsvIteratorGetValue($5 + 16 | 0);
     label$7 : {
      if (HEAP32[$5 + 8 >> 2] != HEAP32[$5 + 68 >> 2]) {
       if (HEAP8[$5 + 67 | 0] & 1) {
        break label$7;
       }
       if (!(jsvMathsOpTypeEqual(HEAP32[$5 + 8 >> 2], HEAP32[$5 + 68 >> 2]) & 1)) {
        break label$7;
       }
      }
      $0 = $5 + 16 | 0;
      jsvUnLock(HEAP32[$5 + 8 >> 2]);
      jsvIteratorFree($0);
      HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 12 >> 2];
      break label$1;
     }
     jsvUnLock(HEAP32[$5 + 8 >> 2]);
    }
    $0 = $5 + 16 | 0;
    jsvUnLock(HEAP32[$5 + 12 >> 2]);
    jsvIteratorNext($0);
    continue;
   }
   break;
  }
  jsvIteratorFree($5 + 16 | 0);
  HEAP32[$5 + 76 >> 2] = 0;
 }
 global$0 = $5 + 80 | 0;
 return HEAP32[$5 + 76 >> 2];
}
function st_yield_backref($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 4 >> 2] - HEAP32[HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2] >> 2];
 label$1 : {
  if (HEAPU32[$2 + 16 >> 2] > 0) {
   HEAP32[$2 + 12 >> 2] = 0;
   if (HEAPU16[HEAP32[$2 + 24 >> 2] + 4 >> 1] < HEAPU32[$2 + 16 >> 2]) {
    HEAP32[$2 + 16 >> 2] = HEAPU16[HEAP32[$2 + 24 >> 2] + 4 >> 1];
   }
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 24 >> 2] + 45;
   HEAP16[$2 + 6 >> 1] = 255;
   HEAP16[$2 + 4 >> 1] = HEAPU16[HEAP32[$2 + 24 >> 2] + 6 >> 1];
   HEAP32[$2 + 12 >> 2] = 0;
   while (1) {
    if (HEAPU32[$2 + 12 >> 2] < HEAPU32[$2 + 16 >> 2]) {
     HEAP8[$2 + 3 | 0] = HEAPU8[HEAP32[$2 + 8 >> 2] + (HEAPU16[$2 + 6 >> 1] & HEAPU16[HEAP32[$2 + 24 >> 2] + 8 >> 1] - HEAPU16[$2 + 4 >> 1]) | 0];
     push_byte(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAPU8[$2 + 3 | 0]);
     HEAP8[HEAP32[$2 + 8 >> 2] + (HEAPU16[HEAP32[$2 + 24 >> 2] + 8 >> 1] & HEAPU16[$2 + 6 >> 1]) | 0] = HEAPU8[$2 + 3 | 0];
     $0 = HEAP32[$2 + 24 >> 2];
     HEAP16[$0 + 8 >> 1] = HEAPU16[$0 + 8 >> 1] + 1;
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   $0 = HEAP32[$2 + 24 >> 2];
   HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] - HEAP32[$2 + 16 >> 2];
   if (!HEAPU16[HEAP32[$2 + 24 >> 2] + 4 >> 1]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break label$1;
   }
  }
  HEAP32[$2 + 28 >> 2] = 6;
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function tflite__GetQuantizedConvolutionMultipler_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20double__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 + -64 | 0;
 global$0 = $6;
 HEAP32[$6 + 56 >> 2] = $0;
 HEAP32[$6 + 52 >> 2] = $1;
 HEAP32[$6 + 48 >> 2] = $2;
 HEAP32[$6 + 44 >> 2] = $3;
 HEAP32[$6 + 40 >> 2] = $4;
 HEAP32[$6 + 36 >> 2] = $5;
 HEAPF64[$6 + 24 >> 3] = Math_fround(HEAPF32[HEAP32[$6 + 52 >> 2] + 12 >> 2] * HEAPF32[HEAP32[$6 + 48 >> 2] + 12 >> 2]);
 label$1 : {
  if (HEAP32[$6 + 44 >> 2]) {
   HEAPF64[$6 + 16 >> 3] = HEAPF32[HEAP32[$6 + 44 >> 2] + 12 >> 2];
   $0 = global$0 - 16 | 0;
   HEAPF64[$0 + 8 >> 3] = HEAPF64[$6 + 24 >> 3] - HEAPF64[$6 + 16 >> 3];
   if (!(Math_abs(HEAPF64[$0 + 8 >> 3]) <= 1e-6 * HEAPF64[double_20const__20std____2__min_double__28double_20const__2c_20double_20const__29($6 + 24 | 0, $6 + 16 | 0) >> 3])) {
    $0 = HEAP32[HEAP32[$6 + 56 >> 2] + 20 >> 2];
    $1 = HEAP32[$6 + 56 >> 2];
    HEAP32[$6 + 8 >> 2] = 49491;
    HEAP32[$6 + 4 >> 2] = 106;
    HEAP32[$6 >> 2] = 49130;
    FUNCTION_TABLE[$0]($1, 49290, $6);
    HEAP32[$6 + 60 >> 2] = 1;
    break label$1;
   }
  }
  HEAP32[$6 + 60 >> 2] = tflite__GetQuantizedConvolutionMultipler_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20double__29(HEAP32[$6 + 56 >> 2], HEAP32[$6 + 52 >> 2], HEAP32[$6 + 48 >> 2], HEAP32[$6 + 40 >> 2], HEAP32[$6 + 36 >> 2]);
 }
 global$0 = $6 - -64 | 0;
 return HEAP32[$6 + 60 >> 2];
}
function tflite__reference_ops__Add_28tflite__ArithmeticParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = global$0 - 32 | 0;
 global$0 = $7;
 HEAP32[$7 + 28 >> 2] = $0;
 HEAP32[$7 + 24 >> 2] = $1;
 HEAP32[$7 + 20 >> 2] = $2;
 HEAP32[$7 + 16 >> 2] = $3;
 HEAP32[$7 + 12 >> 2] = $4;
 HEAP32[$7 + 8 >> 2] = $5;
 HEAP32[$7 + 4 >> 2] = $6;
 label$1 : {
  if (HEAP32[HEAP32[$7 + 28 >> 2] + 44 >> 2] > HEAP32[HEAP32[$7 + 28 >> 2] + 48 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$7 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$7 + 24 >> 2], HEAP32[$7 + 16 >> 2], HEAP32[$7 + 8 >> 2]);
 label$2 : {
  if (HEAP32[HEAP32[$7 + 28 >> 2] + 4 >> 2] <= -256) {
   break label$2;
  }
 }
 label$3 : {
  if (HEAP32[HEAP32[$7 + 28 >> 2] + 8 >> 2] <= -256) {
   break label$3;
  }
 }
 label$4 : {
  if (HEAP32[HEAP32[$7 + 28 >> 2] + 4 >> 2] >= 256) {
   break label$4;
  }
 }
 label$5 : {
  if (HEAP32[HEAP32[$7 + 28 >> 2] + 8 >> 2] >= 256) {
   break label$5;
  }
 }
 tflite__reference_ops__AddElementwise_28int_2c_20tflite__ArithmeticParams_20const__2c_20unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20char__29(HEAP32[$7 >> 2], HEAP32[$7 + 28 >> 2], HEAP32[$7 + 20 >> 2], HEAP32[$7 + 12 >> 2], HEAP32[$7 + 4 >> 2]);
 global$0 = $7 + 32 | 0;
}
function jswrap_io_digitalWrite($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1 : {
  if (jsvIsArray(HEAP32[$2 + 28 >> 2]) & 1) {
   HEAP16[$2 + 22 >> 1] = jsvGetLastChild(HEAP32[$2 + 28 >> 2]);
   while (1) {
    if (HEAPU16[$2 + 22 >> 1]) {
     HEAP32[$2 + 16 >> 2] = jsvLock(HEAPU16[$2 + 22 >> 1]);
     HEAP32[$2 + 12 >> 2] = jsvSkipName(HEAP32[$2 + 16 >> 2]);
     jshPinOutput(jshGetPinFromVar(HEAP32[$2 + 12 >> 2]) & 255, (HEAP32[$2 + 24 >> 2] & 1) != 0);
     jsvUnLock(HEAP32[$2 + 12 >> 2]);
     HEAP16[$2 + 22 >> 1] = jsvGetPrevSibling(HEAP32[$2 + 16 >> 2]);
     jsvUnLock(HEAP32[$2 + 16 >> 2]);
     HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] >> 1;
     continue;
    }
    break;
   }
   break label$1;
  }
  label$5 : {
   if (jsvIsObject(HEAP32[$2 + 28 >> 2]) & 1) {
    HEAP32[$2 + 8 >> 2] = jspGetNamedField(HEAP32[$2 + 28 >> 2], 33462, 0);
    label$7 : {
     if (jsvIsFunction(HEAP32[$2 + 8 >> 2]) & 1) {
      $0 = $2 + 4 | 0;
      HEAP32[$2 + 4 >> 2] = jsvNewFromInteger(HEAP32[$2 + 24 >> 2]);
      jsvUnLock(jspeFunctionCall(HEAP32[$2 + 8 >> 2], 0, HEAP32[$2 + 28 >> 2], 0, 1, $0));
      jsvUnLock(HEAP32[$2 + 4 >> 2]);
      break label$7;
     }
     jsExceptionHere(1, 33468, 0);
    }
    jsvUnLock(HEAP32[$2 + 8 >> 2]);
    break label$5;
   }
   HEAP8[$2 + 3 | 0] = jshGetPinFromVar(HEAP32[$2 + 28 >> 2]);
   jshPinOutput(HEAPU8[$2 + 3 | 0], HEAP32[$2 + 24 >> 2] != 0);
  }
 }
 global$0 = $2 + 32 | 0;
}
function jswrap_graphics_getModified($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 96 | 0;
 global$0 = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP8[$2 + 87 | 0] = $1;
 label$1 : {
  if (!(graphicsGetFromVar($2 + 16 | 0, HEAP32[$2 + 88 >> 2]) & 1)) {
   HEAP32[$2 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 0;
  if ((HEAPU8[$2 + 56 | 0] | HEAPU8[$2 + 57 | 0] << 8) << 16 >> 16 <= (HEAPU8[$2 + 60 | 0] | HEAPU8[$2 + 61 | 0] << 8) << 16 >> 16) {
   HEAP32[$2 + 12 >> 2] = jsvNewWithFlags(5);
   if (HEAP32[$2 + 12 >> 2]) {
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 39252, jsvNewFromInteger((HEAPU8[$2 + 56 | 0] | HEAPU8[$2 + 57 | 0] << 8) << 16 >> 16));
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 39255, jsvNewFromInteger((HEAPU8[$2 + 58 | 0] | HEAPU8[$2 + 59 | 0] << 8) << 16 >> 16));
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 39258, jsvNewFromInteger((HEAPU8[$2 + 60 | 0] | HEAPU8[$2 + 61 | 0] << 8) << 16 >> 16));
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 39261, jsvNewFromInteger((HEAPU8[$2 + 62 | 0] | HEAPU8[$2 + 63 | 0] << 8) << 16 >> 16));
   }
  }
  if (HEAP8[$2 + 87 | 0] & 1) {
   HEAP8[$2 + 60 | 0] = 32768;
   HEAP8[$2 + 61 | 0] = 128;
   HEAP8[$2 + 62 | 0] = 32768;
   HEAP8[$2 + 63 | 0] = 128;
   HEAP8[$2 + 56 | 0] = 32767;
   HEAP8[$2 + 57 | 0] = 127;
   HEAP8[$2 + 58 | 0] = 32767;
   HEAP8[$2 + 59 | 0] = 127;
   graphicsSetVar($2 + 16 | 0);
  }
  HEAP32[$2 + 92 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 global$0 = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}
function jsvStringIteratorAppend($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 label$1 : {
  if (!HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]) {
   break label$1;
  }
  if (HEAPU32[HEAP32[$2 + 12 >> 2] + 4 >> 2] > 0) {
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
  }
  if (HEAPU32[HEAP32[$2 + 12 >> 2] >> 2] >= jsvGetMaxCharactersInVar(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]) >>> 0) {
   HEAP32[$2 + 4 >> 2] = jsvNewWithFlags(40);
   if (!HEAP32[$2 + 4 >> 2]) {
    jsvUnLock(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]);
    HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] = 0;
    HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] = 0;
    HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = 0;
    break label$1;
   }
   jsvSetLastChild(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2], jsvGetRef(HEAP32[$2 + 4 >> 2]) & 65535);
   jsvUnLock(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]);
   HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] = HEAP32[$2 + 4 >> 2];
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + HEAP32[$0 + 8 >> 2];
   HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = 0;
  }
  HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0] = HEAPU8[$2 + 11 | 0];
  HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + 1;
  jsvSetCharactersInVar(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2], HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2]);
 }
 global$0 = $2 + 16 | 0;
}
function jspeExpressionOrArrowFunction() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP8[$0 + 3 | 0] = 1;
 label$1 : {
  while (1) {
   if ((HEAP16[HEAP32[13768] + 2 >> 1] != 41 ? (HEAP32[23778] & 80) != 0 ^ -1 : 0) & 1) {
    if (!(!(HEAP8[$0 + 3 | 0] & 1) | !HEAP32[$0 + 8 >> 2])) {
     HEAP32[$0 + 4 >> 2] = jspeAddNamedFunctionParameter(HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2]);
    }
    jsvUnLock(HEAP32[$0 + 8 >> 2]);
    HEAP32[$0 + 8 >> 2] = __jspeAssignmentExpression(jspeConditionalExpression());
    label$7 : {
     if (jsvIsName(HEAP32[$0 + 8 >> 2]) & 1) {
      if (jsvIsString(HEAP32[$0 + 8 >> 2]) & 1) {
       break label$7;
      }
     }
     HEAP8[$0 + 3 | 0] = 0;
    }
    if (HEAP16[HEAP32[13768] + 2 >> 1] != 41) {
     if (!(jslMatch(44) & 1)) {
      jsvUnLock2(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2]);
      HEAP32[$0 + 12 >> 2] = 0;
      break label$1;
     }
    }
    continue;
   }
   break;
  }
  if (!(jslMatch(41) & 1)) {
   jsvUnLock2(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2]);
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  if (!(!(HEAP8[$0 + 3 | 0] & 1) | HEAP16[HEAP32[13768] + 2 >> 1] != 162)) {
   HEAP32[$0 + 4 >> 2] = jspeArrowFunction(HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2]);
   jsvUnLock(HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
   break label$1;
  }
  jsvUnLock(HEAP32[$0 + 4 >> 2]);
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
 }
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function graphicsDrawRect($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = global$0 - 32 | 0;
 global$0 = $5;
 $6 = $5 + 16 | 0;
 $7 = $5 + 12 | 0;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 graphicsToDeviceCoordinates(HEAP32[$5 + 28 >> 2], $5 + 24 | 0, $5 + 20 | 0);
 graphicsToDeviceCoordinates(HEAP32[$5 + 28 >> 2], $6, $7);
 $0 = HEAP32[$5 + 28 >> 2];
 graphicsFillRectDevice(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 20 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
 $0 = HEAP32[$5 + 28 >> 2];
 graphicsFillRectDevice(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
 $0 = HEAP32[$5 + 28 >> 2];
 graphicsFillRectDevice(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
 $0 = HEAP32[$5 + 28 >> 2];
 graphicsFillRectDevice(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
 global$0 = $5 + 32 | 0;
}
function tflite__ops__micro__strided_slice__BuildStridedSliceParams_28tflite__ops__micro__strided_slice__StridedSliceContext__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 HEAP8[$0 | 0] = HEAP32[HEAP32[$2 + 12 >> 2] + 24 >> 2];
 HEAP8[$0 + 10 | 0] = HEAP32[HEAP32[$2 + 12 >> 2] + 24 >> 2];
 HEAP8[$0 + 20 | 0] = HEAP32[HEAP32[$2 + 12 >> 2] + 24 >> 2];
 HEAP32[$2 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 8 >> 2] < HEAP32[HEAP32[$2 + 12 >> 2] + 24 >> 2]) {
   $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2]);
   HEAP16[($0 + 2 | 0) + (HEAP32[$2 + 8 >> 2] << 1) >> 1] = HEAP32[$1 + (HEAP32[$2 + 8 >> 2] << 2) >> 2];
   $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]);
   HEAP16[($0 + 12 | 0) + (HEAP32[$2 + 8 >> 2] << 1) >> 1] = HEAP32[$1 + (HEAP32[$2 + 8 >> 2] << 2) >> 2];
   $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2]);
   HEAP16[($0 + 22 | 0) + (HEAP32[$2 + 8 >> 2] << 1) >> 1] = HEAP32[$1 + (HEAP32[$2 + 8 >> 2] << 2) >> 2];
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP16[$0 + 30 >> 1] = HEAP32[HEAP32[HEAP32[$2 + 12 >> 2] >> 2] >> 2];
 HEAP16[$0 + 32 >> 1] = 0;
 HEAP16[$0 + 34 >> 1] = HEAP32[HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + 4 >> 2];
 HEAP16[$0 + 36 >> 1] = 0;
 HEAP16[$0 + 38 >> 1] = HEAP32[HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + 16 >> 2];
 global$0 = $2 + 16 | 0;
}
function jsvAsNumber($0) {
 var $1 = 0;
 $1 = global$0 - 80 | 0;
 global$0 = $1;
 HEAP32[$1 + 72 >> 2] = $0;
 label$1 : {
  label$2 : {
   if (!(jsvIsInt(HEAP32[$1 + 72 >> 2]) & 1)) {
    if (!(jsvIsFloat(HEAP32[$1 + 72 >> 2]) & 1)) {
     break label$2;
    }
   }
   HEAP32[$1 + 76 >> 2] = jsvLockAgain(HEAP32[$1 + 72 >> 2]);
   break label$1;
  }
  label$4 : {
   label$5 : {
    if (jsvIsBoolean(HEAP32[$1 + 72 >> 2]) & 1) {
     break label$5;
    }
    if (jsvIsPin(HEAP32[$1 + 72 >> 2]) & 1) {
     break label$5;
    }
    if (jsvIsNull(HEAP32[$1 + 72 >> 2]) & 1) {
     break label$5;
    }
    if (jsvIsBoolean(HEAP32[$1 + 72 >> 2]) & 1) {
     break label$5;
    }
    if (!(jsvIsArrayBufferName(HEAP32[$1 + 72 >> 2]) & 1)) {
     break label$4;
    }
   }
   HEAP32[$1 + 76 >> 2] = jsvNewFromInteger(jsvGetInteger(HEAP32[$1 + 72 >> 2]));
   break label$1;
  }
  label$6 : {
   if (!(jsvIsString(HEAP32[$1 + 72 >> 2]) & 1)) {
    break label$6;
   }
   if (!(jsvIsEmptyString(HEAP32[$1 + 72 >> 2]) & 1)) {
    if (!(jsvIsStringNumericInt(HEAP32[$1 + 72 >> 2], 0) & 1)) {
     break label$6;
    }
   }
   if ((jsvGetString(HEAP32[$1 + 72 >> 2], $1, 64) | 0) == 64) {
    jsExceptionHere(1, 2674, 0);
    HEAP32[$1 + 76 >> 2] = jsvNewFromFloat(nan);
    break label$1;
   }
   HEAP32[$1 + 76 >> 2] = jsvNewFromLongInteger(stringToInt($1), i64toi32_i32$HIGH_BITS);
   break label$1;
  }
  HEAP32[$1 + 76 >> 2] = jsvNewFromFloat(jsvGetFloat(HEAP32[$1 + 72 >> 2]));
 }
 global$0 = $1 + 80 | 0;
 return HEAP32[$1 + 76 >> 2];
}
function jspeStatementVar() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 HEAP32[$0 + 24 >> 2] = 0;
 jslGetNextToken();
 HEAP8[$0 + 23 | 0] = 1;
 while (1) {
  $1 = 0;
  label$2 : {
   if (!(HEAP8[$0 + 23 | 0] & 1)) {
    break label$2;
   }
   $1 = 0;
   if (HEAP16[HEAP32[13768] + 2 >> 1] != 128) {
    break label$2;
   }
   $1 = jspIsInterrupted() ^ -1;
  }
  if ($1 & 1) {
   label$4 : {
    HEAP32[$0 + 16 >> 2] = 0;
    if ((HEAP32[23778] & 63) == 1) {
     HEAP32[$0 + 16 >> 2] = jspeiFindOnTop(jslGetTokenValueAsString());
     if (!HEAP32[$0 + 16 >> 2]) {
      jspSetError();
      break label$4;
     }
    }
    if (!(jslMatch(128) & 1)) {
     jsvUnLock(HEAP32[$0 + 16 >> 2]);
     break label$4;
    }
    if (HEAP16[HEAP32[13768] + 2 >> 1] == 61) {
     if (!(jslMatch(61) & 1)) {
      jsvUnLock(HEAP32[$0 + 16 >> 2]);
      break label$4;
     }
     HEAP32[$0 + 12 >> 2] = jsvSkipNameAndUnLock(__jspeAssignmentExpression(jspeConditionalExpression()));
     if ((HEAP32[23778] & 63) == 1) {
      jsvReplaceWith(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 12 >> 2]);
     }
     jsvUnLock(HEAP32[$0 + 12 >> 2]);
    }
    jsvUnLock(HEAP32[$0 + 24 >> 2]);
    HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 16 >> 2];
    HEAP8[$0 + 23 | 0] = HEAP16[HEAP32[13768] + 2 >> 1] == 44;
    if (HEAP8[$0 + 23 | 0] & 1) {
     if (!(jslMatch(44) & 1)) {
      break label$4;
     }
    }
    continue;
   }
  }
  break;
 }
 HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
 global$0 = $0 + 32 | 0;
 return HEAP32[$0 + 28 >> 2];
}
function jswrap_isNaN($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 HEAP32[$1 + 40 >> 2] = $0;
 label$1 : {
  label$2 : {
   label$3 : {
    if (jsvIsUndefined(HEAP32[$1 + 40 >> 2]) & 1) {
     break label$3;
    }
    if (jsvIsObject(HEAP32[$1 + 40 >> 2]) & 1) {
     break label$3;
    }
    if (!(jsvIsFloat(HEAP32[$1 + 40 >> 2]) & 1)) {
     if (!(jsvIsArray(HEAP32[$1 + 40 >> 2]) & 1)) {
      break label$2;
     }
    }
    $0 = __DOUBLE_BITS(jsvGetFloat(HEAP32[$1 + 40 >> 2]));
    $2 = i64toi32_i32$HIGH_BITS & 2147483647;
    if (($2 | 0) == 2146435072 & $0 >>> 0 > 0 | $2 >>> 0 > 2146435072) {
     break label$3;
    }
    break label$2;
   }
   HEAP8[$1 + 47 | 0] = 1;
   break label$1;
  }
  if (jsvIsString(HEAP32[$1 + 40 >> 2]) & 1) {
   HEAP8[$1 + 39 | 0] = 1;
   jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 40 >> 2], 0);
   while (1) {
    if (jsvStringIteratorHasChar($1 + 16 | 0) & 1) {
     if (isWhitespace(jsvStringIteratorGetCharAndNext($1 + 16 | 0) << 24 >> 24) & 1) {
      continue;
     }
     HEAP8[$1 + 39 | 0] = 0;
    }
    break;
   }
   jsvStringIteratorFree($1 + 16 | 0);
   if (HEAP8[$1 + 39 | 0] & 1) {
    HEAP8[$1 + 47 | 0] = 0;
    break label$1;
   }
   $0 = __DOUBLE_BITS(jsvGetFloat(HEAP32[$1 + 40 >> 2]));
   $2 = i64toi32_i32$HIGH_BITS & 2147483647;
   HEAP8[$1 + 47 | 0] = ($2 | 0) == 2146435072 & $0 >>> 0 > 0 | $2 >>> 0 > 2146435072;
   break label$1;
  }
  HEAP8[$1 + 47 | 0] = 0;
 }
 global$0 = $1 + 48 | 0;
 return HEAP8[$1 + 47 | 0] & 1;
}
function tflite__ops__micro__activations__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 68 >> 2] = $1;
 HEAP32[$2 + 64 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 68 >> 2], 0);
 HEAP32[$2 + 60 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 68 >> 2]);
 label$1 : {
  if (HEAP32[HEAP32[$2 + 64 >> 2] >> 2] == 1) {
   tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 40 | 0, HEAP32[$2 + 64 >> 2]);
   $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 64 >> 2]);
   tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 8 | 0, HEAP32[$2 + 60 >> 2]);
   tflite__reference_ops__Logistic_28tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($2 + 40 | 0, $0, $2 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 60 >> 2]));
   $0 = $2 + 40 | 0;
   tflite__RuntimeShape___RuntimeShape_28_29($2 + 8 | 0);
   tflite__RuntimeShape___RuntimeShape_28_29($0);
   HEAP32[$2 + 76 >> 2] = 0;
   break label$1;
  }
  $0 = HEAP32[HEAP32[$2 + 72 >> 2] + 20 >> 2];
  $1 = HEAP32[$2 + 72 >> 2];
  HEAP32[$2 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 64 >> 2] >> 2]);
  FUNCTION_TABLE[$0]($1, 43774, $2);
  HEAP32[$2 + 76 >> 2] = 1;
 }
 global$0 = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}
function jsiDumpSerialInitialisation($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 48 | 0;
 global$0 = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP8[$4 + 35 | 0] = $3;
 HEAP32[$4 + 28 >> 2] = jsvFindChildFromString(HEAP32[23774], HEAP32[$4 + 36 >> 2], 0);
 HEAP32[$4 + 24 >> 2] = jsvSkipName(HEAP32[$4 + 28 >> 2]);
 if (HEAP32[$4 + 24 >> 2]) {
  if (HEAP8[$4 + 35 | 0] & 1) {
   jsiDumpObjectState(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2], HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2]);
  }
  HEAP32[$4 + 20 >> 2] = jsvObjectGetChild(HEAP32[$4 + 24 >> 2], 5345, 0);
  HEAP32[$4 + 16 >> 2] = jsvObjectGetChild(HEAP32[$4 + 24 >> 2], 5355, 0);
  if (!(HEAP32[$4 + 16 >> 2] ? 0 : !HEAP32[$4 + 20 >> 2])) {
   HEAP32[$4 + 12 >> 2] = jsvGetInteger(HEAP32[$4 + 20 >> 2]);
   if (HEAP32[$4 + 12 >> 2] <= 0) {
    HEAP32[$4 + 12 >> 2] = 9600;
   }
   $0 = HEAP32[$4 + 44 >> 2];
   $1 = HEAP32[$4 + 40 >> 2];
   $2 = HEAP32[$4 + 36 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 12 >> 2];
   HEAP32[$4 >> 2] = $2;
   cbprintf($0, $1, 5364, $4);
   if (jsvIsObject(HEAP32[$4 + 16 >> 2]) & 1) {
    FUNCTION_TABLE[HEAP32[$4 + 44 >> 2]](5376, HEAP32[$4 + 40 >> 2]);
    jsfGetJSONWithCallback(HEAP32[$4 + 16 >> 2], 0, 32, 0, HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2]);
   }
   FUNCTION_TABLE[HEAP32[$4 + 44 >> 2]](5379, HEAP32[$4 + 40 >> 2]);
  }
  jsvUnLock3(HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[$4 + 24 >> 2]);
 }
 jsvUnLock(HEAP32[$4 + 28 >> 2]);
 global$0 = $4 + 48 | 0;
}
function internal_memalign($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = 16;
 $3 = $0 >>> 0 > 16 ? $0 : 16;
 label$1 : {
  if (!($3 + -1 & $3)) {
   $0 = $3;
   break label$1;
  }
  while (1) {
   $0 = $2;
   $2 = $0 << 1;
   if ($0 >>> 0 < $3 >>> 0) {
    continue;
   }
   break;
  }
 }
 if (-64 - $0 >>> 0 <= $1 >>> 0) {
  HEAP32[63273] = 48;
  return 0;
 }
 $3 = $1 >>> 0 < 11 ? 16 : $1 + 11 & -8;
 $2 = dlmalloc(($3 + $0 | 0) + 12 | 0);
 if (!$2) {
  return 0;
 }
 $1 = $2 + -8 | 0;
 label$6 : {
  if (!($2 & $0 + -1)) {
   $0 = $1;
   break label$6;
  }
  $5 = $2 + -4 | 0;
  $6 = HEAP32[$5 >> 2];
  $2 = (($0 + $2 | 0) + -1 & 0 - $0) + -8 | 0;
  $0 = $2 - $1 >>> 0 > 15 ? $2 : $0 + $2 | 0;
  $2 = $0 - $1 | 0;
  $4 = ($6 & -8) - $2 | 0;
  if (!($6 & 3)) {
   $1 = HEAP32[$1 >> 2];
   HEAP32[$0 + 4 >> 2] = $4;
   HEAP32[$0 >> 2] = $1 + $2;
   break label$6;
  }
  HEAP32[$0 + 4 >> 2] = $4 | HEAP32[$0 + 4 >> 2] & 1 | 2;
  $4 = $0 + $4 | 0;
  HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] | 1;
  HEAP32[$5 >> 2] = $2 | HEAP32[$5 >> 2] & 1 | 2;
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
  dispose_chunk($1, $2);
 }
 $1 = HEAP32[$0 + 4 >> 2];
 label$9 : {
  if (!($1 & 3)) {
   break label$9;
  }
  $2 = $1 & -8;
  if ($2 >>> 0 <= $3 + 16 >>> 0) {
   break label$9;
  }
  HEAP32[$0 + 4 >> 2] = $3 | $1 & 1 | 2;
  $1 = $0 + $3 | 0;
  $3 = $2 - $3 | 0;
  HEAP32[$1 + 4 >> 2] = $3 | 3;
  $2 = $0 + $2 | 0;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 1;
  dispose_chunk($1, $3);
 }
 return $0 + 8 | 0;
}
function jsfReadFile($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP32[$3 + 84 >> 2] = $2;
 HEAP32[$3 + 32 >> 2] = HEAP32[$0 + 24 >> 2];
 $1 = HEAP32[$0 + 20 >> 2];
 HEAP32[$3 + 24 >> 2] = HEAP32[$0 + 16 >> 2];
 HEAP32[$3 + 28 >> 2] = $1;
 $1 = HEAP32[$0 + 12 >> 2];
 HEAP32[$3 + 16 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$3 + 20 >> 2] = $1;
 $1 = HEAP32[$0 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 44 >> 2] = jsfFindFile($3 + 8 | 0, $3 + 48 | 0);
 label$1 : {
  if (!HEAP32[$3 + 44 >> 2]) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$3 + 88 >> 2] < 0) {
   HEAP32[$3 + 88 >> 2] = 0;
  }
  HEAP32[$3 + 40 >> 2] = jsfGetFileSize($3 + 48 | 0);
  if (HEAP32[$3 + 84 >> 2] <= 0) {
   HEAP32[$3 + 84 >> 2] = HEAP32[$3 + 40 >> 2];
  }
  if (HEAP32[$3 + 88 >> 2] > HEAP32[$3 + 40 >> 2]) {
   HEAP32[$3 + 88 >> 2] = HEAP32[$3 + 40 >> 2];
  }
  if ((HEAP32[$3 + 88 >> 2] + HEAP32[$3 + 84 >> 2] | 0) > HEAP32[$3 + 40 >> 2]) {
   HEAP32[$3 + 84 >> 2] = HEAP32[$3 + 40 >> 2] - HEAP32[$3 + 88 >> 2];
  }
  if (HEAP32[$3 + 84 >> 2] <= 0) {
   HEAP32[$3 + 92 >> 2] = jsvNewFromEmptyString();
   break label$1;
  }
  HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 88 >> 2] + HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 36 >> 2] = jshFlashGetMemMapAddress(HEAP32[$3 + 44 >> 2]);
  HEAP32[$3 + 92 >> 2] = jsvNewNativeString(HEAP32[$3 + 36 >> 2], HEAP32[$3 + 84 >> 2]);
 }
 global$0 = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}
function jsvArrayJoin($0, $1) {
 var $2 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 68 >> 2] = $1;
 HEAP32[$2 + 64 >> 2] = jsvNewFromEmptyString();
 label$1 : {
  if (!HEAP32[$2 + 64 >> 2]) {
   HEAP32[$2 + 76 >> 2] = 0;
   break label$1;
  }
  jsvIteratorNew($2 + 16 | 0, HEAP32[$2 + 72 >> 2], 1);
  HEAP8[$2 + 15 | 0] = 1;
  while (1) {
   if (jspIsInterrupted() & 1) {
    $0 = 0;
   } else {
    $0 = jsvIteratorHasElement($2 + 16 | 0);
   }
   if ($0 & 1) {
    HEAP32[$2 + 8 >> 2] = jsvIteratorGetKey($2 + 16 | 0);
    if (jsvIsInt(HEAP32[$2 + 8 >> 2]) & 1) {
     if (!(!HEAP32[$2 + 68 >> 2] | HEAP8[$2 + 15 | 0] & 1)) {
      jsvAppendStringVarComplete(HEAP32[$2 + 64 >> 2], HEAP32[$2 + 68 >> 2]);
     }
     HEAP8[$2 + 15 | 0] = 0;
     HEAP32[$2 + 4 >> 2] = jsvIteratorGetValue($2 + 16 | 0);
     label$9 : {
      if (!HEAP32[$2 + 4 >> 2]) {
       break label$9;
      }
      if (jsvIsNull(HEAP32[$2 + 4 >> 2]) & 1) {
       break label$9;
      }
      HEAP32[$2 >> 2] = jsvAsString(HEAP32[$2 + 4 >> 2]);
      if (HEAP32[$2 >> 2]) {
       jsvAppendStringVarComplete(HEAP32[$2 + 64 >> 2], HEAP32[$2 >> 2]);
       jsvUnLock(HEAP32[$2 >> 2]);
      }
     }
     jsvUnLock(HEAP32[$2 + 4 >> 2]);
    }
    $0 = $2 + 16 | 0;
    jsvUnLock(HEAP32[$2 + 8 >> 2]);
    jsvIteratorNext($0);
    continue;
   }
   break;
  }
  jsvIteratorFree($2 + 16 | 0);
  HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 64 >> 2];
 }
 global$0 = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}
function jshSPISendMany($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 48 | 0;
 global$0 = $4;
 HEAP8[$4 + 47 | 0] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP32[$4 + 32 >> 2] = $3;
 HEAP32[$4 + 28 >> 2] = 0;
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$4 + 20 >> 2] = 0;
 while (1) {
  if (HEAPU32[$4 + 24 >> 2] < HEAPU32[$4 + 32 >> 2]) {
   $0 = jspIsInterrupted() ^ -1;
  } else {
   $0 = 0;
  }
  if ($0 & 1) {
   $0 = HEAPU8[$4 + 47 | 0];
   $1 = HEAP32[$4 + 40 >> 2];
   $2 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 24 >> 2] = $2 + 1;
   HEAP32[$4 + 16 >> 2] = jshSPISend($0, HEAPU8[$1 + $2 | 0]);
   if (HEAP32[$4 + 16 >> 2] >= 0) {
    if (HEAP32[$4 + 36 >> 2]) {
     $0 = HEAP32[$4 + 16 >> 2];
     $1 = HEAP32[$4 + 36 >> 2];
     $2 = HEAP32[$4 + 20 >> 2];
     HEAP32[$4 + 20 >> 2] = $2 + 1;
     HEAP8[$1 + $2 | 0] = $0;
    }
   }
   continue;
  }
  break;
 }
 label$7 : {
  if (HEAP32[$4 + 36 >> 2]) {
   while (1) {
    if (HEAPU32[$4 + 20 >> 2] < HEAPU32[$4 + 32 >> 2]) {
     $0 = jspIsInterrupted() ^ -1;
    } else {
     $0 = 0;
    }
    if ($0 & 1) {
     HEAP32[$4 + 12 >> 2] = jshSPISend(HEAPU8[$4 + 47 | 0], -1);
     $0 = HEAP32[$4 + 12 >> 2];
     $1 = HEAP32[$4 + 36 >> 2];
     $2 = HEAP32[$4 + 20 >> 2];
     HEAP32[$4 + 20 >> 2] = $2 + 1;
     HEAP8[$1 + $2 | 0] = $0;
     continue;
    }
    break;
   }
   break label$7;
  }
  jshUSARTKick(HEAPU8[$4 + 47 | 0]);
 }
 if (HEAP32[$4 + 28 >> 2]) {
  FUNCTION_TABLE[HEAP32[$4 + 28 >> 2]]();
 }
 global$0 = $4 + 48 | 0;
}
function tflite__ConvertTensorType_28tflite__TensorType_2c_20TfLiteType__2c_20tflite__ErrorReporter__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 0;
 $0 = HEAP32[$3 + 24 >> 2];
 label$1 : {
  if ($0 >>> 0 > 9) {
   break label$1;
  }
  label$2 : {
   switch ($0 - 1 | 0) {
   default:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 1;
    break label$1;
   case 0:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 10;
    break label$1;
   case 6:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 7;
    break label$1;
   case 1:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 2;
    break label$1;
   case 2:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 3;
    break label$1;
   case 8:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 9;
    break label$1;
   case 3:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 4;
    break label$1;
   case 4:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 5;
    break label$1;
   case 5:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 6;
    break label$1;
   case 7:
    break label$2;
   }
  }
  HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 8;
 }
 label$12 : {
  if (!HEAP32[HEAP32[$3 + 20 >> 2] >> 2]) {
   $0 = HEAP32[$3 + 16 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$3 + 24 >> 2];
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 48602, $3);
   HEAP32[$3 + 28 >> 2] = 1;
   break label$12;
  }
  HEAP32[$3 + 28 >> 2] = 0;
 }
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function __stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $4 = HEAP32[$0 + 28 >> 2];
 HEAP32[$3 + 16 >> 2] = $4;
 $5 = HEAP32[$0 + 20 >> 2];
 HEAP32[$3 + 28 >> 2] = $2;
 HEAP32[$3 + 24 >> 2] = $1;
 $1 = $5 - $4 | 0;
 HEAP32[$3 + 20 >> 2] = $1;
 $5 = $1 + $2 | 0;
 $7 = 2;
 $1 = $3 + 16 | 0;
 while (1) {
  label$2 : {
   label$4 : {
    if (__wasi_syscall_ret(__wasi_fd_write(HEAP32[$0 + 60 >> 2], $1 | 0, $7 | 0, $3 + 12 | 0) | 0)) {
     HEAP32[$3 + 12 >> 2] = -1;
     $4 = -1;
     break label$4;
    }
    $4 = HEAP32[$3 + 12 >> 2];
   }
   label$3 : {
    if (($4 | 0) == ($5 | 0)) {
     $1 = HEAP32[$0 + 44 >> 2];
     HEAP32[$0 + 28 >> 2] = $1;
     HEAP32[$0 + 20 >> 2] = $1;
     HEAP32[$0 + 16 >> 2] = $1 + HEAP32[$0 + 48 >> 2];
     $0 = $2;
     break label$3;
    }
    if (($4 | 0) > -1) {
     break label$2;
    }
    HEAP32[$0 + 28 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 0;
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
    $0 = 0;
    if (($7 | 0) == 2) {
     break label$3;
    }
    $0 = $2 - HEAP32[$1 + 4 >> 2] | 0;
   }
   global$0 = $3 + 32 | 0;
   return $0 | 0;
  }
  $6 = HEAP32[$1 + 4 >> 2];
  $8 = $4 >>> 0 > $6 >>> 0;
  $1 = $8 ? $1 + 8 | 0 : $1;
  $6 = $4 - ($8 ? $6 : 0) | 0;
  HEAP32[$1 >> 2] = $6 + HEAP32[$1 >> 2];
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - $6;
  $5 = $5 - $4 | 0;
  $7 = $7 - $8 | 0;
  continue;
 }
}
function jsvNewFromString($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = jsvNewWithFlags(27);
 label$1 : {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 16 >> 2] = jsvLockAgain(HEAP32[$1 + 20 >> 2]);
  while (1) {
   if (HEAPU8[HEAP32[$1 + 24 >> 2]]) {
    HEAP32[$1 + 8 >> 2] = jsvGetMaxCharactersInVar(HEAP32[$1 + 16 >> 2]);
    HEAP32[$1 + 12 >> 2] = 0;
    while (1) {
     if (HEAPU32[$1 + 12 >> 2] < HEAPU32[$1 + 8 >> 2] ? HEAP8[HEAP32[$1 + 24 >> 2]] : 0) {
      $0 = HEAP32[$1 + 24 >> 2];
      HEAP32[$1 + 24 >> 2] = $0 + 1;
      HEAP8[HEAP32[$1 + 16 >> 2] + HEAP32[$1 + 12 >> 2] | 0] = HEAPU8[$0 | 0];
      HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] + 1;
      continue;
     }
     break;
    }
    jsvSetCharactersInVar(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 12 >> 2]);
    if (HEAPU8[HEAP32[$1 + 24 >> 2]]) {
     HEAP32[$1 + 4 >> 2] = jsvNewWithFlags(40);
     if (!HEAP32[$1 + 4 >> 2]) {
      jsvUnLock(HEAP32[$1 + 16 >> 2]);
      HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
      break label$1;
     }
     jsvSetLastChild(HEAP32[$1 + 16 >> 2], jsvGetRef(HEAP32[$1 + 4 >> 2]) & 65535);
     jsvUnLock(HEAP32[$1 + 16 >> 2]);
     HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 4 >> 2];
    }
    continue;
   }
   break;
  }
  jsvUnLock(HEAP32[$1 + 16 >> 2]);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function tflite__TfLiteTypeSizeOf_28TfLiteType_2c_20unsigned_20long__2c_20tflite__ErrorReporter__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1 : {
  label$2 : {
   label$3 : {
    $0 = HEAP32[$3 + 24 >> 2] + -1 | 0;
    if ($0 >>> 0 > 8) {
     break label$3;
    }
    label$4 : {
     switch ($0 - 1 | 0) {
     default:
      HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 4;
      break label$2;
     case 5:
      HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 2;
      break label$2;
     case 0:
      HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 4;
      break label$2;
     case 1:
      HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 1;
      break label$2;
     case 7:
      HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 1;
      break label$2;
     case 2:
      HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 8;
      break label$2;
     case 4:
      HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 1;
      break label$2;
     case 3:
      break label$3;
     case 6:
      break label$4;
     }
    }
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 8;
    break label$2;
   }
   $0 = HEAP32[$3 + 16 >> 2];
   $1 = TfLiteTypeGetName(HEAP32[$3 + 24 >> 2]);
   HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 >> 2] = $1;
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 39827, $3);
   HEAP32[$3 + 28 >> 2] = 1;
   break label$1;
  }
  HEAP32[$3 + 28 >> 2] = 0;
 }
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function tflite__ops__micro__activations__Softmax2DQuantized_28TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteSoftmaxParams__2c_20tflite__ops__micro__activations___28anonymous_20namespace_29__OpData__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 128 | 0;
 global$0 = $4;
 HEAP32[$4 + 124 >> 2] = $0;
 HEAP32[$4 + 120 >> 2] = $1;
 HEAP32[$4 + 116 >> 2] = $2;
 HEAP32[$4 + 112 >> 2] = $3;
 HEAP32[$4 + 108 >> 2] = HEAP32[HEAP32[HEAP32[$4 + 124 >> 2] + 8 >> 2] + 4 >> 2];
 HEAP32[$4 + 104 >> 2] = HEAP32[HEAP32[HEAP32[$4 + 124 >> 2] + 8 >> 2] + 8 >> 2];
 HEAP32[$4 + 80 >> 2] = HEAP32[$4 + 108 >> 2];
 HEAP32[$4 + 84 >> 2] = 1;
 HEAP32[$4 + 88 >> 2] = 1;
 HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 104 >> 2];
 tflite__RuntimeShape__RuntimeShape_28int_2c_20int_20const__29($4 + 56 | 0, 4, $4 + 80 | 0);
 HEAP32[$4 + 24 >> 2] = HEAP32[HEAP32[$4 + 112 >> 2] >> 2];
 HEAP32[$4 + 28 >> 2] = HEAP32[HEAP32[$4 + 112 >> 2] + 4 >> 2];
 HEAP32[$4 + 40 >> 2] = HEAP32[HEAP32[$4 + 112 >> 2] + 12 >> 2];
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$4 + 124 >> 2]);
 $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$4 + 120 >> 2]);
 $2 = $4 + 56 | 0;
 tflite__reference_ops__Softmax_28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($4 + 16 | 0, $2, $0, $2, $1);
 tflite__RuntimeShape___RuntimeShape_28_29($4 + 56 | 0);
 global$0 = $4 + 128 | 0;
}
function _jswrap_promise_add($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP8[$3 + 39 | 0] = $2;
 label$1 : {
  if (!(jsvIsFunction(HEAP32[$3 + 40 >> 2]) & 1)) {
   HEAP32[$3 >> 2] = HEAP32[$3 + 40 >> 2];
   jsExceptionHere(3, 36667, $3);
   break label$1;
  }
  if (HEAP8[$3 + 39 | 0] & 1) {
   HEAP32[$3 + 32 >> 2] = jsvFindChildFromString(HEAP32[$3 + 44 >> 2], 36565, 0);
   if (HEAP32[$3 + 32 >> 2]) {
    $0 = $3 + 32 | 0;
    HEAP32[$3 + 32 >> 2] = jsvSkipNameAndUnLock(HEAP32[$3 + 32 >> 2]);
    jsiQueueEvents(0, HEAP32[$3 + 40 >> 2], $0, 1);
    jsvUnLock(HEAP32[$3 + 32 >> 2]);
    break label$1;
   }
  }
  HEAP32[$3 + 28 >> 2] = HEAP8[$3 + 39 | 0] & 1 ? 36539 : 36544;
  HEAP32[$3 + 24 >> 2] = jsvObjectGetChild(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 28 >> 2], 0);
  if (!HEAP32[$3 + 24 >> 2]) {
   jsvObjectSetChild(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 40 >> 2]);
   break label$1;
  }
  label$6 : {
   if (jsvIsArray(HEAP32[$3 + 24 >> 2]) & 1) {
    jsvArrayPush(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 40 >> 2]);
    break label$6;
   }
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 40 >> 2];
   HEAP32[$3 + 12 >> 2] = jsvNewArray($3 + 16 | 0, 2);
   jsvObjectSetChild(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 12 >> 2]);
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
  }
  jsvUnLock(HEAP32[$3 + 24 >> 2]);
 }
 global$0 = $3 + 48 | 0;
}
function lcdScroll_ArrayBuffer_flat8($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $0 = HEAP32[$3 + 28 >> 2];
 HEAP32[$3 + 16 >> 2] = 0 - (HEAP32[$3 + 24 >> 2] + Math_imul(HEAP32[$3 + 20 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) | 0);
 $0 = HEAP32[$3 + 28 >> 2];
 $1 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8;
 $0 = HEAP32[$3 + 28 >> 2];
 HEAP32[$3 + 12 >> 2] = Math_imul($1, HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8);
 label$1 : {
  if (HEAP32[$3 + 16 >> 2] > 0) {
   $0 = HEAP32[$3 + 28 >> 2];
   $1 = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
   $0 = HEAP32[$3 + 28 >> 2];
   memcpy($1, HEAP32[$3 + 16 >> 2] + (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) | 0, HEAP32[$3 + 12 >> 2] - HEAP32[$3 + 16 >> 2] | 0);
   break label$1;
  }
  if (HEAP32[$3 + 16 >> 2] < 0) {
   $0 = HEAP32[$3 + 28 >> 2];
   $1 = (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) - HEAP32[$3 + 16 >> 2] | 0;
   $0 = HEAP32[$3 + 28 >> 2];
   memcpy($1, HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24), HEAP32[$3 + 12 >> 2] + HEAP32[$3 + 16 >> 2] | 0);
  }
 }
 global$0 = $3 + 32 | 0;
}
function jsvGarbageCollectMarkUsed($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 $0 = HEAP32[$1 + 28 >> 2];
 HEAP16[$0 + 14 >> 1] = HEAPU16[$0 + 14 >> 1] & 65407;
 if (jsvHasCharacterData(HEAP32[$1 + 28 >> 2]) & 1) {
  HEAP16[$1 + 26 >> 1] = jsvGetLastChild(HEAP32[$1 + 28 >> 2]);
  while (1) {
   if (HEAPU16[$1 + 26 >> 1]) {
    HEAP32[$1 + 20 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 26 >> 1]);
    $0 = HEAP32[$1 + 20 >> 2];
    HEAP16[$0 + 14 >> 1] = HEAPU16[$0 + 14 >> 1] & 65407;
    HEAP16[$1 + 26 >> 1] = jsvGetLastChild(HEAP32[$1 + 20 >> 2]);
    continue;
   }
   break;
  }
 }
 label$4 : {
  if (jsvHasSingleChild(HEAP32[$1 + 28 >> 2]) & 1) {
   if (jsvGetFirstChild(HEAP32[$1 + 28 >> 2]) & 65535) {
    HEAP32[$1 + 16 >> 2] = jsvGetAddressOf(jsvGetFirstChild(HEAP32[$1 + 28 >> 2]) & 65535);
    if (HEAPU16[HEAP32[$1 + 16 >> 2] + 14 >> 1] & 128) {
     jsvGarbageCollectMarkUsed(HEAP32[$1 + 16 >> 2]);
    }
   }
   break label$4;
  }
  if (jsvHasChildren(HEAP32[$1 + 28 >> 2]) & 1) {
   HEAP16[$1 + 14 >> 1] = jsvGetFirstChild(HEAP32[$1 + 28 >> 2]);
   while (1) {
    if (HEAPU16[$1 + 14 >> 1]) {
     HEAP32[$1 + 8 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 14 >> 1]);
     if (HEAPU16[HEAP32[$1 + 8 >> 2] + 14 >> 1] & 128) {
      jsvGarbageCollectMarkUsed(HEAP32[$1 + 8 >> 2]);
     }
     HEAP16[$1 + 14 >> 1] = jsvGetNextSibling(HEAP32[$1 + 8 >> 2]);
     continue;
    }
    break;
   }
  }
 }
 global$0 = $1 + 32 | 0;
}
function jswrap_math_round($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 HEAPF64[$1 + 32 >> 3] = $0;
 label$1 : {
  label$2 : {
   $3 = __DOUBLE_BITS(HEAPF64[$1 + 32 >> 3]);
   $2 = i64toi32_i32$HIGH_BITS & 2147483647;
   if (($2 | 0) == 2146435072 & $3 >>> 0 < 0 | $2 >>> 0 < 2146435072) {
    $2 = global$0 - 16 | 0;
    HEAPF64[$2 + 8 >> 3] = HEAPF64[$1 + 32 >> 3];
    HEAPF64[$2 >> 3] = -0;
    if (HEAP32[$2 + 8 >> 2] != HEAP32[$2 >> 2] | HEAP32[$2 + 12 >> 2] != HEAP32[$2 + 4 >> 2]) {
     break label$2;
    }
   }
   HEAP32[$1 + 44 >> 2] = jsvNewFromFloat(HEAPF64[$1 + 32 >> 3]);
   break label$1;
  }
  HEAPF64[$1 + 32 >> 3] = HEAPF64[$1 + 32 >> 3] + (HEAPF64[$1 + 32 >> 3] < 0 ? -.4999999999 : .4999999999);
  $2 = $1;
  $0 = HEAPF64[$1 + 32 >> 3];
  label$4 : {
   if (Math_abs($0) < 0x8000000000000000) {
    $4 = ~~$0 >>> 0;
    $3 = Math_abs($0) >= 1 ? $0 > 0 ? ~~Math_min(Math_floor($0 / 4294967296), 4294967295) >>> 0 : ~~Math_ceil(($0 - +(~~$0 >>> 0 >>> 0)) / 4294967296) >>> 0 : 0;
    break label$4;
   }
   $3 = -2147483648;
  }
  HEAP32[$2 + 24 >> 2] = $4;
  HEAP32[$2 + 28 >> 2] = $3;
  if (!(!!(HEAP32[$1 + 24 >> 2] | HEAP32[$1 + 28 >> 2]) | !(HEAPF64[$1 + 32 >> 3] < 0))) {
   HEAP32[$1 + 44 >> 2] = jsvNewFromFloat(-0);
   break label$1;
  }
  HEAP32[$1 + 44 >> 2] = jsvNewFromLongInteger(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 28 >> 2]);
 }
 global$0 = $1 + 48 | 0;
 return HEAP32[$1 + 44 >> 2];
}
function jspeStatementFunctionDecl($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP8[$1 + 27 | 0] = $0;
 HEAP32[$1 + 20 >> 2] = 0;
 jslGetNextToken();
 HEAP8[$1 + 15 | 0] = (HEAP32[23778] & 63) == 1;
 label$1 : {
  if (HEAP8[$1 + 15 | 0] & 1) {
   HEAP32[$1 + 20 >> 2] = jsvMakeIntoVariableName(jslGetTokenValueAsVar(), 0);
   if (!HEAP32[$1 + 20 >> 2]) {
    HEAP32[$1 + 28 >> 2] = 0;
    break label$1;
   }
  }
  if (!(jslMatch(128) & 1)) {
   jsvUnLock(HEAP32[$1 + 20 >> 2]);
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  $0 = $1;
  label$5 : {
   if (HEAP8[$1 + 27 | 0] & 1) {
    $2 = jspeClassDefinition(0);
    break label$5;
   }
   $2 = jspeFunctionDefinition(0);
  }
  HEAP32[$0 + 16 >> 2] = $2;
  if (HEAP8[$1 + 15 | 0] & 1) {
   HEAP32[$1 + 8 >> 2] = jspeiFindNameOnTop(HEAP32[$1 + 20 >> 2]);
   HEAP32[$1 + 4 >> 2] = jsvSkipName(HEAP32[$1 + 8 >> 2]);
   label$8 : {
    if (jsvIsFunction(HEAP32[$1 + 4 >> 2]) & 1) {
     HEAP32[$1 + 16 >> 2] = jsvSkipNameAndUnLock(HEAP32[$1 + 16 >> 2]);
     jswrap_function_replaceWith(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 16 >> 2]);
     break label$8;
    }
    jsvReplaceWith(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 16 >> 2]);
   }
   jsvUnLock(HEAP32[$1 + 20 >> 2]);
   HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 8 >> 2];
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 16 >> 2]);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function tflite___28anonymous_20namespace_29__FlatBufferIntVectorToArray_28int_2c_20flatbuffers__Vector_int__20const__2c_20int__2c_20tflite__ErrorReporter__2c_20char_20const__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 + -64 | 0;
 global$0 = $4;
 HEAP32[$4 + 56 >> 2] = 32;
 HEAP32[$4 + 52 >> 2] = $0;
 HEAP32[$4 + 48 >> 2] = $1;
 HEAP32[$4 + 44 >> 2] = $2;
 HEAP32[$4 + 40 >> 2] = $3;
 label$1 : {
  if (!HEAP32[$4 + 52 >> 2]) {
   $0 = HEAP32[$4 + 44 >> 2];
   HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 40 >> 2];
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 48801, $4 + 16 | 0);
   HEAP32[$4 + 60 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 36 >> 2] = flatbuffers__Vector_int___size_28_29_20const(HEAP32[$4 + 52 >> 2]);
  if (HEAPU32[$4 + 36 >> 2] > HEAP32[$4 + 56 >> 2] >>> 2 >>> 0) {
   $0 = HEAP32[$4 + 44 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$4 + 40 >> 2];
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 48847, $4);
   HEAP32[$4 + 60 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 32 >> 2] = 0;
  while (1) {
   if (HEAP32[$4 + 32 >> 2] < HEAP32[$4 + 36 >> 2]) {
    $0 = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 32 >> 2]);
    HEAP32[HEAP32[$4 + 48 >> 2] + (HEAP32[$4 + 32 >> 2] << 2) >> 2] = $0;
    HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 32 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$4 + 60 >> 2] = 0;
 }
 global$0 = $4 - -64 | 0;
 return HEAP32[$4 + 60 >> 2];
}
function tflite__BytesRequiredForTensor_28tflite__Tensor_20const__2c_20unsigned_20long__2c_20unsigned_20long__2c_20tflite__ErrorReporter__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 HEAP32[$4 + 8 >> 2] = 1;
 HEAP32[$4 + 4 >> 2] = 0;
 while (1) {
  if (HEAPU32[$4 + 4 >> 2] < flatbuffers__Vector_int___Length_28_29_20const(tflite__Tensor__shape_28_29_20const(HEAP32[$4 + 24 >> 2])) >>> 0) {
   HEAP32[$4 + 8 >> 2] = Math_imul(flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__Tensor__shape_28_29_20const(HEAP32[$4 + 24 >> 2]), HEAP32[$4 + 4 >> 2]), HEAP32[$4 + 8 >> 2]);
   HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 label$3 : {
  if (tflite__ConvertTensorType_28tflite__TensorType_2c_20TfLiteType__2c_20tflite__ErrorReporter__29(tflite__Tensor__type_28_29_20const(HEAP32[$4 + 24 >> 2]), $4, HEAP32[$4 + 12 >> 2])) {
   HEAP32[$4 + 28 >> 2] = 1;
   break label$3;
  }
  if (tflite__TfLiteTypeSizeOf_28TfLiteType_2c_20unsigned_20long__2c_20tflite__ErrorReporter__29(HEAP32[$4 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[$4 + 12 >> 2])) {
   HEAP32[$4 + 28 >> 2] = 1;
   break label$3;
  }
  HEAP32[HEAP32[$4 + 20 >> 2] >> 2] = Math_imul(HEAP32[$4 + 8 >> 2], HEAP32[HEAP32[$4 + 16 >> 2] >> 2]);
  HEAP32[$4 + 28 >> 2] = 0;
 }
 global$0 = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}
function jswrap_object_removeAllListeners($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1 : {
  if (!(jsvHasChildren(HEAP32[$2 + 28 >> 2]) & 1)) {
   jsExceptionHere(3, 35149, 0);
   break label$1;
  }
  if (jsvIsString(HEAP32[$2 + 24 >> 2]) & 1) {
   HEAP32[$2 >> 2] = HEAP32[$2 + 24 >> 2];
   HEAP32[$2 + 20 >> 2] = jsvVarPrintf(35347, $2);
   if (!HEAP32[$2 + 20 >> 2]) {
    break label$1;
   }
   HEAP32[$2 + 16 >> 2] = jsvFindChildFromVar(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2], 1);
   jsvUnLock(HEAP32[$2 + 20 >> 2]);
   if (HEAP32[$2 + 16 >> 2]) {
    jsvRemoveChild(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 16 >> 2]);
    jsvUnLock(HEAP32[$2 + 16 >> 2]);
   }
   break label$1;
  }
  label$5 : {
   if (jsvIsUndefined(HEAP32[$2 + 24 >> 2]) & 1) {
    jsvObjectIteratorNew($2 + 8 | 0, HEAP32[$2 + 28 >> 2]);
    while (1) {
     if (jsvObjectIteratorHasValue($2 + 8 | 0) & 1) {
      $0 = $2 + 8 | 0;
      HEAP32[$2 + 4 >> 2] = jsvObjectIteratorGetKey($0);
      jsvObjectIteratorNext($0);
      if (jsvIsStringEqualOrStartsWith(HEAP32[$2 + 4 >> 2], 35520, 1) & 1) {
       jsvRemoveChild(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 4 >> 2]);
      }
      jsvUnLock(HEAP32[$2 + 4 >> 2]);
      continue;
     }
     break;
    }
    jsvObjectIteratorFree($2 + 8 | 0);
    break label$5;
   }
   jsExceptionHere(3, 35524, 0);
  }
 }
 global$0 = $2 + 32 | 0;
}
function jsfRemoveCodeFromFlash() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 192 | 0;
 global$0 = $0;
 $1 = $0 + 160 | 0;
 jsiConsolePrintString(2487);
 jsfNameFromString($1, 2108);
 HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 184 >> 2];
 $1 = HEAP32[$0 + 180 >> 2];
 HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 176 >> 2];
 HEAP32[$0 + 20 >> 2] = $1;
 $1 = HEAP32[$0 + 172 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 168 >> 2];
 HEAP32[$0 + 12 >> 2] = $1;
 $1 = HEAP32[$0 + 164 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$0 + 160 >> 2];
 HEAP32[$0 + 4 >> 2] = $1;
 jsfEraseFile($0);
 jsfNameFromString($0 + 128 | 0, 2462);
 HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 152 >> 2];
 $1 = HEAP32[$0 + 148 >> 2];
 HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 144 >> 2];
 HEAP32[$0 + 52 >> 2] = $1;
 $1 = HEAP32[$0 + 140 >> 2];
 HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 136 >> 2];
 HEAP32[$0 + 44 >> 2] = $1;
 $1 = HEAP32[$0 + 132 >> 2];
 HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 128 >> 2];
 HEAP32[$0 + 36 >> 2] = $1;
 jsfEraseFile($0 + 32 | 0);
 jsfNameFromString($0 + 96 | 0, 2471);
 HEAP32[$0 + 88 >> 2] = HEAP32[$0 + 120 >> 2];
 $1 = HEAP32[$0 + 116 >> 2];
 HEAP32[$0 + 80 >> 2] = HEAP32[$0 + 112 >> 2];
 HEAP32[$0 + 84 >> 2] = $1;
 $1 = HEAP32[$0 + 108 >> 2];
 HEAP32[$0 + 72 >> 2] = HEAP32[$0 + 104 >> 2];
 HEAP32[$0 + 76 >> 2] = $1;
 $1 = HEAP32[$0 + 100 >> 2];
 HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 96 >> 2];
 HEAP32[$0 + 68 >> 2] = $1;
 jsfEraseFile($0 - -64 | 0);
 jsiConsolePrintString(2507);
 global$0 = $0 + 192 | 0;
}
function jsvIteratorNew($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1 : {
  label$2 : {
   label$3 : {
    if (jsvIsArray(HEAP32[$3 + 8 >> 2]) & 1) {
     break label$3;
    }
    if (jsvIsObject(HEAP32[$3 + 8 >> 2]) & 1) {
     break label$3;
    }
    if (jsvIsFunction(HEAP32[$3 + 8 >> 2]) & 1) {
     break label$3;
    }
    if (!(jsvIsGetterOrSetter(HEAP32[$3 + 8 >> 2]) & 1)) {
     break label$2;
    }
   }
   HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = 2;
   if (!(!(jsvIsArray(HEAP32[$3 + 8 >> 2]) & 1) | !(HEAP32[$3 + 4 >> 2] & 1))) {
    HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = 4;
    HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2] = 0;
    $0 = jsvLockAgain(HEAP32[$3 + 8 >> 2]);
    HEAP32[HEAP32[$3 + 12 >> 2] + 8 >> 2] = $0;
   }
   jsvObjectIteratorNew(HEAP32[$3 + 12 >> 2] + 4 | 0, HEAP32[$3 + 8 >> 2]);
   break label$1;
  }
  label$5 : {
   if (jsvIsArrayBuffer(HEAP32[$3 + 8 >> 2]) & 1) {
    HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = 3;
    jsvArrayBufferIteratorNew(HEAP32[$3 + 12 >> 2] + 4 | 0, HEAP32[$3 + 8 >> 2], 0);
    break label$5;
   }
   label$7 : {
    if (jsvHasCharacterData(HEAP32[$3 + 8 >> 2]) & 1) {
     HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = 1;
     jsvStringIteratorNew(HEAP32[$3 + 12 >> 2] + 4 | 0, HEAP32[$3 + 8 >> 2], 0);
     break label$7;
    }
    HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = 0;
   }
  }
 }
 global$0 = $3 + 16 | 0;
}
function jswrap_storagefile_erase($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 80 | 0;
 global$0 = $1;
 HEAP32[$1 + 76 >> 2] = $0;
 jsfNameFromVarAndUnLock($1 + 48 | 0, jsvObjectGetChild(HEAP32[$1 + 76 >> 2], 36997, 0));
 HEAP32[$1 + 44 >> 2] = 27;
 while (1) {
  if (HEAP32[$1 + 44 >> 2] ? !HEAP8[(HEAP32[$1 + 44 >> 2] + $1 | 0) + 47 | 0] : 0) {
   HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 44 >> 2] + -1;
   continue;
  }
  break;
 }
 HEAP32[$1 + 40 >> 2] = 1;
 HEAP8[$1 + 39 | 0] = 1;
 while (1) {
  if (HEAP8[$1 + 39 | 0] & 1) {
   HEAP8[HEAP32[$1 + 44 >> 2] + ($1 + 48 | 0) | 0] = HEAP32[$1 + 40 >> 2];
   HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 72 >> 2];
   $0 = HEAP32[$1 + 68 >> 2];
   HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 64 >> 2];
   HEAP32[$1 + 28 >> 2] = $0;
   $0 = HEAP32[$1 + 60 >> 2];
   HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 56 >> 2];
   HEAP32[$1 + 20 >> 2] = $0;
   $0 = HEAP32[$1 + 52 >> 2];
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 48 >> 2];
   HEAP32[$1 + 12 >> 2] = $0;
   HEAP8[$1 + 39 | 0] = jsfEraseFile($1 + 8 | 0) & 1;
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
   continue;
  }
  break;
 }
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 76 >> 2], 37002, jsvNewFromInteger(1));
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 76 >> 2], 37008, jsvNewFromInteger(0));
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 76 >> 2], 37015, jsvNewFromInteger(0));
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 76 >> 2], 37020, jsvNewFromInteger(0));
 global$0 = $1 + 80 | 0;
}
function jswrap_graphics_fillPoly($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 416 | 0;
 global$0 = $2;
 HEAP32[$2 + 408 >> 2] = $0;
 HEAP32[$2 + 404 >> 2] = $1;
 label$1 : {
  if (!(graphicsGetFromVar($2 + 336 | 0, HEAP32[$2 + 408 >> 2]) & 1)) {
   HEAP32[$2 + 412 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsIterable(HEAP32[$2 + 404 >> 2]) & 1)) {
   HEAP32[$2 + 412 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 332 >> 2] = 128;
  HEAP32[$2 + 60 >> 2] = 0;
  jsvIteratorNew($2 + 16 | 0, HEAP32[$2 + 404 >> 2], 1);
  while (1) {
   if (jsvIteratorHasElement($2 + 16 | 0) & 1) {
    $0 = HEAP32[$2 + 60 >> 2] < 128;
   } else {
    $0 = 0;
   }
   if ($0) {
    $1 = $2 + 16 | 0;
    $5 = $2 - -64 | 0;
    $3 = jsvIteratorGetFloatValue($2 + 16 | 0) * 16 + .5;
    label$8 : {
     if (Math_abs($3) < 2147483648) {
      $0 = ~~$3;
      break label$8;
     }
     $0 = -2147483648;
    }
    $4 = HEAP32[$2 + 60 >> 2];
    HEAP32[$2 + 60 >> 2] = $4 + 1;
    HEAP16[($4 << 1) + $5 >> 1] = $0;
    jsvIteratorNext($1);
    continue;
   }
   break;
  }
  jsvIteratorFree($2 + 16 | 0);
  if (HEAP32[$2 + 60 >> 2] == 128) {
   HEAP32[$2 >> 2] = 64;
   jsWarn(39062, $2);
  }
  $0 = $2 + 336 | 0;
  graphicsFillPoly($0, HEAP32[$2 + 60 >> 2] / 2 | 0, $2 - -64 | 0);
  graphicsSetVar($0);
  HEAP32[$2 + 412 >> 2] = jsvLockAgain(HEAP32[$2 + 408 >> 2]);
 }
 global$0 = $2 + 416 | 0;
 return HEAP32[$2 + 412 >> 2];
}
function heatshrink_encoder_sink($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 label$1 : {
  if (!(HEAP32[$4 + 12 >> 2] ? !(!HEAP32[$4 + 24 >> 2] | !HEAP32[$4 + 20 >> 2]) : 0)) {
   HEAP32[$4 + 28 >> 2] = -1;
   break label$1;
  }
  if (is_finishing(HEAP32[$4 + 24 >> 2])) {
   HEAP32[$4 + 28 >> 2] = -2;
   break label$1;
  }
  if (HEAPU8[HEAP32[$4 + 24 >> 2] + 12 | 0]) {
   HEAP32[$4 + 28 >> 2] = -2;
   break label$1;
  }
  HEAP16[$4 + 10 >> 1] = (get_input_offset(HEAP32[$4 + 24 >> 2]) & 65535) + HEAPU16[HEAP32[$4 + 24 >> 2] >> 1];
  HEAP16[$4 + 8 >> 1] = get_input_buffer_size(HEAP32[$4 + 24 >> 2]);
  HEAP16[$4 + 6 >> 1] = HEAPU16[$4 + 8 >> 1] - HEAPU16[HEAP32[$4 + 24 >> 2] >> 1];
  $0 = $4;
  if (HEAPU16[$4 + 6 >> 1] < HEAPU32[$4 + 16 >> 2]) {
   $1 = HEAPU16[$4 + 6 >> 1];
  } else {
   $1 = HEAP32[$4 + 16 >> 2];
  }
  HEAP16[$0 + 4 >> 1] = $1;
  memcpy(HEAPU16[$4 + 10 >> 1] + (HEAP32[$4 + 24 >> 2] + 15 | 0) | 0, HEAP32[$4 + 20 >> 2], HEAPU16[$4 + 4 >> 1]);
  HEAP32[HEAP32[$4 + 12 >> 2] >> 2] = HEAPU16[$4 + 4 >> 1];
  $0 = HEAP32[$4 + 24 >> 2];
  HEAP16[$0 >> 1] = HEAPU16[$4 + 4 >> 1] + HEAPU16[$0 >> 1];
  if (HEAPU16[$4 + 4 >> 1] == HEAPU16[$4 + 6 >> 1]) {
   HEAP8[HEAP32[$4 + 24 >> 2] + 12 | 0] = 1;
  }
  HEAP32[$4 + 28 >> 2] = 0;
 }
 global$0 = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}
function tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_4__operator_28_29_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 $0 = HEAP32[$1 + 28 >> 2];
 std____2__unique_ptr_TfLiteResizeBilinearParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteResizeBilinearParams__28_29($1 + 16 | 0, HEAP32[$0 >> 2]);
 HEAP32[$1 + 12 >> 2] = tflite__Operator__builtin_options_as_ResizeNearestNeighborOptions_28_29_20const(HEAP32[HEAP32[$0 + 4 >> 2] >> 2]);
 if (HEAP32[$1 + 12 >> 2]) {
  $2 = tflite__SequenceRNNOptions__time_major_28_29_20const(HEAP32[$1 + 12 >> 2]);
  HEAP8[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($1 + 16 | 0) | 0] = $2 & 1;
 }
 $2 = $1 + 16 | 0;
 $3 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($2);
 HEAP32[HEAP32[HEAP32[$0 + 8 >> 2] >> 2] >> 2] = $3;
 std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($2);
 global$0 = $1 + 32 | 0;
}
function tf_create($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 40 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 HEAP32[$0 >> 2] = 0;
 tflite__EspruinoErrorReporter__EspruinoErrorReporter_28_29($0);
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 28 >> 2];
 HEAP32[$3 + 20 >> 2] = tflite__GetModel_28void_20const__29(HEAP32[$3 + 32 >> 2]);
 label$1 : {
  if ((tflite__Operator__opcode_index_28_29_20const(HEAP32[$3 + 20 >> 2]) | 0) != 3) {
   $0 = HEAP32[$3 + 24 >> 2];
   $1 = tflite__Operator__opcode_index_28_29_20const(HEAP32[$3 + 20 >> 2]);
   HEAP32[$3 + 4 >> 2] = 3;
   HEAP32[$3 >> 2] = $1;
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 49617, $3);
   HEAP8[$3 + 47 | 0] = 0;
   break label$1;
  }
  tflite__ops__micro__AllOpsResolver__AllOpsResolver_28_29(HEAP32[$3 + 28 >> 2] + 4 | 0);
  tflite__MicroInterpreter__MicroInterpreter_28tflite__Model_20const__2c_20tflite__OpResolver_20const__2c_20unsigned_20char__2c_20unsigned_20long_2c_20tflite__ErrorReporter__29(HEAP32[$3 + 28 >> 2] + 4108 | 0, HEAP32[$3 + 20 >> 2], HEAP32[$3 + 28 >> 2] + 4 | 0, HEAP32[$3 + 28 >> 2] + 4240 | 0, HEAP32[$3 + 36 >> 2], HEAP32[$3 + 24 >> 2]);
  tflite__MicroInterpreter__AllocateTensors_28_29(HEAP32[$3 + 28 >> 2] + 4108 | 0);
  HEAP8[$3 + 47 | 0] = 1;
 }
 global$0 = $3 + 48 | 0;
 return HEAP8[$3 + 47 | 0] & 1;
}
function jswrap_interface_changeInterval($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAPF64[$2 + 32 >> 3] = $1;
 HEAP32[$2 + 28 >> 2] = jsvLock(HEAPU16[47564]);
 if (HEAPF64[$2 + 32 >> 3] < .1) {
  HEAPF64[$2 + 32 >> 3] = .1;
 }
 $0 = $2;
 label$2 : {
  if (jsvIsBasic(HEAP32[$2 + 44 >> 2]) & 1) {
   $3 = jsvFindChildFromVar(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 44 >> 2], 0);
   break label$2;
  }
  $3 = 0;
 }
 HEAP32[$0 + 24 >> 2] = $3;
 label$4 : {
  if (HEAP32[$2 + 24 >> 2]) {
   HEAP32[$2 + 20 >> 2] = jsvSkipNameAndUnLock(HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 8 >> 2] = jshGetTimeFromMilliseconds(HEAPF64[$2 + 32 >> 3]);
   HEAP32[$2 + 12 >> 2] = i64toi32_i32$HIGH_BITS;
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 20 >> 2], 33222, jsvNewFromLongInteger(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]));
   $6 = HEAP32[$2 + 20 >> 2];
   $0 = jshGetSystemTime();
   $4 = HEAP32[23796];
   $5 = HEAP32[$2 + 8 >> 2];
   $3 = ($0 - $4 | 0) + $5 | 0;
   $0 = HEAP32[$2 + 12 >> 2] + (i64toi32_i32$HIGH_BITS - (HEAP32[23797] + ($0 >>> 0 < $4 >>> 0) | 0) | 0) | 0;
   jsvObjectSetChildAndUnLock($6, 33217, jsvNewFromLongInteger($3, $3 >>> 0 < $5 >>> 0 ? $0 + 1 | 0 : $0));
   jsvUnLock(HEAP32[$2 + 20 >> 2]);
   jsiTimersChanged();
   break label$4;
  }
  jsExceptionHere(1, 33323, 0);
 }
 jsvUnLock(HEAP32[$2 + 28 >> 2]);
 global$0 = $2 + 48 | 0;
}
function tflite__ops__micro__pooling___28anonymous_20namespace_29__CalculateOpData_28TfLiteContext_20const__2c_20TfLitePoolParams_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $5 = global$0 + -64 | 0;
 global$0 = $5;
 $6 = $5 + 8 | 0;
 $7 = $5 + 32 | 0;
 $8 = $5 + 28 | 0;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 HEAP32[$5 + 40 >> 2] = tflite__SizeOfDimension_28TfLiteTensor_20const__2c_20int_29(HEAP32[$5 + 52 >> 2], 1);
 HEAP32[$5 + 36 >> 2] = tflite__SizeOfDimension_28TfLiteTensor_20const__2c_20int_29(HEAP32[$5 + 52 >> 2], 2);
 tflite__ComputePaddingHeightWidth_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLitePadding_2c_20int__2c_20int__29($6, HEAP32[HEAP32[$5 + 56 >> 2] + 8 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] + 4 >> 2], 1, 1, HEAP32[$5 + 40 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] + 16 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] + 12 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] >> 2], $7, $8);
 $0 = HEAP32[$6 + 4 >> 2];
 $2 = HEAP32[$5 + 44 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$2 + 4 >> 2] = $0;
 $0 = HEAP32[$6 + 12 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
 HEAP32[$2 + 12 >> 2] = $0;
 global$0 = $5 - -64 | 0;
 return 0;
}
function jspeUnaryExpression() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 label$1 : {
  label$2 : {
   if (!(HEAP16[HEAP32[13768] + 2 >> 1] == 33 | HEAP16[HEAP32[13768] + 2 >> 1] == 126 | HEAP16[HEAP32[13768] + 2 >> 1] == 45)) {
    if (HEAP16[HEAP32[13768] + 2 >> 1] != 43) {
     break label$2;
    }
   }
   HEAP16[$0 + 10 >> 1] = HEAPU16[HEAP32[13768] + 2 >> 1];
   jslGetNextToken();
   if ((HEAP32[23778] & 63) != 1) {
    HEAP32[$0 + 12 >> 2] = jspeUnaryExpression();
    break label$1;
   }
   if (HEAP16[$0 + 10 >> 1] == 33) {
    HEAP32[$0 + 12 >> 2] = jsvNewFromBool((jsvGetBoolAndUnLock(jsvSkipNameAndUnLock(jspeUnaryExpression())) ^ -1) & 1);
    break label$1;
   }
   if (HEAP16[$0 + 10 >> 1] == 126) {
    HEAP32[$0 + 12 >> 2] = jsvNewFromInteger(jsvGetIntegerAndUnLock(jsvSkipNameAndUnLock(jspeUnaryExpression())) ^ -1);
    break label$1;
   }
   if (HEAP16[$0 + 10 >> 1] == 45) {
    HEAP32[$0 + 12 >> 2] = jsvNegateAndUnLock(jspeUnaryExpression());
    break label$1;
   }
   if (HEAP16[$0 + 10 >> 1] == 43) {
    HEAP32[$0 + 4 >> 2] = jsvSkipNameAndUnLock(jspeUnaryExpression());
    HEAP32[$0 >> 2] = jsvAsNumber(HEAP32[$0 + 4 >> 2]);
    jsvUnLock(HEAP32[$0 + 4 >> 2]);
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 >> 2];
    break label$1;
   }
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = jspePostfixExpression();
 }
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function jsiDebuggerPrintScope($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 jsvObjectIteratorNew($1 + 24 | 0, HEAP32[$1 + 28 >> 2]);
 HEAP8[$1 + 23 | 0] = 0;
 while (1) {
  if (jsvObjectIteratorHasValue($1 + 24 | 0) & 1) {
   $0 = $1 + 24 | 0;
   HEAP32[$1 + 16 >> 2] = jsvObjectIteratorGetKey($0);
   HEAP32[$1 + 12 >> 2] = jsvAsString(HEAP32[$1 + 16 >> 2]);
   HEAP32[$1 + 8 >> 2] = jsvObjectIteratorGetValue($0);
   HEAP32[$1 + 4 >> 2] = jsvGetStringLength(HEAP32[$1 + 12 >> 2]);
   if (!(jsvIsStringEqual(HEAP32[$1 + 12 >> 2], 6430) & 1)) {
    HEAP8[$1 + 23 | 0] = 1;
    jsiConsolePrintChar(32);
    if (jsvIsFunctionParameter(HEAP32[$1 + 16 >> 2]) & 1) {
     jsiConsolePrintString(6437);
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 6;
    }
    jsiConsolePrintStringVar(HEAP32[$1 + 12 >> 2]);
    while (1) {
     if (HEAPU32[$1 + 4 >> 2] < 20) {
      jsiConsolePrintChar(32);
      HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
      continue;
     }
     break;
    }
    jsiConsolePrintString(6444);
    jsfPrintJSON(HEAP32[$1 + 8 >> 2], 301);
    jsiConsolePrintString(5719);
   }
   $0 = $1 + 24 | 0;
   jsvUnLock3(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2]);
   jsvObjectIteratorNext($0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree($1 + 24 | 0);
 if (!(HEAP8[$1 + 23 | 0] & 1)) {
  jsiConsolePrintString(6448);
 }
 global$0 = $1 + 32 | 0;
}
function jswrap_stream_pushData($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP8[$2 + 23 | 0] = 1;
 HEAP8[$2 + 22 | 0] = 1;
 HEAP32[$2 + 16 >> 2] = jsvFindChildFromString(HEAP32[$2 + 28 >> 2], 37345, 0);
 label$1 : {
  if (HEAP32[$2 + 16 >> 2]) {
   if (!(jsiExecuteEventCallback(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 16 >> 2], 1, $2 + 24 | 0) & 1)) {
    jsError(37353, 0);
    HEAP8[95095] = HEAPU8[95095] | 4;
    jsvObjectRemoveChild(HEAP32[$2 + 28 >> 2], 37345);
   }
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvObjectGetChild(HEAP32[$2 + 28 >> 2], 37340, 0);
  label$4 : {
   if (!(jsvIsString(HEAP32[$2 + 12 >> 2]) & 1)) {
    jsvObjectSetChild(HEAP32[$2 + 28 >> 2], 37340, HEAP32[$2 + 24 >> 2]);
    break label$4;
   }
   HEAP32[$2 + 8 >> 2] = jsvGetStringLength(HEAP32[$2 + 12 >> 2]);
   HEAP32[$2 + 4 >> 2] = jsvGetStringLength(HEAP32[$2 + 24 >> 2]);
   if (HEAP32[$2 + 8 >> 2] + HEAP32[$2 + 4 >> 2] >>> 0 > 512) {
    if (HEAP8[$2 + 23 | 0] & 1) {
     HEAP8[95095] = HEAPU8[95095] | 2;
    }
    HEAP8[$2 + 22 | 0] = 0;
   }
   if (!(HEAPU32[$2 + 8 >> 2] >= 512 | (HEAP8[$2 + 23 | 0] & 1 ? 0 : !(HEAP8[$2 + 22 | 0] & 1)))) {
    jsvAppendStringVar(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 24 >> 2], 0, 512 - HEAP32[$2 + 8 >> 2] | 0);
   }
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
  }
 }
 global$0 = $2 + 32 | 0;
}
function match($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 336 | 0;
 global$0 = $4;
 $5 = $4 + 184 | 0;
 HEAP32[$4 + 332 >> 2] = $0;
 HEAP32[$4 + 328 >> 2] = $1;
 HEAP32[$4 + 324 >> 2] = $2;
 HEAP8[$4 + 323 | 0] = $3;
 HEAP32[$4 + 232 >> 2] = HEAP32[$4 + 328 >> 2];
 HEAP32[$4 + 236 >> 2] = HEAP32[$4 + 324 >> 2];
 HEAP8[$4 + 240 | 0] = HEAP8[$4 + 323 | 0] & 1;
 HEAP8[$4 + 241 | 0] = 0;
 HEAP16[$4 + 242 >> 1] = 256;
 HEAP32[$4 + 244 >> 2] = 0;
 $0 = $4 + 208 | 0;
 jsvStringIteratorNew($0, HEAP32[$4 + 328 >> 2], HEAP32[$4 + 324 >> 2]);
 jsvStringIteratorClone($5, $0);
 $0 = HEAP32[$4 + 332 >> 2];
 memcpy($4 + 96 | 0, $4 + 232 | 0, 88);
 $0 = matchhere($0, $4 + 184 | 0, $4 + 96 | 0);
 $1 = $4 + 208 | 0;
 HEAP32[$4 + 228 >> 2] = $0;
 jsvStringIteratorFree($4 + 184 | 0);
 jsvStringIteratorNext($1);
 while (1) {
  if (HEAP32[$4 + 228 >> 2]) {
   $0 = 0;
  } else {
   $0 = jsvStringIteratorHasChar($4 + 208 | 0);
  }
  if ($0 & 1) {
   HEAP32[$4 + 236 >> 2] = HEAP32[$4 + 236 >> 2] + 1;
   jsvStringIteratorClone($4 + 184 | 0, $4 + 208 | 0);
   $0 = HEAP32[$4 + 332 >> 2];
   memcpy($4 + 8 | 0, $4 + 232 | 0, 88);
   $0 = matchhere($0, $4 + 184 | 0, $4 + 8 | 0);
   $1 = $4 + 208 | 0;
   HEAP32[$4 + 228 >> 2] = $0;
   jsvStringIteratorFree($4 + 184 | 0);
   jsvStringIteratorNext($1);
   continue;
  }
  break;
 }
 jsvStringIteratorFree($4 + 208 | 0);
 global$0 = $4 + 336 | 0;
 return HEAP32[$4 + 228 >> 2];
}
function jspEvaluateModule($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1 : {
  label$2 : {
   if (jsvIsFunction(HEAP32[$1 + 24 >> 2]) & 1) {
    HEAP32[$1 + 24 >> 2] = jsvObjectGetChild(HEAP32[$1 + 24 >> 2], 3847, 0);
    if (!(jsvIsString(HEAP32[$1 + 24 >> 2]) & 1)) {
     jsvUnLock(HEAP32[$1 + 24 >> 2]);
     HEAP32[$1 + 28 >> 2] = 0;
     break label$1;
    }
    break label$2;
   }
   jsvLockAgain(HEAP32[$1 + 24 >> 2]);
  }
  HEAP32[$1 + 20 >> 2] = jsvNewWithFlags(5);
  HEAP32[$1 + 16 >> 2] = jsvNewWithFlags(5);
  if (!(HEAP32[$1 + 16 >> 2] ? HEAP32[$1 + 20 >> 2] : 0)) {
   jsvUnLock3(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2], HEAP32[$1 + 24 >> 2]);
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvAddNamedChild(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2], 5045);
  jsvUnLock2(HEAP32[$1 + 16 >> 2], jsvAddNamedChild(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 20 >> 2], 5053));
  HEAP32[$1 + 8 >> 2] = HEAP32[23778];
  HEAP32[$1 + 4 >> 2] = HEAP32[23777];
  HEAP32[23777] = HEAP32[$1 + 16 >> 2];
  jsvUnLock(jspEvaluateVar(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 20 >> 2], 0));
  HEAP32[23777] = HEAP32[$1 + 4 >> 2];
  HEAP32[23778] = HEAP32[$1 + 8 >> 2];
  jsvUnLock2(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 20 >> 2]);
  HEAP32[$1 + 28 >> 2] = jsvSkipNameAndUnLock(HEAP32[$1 + 12 >> 2]);
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function jsfLoadStateFromFlash() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = global$0 - 272 | 0;
 global$0 = $0;
 jsfNameFromString($0 + 208 | 0, 2108);
 HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 232 >> 2];
 $1 = HEAP32[$0 + 228 >> 2];
 HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 224 >> 2];
 HEAP32[$0 + 36 >> 2] = $1;
 $1 = HEAP32[$0 + 220 >> 2];
 HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 216 >> 2];
 HEAP32[$0 + 28 >> 2] = $1;
 $1 = HEAP32[$0 + 212 >> 2];
 HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 208 >> 2];
 HEAP32[$0 + 20 >> 2] = $1;
 HEAP32[$0 + 236 >> 2] = jsfFindFile($0 + 16 | 0, $0 + 240 | 0);
 label$1 : {
  if (!HEAP32[$0 + 236 >> 2]) {
   break label$1;
  }
  $1 = $0 + 240 | 0;
  $2 = $0 + 56 | 0;
  HEAP32[$0 + 204 >> 2] = _jsvGetAddressOf(1);
  memset($2, 0, 144);
  HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 236 >> 2];
  HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 236 >> 2] + jsfGetFileSize($1);
  HEAP32[$0 + 48 >> 2] = 0;
  while (1) {
   if (HEAP32[$0 + 48 >> 2] < 4) {
    $1 = $0 + 52 | 0;
    $2 = jsfLoadFromFlash_readcb($0 + 56 | 0);
    HEAP8[$1 + HEAP32[$0 + 48 >> 2] | 0] = $2;
    HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 48 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$0 + 52 >> 2] != (getBuildHash() | 0)) {
   jsiConsolePrintf(2372, 0);
   break label$1;
  }
  HEAP32[$0 >> 2] = jsfGetFileSize($0 + 240 | 0);
  jsiConsolePrintf(2430, $0);
  heatshrink_decode(2, $0 + 56 | 0, HEAP32[$0 + 204 >> 2]);
 }
 global$0 = $0 + 272 | 0;
}
function jsvGetBool($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1 : {
  if (jsvIsString(HEAP32[$1 + 24 >> 2]) & 1) {
   HEAP8[$1 + 31 | 0] = (jsvGetStringLength(HEAP32[$1 + 24 >> 2]) | 0) != 0;
   break label$1;
  }
  if (jsvIsPin(HEAP32[$1 + 24 >> 2]) & 1) {
   HEAP8[$1 + 31 | 0] = jshIsPinValid(jshGetPinFromVar(HEAP32[$1 + 24 >> 2]) & 255) & 1;
   break label$1;
  }
  label$4 : {
   label$5 : {
    if (jsvIsFunction(HEAP32[$1 + 24 >> 2]) & 1) {
     break label$5;
    }
    if (jsvIsArray(HEAP32[$1 + 24 >> 2]) & 1) {
     break label$5;
    }
    if (jsvIsObject(HEAP32[$1 + 24 >> 2]) & 1) {
     break label$5;
    }
    if (!(jsvIsArrayBuffer(HEAP32[$1 + 24 >> 2]) & 1)) {
     break label$4;
    }
   }
   HEAP8[$1 + 31 | 0] = 1;
   break label$1;
  }
  if (jsvIsFloat(HEAP32[$1 + 24 >> 2]) & 1) {
   HEAPF64[$1 + 16 >> 3] = jsvGetFloat(HEAP32[$1 + 24 >> 2]);
   $3 = $1;
   $0 = __DOUBLE_BITS(HEAPF64[$1 + 16 >> 3]);
   $2 = i64toi32_i32$HIGH_BITS & 2147483647;
   $2 = ($2 | 0) == 2146435072 & $0 >>> 0 > 0 | $2 >>> 0 > 2146435072;
   $0 = 0;
   label$7 : {
    if ($2) {
     break label$7;
    }
    $0 = HEAPF64[$1 + 16 >> 3] != 0;
   }
   HEAP8[$3 + 31 | 0] = $0;
   break label$1;
  }
  HEAP8[$1 + 31 | 0] = (jsvGetInteger(HEAP32[$1 + 24 >> 2]) | 0) != 0;
 }
 global$0 = $1 + 32 | 0;
 return HEAP8[$1 + 31 | 0] & 1;
}
function jspNewObject($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = jspNewPrototype(HEAP32[$2 + 20 >> 2]);
 HEAP32[$2 + 12 >> 2] = jsvNewWithFlags(5);
 label$1 : {
  if (!HEAP32[$2 + 12 >> 2]) {
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$2 + 24 >> 2]) {
   HEAP8[$2 + 11 | 0] = jshFromDeviceString(HEAP32[$2 + 24 >> 2]);
   if (HEAPU8[$2 + 11 | 0]) {
    HEAP8[HEAP32[$2 + 12 >> 2]] = 68;
    HEAP8[HEAP32[$2 + 12 >> 2] + 1 | 0] = 69;
    HEAP8[HEAP32[$2 + 12 >> 2] + 2 | 0] = 86;
    HEAP8[HEAP32[$2 + 12 >> 2] + 3 | 0] = HEAPU8[$2 + 11 | 0];
   }
  }
  HEAP32[$2 + 4 >> 2] = jsvSkipName(HEAP32[$2 + 16 >> 2]);
  jsvUnLock3(jsvAddNamedChild(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], 3684), HEAP32[$2 + 4 >> 2], HEAP32[$2 + 16 >> 2]);
  HEAP32[$2 + 16 >> 2] = 0;
  if (HEAP32[$2 + 24 >> 2]) {
   HEAP32[$2 >> 2] = jsvFindChildFromString(HEAP32[23774], HEAP32[$2 + 24 >> 2], 1);
   if (HEAP32[$2 >> 2]) {
    jsvSetValueOfName(HEAP32[$2 >> 2], HEAP32[$2 + 12 >> 2]);
   }
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
   if (!HEAP32[$2 >> 2]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break label$1;
   }
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 >> 2];
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function jsiGetHistoryLine($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP8[$1 + 27 | 0] = $0;
 HEAP32[$1 + 20 >> 2] = jsiGetHistory();
 label$1 : {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 16 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = jsvGetIndexOf(HEAP32[$1 + 20 >> 2], HEAP32[23784], 1);
  label$3 : {
   if (HEAP32[$1 + 12 >> 2]) {
    label$5 : {
     label$6 : {
      if (!(HEAP8[$1 + 27 | 0] & 1)) {
       break label$6;
      }
      if (!(jsvGetPrevSibling(HEAP32[$1 + 12 >> 2]) & 65535)) {
       break label$6;
      }
      HEAP32[$1 + 16 >> 2] = jsvSkipNameAndUnLock(jsvLock(jsvGetPrevSibling(HEAP32[$1 + 12 >> 2]) & 65535));
      break label$5;
     }
     label$7 : {
      if (HEAP8[$1 + 27 | 0] & 1) {
       break label$7;
      }
      if (!(jsvGetNextSibling(HEAP32[$1 + 12 >> 2]) & 65535)) {
       break label$7;
      }
      HEAP32[$1 + 16 >> 2] = jsvSkipNameAndUnLock(jsvLock(jsvGetNextSibling(HEAP32[$1 + 12 >> 2]) & 65535));
     }
    }
    jsvUnLock(HEAP32[$1 + 12 >> 2]);
    break label$3;
   }
   if (HEAP8[$1 + 27 | 0] & 1) {
    HEAP32[$1 + 16 >> 2] = jsvSkipNameAndUnLock(jsvGetArrayItem(HEAP32[$1 + 20 >> 2], jsvGetArrayLength(HEAP32[$1 + 20 >> 2]) - 1 | 0));
   }
  }
  jsvUnLock(HEAP32[$1 + 20 >> 2]);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 16 >> 2];
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function jsvIteratorSetValue($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + -1 | 0;
 label$1 : {
  if ($0 >>> 0 > 3) {
   break label$1;
  }
  label$2 : {
   switch ($0 - 1 | 0) {
   case 2:
    label$6 : {
     if (!(jsvIsIntegerish(HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2]) & 1)) {
      break label$6;
     }
     if ((jsvGetInteger(HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2]) | 0) != HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]) {
      break label$6;
     }
     jsvObjectIteratorSetValue(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2]);
    }
    jsvSetArrayItem(HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2], HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2], HEAP32[$2 + 8 >> 2]);
    break label$1;
   case 0:
    jsvObjectIteratorSetValue(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2]);
    break label$1;
   default:
    $0 = HEAP32[$2 + 12 >> 2] + 4 | 0;
    label$7 : {
     if (jsvIsString(HEAP32[$2 + 8 >> 2]) & 1) {
      $1 = HEAP8[HEAP32[$2 + 8 >> 2]];
      break label$7;
     }
     $1 = jsvGetInteger(HEAP32[$2 + 8 >> 2]) << 24 >> 24;
    }
    jsvStringIteratorSetChar($0, $1 << 24 >> 24);
    break label$1;
   case 1:
    break label$2;
   }
  }
  jsvArrayBufferIteratorSetValueAndRewind(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2]);
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 8 >> 2];
}
function push_bits($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP8[$4 + 27 | 0] = $1;
 HEAP8[$4 + 26 | 0] = $2;
 HEAP32[$4 + 20 >> 2] = $3;
 label$1 : {
  if (!(HEAPU8[$4 + 27 | 0] != 8 | HEAPU8[HEAP32[$4 + 28 >> 2] + 14 | 0] != 128)) {
   $1 = HEAPU8[$4 + 26 | 0];
   $2 = HEAP32[HEAP32[$4 + 20 >> 2] >> 2];
   $3 = HEAP32[HEAP32[$4 + 20 >> 2] + 8 >> 2];
   $0 = HEAP32[$3 >> 2];
   HEAP32[$3 >> 2] = $0 + 1;
   HEAP8[$0 + $2 | 0] = $1;
   break label$1;
  }
  HEAP32[$4 + 16 >> 2] = HEAPU8[$4 + 27 | 0] - 1;
  while (1) {
   if (HEAP32[$4 + 16 >> 2] >= 0) {
    HEAP8[$4 + 15 | 0] = (HEAPU8[$4 + 26 | 0] & 1 << HEAP32[$4 + 16 >> 2]) != 0;
    if (HEAP8[$4 + 15 | 0] & 1) {
     $0 = HEAP32[$4 + 28 >> 2];
     HEAP8[$0 + 13 | 0] = HEAPU8[HEAP32[$4 + 28 >> 2] + 14 | 0] | HEAPU8[$0 + 13 | 0];
    }
    $0 = HEAP32[$4 + 28 >> 2];
    HEAP8[$0 + 14 | 0] = HEAPU8[$0 + 14 | 0] >> 1;
    if (!HEAPU8[HEAP32[$4 + 28 >> 2] + 14 | 0]) {
     HEAP8[HEAP32[$4 + 28 >> 2] + 14 | 0] = 128;
     $1 = HEAPU8[HEAP32[$4 + 28 >> 2] + 13 | 0];
     $2 = HEAP32[HEAP32[$4 + 20 >> 2] >> 2];
     $3 = HEAP32[HEAP32[$4 + 20 >> 2] + 8 >> 2];
     $0 = HEAP32[$3 >> 2];
     HEAP32[$3 >> 2] = $0 + 1;
     HEAP8[$0 + $2 | 0] = $1;
     HEAP8[HEAP32[$4 + 28 >> 2] + 13 | 0] = 0;
    }
    HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 16 >> 2] + -1;
    continue;
   }
   break;
  }
 }
}
function jsvAsArrayIndex($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1 : {
  label$2 : {
   if (!(jsvIsSimpleInt(HEAP32[$1 + 24 >> 2]) & 1)) {
    break label$2;
   }
   if ((jsvGetInteger(HEAP32[$1 + 24 >> 2]) | 0) < 0) {
    break label$2;
   }
   HEAP32[$1 + 28 >> 2] = jsvLockAgain(HEAP32[$1 + 24 >> 2]);
   break label$1;
  }
  label$3 : {
   if (jsvIsString(HEAP32[$1 + 24 >> 2]) & 1) {
    if (jsvIsStringNumericStrict(HEAP32[$1 + 24 >> 2]) & 1) {
     HEAP32[$1 + 20 >> 2] = jsvNewFromInteger(jsvGetInteger(HEAP32[$1 + 24 >> 2]));
     HEAP32[$1 + 16 >> 2] = jsvAsString(HEAP32[$1 + 20 >> 2]);
     if (!jsvCompareString(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 16 >> 2], 0, 0)) {
      jsvUnLock(HEAP32[$1 + 16 >> 2]);
      HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
      break label$1;
     }
     jsvUnLock2(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2]);
    }
    break label$3;
   }
   if (jsvIsFloat(HEAP32[$1 + 24 >> 2]) & 1) {
    HEAPF64[$1 + 8 >> 3] = jsvGetFloat(HEAP32[$1 + 24 >> 2]);
    HEAP32[$1 + 4 >> 2] = jsvGetInteger(HEAP32[$1 + 24 >> 2]);
    if (HEAPF64[$1 + 8 >> 3] == +HEAP32[$1 + 4 >> 2]) {
     HEAP32[$1 + 28 >> 2] = jsvNewFromInteger(HEAP32[$1 + 4 >> 2]);
     break label$1;
    }
   }
  }
  HEAP32[$1 + 28 >> 2] = jsvAsString(HEAP32[$1 + 24 >> 2]);
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function jswrap_object_removeListener($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 label$1 : {
  if (!(jsvHasChildren(HEAP32[$3 + 28 >> 2]) & 1)) {
   jsExceptionHere(3, 35149, 0);
   break label$1;
  }
  if (jsvIsString(HEAP32[$3 + 24 >> 2]) & 1) {
   HEAP32[$3 >> 2] = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 16 >> 2] = jsvVarPrintf(35347, $3);
   if (!HEAP32[$3 + 16 >> 2]) {
    break label$1;
   }
   HEAP32[$3 + 12 >> 2] = jsvFindChildFromVar(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 16 >> 2], 1);
   jsvUnLock(HEAP32[$3 + 16 >> 2]);
   HEAP32[$3 + 8 >> 2] = jsvSkipName(HEAP32[$3 + 12 >> 2]);
   if (HEAP32[$3 + 8 >> 2]) {
    label$5 : {
     if (HEAP32[$3 + 8 >> 2] == HEAP32[$3 + 20 >> 2]) {
      jsvRemoveChild(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 12 >> 2]);
      break label$5;
     }
     if (jsvIsArray(HEAP32[$3 + 8 >> 2]) & 1) {
      HEAP32[$3 + 4 >> 2] = jsvGetIndexOf(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 20 >> 2], 1);
      if (HEAP32[$3 + 4 >> 2]) {
       jsvRemoveChild(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
       jsvUnLock(HEAP32[$3 + 4 >> 2]);
      }
     }
    }
    jsvUnLock(HEAP32[$3 + 8 >> 2]);
   }
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   break label$1;
  }
  jsExceptionHere(3, 35453, 0);
 }
 global$0 = $3 + 32 | 0;
}
function btnTouchHandler() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 label$1 : {
  if (HEAP32[62815] & 16) {
   HEAP16[125629] = 0;
   if (!(HEAP8[251256] & 1)) {
    HEAP32[62816] = HEAP32[62816] | 1;
    HEAP8[$0 + 15 | 0] = 1;
    break label$1;
   }
  }
  HEAP32[$0 + 8 >> 2] = (jshPinGetValue(11) & 1 ? 1 : 0) | (jshPinGetValue(16) & 1 ? 2 : 0);
  HEAP32[62818] = HEAP32[$0 + 8 >> 2] | HEAP32[62818];
  label$4 : {
   if (!(HEAP32[$0 + 8 >> 2] == 1 ? !(HEAP32[62819] != 2 | HEAP32[62820] != 3) : 0)) {
    if (HEAP32[62820] != 2 | HEAP32[$0 + 8 >> 2] != 1) {
     break label$4;
    }
   }
   HEAP32[62818] = HEAP32[62818] | 4;
   HEAP32[62816] = HEAP32[62816] | 2048;
  }
  label$7 : {
   if (!(HEAP32[$0 + 8 >> 2] == 2 ? !(HEAP32[62819] != 1 | HEAP32[62820] != 3) : 0)) {
    if (HEAP32[62820] != 1 | HEAP32[$0 + 8 >> 2] != 2) {
     break label$7;
    }
   }
   HEAP32[62818] = HEAP32[62818] | 4;
   HEAP32[62816] = HEAP32[62816] | 4096;
  }
  if (!HEAP32[$0 + 8 >> 2]) {
   if (!(!HEAP32[62820] | HEAP32[62818] & 4)) {
    if (HEAP32[62818] & 1) {
     HEAP32[62816] = HEAP32[62816] | 8192;
    }
    if (HEAP32[62818] & 2) {
     HEAP32[62816] = HEAP32[62816] | 16384;
    }
   }
   HEAP32[62818] = 0;
  }
  HEAP32[62819] = HEAP32[62820];
  HEAP32[62820] = HEAP32[$0 + 8 >> 2];
  HEAP8[$0 + 15 | 0] = 0;
 }
 global$0 = $0 + 16 | 0;
 return HEAP8[$0 + 15 | 0] & 1;
}
function tflite__ops__micro__activations__Softmax1DQuantized_28TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteSoftmaxParams__2c_20tflite__ops__micro__activations___28anonymous_20namespace_29__OpData__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 128 | 0;
 global$0 = $4;
 HEAP32[$4 + 124 >> 2] = $0;
 HEAP32[$4 + 120 >> 2] = $1;
 HEAP32[$4 + 116 >> 2] = $2;
 HEAP32[$4 + 112 >> 2] = $3;
 HEAP32[$4 + 108 >> 2] = HEAP32[HEAP32[HEAP32[$4 + 124 >> 2] + 8 >> 2] + 4 >> 2];
 HEAP32[$4 + 80 >> 2] = 1;
 HEAP32[$4 + 84 >> 2] = 1;
 HEAP32[$4 + 88 >> 2] = 1;
 HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 108 >> 2];
 tflite__RuntimeShape__RuntimeShape_28int_2c_20int_20const__29($4 + 56 | 0, 4, $4 + 80 | 0);
 HEAP32[$4 + 24 >> 2] = HEAP32[HEAP32[$4 + 112 >> 2] >> 2];
 HEAP32[$4 + 28 >> 2] = HEAP32[HEAP32[$4 + 112 >> 2] + 4 >> 2];
 HEAP32[$4 + 40 >> 2] = HEAP32[HEAP32[$4 + 112 >> 2] + 12 >> 2];
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$4 + 124 >> 2]);
 $1 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$4 + 120 >> 2]);
 $2 = $4 + 56 | 0;
 tflite__reference_ops__Softmax_28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($4 + 16 | 0, $2, $0, $2, $1);
 tflite__RuntimeShape___RuntimeShape_28_29($4 + 56 | 0);
 global$0 = $4 + 128 | 0;
}
function jswrap_graphics_getFonts($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 112 | 0;
 global$0 = $1;
 HEAP32[$1 + 104 >> 2] = $0;
 label$1 : {
  if (!(graphicsGetFromVar($1 + 32 | 0, HEAP32[$1 + 104 >> 2]) & 1)) {
   HEAP32[$1 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 28 >> 2] = jsvNewWithFlags(3);
  if (!HEAP32[$1 + 28 >> 2]) {
   HEAP32[$1 + 108 >> 2] = 0;
   break label$1;
  }
  $0 = $1 + 16 | 0;
  jsvArrayPushAndUnLock(HEAP32[$1 + 28 >> 2], jsvNewFromString(39004));
  jsvArrayPushAndUnLock(HEAP32[$1 + 28 >> 2], jsvNewFromString(39008));
  jsvArrayPushAndUnLock(HEAP32[$1 + 28 >> 2], jsvNewFromString(38997));
  HEAP32[$1 + 24 >> 2] = jspGetPrototype(HEAP32[$1 + 104 >> 2]);
  jsvObjectIteratorNew($0, HEAP32[$1 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($1 + 16 | 0) & 1) {
    HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetKey($1 + 16 | 0);
    if (jsvIsStringEqualOrStartsWith(HEAP32[$1 + 12 >> 2], 39054, 1) & 1) {
     jsvArrayPushAndUnLock(HEAP32[$1 + 28 >> 2], jsvNewFromStringVar(HEAP32[$1 + 12 >> 2], 7, 2147483647));
    }
    $0 = $1 + 16 | 0;
    jsvUnLock(HEAP32[$1 + 12 >> 2]);
    jsvObjectIteratorNext($0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($1 + 16 | 0);
  jsvUnLock(HEAP32[$1 + 24 >> 2]);
  HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 28 >> 2];
 }
 global$0 = $1 + 112 | 0;
 return HEAP32[$1 + 108 >> 2];
}
function void_20tflite__ops__micro__arg_min_max__ArgMinMaxHelper_unsigned_20char_2c_20int_2c_20int__28tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int__2c_20bool_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 32 | 0;
 global$0 = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP8[$6 + 11 | 0] = $5;
 label$1 : {
  if (HEAP8[$6 + 11 | 0] & 1) {
   void_20tflite__reference_ops__ArgMinMax_unsigned_20char_2c_20int_2c_20int_2c_20tflite__ops__micro__Greater__28tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int__2c_20tflite__ops__micro__Greater_20const__29(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], $6 + 8 | 0);
   break label$1;
  }
  void_20tflite__reference_ops__ArgMinMax_unsigned_20char_2c_20int_2c_20int_2c_20tflite__ops__micro__Less__28tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int__2c_20tflite__ops__micro__Less_20const__29(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], $6);
 }
 global$0 = $6 + 32 | 0;
}
function tflite__reference_ops__Add_28tflite__ArithmeticParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = Math_fround(0);
 $7 = global$0 - 48 | 0;
 global$0 = $7;
 HEAP32[$7 + 44 >> 2] = $0;
 HEAP32[$7 + 40 >> 2] = $1;
 HEAP32[$7 + 36 >> 2] = $2;
 HEAP32[$7 + 32 >> 2] = $3;
 HEAP32[$7 + 28 >> 2] = $4;
 HEAP32[$7 + 24 >> 2] = $5;
 HEAP32[$7 + 20 >> 2] = $6;
 HEAP32[$7 + 16 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$7 + 40 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 24 >> 2]);
 HEAP32[$7 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 12 >> 2] < HEAP32[$7 + 16 >> 2]) {
   HEAPF32[$7 + 8 >> 2] = HEAPF32[HEAP32[$7 + 36 >> 2] + (HEAP32[$7 + 12 >> 2] << 2) >> 2] + HEAPF32[HEAP32[$7 + 28 >> 2] + (HEAP32[$7 + 12 >> 2] << 2) >> 2];
   $8 = tflite__ActivationFunctionWithMinMax_28float_2c_20float_2c_20float_29(HEAPF32[$7 + 8 >> 2], HEAPF32[HEAP32[$7 + 44 >> 2] + 52 >> 2], HEAPF32[HEAP32[$7 + 44 >> 2] + 56 >> 2]);
   HEAPF32[HEAP32[$7 + 20 >> 2] + (HEAP32[$7 + 12 >> 2] << 2) >> 2] = $8;
   HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $7 + 48 | 0;
}
function lcdFillRect_JS($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = global$0 - 48 | 0;
 global$0 = $6;
 HEAP32[$6 + 44 >> 2] = $0;
 HEAP32[$6 + 40 >> 2] = $1;
 HEAP32[$6 + 36 >> 2] = $2;
 HEAP32[$6 + 32 >> 2] = $3;
 HEAP32[$6 + 28 >> 2] = $4;
 HEAP32[$6 + 24 >> 2] = $5;
 $0 = HEAP32[$6 + 44 >> 2];
 HEAP32[$6 + 20 >> 2] = jsvObjectGetChild(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 27681, 0);
 label$1 : {
  if (HEAP32[$6 + 20 >> 2]) {
   HEAP32[$6 >> 2] = jsvNewFromInteger(HEAP32[$6 + 40 >> 2]);
   HEAP32[$6 + 4 >> 2] = jsvNewFromInteger(HEAP32[$6 + 36 >> 2]);
   HEAP32[$6 + 8 >> 2] = jsvNewFromInteger(HEAP32[$6 + 32 >> 2]);
   HEAP32[$6 + 12 >> 2] = jsvNewFromInteger(HEAP32[$6 + 28 >> 2]);
   HEAP32[$6 + 16 >> 2] = jsvNewFromInteger(HEAP32[$6 + 24 >> 2]);
   $0 = HEAP32[$6 + 44 >> 2];
   jsvUnLock(jspExecuteFunction(HEAP32[$6 + 20 >> 2], HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 5, $6));
   jsvUnLockMany(5, $6);
   jsvUnLock(HEAP32[$6 + 20 >> 2]);
   break label$1;
  }
  graphicsFallbackFillRect(HEAP32[$6 + 44 >> 2], HEAP32[$6 + 40 >> 2], HEAP32[$6 + 36 >> 2], HEAP32[$6 + 32 >> 2], HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2]);
 }
 global$0 = $6 + 48 | 0;
}
function jsvArrayBufferIteratorNew($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[HEAP32[$3 + 12 >> 2] + 32 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP16[HEAP32[$3 + 12 >> 2] + 20 >> 1] = HEAPU16[HEAP32[$3 + 8 >> 2] + 4 >> 1];
 HEAP32[HEAP32[$3 + 12 >> 2] + 24 >> 2] = Math_imul(HEAPU16[HEAP32[$3 + 8 >> 2] + 2 >> 1], HEAPU16[HEAP32[$3 + 12 >> 2] + 20 >> 1] & 15);
 HEAP32[HEAP32[$3 + 12 >> 2] + 28 >> 2] = HEAPU16[HEAP32[$3 + 8 >> 2] >> 1];
 HEAP32[$3 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 + 24 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 28 >> 2] + HEAP32[$0 + 24 >> 2];
 HEAP32[HEAP32[$3 + 12 >> 2] + 28 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 28 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], HEAPU16[HEAP32[$3 + 12 >> 2] + 20 >> 1] & 15);
 label$1 : {
  if (HEAPU32[HEAP32[$3 + 12 >> 2] + 28 >> 2] >= (HEAP32[HEAP32[$3 + 12 >> 2] + 24 >> 2] + 1 | 0) - (HEAPU16[HEAP32[$3 + 12 >> 2] + 20 >> 1] & 15) >>> 0) {
   jsvUnLock(HEAP32[$3 >> 2]);
   HEAP16[HEAP32[$3 + 12 >> 2] + 20 >> 1] = 0;
   break label$1;
  }
  jsvStringIteratorNew(HEAP32[$3 + 12 >> 2], HEAP32[$3 >> 2], HEAP32[HEAP32[$3 + 12 >> 2] + 28 >> 2]);
  jsvUnLock(HEAP32[$3 >> 2]);
  HEAP8[HEAP32[$3 + 12 >> 2] + 36 | 0] = 0;
 }
 global$0 = $3 + 16 | 0;
}
function jsvGetCommonCharacters($0, $1) {
 var $2 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 68 >> 2] = $1;
 HEAP32[$2 + 64 >> 2] = jsvNewFromEmptyString();
 label$1 : {
  if (!HEAP32[$2 + 64 >> 2]) {
   HEAP32[$2 + 76 >> 2] = 0;
   break label$1;
  }
  $0 = $2 + 16 | 0;
  $1 = $2 + 40 | 0;
  jsvStringIteratorNew($1, HEAP32[$2 + 72 >> 2], 0);
  jsvStringIteratorNew($0, HEAP32[$2 + 68 >> 2], 0);
  HEAP32[$2 + 12 >> 2] = jsvStringIteratorGetCharOrMinusOne($1);
  HEAP32[$2 + 8 >> 2] = jsvStringIteratorGetCharOrMinusOne($0);
  while (1) {
   $0 = 0;
   label$4 : {
    if (HEAP32[$2 + 12 >> 2] <= 0) {
     break label$4;
    }
    $0 = 0;
    if (HEAP32[$2 + 8 >> 2] <= 0) {
     break label$4;
    }
    $0 = HEAP32[$2 + 12 >> 2] == HEAP32[$2 + 8 >> 2];
   }
   if ($0) {
    $0 = $2 + 16 | 0;
    $1 = $2 + 40 | 0;
    jsvAppendCharacter(HEAP32[$2 + 64 >> 2], HEAP32[$2 + 12 >> 2] << 24 >> 24);
    jsvStringIteratorNext($1);
    jsvStringIteratorNext($0);
    HEAP32[$2 + 12 >> 2] = jsvStringIteratorGetCharOrMinusOne($1);
    HEAP32[$2 + 8 >> 2] = jsvStringIteratorGetCharOrMinusOne($0);
    continue;
   }
   break;
  }
  $0 = $2 + 16 | 0;
  jsvStringIteratorFree($2 + 40 | 0);
  jsvStringIteratorFree($0);
  HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 64 >> 2];
 }
 global$0 = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}
function jsfGetNextFileHeader($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = HEAP32[HEAP32[$3 + 24 >> 2] >> 2];
 HEAP32[HEAP32[$3 + 24 >> 2] >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = (HEAP32[$3 + 12 >> 2] + jsfGetFileSize(HEAP32[$3 + 20 >> 2]) | 0) + 32;
 HEAP32[$3 + 8 >> 2] = jsfAlignAddress(HEAP32[$3 + 8 >> 2]);
 label$1 : {
  if (HEAPU32[$3 + 8 >> 2] < HEAPU32[$3 + 12 >> 2]) {
   HEAP8[$3 + 31 | 0] = 0;
   break label$1;
  }
  if (HEAP32[$3 + 8 >> 2] + 32 >>> 0 > 134479872) {
   HEAP8[$3 + 31 | 0] = 0;
   break label$1;
  }
  HEAP32[HEAP32[$3 + 24 >> 2] >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP8[$3 + 7 | 0] = jsfGetFileHeader(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 20 >> 2], ((HEAP32[$3 + 16 >> 2] & 2) != 0 ^ -1) & 1) & 1;
  if (!(!(HEAP32[$3 + 16 >> 2] & 1) | HEAP8[$3 + 7 | 0] & 1)) {
   HEAP32[$3 + 8 >> 2] = jsfGetAddressOfNextPage(HEAP32[$3 + 8 >> 2]);
   HEAP32[HEAP32[$3 + 24 >> 2] >> 2] = HEAP32[$3 + 8 >> 2];
   if (!HEAP32[$3 + 8 >> 2]) {
    HEAP8[$3 + 31 | 0] = 0;
    break label$1;
   }
   HEAP8[$3 + 7 | 0] = jsfGetFileHeader(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 20 >> 2], ((HEAP32[$3 + 16 >> 2] & 2) != 0 ^ -1) & 1) & 1;
  }
  HEAP8[$3 + 31 | 0] = HEAP8[$3 + 7 | 0] & 1;
 }
 global$0 = $3 + 32 | 0;
 return HEAP8[$3 + 31 | 0] & 1;
}
function graphicsStructResetState($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 17 | 0] = -1;
 HEAP8[$0 + 18 | 0] = 16777215;
 HEAP8[$0 + 19 | 0] = 65535;
 HEAP8[$0 + 20 | 0] = 255;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 21 | 0] = 0;
 HEAP8[$0 + 22 | 0] = 0;
 HEAP8[$0 + 23 | 0] = 0;
 HEAP8[$0 + 24 | 0] = 0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 25 | 0] = 8193;
 HEAP8[$0 + 26 | 0] = 32;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 31 | 0] = HEAPU8[$0 + 31 | 0] | 3;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 31 | 0] = HEAPU8[$0 + 31 | 0] | 12;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 31 | 0] = HEAPU8[$0 + 31 | 0] & -49;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 32 | 0] = 0;
 HEAP8[$0 + 33 | 0] = 0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 34 | 0] = 0;
 HEAP8[$0 + 35 | 0] = 0;
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = HEAP32[$1 + 12 >> 2];
 $2 = (HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8) - 1 | 0;
 HEAP8[$0 + 36 | 0] = $2;
 HEAP8[$0 + 37 | 0] = $2 >>> 8;
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = HEAP32[$1 + 12 >> 2];
 $2 = (HEAPU8[$2 + 14 | 0] | HEAPU8[$2 + 15 | 0] << 8) - 1 | 0;
 HEAP8[$0 + 38 | 0] = $2;
 HEAP8[$0 + 39 | 0] = $2 >>> 8;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 27 | 0] = 0;
 HEAP8[$0 + 28 | 0] = 0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 29 | 0] = 0;
 HEAP8[$0 + 30 | 0] = 0;
}
function jswrap_io_peek($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 80 | 0;
 global$0 = $3;
 HEAP32[$3 + 72 >> 2] = $0;
 HEAP32[$3 + 68 >> 2] = $1;
 HEAP32[$3 + 64 >> 2] = $2;
 HEAP32[$3 + 60 >> 2] = jshFlashGetMemMapAddress(HEAP32[$3 + 72 >> 2]);
 label$1 : {
  if (HEAP32[$3 + 68 >> 2] <= 1) {
   HEAP32[$3 + 76 >> 2] = jsvNewFromLongInteger(_jswrap_io_peek(HEAP32[$3 + 60 >> 2], HEAP32[$3 + 64 >> 2]), 0);
   break label$1;
  }
  if (HEAP32[$3 + 64 >> 2] == 1) {
   HEAP16[$3 + 58 >> 1] = 1;
  }
  if (HEAP32[$3 + 64 >> 2] == 2) {
   HEAP16[$3 + 58 >> 1] = 2;
  }
  if (HEAP32[$3 + 64 >> 2] == 4) {
   HEAP16[$3 + 58 >> 1] = 4;
  }
  HEAP32[$3 + 52 >> 2] = jsvNewTypedArray(HEAPU16[$3 + 58 >> 1], HEAP32[$3 + 68 >> 2]);
  if (!HEAP32[$3 + 52 >> 2]) {
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  jsvArrayBufferIteratorNew($3 + 8 | 0, HEAP32[$3 + 52 >> 2], 0);
  while (1) {
   if (jsvArrayBufferIteratorHasElement($3 + 8 | 0) & 1) {
    $0 = $3 + 8 | 0;
    jsvArrayBufferIteratorSetIntegerValue($0, _jswrap_io_peek(HEAP32[$3 + 60 >> 2], HEAP32[$3 + 64 >> 2]));
    HEAP32[$3 + 60 >> 2] = HEAP32[$3 + 64 >> 2] + HEAP32[$3 + 60 >> 2];
    jsvArrayBufferIteratorNext($0);
    continue;
   }
   break;
  }
  jsvArrayBufferIteratorFree($3 + 8 | 0);
  HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 52 >> 2];
 }
 global$0 = $3 + 80 | 0;
 return HEAP32[$3 + 76 >> 2];
}
function void_20tflite__ops__micro__arg_min_max__ArgMinMaxHelper_signed_20char_2c_20int_2c_20int__28tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int__2c_20bool_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 32 | 0;
 global$0 = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP8[$6 + 11 | 0] = $5;
 label$1 : {
  if (HEAP8[$6 + 11 | 0] & 1) {
   void_20tflite__reference_ops__ArgMinMax_signed_20char_2c_20int_2c_20int_2c_20tflite__ops__micro__Greater__28tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int__2c_20tflite__ops__micro__Greater_20const__29(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], $6 + 8 | 0);
   break label$1;
  }
  void_20tflite__reference_ops__ArgMinMax_signed_20char_2c_20int_2c_20int_2c_20tflite__ops__micro__Less__28tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int__2c_20tflite__ops__micro__Less_20const__29(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], $6);
 }
 global$0 = $6 + 32 | 0;
}
function tflite__GreedyMemoryPlanner__NextSimultaneouslyActiveBuffer_28tflite__GreedyMemoryPlanner__ListEntry_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 $0 = HEAP32[$4 + 24 >> 2];
 HEAP32[$4 + 8 >> 2] = 0;
 label$1 : {
  label$2 : {
   if (!HEAP32[$4 + 20 >> 2]) {
    HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 24 >> 2];
    break label$2;
   }
   if (HEAP32[HEAP32[$4 + 20 >> 2] + 8 >> 2] == -1) {
    HEAP32[$4 + 28 >> 2] = 0;
    break label$1;
   }
   HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[HEAP32[$4 + 20 >> 2] + 8 >> 2], 12);
  }
  while (1) {
   label$6 : {
    if (tflite__GreedyMemoryPlanner__DoesEntryOverlapInTime_28tflite__GreedyMemoryPlanner__ListEntry_20const__2c_20int_2c_20int_29_20const($0, HEAP32[$4 + 4 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[$4 + 12 >> 2]) & 1) {
     HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 4 >> 2];
     break label$6;
    }
    if (HEAP32[HEAP32[$4 + 4 >> 2] + 8 >> 2] == -1) {
     break label$6;
    }
    HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[HEAP32[$4 + 4 >> 2] + 8 >> 2], 12);
    continue;
   }
   break;
  }
  HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 8 >> 2];
 }
 global$0 = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}
function tflite__ops__micro__reshape__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 label$1 : {
  label$2 : {
   if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 52 >> 2]) | 0) == 1) {
    break label$2;
   }
   if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 52 >> 2]) | 0) == 2) {
    break label$2;
   }
   $0 = HEAP32[HEAP32[$2 + 56 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 56 >> 2];
   HEAP32[$2 + 40 >> 2] = 42609;
   HEAP32[$2 + 36 >> 2] = 71;
   HEAP32[$2 + 32 >> 2] = 42409;
   FUNCTION_TABLE[$0]($1, 42586, $2 + 32 | 0);
   HEAP32[$2 + 60 >> 2] = 1;
   break label$1;
  }
  if ((tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 52 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 56 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 56 >> 2];
   $3 = tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 52 >> 2]);
   HEAP32[$2 + 20 >> 2] = 1;
   HEAP32[$2 + 16 >> 2] = $3;
   HEAP32[$2 + 12 >> 2] = 42671;
   HEAP32[$2 + 8 >> 2] = 42654;
   HEAP32[$2 + 4 >> 2] = 72;
   HEAP32[$2 >> 2] = 42409;
   FUNCTION_TABLE[$0]($1, 42383, $2);
   HEAP32[$2 + 60 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 60 >> 2] = 0;
 }
 global$0 = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}
function jsvArrayBufferIteratorGetValueData($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 label$1 : {
  if (!HEAPU16[HEAP32[$2 + 12 >> 2] + 20 >> 1]) {
   break label$1;
  }
  HEAP32[$2 >> 2] = HEAPU16[HEAP32[$2 + 12 >> 2] + 20 >> 1] & 15;
  label$2 : {
   if (HEAPU16[HEAP32[$2 + 12 >> 2] + 20 >> 1] & 256) {
    HEAP32[$2 + 4 >> 2] = HEAP32[$2 >> 2] - 1;
    while (1) {
     if (HEAP32[$2 + 4 >> 2] >= 0) {
      $0 = jsvStringIteratorGetChar(HEAP32[$2 + 12 >> 2]);
      HEAP8[HEAP32[$2 + 8 >> 2] + HEAP32[$2 + 4 >> 2] | 0] = $0;
      if (HEAP32[$2 >> 2] != 1) {
       jsvStringIteratorNext(HEAP32[$2 + 12 >> 2]);
      }
      HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + -1;
      continue;
     }
     break;
    }
    break label$2;
   }
   HEAP32[$2 + 4 >> 2] = 0;
   while (1) {
    if (HEAP32[$2 + 4 >> 2] < HEAP32[$2 >> 2]) {
     $0 = jsvStringIteratorGetChar(HEAP32[$2 + 12 >> 2]);
     HEAP8[HEAP32[$2 + 8 >> 2] + HEAP32[$2 + 4 >> 2] | 0] = $0;
     if (HEAP32[$2 >> 2] != 1) {
      jsvStringIteratorNext(HEAP32[$2 + 12 >> 2]);
     }
     HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
     continue;
    }
    break;
   }
  }
  if (HEAP32[$2 >> 2] == 1) {
   break label$1;
  }
  HEAP8[HEAP32[$2 + 12 >> 2] + 36 | 0] = 1;
 }
 global$0 = $2 + 16 | 0;
}
function jswrap_string_trim($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 HEAP32[$1 + 52 >> 2] = jsvAsString(HEAP32[$1 + 56 >> 2]);
 label$1 : {
  if (!HEAP32[$1 + 52 >> 2]) {
   HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 52 >> 2];
   break label$1;
  }
  HEAP32[$1 + 48 >> 2] = 0;
  HEAP32[$1 + 44 >> 2] = -1;
  jsvStringIteratorNew($1 + 24 | 0, HEAP32[$1 + 52 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar($1 + 24 | 0) & 1) {
    $0 = $1 + 24 | 0;
    HEAP32[$1 + 20 >> 2] = jsvStringIteratorGetIndex($0);
    HEAP8[$1 + 19 | 0] = isWhitespace(jsvStringIteratorGetCharAndNext($0) << 24 >> 24) & 1;
    if (!(HEAP8[$1 + 19 | 0] & 1)) {
     if (HEAP32[$1 + 44 >> 2] < 0) {
      HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 20 >> 2];
     }
     HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 20 >> 2];
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree($1 + 24 | 0);
  HEAP32[$1 + 12 >> 2] = 0;
  if (HEAP32[$1 + 44 >> 2] >= HEAP32[$1 + 48 >> 2]) {
   HEAP32[$1 + 12 >> 2] = (HEAP32[$1 + 44 >> 2] + 1 | 0) - HEAP32[$1 + 48 >> 2];
  }
  HEAP32[$1 + 8 >> 2] = jsvNewFromStringVar(HEAP32[$1 + 52 >> 2], HEAP32[$1 + 48 >> 2], HEAP32[$1 + 12 >> 2]);
  jsvUnLock(HEAP32[$1 + 52 >> 2]);
  HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 8 >> 2];
 }
 global$0 = $1 - -64 | 0;
 return HEAP32[$1 + 60 >> 2];
}
function jsvArrayPop($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = jsvGetArrayLength(HEAP32[$1 + 12 >> 2]);
 if (HEAP32[$1 + 4 >> 2] > 0) {
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
  if (jsvGetLastChild(HEAP32[$1 + 12 >> 2]) & 65535) {
   HEAP16[$1 + 2 >> 1] = jsvGetLastChild(HEAP32[$1 + 12 >> 2]);
   HEAP32[$1 + 8 >> 2] = jsvLock(HEAPU16[$1 + 2 >> 1]);
   while (1) {
    if (HEAP32[$1 + 8 >> 2]) {
     $0 = jsvIsInt(HEAP32[$1 + 8 >> 2]) ^ -1;
    } else {
     $0 = 0;
    }
    if ($0 & 1) {
     HEAP16[$1 + 2 >> 1] = jsvGetPrevSibling(HEAP32[$1 + 8 >> 2]);
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
     label$7 : {
      if (HEAPU16[$1 + 2 >> 1]) {
       HEAP32[$1 + 8 >> 2] = jsvLock(HEAPU16[$1 + 2 >> 1]);
       break label$7;
      }
      HEAP32[$1 + 8 >> 2] = 0;
     }
     continue;
    }
    break;
   }
   if (HEAP32[$1 + 8 >> 2]) {
    label$10 : {
     if ((jsvGetInteger(HEAP32[$1 + 8 >> 2]) | 0) == HEAP32[$1 + 4 >> 2]) {
      jsvRemoveChild(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2]);
      break label$10;
     }
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
     HEAP32[$1 + 8 >> 2] = 0;
    }
   }
  }
  jsvSetArrayLength(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 4 >> 2]);
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function jsvArrayInsertBefore($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 label$1 : {
  if (HEAP32[$3 + 24 >> 2]) {
   HEAP32[$3 + 16 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(0), HEAP32[$3 + 20 >> 2]);
   if (!HEAP32[$3 + 16 >> 2]) {
    break label$1;
   }
   HEAP16[$3 + 14 >> 1] = jsvGetRef(jsvRef(HEAP32[$3 + 16 >> 2]));
   HEAP16[$3 + 12 >> 1] = jsvGetPrevSibling(HEAP32[$3 + 24 >> 2]);
   label$3 : {
    if (HEAPU16[$3 + 12 >> 1]) {
     HEAP32[$3 + 8 >> 2] = jsvRef(jsvLock(HEAPU16[$3 + 12 >> 1]));
     jsvSetInteger(HEAP32[$3 + 16 >> 2], jsvGetInteger(HEAP32[$3 + 8 >> 2]) + 1 | 0);
     jsvSetNextSibling(HEAP32[$3 + 8 >> 2], HEAPU16[$3 + 14 >> 1]);
     jsvUnLock(HEAP32[$3 + 8 >> 2]);
     jsvSetPrevSibling(HEAP32[$3 + 16 >> 2], HEAPU16[$3 + 12 >> 1]);
     break label$3;
    }
    jsvSetPrevSibling(HEAP32[$3 + 16 >> 2], 0);
    jsvSetFirstChild(HEAP32[$3 + 28 >> 2], HEAPU16[$3 + 14 >> 1]);
   }
   jsvSetPrevSibling(HEAP32[$3 + 24 >> 2], HEAPU16[$3 + 14 >> 1]);
   jsvSetNextSibling(HEAP32[$3 + 16 >> 2], jsvGetRef(jsvRef(HEAP32[$3 + 24 >> 2])) & 65535);
   jsvUnLock(HEAP32[$3 + 16 >> 2]);
   break label$1;
  }
  jsvArrayPush(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 20 >> 2]);
 }
 global$0 = $3 + 32 | 0;
}
function jsvStringIteratorLoadInline($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] + HEAP32[$0 + 8 >> 2];
 label$1 : {
  label$2 : {
   if (!HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) {
    break label$2;
   }
   if (!(jsvGetLastChild(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 65535)) {
    break label$2;
   }
   HEAP32[$1 + 8 >> 2] = jsvLock(jsvGetLastChild(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 65535);
   jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
   HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = HEAP32[$1 + 8 >> 2];
   $0 = jsvGetCharactersInVar(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
   HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = $0;
   break label$1;
  }
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
  HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2] = 0;
  HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = 0;
  HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = 0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2] + HEAP32[$0 + 8 >> 2];
  HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
}
function jsvCompareString($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 80 | 0;
 global$0 = $4;
 $5 = $4 + 8 | 0;
 HEAP32[$4 + 72 >> 2] = $0;
 HEAP32[$4 + 68 >> 2] = $1;
 HEAP32[$4 + 64 >> 2] = $2;
 HEAP32[$4 + 60 >> 2] = 0;
 HEAP8[$4 + 59 | 0] = $3;
 jsvStringIteratorNew($4 + 32 | 0, HEAP32[$4 + 72 >> 2], HEAP32[$4 + 64 >> 2]);
 jsvStringIteratorNew($5, HEAP32[$4 + 68 >> 2], HEAP32[$4 + 60 >> 2]);
 while (1) {
  label$2 : {
   $0 = $4 + 8 | 0;
   HEAP32[$4 + 4 >> 2] = jsvStringIteratorGetCharOrMinusOne($4 + 32 | 0);
   HEAP32[$4 >> 2] = jsvStringIteratorGetCharOrMinusOne($0);
   if (HEAP32[$4 + 4 >> 2] != HEAP32[$4 >> 2]) {
    $0 = $4 + 8 | 0;
    jsvStringIteratorFree($4 + 32 | 0);
    jsvStringIteratorFree($0);
    if (!(!(HEAP8[$4 + 59 | 0] & 1) | (HEAP32[$4 >> 2] >= 0 ? HEAP32[$4 + 4 >> 2] >= 0 : 0))) {
     HEAP32[$4 + 76 >> 2] = 0;
     break label$2;
    }
    HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 4 >> 2] - HEAP32[$4 >> 2];
    break label$2;
   }
   if (HEAP32[$4 + 4 >> 2] < 0) {
    $0 = $4 + 8 | 0;
    jsvStringIteratorFree($4 + 32 | 0);
    jsvStringIteratorFree($0);
    HEAP32[$4 + 76 >> 2] = 0;
    break label$2;
   }
   $0 = $4 + 8 | 0;
   jsvStringIteratorNext($4 + 32 | 0);
   jsvStringIteratorNext($0);
   continue;
  }
  break;
 }
 global$0 = $4 + 80 | 0;
 return HEAP32[$4 + 76 >> 2];
}
function jspeFactorDelete() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 $1 = $0 + 28 | 0;
 jslGetNextToken();
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = jspeFactorMember(jspeFactor(), $1);
 HEAP32[$0 + 20 >> 2] = 0;
 if ((HEAP32[23778] & 63) == 1) {
  HEAP8[$0 + 19 | 0] = 0;
  label$2 : {
   if (!(jsvIsName(HEAP32[$0 + 24 >> 2]) & 1)) {
    break label$2;
   }
   if (jsvIsNewChild(HEAP32[$0 + 24 >> 2]) & 1) {
    break label$2;
   }
   label$3 : {
    if (HEAP32[$0 + 28 >> 2]) {
     break label$3;
    }
    if (!(jsvIsChild(HEAP32[23774], HEAP32[$0 + 24 >> 2]) & 1)) {
     break label$3;
    }
    HEAP32[$0 + 28 >> 2] = jsvLockAgain(HEAP32[23774]);
   }
   if (jsvHasChildren(HEAP32[$0 + 28 >> 2]) & 1) {
    label$5 : {
     if (jsvIsArray(HEAP32[$0 + 28 >> 2]) & 1) {
      HEAP32[$0 + 12 >> 2] = jsvGetArrayLength(HEAP32[$0 + 28 >> 2]);
      jsvRemoveChild(HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
      jsvSetArrayLength(HEAP32[$0 + 28 >> 2], HEAP32[$0 + 12 >> 2]);
      break label$5;
     }
     jsvRemoveChild(HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
    }
    HEAP8[$0 + 19 | 0] = 1;
   }
  }
  HEAP32[$0 + 20 >> 2] = jsvNewFromBool(HEAP8[$0 + 19 | 0] & 1);
 }
 jsvUnLock2(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2]);
 global$0 = $0 + 32 | 0;
 return HEAP32[$0 + 20 >> 2];
}
function jswrap_array_sort($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 label$1 : {
  label$2 : {
   if (jsvIsUndefined(HEAP32[$2 + 52 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsFunction(HEAP32[$2 + 52 >> 2]) & 1) {
    break label$2;
   }
   HEAP32[$2 >> 2] = HEAP32[$2 + 52 >> 2];
   jsExceptionHere(1, 30703, $2);
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 4 >> 2] = 0;
  label$3 : {
   label$4 : {
    if (!(jsvIsArray(HEAP32[$2 + 56 >> 2]) & 1)) {
     if (!(jsvIsObject(HEAP32[$2 + 56 >> 2]) & 1)) {
      break label$4;
     }
    }
    jsvIteratorNew($2 + 8 | 0, HEAP32[$2 + 56 >> 2], 1);
    while (1) {
     if (jsvIteratorHasElement($2 + 8 | 0) & 1) {
      HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
      jsvIteratorNext($2 + 8 | 0);
      continue;
     }
     break;
    }
    jsvIteratorFree($2 + 8 | 0);
    break label$3;
   }
   HEAP32[$2 + 4 >> 2] = jsvGetLength(HEAP32[$2 + 56 >> 2]);
  }
  $0 = $2 + 8 | 0;
  jsvIteratorNew($0, HEAP32[$2 + 56 >> 2], 1);
  _jswrap_array_sort($0, HEAP32[$2 + 4 >> 2], HEAP32[$2 + 52 >> 2]);
  jsvIteratorFree($0);
  HEAP32[$2 + 60 >> 2] = jsvLockAgain(HEAP32[$2 + 56 >> 2]);
 }
 global$0 = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}
function jsvGetIndexFromLineAndCol($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 + -64 | 0;
 global$0 = $3;
 HEAP32[$3 + 56 >> 2] = $0;
 HEAP32[$3 + 52 >> 2] = $1;
 HEAP32[$3 + 48 >> 2] = $2;
 HEAP32[$3 + 44 >> 2] = 1;
 HEAP32[$3 + 40 >> 2] = 1;
 HEAP32[$3 + 36 >> 2] = 0;
 jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 56 >> 2], 0);
 label$1 : {
  while (1) {
   if (jsvStringIteratorHasChar($3 + 16 | 0) & 1) {
    HEAP8[$3 + 15 | 0] = jsvStringIteratorGetCharAndNext($3 + 16 | 0);
    if (!(HEAPU32[$3 + 40 >> 2] <= HEAPU32[$3 + 52 >> 2] ? !(HEAPU32[$3 + 44 >> 2] >= HEAPU32[$3 + 48 >> 2] ? HEAP32[$3 + 40 >> 2] == HEAP32[$3 + 52 >> 2] : 0) : 0)) {
     jsvStringIteratorFree($3 + 16 | 0);
     $0 = $3;
     if (HEAPU32[$3 + 40 >> 2] > HEAPU32[$3 + 52 >> 2]) {
      $1 = HEAP32[$3 + 36 >> 2] - 1 | 0;
     } else {
      $1 = HEAP32[$3 + 36 >> 2];
     }
     HEAP32[$0 + 60 >> 2] = $1;
     break label$1;
    }
    HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 44 >> 2] + 1;
    if (HEAP8[$3 + 15 | 0] == 10) {
     HEAP32[$3 + 44 >> 2] = 1;
     HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 40 >> 2] + 1;
    }
    HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 36 >> 2] + 1;
    continue;
   }
   break;
  }
  jsvStringIteratorFree($3 + 16 | 0);
  HEAP32[$3 + 60 >> 2] = HEAP32[$3 + 36 >> 2];
 }
 global$0 = $3 - -64 | 0;
 return HEAP32[$3 + 60 >> 2];
}
function tflite__ReverseSortInPlace_28int__2c_20int__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 while (1) {
  HEAP8[$3 + 19 | 0] = 0;
  HEAP32[$3 + 12 >> 2] = 1;
  while (1) {
   if (HEAP32[$3 + 12 >> 2] < HEAP32[$3 + 20 >> 2]) {
    if (HEAP32[HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 12 >> 2] - 1 << 2) >> 2] < HEAP32[HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 12 >> 2] << 2) >> 2]) {
     HEAP32[$3 + 8 >> 2] = HEAP32[HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 12 >> 2] - 1 << 2) >> 2];
     HEAP32[HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 12 >> 2] - 1 << 2) >> 2] = HEAP32[HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 12 >> 2] << 2) >> 2];
     HEAP32[HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 12 >> 2] << 2) >> 2] = HEAP32[$3 + 8 >> 2];
     HEAP32[$3 + 4 >> 2] = HEAP32[HEAP32[$3 + 24 >> 2] + (HEAP32[$3 + 12 >> 2] - 1 << 2) >> 2];
     HEAP32[HEAP32[$3 + 24 >> 2] + (HEAP32[$3 + 12 >> 2] - 1 << 2) >> 2] = HEAP32[HEAP32[$3 + 24 >> 2] + (HEAP32[$3 + 12 >> 2] << 2) >> 2];
     HEAP32[HEAP32[$3 + 24 >> 2] + (HEAP32[$3 + 12 >> 2] << 2) >> 2] = HEAP32[$3 + 4 >> 2];
     HEAP8[$3 + 19 | 0] = 1;
    }
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP8[$3 + 19 | 0] & 1) {
   continue;
  }
  break;
 }
}
function jswrap_io_getPinMode($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 11 | 0] = $0;
 label$1 : {
  if (!(jshIsPinValid(HEAPU8[$1 + 11 | 0]) & 1)) {
   jsExceptionHere(1, 33486, 0);
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP8[$1 + 10 | 0] = jshPinGetState(HEAPU8[$1 + 11 | 0]) & 15;
  HEAP32[$1 + 4 >> 2] = 0;
  $0 = HEAPU8[$1 + 10 | 0] + -1 | 0;
  label$3 : {
   if ($0 >>> 0 > 8) {
    break label$3;
   }
   label$4 : {
    switch ($0 - 1 | 0) {
    case 5:
     HEAP32[$1 + 4 >> 2] = 33498;
     break label$3;
    case 2:
     HEAP32[$1 + 4 >> 2] = 33505;
     break label$3;
    case 3:
     HEAP32[$1 + 4 >> 2] = 33511;
     break label$3;
    case 4:
     HEAP32[$1 + 4 >> 2] = 33524;
     break label$3;
    default:
     HEAP32[$1 + 4 >> 2] = 33539;
     break label$3;
    case 0:
     HEAP32[$1 + 4 >> 2] = 33546;
     break label$3;
    case 1:
     HEAP32[$1 + 4 >> 2] = 33556;
     break label$3;
    case 6:
     HEAP32[$1 + 4 >> 2] = 33573;
     break label$3;
    case 7:
     break label$4;
    }
   }
   HEAP32[$1 + 4 >> 2] = 33583;
  }
  if (HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = jsvNewFromString(HEAP32[$1 + 4 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function void_20tflite__ops__micro__arg_min_max__ArgMinMaxHelper_float_2c_20int_2c_20int__28tflite__RuntimeShape_20const__2c_20float_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int__2c_20bool_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 32 | 0;
 global$0 = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP8[$6 + 11 | 0] = $5;
 label$1 : {
  if (HEAP8[$6 + 11 | 0] & 1) {
   void_20tflite__reference_ops__ArgMinMax_float_2c_20int_2c_20int_2c_20tflite__ops__micro__Greater__28tflite__RuntimeShape_20const__2c_20float_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int__2c_20tflite__ops__micro__Greater_20const__29(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], $6 + 8 | 0);
   break label$1;
  }
  void_20tflite__reference_ops__ArgMinMax_float_2c_20int_2c_20int_2c_20tflite__ops__micro__Less__28tflite__RuntimeShape_20const__2c_20float_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20int__2c_20tflite__ops__micro__Less_20const__29(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], $6);
 }
 global$0 = $6 + 32 | 0;
}
function jswrap_stream_read($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1 : {
  if (!(jsvIsObject(HEAP32[$2 + 24 >> 2]) & 1)) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = jsvObjectGetChild(HEAP32[$2 + 24 >> 2], 37340, 0);
  HEAP32[$2 + 12 >> 2] = 0;
  label$3 : {
   if (jsvIsString(HEAP32[$2 + 16 >> 2]) & 1) {
    HEAP32[$2 + 8 >> 2] = jsvGetStringLength(HEAP32[$2 + 16 >> 2]);
    label$5 : {
     if (!(HEAPU32[$2 + 20 >> 2] < HEAPU32[$2 + 8 >> 2] ? HEAP32[$2 + 20 >> 2] > 0 : 0)) {
      HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 16 >> 2];
      HEAP32[$2 + 16 >> 2] = 0;
      jsvObjectRemoveChild(HEAP32[$2 + 24 >> 2], 37340);
      break label$5;
     }
     HEAP32[$2 + 12 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 16 >> 2], 0, HEAP32[$2 + 20 >> 2]);
     HEAP32[$2 + 4 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2], 2147483647);
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 37340, HEAP32[$2 + 4 >> 2]);
    }
    break label$3;
   }
   HEAP32[$2 + 12 >> 2] = jsvNewFromEmptyString();
  }
  jsvUnLock(HEAP32[$2 + 16 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function jstUtilTimerSetupBuffer($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = _jsvGetAddressOf(HEAPU8[$0 + 16 | 0] | HEAPU8[$0 + 17 | 0] << 8);
 $2 = HEAP32[$1 + 12 >> 2];
 HEAP8[$2 + 12 | 0] = $0;
 HEAP8[$2 + 13 | 0] = $0 >>> 8;
 HEAP8[$2 + 14 | 0] = $0 >>> 16;
 HEAP8[$2 + 15 | 0] = $0 >>> 24;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if (jsvIsFlatString(HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8 | (HEAPU8[$0 + 14 | 0] << 16 | HEAPU8[$0 + 15 | 0] << 24)) & 1) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP8[$0 + 22 | 0] = 16;
   HEAP8[$0 + 23 | 0] = 0;
   $0 = HEAP32[$1 + 12 >> 2];
   $0 = jsvGetCharactersInVar(HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8 | (HEAPU8[$0 + 14 | 0] << 16 | HEAPU8[$0 + 15 | 0] << 24));
   $2 = HEAP32[$1 + 12 >> 2];
   $0 = $0 + 16 | 0;
   HEAP8[$2 + 24 | 0] = $0;
   HEAP8[$2 + 25 | 0] = $0 >>> 8;
   break label$1;
  }
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP8[$0 + 22 | 0] = 0;
  HEAP8[$0 + 23 | 0] = 0;
  $0 = HEAP32[$1 + 12 >> 2];
  $0 = jsvGetCharactersInVar(HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8 | (HEAPU8[$0 + 14 | 0] << 16 | HEAPU8[$0 + 15 | 0] << 24));
  $2 = HEAP32[$1 + 12 >> 2];
  HEAP8[$2 + 24 | 0] = $0;
  HEAP8[$2 + 25 | 0] = $0 >>> 8;
 }
 global$0 = $1 + 16 | 0;
}
function tflite__MicroMutableOpResolver__AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration__2c_20int_2c_20int_29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = 1;
 HEAP32[$4 + 12 >> 2] = $3;
 $2 = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 16 >> 2];
 while (1) {
  if (!(HEAP32[$4 + 8 >> 2] > HEAP32[$4 + 12 >> 2] | HEAP32[$2 + 4100 >> 2] >= 128)) {
   HEAP32[$4 + 4 >> 2] = ($2 + 4 | 0) + (HEAP32[$2 + 4100 >> 2] << 5);
   HEAP32[$2 + 4100 >> 2] = HEAP32[$2 + 4100 >> 2] + 1;
   $0 = HEAP32[$4 + 20 >> 2];
   $3 = HEAP32[$0 + 4 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$1 + 4 >> 2] = $3;
   $3 = HEAP32[$0 + 28 >> 2];
   HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 24 >> 2];
   HEAP32[$1 + 28 >> 2] = $3;
   $3 = HEAP32[$0 + 20 >> 2];
   HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
   HEAP32[$1 + 20 >> 2] = $3;
   $3 = HEAP32[$0 + 12 >> 2];
   HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
   HEAP32[$1 + 12 >> 2] = $3;
   HEAP32[HEAP32[$4 + 4 >> 2] + 20 >> 2] = HEAP32[$4 + 24 >> 2];
   HEAP32[HEAP32[$4 + 4 >> 2] + 28 >> 2] = HEAP32[$4 + 8 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
}
function jsspiSend8bit($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP8[$4 + 15 | 0] = $0;
 HEAP8[$4 + 14 | 0] = $1;
 HEAP32[$4 + 8 >> 2] = $2;
 HEAP32[$4 + 4 >> 2] = $3;
 $1 = HEAPU8[$4 + 15 | 0];
 if (HEAPU8[$4 + 14 | 0] >> 6 & 1) {
  $0 = HEAP32[$4 + 4 >> 2];
 } else {
  $0 = HEAP32[$4 + 8 >> 2];
 }
 if (HEAPU8[$4 + 14 | 0] >> 7) {
  $2 = HEAP32[$4 + 4 >> 2];
 } else {
  $2 = HEAP32[$4 + 8 >> 2];
 }
 jshSPISend($1, $0 | $2 << 8);
 $1 = HEAPU8[$4 + 15 | 0];
 if (HEAPU8[$4 + 14 | 0] >> 4 & 1) {
  $0 = HEAP32[$4 + 4 >> 2];
 } else {
  $0 = HEAP32[$4 + 8 >> 2];
 }
 if (HEAPU8[$4 + 14 | 0] >> 5 & 1) {
  $2 = HEAP32[$4 + 4 >> 2];
 } else {
  $2 = HEAP32[$4 + 8 >> 2];
 }
 jshSPISend($1, $0 | $2 << 8);
 $1 = HEAPU8[$4 + 15 | 0];
 if (HEAPU8[$4 + 14 | 0] >> 2 & 1) {
  $0 = HEAP32[$4 + 4 >> 2];
 } else {
  $0 = HEAP32[$4 + 8 >> 2];
 }
 if (HEAPU8[$4 + 14 | 0] >> 3 & 1) {
  $2 = HEAP32[$4 + 4 >> 2];
 } else {
  $2 = HEAP32[$4 + 8 >> 2];
 }
 jshSPISend($1, $0 | $2 << 8);
 $1 = HEAPU8[$4 + 15 | 0];
 if (HEAP8[$4 + 14 | 0] & 1) {
  $0 = HEAP32[$4 + 4 >> 2];
 } else {
  $0 = HEAP32[$4 + 8 >> 2];
 }
 if (HEAPU8[$4 + 14 | 0] >> 1 & 1) {
  $2 = HEAP32[$4 + 4 >> 2];
 } else {
  $2 = HEAP32[$4 + 8 >> 2];
 }
 jshSPISend($1, $0 | $2 << 8);
 global$0 = $4 + 16 | 0;
}
function tflite__reference_ops__DepthwiseConv_28tflite__DepthwiseParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = global$0 - 48 | 0;
 global$0 = $9;
 HEAP32[$9 + 44 >> 2] = $0;
 HEAP32[$9 + 40 >> 2] = $1;
 HEAP32[$9 + 36 >> 2] = $2;
 HEAP32[$9 + 32 >> 2] = $3;
 HEAP32[$9 + 28 >> 2] = $4;
 HEAP32[$9 + 24 >> 2] = $5;
 HEAP32[$9 + 20 >> 2] = $6;
 HEAP32[$9 + 16 >> 2] = $7;
 HEAP32[$9 + 12 >> 2] = $8;
 tflite__reference_ops__depthwise_conv__DepthwiseConvBasicKernel__28tflite__DepthwiseConvOutputRounding_291___Run_28tflite__DepthwiseParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29(HEAP32[$9 + 44 >> 2], HEAP32[$9 + 40 >> 2], HEAP32[$9 + 36 >> 2], HEAP32[$9 + 32 >> 2], HEAP32[$9 + 28 >> 2], HEAP32[$9 + 24 >> 2], HEAP32[$9 + 20 >> 2], HEAP32[$9 + 16 >> 2], HEAP32[$9 + 12 >> 2]);
 global$0 = $9 + 48 | 0;
}
function jswrap_function_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = jsvNewWithFlags(7);
 label$1 : {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  $0 = $1 + 16 | 0;
  jsvObjectIteratorNew($0, HEAP32[$1 + 24 >> 2]);
  HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue($0);
  jsvObjectIteratorNext($0);
  while (1) {
   if (jsvObjectIteratorHasValue($1 + 16 | 0) & 1) {
    HEAP32[$1 + 8 >> 2] = jsvAsString(HEAP32[$1 + 12 >> 2]);
    if (HEAP32[$1 + 8 >> 2]) {
     HEAP32[$1 + 4 >> 2] = jsvNewFromString(32807);
     if (HEAP32[$1 + 4 >> 2]) {
      jsvAppendStringVarComplete(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
      jsvAddFunctionParameter(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 4 >> 2], 0);
     }
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
    }
    $0 = $1 + 16 | 0;
    jsvUnLock(HEAP32[$1 + 12 >> 2]);
    HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue($0);
    jsvObjectIteratorNext($0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($1 + 16 | 0);
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 20 >> 2], 32809, HEAP32[$1 + 12 >> 2]);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function tflite__ops__micro__activations__Softmax4DQuantized_28TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteSoftmaxParams__2c_20tflite__ops__micro__activations___28anonymous_20namespace_29__OpData__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 112 | 0;
 global$0 = $4;
 HEAP32[$4 + 108 >> 2] = $0;
 HEAP32[$4 + 104 >> 2] = $1;
 HEAP32[$4 + 100 >> 2] = $2;
 HEAP32[$4 + 96 >> 2] = $3;
 HEAP32[$4 + 64 >> 2] = HEAP32[HEAP32[$4 + 96 >> 2] >> 2];
 HEAP32[$4 + 68 >> 2] = HEAP32[HEAP32[$4 + 96 >> 2] + 4 >> 2];
 HEAP32[$4 + 80 >> 2] = HEAP32[HEAP32[$4 + 96 >> 2] + 12 >> 2];
 tflite__GetTensorShape_28TfLiteTensor_20const__29($4 + 32 | 0, HEAP32[$4 + 108 >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$4 + 108 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($4, HEAP32[$4 + 104 >> 2]);
 tflite__reference_ops__Softmax_28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($4 + 56 | 0, $4 + 32 | 0, $0, $4, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$4 + 104 >> 2]));
 $0 = $4 + 32 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($4);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $4 + 112 | 0;
}
function jswrap_dataview_get($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 80 | 0;
 global$0 = $4;
 HEAP32[$4 + 72 >> 2] = $0;
 HEAP16[$4 + 70 >> 1] = $1;
 HEAP32[$4 + 64 >> 2] = $2;
 HEAP8[$4 + 63 | 0] = $3;
 HEAP32[$4 + 56 >> 2] = jsvObjectGetChild(HEAP32[$4 + 72 >> 2], 31170, 0);
 label$1 : {
  if (!(jsvIsArrayBuffer(HEAP32[$4 + 56 >> 2]) & 1)) {
   jsvUnLock(HEAP32[$4 + 56 >> 2]);
   HEAP32[$4 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 64 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$4 + 72 >> 2], 31177, 0)) + HEAP32[$4 + 64 >> 2];
  HEAP32[$4 + 52 >> 2] = HEAPU16[$4 + 70 >> 1] & 15;
  if (!(HEAP8[$4 + 63 | 0] & 1)) {
   HEAP16[$4 + 70 >> 1] = HEAPU16[$4 + 70 >> 1] | 256;
  }
  HEAP32[$4 + 48 >> 2] = jswrap_typedarray_constructor(HEAPU16[$4 + 70 >> 1], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 64 >> 2], HEAP32[$4 + 52 >> 2]);
  jsvUnLock(HEAP32[$4 + 56 >> 2]);
  if (!HEAP32[$4 + 48 >> 2]) {
   HEAP32[$4 + 76 >> 2] = 0;
   break label$1;
  }
  $0 = $4 + 8 | 0;
  jsvArrayBufferIteratorNew($0, HEAP32[$4 + 48 >> 2], 0);
  HEAP32[$4 + 4 >> 2] = jsvArrayBufferIteratorGetValue($0);
  jsvArrayBufferIteratorFree($0);
  jsvUnLock(HEAP32[$4 + 48 >> 2]);
  HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 4 >> 2];
 }
 global$0 = $4 + 80 | 0;
 return HEAP32[$4 + 76 >> 2];
}
function jswrap_serial_unsetup($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP8[$1 + 27 | 0] = jsiGetDeviceFromClass(HEAP32[$1 + 28 >> 2]);
 HEAP32[$1 + 20 >> 2] = jsvObjectGetChild(HEAP32[$1 + 28 >> 2], 36865, 0);
 label$1 : {
  if (!HEAP32[$1 + 20 >> 2]) {
   jsExceptionHere(1, 36924, 0);
   break label$1;
  }
  HEAP32[$1 + 16 >> 2] = jsvObjectGetChild(HEAP32[$1 + 28 >> 2], 36874, 0);
  jsserialPopulateUSARTInfo($1, HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
  jsvUnLock2(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2]);
  jsvObjectRemoveChild(HEAP32[$1 + 28 >> 2], 36874);
  jsvObjectRemoveChild(HEAP32[$1 + 28 >> 2], 36865);
  label$3 : {
   if (!(HEAPU8[$1 + 27 | 0] <= 22 ? HEAPU8[$1 + 27 | 0] >= 17 : 0)) {
    jsserialEventCallbackKill(HEAP32[$1 + 28 >> 2], $1);
    break label$3;
   }
   jshSetFlowControlEnabled(HEAPU8[$1 + 27 | 0]);
  }
  if (HEAPU8[$1 + 6 | 0] != 255) {
   jshPinSetState(HEAPU8[$1 + 6 | 0], 0);
  }
  if (HEAPU8[$1 + 7 | 0] != 255) {
   jshPinSetState(HEAPU8[$1 + 7 | 0], 0);
  }
  if (HEAPU8[$1 + 4 | 0] != 255) {
   jshPinSetState(HEAPU8[$1 + 4 | 0], 0);
  }
  if (HEAPU8[$1 + 5 | 0] == 255) {
   break label$1;
  }
  jshPinSetState(HEAPU8[$1 + 5 | 0], 0);
 }
 global$0 = $1 + 32 | 0;
}
function jshGetPinFromString($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!(!HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] | (HEAP8[HEAP32[$1 + 8 >> 2]] != 86 ? !(HEAP8[HEAP32[$1 + 8 >> 2]] <= 73 ? HEAP8[HEAP32[$1 + 8 >> 2]] >= 65 : 0) : 0))) {
   $0 = $1;
   if (HEAP8[HEAP32[$1 + 8 >> 2]] == 86) {
    $2 = 10;
   } else {
    $2 = HEAP8[HEAP32[$1 + 8 >> 2]] + -64 | 0;
   }
   HEAP32[$0 + 4 >> 2] = $2;
   HEAP32[$1 >> 2] = -1;
   if (!(HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] < 48 | HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] > 57)) {
    label$7 : {
     if (!HEAPU8[HEAP32[$1 + 8 >> 2] + 2 | 0]) {
      HEAP32[$1 >> 2] = HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] - 48;
      break label$7;
     }
     if (!(HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] < 48 | HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] > 57)) {
      if (!HEAPU8[HEAP32[$1 + 8 >> 2] + 3 | 0]) {
       HEAP32[$1 >> 2] = (HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] + Math_imul(HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0], 10) | 0) + -528;
      }
     }
    }
   }
   if (HEAP32[$1 >> 2] >= 0) {
    if (HEAP32[$1 + 4 >> 2] == 4) {
     if (HEAP32[$1 >> 2] < 32) {
      HEAP8[$1 + 15 | 0] = HEAP32[$1 >> 2];
      break label$1;
     }
    }
   }
  }
  HEAP8[$1 + 15 | 0] = 255;
 }
 return HEAPU8[$1 + 15 | 0];
}
function jswGetBasicObjectPrototypeName($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!strcmp(HEAP32[$1 + 8 >> 2], 16977)) {
   HEAP32[$1 + 12 >> 2] = 16961;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 16988)) {
   HEAP32[$1 + 12 >> 2] = 16961;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 17006)) {
   HEAP32[$1 + 12 >> 2] = 16961;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 17016)) {
   HEAP32[$1 + 12 >> 2] = 16961;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 17028)) {
   HEAP32[$1 + 12 >> 2] = 16961;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 17039)) {
   HEAP32[$1 + 12 >> 2] = 16961;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 17051)) {
   HEAP32[$1 + 12 >> 2] = 16961;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 17063)) {
   HEAP32[$1 + 12 >> 2] = 16961;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 17074)) {
   HEAP32[$1 + 12 >> 2] = 16961;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 17087)) {
   HEAP32[$1 + 12 >> 2] = 16961;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = strcmp(HEAP32[$1 + 8 >> 2], 17212) ? 17212 : 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jswrap_flash_read($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1 : {
  if (HEAP32[$2 + 40 >> 2] <= 0) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 32 >> 2] = jsvNewTypedArray(1, HEAP32[$2 + 40 >> 2]);
  if (!HEAP32[$2 + 32 >> 2]) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$2 + 32 >> 2]);
  if (HEAP32[$2 + 28 >> 2]) {
   jsvStringIteratorNew($2 + 8 | 0, HEAP32[$2 + 28 >> 2], 0);
   while (1) {
    if (HEAP32[$2 + 40 >> 2] > 0) {
     $0 = jsvStringIteratorHasChar($2 + 8 | 0);
    } else {
     $0 = 0;
    }
    if ($0 & 1) {
     HEAP32[$2 >> 2] = 0;
     jsvStringIteratorGetPtrAndNext($2 + 8 | 0, $2 + 4 | 0, $2);
     jshFlashRead(HEAP32[$2 + 4 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 >> 2]);
     HEAP32[$2 + 36 >> 2] = HEAP32[$2 >> 2] + HEAP32[$2 + 36 >> 2];
     HEAP32[$2 + 40 >> 2] = HEAP32[$2 + 40 >> 2] - HEAP32[$2 >> 2];
     continue;
    }
    break;
   }
   jsvStringIteratorFree($2 + 8 | 0);
   jsvUnLock(HEAP32[$2 + 28 >> 2]);
  }
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
 }
 global$0 = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}
function jsiCountBracketsInInput() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 144 | 0;
 global$0 = $0;
 HEAP32[$0 + 140 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = jslSetLex($0 + 8 | 0);
 jslInit(HEAP32[23784]);
 while (1) {
  label$2 : {
   $1 = 0;
   label$3 : {
    if (!HEAP16[$0 + 10 >> 1]) {
     break label$3;
    }
    $1 = 0;
    if (HEAP16[$0 + 10 >> 1] == 137) {
     break label$3;
    }
    $1 = 0;
    if (HEAP16[$0 + 10 >> 1] == 132) {
     break label$3;
    }
    $1 = HEAP16[$0 + 10 >> 1] != 134;
   }
   if (!$1) {
    break label$2;
   }
   if (!(HEAP16[$0 + 10 >> 1] != 40 ? !(HEAP16[$0 + 10 >> 1] == 123 | HEAP16[$0 + 10 >> 1] == 91) : 0)) {
    HEAP32[$0 + 140 >> 2] = HEAP32[$0 + 140 >> 2] + 1;
   }
   if (!(HEAP16[$0 + 10 >> 1] != 41 ? !(HEAP16[$0 + 10 >> 1] == 125 | HEAP16[$0 + 10 >> 1] == 93) : 0)) {
    HEAP32[$0 + 140 >> 2] = HEAP32[$0 + 140 >> 2] + -1;
   }
   if (HEAP32[$0 + 140 >> 2] < 0) {
    break label$2;
   }
   jslGetNextToken();
   continue;
  }
  break;
 }
 if (HEAP16[$0 + 10 >> 1] == 132) {
  HEAP32[$0 + 140 >> 2] = 0;
 }
 if (!(HEAP16[$0 + 10 >> 1] != 134 ? HEAP16[$0 + 10 >> 1] != 137 : 0)) {
  HEAP32[$0 + 140 >> 2] = 1e3;
 }
 jslKill();
 jslSetLex(HEAP32[$0 + 4 >> 2]);
 global$0 = $0 + 144 | 0;
 return HEAP32[$0 + 140 >> 2];
}
function jspeConstruct($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP8[$3 + 35 | 0] = $2;
 label$1 : {
  if (!(jsvIsFunction(HEAP32[$3 + 40 >> 2]) & 1)) {
   HEAP32[$3 >> 2] = HEAP32[$3 + 40 >> 2];
   jsExceptionHere(1, 4233, $3);
   HEAP32[$3 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 28 >> 2] = jsvNewWithFlags(5);
  if (!HEAP32[$3 + 28 >> 2]) {
   HEAP32[$3 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 24 >> 2] = jsvFindChildFromString(HEAP32[$3 + 40 >> 2], 3674, 1);
  jspEnsureIsPrototype(HEAP32[$3 + 40 >> 2], HEAP32[$3 + 24 >> 2]);
  HEAP32[$3 + 20 >> 2] = jsvSkipName(HEAP32[$3 + 24 >> 2]);
  jsvUnLock3(jsvAddNamedChild(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 20 >> 2], 3684), HEAP32[$3 + 20 >> 2], HEAP32[$3 + 24 >> 2]);
  HEAP32[$3 + 16 >> 2] = jspeFunctionCall(HEAP32[$3 + 40 >> 2], HEAP32[$3 + 36 >> 2], HEAP32[$3 + 28 >> 2], HEAP8[$3 + 35 | 0] & 1, 0, 0);
  label$4 : {
   if (HEAP32[$3 + 16 >> 2]) {
    jsvUnLock(HEAP32[$3 + 28 >> 2]);
    HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 16 >> 2];
    break label$4;
   }
   jsvUnLock(HEAP32[$3 + 16 >> 2]);
  }
  HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 28 >> 2];
 }
 global$0 = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}
function jswrap_espruino_setConsole($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 112 | 0;
 global$0 = $2;
 HEAP32[$2 + 108 >> 2] = $0;
 HEAP32[$2 + 104 >> 2] = $1;
 HEAP8[$2 + 103 | 0] = 0;
 HEAP32[$2 + 88 >> 2] = 32028;
 HEAP16[$2 + 92 >> 1] = 11;
 HEAP32[$2 + 96 >> 2] = $2 + 103;
 label$1 : {
  if (!(jsvReadConfigObject(HEAP32[$2 + 104 >> 2], $2 + 88 | 0, 1) & 1)) {
   break label$1;
  }
  HEAP8[$2 + 87 | 0] = 0;
  label$2 : {
   if (jsvIsObject(HEAP32[$2 + 108 >> 2]) & 1) {
    HEAP8[$2 + 87 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 108 >> 2]);
    break label$2;
   }
   if (jsvIsString(HEAP32[$2 + 108 >> 2]) & 1) {
    $0 = $2 + 16 | 0;
    jsvGetString(HEAP32[$2 + 108 >> 2], $0, 64);
    HEAP8[$2 + 87 | 0] = jshFromDeviceString($0);
   }
  }
  label$5 : {
   if (HEAPU8[$2 + 87 | 0]) {
    break label$5;
   }
   if (jsvIsNull(HEAP32[$2 + 108 >> 2]) & 1) {
    break label$5;
   }
   HEAP32[$2 >> 2] = HEAPU8[$2 + 87 | 0];
   jsExceptionHere(1, 32034, $2);
   break label$1;
  }
  if (!(!HEAPU8[$2 + 87 | 0] | (HEAPU8[$2 + 87 | 0] <= 22 ? HEAPU8[$2 + 87 | 0] >= 17 : 0))) {
   jsExceptionHere(1, 32057, 0);
   break label$1;
  }
  jsiSetConsoleDevice(HEAPU8[$2 + 87 | 0], HEAP8[$2 + 103 | 0] & 1);
 }
 global$0 = $2 + 112 | 0;
}
function jslGetNextCh() {
 var $0 = 0;
 $0 = jslNextCh();
 HEAP8[HEAP32[13768]] = $0;
 $0 = HEAP32[13768];
 HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 108 >> 2] + 1;
 if (HEAPU32[HEAP32[13768] + 108 >> 2] >= HEAPU32[HEAP32[13768] + 112 >> 2]) {
  $0 = HEAP32[13768];
  HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 108 >> 2] - HEAP32[HEAP32[13768] + 112 >> 2];
  $0 = HEAP32[13768];
  HEAP32[$0 + 116 >> 2] = HEAP32[HEAP32[13768] + 112 >> 2] + HEAP32[$0 + 116 >> 2];
  label$2 : {
   label$3 : {
    if (!HEAP32[HEAP32[13768] + 120 >> 2]) {
     break label$3;
    }
    if (!(jsvGetLastChild(HEAP32[HEAP32[13768] + 120 >> 2]) & 65535)) {
     break label$3;
    }
    $0 = _jsvGetAddressOf(jsvGetLastChild(HEAP32[HEAP32[13768] + 120 >> 2]) & 65535);
    HEAP32[HEAP32[13768] + 120 >> 2] = $0;
    HEAP32[HEAP32[13768] + 124 >> 2] = HEAP32[HEAP32[13768] + 120 >> 2];
    $0 = jsvGetCharactersInVar(HEAP32[HEAP32[13768] + 120 >> 2]);
    HEAP32[HEAP32[13768] + 112 >> 2] = $0;
    break label$2;
   }
   HEAP32[HEAP32[13768] + 120 >> 2] = 0;
   HEAP32[HEAP32[13768] + 124 >> 2] = 0;
   HEAP32[HEAP32[13768] + 112 >> 2] = 0;
   $0 = HEAP32[13768];
   HEAP32[$0 + 116 >> 2] = HEAP32[HEAP32[13768] + 108 >> 2] + HEAP32[$0 + 116 >> 2];
   HEAP32[HEAP32[13768] + 108 >> 2] = 0;
  }
 }
}
function jsvIteratorGetValue($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[HEAP32[$1 + 8 >> 2] >> 2] + -1 | 0;
 label$1 : {
  if ($0 >>> 0 <= 3) {
   label$3 : {
    switch ($0 - 1 | 0) {
    case 2:
     label$7 : {
      if (!(jsvIsIntegerish(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) & 1)) {
       break label$7;
      }
      if ((jsvGetInteger(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) | 0) != HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2]) {
       break label$7;
      }
      HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue(HEAP32[$1 + 8 >> 2] + 4 | 0);
      break label$1;
     }
     HEAP32[$1 + 12 >> 2] = 0;
     break label$1;
    case 0:
     HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue(HEAP32[$1 + 8 >> 2] + 4 | 0);
     break label$1;
    default:
     $0 = $1 + 6 | 0;
     HEAP8[$1 + 6 | 0] = jsvStringIteratorGetChar(HEAP32[$1 + 8 >> 2] + 4 | 0);
     HEAP8[$1 + 7 | 0] = 0;
     HEAP32[$1 + 12 >> 2] = jsvNewFromString($0);
     break label$1;
    case 1:
     break label$3;
    }
   }
   HEAP32[$1 + 12 >> 2] = jsvArrayBufferIteratorGetValueAndRewind(HEAP32[$1 + 8 >> 2] + 4 | 0);
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsiSetConsoleDevice($0, $1) {
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP8[$2 + 47 | 0] = $0;
 HEAP8[$2 + 46 | 0] = $1;
 label$1 : {
  if (HEAP8[$2 + 46 | 0] & 1) {
   HEAP16[47566] = HEAPU16[47566] | 256;
   break label$1;
  }
  HEAP16[47566] = HEAPU16[47566] & -257;
 }
 label$3 : {
  if (HEAPU8[$2 + 47 | 0] == HEAPU8[53360]) {
   break label$3;
  }
  label$4 : {
   if (HEAPU8[$2 + 47 | 0] < 22 | HEAPU8[$2 + 47 | 0] > 22) {
    break label$4;
   }
   if (jshIsDeviceInitialised(HEAPU8[$2 + 47 | 0]) & 1) {
    break label$4;
   }
   $0 = $2 + 32 | 0;
   jshUSARTInitInfo($0);
   jshUSARTSetup(HEAPU8[$2 + 47 | 0], $0);
  }
  HEAP8[$2 + 31 | 0] = jsiEcho() & 1;
  if (HEAPU8[53360] == 19) {
   HEAP8[$2 + 31 | 0] = 0;
   jshTransmitMove(HEAPU8[$2 + 47 | 0]);
   jshUSARTKick(HEAPU8[$2 + 47 | 0]);
  }
  if (HEAP8[$2 + 31 | 0] & 1) {
   jsiConsoleRemoveInputLine();
   HEAP32[$2 + 16 >> 2] = jshGetDeviceString(HEAPU8[$2 + 47 | 0]);
   jsiConsolePrintf(5188, $2 + 16 | 0);
  }
  HEAP8[$2 + 30 | 0] = HEAPU8[53360];
  HEAP8[53360] = HEAPU8[$2 + 47 | 0];
  if (!(HEAP8[$2 + 31 | 0] & 1)) {
   break label$3;
  }
  HEAP32[$2 >> 2] = jshGetDeviceString(HEAPU8[$2 + 30 | 0]);
  jsiConsolePrintf(5195, $2);
 }
 global$0 = $2 + 48 | 0;
}
function jswrap_object_assign($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = 0;
 jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 28 >> 2]);
 HEAP8[$1 + 15 | 0] = 0;
 while (1) {
  if (HEAP8[$1 + 15 | 0] & 1) {
   $0 = 0;
  } else {
   $0 = jsvObjectIteratorHasValue($1 + 16 | 0);
  }
  if ($0 & 1) {
   HEAP32[$1 + 8 >> 2] = jsvObjectIteratorGetValue($1 + 16 | 0);
   label$5 : {
    if (jsvIsUndefined(HEAP32[$1 + 8 >> 2]) & 1) {
     break label$5;
    }
    if (jsvIsNull(HEAP32[$1 + 8 >> 2]) & 1) {
     break label$5;
    }
    label$7 : {
     if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
      HEAP32[$1 >> 2] = HEAP32[$1 + 8 >> 2];
      jsExceptionHere(3, 35123, $1);
      HEAP8[$1 + 15 | 0] = 1;
      break label$7;
     }
     label$9 : {
      if (!HEAP32[$1 + 24 >> 2]) {
       HEAP32[$1 + 24 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
       break label$9;
      }
      jsvObjectAppendAll(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 8 >> 2]);
     }
    }
   }
   $0 = $1 + 16 | 0;
   jsvUnLock(HEAP32[$1 + 8 >> 2]);
   jsvObjectIteratorNext($0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree($1 + 16 | 0);
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 24 >> 2];
}
function jswrap_banglejs_buzz($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAPF64[$2 + 16 >> 3] = $1;
 $0 = __DOUBLE_BITS(HEAPF64[$2 + 16 >> 3]);
 $3 = i64toi32_i32$HIGH_BITS & 2147483647;
 if (!(HEAPF64[$2 + 16 >> 3] > 1 ? 0 : !(($3 | 0) == 2146435072 & $0 >>> 0 >= 0 | $3 >>> 0 > 2146435072))) {
  HEAPF64[$2 + 16 >> 3] = 1;
 }
 if (HEAPF64[$2 + 16 >> 3] < 0) {
  HEAPF64[$2 + 16 >> 3] = 0;
 }
 if (HEAP32[$2 + 24 >> 2] <= 0) {
  HEAP32[$2 + 24 >> 2] = 200;
 }
 if (HEAP32[$2 + 24 >> 2] > 5e3) {
  HEAP32[$2 + 24 >> 2] = 5e3;
 }
 label$7 : {
  if (HEAP32[62835]) {
   jsExceptionHere(1, 29004, 0);
   HEAP32[$2 + 28 >> 2] = 0;
   break label$7;
  }
  HEAP32[62835] = jspromise_create();
  if (!HEAP32[62835]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$7;
  }
  if (HEAP32[62815] & 256) {
   $1 = HEAPF64[$2 + 16 >> 3] * 255;
   label$11 : {
    if ($1 < 4294967296 & $1 >= 0) {
     $0 = ~~$1 >>> 0;
     break label$11;
    }
    $0 = 0;
   }
   HEAP8[251330] = $0;
   _jswrap_banglejs_setVibration();
  }
  jsiSetTimeout(510, +HEAP32[$2 + 24 >> 2]);
  HEAP32[$2 + 28 >> 2] = jsvLockAgain(HEAP32[62835]);
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function jsfGetBootCodeFromFlash($0) {
 var $1 = 0;
 $1 = global$0 - 144 | 0;
 global$0 = $1;
 HEAP8[$1 + 139 | 0] = $0;
 jsfNameFromString($1 + 104 | 0, 2471);
 HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 128 >> 2];
 $0 = HEAP32[$1 + 124 >> 2];
 HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 120 >> 2];
 HEAP32[$1 + 60 >> 2] = $0;
 $0 = HEAP32[$1 + 116 >> 2];
 HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 112 >> 2];
 HEAP32[$1 + 52 >> 2] = $0;
 $0 = HEAP32[$1 + 108 >> 2];
 HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 104 >> 2];
 HEAP32[$1 + 44 >> 2] = $0;
 HEAP32[$1 + 132 >> 2] = jsfReadFile($1 + 40 | 0, 0, 0);
 label$1 : {
  if (!(HEAP32[$1 + 132 >> 2] ? 0 : !(HEAP8[$1 + 139 | 0] & 1))) {
   HEAP32[$1 + 140 >> 2] = HEAP32[$1 + 132 >> 2];
   break label$1;
  }
  jsfNameFromString($1 + 72 | 0, 2462);
  HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 96 >> 2];
  $0 = HEAP32[$1 + 92 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 88 >> 2];
  HEAP32[$1 + 28 >> 2] = $0;
  $0 = HEAP32[$1 + 84 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 80 >> 2];
  HEAP32[$1 + 20 >> 2] = $0;
  $0 = HEAP32[$1 + 76 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 72 >> 2];
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 140 >> 2] = jsfReadFile($1 + 8 | 0, 0, 0);
 }
 global$0 = $1 + 144 | 0;
 return HEAP32[$1 + 140 >> 2];
}
function jsiTabComplete_printCommon($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 28 >> 2];
 label$1 : {
  if (jsvGetStringLength(HEAP32[$2 + 24 >> 2]) >>> 0 <= HEAPU32[HEAP32[$2 + 20 >> 2] >> 2]) {
   break label$1;
  }
  if (jsvCompareString(HEAP32[HEAP32[$2 + 20 >> 2] + 4 >> 2], HEAP32[$2 + 24 >> 2], 0, 1)) {
   break label$1;
  }
  label$2 : {
   if (!HEAP32[HEAP32[$2 + 20 >> 2] + 16 >> 2]) {
    HEAP32[$2 >> 2] = HEAP32[$2 + 24 >> 2];
    jsiConsolePrintf(5305, $2);
    $0 = jsvGetStringLength(HEAP32[$2 + 24 >> 2]);
    HEAP32[HEAP32[$2 + 20 >> 2] + 16 >> 2] = $0;
    break label$2;
   }
   if (HEAPU32[HEAP32[$2 + 20 >> 2] + 16 >> 2] >= 20) {
    HEAP32[HEAP32[$2 + 20 >> 2] + 16 >> 2] = 19;
   }
   while (1) {
    if (HEAPU32[HEAP32[$2 + 20 >> 2] + 16 >> 2] < 20) {
     jsiConsolePrintChar(32);
     $0 = HEAP32[$2 + 20 >> 2];
     HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 24 >> 2];
   jsiConsolePrintf(5899, $2 + 16 | 0);
   HEAP32[HEAP32[$2 + 20 >> 2] + 16 >> 2] = 0;
  }
 }
 global$0 = $2 + 32 | 0;
}
function jsfGetFreeSpace() {
 var $0 = 0, $1 = 0;
 $0 = global$0 + -64 | 0;
 global$0 = $0;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP8[$0 + 55 | 0] = 1;
 if (!HEAP32[$0 + 56 >> 2]) {
  HEAP32[$0 + 56 >> 2] = 134437888;
 }
 HEAP32[$0 + 48 >> 2] = 134479872;
 label$2 : {
  if (!(HEAP8[$0 + 55 | 0] & 1)) {
   if (!(jshFlashGetPage(HEAP32[$0 + 56 >> 2], $0 + 44 | 0, $0 + 40 | 0) & 1)) {
    HEAP32[$0 + 60 >> 2] = 0;
    break label$2;
   }
   HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 44 >> 2] + HEAP32[$0 + 40 >> 2];
  }
  $1 = $0 + 8 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 24 >> 2] = 0;
  HEAP32[$1 + 28 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = 0;
  HEAP32[$1 + 20 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 56 >> 2];
  if (jsfGetFileHeader(HEAP32[$0 + 56 >> 2], $1, 0) & 1) {
   while (1) {
    HEAP32[$0 + 4 >> 2] = jsfAlignAddress((HEAP32[$0 + 56 >> 2] + 32 | 0) + jsfGetFileSize($0 + 8 | 0) | 0);
    if (jsfGetNextFileHeader($0 + 56 | 0, $0 + 8 | 0, (HEAP8[$0 + 55 | 0] & 1 ? 1 : 0) | 2) & 1) {
     continue;
    }
    break;
   }
  }
  HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 48 >> 2] - HEAP32[$0 + 4 >> 2];
 }
 global$0 = $0 - -64 | 0;
 return HEAP32[$0 + 60 >> 2];
}
function jshTransmit($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 label$1 : {
  if (!(HEAPU8[$2 + 15 | 0] != 18 ? HEAPU8[$2 + 15 | 0] != 17 : 0)) {
   jshPushIOCharEvent((HEAPU8[$2 + 15 | 0] == 18 ? 17 : 18) & 255, HEAP8[$2 + 14 | 0]);
   break label$1;
  }
  if (HEAPU8[$2 + 15 | 0] == 20) {
   terminalSendChar(HEAP8[$2 + 14 | 0]);
   break label$1;
  }
  label$5 : {
   if (HEAPU8[$2 + 15 | 0] != 21) {
    break label$5;
   }
  }
  if (!HEAPU8[$2 + 15 | 0]) {
   break label$1;
  }
  HEAP8[$2 + 13 | 0] = HEAPU8[95200] + 1;
  if (HEAPU8[$2 + 13 | 0] == HEAPU8[95201]) {
   jsiSetBusy(2, 1);
   HEAP8[$2 + 12 | 0] = HEAPU8[$2 + 15 | 0] == 19 ? HEAPU8[53360] == 19 : 0;
   while (1) {
    if (HEAPU8[$2 + 13 | 0] == HEAPU8[95201]) {
     jshBusyIdle();
     continue;
    }
    break;
   }
   if (!(!(HEAP8[$2 + 12 | 0] & 1) | HEAPU8[53360] == 19)) {
    HEAP8[$2 + 15 | 0] = HEAPU8[53360];
   }
   jsiSetBusy(2, 0);
  }
  HEAP8[(HEAPU8[95200] << 1) + 95280 | 0] = HEAPU8[$2 + 15 | 0];
  HEAP8[((HEAPU8[95200] << 1) + 95280 | 0) + 1 | 0] = HEAPU8[$2 + 14 | 0];
  HEAP8[95200] = HEAPU8[$2 + 13 | 0];
  jshUSARTKick(HEAPU8[$2 + 15 | 0]);
 }
 global$0 = $2 + 16 | 0;
}
function jswrap_string_slice($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 $0 = $3;
 $2 = jsvIsUndefined(HEAP32[$3 + 16 >> 2]) & 1;
 $1 = 2147483647;
 label$1 : {
  if ($2) {
   break label$1;
  }
  $1 = jsvGetInteger(HEAP32[$3 + 16 >> 2]);
 }
 HEAP32[$0 + 8 >> 2] = $1;
 if (HEAP32[$3 + 20 >> 2] < 0) {
  HEAP32[$3 + 20 >> 2] = jsvGetStringLength(HEAP32[$3 + 24 >> 2]) + HEAP32[$3 + 20 >> 2];
 }
 if (HEAP32[$3 + 8 >> 2] < 0) {
  HEAP32[$3 + 8 >> 2] = jsvGetStringLength(HEAP32[$3 + 24 >> 2]) + HEAP32[$3 + 8 >> 2];
 }
 if (HEAP32[$3 + 20 >> 2] < 0) {
  HEAP32[$3 + 20 >> 2] = 0;
 }
 if (HEAP32[$3 + 8 >> 2] < 0) {
  HEAP32[$3 + 8 >> 2] = 0;
 }
 HEAP32[$3 + 12 >> 2] = jsvNewFromEmptyString();
 label$6 : {
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$6;
  }
  if (HEAP32[$3 + 8 >> 2] > HEAP32[$3 + 20 >> 2]) {
   jsvAppendStringVar(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 8 >> 2] - HEAP32[$3 + 20 >> 2] | 0);
  }
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function jswrap_onewire_read($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 HEAP8[$2 + 51 | 0] = onewire_getpin(HEAP32[$2 + 56 >> 2]);
 label$1 : {
  if (!(jshIsPinValid(HEAPU8[$2 + 51 | 0]) & 1)) {
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  if (jsvIsNumeric(HEAP32[$2 + 52 >> 2]) & 1) {
   HEAP32[$2 + 44 >> 2] = jsvGetInteger(HEAP32[$2 + 52 >> 2]);
   HEAP32[$2 + 40 >> 2] = jsvNewTypedArray(1, HEAP32[$2 + 44 >> 2]);
   if (!HEAP32[$2 + 40 >> 2]) {
    HEAP32[$2 + 60 >> 2] = 0;
    break label$1;
   }
   jsvArrayBufferIteratorNew($2, HEAP32[$2 + 40 >> 2], 0);
   while (1) {
    label$6 : {
     $0 = HEAP32[$2 + 44 >> 2];
     HEAP32[$2 + 44 >> 2] = $0 + -1;
     if (!$0) {
      break label$6;
     }
     jsvArrayBufferIteratorSetByteValue($2, OneWireRead(HEAPU8[$2 + 51 | 0], 8) << 24 >> 24);
     jsvArrayBufferIteratorNext($2);
     continue;
    }
    break;
   }
   jsvArrayBufferIteratorFree($2);
   HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 40 >> 2];
   break label$1;
  }
  HEAP32[$2 + 60 >> 2] = jsvNewFromInteger(OneWireRead(HEAPU8[$2 + 51 | 0], 8));
 }
 global$0 = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}
function jsvMathsOpTypeEqual($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[$2 + 7 | 0] = (!HEAP32[$2 + 12 >> 2] | 0) == (!HEAP32[$2 + 8 >> 2] | 0);
 if (!(!HEAP32[$2 + 12 >> 2] | !HEAP32[$2 + 8 >> 2])) {
  $1 = $2;
  label$2 : {
   label$3 : {
    if (!(jsvIsInt(HEAP32[$2 + 12 >> 2]) & 1)) {
     if (!(jsvIsFloat(HEAP32[$2 + 12 >> 2]) & 1)) {
      break label$3;
     }
    }
    $0 = jsvIsInt(HEAP32[$2 + 8 >> 2]) & 1;
    $3 = 1;
    if ($0) {
     break label$2;
    }
    $0 = jsvIsFloat(HEAP32[$2 + 8 >> 2]) & 1;
    $3 = 1;
    if ($0) {
     break label$2;
    }
   }
   if (jsvIsString(HEAP32[$2 + 12 >> 2]) & 1) {
    $0 = jsvIsString(HEAP32[$2 + 8 >> 2]) & 1;
    $3 = 1;
    if ($0) {
     break label$2;
    }
   }
   $3 = (HEAPU16[HEAP32[$2 + 12 >> 2] + 14 >> 1] & 63) == (HEAPU16[HEAP32[$2 + 8 >> 2] + 14 >> 1] & 63);
  }
  HEAP8[$1 + 7 | 0] = $3;
 }
 if (HEAP8[$2 + 7 | 0] & 1) {
  HEAP32[$2 >> 2] = jsvMathsOp(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 138);
  if (!(jsvGetBool(HEAP32[$2 >> 2]) & 1)) {
   HEAP8[$2 + 7 | 0] = 0;
  }
  jsvUnLock(HEAP32[$2 >> 2]);
 }
 global$0 = $2 + 16 | 0;
 return HEAP8[$2 + 7 | 0] & 1;
}
function jswrap_string_endsWith($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1 : {
  if (!(jsvIsString(HEAP32[$3 + 24 >> 2]) & 1)) {
   HEAP8[$3 + 31 | 0] = 0;
   break label$1;
  }
  $0 = $3;
  label$3 : {
   if (jsvIsNumeric(HEAP32[$3 + 16 >> 2]) & 1) {
    $1 = jsvGetInteger(HEAP32[$3 + 16 >> 2]);
    break label$3;
   }
   $1 = jsvGetStringLength(HEAP32[$3 + 24 >> 2]);
  }
  HEAP32[$0 + 12 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = jsvAsString(HEAP32[$3 + 20 >> 2]);
  $0 = jsvGetStringLength(HEAP32[$3 + 8 >> 2]);
  HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] - $0;
  HEAP8[$3 + 7 | 0] = 0;
  label$5 : {
   if (HEAP32[$3 + 12 >> 2] < 0) {
    break label$5;
   }
   if (jsvGetStringLength(HEAP32[$3 + 8 >> 2]) + HEAP32[$3 + 12 >> 2] >>> 0 > jsvGetStringLength(HEAP32[$3 + 24 >> 2]) >>> 0) {
    break label$5;
   }
   HEAP8[$3 + 7 | 0] = !jsvCompareString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 12 >> 2], 1);
  }
  jsvUnLock(HEAP32[$3 + 8 >> 2]);
  HEAP8[$3 + 31 | 0] = HEAP8[$3 + 7 | 0] & 1;
 }
 global$0 = $3 + 32 | 0;
 return HEAP8[$3 + 31 | 0] & 1;
}
function matchfound($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = jsvNewWithFlags(3);
 HEAP32[$2 + 20 >> 2] = jsvStringIteratorGetIndex(HEAP32[$2 + 28 >> 2]);
 HEAP32[$2 + 16 >> 2] = jsvNewFromStringVar(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$2 + 20 >> 2] - HEAP32[$1 + 4 >> 2] | 0);
 jsvSetArrayItem(HEAP32[$2 + 24 >> 2], 0, HEAP32[$2 + 16 >> 2]);
 jsvUnLock(HEAP32[$2 + 16 >> 2]);
 HEAP32[$2 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 12 >> 2] < HEAP32[$1 + 12 >> 2]) {
   HEAP32[$2 + 16 >> 2] = jsvNewFromStringVar(HEAP32[$1 >> 2], HEAP32[($1 + 16 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2], HEAP32[($1 + 52 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] - HEAP32[($1 + 16 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] | 0);
   jsvSetArrayItem(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 12 >> 2] + 1 | 0, HEAP32[$2 + 16 >> 2]);
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 36810, jsvNewFromInteger(HEAP32[$1 + 4 >> 2]));
 jsvObjectSetChild(HEAP32[$2 + 24 >> 2], 36816, HEAP32[$1 >> 2]);
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}
function jsiExtractIOEventData($0, $1) {
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 HEAP32[HEAP32[$2 + 40 >> 2] >> 2] = 0;
 HEAP32[$2 + 36 >> 2] = jsvNewFromEmptyString();
 if (HEAP32[$2 + 36 >> 2]) {
  jsvStringIteratorNew($2 + 16 | 0, HEAP32[$2 + 36 >> 2], 0);
  HEAP32[$2 + 8 >> 2] = ((HEAPU8[HEAP32[$2 + 44 >> 2]] & 96) >> 5) + 1;
  while (1) {
   if (HEAP32[$2 + 8 >> 2]) {
    HEAP32[$2 + 12 >> 2] = 0;
    while (1) {
     if (HEAP32[$2 + 12 >> 2] < HEAP32[$2 + 8 >> 2]) {
      jsvStringIteratorAppend($2 + 16 | 0, HEAP8[HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 44 >> 2] + 1 | 0) | 0]);
      HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
      continue;
     }
     break;
    }
    label$6 : {
     if (jshIsTopEvent(HEAPU8[HEAP32[$2 + 44 >> 2]] & 31) & 1) {
      jshPopIOEvent(HEAP32[$2 + 44 >> 2]);
      $0 = HEAP32[$2 + 40 >> 2];
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
      HEAP32[$2 + 8 >> 2] = ((HEAPU8[HEAP32[$2 + 44 >> 2]] & 96) >> 5) + 1;
      break label$6;
     }
     HEAP32[$2 + 8 >> 2] = 0;
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree($2 + 16 | 0);
 }
 global$0 = $2 + 48 | 0;
 return HEAP32[$2 + 36 >> 2];
}
function itostr_extra($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP8[$4 + 23 | 0] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 label$1 : {
  if (!(!(HEAP8[$4 + 23 | 0] & 1) | HEAP32[$4 + 28 >> 2] >= 0)) {
   $0 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 24 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = 45;
   HEAP32[$4 + 12 >> 2] = 0 - HEAP32[$4 + 28 >> 2];
   break label$1;
  }
  HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 28 >> 2];
 }
 HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 12 >> 2];
 HEAP32[$4 + 4 >> 2] = 1;
 while (1) {
  if (HEAPU32[$4 + 8 >> 2] >= HEAPU32[$4 + 16 >> 2]) {
   HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
   HEAP32[$4 + 8 >> 2] = HEAPU32[$4 + 8 >> 2] / HEAPU32[$4 + 16 >> 2];
   continue;
  }
  break;
 }
 HEAP32[$4 >> 2] = HEAP32[$4 + 4 >> 2] - 1;
 while (1) {
  if (HEAP32[$4 >> 2] >= 0) {
   $0 = itoch(HEAPU32[$4 + 12 >> 2] % HEAPU32[$4 + 16 >> 2] | 0);
   HEAP8[HEAP32[$4 + 24 >> 2] + HEAP32[$4 >> 2] | 0] = $0;
   HEAP32[$4 + 12 >> 2] = HEAPU32[$4 + 12 >> 2] / HEAPU32[$4 + 16 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] + -1;
   continue;
  }
  break;
 }
 HEAP8[HEAP32[$4 + 24 >> 2] + HEAP32[$4 + 4 >> 2] | 0] = 0;
 global$0 = $4 + 32 | 0;
}
function tflite__RuntimeShape__RuntimeShape_28int_2c_20tflite__RuntimeShape_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = 1;
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$0 >> 2] = 0;
 if (HEAP32[$3 + 20 >> 2] < (tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$3 + 16 >> 2]) | 0)) {
  abort();
  abort();
 }
 tflite__RuntimeShape__Resize_28int_29($0, HEAP32[$3 + 20 >> 2]);
 HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 20 >> 2] - tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$3 + 16 >> 2]);
 HEAP32[$3 + 4 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 4 >> 2] < HEAP32[$3 + 8 >> 2]) {
   tflite__RuntimeShape__SetDim_28int_2c_20int_29($0, HEAP32[$3 + 4 >> 2], HEAP32[$3 + 12 >> 2]);
   HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 memcpy(tflite__RuntimeShape__DimsData_28_29_20const($0) + (HEAP32[$3 + 8 >> 2] << 2) | 0, tflite__RuntimeShape__DimsData_28_29_20const(HEAP32[$3 + 16 >> 2]), tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$3 + 16 >> 2]) << 2);
 global$0 = $3 + 32 | 0;
}
function jswrap_string_toUpperLowerCase($0, $1) {
 var $2 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP8[$2 + 71 | 0] = $1;
 HEAP32[$2 + 64 >> 2] = jsvNewFromEmptyString();
 label$1 : {
  if (!HEAP32[$2 + 64 >> 2]) {
   HEAP32[$2 + 76 >> 2] = 0;
   break label$1;
  }
  $0 = $2 + 16 | 0;
  $1 = $2 + 40 | 0;
  HEAP32[$2 + 60 >> 2] = jsvAsString(HEAP32[$2 + 72 >> 2]);
  jsvStringIteratorNew($1, HEAP32[$2 + 60 >> 2], 0);
  jsvStringIteratorNew($0, HEAP32[$2 + 64 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar($2 + 40 | 0) & 1) {
    HEAP8[$2 + 15 | 0] = jsvStringIteratorGetCharAndNext($2 + 40 | 0);
    $0 = $2;
    label$5 : {
     if (HEAP8[$2 + 71 | 0] & 1) {
      $1 = jsvStringCharToUpper(HEAP8[$2 + 15 | 0]) << 24 >> 24;
      break label$5;
     }
     $1 = jsvStringCharToLower(HEAP8[$2 + 15 | 0]) << 24 >> 24;
    }
    HEAP8[$0 + 15 | 0] = $1;
    jsvStringIteratorAppend($2 + 16 | 0, HEAP8[$2 + 15 | 0]);
    continue;
   }
   break;
  }
  $0 = $2 + 16 | 0;
  jsvStringIteratorFree($2 + 40 | 0);
  jsvStringIteratorFree($0);
  jsvUnLock(HEAP32[$2 + 60 >> 2]);
  HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 64 >> 2];
 }
 global$0 = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}
function jswrap_dataview_constructor($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1 : {
  if (!(wasm2js_i32$0 = jsvIsArrayBuffer(HEAP32[$3 + 24 >> 2]) & 1, wasm2js_i32$1 = 0, wasm2js_i32$2 = HEAPU16[HEAP32[$3 + 24 >> 2] + 4 >> 1] == 129, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)) {
   HEAP32[$3 >> 2] = HEAP32[$3 + 24 >> 2];
   jsExceptionHere(3, 31131, $3);
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jspNewObject(0, 31161);
  if (HEAP32[$3 + 12 >> 2]) {
   jsvObjectSetChild(HEAP32[$3 + 12 >> 2], 31170, HEAP32[$3 + 24 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$3 + 12 >> 2], 31177, jsvNewFromInteger(HEAP32[$3 + 20 >> 2]));
   $0 = HEAP32[$3 + 12 >> 2];
   if (HEAP32[$3 + 16 >> 2]) {
    $1 = HEAP32[$3 + 16 >> 2];
   } else {
    $1 = jsvGetArrayBufferLength(HEAP32[$3 + 24 >> 2]);
   }
   jsvObjectSetChildAndUnLock($0, 31188, jsvNewFromInteger($1));
  }
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function getTimeFromMilliSeconds($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAPF64[$3 + 24 >> 3] = $1;
 HEAP8[$3 + 23 | 0] = $2;
 $2 = $0;
 if (HEAP8[$3 + 23 | 0] & 1) {
  $4 = 0;
 } else {
  $4 = jsdGetTimeZone();
 }
 HEAP32[$2 + 20 >> 2] = $4;
 HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 24 >> 3] + +(Math_imul(HEAP32[$0 + 20 >> 2], 6e4) | 0);
 $2 = $0;
 $1 = HEAPF64[$3 + 24 >> 3] / 864e5;
 label$2 : {
  if (Math_abs($1) < 2147483648) {
   $4 = ~~$1;
   break label$2;
  }
  $4 = -2147483648;
 }
 HEAP32[$2 >> 2] = $4;
 $2 = $3;
 $1 = HEAPF64[$3 + 24 >> 3] - +HEAP32[$0 >> 2] * 864e5;
 label$4 : {
  if (Math_abs($1) < 2147483648) {
   $4 = ~~$1;
   break label$4;
  }
  $4 = -2147483648;
 }
 HEAP32[$2 + 16 >> 2] = $4;
 if (HEAP32[$3 + 16 >> 2] < 0) {
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 864e5;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + -1;
 }
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 16 >> 2] / 1e3;
 HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 16 >> 2] % 1e3;
 HEAP32[$0 + 16 >> 2] = HEAP32[$3 + 12 >> 2] / 3600;
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] % 3600;
 HEAP32[$0 + 12 >> 2] = HEAP32[$3 + 12 >> 2] / 60;
 HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 12 >> 2] % 60;
 global$0 = $3 + 32 | 0;
}
function tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$3 + 28 >> 2]) | 0) != (tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$3 + 24 >> 2]) | 0)) {
   break label$1;
  }
 }
 HEAP32[$3 + 16 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$3 + 28 >> 2]);
 HEAP32[$3 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 12 >> 2] < HEAP32[$3 + 16 >> 2]) {
   label$4 : {
    if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 12 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 12 >> 2]) | 0)) {
     break label$4;
    }
   }
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 $0 = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 20 >> 2]);
 global$0 = $3 + 32 | 0;
 return $0;
}
function jswrap_date_toString($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $1 = global$0 - 112 | 0;
 global$0 = $1;
 $2 = $1 + 56 | 0;
 HEAP32[$1 + 108 >> 2] = $0;
 getTimeFromDateVar($1 + 80 | 0, HEAP32[$1 + 108 >> 2], 0);
 getCalendarDate($2, HEAP32[$1 + 80 >> 2]);
 label$1 : {
  if (HEAP32[$1 + 100 >> 2] < 0) {
   HEAP32[$1 + 48 >> 2] = 0 - HEAP32[$1 + 100 >> 2];
   HEAP8[$1 + 55 | 0] = 45;
   break label$1;
  }
  HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 100 >> 2];
  HEAP8[$1 + 55 | 0] = 43;
 }
 $0 = HEAP32[13354] + (HEAP32[$1 + 72 >> 2] << 2) | 0;
 $2 = HEAP32[13353] + (HEAP32[$1 + 64 >> 2] << 2) | 0;
 $3 = HEAP32[$1 + 60 >> 2];
 $4 = HEAP32[$1 + 68 >> 2];
 $5 = HEAP32[$1 + 96 >> 2];
 $6 = HEAP32[$1 + 92 >> 2];
 $7 = HEAP32[$1 + 88 >> 2];
 $8 = HEAP8[$1 + 55 | 0];
 HEAP32[$1 + 32 >> 2] = Math_imul(HEAP32[$1 + 48 >> 2] / 60 | 0, 100) + (HEAP32[$1 + 48 >> 2] % 60 | 0);
 HEAP32[$1 + 28 >> 2] = $8;
 HEAP32[$1 + 24 >> 2] = $7;
 HEAP32[$1 + 20 >> 2] = $6;
 HEAP32[$1 + 16 >> 2] = $5;
 HEAP32[$1 + 12 >> 2] = $4;
 HEAP32[$1 + 8 >> 2] = $3;
 HEAP32[$1 + 4 >> 2] = $2;
 HEAP32[$1 >> 2] = $0;
 $0 = jsvVarPrintf(31412, $1);
 global$0 = $1 + 112 | 0;
 return $0 | 0;
}
function jsvIteratorGetFloatValue($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 $0 = HEAP32[HEAP32[$1 + 4 >> 2] >> 2] + -1 | 0;
 label$1 : {
  if ($0 >>> 0 <= 3) {
   label$3 : {
    switch ($0 - 1 | 0) {
    case 2:
     label$7 : {
      if (!(jsvIsIntegerish(HEAP32[HEAP32[$1 + 4 >> 2] + 4 >> 2]) & 1)) {
       break label$7;
      }
      if ((jsvGetInteger(HEAP32[HEAP32[$1 + 4 >> 2] + 4 >> 2]) | 0) != HEAP32[HEAP32[$1 + 4 >> 2] + 12 >> 2]) {
       break label$7;
      }
      HEAPF64[$1 + 8 >> 3] = jsvGetFloatAndUnLock(jsvObjectIteratorGetValue(HEAP32[$1 + 4 >> 2] + 4 | 0));
      break label$1;
     }
     HEAPF64[$1 + 8 >> 3] = nan;
     break label$1;
    case 0:
     HEAPF64[$1 + 8 >> 3] = jsvGetFloatAndUnLock(jsvObjectIteratorGetValue(HEAP32[$1 + 4 >> 2] + 4 | 0));
     break label$1;
    default:
     HEAPF64[$1 + 8 >> 3] = jsvStringIteratorGetChar(HEAP32[$1 + 4 >> 2] + 4 | 0) | 0;
     break label$1;
    case 1:
     break label$3;
    }
   }
   HEAPF64[$1 + 8 >> 3] = jsvArrayBufferIteratorGetFloatValue(HEAP32[$1 + 4 >> 2] + 4 | 0);
   break label$1;
  }
  HEAPF64[$1 + 8 >> 3] = nan;
 }
 global$0 = $1 + 16 | 0;
 return HEAPF64[$1 + 8 >> 3];
}
function memchr($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = ($1 | 0) != 0;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     if (!$1 | !($0 & 3)) {
      break label$4;
     }
     while (1) {
      if (!HEAPU8[$0 | 0]) {
       break label$3;
      }
      $0 = $0 + 1 | 0;
      $1 = $1 + -1 | 0;
      $2 = ($1 | 0) != 0;
      if (!$1) {
       break label$4;
      }
      if ($0 & 3) {
       continue;
      }
      break;
     }
    }
    if (!$2) {
     break label$2;
    }
   }
   if (!HEAPU8[$0 | 0]) {
    break label$1;
   }
   label$6 : {
    if ($1 >>> 0 >= 4) {
     $2 = $1 + -4 | 0;
     $3 = $2 & -4;
     $2 = $2 - $3 | 0;
     $3 = ($0 + $3 | 0) + 4 | 0;
     while (1) {
      $4 = HEAP32[$0 >> 2];
      if (($4 ^ -1) & $4 + -16843009 & -2139062144) {
       break label$6;
      }
      $0 = $0 + 4 | 0;
      $1 = $1 + -4 | 0;
      if ($1 >>> 0 > 3) {
       continue;
      }
      break;
     }
     $1 = $2;
     $0 = $3;
    }
    if (!$1) {
     break label$2;
    }
   }
   while (1) {
    if (!HEAPU8[$0 | 0]) {
     break label$1;
    }
    $0 = $0 + 1 | 0;
    $1 = $1 + -1 | 0;
    if ($1) {
     continue;
    }
    break;
   }
  }
  return 0;
 }
 return $0;
}
function jswrap_object_defineProperties($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1 : {
  if (!(jsvIsObject(HEAP32[$2 + 40 >> 2]) & 1)) {
   HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 40 >> 2];
   jsExceptionHere(1, 35021, $2 + 16 | 0);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsObject(HEAP32[$2 + 36 >> 2]) & 1)) {
   HEAP32[$2 >> 2] = HEAP32[$2 + 36 >> 2];
   jsExceptionHere(1, 35063, $2);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($2 + 32 | 0, HEAP32[$2 + 36 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($2 + 32 | 0) & 1) {
    $0 = $2 + 32 | 0;
    HEAP32[$2 + 28 >> 2] = jsvObjectIteratorGetKey($0);
    HEAP32[$2 + 24 >> 2] = jsvObjectIteratorGetValue($0);
    jsvUnLock3(jswrap_object_defineProperty(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]), HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]);
    jsvObjectIteratorNext($0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($2 + 32 | 0);
  HEAP32[$2 + 44 >> 2] = jsvLockAgain(HEAP32[$2 + 40 >> 2]);
 }
 global$0 = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}
function jswrap_graphics_setFontAlign($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 96 | 0;
 global$0 = $4;
 HEAP32[$4 + 88 >> 2] = $0;
 HEAP32[$4 + 84 >> 2] = $1;
 HEAP32[$4 + 80 >> 2] = $2;
 HEAP32[$4 + 76 >> 2] = $3;
 label$1 : {
  if (!(graphicsGetFromVar($4 + 8 | 0, HEAP32[$4 + 88 >> 2]) & 1)) {
   HEAP32[$4 + 92 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$4 + 84 >> 2] < -1) {
   HEAP32[$4 + 84 >> 2] = -1;
  }
  if (HEAP32[$4 + 84 >> 2] > 1) {
   HEAP32[$4 + 84 >> 2] = 1;
  }
  if (HEAP32[$4 + 80 >> 2] < -1) {
   HEAP32[$4 + 80 >> 2] = -1;
  }
  if (HEAP32[$4 + 80 >> 2] > 1) {
   HEAP32[$4 + 80 >> 2] = 1;
  }
  if (HEAP32[$4 + 76 >> 2] < 0) {
   HEAP32[$4 + 76 >> 2] = 0;
  }
  if (HEAP32[$4 + 76 >> 2] > 3) {
   HEAP32[$4 + 76 >> 2] = 3;
  }
  HEAP8[$4 + 39 | 0] = HEAPU8[$4 + 84 | 0] & 3 | HEAPU8[$4 + 39 | 0] & 252;
  HEAP8[$4 + 39 | 0] = HEAPU8[$4 + 39 | 0] & 243 | (HEAPU8[$4 + 80 | 0] & 3) << 2;
  HEAP8[$4 + 39 | 0] = HEAPU8[$4 + 39 | 0] & -49 | (HEAPU8[$4 + 76 | 0] & 3) << 4;
  graphicsSetVar($4 + 8 | 0);
  HEAP32[$4 + 92 >> 2] = jsvLockAgain(HEAP32[$4 + 88 >> 2]);
 }
 global$0 = $4 + 96 | 0;
 return HEAP32[$4 + 92 >> 2];
}
function jsiAppendStringToInputLine($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsiIsAboutToEditInputLine();
 HEAP32[$1 + 8 >> 2] = 1;
 while (1) {
  if (HEAPU8[HEAP32[$1 + 12 >> 2] + HEAP32[$1 + 8 >> 2] | 0]) {
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 if (HEAP32[13341] < 0) {
  HEAP32[13341] = jsvGetStringLength(HEAP32[23784]);
 }
 label$4 : {
  if (HEAP32[23786] >= HEAP32[13341]) {
   jsiAppendToInputLine(HEAP32[$1 + 12 >> 2]);
   break label$4;
  }
  HEAP32[$1 + 4 >> 2] = jsvNewFromEmptyString();
  if (HEAPU32[23786] > 0) {
   jsvAppendStringVar(HEAP32[$1 + 4 >> 2], HEAP32[23784], 0, HEAP32[23786]);
  }
  jsvAppendString(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 12 >> 2]);
  jsvAppendStringVar(HEAP32[$1 + 4 >> 2], HEAP32[23784], HEAP32[23786], 2147483647);
  jsiInputLineCursorMoved();
  jsvUnLock(HEAP32[23784]);
  HEAP32[23784] = HEAP32[$1 + 4 >> 2];
  if (jsiShowInputLine() & 1) {
   jsiConsolePrintStringVarUntilEOL(HEAP32[23784], HEAP32[23786]);
  }
 }
 HEAP32[23786] = HEAP32[$1 + 8 >> 2] + HEAP32[23786];
 if (jsiShowInputLine() & 1) {
  jsiConsolePrintString(HEAP32[$1 + 12 >> 2]);
 }
 global$0 = $1 + 16 | 0;
}
function __vfprintf_internal($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = global$0 - 208 | 0;
 global$0 = $1;
 HEAP32[$1 + 204 >> 2] = 0;
 memset($1 + 160 | 0, 0, 40);
 HEAP32[$1 + 200 >> 2] = HEAP32[$1 + 204 >> 2];
 label$1 : {
  if ((printf_core(0, $1 + 200 | 0, $1 + 80 | 0, $1 + 160 | 0) | 0) < 0) {
   break label$1;
  }
  $3 = HEAP32[$0 + 76 >> 2] >= 0 ? 1 : $3;
  $2 = HEAP32[$0 >> 2];
  if (HEAP8[$0 + 74 | 0] <= 0) {
   HEAP32[$0 >> 2] = $2 & -33;
  }
  $4 = $2 & 32;
  label$4 : {
   if (HEAP32[$0 + 48 >> 2]) {
    printf_core($0, $1 + 200 | 0, $1 + 80 | 0, $1 + 160 | 0);
    break label$4;
   }
   HEAP32[$0 + 48 >> 2] = 80;
   HEAP32[$0 + 16 >> 2] = $1 + 80;
   HEAP32[$0 + 28 >> 2] = $1;
   HEAP32[$0 + 20 >> 2] = $1;
   $2 = HEAP32[$0 + 44 >> 2];
   HEAP32[$0 + 44 >> 2] = $1;
   printf_core($0, $1 + 200 | 0, $1 + 80 | 0, $1 + 160 | 0);
   if (!$2) {
    break label$4;
   }
   FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
   HEAP32[$0 + 48 >> 2] = 0;
   HEAP32[$0 + 44 >> 2] = $2;
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
  }
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | $4;
  if (!$3) {
   break label$1;
  }
 }
 global$0 = $1 + 208 | 0;
}
function int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 HEAP32[$2 + 20 >> 2] = jshFlashGetMemMapAddress((32 <= ($0 & 63) >>> 0 ? 0 : 1 << ($0 & 31)) - 1 | 0);
 HEAP32[$2 + 16 >> 2] = jshFlashGetMemMapAddress(0);
 HEAP32[$2 + 12 >> 2] = jshFlashGetMemMapAddress(1);
 HEAP32[$2 + 8 >> 2] = int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2]);
 HEAP32[$2 + 4 >> 2] = int_20gemmlowp__Add_int__28int_2c_20int_29(int_20gemmlowp__ShiftRight_int__28int_2c_20int_29(HEAP32[$2 + 20 >> 2], 1), int_20gemmlowp__BitAnd_int__28int_2c_20int_29(int_20gemmlowp__MaskIfLessThan_int__28int_2c_20int_29(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 16 >> 2]), HEAP32[$2 + 12 >> 2]));
 $0 = int_20gemmlowp__Add_int__28int_2c_20int_29(int_20gemmlowp__ShiftRight_int__28int_2c_20int_29(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]), int_20gemmlowp__BitAnd_int__28int_2c_20int_29(int_20gemmlowp__MaskIfGreaterThan_int__28int_2c_20int_29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]), HEAP32[$2 + 12 >> 2]));
 global$0 = $2 + 32 | 0;
 return $0;
}
function jswrap_storage_write($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 96 | 0;
 global$0 = $4;
 HEAP32[$4 + 92 >> 2] = $0;
 HEAP32[$4 + 88 >> 2] = $1;
 HEAP32[$4 + 84 >> 2] = $2;
 HEAP32[$4 + 80 >> 2] = $3;
 label$1 : {
  if (jsvIsObject(HEAP32[$4 + 88 >> 2]) & 1) {
   HEAP32[$4 + 76 >> 2] = jswrap_json_stringify(HEAP32[$4 + 88 >> 2], 0, 0);
   HEAP32[$4 + 84 >> 2] = 0;
   HEAP32[$4 + 80 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 76 >> 2] = jsvLockAgainSafe(HEAP32[$4 + 88 >> 2]);
 }
 jsfNameFromVar($4 + 40 | 0, HEAP32[$4 + 92 >> 2]);
 $0 = HEAP32[$4 + 76 >> 2];
 $1 = HEAP32[$4 + 84 >> 2];
 $2 = HEAP32[$4 + 80 >> 2];
 HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 64 >> 2];
 $3 = HEAP32[$4 + 60 >> 2];
 HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 56 >> 2];
 HEAP32[$4 + 28 >> 2] = $3;
 $3 = HEAP32[$4 + 52 >> 2];
 HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 48 >> 2];
 HEAP32[$4 + 20 >> 2] = $3;
 $3 = HEAP32[$4 + 44 >> 2];
 HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 40 >> 2];
 HEAP32[$4 + 12 >> 2] = $3;
 HEAP8[$4 + 75 | 0] = jsfWriteFile($4 + 8 | 0, $0, 0, $1, $2) & 1;
 jsvUnLock(HEAP32[$4 + 76 >> 2]);
 global$0 = $4 + 96 | 0;
 return HEAP8[$4 + 75 | 0] & 1;
}
function lcdFillRect_ArrayBuffer_flat8($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = global$0 - 48 | 0;
 HEAP32[$6 + 44 >> 2] = $0;
 HEAP32[$6 + 40 >> 2] = $1;
 HEAP32[$6 + 36 >> 2] = $2;
 HEAP32[$6 + 32 >> 2] = $3;
 HEAP32[$6 + 28 >> 2] = $4;
 HEAP32[$6 + 24 >> 2] = $5;
 HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 36 >> 2];
 while (1) {
  if (HEAP32[$6 + 20 >> 2] <= HEAP32[$6 + 28 >> 2]) {
   $0 = HEAP32[$6 + 44 >> 2];
   $1 = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
   $0 = HEAP32[$6 + 44 >> 2];
   HEAP32[$6 + 16 >> 2] = $1 + (HEAP32[$6 + 40 >> 2] + Math_imul(HEAP32[$6 + 20 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) | 0);
   HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 40 >> 2];
   while (1) {
    if (HEAP32[$6 + 12 >> 2] <= HEAP32[$6 + 32 >> 2]) {
     $0 = HEAP32[$6 + 24 >> 2];
     $1 = HEAP32[$6 + 16 >> 2];
     HEAP32[$6 + 16 >> 2] = $1 + 1;
     HEAP8[$1 | 0] = $0;
     HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
}
function jswrap_io_shiftOutCallback($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 24 >> 2];
 HEAP32[$2 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 12 >> 2] < HEAP32[HEAP32[$2 + 20 >> 2] + 16 >> 2]) {
   HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 12 >> 2] - 1;
   while (1) {
    if (HEAP32[$2 + 16 >> 2] >= 0) {
     if (jshIsPinValid(HEAPU8[HEAP32[$2 + 20 >> 2] + HEAP32[$2 + 16 >> 2] | 0]) & 1) {
      jshPinSetValue(HEAPU8[HEAP32[$2 + 20 >> 2] + HEAP32[$2 + 16 >> 2] | 0], (HEAP32[$2 + 28 >> 2] & 1) != 0);
     }
     HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 28 >> 2] >> 1;
     HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] + -1;
     continue;
    }
    break;
   }
   if (jshIsPinValid(HEAPU8[HEAP32[$2 + 20 >> 2] + 8 | 0]) & 1) {
    jshPinSetValue(HEAPU8[HEAP32[$2 + 20 >> 2] + 8 | 0], HEAP8[HEAP32[$2 + 20 >> 2] + 9 | 0] & 1);
    jshPinSetValue(HEAPU8[HEAP32[$2 + 20 >> 2] + 8 | 0], (HEAPU8[HEAP32[$2 + 20 >> 2] + 9 | 0] ^ -1) & 1);
   }
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $2 + 32 | 0;
}
function jsiExecuteEvents() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 HEAP8[$0 + 31 | 0] = (jsvArrayIsEmpty(HEAP32[23781]) ^ -1) & 1;
 if (HEAP8[$0 + 31 | 0] & 1) {
  jsiSetBusy(1, 1);
 }
 while (1) {
  if ((jsvArrayIsEmpty(HEAP32[23781]) ^ -1) & 1) {
   HEAP32[$0 + 24 >> 2] = jsvSkipNameAndUnLock(jsvArrayPopFirst(HEAP32[23781]));
   HEAP32[$0 + 20 >> 2] = jsvObjectGetChild(HEAP32[$0 + 24 >> 2], 5959, 0);
   HEAP32[$0 + 16 >> 2] = jsvObjectGetChild(HEAP32[$0 + 24 >> 2], 5969, 0);
   HEAP32[$0 + 12 >> 2] = jsvObjectGetChild(HEAP32[$0 + 24 >> 2], 5964, 0);
   jsvUnLock(HEAP32[$0 + 24 >> 2]);
   jsiExecuteEventCallbackArgsArray(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2], HEAP32[$0 + 12 >> 2]);
   jsvUnLock(HEAP32[$0 + 12 >> 2]);
   jsvUnLock2(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2]);
   continue;
  }
  break;
 }
 if (HEAP8[$0 + 31 | 0] & 1) {
  jsiSetBusy(1, 0);
  label$5 : {
   if (!(jspIsInterrupted() & 1)) {
    $2 = HEAPU32[23798] < jshGetTimeFromMilliseconds(100) >>> 0 ? 0 : 1;
    $1 = i64toi32_i32$HIGH_BITS;
    if (0 > ($1 | 0) ? 1 : 0 >= ($1 | 0) ? $2 : 0) {
     break label$5;
    }
   }
   HEAP8[95196] = 1;
  }
 }
 global$0 = $0 + 32 | 0;
}
function jsvArrayBufferIteratorSetIntegerValue($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1 : {
  if (!HEAPU16[HEAP32[$2 + 28 >> 2] + 20 >> 1]) {
   break label$1;
  }
  HEAP32[$2 + 8 >> 2] = HEAPU16[HEAP32[$2 + 28 >> 2] + 20 >> 1] & 15;
  label$2 : {
   if (HEAPU16[HEAP32[$2 + 28 >> 2] + 20 >> 1] & 32) {
    jsvArrayBufferIteratorFloatToData($2 + 16 | 0, HEAP32[$2 + 8 >> 2], HEAPU16[HEAP32[$2 + 28 >> 2] + 20 >> 1], +HEAP32[$2 + 24 >> 2]);
    break label$2;
   }
   jsvArrayBufferIteratorIntToData($2 + 16 | 0, HEAP32[$2 + 8 >> 2], HEAPU16[HEAP32[$2 + 28 >> 2] + 20 >> 1], HEAP32[$2 + 24 >> 2]);
  }
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAPU32[$2 + 12 >> 2] < HEAPU32[$2 + 8 >> 2]) {
    jsvStringIteratorSetChar(HEAP32[$2 + 28 >> 2], HEAP8[HEAP32[$2 + 12 >> 2] + ($2 + 16 | 0) | 0]);
    if (HEAP32[$2 + 8 >> 2] != 1) {
     jsvStringIteratorNext(HEAP32[$2 + 28 >> 2]);
    }
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$2 + 8 >> 2] == 1) {
   break label$1;
  }
  HEAP8[HEAP32[$2 + 28 >> 2] + 36 | 0] = 1;
 }
 global$0 = $2 + 32 | 0;
}
function jswrap_object_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1 : {
  label$2 : {
   label$3 : {
    if (jsvIsObject(HEAP32[$1 + 24 >> 2]) & 1) {
     break label$3;
    }
    if (jsvIsArray(HEAP32[$1 + 24 >> 2]) & 1) {
     break label$3;
    }
    if (!(jsvIsFunction(HEAP32[$1 + 24 >> 2]) & 1)) {
     break label$2;
    }
   }
   HEAP32[$1 + 28 >> 2] = jsvLockAgain(HEAP32[$1 + 24 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 20 >> 2] = jswGetBasicObjectName(HEAP32[$1 + 24 >> 2]);
  $0 = $1;
  label$4 : {
   if (HEAP32[$1 + 20 >> 2]) {
    $2 = jspGetNamedVariable(HEAP32[$1 + 20 >> 2]);
    break label$4;
   }
   $2 = 0;
  }
  HEAP32[$0 + 16 >> 2] = $2;
  if (!HEAP32[$1 + 16 >> 2]) {
   HEAP32[$1 + 28 >> 2] = jsvNewWithFlags(5);
   break label$1;
  }
  $0 = $1 + 24 | 0;
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[$1 + 16 >> 2]);
  HEAP32[$1 + 8 >> 2] = jspeFunctionCall(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 16 >> 2], 0, 0, 1, $0);
  jsvUnLock2(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 12 >> 2]);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 8 >> 2];
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function _jswrap_drawImageLayerNextY($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 128 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 124 >> 2] + HEAP32[$0 + 128 >> 2];
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 132 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 120 >> 2] + HEAP32[$0 + 132 >> 2];
 if (HEAP8[HEAP32[$1 + 12 >> 2] + 33 | 0] & 1) {
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 128 >> 2] < 0) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 128 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 112 >> 2] + HEAP32[$0 + 128 >> 2];
  }
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 128 >> 2] >= HEAP32[HEAP32[$1 + 12 >> 2] + 112 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 128 >> 2] = HEAP32[$0 + 128 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 112 >> 2];
  }
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 132 >> 2] < 0) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 132 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 116 >> 2] + HEAP32[$0 + 132 >> 2];
  }
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 132 >> 2] >= HEAP32[HEAP32[$1 + 12 >> 2] + 116 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 132 >> 2] = HEAP32[$0 + 132 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 116 >> 2];
  }
 }
}
function _jswrap_espruino_FFT_setData($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 80 | 0;
 global$0 = $4;
 HEAP32[$4 + 76 >> 2] = $0;
 HEAP32[$4 + 72 >> 2] = $1;
 HEAP32[$4 + 68 >> 2] = $2;
 HEAP32[$4 + 64 >> 2] = $3;
 jsvIteratorNew($4 + 16 | 0, HEAP32[$4 + 76 >> 2], 1);
 HEAP32[$4 + 12 >> 2] = 0;
 while (1) {
  if (HEAPU32[$4 + 12 >> 2] < HEAPU32[$4 + 64 >> 2]) {
   $0 = jsvIteratorHasElement($4 + 16 | 0);
  } else {
   $0 = 0;
  }
  if ($0 & 1) {
   label$5 : {
    if (HEAP32[$4 + 68 >> 2]) {
     HEAPF64[$4 >> 3] = jswrap_math_sqrt(HEAPF64[HEAP32[$4 + 72 >> 2] + (HEAP32[$4 + 12 >> 2] << 3) >> 3] * HEAPF64[HEAP32[$4 + 72 >> 2] + (HEAP32[$4 + 12 >> 2] << 3) >> 3] + HEAPF64[HEAP32[$4 + 68 >> 2] + (HEAP32[$4 + 12 >> 2] << 3) >> 3] * HEAPF64[HEAP32[$4 + 68 >> 2] + (HEAP32[$4 + 12 >> 2] << 3) >> 3]);
     break label$5;
    }
    HEAPF64[$4 >> 3] = HEAPF64[HEAP32[$4 + 72 >> 2] + (HEAP32[$4 + 12 >> 2] << 3) >> 3];
   }
   $0 = $4 + 16 | 0;
   jsvUnLock(jsvIteratorSetValue($0, jsvNewFromFloat(HEAPF64[$4 >> 3])));
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
   jsvIteratorNext($0);
   continue;
  }
  break;
 }
 jsvIteratorFree($4 + 16 | 0);
 global$0 = $4 + 80 | 0;
}
function void_20tflite__reference_ops__Dequantize_unsigned_20char__28tflite__DequantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 48 | 0;
 global$0 = $5;
 HEAP32[$5 + 44 >> 2] = $0;
 HEAP32[$5 + 40 >> 2] = $1;
 HEAP32[$5 + 36 >> 2] = $2;
 HEAP32[$5 + 32 >> 2] = $3;
 HEAP32[$5 + 28 >> 2] = $4;
 HEAP32[$5 + 24 >> 2] = HEAP32[HEAP32[$5 + 44 >> 2] + 8 >> 2];
 HEAPF64[$5 + 16 >> 3] = HEAPF64[HEAP32[$5 + 44 >> 2] >> 3];
 HEAP32[$5 + 12 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 40 >> 2], HEAP32[$5 + 32 >> 2]);
 HEAP32[$5 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 8 >> 2] < HEAP32[$5 + 12 >> 2]) {
   HEAP32[$5 + 4 >> 2] = HEAPU8[HEAP32[$5 + 36 >> 2] + HEAP32[$5 + 8 >> 2] | 0];
   HEAPF32[$5 >> 2] = HEAPF64[$5 + 16 >> 3] * +(HEAP32[$5 + 4 >> 2] - HEAP32[$5 + 24 >> 2] | 0);
   HEAPF32[HEAP32[$5 + 28 >> 2] + (HEAP32[$5 + 8 >> 2] << 2) >> 2] = HEAPF32[$5 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 + 48 | 0;
}
function void_20tflite__reference_ops__Dequantize_signed_20char__28tflite__DequantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 48 | 0;
 global$0 = $5;
 HEAP32[$5 + 44 >> 2] = $0;
 HEAP32[$5 + 40 >> 2] = $1;
 HEAP32[$5 + 36 >> 2] = $2;
 HEAP32[$5 + 32 >> 2] = $3;
 HEAP32[$5 + 28 >> 2] = $4;
 HEAP32[$5 + 24 >> 2] = HEAP32[HEAP32[$5 + 44 >> 2] + 8 >> 2];
 HEAPF64[$5 + 16 >> 3] = HEAPF64[HEAP32[$5 + 44 >> 2] >> 3];
 HEAP32[$5 + 12 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 40 >> 2], HEAP32[$5 + 32 >> 2]);
 HEAP32[$5 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 8 >> 2] < HEAP32[$5 + 12 >> 2]) {
   HEAP32[$5 + 4 >> 2] = HEAP8[HEAP32[$5 + 36 >> 2] + HEAP32[$5 + 8 >> 2] | 0];
   HEAPF32[$5 >> 2] = HEAPF64[$5 + 16 >> 3] * +(HEAP32[$5 + 4 >> 2] - HEAP32[$5 + 24 >> 2] | 0);
   HEAPF32[HEAP32[$5 + 28 >> 2] + (HEAP32[$5 + 8 >> 2] << 2) >> 2] = HEAPF32[$5 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $5 + 48 | 0;
}
function jswrap_dataview_set($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 80 | 0;
 global$0 = $5;
 HEAP32[$5 + 76 >> 2] = $0;
 HEAP16[$5 + 74 >> 1] = $1;
 HEAP32[$5 + 68 >> 2] = $2;
 HEAP32[$5 + 64 >> 2] = $3;
 HEAP8[$5 + 63 | 0] = $4;
 HEAP32[$5 + 56 >> 2] = jsvObjectGetChild(HEAP32[$5 + 76 >> 2], 31170, 0);
 label$1 : {
  if (!(jsvIsArrayBuffer(HEAP32[$5 + 56 >> 2]) & 1)) {
   jsvUnLock(HEAP32[$5 + 56 >> 2]);
   break label$1;
  }
  HEAP32[$5 + 68 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$5 + 76 >> 2], 31177, 0)) + HEAP32[$5 + 68 >> 2];
  HEAP32[$5 + 52 >> 2] = HEAPU16[$5 + 74 >> 1] & 15;
  if (!(HEAP8[$5 + 63 | 0] & 1)) {
   HEAP16[$5 + 74 >> 1] = HEAPU16[$5 + 74 >> 1] | 256;
  }
  HEAP32[$5 + 48 >> 2] = jswrap_typedarray_constructor(HEAPU16[$5 + 74 >> 1], HEAP32[$5 + 56 >> 2], HEAP32[$5 + 68 >> 2], HEAP32[$5 + 52 >> 2]);
  jsvUnLock(HEAP32[$5 + 56 >> 2]);
  if (!HEAP32[$5 + 48 >> 2]) {
   break label$1;
  }
  $0 = $5 + 8 | 0;
  jsvArrayBufferIteratorNew($0, HEAP32[$5 + 48 >> 2], 0);
  jsvArrayBufferIteratorSetValue($0, HEAP32[$5 + 64 >> 2]);
  jsvArrayBufferIteratorFree($0);
  jsvUnLock(HEAP32[$5 + 48 >> 2]);
 }
 global$0 = $5 + 80 | 0;
}
function graphicsFillVectorChar($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 48 | 0;
 global$0 = $5;
 HEAP32[$5 + 40 >> 2] = $0;
 HEAP32[$5 + 36 >> 2] = $1;
 HEAP32[$5 + 32 >> 2] = $2;
 HEAP32[$5 + 28 >> 2] = $3;
 HEAP8[$5 + 27 | 0] = $4;
 HEAP32[$5 + 20 >> 2] = 0;
 HEAP32[$5 + 8 >> 2] = vfGetCharPtr(HEAP8[$5 + 27 | 0], $5 + 20 | 0, $5 + 16 | 0, $5 + 12 | 0);
 label$1 : {
  if (!HEAP32[$5 + 8 >> 2]) {
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 28 >> 2] / 2;
   break label$1;
  }
  HEAP32[$5 + 4 >> 2] = vfDrawCharPtr(HEAP32[$5 + 40 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2], HEAP32[$5 + 28 >> 2], HEAP32[$5 + 8 >> 2]);
  HEAP32[$5 >> 2] = 0;
  if (HEAP32[$5 + 20 >> 2]) {
   HEAP32[$5 >> 2] = vfDrawCharPtr(HEAP32[$5 + 40 >> 2], HEAP32[$5 + 36 >> 2] + ((Math_imul(HEAP32[$5 + 16 >> 2], HEAP32[$5 + 28 >> 2]) << 4) / 12 >> 4) | 0, HEAP32[$5 + 32 >> 2] + ((Math_imul(HEAP32[$5 + 12 >> 2], HEAP32[$5 + 28 >> 2]) << 4) / 12 >> 4) | 0, HEAP32[$5 + 28 >> 2], HEAP32[$5 + 20 >> 2]);
  }
  $0 = $5;
  if (HEAPU32[$5 >> 2] > HEAPU32[$5 + 4 >> 2]) {
   $1 = HEAP32[$5 >> 2];
  } else {
   $1 = HEAP32[$5 + 4 >> 2];
  }
  HEAP32[$0 + 44 >> 2] = $1;
 }
 global$0 = $5 + 48 | 0;
}
function jspGetNamedField($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP8[$3 + 19 | 0] = $2;
 HEAP32[$3 + 12 >> 2] = 0;
 if (jsvHasChildren(HEAP32[$3 + 24 >> 2]) & 1) {
  HEAP32[$3 + 12 >> 2] = jsvFindChildFromString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], 0);
 }
 if (!HEAP32[$3 + 12 >> 2]) {
  HEAP32[$3 + 12 >> 2] = jspGetNamedFieldInParents(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP8[$3 + 19 | 0] & 1);
  label$3 : {
   if (HEAP32[$3 + 12 >> 2]) {
    break label$3;
   }
   if (!(jsvIsFunction(HEAP32[$3 + 24 >> 2]) & 1)) {
    break label$3;
   }
   if (strcmp(HEAP32[$3 + 20 >> 2], 3674)) {
    break label$3;
   }
   HEAP32[$3 + 8 >> 2] = jsvNewWithFlags(5);
   HEAP32[$3 + 12 >> 2] = jsvAddNamedChild(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 8 >> 2], 3674);
   jsvUnLock(HEAP32[$3 + 8 >> 2]);
  }
 }
 label$4 : {
  if (HEAP8[$3 + 19 | 0] & 1) {
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
   break label$4;
  }
  HEAP32[$3 + 28 >> 2] = jsvSkipNameAndUnLock(HEAP32[$3 + 12 >> 2]);
 }
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function tflite__strided_slice__StartForAxis_28tflite__StridedSliceParams_20const__2c_20tflite__RuntimeShape_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP16[$3 + 18 >> 1] = HEAPU16[HEAP32[$3 + 28 >> 2] + 30 >> 1];
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 28 >> 2] + 2;
 HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 28 >> 2] + 22;
 HEAP32[$3 + 4 >> 2] = HEAP16[HEAP32[$3 + 12 >> 2] + (HEAP32[$3 + 20 >> 2] << 1) >> 1];
 if (HEAP16[$3 + 18 >> 1] & 1 << HEAP32[$3 + 20 >> 2]) {
  label$2 : {
   if (HEAP16[HEAP32[$3 + 8 >> 2] + (HEAP32[$3 + 20 >> 2] << 1) >> 1] > 0) {
    HEAP32[$3 + 4 >> 2] = -2147483648;
    break label$2;
   }
   HEAP32[$3 + 4 >> 2] = 2147483647;
  }
 }
 HEAP32[$3 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
 if (HEAP32[$3 + 4 >> 2] < 0) {
  HEAP32[$3 + 4 >> 2] = HEAP32[$3 >> 2] + HEAP32[$3 + 4 >> 2];
 }
 HEAP32[$3 + 4 >> 2] = tflite__strided_slice__Clamp_28int_2c_20int_2c_20int_29(HEAP32[$3 + 4 >> 2], 0, HEAP32[$3 >> 2] - 1 | 0);
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 4 >> 2];
}
function jsfLoadFromFlash_readcb($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 8 >> 2];
 label$1 : {
  if (HEAPU32[HEAP32[$1 + 4 >> 2] >> 2] >= HEAPU32[HEAP32[$1 + 4 >> 2] + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = -1;
   break label$1;
  }
  if (!(HEAPU32[HEAP32[$1 + 4 >> 2] + 140 >> 2] < HEAPU32[HEAP32[$1 + 4 >> 2] + 8 >> 2] ? HEAP32[HEAP32[$1 + 4 >> 2] + 8 >> 2] : 0)) {
   HEAP32[HEAP32[$1 + 4 >> 2] + 8 >> 2] = HEAP32[HEAP32[$1 + 4 >> 2] + 4 >> 2] - HEAP32[HEAP32[$1 + 4 >> 2] >> 2];
   if (HEAPU32[HEAP32[$1 + 4 >> 2] + 8 >> 2] > 128) {
    HEAP32[HEAP32[$1 + 4 >> 2] + 8 >> 2] = 128;
   }
   jshFlashRead(HEAP32[$1 + 4 >> 2] + 12 | 0, HEAP32[HEAP32[$1 + 4 >> 2] >> 2], HEAP32[HEAP32[$1 + 4 >> 2] + 8 >> 2]);
   HEAP32[HEAP32[$1 + 4 >> 2] + 140 >> 2] = 0;
  }
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = HEAP32[$2 + 140 >> 2];
  HEAP32[$2 + 140 >> 2] = $0 + 1;
  HEAP32[$1 + 12 >> 2] = HEAPU8[$0 + ($3 + 12 | 0) | 0];
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function tflite__ops__micro__round__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 $3 = $2 + 40 | 0;
 HEAP32[$2 + 76 >> 2] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 HEAP32[$2 + 68 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 76 >> 2], HEAP32[$2 + 72 >> 2], 0);
 HEAP32[$2 + 64 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 76 >> 2], HEAP32[$2 + 72 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3, HEAP32[$2 + 68 >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 68 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 8 | 0, HEAP32[$2 + 64 >> 2]);
 tflite__reference_ops__Round_28tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($2 + 40 | 0, $0, $2 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 64 >> 2]));
 $0 = $2 + 40 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($2 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $2 + 80 | 0;
 return 0;
}
function jshGetDeviceString($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP8[$1 + 11 | 0] = $0;
 label$1 : {
  label$2 : {
   $0 = HEAPU8[$1 + 11 | 0];
   if ($0 >>> 0 > 25) {
    break label$2;
   }
   label$3 : {
    switch ($0 - 1 | 0) {
    default:
     HEAP32[$1 + 12 >> 2] = 7286;
     break label$1;
    case 16:
     HEAP32[$1 + 12 >> 2] = 7291;
     break label$1;
    case 17:
     HEAP32[$1 + 12 >> 2] = 7301;
     break label$1;
    case 18:
     HEAP32[$1 + 12 >> 2] = 7311;
     break label$1;
    case 20:
     HEAP32[$1 + 12 >> 2] = 7317;
     break label$1;
    case 19:
     HEAP32[$1 + 12 >> 2] = 7321;
     break label$1;
    case 21:
     HEAP32[$1 + 12 >> 2] = 7330;
     break label$1;
    case 23:
     HEAP32[$1 + 12 >> 2] = 7338;
     break label$1;
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 22:
     break label$2;
    case 24:
     break label$3;
    }
   }
   HEAP32[$1 + 12 >> 2] = 7343;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 7348;
 }
 return HEAP32[$1 + 12 >> 2];
}
function tflite__ops__micro__ceil__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 $3 = $2 + 40 | 0;
 HEAP32[$2 + 76 >> 2] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 HEAP32[$2 + 68 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 76 >> 2], HEAP32[$2 + 72 >> 2], 0);
 HEAP32[$2 + 64 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 76 >> 2], HEAP32[$2 + 72 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3, HEAP32[$2 + 68 >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 68 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($2 + 8 | 0, HEAP32[$2 + 64 >> 2]);
 tflite__reference_ops__Ceil_28tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($2 + 40 | 0, $0, $2 + 8 | 0, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$2 + 64 >> 2]));
 $0 = $2 + 40 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($2 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $2 + 80 | 0;
 return 0;
}
function jspEvaluateVar($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 176 | 0;
 global$0 = $3;
 HEAP32[$3 + 172 >> 2] = $0;
 HEAP32[$3 + 168 >> 2] = $1;
 HEAP16[$3 + 166 >> 1] = $2;
 $0 = $3 + 8 | 0;
 HEAP32[$3 + 28 >> 2] = jslSetLex($3 + 32 | 0);
 jslInit(HEAP32[$3 + 172 >> 2]);
 HEAP16[$3 + 134 >> 1] = HEAPU16[$3 + 166 >> 1];
 HEAP32[$0 + 16 >> 2] = HEAP32[23778];
 $1 = HEAP32[23777];
 HEAP32[$0 + 8 >> 2] = HEAP32[23776];
 HEAP32[$0 + 12 >> 2] = $1;
 $1 = HEAP32[23775];
 HEAP32[$0 >> 2] = HEAP32[23774];
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[23778] = 1;
 if (HEAP32[$3 + 168 >> 2]) {
  HEAP32[23776] = 0;
  jspeiAddScope(HEAP32[$3 + 168 >> 2]);
 }
 HEAP32[$3 + 4 >> 2] = jspParse();
 if (HEAP32[$3 + 168 >> 2]) {
  jspeiClearScopes();
 }
 $0 = $3 + 8 | 0;
 jslKill();
 jslSetLex(HEAP32[$3 + 28 >> 2]);
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] | HEAP32[23778] & 6256;
 $1 = HEAP32[$0 + 4 >> 2];
 HEAP32[23774] = HEAP32[$0 >> 2];
 HEAP32[23775] = $1;
 HEAP32[23778] = HEAP32[$0 + 16 >> 2];
 $1 = HEAP32[$0 + 12 >> 2];
 HEAP32[23776] = HEAP32[$0 + 8 >> 2];
 HEAP32[23777] = $1;
 $0 = jsvSkipNameAndUnLock(HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 176 | 0;
 return $0;
}
function __lshrti3($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 label$1 : {
  label$2 : {
   if ($5 & 64) {
    $2 = $5 + -64 | 0;
    $1 = $2 & 31;
    if (32 <= ($2 & 63) >>> 0) {
     $2 = 0;
     $1 = $4 >>> $1;
    } else {
     $2 = $4 >>> $1;
     $1 = ((1 << $1) - 1 & $4) << 32 - $1 | $3 >>> $1;
    }
    $3 = 0;
    $4 = 0;
    break label$2;
   }
   if (!$5) {
    break label$1;
   }
   $7 = $4;
   $8 = $3;
   $9 = 64 - $5 | 0;
   $6 = $9 & 31;
   if (32 <= ($9 & 63) >>> 0) {
    $7 = $8 << $6;
    $9 = 0;
   } else {
    $7 = (1 << $6) - 1 & $8 >>> 32 - $6 | $7 << $6;
    $9 = $8 << $6;
   }
   $8 = $1;
   $6 = $5;
   $1 = $6 & 31;
   if (32 <= ($6 & 63) >>> 0) {
    $6 = 0;
    $1 = $2 >>> $1;
   } else {
    $6 = $2 >>> $1;
    $1 = ((1 << $1) - 1 & $2) << 32 - $1 | $8 >>> $1;
   }
   $1 = $9 | $1;
   $2 = $6 | $7;
   $6 = $3;
   $3 = $5 & 31;
   if (32 <= ($5 & 63) >>> 0) {
    $7 = 0;
    $3 = $4 >>> $3;
   } else {
    $7 = $4 >>> $3;
    $3 = ((1 << $3) - 1 & $4) << 32 - $3 | $6 >>> $3;
   }
   $4 = $7;
  }
 }
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $4;
}
function jsvStringTrimRight($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 $2 = $1 + 16 | 0;
 $3 = $1 + 40 | 0;
 HEAP32[$1 + 60 >> 2] = $0;
 HEAP32[$1 + 12 >> 2] = jsvNewFromEmptyString();
 jsvStringIteratorNew($3, HEAP32[$1 + 60 >> 2], 0);
 jsvStringIteratorNew($2, HEAP32[$1 + 12 >> 2], 0);
 HEAP32[$1 + 8 >> 2] = 0;
 while (1) {
  if (jsvStringIteratorHasChar($1 + 40 | 0) & 1) {
   HEAP8[$1 + 7 | 0] = jsvStringIteratorGetCharAndNext($1 + 40 | 0);
   label$3 : {
    if (HEAP8[$1 + 7 | 0] == 32) {
     HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
     break label$3;
    }
    label$5 : {
     if (HEAP8[$1 + 7 | 0] == 10) {
      HEAP32[$1 + 8 >> 2] = 0;
      break label$5;
     }
     while (1) {
      if (HEAP32[$1 + 8 >> 2] > 0) {
       jsvStringIteratorAppend($1 + 16 | 0, 32);
       HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + -1;
       continue;
      }
      break;
     }
    }
    jsvStringIteratorAppend($1 + 16 | 0, HEAP8[$1 + 7 | 0]);
   }
   continue;
  }
  break;
 }
 $0 = $1 + 16 | 0;
 jsvStringIteratorFree($1 + 40 | 0);
 jsvStringIteratorFree($0);
 global$0 = $1 - -64 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function int_20gemmlowp__SaturatingRoundingDoublingHighMul_int__28int_2c_20int_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 HEAP8[$2 + 39 | 0] = HEAP32[$2 + 44 >> 2] == HEAP32[$2 + 40 >> 2] ? HEAP32[$2 + 44 >> 2] == -2147483648 : 0;
 $0 = HEAP32[$2 + 44 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 28 >> 2] = $0 >> 31;
 $0 = HEAP32[$2 + 40 >> 2];
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $0 >> 31;
 HEAP32[$2 + 8 >> 2] = __wasm_i64_mul(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2]);
 HEAP32[$2 + 12 >> 2] = i64toi32_i32$HIGH_BITS;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = (($0 | 0) > 0 ? 1 : ($0 | 0) >= 0 ? HEAPU32[$2 + 8 >> 2] < 0 ? 0 : 1 : 0) ? 1073741824 : -1073741823;
 $0 = HEAP32[$2 + 4 >> 2];
 $3 = $0;
 $1 = $0 + HEAP32[$2 + 8 >> 2] | 0;
 $0 = HEAP32[$2 + 12 >> 2] + ($0 >> 31) | 0;
 HEAP32[$2 >> 2] = __wasm_i64_sdiv($1, $1 >>> 0 < $3 >>> 0 ? $0 + 1 | 0 : $0, -2147483648);
 global$0 = $2 + 48 | 0;
 if (HEAP8[$2 + 39 | 0] & 1) {
  $0 = 2147483647;
 } else {
  $0 = HEAP32[$2 >> 2];
 }
 return $0;
}
function jsvClearEmptyVarList() {
 var $0 = 0, $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[13770] = 1;
 HEAP16[27542] = 0;
 HEAP16[$1 + 14 >> 1] = 1;
 while (1) {
  if (HEAPU16[$1 + 14 >> 1] <= HEAPU32[13337]) {
   HEAP32[$1 + 8 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 14 >> 1]);
   label$3 : {
    if (!(HEAPU16[HEAP32[$1 + 8 >> 2] + 14 >> 1] & 63)) {
     $0 = HEAP32[$1 + 8 >> 2];
     HEAP8[$0 | 0] = 0;
     HEAP8[$0 + 1 | 0] = 0;
     HEAP8[$0 + 2 | 0] = 0;
     HEAP8[$0 + 3 | 0] = 0;
     HEAP8[$0 + 4 | 0] = 0;
     HEAP8[$0 + 5 | 0] = 0;
     HEAP8[$0 + 6 | 0] = 0;
     HEAP8[$0 + 7 | 0] = 0;
     HEAP8[$0 + 8 | 0] = 0;
     HEAP8[$0 + 9 | 0] = 0;
     HEAP8[$0 + 10 | 0] = 0;
     HEAP8[$0 + 11 | 0] = 0;
     HEAP8[$0 + 12 | 0] = 0;
     HEAP8[$0 + 13 | 0] = 0;
     HEAP8[$0 + 14 | 0] = 0;
     HEAP8[$0 + 15 | 0] = 0;
     break label$3;
    }
    if (jsvIsFlatString(HEAP32[$1 + 8 >> 2]) & 1) {
     HEAP16[$1 + 14 >> 1] = HEAPU16[$1 + 14 >> 1] + jsvGetFlatStringBlocks(HEAP32[$1 + 8 >> 2]);
    }
   }
   HEAP16[$1 + 14 >> 1] = HEAPU16[$1 + 14 >> 1] + 1;
   continue;
  }
  break;
 }
 HEAP32[13770] = 0;
 global$0 = $1 + 16 | 0;
}
function tflite__GreedyMemoryPlanner__GetMaximumMemorySize_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 $0 = HEAP32[$1 + 24 >> 2];
 tflite__GreedyMemoryPlanner__CalculateOffsetsIfNeeded_28_29($0);
 label$1 : {
  if (!HEAP32[$0 + 8 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$1 + 16 >> 2] = 0;
  while (1) {
   label$4 : {
    if (!HEAP32[$1 + 20 >> 2]) {
     break label$4;
    }
    HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + Math_imul(HEAP32[HEAP32[$1 + 20 >> 2] + 4 >> 2], 12);
    HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 20 >> 2] >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
    if (HEAP32[$1 + 8 >> 2] > HEAP32[$1 + 16 >> 2]) {
     HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 8 >> 2];
    }
    if (HEAP32[HEAP32[$1 + 20 >> 2] + 8 >> 2] == -1) {
     break label$4;
    }
    HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[HEAP32[$1 + 20 >> 2] + 8 >> 2], 12);
    continue;
   }
   break;
  }
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 16 >> 2];
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function std____2____compressed_pair_TfLiteResizeNearestNeighborParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteResizeNearestNeighborParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteResizeNearestNeighborParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_TfLiteResizeNearestNeighborParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteResizeNearestNeighborParams___2c_20void__28TfLiteResizeNearestNeighborParams___29($0, jshFlashGetMemMapAddress(HEAP32[$3 + 8 >> 2]));
 std____2____compressed_pair_elem_TfLiteResizeNearestNeighborParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteResizeNearestNeighborParams___2c_20void__28TfLiteResizeNearestNeighborParams___29($0 + 4 | 0, jshFlashGetMemMapAddress(HEAP32[$3 + 4 >> 2]));
 global$0 = $3 + 16 | 0;
}
function jsiConsolePrintStringVarUntilEOL($0, $1) {
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 HEAP32[$2 + 36 >> 2] = -1;
 HEAP8[$2 + 35 | 0] = 1;
 HEAP32[$2 + 28 >> 2] = 0;
 jsvStringIteratorNew($2 + 8 | 0, HEAP32[$2 + 44 >> 2], HEAP32[$2 + 40 >> 2]);
 while (1) {
  label$2 : {
   if (jsvStringIteratorHasChar($2 + 8 | 0) & 1) {
    $0 = HEAPU32[$2 + 28 >> 2] < HEAPU32[$2 + 36 >> 2];
   } else {
    $0 = 0;
   }
   if (!$0) {
    break label$2;
   }
   HEAP8[$2 + 7 | 0] = jsvStringIteratorGetCharAndNext($2 + 8 | 0);
   if (HEAP8[$2 + 7 | 0] == 10) {
    break label$2;
   }
   jsiConsolePrintChar(HEAP8[$2 + 7 | 0]);
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 jsvStringIteratorFree($2 + 8 | 0);
 if (HEAP8[$2 + 35 | 0] & 1) {
  jsiConsolePrintChar(32);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 28 >> 2] + 1;
  while (1) {
   label$7 : {
    $0 = HEAP32[$2 + 28 >> 2];
    HEAP32[$2 + 28 >> 2] = $0 + -1;
    if (!$0) {
     break label$7;
    }
    jsiConsolePrintChar(8);
    continue;
   }
   break;
  }
 }
 global$0 = $2 + 48 | 0;
}
function tflite__ops__micro__strided_slice__StridedSliceContext__StridedSliceContext_28TfLiteContext__2c_20TfLiteNode__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] + 20 >> 2];
 HEAP32[$0 + 4 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
 HEAP32[$0 + 8 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1);
 HEAP32[$0 + 12 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 2);
 HEAP32[$0 + 16 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 3);
 HEAP32[$0 + 20 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 HEAP32[$0 + 24 >> 2] = tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$0 + 4 >> 2]);
 global$0 = $3 + 16 | 0;
}
function tflite__GreedyMemoryPlanner__GreedyMemoryPlanner_28unsigned_20char__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $1 = global$0 - 16 | 0;
 $0 = HEAP32[$3 + 28 >> 2];
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = 48476;
 HEAP32[$0 >> 2] = 48508;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP8[$0 + 36 | 0] = 1;
 HEAP32[$3 + 16 >> 2] = 36;
 HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 20 >> 2] / 36;
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 24 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + Math_imul(HEAP32[$0 + 4 >> 2], 12);
 HEAP32[$0 + 16 >> 2] = HEAP32[$3 + 12 >> 2];
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + (HEAP32[$0 + 4 >> 2] << 2);
 HEAP32[$0 + 20 >> 2] = HEAP32[$3 + 12 >> 2];
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + (HEAP32[$0 + 4 >> 2] << 2);
 HEAP32[$0 + 24 >> 2] = HEAP32[$3 + 12 >> 2];
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + Math_imul(HEAP32[$0 + 4 >> 2], 12);
 HEAP32[$0 + 32 >> 2] = HEAP32[$3 + 12 >> 2];
 global$0 = $3 + 32 | 0;
}
function jswrap_espruino_getErrorFlagArray($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 11 | 0] = $0;
 HEAP32[$1 + 4 >> 2] = jsvNewWithFlags(3);
 label$1 : {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  if (HEAP8[$1 + 11 | 0] & 1) {
   jsvArrayPushAndUnLock(HEAP32[$1 + 4 >> 2], jsvNewFromString(31953));
  }
  if (HEAPU8[$1 + 11 | 0] & 2) {
   jsvArrayPushAndUnLock(HEAP32[$1 + 4 >> 2], jsvNewFromString(31963));
  }
  if (HEAPU8[$1 + 11 | 0] & 4) {
   jsvArrayPushAndUnLock(HEAP32[$1 + 4 >> 2], jsvNewFromString(31975));
  }
  if (HEAPU8[$1 + 11 | 0] & 8) {
   jsvArrayPushAndUnLock(HEAP32[$1 + 4 >> 2], jsvNewFromString(31984));
  }
  if (HEAPU8[$1 + 11 | 0] & 16) {
   jsvArrayPushAndUnLock(HEAP32[$1 + 4 >> 2], jsvNewFromString(31995));
  }
  if (HEAPU8[$1 + 11 | 0] & 32) {
   jsvArrayPushAndUnLock(HEAP32[$1 + 4 >> 2], jsvNewFromString(32002));
  }
  if (HEAPU8[$1 + 11 | 0] & 64) {
   jsvArrayPushAndUnLock(HEAP32[$1 + 4 >> 2], jsvNewFromString(32014));
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsfGetAllocatedSpace($0, $1) {
 var $2 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 HEAP32[$2 + 60 >> 2] = $0;
 HEAP8[$2 + 59 | 0] = 1;
 HEAP32[$2 + 52 >> 2] = $1;
 HEAP32[$2 + 48 >> 2] = 0;
 if (HEAP32[$2 + 52 >> 2]) {
  HEAP32[HEAP32[$2 + 52 >> 2] >> 2] = 0;
 }
 $0 = $2 + 16 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 if (jsfGetFileHeader(HEAP32[$2 + 60 >> 2], $0, 0) & 1) {
  while (1) {
   HEAP32[$2 + 12 >> 2] = jsfAlignAddress(jsfGetFileSize($2 + 16 | 0)) + 32;
   label$4 : {
    if (HEAP32[$2 + 20 >> 2]) {
     HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 48 >> 2];
     break label$4;
    }
    if (HEAP32[$2 + 52 >> 2]) {
     $0 = HEAP32[$2 + 52 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$2 + 12 >> 2] + HEAP32[$0 >> 2];
    }
   }
   if (jsfGetNextFileHeader($2 + 60 | 0, $2 + 16 | 0, (HEAP8[$2 + 59 | 0] & 1 ? 1 : 0) | 2) & 1) {
    continue;
   }
   break;
  }
 }
 global$0 = $2 - -64 | 0;
 return HEAP32[$2 + 48 >> 2];
}
function i2c_start($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP8[HEAP32[$1 + 12 >> 2] + 2 | 0] & 1) {
  jshPinSetValue(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0], 1);
  dly(HEAP32[$1 + 12 >> 2]);
  jshPinSetValue(HEAPU8[HEAP32[$1 + 12 >> 2]], 1);
  HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
  while (1) {
   if (jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2]]) & 1) {
    $0 = 0;
   } else {
    $0 = HEAP32[$1 + 8 >> 2];
   }
   if ($0) {
    HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + -1;
    continue;
   }
   break;
  }
  if (!(HEAP32[$1 + 8 >> 2] | !HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2])) {
   err(7436);
  }
  dly(HEAP32[$1 + 12 >> 2]);
 }
 label$7 : {
  if (!HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2]) {
   break label$7;
  }
  if (jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]) & 1) {
   break label$7;
  }
  err(7452);
 }
 jshPinSetValue(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0], 0);
 dly(HEAP32[$1 + 12 >> 2]);
 jshPinSetValue(HEAPU8[HEAP32[$1 + 12 >> 2]], 0);
 dly(HEAP32[$1 + 12 >> 2]);
 HEAP8[HEAP32[$1 + 12 >> 2] + 2 | 0] = 1;
 global$0 = $1 + 16 | 0;
}
function tflite__ops__micro__reshape__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 HEAP32[$2 + 12 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2]);
 label$1 : {
  if (tflite__ops__micro__reshape__ReshapeOutput_28TfLiteContext__2c_20TfLiteNode__29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2])) {
   HEAP32[$2 + 28 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 8 >> 2] = 0;
  while (1) {
   if (HEAPU32[$2 + 8 >> 2] < HEAPU32[HEAP32[$2 + 16 >> 2] + 24 >> 2]) {
    HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] + HEAP32[$2 + 8 >> 2] | 0] = HEAPU8[HEAP32[HEAP32[$2 + 16 >> 2] + 4 >> 2] + HEAP32[$2 + 8 >> 2] | 0];
    HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function jswrap_math_minmax($0, $1) {
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP8[$2 + 43 | 0] = $1 & 1;
 HEAPF64[$2 + 32 >> 3] = HEAPU8[$2 + 43 | 0] ? Math_fround(-infinity) : Math_fround(infinity);
 jsvObjectIteratorNew($2 + 24 | 0, HEAP32[$2 + 44 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue($2 + 24 | 0) & 1) {
   HEAPF64[$2 + 16 >> 3] = jsvGetFloatAndUnLock(jsvObjectIteratorGetValue($2 + 24 | 0));
   label$3 : {
    label$4 : {
     if ((HEAPF64[$2 + 16 >> 3] > HEAPF64[$2 + 32 >> 3] ? HEAP8[$2 + 43 | 0] & 1 : 0) | (HEAPF64[$2 + 16 >> 3] < HEAPF64[$2 + 32 >> 3] ? !(HEAP8[$2 + 43 | 0] & 1) : 0)) {
      break label$4;
     }
     $0 = __DOUBLE_BITS(HEAPF64[$2 + 16 >> 3]);
     $1 = i64toi32_i32$HIGH_BITS & 2147483647;
     if (($1 | 0) == 2146435072 & $0 >>> 0 > 0 | $1 >>> 0 > 2146435072) {
      break label$4;
     }
     break label$3;
    }
    HEAPF64[$2 + 32 >> 3] = HEAPF64[$2 + 16 >> 3];
   }
   jsvObjectIteratorNext($2 + 24 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree($2 + 24 | 0);
 global$0 = $2 + 48 | 0;
 return HEAPF64[$2 + 32 >> 3];
}
function jswrap_string_substring($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 $0 = $3;
 $2 = jsvIsUndefined(HEAP32[$3 + 16 >> 2]) & 1;
 $1 = 2147483647;
 label$1 : {
  if ($2) {
   break label$1;
  }
  $1 = jsvGetInteger(HEAP32[$3 + 16 >> 2]);
 }
 HEAP32[$0 + 8 >> 2] = $1;
 if (HEAP32[$3 + 20 >> 2] < 0) {
  HEAP32[$3 + 20 >> 2] = 0;
 }
 if (HEAP32[$3 + 8 >> 2] < 0) {
  HEAP32[$3 + 8 >> 2] = 0;
 }
 if (HEAP32[$3 + 8 >> 2] < HEAP32[$3 + 20 >> 2]) {
  HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 20 >> 2];
  HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 4 >> 2];
 }
 HEAP32[$3 + 12 >> 2] = jsvNewFromEmptyString();
 label$5 : {
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$5;
  }
  jsvAppendStringVar(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 8 >> 2] - HEAP32[$3 + 20 >> 2] | 0);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function std____2__unique_ptr_TfLiteBidirectionalSequenceRNNParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteBidirectionalSequenceRNNParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 8 >> 2];
 $3 = TfLiteBidirectionalSequenceRNNParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteBidirectionalSequenceRNNParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($2, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteConvParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2);
 global$0 = $2 + 16 | 0;
}
function graphicsToDeviceCoordinates16x($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 16) {
  HEAP32[$3 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
  HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
  HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = HEAP32[$3 >> 2];
 }
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 32) {
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - 1 << 4) - HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
 }
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 64) {
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = ((HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) - 1 << 4) - HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
 }
}
function jspeFunctionArguments($0) {
 var $1 = 0;
 $1 = global$0 - 96 | 0;
 global$0 = $1;
 HEAP32[$1 + 88 >> 2] = $0;
 label$1 : {
  if (!(jslMatch(40) & 1)) {
   HEAP8[$1 + 95 | 0] = 0;
   break label$1;
  }
  while (1) {
   if (HEAP16[HEAP32[13768] + 2 >> 1] != 41) {
    if (HEAP32[$1 + 88 >> 2]) {
     HEAP8[$1 + 16 | 0] = 255;
     $0 = $1 + 16 | 0;
     strcpy($0 + 1 | 0, jslGetTokenValueAsString());
     HEAP32[$1 + 12 >> 2] = jsvAddNamedChild(HEAP32[$1 + 88 >> 2], 0, $0);
     if (!HEAP32[$1 + 12 >> 2]) {
      jspSetError();
      HEAP8[$1 + 95 | 0] = 0;
      break label$1;
     }
     jsvMakeFunctionParameter(HEAP32[$1 + 12 >> 2]);
     jsvUnLock(HEAP32[$1 + 12 >> 2]);
    }
    if (!(jslMatch(128) & 1)) {
     HEAP8[$1 + 95 | 0] = 0;
     break label$1;
    }
    if (HEAP16[HEAP32[13768] + 2 >> 1] != 41) {
     if (!(jslMatch(44) & 1)) {
      HEAP8[$1 + 95 | 0] = 0;
      break label$1;
     }
    }
    continue;
   }
   break;
  }
  if (!(jslMatch(41) & 1)) {
   HEAP8[$1 + 95 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 95 | 0] = 1;
 }
 global$0 = $1 + 96 | 0;
 return HEAP8[$1 + 95 | 0] & 1;
}
function jswrap_graphics_setPixel($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 96 | 0;
 global$0 = $4;
 HEAP32[$4 + 88 >> 2] = $0;
 HEAP32[$4 + 84 >> 2] = $1;
 HEAP32[$4 + 80 >> 2] = $2;
 HEAP32[$4 + 76 >> 2] = $3;
 label$1 : {
  if (!(graphicsGetFromVar($4 + 8 | 0, HEAP32[$4 + 88 >> 2]) & 1)) {
   HEAP32[$4 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 4 >> 2] = HEAPU8[$4 + 25 | 0] | HEAPU8[$4 + 26 | 0] << 8 | (HEAPU8[$4 + 27 | 0] << 16 | HEAPU8[$4 + 28 | 0] << 24);
  if (!(jsvIsUndefined(HEAP32[$4 + 76 >> 2]) & 1)) {
   HEAP32[$4 + 4 >> 2] = jswrap_graphics_toColor(HEAP32[$4 + 88 >> 2], HEAP32[$4 + 76 >> 2], 0, 0);
  }
  $0 = $4 + 8 | 0;
  graphicsSetPixel($0, HEAP32[$4 + 84 >> 2], HEAP32[$4 + 80 >> 2], HEAP32[$4 + 4 >> 2]);
  $1 = HEAP32[$4 + 84 >> 2];
  HEAP8[$4 + 35 | 0] = $1;
  HEAP8[$4 + 36 | 0] = $1 >>> 8;
  $1 = HEAP32[$4 + 80 >> 2];
  HEAP8[$4 + 37 | 0] = $1;
  HEAP8[$4 + 38 | 0] = $1 >>> 8;
  graphicsSetVar($0);
  HEAP32[$4 + 92 >> 2] = jsvLockAgain(HEAP32[$4 + 88 >> 2]);
 }
 global$0 = $4 + 96 | 0;
 return HEAP32[$4 + 92 >> 2];
}
function jsspiFastSoftwareFunc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 16 >> 2];
 HEAP32[$4 + 8 >> 2] = 0;
 while (1) {
  if (HEAPU32[$4 + 8 >> 2] < HEAPU32[$4 + 20 >> 2]) {
   HEAP32[$4 + 4 >> 2] = HEAPU8[HEAP32[$4 + 28 >> 2] + HEAP32[$4 + 8 >> 2] | 0];
   $0 = HEAP32[$4 + 12 >> 2];
   HEAP32[$4 >> 2] = (HEAPU8[$0 + 10 | 0] | HEAPU8[$0 + 11 | 0] << 8 | (HEAPU8[$0 + 12 | 0] << 16 | HEAPU8[$0 + 13 | 0] << 24)) - 1;
   while (1) {
    if (HEAP32[$4 >> 2] >= 0) {
     jshPinSetValue(HEAPU8[HEAP32[$4 + 12 >> 2] + 7 | 0], (HEAP32[$4 + 4 >> 2] >> HEAP32[$4 >> 2] & 1) != 0);
     jshPinSetValue(HEAPU8[HEAP32[$4 + 12 >> 2] + 5 | 0], 1);
     jshPinSetValue(HEAPU8[HEAP32[$4 + 12 >> 2] + 5 | 0], 0);
     HEAP32[$4 >> 2] = HEAP32[$4 >> 2] + -1;
     continue;
    }
    break;
   }
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $4 + 32 | 0;
}
function graphicsToDeviceCoordinates($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 16) {
  HEAP32[$3 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
  HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
  HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = HEAP32[$3 >> 2];
 }
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 32) {
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - (HEAP32[HEAP32[$3 + 8 >> 2] >> 2] + 1 | 0);
 }
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 64) {
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) - (HEAP32[HEAP32[$3 + 4 >> 2] >> 2] + 1 | 0);
 }
}
function jswrap_banglejs_project($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 HEAP32[$1 + 60 >> 2] = $0;
 HEAPF64[$1 + 48 >> 3] = .017453292519943295;
 HEAPF64[$1 + 40 >> 3] = 85.0511287798;
 HEAPF64[$1 + 32 >> 3] = 6378137;
 HEAPF64[$1 + 24 >> 3] = jsvGetFloatAndUnLock(jsvObjectGetChild(HEAP32[$1 + 60 >> 2], 28979, 0));
 HEAPF64[$1 + 16 >> 3] = jsvGetFloatAndUnLock(jsvObjectGetChild(HEAP32[$1 + 60 >> 2], 28983, 0));
 if (HEAPF64[$1 + 24 >> 3] > 85.0511287798) {
  HEAPF64[$1 + 24 >> 3] = 85.0511287798;
 }
 if (HEAPF64[$1 + 24 >> 3] < -85.0511287798) {
  HEAPF64[$1 + 24 >> 3] = -85.0511287798;
 }
 HEAPF64[$1 + 8 >> 3] = sin(HEAPF64[$1 + 24 >> 3] * .017453292519943295);
 HEAP32[$1 + 4 >> 2] = jsvNewWithFlags(5);
 if (HEAP32[$1 + 4 >> 2]) {
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 4 >> 2], 28425, jsvNewFromFloat(6378137 * HEAPF64[$1 + 16 >> 3] * .017453292519943295));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 4 >> 2], 28427, jsvNewFromFloat(6378137 * log((1 + HEAPF64[$1 + 8 >> 3]) / (1 - HEAPF64[$1 + 8 >> 3])) / 2));
 }
 global$0 = $1 - -64 | 0;
 return HEAP32[$1 + 4 >> 2];
}
function _jswrap_object_keys_or_property_names_iterator($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 label$1 : {
  if (!HEAP32[$3 + 28 >> 2]) {
   break label$1;
  }
  HEAP8[$3 + 15 | 0] = HEAPU8[HEAP32[$3 + 28 >> 2] + 8 | 0];
  HEAP32[$3 + 16 >> 2] = 0;
  while (1) {
   if (HEAPU32[$3 + 16 >> 2] >= HEAPU8[$3 + 15 | 0]) {
    break label$1;
   }
   $0 = HEAP32[$3 + 28 >> 2];
   $0 = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) + (HEAP32[$3 + 16 >> 2] << 3) | 0;
   HEAP16[$3 + 12 >> 1] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
   $0 = HEAP32[$3 + 28 >> 2];
   HEAP32[$3 + 8 >> 2] = jsvNewFromString(HEAPU16[$3 + 12 >> 1] + (HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) | 0);
   FUNCTION_TABLE[HEAP32[$3 + 24 >> 2]](HEAP32[$3 + 20 >> 2], HEAP32[$3 + 8 >> 2]);
   jsvUnLock(HEAP32[$3 + 8 >> 2]);
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
   continue;
  }
 }
 global$0 = $3 + 32 | 0;
}
function jswrap_object_hasOwnProperty($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 HEAP32[$2 + 76 >> 2] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 HEAP32[$2 + 68 >> 2] = jsvAsArrayIndex(HEAP32[$2 + 72 >> 2]);
 HEAP8[$2 + 67 | 0] = 0;
 if (jsvHasChildren(HEAP32[$2 + 76 >> 2]) & 1) {
  HEAP32[$2 + 60 >> 2] = jsvFindChildFromVar(HEAP32[$2 + 76 >> 2], HEAP32[$2 + 68 >> 2], 0);
  if (HEAP32[$2 + 60 >> 2]) {
   HEAP8[$2 + 67 | 0] = 1;
   jsvUnLock(HEAP32[$2 + 60 >> 2]);
  }
 }
 label$3 : {
  if (HEAP8[$2 + 67 | 0] & 1) {
   break label$3;
  }
  if (jsvIsObject(HEAP32[$2 + 76 >> 2]) & 1) {
   break label$3;
  }
  HEAP32[$2 + 56 >> 2] = jswGetSymbolListForObject(HEAP32[$2 + 76 >> 2]);
  if (HEAP32[$2 + 56 >> 2]) {
   $0 = $2 + 16 | 0;
   jsvGetString(HEAP32[$2 + 68 >> 2], $0, 32);
   HEAP32[$2 + 12 >> 2] = jswBinarySearch(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 76 >> 2], $0);
   if (HEAP32[$2 + 12 >> 2]) {
    HEAP8[$2 + 67 | 0] = 1;
   }
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
  }
 }
 jsvUnLock(HEAP32[$2 + 68 >> 2]);
 global$0 = $2 + 80 | 0;
 return HEAP8[$2 + 67 | 0] & 1;
}
function jswrap_heatshrink_compress($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 96 | 0;
 global$0 = $1;
 HEAP32[$1 + 88 >> 2] = $0;
 label$1 : {
  if (!(jsvIsIterable(HEAP32[$1 + 88 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 88 >> 2];
   jsExceptionHere(3, 37821, $1);
   HEAP32[$1 + 92 >> 2] = 0;
   break label$1;
  }
  $0 = $1 + 40 | 0;
  jsvIteratorNew($0, HEAP32[$1 + 88 >> 2], 1);
  HEAP32[$1 + 12 >> 2] = heatshrink_encode_cb(545, $0, 0, 0);
  jsvIteratorFree($0);
  HEAP32[$1 + 8 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 12 >> 2], 0);
  if (!HEAP32[$1 + 8 >> 2]) {
   jsError(37858, 0);
   HEAP32[$1 + 92 >> 2] = 0;
   break label$1;
  }
  $0 = $1 + 16 | 0;
  $2 = $1 + 40 | 0;
  jsvIteratorNew($2, HEAP32[$1 + 88 >> 2], 1);
  jsvStringIteratorNew($0, HEAP32[$1 + 8 >> 2], 0);
  heatshrink_encode_cb(545, $2, 546, $0);
  jsvStringIteratorFree($0);
  jsvIteratorFree($2);
  HEAP32[$1 + 4 >> 2] = jsvNewArrayBufferFromString(HEAP32[$1 + 8 >> 2], 0);
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
  HEAP32[$1 + 92 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 global$0 = $1 + 96 | 0;
 return HEAP32[$1 + 92 >> 2];
}
function nomatchfound($0, $1) {
 var $2 = 0;
 $2 = global$0 - 128 | 0;
 global$0 = $2;
 HEAP32[$2 + 120 >> 2] = $0;
 label$1 : {
  if (!(jspCheckStackPosition() & 1)) {
   HEAP32[$2 + 124 >> 2] = 0;
   break label$1;
  }
  while (1) {
   if (HEAP8[HEAP32[$2 + 120 >> 2]] ? HEAP8[HEAP32[$2 + 120 >> 2]] != 124 : 0) {
    if (HEAP8[HEAP32[$2 + 120 >> 2]] == 92) {
     HEAP32[$2 + 120 >> 2] = HEAP32[$2 + 120 >> 2] + 1;
     if (!HEAPU8[HEAP32[$2 + 120 >> 2]]) {
      HEAP32[$2 + 124 >> 2] = 0;
      break label$1;
     }
    }
    HEAP32[$2 + 120 >> 2] = HEAP32[$2 + 120 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP8[HEAP32[$2 + 120 >> 2]] != 124) {
   HEAP32[$2 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 120 >> 2] = HEAP32[$2 + 120 >> 2] + 1;
  jsvStringIteratorNew($2 + 96 | 0, HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2]);
  $0 = HEAP32[$2 + 120 >> 2];
  memcpy($2 + 4 | 0, $1, 88);
  HEAP32[$2 + 92 >> 2] = matchhere($0, $2 + 96 | 0, $2 + 4 | 0);
  jsvStringIteratorFree($2 + 96 | 0);
  HEAP32[$2 + 124 >> 2] = HEAP32[$2 + 92 >> 2];
 }
 global$0 = $2 + 128 | 0;
 return HEAP32[$2 + 124 >> 2];
}
function tflite__GreedyMemoryPlanner__AddBuffer_28tflite__ErrorReporter__2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = global$0 - 32 | 0;
 global$0 = $5;
 HEAP32[$5 + 24 >> 2] = $0;
 HEAP32[$5 + 20 >> 2] = $1;
 HEAP32[$5 + 16 >> 2] = $2;
 HEAP32[$5 + 12 >> 2] = $3;
 HEAP32[$5 + 8 >> 2] = $4;
 $0 = HEAP32[$5 + 24 >> 2];
 label$1 : {
  if (HEAP32[$0 + 8 >> 2] >= HEAP32[$0 + 4 >> 2]) {
   $1 = HEAP32[$5 + 20 >> 2];
   HEAP32[$5 >> 2] = HEAP32[$0 + 4 >> 2];
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($1, 48532, $5);
   HEAP32[$5 + 28 >> 2] = 1;
   break label$1;
  }
  HEAP32[$5 + 4 >> 2] = HEAP32[$0 + 12 >> 2] + Math_imul(HEAP32[$0 + 8 >> 2], 12);
  HEAP32[HEAP32[$5 + 4 >> 2] >> 2] = HEAP32[$5 + 16 >> 2];
  HEAP32[HEAP32[$5 + 4 >> 2] + 4 >> 2] = HEAP32[$5 + 12 >> 2];
  HEAP32[HEAP32[$5 + 4 >> 2] + 8 >> 2] = HEAP32[$5 + 8 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
  HEAP8[$0 + 36 | 0] = 1;
  HEAP32[$5 + 28 >> 2] = 0;
 }
 global$0 = $5 + 32 | 0;
 return HEAP32[$5 + 28 >> 2];
}
function jswrap_heatshrink_decompress($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 96 | 0;
 global$0 = $1;
 HEAP32[$1 + 88 >> 2] = $0;
 label$1 : {
  if (!(jsvIsIterable(HEAP32[$1 + 88 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 88 >> 2];
   jsExceptionHere(3, 37821, $1);
   HEAP32[$1 + 92 >> 2] = 0;
   break label$1;
  }
  $0 = $1 + 40 | 0;
  jsvIteratorNew($0, HEAP32[$1 + 88 >> 2], 1);
  HEAP32[$1 + 12 >> 2] = heatshrink_decode(545, $0, 0);
  jsvIteratorFree($0);
  HEAP32[$1 + 8 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 12 >> 2], 0);
  if (!HEAP32[$1 + 8 >> 2]) {
   jsError(37858, 0);
   HEAP32[$1 + 92 >> 2] = 0;
   break label$1;
  }
  $0 = $1 + 16 | 0;
  $2 = $1 + 40 | 0;
  jsvIteratorNew($2, HEAP32[$1 + 88 >> 2], 1);
  jsvStringIteratorNew($0, HEAP32[$1 + 8 >> 2], 0);
  heatshrink_decode_cb(545, $2, 546, $0);
  jsvStringIteratorFree($0);
  jsvIteratorFree($2);
  HEAP32[$1 + 4 >> 2] = jsvNewArrayBufferFromString(HEAP32[$1 + 8 >> 2], 0);
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
  HEAP32[$1 + 92 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 global$0 = $1 + 96 | 0;
 return HEAP32[$1 + 92 >> 2];
}
function jswrap_array_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1 : {
  if ((jsvGetArrayLength(HEAP32[$1 + 24 >> 2]) | 0) == 1) {
   HEAP32[$1 + 20 >> 2] = jsvSkipNameAndUnLock(jsvGetArrayItem(HEAP32[$1 + 24 >> 2], 0));
   if (jsvIsNumeric(HEAP32[$1 + 20 >> 2]) & 1) {
    HEAPF64[$1 + 8 >> 3] = jsvGetFloat(HEAP32[$1 + 20 >> 2]);
    HEAP32[$1 + 4 >> 2] = jsvGetInteger(HEAP32[$1 + 20 >> 2]);
    jsvUnLock(HEAP32[$1 + 20 >> 2]);
    if (!(HEAP32[$1 + 4 >> 2] >= 0 ? HEAPF64[$1 + 8 >> 3] == +HEAP32[$1 + 4 >> 2] : 0)) {
     jsExceptionHere(1, 30475, 0);
     HEAP32[$1 + 28 >> 2] = 0;
     break label$1;
    }
    HEAP32[$1 >> 2] = jsvNewWithFlags(3);
    if (!HEAP32[$1 >> 2]) {
     HEAP32[$1 + 28 >> 2] = 0;
     break label$1;
    }
    jsvSetArrayLength(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2]);
    HEAP32[$1 + 28 >> 2] = HEAP32[$1 >> 2];
    break label$1;
   }
   jsvUnLock(HEAP32[$1 + 20 >> 2]);
  }
  HEAP32[$1 + 28 >> 2] = jsvLockAgain(HEAP32[$1 + 24 >> 2]);
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function jsvGetTypeOf($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (jsvIsUndefined(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 2529;
   break label$1;
  }
  label$3 : {
   label$4 : {
    if (jsvIsNull(HEAP32[$1 + 8 >> 2]) & 1) {
     break label$4;
    }
    if (jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1) {
     break label$4;
    }
    if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
     break label$4;
    }
    if (!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1)) {
     break label$3;
    }
   }
   HEAP32[$1 + 12 >> 2] = 2555;
   break label$1;
  }
  if (jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 2562;
   break label$1;
  }
  if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 2571;
   break label$1;
  }
  if (jsvIsBoolean(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 2578;
   break label$1;
  }
  if (jsvIsNumeric(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 2586;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 2593;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsvAsFlatString($0) {
 var $1 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 label$1 : {
  if (jsvIsFlatString(HEAP32[$1 + 56 >> 2]) & 1) {
   HEAP32[$1 + 60 >> 2] = jsvLockAgain(HEAP32[$1 + 56 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 52 >> 2] = jsvAsString(HEAP32[$1 + 56 >> 2]);
  HEAP32[$1 + 48 >> 2] = jsvGetStringLength(HEAP32[$1 + 52 >> 2]);
  HEAP32[$1 + 44 >> 2] = jsvNewFlatStringOfLength(HEAP32[$1 + 48 >> 2]);
  if (HEAP32[$1 + 44 >> 2]) {
   jsvStringIteratorNew($1 + 24 | 0, HEAP32[$1 + 52 >> 2], 0);
   jsvStringIteratorNew($1, HEAP32[$1 + 44 >> 2], 0);
   while (1) {
    label$5 : {
     $0 = HEAP32[$1 + 48 >> 2];
     HEAP32[$1 + 48 >> 2] = $0 + -1;
     if (!$0) {
      break label$5;
     }
     jsvStringIteratorSetCharAndNext($1, jsvStringIteratorGetCharAndNext($1 + 24 | 0) << 24 >> 24);
     continue;
    }
    break;
   }
   jsvStringIteratorFree($1 + 24 | 0);
   jsvStringIteratorFree($1);
  }
  jsvUnLock(HEAP32[$1 + 52 >> 2]);
  HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 44 >> 2];
 }
 global$0 = $1 - -64 | 0;
 return HEAP32[$1 + 60 >> 2];
}
function __ashlti3($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 label$1 : {
  if ($5 & 64) {
   $3 = $1;
   $4 = $5 + -64 | 0;
   $1 = $4 & 31;
   if (32 <= ($4 & 63) >>> 0) {
    $4 = $3 << $1;
    $3 = 0;
   } else {
    $4 = (1 << $1) - 1 & $3 >>> 32 - $1 | $2 << $1;
    $3 = $3 << $1;
   }
   $1 = 0;
   $2 = 0;
   break label$1;
  }
  if (!$5) {
   break label$1;
  }
  $6 = $3;
  $8 = $5;
  $3 = $5 & 31;
  if (32 <= ($5 & 63) >>> 0) {
   $7 = $6 << $3;
   $9 = 0;
  } else {
   $7 = (1 << $3) - 1 & $6 >>> 32 - $3 | $4 << $3;
   $9 = $6 << $3;
  }
  $3 = $2;
  $6 = $1;
  $5 = 64 - $5 | 0;
  $4 = $5 & 31;
  if (32 <= ($5 & 63) >>> 0) {
   $5 = 0;
   $3 = $3 >>> $4;
  } else {
   $5 = $3 >>> $4;
   $3 = ((1 << $4) - 1 & $3) << 32 - $4 | $6 >>> $4;
  }
  $3 = $9 | $3;
  $4 = $5 | $7;
  $5 = $1;
  $1 = $8 & 31;
  if (32 <= ($8 & 63) >>> 0) {
   $7 = $5 << $1;
   $1 = 0;
  } else {
   $7 = (1 << $1) - 1 & $5 >>> 32 - $1 | $2 << $1;
   $1 = $5 << $1;
  }
  $2 = $7;
 }
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $4;
}
function std____2__unique_ptr_TfLiteLocalResponseNormParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLocalResponseNormParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 8 >> 2];
 $3 = TfLiteLocalResponseNormParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteLocalResponseNormParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($2, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteConvParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2);
 global$0 = $2 + 16 | 0;
}
function jswrap_object_length($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  label$2 : {
   if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 4 >> 2] = jsvGetArrayLength(HEAP32[$1 + 8 >> 2]);
    break label$2;
   }
   label$4 : {
    if (jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) {
     HEAP32[$1 + 4 >> 2] = jsvGetArrayBufferLength(HEAP32[$1 + 8 >> 2]);
     break label$4;
    }
    label$6 : {
     if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
      HEAP32[$1 + 4 >> 2] = jsvGetStringLength(HEAP32[$1 + 8 >> 2]);
      break label$6;
     }
     label$8 : {
      if (jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1) {
       HEAP32[$1 >> 2] = jsvGetFunctionArgumentLength(HEAP32[$1 + 8 >> 2]);
       HEAP32[$1 + 4 >> 2] = jsvGetArrayLength(HEAP32[$1 >> 2]);
       jsvUnLock(HEAP32[$1 >> 2]);
       break label$8;
      }
      HEAP32[$1 + 12 >> 2] = 0;
      break label$1;
     }
    }
   }
  }
  HEAP32[$1 + 12 >> 2] = jsvNewFromInteger(HEAP32[$1 + 4 >> 2]);
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function heatshrink_decoder_sink($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 label$1 : {
  if (!(HEAP32[$4 + 12 >> 2] ? !(!HEAP32[$4 + 24 >> 2] | !HEAP32[$4 + 20 >> 2]) : 0)) {
   HEAP32[$4 + 28 >> 2] = -1;
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = 32 - HEAPU16[HEAP32[$4 + 24 >> 2] >> 1];
  if (!HEAP32[$4 + 8 >> 2]) {
   HEAP32[HEAP32[$4 + 12 >> 2] >> 2] = 0;
   HEAP32[$4 + 28 >> 2] = 1;
   break label$1;
  }
  $0 = $4;
  if (HEAPU32[$4 + 8 >> 2] < HEAPU32[$4 + 16 >> 2]) {
   $1 = HEAP32[$4 + 8 >> 2];
  } else {
   $1 = HEAP32[$4 + 16 >> 2];
  }
  HEAP32[$0 + 16 >> 2] = $1;
  memcpy(HEAPU16[HEAP32[$4 + 24 >> 2] >> 1] + (HEAP32[$4 + 24 >> 2] + 13 | 0) | 0, HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
  $0 = HEAP32[$4 + 24 >> 2];
  HEAP16[$0 >> 1] = HEAP32[$4 + 16 >> 2] + HEAPU16[$0 >> 1];
  HEAP32[HEAP32[$4 + 12 >> 2] >> 2] = HEAP32[$4 + 16 >> 2];
  HEAP32[$4 + 28 >> 2] = 0;
 }
 global$0 = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}
function jswrap_graphics_setColorX($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 112 | 0;
 global$0 = $5;
 HEAP32[$5 + 104 >> 2] = $0;
 HEAP32[$5 + 100 >> 2] = $1;
 HEAP32[$5 + 96 >> 2] = $2;
 HEAP32[$5 + 92 >> 2] = $3;
 HEAP8[$5 + 91 | 0] = $4;
 label$1 : {
  if (!(graphicsGetFromVar($5 + 16 | 0, HEAP32[$5 + 104 >> 2]) & 1)) {
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$5 + 12 >> 2] = jswrap_graphics_toColor(HEAP32[$5 + 104 >> 2], HEAP32[$5 + 100 >> 2], HEAP32[$5 + 96 >> 2], HEAP32[$5 + 92 >> 2]);
  label$3 : {
   if (HEAP8[$5 + 91 | 0] & 1) {
    $0 = HEAP32[$5 + 12 >> 2];
    HEAP8[$5 + 33 | 0] = $0;
    HEAP8[$5 + 34 | 0] = $0 >>> 8;
    HEAP8[$5 + 35 | 0] = $0 >>> 16;
    HEAP8[$5 + 36 | 0] = $0 >>> 24;
    break label$3;
   }
   $0 = HEAP32[$5 + 12 >> 2];
   HEAP8[$5 + 37 | 0] = $0;
   HEAP8[$5 + 38 | 0] = $0 >>> 8;
   HEAP8[$5 + 39 | 0] = $0 >>> 16;
   HEAP8[$5 + 40 | 0] = $0 >>> 24;
  }
  graphicsSetVar($5 + 16 | 0);
  HEAP32[$5 + 108 >> 2] = jsvLockAgain(HEAP32[$5 + 104 >> 2]);
 }
 global$0 = $5 + 112 | 0;
 return HEAP32[$5 + 108 >> 2];
}
function std____2__unique_ptr_TfLiteResizeBilinearParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteResizeBilinearParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 8 >> 2];
 $3 = TfLiteResizeBilinearParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteResizeBilinearParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($2, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteConvParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2);
 global$0 = $2 + 16 | 0;
}
function jswrap_graphics_setFontSizeX($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP8[$3 + 83 | 0] = $2;
 label$1 : {
  if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  if (HEAP8[$3 + 83 | 0] & 1) {
   if (HEAP32[$3 + 84 >> 2] < 1) {
    HEAP32[$3 + 84 >> 2] = 1;
   }
   if (HEAP32[$3 + 84 >> 2] > 1023) {
    HEAP32[$3 + 84 >> 2] = 1023;
   }
  }
  if (!((HEAP32[$3 + 84 >> 2] & 57344) == 24576 | ((HEAPU8[$3 + 33 | 0] | HEAPU8[$3 + 34 | 0] << 8) & 57344) != 24576)) {
   jsvObjectRemoveChild(HEAP32[$3 + 88 >> 2], 38877);
   jsvObjectRemoveChild(HEAP32[$3 + 88 >> 2], 38882);
   jsvObjectRemoveChild(HEAP32[$3 + 88 >> 2], 38887);
   jsvObjectRemoveChild(HEAP32[$3 + 88 >> 2], 38892);
  }
  $0 = HEAP32[$3 + 84 >> 2];
  HEAP8[$3 + 33 | 0] = $0;
  HEAP8[$3 + 34 | 0] = $0 >>> 8;
  graphicsSetVar($3 + 8 | 0);
  HEAP32[$3 + 92 >> 2] = jsvLockAgain(HEAP32[$3 + 88 >> 2]);
 }
 global$0 = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}
function std____2__unique_ptr_TfLiteLSHProjectionParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteLSHProjectionParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 8 >> 2];
 $3 = TfLiteLSHProjectionParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteLSHProjectionParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($2, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteConvParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2);
 global$0 = $2 + 16 | 0;
}
function std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteDepthwiseConvParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 8 >> 2];
 $3 = TfLiteDepthwiseConvParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteDepthwiseConvParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($2, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteConvParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2);
 global$0 = $2 + 16 | 0;
}
function jswrap_graphics_getFontHeightInternal($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 4 >> 2] = (HEAPU8[$0 + 25 | 0] | HEAPU8[$0 + 26 | 0] << 8) & 57344;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP16[$1 + 2 >> 1] = (HEAPU8[$0 + 25 | 0] | HEAPU8[$0 + 26 | 0] << 8) & 8191;
 label$1 : {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = HEAPU16[$1 + 2 >> 1];
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 8192) {
   HEAP32[$1 + 12 >> 2] = Math_imul(HEAPU16[$1 + 2 >> 1], 6);
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 16384) {
   HEAP32[$1 + 12 >> 2] = HEAPU16[$1 + 2 >> 1] << 3;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 24576) {
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 12 >> 2] = Math_imul(HEAPU16[$1 + 2 >> 1], jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 38887, 0)));
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function tflite__MicroInterpreter__output_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = 0;
 $0 = HEAP32[$1 + 24 >> 2];
 HEAP32[$1 + 16 >> 2] = tflite__Model__subgraphs_28_29_20const(HEAP32[$0 + 128 >> 2]);
 HEAP32[$1 + 12 >> 2] = flatbuffers__Vector_int___size_28_29_20const(HEAP32[$1 + 16 >> 2]);
 label$1 : {
  label$2 : {
   if (HEAPU32[$1 + 20 >> 2] >= 0) {
    if (HEAPU32[$1 + 20 >> 2] < flatbuffers__Vector_int___size_28_29_20const(HEAP32[$1 + 16 >> 2]) >>> 0) {
     break label$2;
    }
   }
   $0 = HEAP32[$0 + 8 >> 2];
   $2 = HEAP32[$1 + 20 >> 2];
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 12 >> 2];
   HEAP32[$1 >> 2] = $2;
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 40267, $1);
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 20 >> 2] + Math_imul(flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]), 56);
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function jspGetNamedVariable($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = $1;
 label$1 : {
  if ((HEAP32[23778] & 63) == 1) {
   $2 = jspeiFindInScopes(HEAP32[$1 + 12 >> 2]);
   break label$1;
  }
  $2 = 0;
 }
 HEAP32[$0 + 8 >> 2] = $2;
 if (!(HEAP32[$1 + 8 >> 2] | (HEAP32[23778] & 63) != 1)) {
  label$4 : {
   if (jswIsBuiltInObject(HEAP32[$1 + 12 >> 2]) & 1) {
    HEAP32[$1 + 4 >> 2] = jswFindBuiltInFunction(0, HEAP32[$1 + 12 >> 2]);
    if (!HEAP32[$1 + 4 >> 2]) {
     HEAP32[$1 + 4 >> 2] = jspNewBuiltin(HEAP32[$1 + 12 >> 2]);
    }
    if (HEAP32[$1 + 4 >> 2]) {
     HEAP32[$1 + 8 >> 2] = jsvAddNamedChild(HEAP32[23774], HEAP32[$1 + 4 >> 2], HEAP32[$1 + 12 >> 2]);
     jsvUnLock(HEAP32[$1 + 4 >> 2]);
    }
    break label$4;
   }
   HEAP32[$1 + 8 >> 2] = jswFindBuiltInFunction(0, HEAP32[$1 + 12 >> 2]);
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP32[$1 + 8 >> 2] = jsvMakeIntoVariableName(jsvNewFromString(HEAP32[$1 + 12 >> 2]), 0);
   }
  }
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function gemmlowp__ImplSaturatingRoundingMultiplyByPOT_1_2c_20int_2c_201___eval_28int_29($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = jshFlashGetMemMapAddress(-2147483648);
 HEAP32[$1 + 20 >> 2] = jshFlashGetMemMapAddress(2147483647);
 HEAP32[$1 + 16 >> 2] = 32;
 HEAP32[$1 + 12 >> 2] = 1073741823;
 HEAP32[$1 + 8 >> 2] = int_20gemmlowp__MaskIfGreaterThan_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], jshFlashGetMemMapAddress(1073741823));
 HEAP32[$1 + 4 >> 2] = int_20gemmlowp__MaskIfLessThan_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], jshFlashGetMemMapAddress(-1073741823));
 HEAP32[$1 >> 2] = int_20gemmlowp__ShiftLeft_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], 1);
 HEAP32[$1 >> 2] = int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 >> 2]);
 HEAP32[$1 >> 2] = int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 24 >> 2], HEAP32[$1 >> 2]);
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 >> 2];
}
function std____2__unique_ptr_TfLiteStridedSliceParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteStridedSliceParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 8 >> 2];
 $3 = TfLiteStridedSliceParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteStridedSliceParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($2, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteConvParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2);
 global$0 = $2 + 16 | 0;
}
function std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteConvParams__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 4 >> 2] = HEAP32[std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const($0) >> 2];
 $2 = HEAP32[$1 + 8 >> 2];
 HEAP32[std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const($0) >> 2] = $2;
 if (HEAP32[$1 + 4 >> 2]) {
  tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__operator_28_29_28void__29(std____2____compressed_pair_TfLiteResizeNearestNeighborParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0), HEAP32[$1 + 4 >> 2]);
 }
 global$0 = $1 + 16 | 0;
}
function gemmlowp__ImplSaturatingRoundingMultiplyByPOT_2_2c_20int_2c_201___eval_28int_29($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = jshFlashGetMemMapAddress(-2147483648);
 HEAP32[$1 + 20 >> 2] = jshFlashGetMemMapAddress(2147483647);
 HEAP32[$1 + 16 >> 2] = 32;
 HEAP32[$1 + 12 >> 2] = 536870911;
 HEAP32[$1 + 8 >> 2] = int_20gemmlowp__MaskIfGreaterThan_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], jshFlashGetMemMapAddress(536870911));
 HEAP32[$1 + 4 >> 2] = int_20gemmlowp__MaskIfLessThan_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], jshFlashGetMemMapAddress(-536870911));
 HEAP32[$1 >> 2] = int_20gemmlowp__ShiftLeft_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], 2);
 HEAP32[$1 >> 2] = int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 >> 2]);
 HEAP32[$1 >> 2] = int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 24 >> 2], HEAP32[$1 >> 2]);
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 >> 2];
}
function jswrap_banglejs_beep($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 if (HEAP32[$2 + 4 >> 2] <= 0) {
  HEAP32[$2 + 4 >> 2] = 4e3;
 }
 if (HEAP32[$2 + 4 >> 2] > 6e4) {
  HEAP32[$2 + 4 >> 2] = 6e4;
 }
 if (HEAP32[$2 + 8 >> 2] <= 0) {
  HEAP32[$2 + 8 >> 2] = 200;
 }
 if (HEAP32[$2 + 8 >> 2] > 5e3) {
  HEAP32[$2 + 8 >> 2] = 5e3;
 }
 label$5 : {
  if (HEAP32[62834]) {
   jsExceptionHere(1, 28987, 0);
   HEAP32[$2 + 12 >> 2] = 0;
   break label$5;
  }
  HEAP32[62834] = jspromise_create();
  if (!HEAP32[62834]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$5;
  }
  if (HEAP32[62815] & 128) {
   HEAP16[125666] = HEAP32[$2 + 4 >> 2];
   label$9 : {
    if (HEAP32[62815] & 64) {
     _jswrap_banglejs_setVibration();
     break label$9;
    }
    jshPinAnalogOutput(18, .5, +HEAP32[$2 + 4 >> 2], 0);
   }
  }
  jsiSetTimeout(509, +HEAP32[$2 + 8 >> 2]);
  HEAP32[$2 + 12 >> 2] = jsvLockAgain(HEAP32[62834]);
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function gemmlowp__ImplSaturatingRoundingMultiplyByPOT_5_2c_20int_2c_201___eval_28int_29($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = jshFlashGetMemMapAddress(-2147483648);
 HEAP32[$1 + 20 >> 2] = jshFlashGetMemMapAddress(2147483647);
 HEAP32[$1 + 16 >> 2] = 32;
 HEAP32[$1 + 12 >> 2] = 67108863;
 HEAP32[$1 + 8 >> 2] = int_20gemmlowp__MaskIfGreaterThan_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], jshFlashGetMemMapAddress(67108863));
 HEAP32[$1 + 4 >> 2] = int_20gemmlowp__MaskIfLessThan_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], jshFlashGetMemMapAddress(-67108863));
 HEAP32[$1 >> 2] = int_20gemmlowp__ShiftLeft_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], 5);
 HEAP32[$1 >> 2] = int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 >> 2]);
 HEAP32[$1 >> 2] = int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 24 >> 2], HEAP32[$1 >> 2]);
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 >> 2];
}
function nmea_decode_latlon($0, $1) {
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 36 >> 2] = $0;
 HEAP32[$2 + 32 >> 2] = $1;
 label$1 : {
  if (HEAP8[HEAP32[$2 + 36 >> 2]] == 44) {
   HEAPF64[$2 + 40 >> 3] = nan;
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 36 >> 2];
  while (1) {
   $0 = 0;
   label$4 : {
    if (!HEAP8[HEAP32[$2 + 28 >> 2]]) {
     break label$4;
    }
    $0 = 0;
    if (HEAP8[HEAP32[$2 + 28 >> 2]] == 46) {
     break label$4;
    }
    $0 = HEAP8[HEAP32[$2 + 28 >> 2]] != 44;
   }
   if ($0) {
    HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 28 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP8[HEAP32[$2 + 32 >> 2]] = 0;
  HEAPF64[$2 + 16 >> 3] = stringToFloatWithRadix(HEAP32[$2 + 28 >> 2] + -2 | 0, 10, 0);
  HEAP8[HEAP32[$2 + 32 >> 2]] = 44;
  HEAP8[HEAP32[$2 + 28 >> 2] + -2 | 0] = 0;
  HEAP32[$2 + 12 >> 2] = stringToIntWithRadix(HEAP32[$2 + 36 >> 2], 10, 0, 0);
  HEAPF64[$2 + 40 >> 3] = +HEAP32[$2 + 12 >> 2] + HEAPF64[$2 + 16 >> 3] / 60;
 }
 global$0 = $2 + 48 | 0;
 return HEAPF64[$2 + 40 >> 3];
}
function std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteReshapeParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 8 >> 2];
 $3 = TfLiteReshapeParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteReshapeParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($2, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteConvParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2);
 global$0 = $2 + 16 | 0;
}
function std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteConvParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 std____2____compressed_pair_TfLiteResizeNearestNeighborParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteResizeNearestNeighborParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteResizeNearestNeighborParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29(HEAP32[$3 + 12 >> 2], $3 + 8 | 0, jshFlashGetMemMapAddress(HEAP32[$3 + 4 >> 2]));
 global$0 = $3 + 16 | 0;
}
function tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$2 + 12 >> 2]) | 0) != (tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$2 + 8 >> 2]) | 0)) {
   break label$1;
  }
 }
 HEAP32[$2 + 4 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$2 + 12 >> 2]);
 HEAP32[$2 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 >> 2] < HEAP32[$2 + 4 >> 2]) {
   label$4 : {
    if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$2 + 12 >> 2], HEAP32[$2 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$2 + 8 >> 2], HEAP32[$2 >> 2]) | 0)) {
     break label$4;
    }
   }
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
   continue;
  }
  break;
 }
 $0 = tflite__RuntimeShape__FlatSize_28_29_20const(HEAP32[$2 + 12 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0;
}
function std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLitePoolParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 8 >> 2];
 $3 = TfLitePoolParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLitePoolParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($2, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteConvParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2);
 global$0 = $2 + 16 | 0;
}
function std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteConvParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 8 >> 2];
 $3 = TfLiteConvParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteConvParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($2, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteConvParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2);
 global$0 = $2 + 16 | 0;
}
function jswrap_spi_setup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $3 = $2 + 8 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP8[$2 + 23 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 28 >> 2]);
 label$1 : {
  if (!(jsspiPopulateSPIInfo($3, HEAP32[$2 + 24 >> 2]) & 1)) {
   break label$1;
  }
  label$2 : {
   if (!(HEAPU8[$2 + 23 | 0] < 24 | HEAPU8[$2 + 23 | 0] > 24)) {
    jshUSARTSetup(HEAPU8[$2 + 23 | 0], $2 + 8 | 0);
    break label$2;
   }
   if (HEAPU8[$2 + 23 | 0]) {
    break label$1;
   }
   if (HEAPU8[$2 + 13 | 0] != 255) {
    jshPinSetState(HEAPU8[$2 + 13 | 0], 1);
   }
   if (HEAPU8[$2 + 14 | 0] != 255) {
    jshPinSetState(HEAPU8[$2 + 14 | 0], 4);
   }
   if (HEAPU8[$2 + 15 | 0] != 255) {
    jshPinSetState(HEAPU8[$2 + 15 | 0], 1);
   }
  }
  if (HEAP32[$2 + 24 >> 2]) {
   jsvUnLock(jsvSetNamedChild(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]));
   break label$1;
  }
  jsvObjectRemoveChild(HEAP32[$2 + 28 >> 2], 37088);
 }
 global$0 = $2 + 32 | 0;
}
function jsvGetLineAndCol($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 + -64 | 0;
 global$0 = $4;
 HEAP32[$4 + 60 >> 2] = $0;
 HEAP32[$4 + 56 >> 2] = $1;
 HEAP32[$4 + 52 >> 2] = $2;
 HEAP32[$4 + 48 >> 2] = $3;
 HEAP32[$4 + 44 >> 2] = 1;
 HEAP32[$4 + 40 >> 2] = 1;
 HEAP32[$4 + 36 >> 2] = 0;
 jsvStringIteratorNew($4 + 16 | 0, HEAP32[$4 + 60 >> 2], 0);
 while (1) {
  label$2 : {
   if (!(jsvStringIteratorHasChar($4 + 16 | 0) & 1)) {
    break label$2;
   }
   HEAP8[$4 + 15 | 0] = jsvStringIteratorGetCharAndNext($4 + 16 | 0);
   if (HEAP32[$4 + 36 >> 2] == HEAP32[$4 + 56 >> 2]) {
    break label$2;
   }
   HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 44 >> 2] + 1;
   if (HEAP8[$4 + 15 | 0] == 10) {
    HEAP32[$4 + 44 >> 2] = 1;
    HEAP32[$4 + 40 >> 2] = HEAP32[$4 + 40 >> 2] + 1;
   }
   HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 36 >> 2] + 1;
   continue;
  }
  break;
 }
 jsvStringIteratorFree($4 + 16 | 0);
 HEAP32[HEAP32[$4 + 52 >> 2] >> 2] = HEAP32[$4 + 40 >> 2];
 HEAP32[HEAP32[$4 + 48 >> 2] >> 2] = HEAP32[$4 + 44 >> 2];
 global$0 = $4 - -64 | 0;
}
function jshPushIOWatchEvent($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP8[$1 + 31 | 0] = $0;
 HEAP8[$1 + 30 | 0] = jshGetWatchedPinState(HEAPU8[$1 + 31 | 0]) & 1;
 HEAP32[$1 + 24 >> 2] = HEAPU8[$1 + 31 | 0] - 1;
 label$1 : {
  if (HEAP32[(HEAP32[$1 + 24 >> 2] << 2) + 95216 >> 2]) {
   label$3 : {
    if ((HEAP32[(HEAP32[$1 + 24 >> 2] << 2) + 95216 >> 2] & -256) == -256) {
     HEAP8[$1 + 23 | 0] = HEAP32[(HEAP32[$1 + 24 >> 2] << 2) + 95216 >> 2];
     if (jshPinGetValue(HEAPU8[$1 + 23 | 0]) & 1) {
      HEAP8[$1 + 31 | 0] = HEAPU8[$1 + 31 | 0] | 64;
     }
     break label$3;
    }
    FUNCTION_TABLE[HEAP32[(HEAP32[$1 + 24 >> 2] << 2) + 95216 >> 2]](HEAP8[$1 + 30 | 0] & 1, HEAPU8[$1 + 31 | 0]);
    break label$1;
   }
  }
  if (HEAP8[$1 + 30 | 0] & 1) {
   HEAP8[$1 + 31 | 0] = HEAPU8[$1 + 31 | 0] | 32;
  }
  HEAP32[$1 + 8 >> 2] = jshGetSystemTime();
  HEAP32[$1 + 12 >> 2] = i64toi32_i32$HIGH_BITS;
  jshPushIOEvent(HEAPU8[$1 + 31 | 0], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
 }
 global$0 = $1 + 32 | 0;
}
function std____2__unique_ptr_TfLiteCastParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteCastParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 8 >> 2];
 $3 = TfLiteIfParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteIfParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($2, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteConvParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2);
 global$0 = $2 + 16 | 0;
}
function OneWireWrite($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP8[$4 + 31 | 0] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 20 >> 2] = $3;
 jshPinSetState(HEAPU8[$4 + 31 | 0], 3);
 HEAP32[$4 + 8 >> 2] = 1;
 HEAP32[$4 + 12 >> 2] = 0;
 while (1) {
  label$2 : {
   $0 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 24 >> 2] = $0 + -1;
   if (($0 | 0) <= 0) {
    break label$2;
   }
   label$3 : {
    if (HEAP32[$4 + 16 >> 2] & HEAP32[$4 + 8 >> 2] | HEAP32[$4 + 20 >> 2] & HEAP32[$4 + 12 >> 2]) {
     jshPinSetValue(HEAPU8[$4 + 31 | 0], 0);
     do_indexing(10);
     jshPinSetValue(HEAPU8[$4 + 31 | 0], 1);
     do_indexing(55);
     break label$3;
    }
    jshPinSetValue(HEAPU8[$4 + 31 | 0], 0);
    do_indexing(65);
    jshPinSetValue(HEAPU8[$4 + 31 | 0], 1);
    do_indexing(5);
   }
   $1 = HEAP32[$4 + 8 >> 2];
   $2 = HEAP32[$4 + 12 >> 2] << 1 | $1 >>> 31;
   HEAP32[$4 + 8 >> 2] = $1 << 1;
   HEAP32[$4 + 12 >> 2] = $2;
   continue;
  }
  break;
 }
 global$0 = $4 + 32 | 0;
}
function __rem_pio2f($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 $5 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
 $2 = $5 & 2147483647;
 label$1 : {
  if ($2 >>> 0 <= 1305022426) {
   $6 = +$0;
   $3 = $6 * .6366197723675814 + 6755399441055744 + -6755399441055744;
   HEAPF64[$1 >> 3] = $6 + $3 * -1.5707963109016418 + $3 * -1.5893254773528196e-8;
   if (Math_abs($3) < 2147483648) {
    $2 = ~~$3;
    break label$1;
   }
   $2 = -2147483648;
   break label$1;
  }
  if ($2 >>> 0 >= 2139095040) {
   HEAPF64[$1 >> 3] = Math_fround($0 - $0);
   $2 = 0;
   break label$1;
  }
  $7 = $2;
  $2 = ($2 >>> 23) + -150 | 0;
  HEAPF64[$4 + 8 >> 3] = (wasm2js_scratch_store_i32(0, $7 - ($2 << 23) | 0), wasm2js_scratch_load_f32());
  $2 = __rem_pio2_large($4 + 8 | 0, $4, $2, 1, 0);
  $3 = HEAPF64[$4 >> 3];
  if (($5 | 0) <= -1) {
   HEAPF64[$1 >> 3] = -$3;
   $2 = 0 - $2 | 0;
   break label$1;
  }
  HEAPF64[$1 >> 3] = $3;
 }
 global$0 = $4 + 16 | 0;
 return $2;
}
function TfLiteTypeGetName($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 label$1 : {
  if ($0 >>> 0 <= 10) {
   label$3 : {
    switch ($0 - 1 | 0) {
    default:
     HEAP32[$1 + 12 >> 2] = 27698;
     break label$1;
    case 0:
     HEAP32[$1 + 12 >> 2] = 27705;
     break label$1;
    case 6:
     HEAP32[$1 + 12 >> 2] = 27713;
     break label$1;
    case 1:
     HEAP32[$1 + 12 >> 2] = 27719;
     break label$1;
    case 2:
     HEAP32[$1 + 12 >> 2] = 27725;
     break label$1;
    case 8:
     HEAP32[$1 + 12 >> 2] = 27731;
     break label$1;
    case 3:
     HEAP32[$1 + 12 >> 2] = 27736;
     break label$1;
    case 5:
     HEAP32[$1 + 12 >> 2] = 27742;
     break label$1;
    case 7:
     HEAP32[$1 + 12 >> 2] = 27747;
     break label$1;
    case 4:
     HEAP32[$1 + 12 >> 2] = 27757;
     break label$1;
    case 9:
     break label$3;
    }
   }
   HEAP32[$1 + 12 >> 2] = 27764;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 27772;
 }
 return HEAP32[$1 + 12 >> 2];
}
function jshSetFlowControlXON($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 if (!(HEAPU8[$2 + 15 | 0] < 21 | HEAPU8[$2 + 15 | 0] > 22)) {
  if (!(HEAP8[$2 + 14 | 0] & 1)) {
   HEAP8[97072] = 1;
  }
  HEAP32[$2 + 8 >> 2] = HEAPU8[$2 + 15 | 0] - 21;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2] + 95204;
  if (HEAPU8[HEAP32[$2 + 4 >> 2]] & 8) {
   label$4 : {
    if (HEAP8[$2 + 14 | 0] & 1) {
     if ((HEAPU8[HEAP32[$2 + 4 >> 2]] & 6) == 4) {
      $0 = HEAP32[$2 + 4 >> 2];
      HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 2;
      jshUSARTKick(HEAPU8[$2 + 15 | 0]);
     }
     break label$4;
    }
    if (!(HEAPU8[HEAP32[$2 + 4 >> 2]] & 5)) {
     $0 = HEAP32[$2 + 4 >> 2];
     HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 1;
     jshUSARTKick(HEAPU8[$2 + 15 | 0]);
    }
   }
  }
  HEAP8[$2 + 3 | 0] = HEAPU8[HEAP32[$2 + 8 >> 2] + 95206 | 0];
  if (HEAPU8[$2 + 3 | 0] != 255) {
   jshPinSetValue(HEAPU8[$2 + 3 | 0], (HEAPU8[$2 + 14 | 0] ^ -1) & 1);
  }
 }
 global$0 = $2 + 16 | 0;
}
function jshTransmitMove($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = 19;
 HEAP8[$1 + 14 | 0] = $0;
 label$1 : {
  if (!(HEAPU8[$1 + 14 | 0] != 18 ? HEAPU8[$1 + 14 | 0] != 17 : 0)) {
   HEAP8[$1 + 13 | 0] = HEAPU8[$1 + 14 | 0] == 18 ? 17 : 18;
   HEAP32[$1 + 8 >> 2] = jshGetCharToTransmit(HEAPU8[$1 + 15 | 0]);
   while (1) {
    if (HEAP32[$1 + 8 >> 2] >= 0) {
     jshPushIOCharEvent(HEAPU8[$1 + 13 | 0], HEAP32[$1 + 8 >> 2] << 24 >> 24);
     HEAP32[$1 + 8 >> 2] = jshGetCharToTransmit(HEAPU8[$1 + 15 | 0]);
     continue;
    }
    break;
   }
   break label$1;
  }
  HEAP8[$1 + 7 | 0] = HEAPU8[95201];
  while (1) {
   if (HEAPU8[$1 + 7 | 0] != HEAPU8[95200]) {
    if (HEAPU8[$1 + 15 | 0] == (HEAPU8[(HEAPU8[$1 + 7 | 0] << 1) + 95280 | 0] & 31)) {
     HEAP8[(HEAPU8[$1 + 7 | 0] << 1) + 95280 | 0] = HEAPU8[$1 + 14 | 0] | HEAPU8[(HEAPU8[$1 + 7 | 0] << 1) + 95280 | 0] & -32;
    }
    HEAP8[$1 + 7 | 0] = HEAPU8[$1 + 7 | 0] + 1;
    continue;
   }
   break;
  }
 }
 global$0 = $1 + 16 | 0;
}
function jswrap_promise_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = jspromise_create();
 if (HEAP32[$1 + 24 >> 2]) {
  HEAP32[$1 + 16 >> 2] = jsvNewNativeFunction(537, 32776);
  HEAP32[$1 + 20 >> 2] = jsvNewNativeFunction(536, 32776);
  if (HEAP32[$1 + 16 >> 2]) {
   jsvObjectSetChild(HEAP32[$1 + 16 >> 2], 36555, HEAP32[$1 + 24 >> 2]);
  }
  if (HEAP32[$1 + 20 >> 2]) {
   jsvObjectSetChild(HEAP32[$1 + 20 >> 2], 36555, HEAP32[$1 + 24 >> 2]);
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[23778];
  if (HEAP32[$1 + 28 >> 2]) {
   jsvUnLock(jspeFunctionCall(HEAP32[$1 + 28 >> 2], 0, HEAP32[$1 + 24 >> 2], 0, 2, $1 + 16 | 0));
  }
  HEAP32[23778] = HEAP32[$1 + 12 >> 2];
  jsvUnLockMany(2, $1 + 16 | 0);
  HEAP32[$1 + 8 >> 2] = jspGetException();
  if (HEAP32[$1 + 8 >> 2]) {
   _jswrap_promise_queuereject(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 8 >> 2]);
   jsvUnLock(HEAP32[$1 + 8 >> 2]);
  }
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 24 >> 2];
}
function jswrap_string_substr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 $0 = $3;
 $2 = jsvIsUndefined(HEAP32[$3 + 16 >> 2]) & 1;
 $1 = 2147483647;
 label$1 : {
  if ($2) {
   break label$1;
  }
  $1 = jsvGetInteger(HEAP32[$3 + 16 >> 2]);
 }
 HEAP32[$0 + 8 >> 2] = $1;
 if (HEAP32[$3 + 8 >> 2] < 0) {
  HEAP32[$3 + 8 >> 2] = 0;
 }
 if (HEAP32[$3 + 20 >> 2] < 0) {
  HEAP32[$3 + 20 >> 2] = jsvGetStringLength(HEAP32[$3 + 24 >> 2]) + HEAP32[$3 + 20 >> 2];
 }
 if (HEAP32[$3 + 20 >> 2] < 0) {
  HEAP32[$3 + 20 >> 2] = 0;
 }
 HEAP32[$3 + 12 >> 2] = jsvNewFromEmptyString();
 label$5 : {
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$5;
  }
  jsvAppendStringVar(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 8 >> 2]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function jswrap_spi_send_cb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = $3 - (HEAP32[$3 + 8 >> 2] + 15 & -16) | 0;
 global$0 = $0;
 HEAP32[$3 >> 2] = $0;
 FUNCTION_TABLE[HEAP32[HEAP32[$3 + 4 >> 2] >> 2]](HEAP32[$3 + 12 >> 2], HEAP32[$3 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2] + 4 | 0);
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$0 + 24 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$0 + 24 >> 2];
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$0 + 20 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$0 + 20 >> 2];
 while (1) {
  label$2 : {
   $0 = HEAP32[$3 + 8 >> 2];
   HEAP32[$3 + 8 >> 2] = $0 + -1;
   if (!$0) {
    break label$2;
   }
   $0 = HEAP32[$3 + 4 >> 2] + 28 | 0;
   $1 = HEAP32[$3 >> 2];
   HEAP32[$3 >> 2] = $1 + 1;
   jsvArrayBufferIteratorSetByteValue($0, HEAP8[$1 | 0]);
   jsvArrayBufferIteratorNext(HEAP32[$3 + 4 >> 2] + 28 | 0);
   continue;
  }
  break;
 }
 global$0 = $3 + 16 | 0;
}
function jsiIsWatchingPin($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP8[$1 + 30 | 0] = $0;
 label$1 : {
  if (jshGetPinShouldStayWatched(HEAPU8[$1 + 30 | 0]) & 1) {
   HEAP8[$1 + 31 | 0] = 1;
   break label$1;
  }
  $0 = $1 + 16 | 0;
  HEAP8[$1 + 29 | 0] = 0;
  HEAP32[$1 + 24 >> 2] = jsvLock(HEAPU16[47565]);
  jsvObjectIteratorNew($0, HEAP32[$1 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($1 + 16 | 0) & 1) {
    HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue($1 + 16 | 0);
    HEAP32[$1 + 8 >> 2] = jsvObjectGetChild(HEAP32[$1 + 12 >> 2], 5263, 0);
    if ((jshGetPinFromVar(HEAP32[$1 + 8 >> 2]) & 255) == HEAPU8[$1 + 30 | 0]) {
     HEAP8[$1 + 29 | 0] = 1;
    }
    $0 = $1 + 16 | 0;
    jsvUnLock2(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
    jsvObjectIteratorNext($0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($1 + 16 | 0);
  jsvUnLock(HEAP32[$1 + 24 >> 2]);
  HEAP8[$1 + 31 | 0] = HEAP8[$1 + 29 | 0] & 1;
 }
 global$0 = $1 + 32 | 0;
 return HEAP8[$1 + 31 | 0] & 1;
}
function jsvNewWithFlags($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP16[$1 + 10 >> 1] = $0;
 label$1 : {
  if (HEAP32[13770]) {
   HEAP8[95095] = HEAPU8[95095] | 32;
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = 0;
  if (HEAPU16[27542]) {
   HEAP32[$1 + 4 >> 2] = jsvGetAddressOf(HEAPU16[27542]);
   HEAP16[27542] = jsvGetNextSibling(HEAP32[$1 + 4 >> 2]);
   HEAP8[55077] = 1;
  }
  if (HEAP32[$1 + 4 >> 2]) {
   jsvResetVariable(HEAP32[$1 + 4 >> 2], HEAPU16[$1 + 10 >> 1]);
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
   break label$1;
  }
  HEAP8[95095] = HEAPU8[95095] | 8;
  if (jsvGarbageCollect()) {
   HEAP32[$1 + 12 >> 2] = jsvNewWithFlags(HEAPU16[$1 + 10 >> 1]);
   break label$1;
  }
  if (jsiFreeMoreMemory() & 1) {
   HEAP32[$1 + 12 >> 2] = jsvNewWithFlags(HEAPU16[$1 + 10 >> 1]);
   break label$1;
  }
  HEAP8[95095] = HEAPU8[95095] | 16;
  jspSetInterrupted(1);
  HEAP32[$1 + 12 >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jspeBlockNoBrackets() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 label$1 : {
  if ((HEAP32[23778] & 63) == 1) {
   while (1) {
    if (HEAP16[HEAP32[13768] + 2 >> 1] ? HEAP16[HEAP32[13768] + 2 >> 1] != 125 : 0) {
     HEAP32[$0 + 12 >> 2] = jspeStatement();
     jsvCheckReferenceError(HEAP32[$0 + 12 >> 2]);
     jsvUnLock(HEAP32[$0 + 12 >> 2]);
     if (HEAP32[23778] & 112) {
      if (!(!HEAP32[13768] | HEAP32[23778] & 128)) {
       HEAP32[23778] = HEAP32[23778] | 128;
       HEAP32[$0 + 8 >> 2] = jsvObjectGetChild(HEAP32[23775], 3760, 27);
       if (HEAP32[$0 + 8 >> 2]) {
        jsvAppendPrintf(HEAP32[$0 + 8 >> 2], 4724, 0);
        jspAppendStackTrace(HEAP32[$0 + 8 >> 2]);
        jsvUnLock(HEAP32[$0 + 8 >> 2]);
       }
      }
     }
     if (HEAP32[23778] & 80) {
      break label$1;
     }
     if ((HEAP32[23778] & 63) != 1) {
      jspeSkipBlock();
      break label$1;
     }
     continue;
    }
    break;
   }
   break label$1;
  }
  jspeSkipBlock();
 }
 global$0 = $0 + 16 | 0;
}
function tflite__ops__micro__activations__Softmax4DFloat_28TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteSoftmaxParams__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 112 | 0;
 global$0 = $3;
 HEAP32[$3 + 108 >> 2] = $0;
 HEAP32[$3 + 104 >> 2] = $1;
 HEAP32[$3 + 100 >> 2] = $2;
 HEAPF64[$3 + 56 >> 3] = HEAPF32[HEAP32[$3 + 100 >> 2] >> 2];
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3 + 32 | 0, HEAP32[$3 + 108 >> 2]);
 $0 = float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$3 + 108 >> 2]);
 tflite__GetTensorShape_28TfLiteTensor_20const__29($3, HEAP32[$3 + 104 >> 2]);
 tflite__reference_ops__Softmax_28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($3 + 56 | 0, $3 + 32 | 0, $0, $3, float__20tflite__GetTensorData_float__28TfLiteTensor__29(HEAP32[$3 + 104 >> 2]));
 $0 = $3 + 32 | 0;
 tflite__RuntimeShape___RuntimeShape_28_29($3);
 tflite__RuntimeShape___RuntimeShape_28_29($0);
 global$0 = $3 + 112 | 0;
}
function jswrap_process_env() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = jsvNewWithFlags(5);
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 36394, jsvNewFromString(36402));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 36410, jsvNewFromString(36421));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 36430, jsvNewFromString(36436));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 36447, jsvNewFromInteger(262144));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 36453, jsvNewFromInteger(41984));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 36461, jsvNewFromInteger(0));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 36465, jswrap_interface_getSerial());
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 36472, jswrap_espruino_getConsole());
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 36480, jsvNewFromString(18479));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 36488, jsvNewFromInteger(53424));
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function jsvStringIteratorNew($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jsvLockAgain(HEAP32[$3 + 8 >> 2]);
 HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2] = $0;
 HEAP32[HEAP32[$3 + 12 >> 2] + 8 >> 2] = 0;
 $0 = jsvGetCharactersInVar(HEAP32[$3 + 8 >> 2]);
 HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2] = $0;
 HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = HEAP32[$3 + 4 >> 2];
 label$1 : {
  if (jsvIsFlatString(HEAP32[$3 + 8 >> 2]) & 1) {
   $0 = jsvGetFlatStringPointer(HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2]);
   HEAP32[HEAP32[$3 + 12 >> 2] + 16 >> 2] = $0;
   break label$1;
  }
  label$3 : {
   if (jsvIsNativeString(HEAP32[$3 + 8 >> 2]) & 1) {
    HEAP32[HEAP32[$3 + 12 >> 2] + 16 >> 2] = HEAP32[HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2] >> 2];
    break label$3;
   }
   HEAP32[HEAP32[$3 + 12 >> 2] + 16 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2];
  }
 }
 jsvStringIteratorCatchUp(HEAP32[$3 + 12 >> 2]);
 global$0 = $3 + 16 | 0;
}
function graphicsStructInit($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP8[$0 + 8 | 0] = 0;
 HEAP8[$0 + 9 | 0] = 0;
 HEAP8[$0 + 10 | 0] = 0;
 HEAP8[$0 + 11 | 0] = 0;
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$4 + 8 >> 2];
 HEAP8[$0 + 12 | 0] = $1;
 HEAP8[$0 + 13 | 0] = $1 >>> 8;
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP8[$0 + 14 | 0] = $1;
 HEAP8[$0 + 15 | 0] = $1 >>> 8;
 HEAP8[HEAP32[$4 + 12 >> 2] + 16 | 0] = HEAP32[$4 >> 2];
 graphicsStructResetState(HEAP32[$4 + 12 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP8[$0 + 44 | 0] = 32768;
 HEAP8[$0 + 45 | 0] = 128;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP8[$0 + 46 | 0] = 32768;
 HEAP8[$0 + 47 | 0] = 128;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP8[$0 + 40 | 0] = 32767;
 HEAP8[$0 + 41 | 0] = 127;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP8[$0 + 42 | 0] = 32767;
 HEAP8[$0 + 43 | 0] = 127;
 global$0 = $4 + 16 | 0;
}
function _jswrap_espruino_FFT_getData($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 + -64 | 0;
 global$0 = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 HEAP32[$3 + 52 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = 0;
 if (jsvIsIterable(HEAP32[$3 + 56 >> 2]) & 1) {
  jsvIteratorNew($3 + 8 | 0, HEAP32[$3 + 56 >> 2], 1);
  while (1) {
   if (HEAPU32[$3 + 4 >> 2] < HEAPU32[$3 + 52 >> 2]) {
    $0 = jsvIteratorHasElement($3 + 8 | 0);
   } else {
    $0 = 0;
   }
   if ($0 & 1) {
    $0 = $3 + 8 | 0;
    $4 = jsvIteratorGetFloatValue($0);
    $1 = HEAP32[$3 + 60 >> 2];
    $2 = HEAP32[$3 + 4 >> 2];
    HEAP32[$3 + 4 >> 2] = $2 + 1;
    HEAPF64[$1 + ($2 << 3) >> 3] = $4;
    jsvIteratorNext($0);
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 8 | 0);
 }
 while (1) {
  if (HEAPU32[$3 + 4 >> 2] < HEAPU32[$3 + 52 >> 2]) {
   $0 = HEAP32[$3 + 60 >> 2];
   $1 = HEAP32[$3 + 4 >> 2];
   HEAP32[$3 + 4 >> 2] = $1 + 1;
   HEAPF64[$0 + ($1 << 3) >> 3] = 0;
   continue;
  }
  break;
 }
 global$0 = $3 - -64 | 0;
}
function jswrap_modules_getCached() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 HEAP32[$0 + 24 >> 2] = jsvNewWithFlags(3);
 label$1 : {
  if (!HEAP32[$0 + 24 >> 2]) {
   HEAP32[$0 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 20 >> 2] = jswrap_modules_getModuleList();
  if (!HEAP32[$0 + 20 >> 2]) {
   HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
   break label$1;
  }
  jsvObjectIteratorNew($0 + 16 | 0, HEAP32[$0 + 20 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($0 + 16 | 0) & 1) {
    $1 = $0 + 16 | 0;
    HEAP32[$0 + 12 >> 2] = jsvObjectIteratorGetKey($1);
    HEAP32[$0 + 8 >> 2] = jsvCopyNameOnly(HEAP32[$0 + 12 >> 2], 0, 0);
    jsvArrayPushAndUnLock(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 8 >> 2]);
    jsvUnLock(HEAP32[$0 + 12 >> 2]);
    jsvObjectIteratorNext($1);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($0 + 16 | 0);
  jsvUnLock(HEAP32[$0 + 20 >> 2]);
  HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
 }
 global$0 = $0 + 32 | 0;
 return HEAP32[$0 + 28 >> 2];
}
function jswrap_i2c_setup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $3 = $2 + 8 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP8[$2 + 23 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 28 >> 2]);
 if (jsi2cPopulateI2CInfo($3, HEAP32[$2 + 24 >> 2]) & 1) {
  label$2 : {
   if (!(HEAPU8[$2 + 23 | 0] < 25 | HEAPU8[$2 + 23 | 0] > 25)) {
    jshUSARTSetup(HEAPU8[$2 + 23 | 0], $2 + 8 | 0);
    break label$2;
   }
   if (!HEAPU8[$2 + 23 | 0]) {
    if (HEAPU8[$2 + 12 | 0] != 255) {
     jshPinSetValue(HEAPU8[$2 + 12 | 0], 1);
     jshPinSetState(HEAPU8[$2 + 12 | 0], 3);
    }
    if (HEAPU8[$2 + 13 | 0] != 255) {
     jshPinSetValue(HEAPU8[$2 + 13 | 0], 1);
     jshPinSetState(HEAPU8[$2 + 13 | 0], 3);
    }
   }
  }
  label$7 : {
   if (HEAP32[$2 + 24 >> 2]) {
    jsvUnLock(jsvSetNamedChild(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]));
    break label$7;
   }
   jsvObjectRemoveChild(HEAP32[$2 + 28 >> 2], 37088);
  }
 }
 global$0 = $2 + 32 | 0;
}
function jsfIsErased($0, $1) {
 var $2 = 0;
 $2 = global$0 - 160 | 0;
 global$0 = $2;
 HEAP32[$2 + 152 >> 2] = $0;
 HEAP32[$2 + 148 >> 2] = $1;
 label$1 : {
  while (1) {
   if (HEAP32[$2 + 148 >> 2]) {
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 148 >> 2];
    if (HEAPU32[$2 + 12 >> 2] > 128) {
     HEAP32[$2 + 12 >> 2] = 128;
    }
    jshFlashRead($2 + 16 | 0, HEAP32[$2 + 152 >> 2], HEAP32[$2 + 12 >> 2]);
    HEAP32[$2 + 8 >> 2] = 0;
    while (1) {
     if (HEAPU32[$2 + 8 >> 2] < HEAPU32[$2 + 12 >> 2]) {
      if (HEAPU8[HEAP32[$2 + 8 >> 2] + ($2 + 16 | 0) | 0] != 255) {
       HEAP8[$2 + 159 | 0] = 0;
       break label$1;
      } else {
       HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 1;
       continue;
      }
     }
     break;
    }
    HEAP32[$2 + 152 >> 2] = HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 148 >> 2] = HEAP32[$2 + 148 >> 2] - HEAP32[$2 + 12 >> 2];
    continue;
   }
   break;
  }
  HEAP8[$2 + 159 | 0] = 1;
 }
 global$0 = $2 + 160 | 0;
 return HEAP8[$2 + 159 | 0] & 1;
}
function tflite__MatchingFlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$3 + 28 >> 2]);
 HEAP32[$3 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 12 >> 2] < HEAP32[$3 + 16 >> 2]) {
   if (HEAP32[$3 + 12 >> 2] != HEAP32[$3 + 24 >> 2]) {
    label$4 : {
     if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 12 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 12 >> 2]) | 0)) {
      break label$4;
     }
    }
   }
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 $0 = tflite__FlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2]);
 global$0 = $3 + 32 | 0;
 return $0;
}
function jswrap_graphics_getFont($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 96 | 0;
 global$0 = $1;
 HEAP32[$1 + 88 >> 2] = $0;
 label$1 : {
  if (!(graphicsGetFromVar($1 + 16 | 0, HEAP32[$1 + 88 >> 2]) & 1)) {
   HEAP32[$1 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = (HEAPU8[$1 + 41 | 0] | HEAPU8[$1 + 42 | 0] << 8) & 57344;
  if (!HEAP32[$1 + 12 >> 2]) {
   HEAP32[$1 >> 2] = (HEAPU8[$1 + 41 | 0] | HEAPU8[$1 + 42 | 0] << 8) & 8191;
   HEAP32[$1 + 92 >> 2] = jsvVarPrintf(39038, $1);
   break label$1;
  }
  if (HEAP32[$1 + 12 >> 2] == 8192) {
   HEAP32[$1 + 92 >> 2] = jsvNewFromString(39004);
   break label$1;
  }
  if (HEAP32[$1 + 12 >> 2] == 16384) {
   HEAP32[$1 + 92 >> 2] = jsvNewFromString(39008);
   break label$1;
  }
  if (HEAP32[$1 + 12 >> 2] == 24576) {
   HEAP32[$1 + 92 >> 2] = jsvNewFromString(39047);
   break label$1;
  }
  HEAP32[$1 + 92 >> 2] = jsvNewFromInteger(HEAPU8[$1 + 41 | 0] | HEAPU8[$1 + 42 | 0] << 8);
 }
 global$0 = $1 + 96 | 0;
 return HEAP32[$1 + 92 >> 2];
}
function jswrap_array_concat($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $3 = $2 + 16 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = jsvNewWithFlags(3);
 jsvObjectIteratorNew($3, HEAP32[$2 + 24 >> 2]);
 HEAP32[$2 + 12 >> 2] = jsvLockAgain(HEAP32[$2 + 28 >> 2]);
 while (1) {
  label$2 : {
   if (jsvIsArray(HEAP32[$2 + 12 >> 2]) & 1) {
    jsvArrayPushAll(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 12 >> 2]);
    break label$2;
   }
   jsvArrayPush(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 12 >> 2]);
  }
  $1 = $2 + 16 | 0;
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  $0 = $2;
  label$4 : {
   if (jsvObjectIteratorHasValue($1) & 1) {
    $1 = jsvObjectIteratorGetValue($2 + 16 | 0);
    break label$4;
   }
   $1 = 0;
  }
  HEAP32[$0 + 12 >> 2] = $1;
  jsvObjectIteratorNext($2 + 16 | 0);
  if (HEAP32[$2 + 12 >> 2]) {
   continue;
  }
  break;
 }
 jsvObjectIteratorFree($2 + 16 | 0);
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 20 >> 2];
}
function jsvIsStringNumericStrict($0) {
 var $1 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 HEAP32[$1 + 40 >> 2] = $0;
 jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 40 >> 2], 0);
 HEAP8[$1 + 15 | 0] = 0;
 HEAP8[$1 + 14 | 0] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 label$1 : {
  while (1) {
   if (jsvStringIteratorHasChar($1 + 16 | 0) & 1) {
    HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
    HEAP8[$1 + 7 | 0] = jsvStringIteratorGetCharAndNext($1 + 16 | 0);
    if (!(isNumeric(HEAP8[$1 + 7 | 0]) & 1)) {
     jsvStringIteratorFree($1 + 16 | 0);
     HEAP8[$1 + 47 | 0] = 0;
     break label$1;
    }
    if (!(HEAP8[$1 + 15 | 0] & 1 | HEAP8[$1 + 7 | 0] != 48)) {
     HEAP8[$1 + 14 | 0] = 1;
    }
    if (HEAP8[$1 + 7 | 0] != 48) {
     HEAP8[$1 + 15 | 0] = 1;
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree($1 + 16 | 0);
  HEAP8[$1 + 47 | 0] = (HEAP32[$1 + 8 >> 2] > 0 ? HEAP8[$1 + 14 | 0] & 1 ? HEAP32[$1 + 8 >> 2] == 1 : 1 : 0) & 1;
 }
 global$0 = $1 + 48 | 0;
 return HEAP8[$1 + 47 | 0] & 1;
}
function jswrap_waveform_kill() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 HEAP32[$0 + 28 >> 2] = jsvObjectGetChild(HEAP32[23775], 37454, 0);
 if (HEAP32[$0 + 28 >> 2]) {
  jsvObjectIteratorNew($0 + 24 | 0, HEAP32[$0 + 28 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($0 + 24 | 0) & 1) {
    HEAP32[$0 + 20 >> 2] = jsvObjectIteratorGetValue($0 + 24 | 0);
    HEAP8[$0 + 19 | 0] = jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$0 + 20 >> 2], 37459, 0)) & 1;
    if (HEAP8[$0 + 19 | 0] & 1) {
     HEAP32[$0 + 12 >> 2] = jswrap_waveform_getBuffer(HEAP32[$0 + 20 >> 2], 0, 0);
     if (!(jstStopBufferTimerTask(HEAP32[$0 + 12 >> 2]) & 1)) {
      jsExceptionHere(1, 37516, 0);
     }
     jsvUnLock(HEAP32[$0 + 12 >> 2]);
    }
    $1 = $0 + 24 | 0;
    jsvUnLock(HEAP32[$0 + 20 >> 2]);
    jsvObjectIteratorRemoveAndGotoNext($1, HEAP32[$0 + 28 >> 2]);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($0 + 24 | 0);
  jsvUnLock(HEAP32[$0 + 28 >> 2]);
 }
 global$0 = $0 + 32 | 0;
}
function jswrap_flash_write($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $3 = global$0 - 16 | 0;
 $2 = $3;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 label$1 : {
  if (jsvIsUndefined(HEAP32[$2 + 12 >> 2]) & 1) {
   jsExceptionHere(1, 32696, 0);
   break label$1;
  }
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 >> 2] = jsvGetDataPointer(HEAP32[$2 + 12 >> 2], $2 + 4 | 0);
  if (!HEAP32[$2 >> 2]) {
   HEAP32[$2 + 4 >> 2] = jsvIterateCallbackCount(HEAP32[$2 + 12 >> 2]);
   label$4 : {
    if (HEAP32[$2 + 4 >> 2] + 256 >>> 0 > 1e6) {
     jsExceptionHere(1, 32716, 0);
     break label$4;
    }
    $0 = $3 - (HEAP32[$2 + 4 >> 2] + 15 & -16) | 0;
    global$0 = $0;
    HEAP32[$2 >> 2] = $0;
    jsvIterateCallbackToBytes(HEAP32[$2 + 12 >> 2], HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]);
   }
  }
  if (!HEAP32[$2 >> 2] | !HEAP32[$2 + 4 >> 2]) {
   break label$1;
  }
  jshFlashWriteAligned(HEAP32[$2 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
 }
 global$0 = $2 + 16 | 0;
}
function jswrap_pipe_close_listener($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1 : {
  if (!(jsvIsObject(HEAP32[$2 + 28 >> 2]) & 1)) {
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = pipeGetArray(0);
  if (!HEAP32[$2 + 20 >> 2]) {
   break label$1;
  }
  jsvObjectIteratorNew($2 + 16 | 0, HEAP32[$2 + 20 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($2 + 16 | 0) & 1) {
    HEAP32[$2 + 12 >> 2] = jsvObjectIteratorGetValue($2 + 16 | 0);
    HEAP32[$2 + 8 >> 2] = jsvObjectGetChild(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 24 >> 2], 0);
    if (HEAP32[$2 + 8 >> 2] == HEAP32[$2 + 28 >> 2]) {
     handlePipeClose(HEAP32[$2 + 20 >> 2], $2 + 16 | 0, HEAP32[$2 + 12 >> 2]);
    }
    $0 = $2 + 16 | 0;
    jsvUnLock2(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
    jsvObjectIteratorNext($0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($2 + 16 | 0);
  jsvUnLock(HEAP32[$2 + 20 >> 2]);
 }
 global$0 = $2 + 32 | 0;
}
function jspExecuteFunction($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 48 | 0;
 global$0 = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP32[$4 + 32 >> 2] = $3;
 $0 = $4 + 8 | 0;
 HEAP32[$0 + 16 >> 2] = HEAP32[23778];
 $1 = HEAP32[23777];
 HEAP32[$0 + 8 >> 2] = HEAP32[23776];
 HEAP32[$0 + 12 >> 2] = $1;
 $1 = HEAP32[23775];
 HEAP32[$0 >> 2] = HEAP32[23774];
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[23776] = 0;
 HEAP32[23778] = 1;
 HEAP32[23777] = 0;
 HEAP32[$4 + 4 >> 2] = jspeFunctionCall(HEAP32[$4 + 44 >> 2], 0, HEAP32[$4 + 40 >> 2], 0, HEAP32[$4 + 36 >> 2], HEAP32[$4 + 32 >> 2]);
 jspeiClearScopes();
 HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] | HEAP32[23778] & 6256;
 jspeiClearScopes();
 $1 = HEAP32[$0 + 4 >> 2];
 HEAP32[23774] = HEAP32[$0 >> 2];
 HEAP32[23775] = $1;
 HEAP32[23778] = HEAP32[$0 + 16 >> 2];
 $1 = HEAP32[$0 + 12 >> 2];
 HEAP32[23776] = HEAP32[$0 + 8 >> 2];
 HEAP32[23777] = $1;
 global$0 = $4 + 48 | 0;
 return HEAP32[$4 + 4 >> 2];
}
function jsi2cPopulateI2CInfo($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 $3 = $2 + 16 | 0;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 jshI2CInitInfo(HEAP32[$2 + 56 >> 2]);
 HEAP32[$2 + 16 >> 2] = 7400;
 HEAP16[$2 + 20 >> 1] = 12;
 HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 56 >> 2] + 4;
 HEAP32[$2 + 28 >> 2] = 7404;
 HEAP16[$2 + 32 >> 1] = 12;
 HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 56 >> 2] + 5;
 HEAP32[$2 + 40 >> 2] = 7408;
 HEAP16[$2 + 44 >> 1] = 9;
 HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 56 >> 2];
 label$1 : {
  if (jsvReadConfigObject(HEAP32[$2 + 52 >> 2], $3, 3) & 1) {
   HEAP8[$2 + 15 | 0] = 1;
   $0 = HEAP32[$2 + 56 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) < 100) {
    jsExceptionHere(1, 7416, 0);
    HEAP8[$2 + 15 | 0] = 0;
   }
   HEAP8[$2 + 63 | 0] = HEAP8[$2 + 15 | 0] & 1;
   break label$1;
  }
  HEAP8[$2 + 63 | 0] = 0;
 }
 global$0 = $2 - -64 | 0;
 return HEAP8[$2 + 63 | 0] & 1;
}
function i2c_stop($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jshPinSetValue(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0], 0);
 dly(HEAP32[$1 + 12 >> 2]);
 jshPinSetValue(HEAPU8[HEAP32[$1 + 12 >> 2]], 1);
 HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
 while (1) {
  if (jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2]]) & 1) {
   $0 = 0;
  } else {
   $0 = HEAP32[$1 + 8 >> 2];
  }
  if ($0) {
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + -1;
   continue;
  }
  break;
 }
 if (!(HEAP32[$1 + 8 >> 2] | !HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2])) {
  err(7512);
 }
 dly(HEAP32[$1 + 12 >> 2]);
 jshPinSetValue(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0], 1);
 dly(HEAP32[$1 + 12 >> 2]);
 label$6 : {
  if (!HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2]) {
   break label$6;
  }
  if (jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]) & 1) {
   break label$6;
  }
  err(7527);
 }
 dly(HEAP32[$1 + 12 >> 2]);
 HEAP8[HEAP32[$1 + 12 >> 2] + 2 | 0] = 0;
 global$0 = $1 + 16 | 0;
}
function tflite__MicroMutableOpResolver__FindOp_28char_20const__2c_20int_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP32[$3 + 12 >> 2] = 0;
 label$1 : {
  while (1) {
   if (HEAP32[$3 + 12 >> 2] < HEAP32[$0 + 4100 >> 2]) {
    HEAP32[$3 + 8 >> 2] = ($0 + 4 | 0) + (HEAP32[$3 + 12 >> 2] << 5);
    label$4 : {
     if (HEAP32[HEAP32[$3 + 8 >> 2] + 20 >> 2] != 32) {
      break label$4;
     }
     if (strcmp(HEAP32[HEAP32[$3 + 8 >> 2] + 24 >> 2], HEAP32[$3 + 20 >> 2]) | HEAP32[HEAP32[$3 + 8 >> 2] + 28 >> 2] != HEAP32[$3 + 16 >> 2]) {
      break label$4;
     }
     HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
     break label$1;
    }
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$3 + 28 >> 2] = 0;
 }
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function jswrap_regexp_constructor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1 : {
  if (!(jsvIsString(HEAP32[$2 + 40 >> 2]) & 1)) {
   HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 40 >> 2];
   jsExceptionHere(3, 36737, $2 + 16 | 0);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 32 >> 2] = jspNewObject(0, 36780);
  jsvObjectSetChild(HEAP32[$2 + 32 >> 2], 36787, HEAP32[$2 + 40 >> 2]);
  if (!(jsvIsUndefined(HEAP32[$2 + 36 >> 2]) & 1)) {
   label$4 : {
    if (!(jsvIsString(HEAP32[$2 + 36 >> 2]) & 1)) {
     HEAP32[$2 >> 2] = HEAP32[$2 + 40 >> 2];
     jsExceptionHere(3, 36737, $2);
     break label$4;
    }
    jsvObjectSetChild(HEAP32[$2 + 32 >> 2], 36794, HEAP32[$2 + 36 >> 2]);
   }
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 32 >> 2], 36800, jsvNewFromInteger(0));
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
 }
 global$0 = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}
function jsvStringIteratorGotoEnd($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 while (1) {
  if (jsvGetLastChild(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 65535) {
   HEAP32[$1 + 8 >> 2] = jsvLock(jsvGetLastChild(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 65535);
   jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
   HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2] = HEAP32[$1 + 8 >> 2];
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] + HEAP32[$0 + 8 >> 2];
   $0 = jsvGetCharactersInVar(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
   HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = $0;
   continue;
  }
  break;
 }
 HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
 label$3 : {
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) {
   HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] - 1;
   break label$3;
  }
  HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
}
function lcdSetPixel_ArrayBuffer_flat1($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 $0 = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$4 + 20 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
 label$1 : {
  if (HEAP32[$4 + 16 >> 2]) {
   $0 = HEAP32[$4 + 28 >> 2];
   $0 = (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) + (HEAP32[$4 + 12 >> 2] >> 3) | 0;
   HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 128 >> (HEAP32[$4 + 12 >> 2] & 7) & 255;
   break label$1;
  }
  $0 = HEAP32[$4 + 28 >> 2];
  $0 = (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) + (HEAP32[$4 + 12 >> 2] >> 3) | 0;
  HEAP8[$0 | 0] = HEAPU8[$0 | 0] & (65407 >> (HEAP32[$4 + 12 >> 2] & 7) & 255);
 }
}
function jsiExecuteEventCallbackArgsArray($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $4 = global$0 - 32 | 0;
 $3 = $4;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 label$1 : {
  if (HEAP32[$3 + 16 >> 2]) {
   HEAP32[$3 + 12 >> 2] = jsvGetArrayLength(HEAP32[$3 + 16 >> 2]);
   if (HEAP32[$3 + 12 >> 2]) {
    $0 = $4 - ((HEAP32[$3 + 12 >> 2] << 2) + 15 & -16) | 0;
    global$0 = $0;
    HEAP32[$3 + 8 >> 2] = $0;
    if (!HEAP32[$3 + 8 >> 2]) {
     HEAP8[$3 + 31 | 0] = 0;
     break label$1;
    }
    jsvGetArrayItems(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
   }
  }
  HEAP8[$3 + 7 | 0] = jsiExecuteEventCallback(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]) & 1;
  jsvUnLockMany(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
  HEAP8[$3 + 31 | 0] = HEAP8[$3 + 7 | 0] & 1;
 }
 global$0 = $3 + 32 | 0;
 return HEAP8[$3 + 31 | 0] & 1;
}
function jsvIteratorNext($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[HEAP32[$1 + 12 >> 2] >> 2] + -1 | 0;
 label$1 : {
  if ($0 >>> 0 > 3) {
   break label$1;
  }
  label$2 : {
   switch ($0 - 1 | 0) {
   case 2:
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
    label$6 : {
     if (!(jsvIsIntegerish(HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) & 1)) {
      break label$6;
     }
     if ((jsvGetInteger(HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) | 0) >= HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) {
      break label$6;
     }
     jsvObjectIteratorNext(HEAP32[$1 + 12 >> 2] + 4 | 0);
    }
    break label$1;
   case 0:
    jsvObjectIteratorNext(HEAP32[$1 + 12 >> 2] + 4 | 0);
    break label$1;
   default:
    jsvStringIteratorNext(HEAP32[$1 + 12 >> 2] + 4 | 0);
    break label$1;
   case 1:
    break label$2;
   }
  }
  jsvArrayBufferIteratorNext(HEAP32[$1 + 12 >> 2] + 4 | 0);
 }
 global$0 = $1 + 16 | 0;
}
function jshGetSerialNumber($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 32 | 0;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = 32;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = -559030611;
 HEAP32[$1 + 12 >> 2] = -559030611;
 $0 = HEAP32[$1 + 28 >> 2];
 $2 = HEAPU8[$1 + 20 | 0] | HEAPU8[$1 + 21 | 0] << 8 | (HEAPU8[$1 + 22 | 0] << 16 | HEAPU8[$1 + 23 | 0] << 24);
 HEAP8[$0 | 0] = $2;
 HEAP8[$0 + 1 | 0] = $2 >>> 8;
 HEAP8[$0 + 2 | 0] = $2 >>> 16;
 HEAP8[$0 + 3 | 0] = $2 >>> 24;
 $2 = HEAP32[$1 + 28 >> 2];
 $0 = HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8 | (HEAPU8[$1 + 14 | 0] << 16 | HEAPU8[$1 + 15 | 0] << 24);
 $1 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24);
 HEAP8[$2 + 4 | 0] = $1;
 HEAP8[$2 + 5 | 0] = $1 >>> 8;
 HEAP8[$2 + 6 | 0] = $1 >>> 16;
 HEAP8[$2 + 7 | 0] = $1 >>> 24;
 HEAP8[$2 + 8 | 0] = $0;
 HEAP8[$2 + 9 | 0] = $0 >>> 8;
 HEAP8[$2 + 10 | 0] = $0 >>> 16;
 HEAP8[$2 + 11 | 0] = $0 >>> 24;
 return 12;
}
function tflite__GetQuantizedConvolutionMultipler_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20double__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 48 | 0;
 global$0 = $5;
 HEAP32[$5 + 40 >> 2] = $0;
 HEAP32[$5 + 36 >> 2] = $1;
 HEAP32[$5 + 32 >> 2] = $2;
 HEAP32[$5 + 28 >> 2] = $3;
 HEAP32[$5 + 24 >> 2] = $4;
 HEAPF64[$5 + 16 >> 3] = Math_fround(HEAPF32[HEAP32[$5 + 36 >> 2] + 12 >> 2] * HEAPF32[HEAP32[$5 + 32 >> 2] + 12 >> 2]);
 label$1 : {
  if (!(HEAPF64[$5 + 16 >> 3] >= 0)) {
   $0 = HEAP32[HEAP32[$5 + 40 >> 2] + 20 >> 2];
   $1 = HEAP32[$5 + 40 >> 2];
   HEAP32[$5 + 8 >> 2] = 49586;
   HEAP32[$5 + 4 >> 2] = 118;
   HEAP32[$5 >> 2] = 49130;
   FUNCTION_TABLE[$0]($1, 49290, $5);
   HEAP32[$5 + 44 >> 2] = 1;
   break label$1;
  }
  HEAPF64[HEAP32[$5 + 24 >> 2] >> 3] = HEAPF64[$5 + 16 >> 3] / +HEAPF32[HEAP32[$5 + 28 >> 2] + 12 >> 2];
  HEAP32[$5 + 44 >> 2] = 0;
 }
 global$0 = $5 + 48 | 0;
 return HEAP32[$5 + 44 >> 2];
}
function jswrap_storage_readJSON($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP8[$2 + 71 | 0] = $1;
 jsfNameFromVar($2 + 32 | 0, HEAP32[$2 + 72 >> 2]);
 HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 56 >> 2];
 $0 = HEAP32[$2 + 52 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 48 >> 2];
 HEAP32[$2 + 20 >> 2] = $0;
 $0 = HEAP32[$2 + 44 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 40 >> 2];
 HEAP32[$2 + 12 >> 2] = $0;
 $0 = HEAP32[$2 + 36 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$2 + 32 >> 2];
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 + 64 >> 2] = jsfReadFile($2, 0, 0);
 label$1 : {
  if (!HEAP32[$2 + 64 >> 2]) {
   HEAP32[$2 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = jswrap_json_parse(HEAP32[$2 + 64 >> 2]);
  jsvUnLock(HEAP32[$2 + 64 >> 2]);
  if (HEAP8[$2 + 71 | 0] & 1) {
   jsvUnLock(jspGetException());
  }
  HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 28 >> 2];
 }
 global$0 = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}
function btnHandlerCommon($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP8[$3 + 11 | 0] = $1;
 HEAP8[$3 + 10 | 0] = $2;
 label$1 : {
  if (HEAP32[62813]) {
   label$3 : {
    if (!(!(HEAP32[62815] & 8) | HEAP32[$3 + 12 >> 2] != 3 ? !((HEAP32[$3 + 12 >> 2] == 1 ? HEAP32[62815] & 2 : 0) | (HEAP32[$3 + 12 >> 2] == 2 ? HEAP32[62815] & 4 : 0)) : 0)) {
     HEAP16[125629] = 0;
     if (!(!(HEAP8[$3 + 11 | 0] & 1) | HEAP8[251256] & 1)) {
      HEAP32[62816] = HEAP32[62816] | 1;
      HEAP8[251268] = HEAP32[$3 + 12 >> 2];
      break label$1;
     }
     break label$3;
    }
    if (!(HEAP8[251256] & 1)) {
     break label$1;
    }
    HEAP16[125629] = 0;
   }
  }
  if (!(HEAP8[$3 + 11 | 0] & 1 | HEAP32[$3 + 12 >> 2] != HEAP8[251268])) {
   HEAP8[251268] = 0;
   break label$1;
  }
  jshPushIOEvent((HEAPU8[$3 + 10 | 0] | (HEAP8[$3 + 11 | 0] & 1 ? 32 : 0)) & 255, jshGetSystemTime(), i64toi32_i32$HIGH_BITS);
 }
 global$0 = $3 + 16 | 0;
}
function jswrap_modules_addCached($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1 : {
  label$2 : {
   if (jsvIsString(HEAP32[$2 + 28 >> 2]) & 1) {
    if (jsvIsString(HEAP32[$2 + 24 >> 2]) & 1) {
     break label$2;
    }
    if (jsvIsFunction(HEAP32[$2 + 24 >> 2]) & 1) {
     break label$2;
    }
   }
   jsExceptionHere(1, 34619, 0);
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = jswrap_modules_getModuleList();
  if (!HEAP32[$2 + 20 >> 2]) {
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = jspEvaluateModule(HEAP32[$2 + 24 >> 2]);
  label$4 : {
   if (!HEAP32[$2 + 16 >> 2]) {
    HEAP32[$2 >> 2] = HEAP32[$2 + 28 >> 2];
    jsExceptionHere(1, 34667, $2);
    break label$4;
   }
   jsvObjectSetChildVar(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 16 >> 2]);
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
  }
  jsvUnLock(HEAP32[$2 + 20 >> 2]);
 }
 global$0 = $2 + 32 | 0;
}
function _jswrap_array_sort_compare($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 label$1 : {
  if (HEAP32[$3 + 32 >> 2]) {
   HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 40 >> 2];
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 36 >> 2];
   HEAPF64[$3 + 16 >> 3] = jsvGetFloatAndUnLock(jspeFunctionCall(HEAP32[$3 + 32 >> 2], 0, 0, 0, 2, $3 + 24 | 0));
   if (HEAPF64[$3 + 16 >> 3] == 0) {
    HEAP32[$3 + 44 >> 2] = 0;
    break label$1;
   }
   HEAP32[$3 + 44 >> 2] = HEAPF64[$3 + 16 >> 3] < 0 ? -1 : 1;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvAsString(HEAP32[$3 + 40 >> 2]);
  HEAP32[$3 + 8 >> 2] = jsvAsString(HEAP32[$3 + 36 >> 2]);
  HEAP32[$3 + 4 >> 2] = jsvCompareString(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 0, 0);
  jsvUnLock2(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
  HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 4 >> 2];
 }
 global$0 = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}
function tflite__GreedyMemoryPlanner__GetOffsetForBuffer_28tflite__ErrorReporter__2c_20int_2c_20int__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 $0 = HEAP32[$4 + 24 >> 2];
 tflite__GreedyMemoryPlanner__CalculateOffsetsIfNeeded_28_29($0);
 label$1 : {
  if (!(HEAP32[$4 + 16 >> 2] < HEAP32[$0 + 8 >> 2] ? HEAP32[$4 + 16 >> 2] >= 0 : 0)) {
   $1 = HEAP32[$4 + 20 >> 2];
   $2 = HEAP32[$4 + 16 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 8 >> 2];
   HEAP32[$4 >> 2] = $2;
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($1, 48561, $4);
   HEAP32[$4 + 28 >> 2] = 1;
   break label$1;
  }
  HEAP32[HEAP32[$4 + 12 >> 2] >> 2] = HEAP32[HEAP32[$0 + 32 >> 2] + (HEAP32[$4 + 16 >> 2] << 2) >> 2];
  HEAP32[$4 + 28 >> 2] = 0;
 }
 global$0 = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}
function tflite__reference_ops__Logistic_28tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 20 >> 2]);
 HEAP32[$4 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 8 >> 2] < HEAP32[$4 + 12 >> 2]) {
   HEAPF32[$4 + 4 >> 2] = HEAPF32[HEAP32[$4 + 24 >> 2] + (HEAP32[$4 + 8 >> 2] << 2) >> 2];
   HEAPF32[$4 >> 2] = Math_fround(1) / Math_fround(Math_fround(1) + exp_28float_29(Math_fround(-HEAPF32[$4 + 4 >> 2])));
   HEAPF32[HEAP32[$4 + 16 >> 2] + (HEAP32[$4 + 8 >> 2] << 2) >> 2] = HEAPF32[$4 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $4 + 32 | 0;
}
function st_yield_literal_1($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1 : {
  if (HEAPU32[HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2] >> 2] < HEAPU32[HEAP32[$2 + 20 >> 2] + 4 >> 2]) {
   HEAP16[$2 + 18 >> 1] = get_bits(HEAP32[$2 + 24 >> 2], 8);
   if (HEAPU16[$2 + 18 >> 1] == 65535) {
    HEAP32[$2 + 28 >> 2] = 1;
    break label$1;
   }
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 24 >> 2] + 45;
   HEAP16[$2 + 10 >> 1] = 255;
   HEAP8[$2 + 9 | 0] = HEAPU16[$2 + 18 >> 1];
   $1 = HEAPU8[$2 + 9 | 0];
   $4 = HEAP32[$2 + 12 >> 2];
   $3 = HEAP32[$2 + 24 >> 2];
   $0 = HEAPU16[$3 + 8 >> 1];
   HEAP16[$3 + 8 >> 1] = $0 + 1;
   HEAP8[($0 & HEAPU16[$2 + 10 >> 1]) + $4 | 0] = $1;
   push_byte(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAPU8[$2 + 9 | 0]);
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = 1;
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function jsiSemiInit($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = $0;
 jspSoftInit();
 HEAP8[95196] = 0;
 HEAP16[47566] = HEAPU16[47566] & 1760;
 HEAP8[53361] = 255;
 $0 = $1;
 if (HEAP8[$1 + 15 | 0] & 1) {
  $2 = jsfFlashContainsCode();
 } else {
  $2 = 0;
 }
 HEAP8[$0 + 14 | 0] = $2 & 1;
 if (HEAP8[$1 + 14 | 0] & 1) {
  HEAP16[47566] = HEAPU16[47566] & -2049;
  jspSoftKill();
  jsvClearEmptyVarList();
  jsfLoadStateFromFlash();
  jsvCreateEmptyVarList();
  jspSoftInit();
 }
 HEAP32[$1 + 8 >> 2] = jsvObjectGetChild(HEAP32[23775], 5529, 0);
 if (HEAP32[$1 + 8 >> 2]) {
  HEAP16[47566] = HEAPU16[47566] | 1024;
 }
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 jsiSoftInit((HEAPU8[$1 + 15 | 0] ^ -1) & 1);
 if (jsiEcho() & 1) {
  if (!(HEAP8[$1 + 14 | 0] & 1)) {
   if (HEAPU8[53360] != 20) {
    jsiConsolePrintString(5533);
   }
  }
  if (HEAPU8[53360] != 20) {
   jsiConsolePrintString(5719);
  }
  HEAP8[95140] = 1;
 }
 global$0 = $1 + 16 | 0;
}
function tflite__MicroInterpreter__input_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = 0;
 $0 = HEAP32[$1 + 24 >> 2];
 HEAP32[$1 + 16 >> 2] = tflite__Model__operator_codes_28_29_20const(HEAP32[$0 + 128 >> 2]);
 HEAP32[$1 + 12 >> 2] = flatbuffers__Vector_int___size_28_29_20const(HEAP32[$1 + 16 >> 2]);
 label$1 : {
  if (!(HEAPU32[$1 + 20 >> 2] < HEAPU32[$1 + 12 >> 2] ? HEAPU32[$1 + 20 >> 2] >= 0 : 0)) {
   $0 = HEAP32[$0 + 8 >> 2];
   $2 = HEAP32[$1 + 20 >> 2];
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 12 >> 2];
   HEAP32[$1 >> 2] = $2;
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 40224, $1);
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 20 >> 2] + Math_imul(flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]), 56);
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function jswrap_promise_resolve($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = 0;
 label$1 : {
  if (_jswrap_promise_is_promise(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  if (jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 >> 2] = jsvObjectGetChild(HEAP32[$1 + 8 >> 2], 36662, 0);
   if (jsvIsFunction(HEAP32[$1 >> 2]) & 1) {
    HEAP32[$1 + 4 >> 2] = jswrap_promise_constructor(HEAP32[$1 >> 2]);
   }
   jsvUnLock(HEAP32[$1 >> 2]);
   if (HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
    break label$1;
   }
  }
  HEAP32[$1 + 4 >> 2] = jspromise_create();
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  jspromise_resolve(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function graphicsVectorCharWidth($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP8[$3 + 19 | 0] = $2;
 HEAP32[$3 + 12 >> 2] = vfGetCharPtr(HEAP8[$3 + 19 | 0], 0, 0, 0);
 label$1 : {
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 20 >> 2] >>> 1;
   break label$1;
  }
  HEAP32[$3 + 8 >> 2] = 0;
  while (1) {
   if (HEAPU8[HEAP32[$3 + 12 >> 2]] != 255) {
    if (HEAPU8[HEAP32[$3 + 12 >> 2]] != 254) {
     HEAP8[$3 + 7 | 0] = HEAPU8[HEAP32[$3 + 12 >> 2]];
     HEAP32[$3 >> 2] = HEAPU8[$3 + 7 | 0] & 15;
     if (HEAP32[$3 >> 2] > HEAP32[$3 + 8 >> 2]) {
      HEAP32[$3 + 8 >> 2] = HEAP32[$3 >> 2];
     }
    }
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$3 + 28 >> 2] = ((Math_imul(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 8 >> 2] + 1 | 0) << 4 >>> 0) / 12 | 0) + 7 >>> 4;
 }
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function jswrap_arraybuffer_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!(HEAP32[$1 + 8 >> 2] <= 65535 ? HEAP32[$1 + 8 >> 2] >= 0 : 0)) {
   jsExceptionHere(1, 30799, 0);
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$1 + 8 >> 2] > 65535) {
   jsExceptionHere(1, 30831, 0);
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = 0;
  if (HEAP32[$1 + 8 >> 2] > 22) {
   HEAP32[$1 + 4 >> 2] = jsvNewFlatStringOfLength(HEAP32[$1 + 8 >> 2]);
  }
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 4 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 8 >> 2], 0);
  }
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 >> 2] = jsvNewArrayBufferFromString(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jswrap_espruino_sum($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 80 | 0;
 global$0 = $1;
 HEAP32[$1 + 68 >> 2] = $0;
 label$1 : {
  label$2 : {
   if (jsvIsString(HEAP32[$1 + 68 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsArray(HEAP32[$1 + 68 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsArrayBuffer(HEAP32[$1 + 68 >> 2]) & 1) {
    break label$2;
   }
   HEAP32[$1 >> 2] = HEAP32[$1 + 68 >> 2];
   jsExceptionHere(1, 31691, $1);
   HEAPF64[$1 + 72 >> 3] = nan;
   break label$1;
  }
  HEAPF64[$1 + 56 >> 3] = 0;
  jsvIteratorNew($1 + 8 | 0, HEAP32[$1 + 68 >> 2], 0);
  while (1) {
   if (jsvIteratorHasElement($1 + 8 | 0) & 1) {
    $0 = $1 + 8 | 0;
    $2 = jsvIteratorGetFloatValue($0);
    HEAPF64[$1 + 56 >> 3] = HEAPF64[$1 + 56 >> 3] + $2;
    jsvIteratorNext($0);
    continue;
   }
   break;
  }
  jsvIteratorFree($1 + 8 | 0);
  HEAPF64[$1 + 72 >> 3] = HEAPF64[$1 + 56 >> 3];
 }
 global$0 = $1 + 80 | 0;
 return +HEAPF64[$1 + 72 >> 3];
}
function jswrap_pipe_drain_listener($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 label$1 : {
  if (!(jsvIsObject(HEAP32[$1 + 28 >> 2]) & 1)) {
   break label$1;
  }
  HEAP32[$1 + 24 >> 2] = pipeGetArray(0);
  if (!HEAP32[$1 + 24 >> 2]) {
   break label$1;
  }
  jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($1 + 16 | 0) & 1) {
    HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue($1 + 16 | 0);
    HEAP32[$1 + 8 >> 2] = jsvObjectGetChild(HEAP32[$1 + 12 >> 2], 36045, 0);
    if (HEAP32[$1 + 8 >> 2] == HEAP32[$1 + 28 >> 2]) {
     jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 36239, jsvNewFromBool(0));
    }
    $0 = $1 + 16 | 0;
    jsvUnLock2(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
    jsvObjectIteratorNext($0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($1 + 16 | 0);
  jsvUnLock(HEAP32[$1 + 24 >> 2]);
 }
 global$0 = $1 + 32 | 0;
}
function jspeFunctionDefinition($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP8[$1 + 27 | 0] = $0;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP8[$1 + 19 | 0] = (HEAP32[23778] & 63) == 1;
 if (HEAP8[$1 + 19 | 0] & 1) {
  HEAP32[$1 + 20 >> 2] = jsvNewWithFlags(7);
 }
 HEAP32[$1 + 12 >> 2] = 0;
 if (!(!(HEAP8[$1 + 27 | 0] & 1) | HEAP16[HEAP32[13768] + 2 >> 1] != 128)) {
  if (HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 12 >> 2] = jslGetTokenValueAsVar();
  }
  jslGetNextToken();
 }
 label$4 : {
  if (!(jspeFunctionArguments(HEAP32[$1 + 20 >> 2]) & 1)) {
   jsvUnLock2(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 20 >> 2]);
   HEAP32[$1 + 28 >> 2] = 0;
   break label$4;
  }
  jspeFunctionDefinitionInternal(HEAP32[$1 + 20 >> 2], 0);
  if (!(!HEAP32[$1 + 20 >> 2] | !HEAP32[$1 + 12 >> 2])) {
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 20 >> 2], 3862, HEAP32[$1 + 12 >> 2]);
  }
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function jsvCreateEmptyVarList() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 HEAP32[13770] = 1;
 HEAP16[27542] = 0;
 $1 = $0 + 16 | 0;
 jsvSetNextSibling($1, 0);
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP16[$0 + 10 >> 1] = 1;
 while (1) {
  if (HEAPU16[$0 + 10 >> 1] <= HEAPU32[13337]) {
   HEAP32[$0 + 4 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 10 >> 1]);
   label$3 : {
    if (!(HEAPU16[HEAP32[$0 + 4 >> 2] + 14 >> 1] & 63)) {
     jsvSetNextSibling(HEAP32[$0 + 12 >> 2], HEAPU16[$0 + 10 >> 1]);
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
     break label$3;
    }
    if (jsvIsFlatString(HEAP32[$0 + 4 >> 2]) & 1) {
     HEAP16[$0 + 10 >> 1] = HEAPU16[$0 + 10 >> 1] + jsvGetFlatStringBlocks(HEAP32[$0 + 4 >> 2]);
    }
   }
   HEAP16[$0 + 10 >> 1] = HEAPU16[$0 + 10 >> 1] + 1;
   continue;
  }
  break;
 }
 $1 = $0 + 16 | 0;
 jsvSetNextSibling(HEAP32[$0 + 12 >> 2], 0);
 HEAP16[27542] = jsvGetNextSibling($1);
 HEAP32[13770] = 0;
 global$0 = $0 + 32 | 0;
}
function jstSystemTimeChanged($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $1;
 HEAP8[$2 + 7 | 0] = HEAPU8[97074];
 while (1) {
  if (HEAPU8[$2 + 7 | 0] != HEAPU8[97073]) {
   $0 = Math_imul(HEAPU8[$2 + 7 | 0], 29) + 97088 | 0;
   $1 = $0;
   $4 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
   $3 = $4 + HEAP32[$2 + 8 >> 2] | 0;
   $0 = HEAP32[$2 + 12 >> 2] + (HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) | 0;
   $0 = $3 >>> 0 < $4 >>> 0 ? $0 + 1 | 0 : $0;
   HEAP8[$1 | 0] = $3;
   HEAP8[$1 + 1 | 0] = $3 >>> 8;
   HEAP8[$1 + 2 | 0] = $3 >>> 16;
   HEAP8[$1 + 3 | 0] = $3 >>> 24;
   HEAP8[$1 + 4 | 0] = $0;
   HEAP8[$1 + 5 | 0] = $0 >>> 8;
   HEAP8[$1 + 6 | 0] = $0 >>> 16;
   HEAP8[$1 + 7 | 0] = $0 >>> 24;
   HEAP8[$2 + 7 | 0] = HEAPU8[$2 + 7 | 0] + 1 & 15;
   continue;
  }
  break;
 }
}
function jswrap_espruino_variance($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0;
 $2 = global$0 - 96 | 0;
 global$0 = $2;
 HEAP32[$2 + 84 >> 2] = $0;
 HEAPF64[$2 + 72 >> 3] = $1;
 label$1 : {
  if (!(jsvIsIterable(HEAP32[$2 + 84 >> 2]) & 1)) {
   HEAP32[$2 >> 2] = HEAP32[$2 + 84 >> 2];
   jsExceptionHere(1, 31739, $2);
   HEAPF64[$2 + 88 >> 3] = nan;
   break label$1;
  }
  HEAPF64[$2 + 64 >> 3] = 0;
  jsvIteratorNew($2 + 16 | 0, HEAP32[$2 + 84 >> 2], 1);
  while (1) {
   if (jsvIteratorHasElement($2 + 16 | 0) & 1) {
    $0 = $2 + 16 | 0;
    HEAPF64[$2 + 8 >> 3] = jsvIteratorGetFloatValue($0);
    HEAPF64[$2 + 8 >> 3] = HEAPF64[$2 + 8 >> 3] - HEAPF64[$2 + 72 >> 3];
    HEAPF64[$2 + 64 >> 3] = HEAPF64[$2 + 64 >> 3] + HEAPF64[$2 + 8 >> 3] * HEAPF64[$2 + 8 >> 3];
    jsvIteratorNext($0);
    continue;
   }
   break;
  }
  jsvIteratorFree($2 + 16 | 0);
  HEAPF64[$2 + 88 >> 3] = HEAPF64[$2 + 64 >> 3];
 }
 global$0 = $2 + 96 | 0;
 return +HEAPF64[$2 + 88 >> 3];
}
function jsiTabComplete_findCommon($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
 label$1 : {
  if (jsvGetStringLength(HEAP32[$2 + 8 >> 2]) >>> 0 <= HEAPU32[HEAP32[$2 + 4 >> 2] >> 2]) {
   break label$1;
  }
  if (jsvCompareString(HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2], HEAP32[$2 + 8 >> 2], 0, 1)) {
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
  label$2 : {
   if (HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2]) {
    HEAP32[$2 >> 2] = jsvGetCommonCharacters(HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2], HEAP32[$2 + 8 >> 2]);
    jsvUnLock(HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2]);
    HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2] = HEAP32[$2 >> 2];
    break label$2;
   }
   $0 = jsvLockAgain(HEAP32[$2 + 8 >> 2]);
   HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2] = $0;
  }
 }
 global$0 = $2 + 16 | 0;
}
function jsiHandleMoveUpDown($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 $2 = $1 + 20 | 0;
 $3 = $1 + 24 | 0;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 16 >> 2] = jsvGetLinesInString(HEAP32[23784]);
 jsvGetLineAndCol(HEAP32[23784], HEAP32[23786], $2, $3);
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 24 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 20 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + HEAP32[$1 + 28 >> 2];
 if (HEAPU32[$1 + 8 >> 2] < 1) {
  HEAP32[$1 + 8 >> 2] = 1;
 }
 if (HEAPU32[$1 + 8 >> 2] > HEAPU32[$1 + 16 >> 2]) {
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 16 >> 2];
 }
 $0 = $1 + 8 | 0;
 $2 = $1 + 12 | 0;
 HEAP32[23786] = jsvGetIndexFromLineAndCol(HEAP32[23784], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
 jsvGetLineAndCol(HEAP32[23784], HEAP32[23786], $0, $2);
 if (jsiShowInputLine() & 1) {
  jsiMoveCursor(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2]);
 }
 global$0 = $1 + 32 | 0;
}
function int_20gemmlowp__RoundingHalfSum_int__28int_2c_20int_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 48 | 0;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 $0 = HEAP32[$2 + 44 >> 2];
 HEAP32[$2 + 32 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $0 >> 31;
 $0 = HEAP32[$2 + 40 >> 2];
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 28 >> 2] = $0 >> 31;
 $1 = HEAP32[$2 + 36 >> 2] + HEAP32[$2 + 28 >> 2] | 0;
 $0 = HEAP32[$2 + 24 >> 2];
 $3 = $0 + HEAP32[$2 + 32 >> 2] | 0;
 if ($3 >>> 0 < $0 >>> 0) {
  $1 = $1 + 1 | 0;
 }
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 20 >> 2];
 $0 = (($0 | 0) > 0 ? 1 : ($0 | 0) >= 0 ? HEAPU32[$2 + 16 >> 2] < 0 ? 0 : 1 : 0) ? 1 : -1;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $0 >> 31;
 $0 = HEAP32[$2 + 20 >> 2] + HEAP32[$2 + 12 >> 2] | 0;
 $1 = HEAP32[$2 + 8 >> 2];
 $2 = $1 + HEAP32[$2 + 16 >> 2] | 0;
 if ($2 >>> 0 < $1 >>> 0) {
  $0 = $0 + 1 | 0;
 }
 return __wasm_i64_sdiv($2, $0, 2);
}
function jsvArrayPopFirst($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535) {
   HEAP32[$1 + 4 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535);
   if ((jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535) == (jsvGetLastChild(HEAP32[$1 + 8 >> 2]) & 65535)) {
    jsvSetLastChild(HEAP32[$1 + 8 >> 2], 0);
   }
   jsvSetFirstChild(HEAP32[$1 + 8 >> 2], jsvGetNextSibling(HEAP32[$1 + 4 >> 2]) & 65535);
   jsvUnRef(HEAP32[$1 + 4 >> 2]);
   if (jsvGetNextSibling(HEAP32[$1 + 4 >> 2]) & 65535) {
    HEAP32[$1 >> 2] = jsvLock(jsvGetNextSibling(HEAP32[$1 + 4 >> 2]) & 65535);
    jsvSetPrevSibling(HEAP32[$1 >> 2], 0);
    jsvUnLock(HEAP32[$1 >> 2]);
   }
   jsvSetNextSibling(HEAP32[$1 + 4 >> 2], 0);
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function _jswrap_drawImageLayerNextXRepeat($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP8[HEAP32[$1 + 12 >> 2] + 33 | 0] & 1) {
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 136 >> 2] < 0) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 136 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 112 >> 2] + HEAP32[$0 + 136 >> 2];
  }
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 136 >> 2] >= HEAP32[HEAP32[$1 + 12 >> 2] + 112 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 136 >> 2] = HEAP32[$0 + 136 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 112 >> 2];
  }
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 140 >> 2] < 0) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 140 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 116 >> 2] + HEAP32[$0 + 140 >> 2];
  }
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 140 >> 2] >= HEAP32[HEAP32[$1 + 12 >> 2] + 116 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 140 >> 2] = HEAP32[$0 + 140 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 116 >> 2];
  }
 }
}
function jshPinWatch($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP8[$2 + 14 | 0] = $0;
 HEAP8[$2 + 13 | 0] = $1;
 label$1 : {
  if (HEAP8[$2 + 13 | 0] & 1) {
   HEAP32[$2 + 8 >> 2] = 0;
   while (1) {
    if (HEAP32[$2 + 8 >> 2] < 16) {
     if (HEAPU8[HEAP32[$2 + 8 >> 2] + 251232 | 0] == 255) {
      HEAP8[HEAP32[$2 + 8 >> 2] + 251232 | 0] = HEAPU8[$2 + 14 | 0];
      HEAP8[$2 + 15 | 0] = HEAP32[$2 + 8 >> 2] + 1;
      break label$1;
     } else {
      HEAP32[$2 + 4 >> 2] = 0;
      while (1) {
       if (HEAP32[$2 + 4 >> 2] < 16) {
        if (HEAPU8[HEAP32[$2 + 4 >> 2] + 251232 | 0] == HEAPU8[$2 + 14 | 0]) {
         HEAP8[HEAP32[$2 + 4 >> 2] + 251232 | 0] = 255;
        }
        HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
        continue;
       }
       break;
      }
      HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 1;
      continue;
     }
    }
    break;
   }
  }
  HEAP8[$2 + 15 | 0] = 0;
 }
 return HEAPU8[$2 + 15 | 0];
}
function jsvIteratorClone($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 $0 = HEAP32[HEAP32[$2 + 8 >> 2] >> 2] + -1 | 0;
 label$1 : {
  if ($0 >>> 0 > 3) {
   break label$1;
  }
  label$2 : {
   switch ($0 - 1 | 0) {
   case 2:
    HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] + 12 >> 2];
    $0 = jsvLockAgain(HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2]);
    HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = $0;
   case 0:
    jsvObjectIteratorClone(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2] + 4 | 0);
    break label$1;
   default:
    jsvStringIteratorClone(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2] + 4 | 0);
    break label$1;
   case 1:
    break label$2;
   }
  }
  jsvArrayBufferIteratorClone(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2] + 4 | 0);
 }
 global$0 = $2 + 16 | 0;
}
function jspNewPrototype($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = jsvFindChildFromString(HEAP32[23774], HEAP32[$1 + 24 >> 2], 1);
 label$1 : {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 16 >> 2] = jsvSkipName(HEAP32[$1 + 20 >> 2]);
  if (!HEAP32[$1 + 16 >> 2]) {
   HEAP32[$1 + 16 >> 2] = jspNewBuiltin(HEAP32[$1 + 24 >> 2]);
   if (!HEAP32[$1 + 16 >> 2]) {
    jsvUnLock(HEAP32[$1 + 20 >> 2]);
    HEAP32[$1 + 28 >> 2] = 0;
    break label$1;
   }
   jsvSetValueOfName(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2]);
  }
  HEAP32[$1 + 12 >> 2] = jsvFindChildFromString(HEAP32[$1 + 16 >> 2], 3674, 1);
  jspEnsureIsPrototype(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 12 >> 2]);
  jsvUnLock2(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 12 >> 2];
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function jswrap_array_push($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1 : {
  if (!(jsvIsArray(HEAP32[$2 + 24 >> 2]) & 1)) {
   HEAP32[$2 + 28 >> 2] = -1;
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = -1;
  jsvObjectIteratorNew($2 + 8 | 0, HEAP32[$2 + 20 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($2 + 8 | 0) & 1) {
    $0 = $2 + 8 | 0;
    HEAP32[$2 + 4 >> 2] = jsvObjectIteratorGetValue($0);
    HEAP32[$2 + 16 >> 2] = jsvArrayPush(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 4 >> 2]);
    jsvUnLock(HEAP32[$2 + 4 >> 2]);
    jsvObjectIteratorNext($0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($2 + 8 | 0);
  if (HEAP32[$2 + 16 >> 2] < 0) {
   HEAP32[$2 + 16 >> 2] = jsvGetArrayLength(HEAP32[$2 + 24 >> 2]);
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function cos($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 wasm2js_scratch_store_f64(+$0);
 $3 = wasm2js_scratch_load_i32(1) | 0;
 wasm2js_scratch_load_i32(0) | 0;
 $3 = $3 & 2147483647;
 label$1 : {
  if ($3 >>> 0 <= 1072243195) {
   $2 = 1;
   if ($3 >>> 0 < 1044816030) {
    break label$1;
   }
   $2 = __cos($0, 0);
   break label$1;
  }
  $2 = $0 - $0;
  if ($3 >>> 0 >= 2146435072) {
   break label$1;
  }
  $3 = __rem_pio2($0, $1) & 3;
  if ($3 >>> 0 <= 2) {
   label$4 : {
    switch ($3 - 1 | 0) {
    default:
     $2 = __cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
     break label$1;
    case 0:
     $2 = -__sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
     break label$1;
    case 1:
     break label$4;
    }
   }
   $2 = -__cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
   break label$1;
  }
  $2 = __sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
 }
 $0 = $2;
 global$0 = $1 + 16 | 0;
 return $0;
}
function jswrap_object_toString($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 96 | 0;
 global$0 = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP32[$2 + 84 >> 2] = $1;
 label$1 : {
  label$2 : {
   if (!(jsvIsInt(HEAP32[$2 + 84 >> 2]) & 1)) {
    break label$2;
   }
   if (!(jsvIsNumeric(HEAP32[$2 + 88 >> 2]) & 1)) {
    break label$2;
   }
   HEAP32[$2 + 80 >> 2] = jsvGetInteger(HEAP32[$2 + 84 >> 2]);
   if (!(HEAP32[$2 + 80 >> 2] < 2 | HEAP32[$2 + 80 >> 2] > 36)) {
    label$4 : {
     if (jsvIsInt(HEAP32[$2 + 88 >> 2]) & 1) {
      itostr(jsvGetInteger(HEAP32[$2 + 88 >> 2]), $2, HEAP32[$2 + 80 >> 2]);
      break label$4;
     }
     ftoa_bounded_extra(jsvGetFloat(HEAP32[$2 + 88 >> 2]), $2, 70, HEAP32[$2 + 80 >> 2], -1);
    }
    HEAP32[$2 + 92 >> 2] = jsvNewFromString($2);
    break label$1;
   }
  }
  HEAP32[$2 + 92 >> 2] = jsvAsString(HEAP32[$2 + 88 >> 2]);
 }
 global$0 = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}
function jswrap_espruino_HSBtoRGB($0, $1, $2, $3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 + -64 | 0;
 global$0 = $4;
 HEAPF64[$4 + 48 >> 3] = $0;
 HEAPF64[$4 + 40 >> 3] = $1;
 HEAPF64[$4 + 32 >> 3] = $2;
 HEAP8[$4 + 31 | 0] = $3;
 HEAP32[$4 + 24 >> 2] = jswrap_espruino_HSBtoRGB_int(HEAPF64[$4 + 48 >> 3], HEAPF64[$4 + 40 >> 3], HEAPF64[$4 + 32 >> 3]);
 label$1 : {
  if (!(HEAP8[$4 + 31 | 0] & 1)) {
   HEAP32[$4 + 60 >> 2] = jsvNewFromInteger(HEAP32[$4 + 24 >> 2]);
   break label$1;
  }
  $3 = $4 + 12 | 0;
  HEAP32[$4 + 12 >> 2] = jsvNewFromInteger(HEAP32[$4 + 24 >> 2] & 255);
  HEAP32[$4 + 16 >> 2] = jsvNewFromInteger(HEAP32[$4 + 24 >> 2] >> 8 & 255);
  HEAP32[$4 + 20 >> 2] = jsvNewFromInteger(HEAP32[$4 + 24 >> 2] >> 16 & 255);
  HEAP32[$4 + 8 >> 2] = jsvNewArray($3, 3);
  jsvUnLockMany(3, $3);
  HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 8 >> 2];
 }
 global$0 = $4 - -64 | 0;
 return HEAP32[$4 + 60 >> 2];
}
function jspEnsureIsPrototype($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 if (HEAP32[$2 + 24 >> 2]) {
  HEAP32[$2 + 20 >> 2] = jsvSkipName(HEAP32[$2 + 24 >> 2]);
  if (!(jsvIsObject(HEAP32[$2 + 20 >> 2]) & 1)) {
   if (!(jsvIsUndefined(HEAP32[$2 + 20 >> 2]) & 1)) {
    HEAP32[$2 >> 2] = HEAP32[$2 + 20 >> 2];
    jsExceptionHere(3, 4324, $2);
   }
   jsvUnLock(HEAP32[$2 + 20 >> 2]);
   HEAP32[$2 + 20 >> 2] = jsvNewWithFlags(5);
   HEAP32[$2 + 16 >> 2] = jsvSkipToLastName(HEAP32[$2 + 24 >> 2]);
   jsvSetValueOfName(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2]);
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
  }
  HEAP32[$2 + 12 >> 2] = jsvFindChildFromString(HEAP32[$2 + 20 >> 2], 4362, 1);
  if (HEAP32[$2 + 12 >> 2]) {
   jsvSetValueOfName(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 28 >> 2]);
  }
  jsvUnLock2(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2]);
 }
 global$0 = $2 + 32 | 0;
}
function jswrap_graphics_setClipRect($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = global$0 - 96 | 0;
 global$0 = $5;
 HEAP32[$5 + 88 >> 2] = $0;
 HEAP32[$5 + 84 >> 2] = $1;
 HEAP32[$5 + 80 >> 2] = $2;
 HEAP32[$5 + 76 >> 2] = $3;
 HEAP32[$5 + 72 >> 2] = $4;
 label$1 : {
  if (!(graphicsGetFromVar($5, HEAP32[$5 + 88 >> 2]) & 1)) {
   HEAP32[$5 + 92 >> 2] = 0;
   break label$1;
  }
  $0 = HEAP32[$5 + 84 >> 2];
  HEAP8[$5 + 32 | 0] = $0;
  HEAP8[$5 + 33 | 0] = $0 >>> 8;
  $0 = HEAP32[$5 + 80 >> 2];
  HEAP8[$5 + 34 | 0] = $0;
  HEAP8[$5 + 35 | 0] = $0 >>> 8;
  $0 = HEAP32[$5 + 76 >> 2];
  HEAP8[$5 + 36 | 0] = $0;
  HEAP8[$5 + 37 | 0] = $0 >>> 8;
  $0 = HEAP32[$5 + 72 >> 2];
  HEAP8[$5 + 38 | 0] = $0;
  HEAP8[$5 + 39 | 0] = $0 >>> 8;
  graphicsSetVar($5);
  HEAP32[$5 + 92 >> 2] = jsvLockAgain(HEAP32[$5 + 88 >> 2]);
 }
 global$0 = $5 + 96 | 0;
 return HEAP32[$5 + 92 >> 2];
}
function jsi2cRead($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 48 | 0;
 global$0 = $5;
 HEAP32[$5 + 44 >> 2] = $0;
 HEAP8[$5 + 43 | 0] = $1;
 HEAP32[$5 + 36 >> 2] = $2;
 HEAP32[$5 + 32 >> 2] = $3;
 HEAP8[$5 + 31 | 0] = $4;
 if (!(HEAPU8[HEAP32[$5 + 44 >> 2] + 4 | 0] == 255 | HEAPU8[HEAP32[$5 + 44 >> 2] + 5 | 0] == 255)) {
  $0 = $5 + 16 | 0;
  i2c_initstruct($0, HEAP32[$5 + 44 >> 2]);
  i2c_start($0);
  i2c_wr($0, HEAPU8[$5 + 43 | 0] << 1 | 1);
  HEAP32[$5 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 36 >> 2]) {
    $0 = i2c_rd($5 + 16 | 0, HEAP32[$5 + 12 >> 2] == (HEAP32[$5 + 36 >> 2] - 1 | 0));
    HEAP8[HEAP32[$5 + 32 >> 2] + HEAP32[$5 + 12 >> 2] | 0] = $0;
    HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP8[$5 + 31 | 0] & 1) {
   i2c_stop($5 + 16 | 0);
  }
  HEAP8[HEAP32[$5 + 44 >> 2] + 6 | 0] = HEAP8[$5 + 18 | 0] & 1;
 }
 global$0 = $5 + 48 | 0;
}
function lcdSetPixel_JS($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 $0 = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 12 >> 2] = jsvObjectGetChild(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 27671, 0);
 if (HEAP32[$4 + 12 >> 2]) {
  HEAP32[$4 >> 2] = jsvNewFromInteger(HEAP32[$4 + 24 >> 2]);
  HEAP32[$4 + 4 >> 2] = jsvNewFromInteger(HEAP32[$4 + 20 >> 2]);
  HEAP32[$4 + 8 >> 2] = jsvNewFromInteger(HEAP32[$4 + 16 >> 2]);
  $0 = HEAP32[$4 + 28 >> 2];
  jsvUnLock(jspExecuteFunction(HEAP32[$4 + 12 >> 2], HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 3, $4));
  jsvUnLockMany(3, $4);
  jsvUnLock(HEAP32[$4 + 12 >> 2]);
 }
 global$0 = $4 + 32 | 0;
}
function jsvGetValueOfName($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  if (jsvIsArrayBufferName(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvArrayBufferGetFromName(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  if (jsvIsNameInt(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvNewFromInteger(jsvGetFirstChildSigned(HEAP32[$1 + 8 >> 2]) << 16 >> 16);
   break label$1;
  }
  if (jsvIsNameIntBool(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvNewFromBool((jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535) != 0);
   break label$1;
  }
  if (jsvIsName(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvLockSafe(jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535);
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function fromCalenderDate($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = HEAP32[HEAP32[$1 + 28 >> 2] + 12 >> 2] - 1970;
 HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 24 >> 2] >> 2;
 HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 24 >> 2] & 3;
 HEAP32[$1 + 8 >> 2] = Math_imul(HEAP32[$1 + 16 >> 2], 365);
 label$1 : {
  if (HEAP32[$1 + 16 >> 2] == 2) {
   HEAP32[$1 + 12 >> 2] = 31232;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 31200;
 }
 if (HEAP32[$1 + 16 >> 2] >= 2) {
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
 }
 HEAP32[$1 + 4 >> 2] = HEAP32[HEAP32[$1 + 28 >> 2] + 8 >> 2] % 12;
 if (HEAP32[$1 + 4 >> 2] < 0) {
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 12;
 }
 return (HEAP32[HEAP32[$1 + 28 >> 2] + 4 >> 2] + (HEAP16[HEAP32[$1 + 12 >> 2] + (HEAP32[$1 + 4 >> 2] << 1) >> 1] + (HEAP16[(HEAP32[$1 + 16 >> 2] << 1) + 31258 >> 1] + Math_imul(HEAP32[$1 + 20 >> 2], 1461) | 0) | 0) | 0) - 1 | 0;
}
function jsiMoveCursor($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 while (1) {
  if (HEAPU32[$4 + 12 >> 2] < HEAPU32[$4 + 4 >> 2]) {
   jsiConsolePrintString(5206);
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 while (1) {
  if (HEAPU32[$4 + 12 >> 2] > HEAPU32[$4 + 4 >> 2]) {
   jsiConsolePrintString(5210);
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + -1;
   continue;
  }
  break;
 }
 while (1) {
  if (HEAPU32[$4 + 8 >> 2] < HEAPU32[$4 >> 2]) {
   jsiConsolePrintString(5214);
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 while (1) {
  if (HEAPU32[$4 + 8 >> 2] > HEAPU32[$4 >> 2]) {
   jsiConsolePrintString(5218);
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + -1;
   continue;
  }
  break;
 }
 global$0 = $4 + 16 | 0;
}
function jsfIsEqual($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 160 | 0;
 global$0 = $3;
 HEAP32[$3 + 152 >> 2] = $0;
 HEAP32[$3 + 148 >> 2] = $1;
 HEAP32[$3 + 144 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = 0;
 label$1 : {
  while (1) {
   if (HEAP32[$3 + 144 >> 2]) {
    HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 144 >> 2];
    if (HEAPU32[$3 + 8 >> 2] > 128) {
     HEAP32[$3 + 8 >> 2] = 128;
    }
    $0 = $3 + 16 | 0;
    jshFlashRead($0, HEAP32[$3 + 152 >> 2] + HEAP32[$3 + 12 >> 2] | 0, HEAP32[$3 + 8 >> 2]);
    if (memcmp($0, HEAP32[$3 + 148 >> 2] + HEAP32[$3 + 12 >> 2] | 0, HEAP32[$3 + 8 >> 2])) {
     HEAP8[$3 + 159 | 0] = 0;
     break label$1;
    } else {
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$3 + 12 >> 2];
     HEAP32[$3 + 144 >> 2] = HEAP32[$3 + 144 >> 2] - HEAP32[$3 + 8 >> 2];
     continue;
    }
   }
   break;
  }
  HEAP8[$3 + 159 | 0] = 1;
 }
 global$0 = $3 + 160 | 0;
 return HEAP8[$3 + 159 | 0] & 1;
}
function jsfGetAddressOfNextStartPage($0) {
 var $1 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 HEAP32[$1 + 40 >> 2] = $0;
 HEAP32[$1 + 36 >> 2] = jsfGetAddressOfNextPage(HEAP32[$1 + 40 >> 2]);
 label$1 : {
  if (!HEAP32[$1 + 36 >> 2]) {
   HEAP32[$1 + 44 >> 2] = 0;
   break label$1;
  }
  if (jsfGetFileHeader(HEAP32[$1 + 40 >> 2], $1, 0) & 1) {
   while (1) {
    if (HEAPU32[$1 + 40 >> 2] > HEAPU32[$1 + 36 >> 2]) {
     HEAP32[$1 + 36 >> 2] = jsfGetAddressOfNextPage(HEAP32[$1 + 40 >> 2]);
     if (!HEAP32[$1 + 36 >> 2]) {
      HEAP32[$1 + 44 >> 2] = 0;
      break label$1;
     }
    }
    if (HEAP32[$1 + 40 >> 2] == HEAP32[$1 + 36 >> 2]) {
     HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 40 >> 2];
     break label$1;
    }
    if (jsfGetNextFileHeader($1 + 40 | 0, $1, 2) & 1) {
     continue;
    }
    break;
   }
  }
  HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 36 >> 2];
 }
 global$0 = $1 + 48 | 0;
 return HEAP32[$1 + 44 >> 2];
}
function tflite__SimpleMemoryAllocator__AllocateFromTail_28unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP32[$3 + 12 >> 2] = (HEAP32[$0 + 8 >> 2] + HEAP32[$0 + 4 >> 2] | 0) - HEAP32[$0 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 12 >> 2] - HEAP32[$3 + 20 >> 2];
 HEAP32[$3 + 4 >> 2] = tflite__AlignPointerDown_28unsigned_20char__2c_20unsigned_20long_29(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 16 >> 2]);
 HEAP32[$3 >> 2] = HEAP32[$3 + 12 >> 2] - HEAP32[$3 + 4 >> 2];
 label$1 : {
  if (HEAP32[$0 >> 2] + HEAP32[$3 >> 2] >>> 0 > HEAPU32[$0 + 4 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 >> 2] = HEAP32[$3 >> 2] + HEAP32[$0 >> 2];
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 4 >> 2];
 }
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function jsvGetArrayItems($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 jsvObjectIteratorNew($3 + 16 | 0, HEAP32[$3 + 28 >> 2]);
 HEAP32[$3 + 12 >> 2] = 0;
 while (1) {
  if (jsvObjectIteratorHasValue($3 + 16 | 0) & 1) {
   if (HEAPU32[$3 + 12 >> 2] < HEAPU32[$3 + 24 >> 2]) {
    $0 = jsvObjectIteratorGetValue($3 + 16 | 0);
    $1 = HEAP32[$3 + 20 >> 2];
    $2 = HEAP32[$3 + 12 >> 2];
    HEAP32[$3 + 12 >> 2] = $2 + 1;
    HEAP32[$1 + ($2 << 2) >> 2] = $0;
   }
   jsvObjectIteratorNext($3 + 16 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree($3 + 16 | 0);
 while (1) {
  if (HEAPU32[$3 + 12 >> 2] < HEAPU32[$3 + 24 >> 2]) {
   $0 = HEAP32[$3 + 20 >> 2];
   $1 = HEAP32[$3 + 12 >> 2];
   HEAP32[$3 + 12 >> 2] = $1 + 1;
   HEAP32[$0 + ($1 << 2) >> 2] = 0;
   continue;
  }
  break;
 }
 global$0 = $3 + 32 | 0;
}
function jspeiFindInScopes($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1 : {
  if (HEAP32[23776]) {
   HEAP32[$1 + 20 >> 2] = jsvLockSafe(jsvGetLastChild(HEAP32[23776]) & 65535);
   while (1) {
    if (HEAP32[$1 + 20 >> 2]) {
     HEAP32[$1 + 16 >> 2] = jsvSkipName(HEAP32[$1 + 20 >> 2]);
     HEAP16[$1 + 14 >> 1] = jsvGetPrevSibling(HEAP32[$1 + 20 >> 2]);
     HEAP32[$1 + 8 >> 2] = jsvFindChildFromString(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 24 >> 2], 0);
     jsvUnLock2(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2]);
     if (HEAP32[$1 + 8 >> 2]) {
      HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 8 >> 2];
      break label$1;
     }
     HEAP32[$1 + 20 >> 2] = jsvLockSafe(HEAPU16[$1 + 14 >> 1]);
     continue;
    }
    break;
   }
  }
  HEAP32[$1 + 28 >> 2] = jsvFindChildFromString(HEAP32[23774], HEAP32[$1 + 24 >> 2], 0);
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function void_20tflite__CalculateActivationRange_float__28TfLiteFusedActivation_2c_20float__2c_20float__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1 : {
  if (HEAP32[$3 + 12 >> 2] == 1) {
   HEAPF32[HEAP32[$3 + 8 >> 2] >> 2] = 0;
   HEAPF32[HEAP32[$3 + 4 >> 2] >> 2] = 3.4028234663852886e+38;
   break label$1;
  }
  label$3 : {
   if (HEAP32[$3 + 12 >> 2] == 3) {
    HEAPF32[HEAP32[$3 + 8 >> 2] >> 2] = 0;
    HEAPF32[HEAP32[$3 + 4 >> 2] >> 2] = 6;
    break label$3;
   }
   label$5 : {
    if (HEAP32[$3 + 12 >> 2] == 2) {
     HEAPF32[HEAP32[$3 + 8 >> 2] >> 2] = -1;
     HEAPF32[HEAP32[$3 + 4 >> 2] >> 2] = 1;
     break label$5;
    }
    HEAPF32[HEAP32[$3 + 8 >> 2] >> 2] = -3.4028234663852886e+38;
    HEAPF32[HEAP32[$3 + 4 >> 2] >> 2] = 3.4028234663852886e+38;
   }
  }
 }
 global$0 = $3 + 16 | 0;
}
function sin($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 wasm2js_scratch_store_f64(+$0);
 $2 = wasm2js_scratch_load_i32(1) | 0;
 wasm2js_scratch_load_i32(0) | 0;
 $2 = $2 & 2147483647;
 label$1 : {
  if ($2 >>> 0 <= 1072243195) {
   if ($2 >>> 0 < 1045430272) {
    break label$1;
   }
   $0 = __sin($0, 0, 0);
   break label$1;
  }
  if ($2 >>> 0 >= 2146435072) {
   $0 = $0 - $0;
   break label$1;
  }
  $2 = __rem_pio2($0, $1) & 3;
  if ($2 >>> 0 <= 2) {
   label$5 : {
    switch ($2 - 1 | 0) {
    default:
     $0 = __sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
     break label$1;
    case 0:
     $0 = __cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
     break label$1;
    case 1:
     break label$5;
    }
   }
   $0 = -__sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
   break label$1;
  }
  $0 = -__cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function jsvGetFunctionArgumentLength($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = jsvNewWithFlags(3);
 label$1 : {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($1 + 16 | 0) & 1) {
    HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetKey($1 + 16 | 0);
    if (jsvIsFunctionParameter(HEAP32[$1 + 12 >> 2]) & 1) {
     HEAP32[$1 + 8 >> 2] = jsvSkipOneName(HEAP32[$1 + 12 >> 2]);
     jsvArrayPushAndUnLock(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 8 >> 2]);
    }
    $0 = $1 + 16 | 0;
    jsvUnLock(HEAP32[$1 + 12 >> 2]);
    jsvObjectIteratorNext($0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($1 + 16 | 0);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function graphicsGetPixelDevice($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 label$1 : {
  label$2 : {
   label$3 : {
    if (HEAP32[$3 + 4 >> 2] < 0 | HEAP32[$3 >> 2] < 0) {
     break label$3;
    }
    $0 = HEAP32[$3 + 8 >> 2];
    if (HEAP32[$3 + 4 >> 2] >= (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8)) {
     break label$3;
    }
    $0 = HEAP32[$3 + 8 >> 2];
    if (HEAP32[$3 >> 2] < (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8)) {
     break label$2;
    }
   }
   HEAP32[$3 + 12 >> 2] = 0;
   break label$1;
  }
  $0 = HEAP32[$3 + 8 >> 2];
  HEAP32[$3 + 12 >> 2] = FUNCTION_TABLE[HEAPU8[$0 + 60 | 0] | HEAPU8[$0 + 61 | 0] << 8 | (HEAPU8[$0 + 62 | 0] << 16 | HEAPU8[$0 + 63 | 0] << 24)](HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], HEAP32[$3 >> 2]);
 }
 global$0 = $3 + 16 | 0;
 return HEAP32[$3 + 12 >> 2];
}
function wcrtomb($0, $1) {
 label$1 : {
  if ($0) {
   if ($1 >>> 0 <= 127) {
    break label$1;
   }
   label$3 : {
    if (!HEAP32[HEAP32[13716] >> 2]) {
     if (($1 & -128) == 57216) {
      break label$1;
     }
     break label$3;
    }
    if ($1 >>> 0 <= 2047) {
     HEAP8[$0 + 1 | 0] = $1 & 63 | 128;
     HEAP8[$0 | 0] = $1 >>> 6 | 192;
     return 2;
    }
    if (!(($1 & -8192) != 57344 ? $1 >>> 0 >= 55296 : 0)) {
     HEAP8[$0 + 2 | 0] = $1 & 63 | 128;
     HEAP8[$0 | 0] = $1 >>> 12 | 224;
     HEAP8[$0 + 1 | 0] = $1 >>> 6 & 63 | 128;
     return 3;
    }
    if ($1 + -65536 >>> 0 <= 1048575) {
     HEAP8[$0 + 3 | 0] = $1 & 63 | 128;
     HEAP8[$0 | 0] = $1 >>> 18 | 240;
     HEAP8[$0 + 2 | 0] = $1 >>> 6 & 63 | 128;
     HEAP8[$0 + 1 | 0] = $1 >>> 12 & 63 | 128;
     return 4;
    }
   }
   HEAP32[63273] = 25;
   $0 = -1;
  } else {
   $0 = 1;
  }
  return $0;
 }
 HEAP8[$0 | 0] = $1;
 return 1;
}
function tflite__reference_ops__RoundToNearest_28float_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAPF32[$1 + 8 >> 2] = $0;
 HEAPF32[$1 + 4 >> 2] = floor_28float_29(HEAPF32[$1 + 8 >> 2]);
 HEAPF32[$1 >> 2] = HEAPF32[$1 + 8 >> 2] - HEAPF32[$1 + 4 >> 2];
 label$1 : {
  label$2 : {
   if (!(HEAPF32[$1 >> 2] < Math_fround(.5))) {
    if (HEAPF32[$1 >> 2] != Math_fround(.5)) {
     break label$2;
    }
    $0 = HEAPF32[$1 + 4 >> 2];
    label$4 : {
     if (Math_fround(Math_abs($0)) < Math_fround(2147483648)) {
      $2 = ~~$0;
      break label$4;
     }
     $2 = -2147483648;
    }
    if (($2 | 0) % 2) {
     break label$2;
    }
   }
   HEAPF32[$1 + 12 >> 2] = HEAPF32[$1 + 4 >> 2];
   break label$1;
  }
  $0 = Math_fround(HEAPF32[$1 + 4 >> 2] + Math_fround(1));
  HEAPF32[$1 + 4 >> 2] = $0;
  HEAPF32[$1 + 12 >> 2] = $0;
 }
 global$0 = $1 + 16 | 0;
 return HEAPF32[$1 + 12 >> 2];
}
function jsvGetStringChars($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = 0;
 HEAP32[$3 + 32 >> 2] = $1;
 HEAP32[$3 + 28 >> 2] = $2;
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 28 >> 2];
 jsvStringIteratorNew($3, HEAP32[$3 + 40 >> 2], HEAP32[$3 + 36 >> 2]);
 label$1 : {
  while (1) {
   if (jsvStringIteratorHasChar($3) & 1) {
    $0 = HEAP32[$3 + 24 >> 2];
    HEAP32[$3 + 24 >> 2] = $0 + -1;
    if ($0 >>> 0 <= 0) {
     jsvStringIteratorFree($3);
     HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 28 >> 2];
     break label$1;
    }
    $0 = jsvStringIteratorGetCharAndNext($3);
    $1 = HEAP32[$3 + 32 >> 2];
    HEAP32[$3 + 32 >> 2] = $1 + 1;
    HEAP8[$1 | 0] = $0;
    continue;
   }
   break;
  }
  jsvStringIteratorFree($3);
  HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 28 >> 2] - HEAP32[$3 + 24 >> 2];
 }
 global$0 = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}
function jsvFindChildFromVar($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP8[$3 + 19 | 0] = $2;
 HEAP16[$3 + 10 >> 1] = jsvGetFirstChild(HEAP32[$3 + 24 >> 2]);
 label$1 : {
  while (1) {
   if (HEAPU16[$3 + 10 >> 1]) {
    HEAP32[$3 + 12 >> 2] = jsvLock(HEAPU16[$3 + 10 >> 1]);
    if (jsvIsBasicVarEqual(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 20 >> 2]) & 1) {
     break label$1;
    }
    HEAP16[$3 + 10 >> 1] = jsvGetNextSibling(HEAP32[$3 + 12 >> 2]);
    jsvUnLock(HEAP32[$3 + 12 >> 2]);
    continue;
   }
   break;
  }
  HEAP32[$3 + 12 >> 2] = 0;
  if (!(!(HEAP8[$3 + 19 | 0] & 1) | !HEAP32[$3 + 20 >> 2])) {
   HEAP32[$3 + 12 >> 2] = jsvAsName(HEAP32[$3 + 20 >> 2]);
   jsvAddName(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 12 >> 2]);
  }
 }
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function nativeCallGetCType() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 label$1 : {
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 192) {
   jslMatch(192);
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 128) {
   HEAP32[$0 + 8 >> 2] = -1;
   HEAP32[$0 + 4 >> 2] = jslGetTokenValueAsString();
   if (!strcmp(HEAP32[$0 + 4 >> 2], 31596)) {
    HEAP32[$0 + 8 >> 2] = 4;
   }
   if (!strcmp(HEAP32[$0 + 4 >> 2], 31600)) {
    HEAP32[$0 + 8 >> 2] = 6;
   }
   if (!strcmp(HEAP32[$0 + 4 >> 2], 31607)) {
    HEAP32[$0 + 8 >> 2] = 3;
   }
   if (!strcmp(HEAP32[$0 + 4 >> 2], 31612)) {
    HEAP32[$0 + 8 >> 2] = 5;
   }
   if (!strcmp(HEAP32[$0 + 4 >> 2], 31616)) {
    HEAP32[$0 + 8 >> 2] = 1;
   }
   jslMatch(128);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = -1;
 }
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function __jspePostfixExpression($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 while (1) {
  if (HEAP16[HEAP32[13768] + 2 >> 1] != 152 ? HEAP16[HEAP32[13768] + 2 >> 1] == 153 : 1) {
   HEAP32[$1 + 24 >> 2] = HEAP16[HEAP32[13768] + 2 >> 1];
   jslGetNextToken();
   if ((HEAP32[23778] & 63) == 1) {
    HEAP32[$1 + 20 >> 2] = jsvNewFromInteger(1);
    HEAP32[$1 + 16 >> 2] = jsvAsNumberAndUnLock(jsvSkipName(HEAP32[$1 + 28 >> 2]));
    HEAP32[$1 + 12 >> 2] = jsvMathsOpSkipNames(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 + 24 >> 2] == 152 ? 43 : 45);
    jsvUnLock(HEAP32[$1 + 20 >> 2]);
    jsvReplaceWith(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 12 >> 2]);
    jsvUnLock(HEAP32[$1 + 12 >> 2]);
    jsvUnLock(HEAP32[$1 + 28 >> 2]);
    HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 16 >> 2];
   }
   continue;
  }
  break;
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function jswrap_espruino_lookupNoCase($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP8[$3 + 83 | 0] = $2;
 label$1 : {
  if (!(jsvHasChildren(HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  if ((jsvGetString(HEAP32[$3 + 84 >> 2], $3 + 16 | 0, 64) | 0) == 64) {
   HEAP32[$3 >> 2] = 64;
   jsExceptionHere(1, 32267, $3);
  }
  if (HEAP8[$3 + 83 | 0] & 1) {
   HEAP32[$3 + 12 >> 2] = jsvFindChildFromStringI(HEAP32[$3 + 88 >> 2], $3 + 16 | 0);
   if (HEAP32[$3 + 12 >> 2]) {
    HEAP32[$3 + 92 >> 2] = jsvAsStringAndUnLock(HEAP32[$3 + 12 >> 2]);
    break label$1;
   }
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 92 >> 2] = jsvObjectGetChildI(HEAP32[$3 + 88 >> 2], $3 + 16 | 0);
 }
 global$0 = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}
function jshResetDevices() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[23779] = 0;
 HEAP32[23780] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 while (1) {
  if (HEAPU32[$0 + 12 >> 2] < 2) {
   HEAP8[HEAP32[$0 + 12 >> 2] + 95204 | 0] = 0;
   HEAP8[HEAP32[$0 + 12 >> 2] + 95206 | 0] = 255;
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP8[95204] = 8;
 HEAP32[$0 + 12 >> 2] = 1;
 while (1) {
  if (HEAPU32[$0 + 12 >> 2] <= 16) {
   HEAP32[(HEAP32[$0 + 12 >> 2] << 2) + 95212 >> 2] = 0;
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 jshSetPinStateIsManual(24, 1);
 jshPinSetState(24, 6);
 jshSetPinStateIsManual(22, 1);
 jshPinSetState(22, 6);
 jshSetPinStateIsManual(23, 1);
 jshPinSetState(23, 6);
 jshSetPinStateIsManual(11, 1);
 jshPinSetState(11, 6);
 jshSetPinStateIsManual(16, 1);
 jshPinSetState(16, 6);
 global$0 = $0 + 16 | 0;
}
function jswrap_object_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1 : {
  label$2 : {
   if (jsvIsObject(HEAP32[$2 + 24 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsNull(HEAP32[$2 + 24 >> 2]) & 1) {
    break label$2;
   }
   HEAP32[$2 >> 2] = HEAP32[$2 + 24 >> 2];
   jsExceptionHere(3, 34797, $2);
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  if (jsvIsObject(HEAP32[$2 + 20 >> 2]) & 1) {
   jsExceptionHere(1, 34848, 0);
  }
  HEAP32[$2 + 16 >> 2] = jsvNewWithFlags(5);
  if (!HEAP32[$2 + 16 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  if (jsvIsObject(HEAP32[$2 + 24 >> 2]) & 1) {
   jsvObjectSetChild(HEAP32[$2 + 16 >> 2], 34780, HEAP32[$2 + 24 >> 2]);
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function tflite__reference_ops__Floor_28tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3) {
 var $4 = 0, $5 = Math_fround(0);
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 20 >> 2]);
 HEAP32[$4 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 8 >> 2] < HEAP32[$4 + 12 >> 2]) {
   HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 8 >> 2];
   $5 = floor_28float_29(HEAPF32[HEAP32[$4 + 24 >> 2] + (HEAP32[$4 + 4 >> 2] << 2) >> 2]);
   HEAPF32[HEAP32[$4 + 16 >> 2] + (HEAP32[$4 + 4 >> 2] << 2) >> 2] = $5;
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $4 + 32 | 0;
}
function tflite__CalculateInputRadius_28int_2c_20int_2c_20int_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 HEAP32[$2 + 28 >> 2] = 5;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = 31;
 $1 = HEAP32[$2 + 20 >> 2] - HEAP32[$2 + 28 >> 2] | 0;
 $0 = $1 & 31;
 $4 = $2;
 $3 = 1 * +((1 << HEAP32[$2 + 28 >> 2]) - 1 | 0);
 if (32 <= ($1 & 63) >>> 0) {
  $1 = 1 << $0;
  $0 = 0;
 } else {
  $1 = (1 << $0) - 1 & 1 >>> 32 - $0;
  $0 = 1 << $0;
 }
 $3 = $3 * (+($0 >>> 0) + 4294967296 * +($1 | 0));
 $1 = HEAP32[$2 + 24 >> 2];
 $0 = $1 & 31;
 if (32 <= ($1 & 63) >>> 0) {
  $1 = 1 << $0;
  $0 = 0;
 } else {
  $1 = (1 << $0) - 1 & 1 >>> 32 - $0;
  $0 = 1 << $0;
 }
 HEAPF64[$4 + 8 >> 3] = $3 / (+($0 >>> 0) + 4294967296 * +($1 | 0));
 $3 = Math_floor(HEAPF64[$2 + 8 >> 3]);
 label$1 : {
  if (Math_abs($3) < 2147483648) {
   $0 = ~~$3;
   break label$1;
  }
  $0 = -2147483648;
 }
 return $0;
}
function jswrap_storage_readArrayBuffer($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 80 | 0;
 global$0 = $1;
 HEAP32[$1 + 72 >> 2] = $0;
 jsfNameFromVar($1 + 40 | 0, HEAP32[$1 + 72 >> 2]);
 HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 64 >> 2];
 $0 = HEAP32[$1 + 60 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 56 >> 2];
 HEAP32[$1 + 28 >> 2] = $0;
 $0 = HEAP32[$1 + 52 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 48 >> 2];
 HEAP32[$1 + 20 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 40 >> 2];
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 68 >> 2] = jsfReadFile($1 + 8 | 0, 0, 0);
 label$1 : {
  if (!HEAP32[$1 + 68 >> 2]) {
   HEAP32[$1 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 36 >> 2] = jsvNewArrayBufferFromString(HEAP32[$1 + 68 >> 2], 0);
  jsvUnLock(HEAP32[$1 + 68 >> 2]);
  HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 36 >> 2];
 }
 global$0 = $1 + 80 | 0;
 return HEAP32[$1 + 76 >> 2];
}
function jsvObjectGetChild($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP16[$3 + 18 >> 1] = $2;
 label$1 : {
  if (!HEAP32[$3 + 24 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvFindChildFromString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAPU16[$3 + 18 >> 1] != 0);
  HEAP32[$3 + 8 >> 2] = jsvSkipName(HEAP32[$3 + 12 >> 2]);
  if (!(!HEAP32[$3 + 12 >> 2] | (HEAP32[$3 + 8 >> 2] | !HEAPU16[$3 + 18 >> 1]))) {
   HEAP32[$3 + 8 >> 2] = jsvNewWithFlags(HEAPU16[$3 + 18 >> 1]);
   jsvSetValueOfName(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
   break label$1;
  }
  jsvUnLock(HEAP32[$3 + 12 >> 2]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
 }
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function jswrap_string_startsWith($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1 : {
  if (!(jsvIsString(HEAP32[$3 + 24 >> 2]) & 1)) {
   HEAP8[$3 + 31 | 0] = 0;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvAsString(HEAP32[$3 + 20 >> 2]);
  HEAP8[$3 + 11 | 0] = 0;
  label$3 : {
   if (HEAP32[$3 + 16 >> 2] < 0) {
    break label$3;
   }
   if (jsvGetStringLength(HEAP32[$3 + 12 >> 2]) + HEAP32[$3 + 16 >> 2] >>> 0 > jsvGetStringLength(HEAP32[$3 + 24 >> 2]) >>> 0) {
    break label$3;
   }
   HEAP8[$3 + 11 | 0] = !jsvCompareString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2], 1);
  }
  jsvUnLock(HEAP32[$3 + 12 >> 2]);
  HEAP8[$3 + 31 | 0] = HEAP8[$3 + 11 | 0] & 1;
 }
 global$0 = $3 + 32 | 0;
 return HEAP8[$3 + 31 | 0] & 1;
}
function tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_1__operator_28_29_28tflite__ActivationFunctionType_29_20const($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 4 >> 2];
 label$1 : {
  if ($0 >>> 0 <= 5) {
   label$3 : {
    switch ($0 - 1 | 0) {
    default:
     HEAP32[$2 + 12 >> 2] = 0;
     break label$1;
    case 0:
     HEAP32[$2 + 12 >> 2] = 1;
     break label$1;
    case 1:
     HEAP32[$2 + 12 >> 2] = 2;
     break label$1;
    case 2:
     HEAP32[$2 + 12 >> 2] = 3;
     break label$1;
    case 3:
     HEAP32[$2 + 12 >> 2] = 4;
     break label$1;
    case 4:
     break label$3;
    }
   }
   HEAP32[$2 + 12 >> 2] = 5;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 return HEAP32[$2 + 12 >> 2];
}
function jsvIteratorGetKey($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[HEAP32[$1 + 8 >> 2] >> 2] + -1 | 0;
 label$1 : {
  if ($0 >>> 0 <= 3) {
   label$3 : {
    switch ($0 - 1 | 0) {
    case 2:
     HEAP32[$1 + 12 >> 2] = jsvNewFromInteger(HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2]);
     break label$1;
    case 0:
     HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetKey(HEAP32[$1 + 8 >> 2] + 4 | 0);
     break label$1;
    default:
     HEAP32[$1 + 12 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(jsvStringIteratorGetIndex(HEAP32[$1 + 8 >> 2] + 4 | 0)), 0);
     break label$1;
    case 1:
     break label$3;
    }
   }
   HEAP32[$1 + 12 >> 2] = jsvMakeIntoVariableName(jsvArrayBufferIteratorGetIndex(HEAP32[$1 + 8 >> 2] + 4 | 0), 0);
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function tflite__reference_ops__Round_28tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3) {
 var $4 = 0, $5 = Math_fround(0);
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 20 >> 2]);
 HEAP32[$4 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 8 >> 2] < HEAP32[$4 + 12 >> 2]) {
   $5 = tflite__reference_ops__RoundToNearest_28float_29(HEAPF32[HEAP32[$4 + 24 >> 2] + (HEAP32[$4 + 8 >> 2] << 2) >> 2]);
   HEAPF32[HEAP32[$4 + 16 >> 2] + (HEAP32[$4 + 8 >> 2] << 2) >> 2] = $5;
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $4 + 32 | 0;
}
function __stpcpy($0, $1) {
 var $2 = 0;
 label$1 : {
  label$2 : {
   if (($0 ^ $1) & 3) {
    break label$2;
   }
   if ($1 & 3) {
    while (1) {
     $2 = HEAPU8[$1 | 0];
     HEAP8[$0 | 0] = $2;
     if (!$2) {
      break label$1;
     }
     $0 = $0 + 1 | 0;
     $1 = $1 + 1 | 0;
     if ($1 & 3) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$1 >> 2];
   if (($2 ^ -1) & $2 + -16843009 & -2139062144) {
    break label$2;
   }
   while (1) {
    HEAP32[$0 >> 2] = $2;
    $2 = HEAP32[$1 + 4 >> 2];
    $0 = $0 + 4 | 0;
    $1 = $1 + 4 | 0;
    if (!($2 + -16843009 & ($2 ^ -1) & -2139062144)) {
     continue;
    }
    break;
   }
  }
  $2 = HEAPU8[$1 | 0];
  HEAP8[$0 | 0] = $2;
  if (!$2) {
   break label$1;
  }
  while (1) {
   $2 = HEAPU8[$1 + 1 | 0];
   HEAP8[$0 + 1 | 0] = $2;
   $0 = $0 + 1 | 0;
   $1 = $1 + 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
}
function tflite__GetReciprocal_28int_2c_20int_2c_20int__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $3 = $2 + 8 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = 12;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = global$0 - 16 | 0;
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 28 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$0 + 12 >> 2] ? Math_clz32(HEAP32[$0 + 12 >> 2]) : 32;
 HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = HEAP32[$2 + 24 >> 2] - HEAP32[$2 + 16 >> 2];
 HEAP32[$2 + 12 >> 2] = (HEAP32[$2 + 28 >> 2] << HEAP32[$2 + 16 >> 2]) + -2147483648;
 HEAP32[$2 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(HEAP32[$2 + 12 >> 2]);
 HEAP32[$2 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__one_over_one_plus_x_for_x_in_0_1_int__28gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$2 >> 2]);
 $0 = HEAP32[jshFlashGetMemMapAddress($3) >> 2];
 global$0 = $2 + 32 | 0;
 return $0;
}
function int_20gemmlowp__ShiftLeft_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $0 >> 31;
 $0 = 1 << HEAP32[$2 + 24 >> 2];
 HEAP32[$2 + 8 >> 2] = __wasm_i64_mul(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2], $0, $0 >> 31);
 HEAP32[$2 + 12 >> 2] = i64toi32_i32$HIGH_BITS;
 HEAP32[$2 + 4 >> 2] = -2147483648;
 HEAP32[$2 >> 2] = 2147483647;
 $1 = HEAP32[$2 + 12 >> 2];
 $0 = -2147483648;
 label$1 : {
  if (($1 | 0) < -1 ? 1 : ($1 | 0) <= -1 ? HEAPU32[$2 + 8 >> 2] >= 2147483648 ? 0 : 1 : 0) {
   break label$1;
  }
  $1 = HEAP32[$2 + 12 >> 2];
  $0 = 2147483647;
  label$2 : {
   if (($1 | 0) > 0 ? 1 : ($1 | 0) >= 0 ? HEAPU32[$2 + 8 >> 2] <= 2147483647 ? 0 : 1 : 0) {
    break label$2;
   }
   $0 = HEAP32[$2 + 8 >> 2];
  }
 }
 return $0;
}
function jsvArrayPushAll($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP8[$2 + 23 | 0] = 0;
 jsvObjectIteratorNew($2 + 16 | 0, HEAP32[$2 + 24 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue($2 + 16 | 0) & 1) {
   HEAP32[$2 + 12 >> 2] = jsvObjectIteratorGetValue($2 + 16 | 0);
   HEAP8[$2 + 11 | 0] = 1;
   if (HEAP8[$2 + 23 | 0] & 1) {
    HEAP32[$2 + 4 >> 2] = jsvGetIndexOf(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 12 >> 2], 0);
    if (HEAP32[$2 + 4 >> 2]) {
     HEAP8[$2 + 11 | 0] = 0;
     jsvUnLock(HEAP32[$2 + 4 >> 2]);
    }
   }
   if (HEAP8[$2 + 11 | 0] & 1) {
    jsvArrayPush(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 12 >> 2]);
   }
   $0 = $2 + 16 | 0;
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
   jsvObjectIteratorNext($0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree($2 + 16 | 0);
 global$0 = $2 + 32 | 0;
}
function jshGetDeviceFor($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP16[$3 + 12 >> 1] = $0;
 HEAP16[$3 + 10 >> 1] = $1;
 HEAP8[$3 + 9 | 0] = $2;
 label$1 : {
  if (!(jshIsPinValid(HEAPU8[$3 + 9 | 0]) & 1)) {
   HEAP16[$3 + 14 >> 1] = 0;
   break label$1;
  }
  HEAP32[$3 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 4 >> 2] < 0) {
    $0 = (Math_imul(HEAPU8[$3 + 9 | 0], 3) + 27907 | 0) + (HEAP32[$3 + 4 >> 2] << 1) | 0;
    HEAP16[$3 + 2 >> 1] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
    if (!((HEAPU16[$3 + 2 >> 1] & 4080) < HEAPU16[$3 + 12 >> 1] | (HEAPU16[$3 + 2 >> 1] & 4080) > HEAPU16[$3 + 10 >> 1])) {
     HEAP16[$3 + 14 >> 1] = HEAPU16[$3 + 2 >> 1];
     break label$1;
    }
    HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP16[$3 + 14 >> 1] = 0;
 }
 global$0 = $3 + 16 | 0;
 return HEAPU16[$3 + 14 >> 1];
}
function jswrap_graphics_lineTo($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP32[$3 + 80 >> 2] = $2;
 label$1 : {
  if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  $0 = $3 + 8 | 0;
  graphicsDrawLine($0, (HEAPU8[$3 + 35 | 0] | HEAPU8[$3 + 36 | 0] << 8) << 16 >> 16, (HEAPU8[$3 + 37 | 0] | HEAPU8[$3 + 38 | 0] << 8) << 16 >> 16, HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2]);
  $1 = HEAP32[$3 + 84 >> 2];
  HEAP8[$3 + 35 | 0] = $1;
  HEAP8[$3 + 36 | 0] = $1 >>> 8;
  $1 = HEAP32[$3 + 80 >> 2];
  HEAP8[$3 + 37 | 0] = $1;
  HEAP8[$3 + 38 | 0] = $1 >>> 8;
  graphicsSetVar($0);
  HEAP32[$3 + 92 >> 2] = jsvLockAgain(HEAP32[$3 + 88 >> 2]);
 }
 global$0 = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}
function TfLiteIntArrayEqualsArray($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1 : {
  if (!HEAP32[$3 + 24 >> 2]) {
   HEAP32[$3 + 28 >> 2] = !HEAP32[$3 + 20 >> 2];
   break label$1;
  }
  if (HEAP32[HEAP32[$3 + 24 >> 2] >> 2] != HEAP32[$3 + 20 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 12 >> 2] < HEAP32[HEAP32[$3 + 24 >> 2] >> 2]) {
    if (HEAP32[(HEAP32[$3 + 24 >> 2] + 4 | 0) + (HEAP32[$3 + 12 >> 2] << 2) >> 2] != HEAP32[HEAP32[$3 + 16 >> 2] + (HEAP32[$3 + 12 >> 2] << 2) >> 2]) {
     HEAP32[$3 + 28 >> 2] = 0;
     break label$1;
    } else {
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  HEAP32[$3 + 28 >> 2] = 1;
 }
 return HEAP32[$3 + 28 >> 2];
}
function jsvIteratorHasElement($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[HEAP32[$1 + 8 >> 2] >> 2] + -1 | 0;
 label$1 : {
  if ($0 >>> 0 <= 3) {
   label$3 : {
    switch ($0 - 1 | 0) {
    case 2:
     HEAP8[$1 + 15 | 0] = HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2] < (jsvGetArrayLength(HEAP32[HEAP32[$1 + 8 >> 2] + 8 >> 2]) | 0);
     break label$1;
    case 0:
     HEAP8[$1 + 15 | 0] = jsvObjectIteratorHasValue(HEAP32[$1 + 8 >> 2] + 4 | 0) & 1;
     break label$1;
    default:
     HEAP8[$1 + 15 | 0] = jsvStringIteratorHasChar(HEAP32[$1 + 8 >> 2] + 4 | 0) & 1;
     break label$1;
    case 1:
     break label$3;
    }
   }
   HEAP8[$1 + 15 | 0] = jsvArrayBufferIteratorHasElement(HEAP32[$1 + 8 >> 2] + 4 | 0) & 1;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}
function jswrap_io_analogWrite($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP8[$3 + 47 | 0] = $0;
 HEAPF64[$3 + 32 >> 3] = $1;
 HEAP32[$3 + 28 >> 2] = $2;
 HEAPF64[$3 + 16 >> 3] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 if (jsvIsObject(HEAP32[$3 + 28 >> 2]) & 1) {
  HEAPF64[$3 + 16 >> 3] = jsvGetFloatAndUnLock(jsvObjectGetChild(HEAP32[$3 + 28 >> 2], 33340, 0));
  label$2 : {
   if (jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$3 + 28 >> 2], 33345, 0)) & 1) {
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] | 2;
    break label$2;
   }
   if (jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$3 + 28 >> 2], 33355, 0)) & 1) {
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] | 1;
   }
  }
 }
 jshPinAnalogOutput(HEAPU8[$3 + 47 | 0], HEAPF64[$3 + 32 >> 3], HEAPF64[$3 + 16 >> 3], HEAP32[$3 + 12 >> 2]);
 global$0 = $3 + 48 | 0;
}
function jswrap_espruino_enableWatchdog($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAPF64[$2 + 24 >> 3] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1 : {
  label$2 : {
   if (HEAPF64[$2 + 24 >> 3] < 0) {
    break label$2;
   }
   $1 = __DOUBLE_BITS(HEAPF64[$2 + 24 >> 3]);
   $3 = i64toi32_i32$HIGH_BITS & 2147483647;
   if (($3 | 0) == 2146435072 & $1 >>> 0 > 0 | $3 >>> 0 > 2146435072) {
    break label$2;
   }
   break label$1;
  }
  HEAPF64[$2 + 24 >> 3] = 1;
 }
 label$3 : {
  label$4 : {
   if (!(jsvIsUndefined(HEAP32[$2 + 20 >> 2]) & 1)) {
    if (!(jsvGetBool(HEAP32[$2 + 20 >> 2]) & 1)) {
     break label$4;
    }
   }
   HEAP16[47566] = HEAPU16[47566] | 512;
   break label$3;
  }
  HEAP16[47566] = HEAPU16[47566] & -513;
 }
 HEAPF64[(global$0 - 16 | 0) + 8 >> 3] = HEAPF64[$2 + 24 >> 3];
 global$0 = $2 + 32 | 0;
}
function jshPushIOCharEventAppend($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP8[$2 + 14 | 0] = $0;
 HEAP8[$2 + 13 | 0] = $1;
 HEAP8[$2 + 12 | 0] = HEAPU8[95202] + 255;
 label$1 : {
  if (!(HEAPU8[95202] == HEAPU8[95203] | HEAPU8[$2 + 12 | 0] == HEAPU8[95203])) {
   if (HEAPU8[$2 + 14 | 0] == (HEAPU8[Math_imul(HEAPU8[$2 + 12 | 0], 5) + 95792 | 0] & 31)) {
    HEAP8[$2 + 11 | 0] = ((HEAPU8[Math_imul(HEAPU8[$2 + 12 | 0], 5) + 95792 | 0] & 96) >> 5) + 1;
    if (HEAPU8[$2 + 11 | 0] < 4) {
     HEAP8[HEAPU8[$2 + 11 | 0] + (Math_imul(HEAPU8[$2 + 12 | 0], 5) + 95793 | 0) | 0] = HEAPU8[$2 + 13 | 0];
     HEAP8[Math_imul(HEAPU8[$2 + 12 | 0], 5) + 95792 | 0] = HEAPU8[Math_imul(HEAPU8[$2 + 12 | 0], 5) + 95792 | 0] & 159 | HEAPU8[$2 + 11 | 0] << 5;
     HEAP8[$2 + 15 | 0] = 1;
     break label$1;
    }
   }
  }
  HEAP8[$2 + 15 | 0] = 0;
 }
 return HEAP8[$2 + 15 | 0] & 1;
}
function jsvArrayBufferIteratorGetValue($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1 : {
  if (!HEAPU16[HEAP32[$1 + 24 >> 2] + 20 >> 1]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  jsvArrayBufferIteratorGetValueData(HEAP32[$1 + 24 >> 2], $1 + 16 | 0);
  if (HEAPU16[HEAP32[$1 + 24 >> 2] + 20 >> 1] & 32) {
   HEAP32[$1 + 28 >> 2] = jsvNewFromFloat(jsvArrayBufferIteratorDataToFloat(HEAP32[$1 + 24 >> 2], $1 + 16 | 0));
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvArrayBufferIteratorDataToInt(HEAP32[$1 + 24 >> 2], $1 + 16 | 0);
  if ((HEAPU16[HEAP32[$1 + 24 >> 2] + 20 >> 1] & -257) == 4) {
   HEAP32[$1 + 28 >> 2] = jsvNewFromLongInteger(HEAP32[$1 + 12 >> 2], 0);
   break label$1;
  }
  HEAP32[$1 + 28 >> 2] = jsvNewFromInteger(HEAP32[$1 + 12 >> 2]);
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function graphicsFallbackFillRect($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = global$0 - 32 | 0;
 global$0 = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 HEAP32[$6 >> 2] = HEAP32[$6 + 20 >> 2];
 while (1) {
  if (HEAP32[$6 >> 2] <= HEAP32[$6 + 12 >> 2]) {
   HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 24 >> 2];
   while (1) {
    if (HEAP32[$6 + 4 >> 2] <= HEAP32[$6 + 16 >> 2]) {
     graphicsSetPixelDevice(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 4 >> 2], HEAP32[$6 >> 2], HEAP32[$6 + 8 >> 2]);
     HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $6 + 32 | 0;
}
function jsfNameFromVar($0, $1) {
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 44 >> 2] = $1;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP8[$2 + 21 | 0] = 0;
 HEAP8[$2 + 22 | 0] = 0;
 HEAP8[$2 + 23 | 0] = 0;
 HEAP8[$2 + 24 | 0] = 0;
 HEAP8[$2 + 25 | 0] = 0;
 HEAP8[$2 + 26 | 0] = 0;
 HEAP8[$2 + 27 | 0] = 0;
 HEAP8[$2 + 28 | 0] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 jsvGetString(HEAP32[$2 + 44 >> 2], $2, 29);
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 + 24 >> 2] = HEAP32[$2 + 24 >> 2];
 $1 = HEAP32[$2 + 20 >> 2];
 HEAP32[$0 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
 HEAP32[$0 + 20 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = $1;
 global$0 = $2 + 48 | 0;
}
function tflite__FlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$2 + 28 >> 2]);
 HEAP32[$2 + 16 >> 2] = tflite__RuntimeShape__DimsData_28_29_20const(HEAP32[$2 + 28 >> 2]);
 HEAP32[$2 + 12 >> 2] = 1;
 HEAP32[$2 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 8 >> 2] < HEAP32[$2 + 20 >> 2]) {
   $0 = $2;
   if (HEAP32[$2 + 8 >> 2] == HEAP32[$2 + 24 >> 2]) {
    $1 = 1;
   } else {
    $1 = HEAP32[HEAP32[$2 + 16 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) >> 2];
   }
   HEAP32[$0 + 12 >> 2] = Math_imul($1, HEAP32[$2 + 12 >> 2]);
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function jsvAddGetterOrSetter($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP8[$4 + 23 | 0] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = jsvFindChildFromVar(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], 1);
 if (jsvIsName(HEAP32[$4 + 12 >> 2]) & 1) {
  HEAP32[$4 + 8 >> 2] = jsvGetValueOfName(HEAP32[$4 + 12 >> 2]);
  if (!(jsvIsGetterOrSetter(HEAP32[$4 + 8 >> 2]) & 1)) {
   jsvUnLock(HEAP32[$4 + 8 >> 2]);
   HEAP32[$4 + 8 >> 2] = jsvNewWithFlags(6);
   jsvSetValueOfName(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2]);
  }
  if (jsvIsGetterOrSetter(HEAP32[$4 + 8 >> 2]) & 1) {
   jsvObjectSetChild(HEAP32[$4 + 8 >> 2], HEAP8[$4 + 23 | 0] & 1 ? 2767 : 2771, HEAP32[$4 + 16 >> 2]);
  }
  jsvUnLock(HEAP32[$4 + 8 >> 2]);
 }
 jsvUnLock(HEAP32[$4 + 12 >> 2]);
 global$0 = $4 + 32 | 0;
}
function jsvAppendStringVar($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 80 | 0;
 global$0 = $4;
 HEAP32[$4 + 76 >> 2] = $0;
 HEAP32[$4 + 72 >> 2] = $1;
 HEAP32[$4 + 68 >> 2] = $2;
 HEAP32[$4 + 64 >> 2] = $3;
 $0 = $4 + 16 | 0;
 $1 = $4 + 40 | 0;
 jsvStringIteratorNew($1, HEAP32[$4 + 76 >> 2], 0);
 jsvStringIteratorGotoEnd($1);
 jsvStringIteratorNew($0, HEAP32[$4 + 72 >> 2], HEAP32[$4 + 68 >> 2]);
 while (1) {
  if (jsvStringIteratorHasChar($4 + 16 | 0) & 1) {
   $0 = HEAP32[$4 + 64 >> 2];
   HEAP32[$4 + 64 >> 2] = $0 + -1;
   $0 = $0 >>> 0 > 0;
  } else {
   $0 = 0;
  }
  if ($0) {
   $0 = $4 + 40 | 0;
   HEAP8[$4 + 15 | 0] = jsvStringIteratorGetCharAndNext($4 + 16 | 0);
   jsvStringIteratorAppend($0, HEAP8[$4 + 15 | 0]);
   continue;
  }
  break;
 }
 $0 = $4 + 40 | 0;
 jsvStringIteratorFree($4 + 16 | 0);
 jsvStringIteratorFree($0);
 global$0 = $4 + 80 | 0;
}
function jsi2cWrite($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 48 | 0;
 global$0 = $5;
 HEAP32[$5 + 44 >> 2] = $0;
 HEAP8[$5 + 43 | 0] = $1;
 HEAP32[$5 + 36 >> 2] = $2;
 HEAP32[$5 + 32 >> 2] = $3;
 HEAP8[$5 + 31 | 0] = $4;
 if (!(HEAPU8[HEAP32[$5 + 44 >> 2] + 4 | 0] == 255 | HEAPU8[HEAP32[$5 + 44 >> 2] + 5 | 0] == 255)) {
  $0 = $5 + 16 | 0;
  i2c_initstruct($0, HEAP32[$5 + 44 >> 2]);
  i2c_start($0);
  i2c_wr($0, HEAPU8[$5 + 43 | 0] << 1);
  HEAP32[$5 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 36 >> 2]) {
    i2c_wr($5 + 16 | 0, HEAPU8[HEAP32[$5 + 32 >> 2] + HEAP32[$5 + 12 >> 2] | 0]);
    HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP8[$5 + 31 | 0] & 1) {
   i2c_stop($5 + 16 | 0);
  }
  HEAP8[HEAP32[$5 + 44 >> 2] + 6 | 0] = HEAP8[$5 + 18 | 0] & 1;
 }
 global$0 = $5 + 48 | 0;
}
function jsfNameFromString($0, $1) {
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 44 >> 2] = $1;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP8[$2 + 21 | 0] = 0;
 HEAP8[$2 + 22 | 0] = 0;
 HEAP8[$2 + 23 | 0] = 0;
 HEAP8[$2 + 24 | 0] = 0;
 HEAP8[$2 + 25 | 0] = 0;
 HEAP8[$2 + 26 | 0] = 0;
 HEAP8[$2 + 27 | 0] = 0;
 HEAP8[$2 + 28 | 0] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 strcpy($2, HEAP32[$2 + 44 >> 2]);
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 + 24 >> 2] = HEAP32[$2 + 24 >> 2];
 $1 = HEAP32[$2 + 20 >> 2];
 HEAP32[$0 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
 HEAP32[$0 + 20 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = $1;
 global$0 = $2 + 48 | 0;
}
function tflite__reference_ops__Ceil_28tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3) {
 var $4 = 0, $5 = Math_fround(0);
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 20 >> 2]);
 HEAP32[$4 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 8 >> 2] < HEAP32[$4 + 12 >> 2]) {
   $5 = ceil_28float_29(HEAPF32[HEAP32[$4 + 24 >> 2] + (HEAP32[$4 + 8 >> 2] << 2) >> 2]);
   HEAPF32[HEAP32[$4 + 16 >> 2] + (HEAP32[$4 + 8 >> 2] << 2) >> 2] = $5;
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $4 + 32 | 0;
}
function i2c_rd_bit($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jshPinSetValue(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0], 1);
 dly(HEAP32[$1 + 12 >> 2]);
 jshPinSetValue(HEAPU8[HEAP32[$1 + 12 >> 2]], 1);
 dly(HEAP32[$1 + 12 >> 2]);
 HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
 while (1) {
  if (jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2]]) & 1) {
   $0 = 0;
  } else {
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 8 >> 2] = $0 + -1;
  }
  if ($0) {
   continue;
  }
  break;
 }
 if (!(HEAP32[$1 + 8 >> 2] | !HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2])) {
  err(7499);
 }
 dly(HEAP32[$1 + 12 >> 2]);
 HEAP8[$1 + 7 | 0] = jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]) & 1;
 jshPinSetValue(HEAPU8[HEAP32[$1 + 12 >> 2]], 0);
 dly(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return HEAP8[$1 + 7 | 0] & 1;
}
function jswrap_error_toString($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = jsvObjectGetChild(HEAP32[$1 + 24 >> 2], 31527, 0);
 if (!HEAP32[$1 + 20 >> 2]) {
  HEAP32[$1 + 20 >> 2] = jsvNewFromString(31532);
 }
 label$2 : {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$2;
  }
  HEAP32[$1 + 16 >> 2] = jsvObjectGetChild(HEAP32[$1 + 24 >> 2], 31519, 0);
  if (HEAP32[$1 + 16 >> 2]) {
   $0 = HEAP32[$1 + 20 >> 2];
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 16 >> 2];
   HEAP32[$1 >> 2] = $0;
   HEAP32[$1 + 12 >> 2] = jsvVarPrintf(31589, $1);
   jsvUnLock2(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
   HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 12 >> 2];
  }
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function jsvSetCharactersInVar($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAPU16[HEAP32[$2 + 12 >> 2] + 14 >> 1] & 63;
 HEAP16[$2 + 2 >> 1] = HEAPU16[HEAP32[$2 + 12 >> 2] + 14 >> 1] & -64;
 label$1 : {
  if (HEAPU32[$2 + 4 >> 2] <= 26) {
   if (HEAPU32[$2 + 4 >> 2] <= 21) {
    HEAP16[HEAP32[$2 + 12 >> 2] + 14 >> 1] = HEAPU16[$2 + 2 >> 1] | HEAP32[$2 + 8 >> 2] + 17;
    break label$1;
   }
   HEAP16[HEAP32[$2 + 12 >> 2] + 14 >> 1] = HEAPU16[$2 + 2 >> 1] | HEAP32[$2 + 8 >> 2] + 22;
   break label$1;
  }
  label$4 : {
   if (HEAPU32[$2 + 4 >> 2] <= 37) {
    HEAP16[HEAP32[$2 + 12 >> 2] + 14 >> 1] = HEAPU16[$2 + 2 >> 1] | HEAP32[$2 + 8 >> 2] + 27;
    break label$4;
   }
   HEAP16[HEAP32[$2 + 12 >> 2] + 14 >> 1] = HEAPU16[$2 + 2 >> 1] | HEAP32[$2 + 8 >> 2] + 40;
  }
 }
}
function jsvGetStringLength($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 24 >> 2];
 HEAP32[$1 + 12 >> 2] = 0;
 label$1 : {
  if (!(jsvHasCharacterData(HEAP32[$1 + 24 >> 2]) & 1)) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  while (1) {
   if (HEAP32[$1 + 16 >> 2]) {
    HEAP16[$1 + 10 >> 1] = jsvGetLastChild(HEAP32[$1 + 16 >> 2]);
    HEAP32[$1 + 20 >> 2] = jsvGetCharactersInVar(HEAP32[$1 + 16 >> 2]) + HEAP32[$1 + 20 >> 2];
    jsvUnLock(HEAP32[$1 + 12 >> 2]);
    $0 = jsvLockSafe(HEAPU16[$1 + 10 >> 1]);
    HEAP32[$1 + 12 >> 2] = $0;
    HEAP32[$1 + 16 >> 2] = $0;
    continue;
   }
   break;
  }
  jsvUnLock(HEAP32[$1 + 12 >> 2]);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function jstPinTaskChecker($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1 : {
  if (HEAPU8[HEAP32[$2 + 24 >> 2] + 28 | 0] != 1) {
   HEAP8[$2 + 31 | 0] = 0;
   break label$1;
  }
  HEAP8[$2 + 19 | 0] = HEAPU8[HEAP32[$2 + 20 >> 2]];
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 12 >> 2] < 4) {
    if (HEAPU8[HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 24 >> 2] + 12 | 0) | 0] == HEAPU8[$2 + 19 | 0]) {
     HEAP8[$2 + 31 | 0] = 1;
     break label$1;
    }
    if (HEAPU8[HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 24 >> 2] + 12 | 0) | 0] == 255) {
     HEAP8[$2 + 31 | 0] = 0;
     break label$1;
    } else {
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  HEAP8[$2 + 31 | 0] = 0;
 }
 return HEAP8[$2 + 31 | 0] & 1;
}
function jswrap_date_setHours($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0;
 $5 = global$0 - 48 | 0;
 global$0 = $5;
 HEAP32[$5 + 44 >> 2] = $0;
 HEAP32[$5 + 40 >> 2] = $1;
 HEAP32[$5 + 36 >> 2] = $2;
 HEAP32[$5 + 32 >> 2] = $3;
 HEAP32[$5 + 28 >> 2] = $4;
 getTimeFromDateVar($5, HEAP32[$5 + 44 >> 2], 0);
 HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 40 >> 2];
 if (jsvIsNumeric(HEAP32[$5 + 36 >> 2]) & 1) {
  HEAP32[$5 + 12 >> 2] = jsvGetInteger(HEAP32[$5 + 36 >> 2]);
 }
 if (jsvIsNumeric(HEAP32[$5 + 32 >> 2]) & 1) {
  HEAP32[$5 + 8 >> 2] = jsvGetInteger(HEAP32[$5 + 32 >> 2]);
 }
 if (jsvIsNumeric(HEAP32[$5 + 28 >> 2]) & 1) {
  HEAP32[$5 + 4 >> 2] = jsvGetInteger(HEAP32[$5 + 28 >> 2]);
 }
 $6 = jswrap_date_setTime(HEAP32[$5 + 44 >> 2], fromTimeInDay($5));
 global$0 = $5 + 48 | 0;
 return +$6;
}
function jsvArrayAddToEnd($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = 1;
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 16 >> 2];
 if (jsvGetLastChild(HEAP32[$2 + 24 >> 2]) & 65535) {
  HEAP32[$2 + 8 >> 2] = jsvLock(jsvGetLastChild(HEAP32[$2 + 24 >> 2]) & 65535);
  HEAP32[$2 + 12 >> 2] = jsvGetInteger(HEAP32[$2 + 8 >> 2]) + 1;
  jsvUnLock(HEAP32[$2 + 8 >> 2]);
 }
 HEAP32[$2 + 4 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 20 >> 2]);
 label$2 : {
  if (!HEAP32[$2 + 4 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$2;
  }
  jsvAddName(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 4 >> 2]);
  jsvUnLock(HEAP32[$2 + 4 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function jsfSaveToFlash_writecb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 $1 = HEAPU8[$2 + 15 | 0];
 $4 = HEAP32[$2 + 4 >> 2];
 $3 = HEAP32[$2 + 4 >> 2];
 $0 = HEAP32[$3 + 140 >> 2];
 HEAP32[$3 + 140 >> 2] = $0 + 1;
 HEAP8[$0 + ($4 + 12 | 0) | 0] = $1;
 if (HEAPU32[HEAP32[$2 + 4 >> 2] + 140 >> 2] >= 128) {
  jshFlashRead(HEAP32[$2 + 4 >> 2] + 12 | 0, HEAP32[HEAP32[$2 + 4 >> 2] >> 2], HEAP32[HEAP32[$2 + 4 >> 2] + 140 >> 2]);
  $0 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[HEAP32[$2 + 4 >> 2] + 140 >> 2] + HEAP32[$0 >> 2];
  HEAP32[HEAP32[$2 + 4 >> 2] + 140 >> 2] = 0;
  if (!(HEAP32[HEAP32[$2 + 4 >> 2] >> 2] & 1023)) {
   jsiConsolePrintString(2085);
  }
 }
 global$0 = $2 + 16 | 0;
}
function jswrap_banglejs_setLCDPower($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = $0;
 label$1 : {
  if (HEAP8[$1 + 15 | 0] & 1) {
   lcdST7789_cmd(17, 0, 0);
   do_indexing(20);
   lcdST7789_cmd(41, 0, 0);
   break label$1;
  }
  lcdST7789_cmd(40, 0, 0);
  do_indexing(20);
  lcdST7789_cmd(16, 0, 0);
 }
 jshUSARTKick(HEAP8[$1 + 15 | 0] & 1);
 if ((HEAP8[251256] & 1) != (HEAP8[$1 + 15 | 0] & 1)) {
  HEAP32[$1 + 8 >> 2] = jsvObjectGetChild(HEAP32[23774], 28004, 0);
  if (HEAP32[$1 + 8 >> 2]) {
   $0 = $1 + 4 | 0;
   HEAP32[$1 + 4 >> 2] = jsvNewFromBool(HEAP8[$1 + 15 | 0] & 1);
   jsiQueueObjectCallbacks(HEAP32[$1 + 8 >> 2], 28011, $0, 1);
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
 }
 HEAP16[125629] = 0;
 HEAP8[251256] = HEAP8[$1 + 15 | 0] & 1;
 global$0 = $1 + 16 | 0;
}
function jsvGetLongInteger($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 label$1 : {
  if (jsvIsInt(HEAP32[$1 + 4 >> 2]) & 1) {
   $0 = jsvGetInteger(HEAP32[$1 + 4 >> 2]);
   HEAP32[$1 + 8 >> 2] = $0;
   HEAP32[$1 + 12 >> 2] = $0 >> 31;
   break label$1;
  }
  $0 = $1;
  $5 = $1;
  $2 = jsvGetFloat(HEAP32[$1 + 4 >> 2]);
  label$3 : {
   if (Math_abs($2) < 0x8000000000000000) {
    $3 = Math_abs($2) >= 1 ? $2 > 0 ? ~~Math_min(Math_floor($2 / 4294967296), 4294967295) >>> 0 : ~~Math_ceil(($2 - +(~~$2 >>> 0 >>> 0)) / 4294967296) >>> 0 : 0;
    $4 = ~~$2 >>> 0;
    break label$3;
   }
   $3 = -2147483648;
   $4 = 0;
  }
  HEAP32[$5 + 8 >> 2] = $4;
  HEAP32[$0 + 12 >> 2] = $3;
 }
 global$0 = $1 + 16 | 0;
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 12 >> 2];
 return HEAP32[$1 + 8 >> 2];
}
function jswrap_interface_getSerial() {
 var $0 = 0, $1 = 0;
 $0 = global$0 + -64 | 0;
 global$0 = $0;
 HEAP32[$0 + 8 >> 2] = jshGetSerialNumber($0 + 16 | 0);
 HEAP32[$0 + 4 >> 2] = jsvNewFromEmptyString();
 label$1 : {
  if (!HEAP32[$0 + 4 >> 2]) {
   HEAP32[$0 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$0 + 12 >> 2] < HEAP32[$0 + 8 >> 2]) {
    if (!(!HEAP32[$0 + 12 >> 2] | HEAP32[$0 + 12 >> 2] & 3)) {
     jsvAppendString(HEAP32[$0 + 4 >> 2], 33148);
    }
    $1 = $0 + 52 | 0;
    itostr(HEAPU8[HEAP32[$0 + 12 >> 2] + ($0 + 16 | 0) | 0] | 256, $1, 16);
    jsvAppendString(HEAP32[$0 + 4 >> 2], $1 + 1 | 0);
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 4 >> 2];
 }
 global$0 = $0 - -64 | 0;
 return HEAP32[$0 + 60 >> 2];
}
function jsvGetCharsOnLine($0, $1) {
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 HEAP32[$2 + 36 >> 2] = 1;
 HEAP32[$2 + 32 >> 2] = 0;
 jsvStringIteratorNew($2 + 8 | 0, HEAP32[$2 + 44 >> 2], 0);
 while (1) {
  label$2 : {
   if (!(jsvStringIteratorHasChar($2 + 8 | 0) & 1)) {
    break label$2;
   }
   label$3 : {
    if ((jsvStringIteratorGetCharAndNext($2 + 8 | 0) & 255) == 10) {
     HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 36 >> 2] + 1;
     if (HEAPU32[$2 + 36 >> 2] > HEAPU32[$2 + 40 >> 2]) {
      break label$2;
     }
     break label$3;
    }
    if (HEAP32[$2 + 36 >> 2] == HEAP32[$2 + 40 >> 2]) {
     HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 32 >> 2] + 1;
    }
   }
   continue;
  }
  break;
 }
 jsvStringIteratorFree($2 + 8 | 0);
 global$0 = $2 + 48 | 0;
 return HEAP32[$2 + 32 >> 2];
}
function jsvFindChildFromStringI($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP16[$2 + 18 >> 1] = jsvGetFirstChild(HEAP32[$2 + 24 >> 2]);
 label$1 : {
  while (1) {
   if (HEAPU16[$2 + 18 >> 1]) {
    HEAP32[$2 + 12 >> 2] = jsvGetAddressOf(HEAPU16[$2 + 18 >> 1]);
    label$4 : {
     if (!(jsvHasCharacterData(HEAP32[$2 + 12 >> 2]) & 1)) {
      break label$4;
     }
     if (!(jsvIsStringEqualOrStartsWithOffset(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2], 0, 1) & 1)) {
      break label$4;
     }
     HEAP32[$2 + 28 >> 2] = jsvLockAgain(HEAP32[$2 + 12 >> 2]);
     break label$1;
    }
    HEAP16[$2 + 18 >> 1] = jsvGetNextSibling(HEAP32[$2 + 12 >> 2]);
    continue;
   }
   break;
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function jsiDumpDeviceInitialisation($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = jsvObjectGetChild(HEAP32[23774], HEAP32[$3 + 20 >> 2], 0);
 if (HEAP32[$3 + 16 >> 2]) {
  HEAP32[$3 + 12 >> 2] = jsvObjectGetChild(HEAP32[$3 + 16 >> 2], 5355, 0);
  if (HEAP32[$3 + 12 >> 2]) {
   $0 = HEAP32[$3 + 28 >> 2];
   $1 = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$3 + 20 >> 2];
   cbprintf($0, $1, 5383, $3);
   if (jsvIsObject(HEAP32[$3 + 12 >> 2]) & 1) {
    jsfGetJSONWithCallback(HEAP32[$3 + 12 >> 2], 0, 32, 0, HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2]);
   }
   FUNCTION_TABLE[HEAP32[$3 + 28 >> 2]](5379, HEAP32[$3 + 24 >> 2]);
  }
  jsvUnLock2(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2]);
 }
 global$0 = $3 + 32 | 0;
}
function jsvGetLength($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvGetArrayLength(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  if (jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvGetArrayBufferLength(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvGetStringLength(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  label$5 : {
   if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
    if (!(jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1)) {
     break label$5;
    }
   }
   HEAP32[$1 + 12 >> 2] = jsvGetChildren(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 1;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jswrap_io_poke($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 + -64 | 0;
 global$0 = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 HEAP32[$3 + 52 >> 2] = $2;
 label$1 : {
  if (jsvIsNumeric(HEAP32[$3 + 56 >> 2]) & 1) {
   _jswrap_io_poke(HEAP32[$3 + 60 >> 2], jsvGetInteger(HEAP32[$3 + 56 >> 2]), HEAP32[$3 + 52 >> 2]);
   break label$1;
  }
  if (jsvIsIterable(HEAP32[$3 + 56 >> 2]) & 1) {
   jsvIteratorNew($3 + 8 | 0, HEAP32[$3 + 56 >> 2], 1);
   while (1) {
    if (jsvIteratorHasElement($3 + 8 | 0) & 1) {
     $0 = $3 + 8 | 0;
     _jswrap_io_poke(HEAP32[$3 + 60 >> 2], jsvIteratorGetIntegerValue($0), HEAP32[$3 + 52 >> 2]);
     HEAP32[$3 + 60 >> 2] = HEAP32[$3 + 52 >> 2] + HEAP32[$3 + 60 >> 2];
     jsvIteratorNext($0);
     continue;
    }
    break;
   }
   jsvIteratorFree($3 + 8 | 0);
  }
 }
 global$0 = $3 - -64 | 0;
}
function jswrap_storage_writeJSON($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 $3 = $2 + 32 | 0;
 HEAP32[$2 + 76 >> 2] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 HEAP32[$2 + 68 >> 2] = jswrap_json_stringify(HEAP32[$2 + 72 >> 2], 0, 0);
 jsfNameFromVar($3, HEAP32[$2 + 76 >> 2]);
 $0 = HEAP32[$2 + 68 >> 2];
 HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 56 >> 2];
 $1 = HEAP32[$2 + 52 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 48 >> 2];
 HEAP32[$2 + 20 >> 2] = $1;
 $1 = HEAP32[$2 + 44 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 40 >> 2];
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 36 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$2 + 32 >> 2];
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP8[$2 + 67 | 0] = jsfWriteFile($2, $0, 0, 0, 0) & 1;
 jsvUnLock(HEAP32[$2 + 68 >> 2]);
 global$0 = $2 + 80 | 0;
 return HEAP8[$2 + 67 | 0] & 1;
}
function jswrap_promise_all_resolve($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$3 + 28 >> 2], 36606, 0));
 HEAP32[$3 + 12 >> 2] = jsvObjectGetChild(HEAP32[$3 + 28 >> 2], 36612, 0);
 if (HEAP32[$3 + 12 >> 2]) {
  jsvSetArrayItem(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + -1;
  jsvObjectSetChildAndUnLock(HEAP32[$3 + 28 >> 2], 36606, jsvNewFromInteger(HEAP32[$3 + 16 >> 2]));
  if (!HEAP32[$3 + 16 >> 2]) {
   _jswrap_promise_queueresolve(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 12 >> 2]);
  }
  jsvUnLock(HEAP32[$3 + 12 >> 2]);
 }
 global$0 = $3 + 32 | 0;
}
function tflite__MicroMutableOpResolver__FindOp_28tflite__BuiltinOperator_2c_20int_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP32[$3 + 12 >> 2] = 0;
 label$1 : {
  while (1) {
   if (HEAP32[$3 + 12 >> 2] < HEAP32[$0 + 4100 >> 2]) {
    HEAP32[$3 + 8 >> 2] = ($0 + 4 | 0) + (HEAP32[$3 + 12 >> 2] << 5);
    if (!(HEAP32[HEAP32[$3 + 8 >> 2] + 20 >> 2] != HEAP32[$3 + 20 >> 2] | HEAP32[HEAP32[$3 + 8 >> 2] + 28 >> 2] != HEAP32[$3 + 16 >> 2])) {
     HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
     break label$1;
    }
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$3 + 28 >> 2] = 0;
 }
 return HEAP32[$3 + 28 >> 2];
}
function jspePostfixExpression() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 label$1 : {
  if (!(HEAP16[HEAP32[13768] + 2 >> 1] != 153 ? HEAP16[HEAP32[13768] + 2 >> 1] != 152 : 0)) {
   HEAP32[$0 + 8 >> 2] = HEAP16[HEAP32[13768] + 2 >> 1];
   jslGetNextToken();
   HEAP32[$0 + 12 >> 2] = jspePostfixExpression();
   if ((HEAP32[23778] & 63) == 1) {
    HEAP32[$0 + 4 >> 2] = jsvNewFromInteger(1);
    HEAP32[$0 >> 2] = jsvMathsOpSkipNames(HEAP32[$0 + 12 >> 2], HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2] == 152 ? 43 : 45);
    jsvUnLock(HEAP32[$0 + 4 >> 2]);
    jsvReplaceWith(HEAP32[$0 + 12 >> 2], HEAP32[$0 >> 2]);
    jsvUnLock(HEAP32[$0 >> 2]);
   }
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = jspeFactorFunctionCall();
 }
 $1 = __jspePostfixExpression(HEAP32[$0 + 12 >> 2]);
 global$0 = $0 + 16 | 0;
 return $1;
}
function jsvGetCharactersInVar($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = HEAPU16[HEAP32[$1 + 8 >> 2] + 14 >> 1] & 63;
 label$1 : {
  if (HEAP32[$1 + 4 >> 2] == 38) {
   HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 8 >> 2] >> 2];
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 39) {
   HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2];
   break label$1;
  }
  if (HEAPU32[$1 + 4 >> 2] <= 26) {
   if (HEAPU32[$1 + 4 >> 2] <= 21) {
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2] - 17;
    break label$1;
   }
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2] - 22;
   break label$1;
  }
  if (HEAPU32[$1 + 4 >> 2] <= 37) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2] - 27;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2] - 40;
 }
 return HEAP32[$1 + 12 >> 2];
}
function lcdST7789_setMode($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[24392] != HEAP32[$1 + 12 >> 2]) {
  HEAP32[24392] = HEAP32[$1 + 12 >> 2];
  $0 = HEAP32[24392];
  label$2 : {
   if ($0 >>> 0 > 4) {
    break label$2;
   }
   label$3 : {
    switch ($0 - 1 | 0) {
    case 0:
    case 2:
    case 3:
     HEAP8[97556] = 0;
     lcdST7789_cmd(19, 0, 0);
     HEAP32[24390] = 0;
     lcdST7789_scrollCmd();
     break label$2;
    case 1:
     break label$3;
    default:
     break label$2;
    }
   }
   HEAP8[97556] = 1;
   HEAP8[$1 + 8 | 0] = 0;
   HEAP8[$1 + 9 | 0] = 40;
   HEAP8[$1 + 10 | 0] = 0;
   HEAP8[$1 + 11 | 0] = 199;
   lcdST7789_cmd(48, 4, $1 + 8 | 0);
   lcdST7789_cmd(18, 0, 0);
   HEAP32[24390] = 0;
   lcdST7789_scrollCmd();
  }
 }
 global$0 = $1 + 16 | 0;
}
function jswrap_interface_print($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = $1 + 8 | 0;
 jsiConsoleRemoveInputLine();
 jsvObjectIteratorNew($0, HEAP32[$1 + 12 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue($1 + 8 | 0) & 1) {
   HEAP32[$1 + 4 >> 2] = jsvObjectIteratorGetValue($1 + 8 | 0);
   label$3 : {
    if (jsvIsString(HEAP32[$1 + 4 >> 2]) & 1) {
     jsiConsolePrintStringVar(HEAP32[$1 + 4 >> 2]);
     break label$3;
    }
    jsfPrintJSON(HEAP32[$1 + 4 >> 2], 261);
   }
   $0 = $1 + 8 | 0;
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   jsvObjectIteratorNext($0);
   if (jsvObjectIteratorHasValue($0) & 1) {
    jsiConsolePrintString(33e3);
   }
   continue;
  }
  break;
 }
 jsvObjectIteratorFree($1 + 8 | 0);
 jsiConsolePrintString(33002);
 global$0 = $1 + 16 | 0;
}
function jswrap_espruino_CRC32($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 HEAP32[$1 + 60 >> 2] = $0;
 jsvIteratorNew($1 + 16 | 0, HEAP32[$1 + 60 >> 2], 1);
 HEAP32[$1 + 12 >> 2] = -1;
 while (1) {
  if (jsvIteratorHasElement($1 + 16 | 0) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvIteratorGetIntegerValue($1 + 16 | 0) & 255 ^ HEAP32[$1 + 12 >> 2];
   HEAP32[$1 + 8 >> 2] = 0;
   while (1) {
    if (HEAP32[$1 + 8 >> 2] < 8) {
     HEAP32[$1 + 12 >> 2] = 0 - (HEAP32[$1 + 12 >> 2] & 1) & -306674912 ^ HEAP32[$1 + 12 >> 2] >>> 1;
     HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
     continue;
    }
    break;
   }
   jsvIteratorNext($1 + 16 | 0);
   continue;
  }
  break;
 }
 jsvIteratorFree($1 + 16 | 0);
 $0 = jsvNewFromLongInteger(HEAP32[$1 + 12 >> 2] ^ -1, 0);
 global$0 = $1 - -64 | 0;
 return $0 | 0;
}
function __fwritex($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = HEAP32[$2 + 16 >> 2];
 label$1 : {
  if (!$3) {
   if (__towrite($2)) {
    break label$1;
   }
   $3 = HEAP32[$2 + 16 >> 2];
  }
  $5 = HEAP32[$2 + 20 >> 2];
  if ($3 - $5 >>> 0 < $1 >>> 0) {
   FUNCTION_TABLE[HEAP32[$2 + 36 >> 2]]($2, $0, $1) | 0;
   return;
  }
  label$5 : {
   if (HEAP8[$2 + 75 | 0] < 0) {
    break label$5;
   }
   $3 = $1;
   while (1) {
    $4 = $3;
    if (!$4) {
     break label$5;
    }
    $3 = $4 + -1 | 0;
    if (HEAPU8[$3 + $0 | 0] != 10) {
     continue;
    }
    break;
   }
   if (FUNCTION_TABLE[HEAP32[$2 + 36 >> 2]]($2, $0, $4) >>> 0 < $4 >>> 0) {
    break label$1;
   }
   $1 = $1 - $4 | 0;
   $0 = $0 + $4 | 0;
   $5 = HEAP32[$2 + 20 >> 2];
  }
  memcpy($5, $0, $1);
  HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + $1;
 }
}
function void_20tflite__reference_ops__Negate_float__28tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 20 >> 2]);
 HEAP32[$4 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 8 >> 2] < HEAP32[$4 + 12 >> 2]) {
   HEAPF32[HEAP32[$4 + 16 >> 2] + (HEAP32[$4 + 8 >> 2] << 2) >> 2] = -HEAPF32[HEAP32[$4 + 24 >> 2] + (HEAP32[$4 + 8 >> 2] << 2) >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $4 + 32 | 0;
}
function jshSetFlowControlEnabled($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = $0;
 HEAP8[$1 + 14 | 0] = 0;
 HEAP8[$1 + 13 | 0] = 255;
 if (!(HEAPU8[$1 + 15 | 0] < 21 | HEAPU8[$1 + 15 | 0] > 22)) {
  HEAP32[$1 + 8 >> 2] = HEAPU8[$1 + 15 | 0] - 21;
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 8 >> 2] + 95204;
  label$2 : {
   if (HEAP8[$1 + 14 | 0] & 1) {
    $0 = HEAP32[$1 + 4 >> 2];
    HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 8;
    break label$2;
   }
   $0 = HEAP32[$1 + 4 >> 2];
   HEAP8[$0 | 0] = HEAPU8[$0 | 0] & -9;
  }
  HEAP8[HEAP32[$1 + 8 >> 2] + 95206 | 0] = 255;
  if (jshIsPinValid(HEAPU8[$1 + 13 | 0]) & 1) {
   jshPinSetState(HEAPU8[$1 + 13 | 0], 1);
   jshPinSetValue(HEAPU8[$1 + 13 | 0], 0);
   HEAP8[HEAP32[$1 + 8 >> 2] + 95206 | 0] = HEAPU8[$1 + 13 | 0];
  }
 }
 global$0 = $1 + 16 | 0;
}
function jswrap_waveform_getBuffer($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = jsvObjectGetChild(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2] ? 37498 : 37467, 0);
 label$1 : {
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$3 + 16 >> 2]) {
   HEAP8[HEAP32[$3 + 16 >> 2]] = 0;
   if (!(!(jsvIsArrayBuffer(HEAP32[$3 + 12 >> 2]) & 1) | (HEAPU16[HEAP32[$3 + 12 >> 2] + 4 >> 1] & 15) != 2)) {
    HEAP8[HEAP32[$3 + 16 >> 2]] = 1;
   }
  }
  HEAP32[$3 + 8 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$3 + 12 >> 2]);
  jsvUnLock(HEAP32[$3 + 12 >> 2]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
 }
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function jswrap_date_setFullYear($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 + -64 | 0;
 global$0 = $4;
 HEAP32[$4 + 60 >> 2] = $0;
 HEAP32[$4 + 56 >> 2] = $1;
 HEAP32[$4 + 52 >> 2] = $2;
 HEAP32[$4 + 48 >> 2] = $3;
 getTimeFromDateVar($4 + 24 | 0, HEAP32[$4 + 60 >> 2], 0);
 getCalendarDate($4, HEAP32[$4 + 24 >> 2]);
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 56 >> 2];
 if (jsvIsNumeric(HEAP32[$4 + 52 >> 2]) & 1) {
  HEAP32[$4 + 8 >> 2] = jsvGetInteger(HEAP32[$4 + 52 >> 2]);
 }
 if (jsvIsNumeric(HEAP32[$4 + 48 >> 2]) & 1) {
  HEAP32[$4 + 4 >> 2] = jsvGetInteger(HEAP32[$4 + 48 >> 2]);
 }
 $0 = $4 + 24 | 0;
 HEAP32[$4 + 24 >> 2] = fromCalenderDate($4);
 $5 = jswrap_date_setTime(HEAP32[$4 + 60 >> 2], fromTimeInDay($0));
 global$0 = $4 - -64 | 0;
 return +$5;
}
function jslPrintTokenisedString($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 80 | 0;
 global$0 = $3;
 HEAP32[$3 + 76 >> 2] = $0;
 HEAP32[$3 + 72 >> 2] = $1;
 HEAP32[$3 + 68 >> 2] = $2;
 HEAP8[$3 + 31 | 0] = 0;
 jsvStringIteratorNew($3 + 8 | 0, HEAP32[$3 + 76 >> 2], 0);
 while (1) {
  if (jsvStringIteratorHasChar($3 + 8 | 0) & 1) {
   HEAP8[$3 + 7 | 0] = jsvStringIteratorGetCharAndNext($3 + 8 | 0);
   if (jslNeedSpaceBetween(HEAPU8[$3 + 31 | 0], HEAPU8[$3 + 7 | 0]) & 1) {
    FUNCTION_TABLE[HEAP32[$3 + 72 >> 2]](1844, HEAP32[$3 + 68 >> 2]);
   }
   $0 = $3 + 32 | 0;
   jslFunctionCharAsString(HEAPU8[$3 + 7 | 0], $0);
   FUNCTION_TABLE[HEAP32[$3 + 72 >> 2]]($0, HEAP32[$3 + 68 >> 2]);
   HEAP8[$3 + 31 | 0] = HEAPU8[$3 + 7 | 0];
   continue;
  }
  break;
 }
 jsvStringIteratorFree($3 + 8 | 0);
 global$0 = $3 + 80 | 0;
}
function tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 32 | 0;
 global$0 = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 label$1 : {
  if ((tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const(HEAP32[$5 + 28 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 HEAP32[$5 + 8 >> 2] = flatbuffers__Vector_int___Data_28_29_20const(HEAP32[$5 + 28 >> 2]);
 global$0 = $5 + 32 | 0;
 return HEAP32[$5 + 12 >> 2] + Math_imul(HEAP32[HEAP32[$5 + 8 >> 2] + 12 >> 2], HEAP32[$5 + 16 >> 2] + Math_imul(HEAP32[HEAP32[$5 + 8 >> 2] + 8 >> 2], HEAP32[$5 + 20 >> 2] + Math_imul(HEAP32[$5 + 24 >> 2], HEAP32[HEAP32[$5 + 8 >> 2] + 4 >> 2]) | 0) | 0) | 0;
}
function jsiQueueEvents($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = jsvNewWithFlags(5);
 if (HEAP32[$4 + 12 >> 2]) {
  jsvUnLock(jsvAddNamedChild(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 24 >> 2], 5959));
  if (HEAP32[$4 + 16 >> 2]) {
   HEAP32[$4 + 8 >> 2] = jsvNewArray(HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
   if (HEAP32[$4 + 8 >> 2]) {
    jsvUnLock2(jsvAddNamedChild(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], 5964), HEAP32[$4 + 8 >> 2]);
   }
  }
  if (HEAP32[$4 + 28 >> 2]) {
   jsvUnLock(jsvAddNamedChild(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 28 >> 2], 5969));
  }
  jsvArrayPushAndUnLock(HEAP32[23781], HEAP32[$4 + 12 >> 2]);
 }
 global$0 = $4 + 32 | 0;
}
function jswrap_object_setPrototypeOf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = $2;
 label$1 : {
  label$2 : {
   if (!(jsvIsFunction(HEAP32[$2 + 12 >> 2]) & 1)) {
    if (!(jsvIsObject(HEAP32[$2 + 12 >> 2]) & 1)) {
     break label$2;
    }
   }
   $1 = jspGetNamedField(HEAP32[$2 + 12 >> 2], 34780, 1);
   break label$1;
  }
  $1 = 0;
 }
 HEAP32[$0 + 4 >> 2] = $1;
 label$4 : {
  if (!(jsvIsName(HEAP32[$2 + 4 >> 2]) & 1)) {
   HEAP32[$2 >> 2] = HEAP32[$2 + 4 >> 2];
   jsExceptionHere(3, 35106, $2);
   break label$4;
  }
  jsvSetValueOfName(HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2]);
 }
 jsvUnLock(HEAP32[$2 + 4 >> 2]);
 $0 = jsvLockAgainSafe(HEAP32[$2 + 12 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function i2c_wr_bit($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 jshPinSetValue(HEAPU8[HEAP32[$2 + 12 >> 2] + 1 | 0], HEAP8[$2 + 11 | 0] & 1);
 dly(HEAP32[$2 + 12 >> 2]);
 jshPinSetValue(HEAPU8[HEAP32[$2 + 12 >> 2]], 1);
 dly(HEAP32[$2 + 12 >> 2]);
 dly(HEAP32[$2 + 12 >> 2]);
 HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2];
 while (1) {
  if (jshPinGetValue(HEAPU8[HEAP32[$2 + 12 >> 2]]) & 1) {
   $0 = 0;
  } else {
   $0 = HEAP32[$2 + 4 >> 2];
  }
  if ($0) {
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + -1;
   continue;
  }
  break;
 }
 if (!(HEAP32[$2 + 4 >> 2] | !HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2])) {
  err(7486);
 }
 jshPinSetValue(HEAPU8[HEAP32[$2 + 12 >> 2]], 0);
 dly(HEAP32[$2 + 12 >> 2]);
 global$0 = $2 + 16 | 0;
}
function jsserialEventCallbackKill($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = jsvObjectGetChild(HEAP32[$2 + 28 >> 2], 7763, 0);
 if (HEAP32[$2 + 20 >> 2]) {
  HEAP8[$2 + 19 | 0] = jsvGetIntegerAndUnLock(HEAP32[$2 + 20 >> 2]);
  jshPinWatch(HEAPU8[$2 + 19 | 0], 0);
  HEAP32[$2 + 12 >> 2] = jsserialGetSerialList(0);
  if (HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 8 >> 2] = jsvGetArrayIndex(HEAP32[$2 + 12 >> 2], HEAPU8[$2 + 19 | 0]);
   if (HEAP32[$2 + 8 >> 2]) {
    jsvRemoveChild(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
   }
   if (!jsvGetChildren(HEAP32[$2 + 12 >> 2])) {
    jsvObjectRemoveChild(HEAP32[23775], 7708);
   }
   jsvUnLock2(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
  }
 }
 global$0 = $2 + 32 | 0;
}
function push_outgoing_bits($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[$2 + 7 | 0] = 0;
 HEAP8[$2 + 6 | 0] = 0;
 label$1 : {
  if (HEAPU8[HEAP32[$2 + 12 >> 2] + 10 | 0] > 8) {
   HEAP8[$2 + 7 | 0] = 8;
   HEAP8[$2 + 6 | 0] = HEAPU16[HEAP32[$2 + 12 >> 2] + 8 >> 1] >> HEAPU8[HEAP32[$2 + 12 >> 2] + 10 | 0] - 8;
   break label$1;
  }
  HEAP8[$2 + 7 | 0] = HEAPU8[HEAP32[$2 + 12 >> 2] + 10 | 0];
  HEAP8[$2 + 6 | 0] = HEAPU16[HEAP32[$2 + 12 >> 2] + 8 >> 1];
 }
 if (HEAPU8[$2 + 7 | 0] > 0) {
  push_bits(HEAP32[$2 + 12 >> 2], HEAPU8[$2 + 7 | 0], HEAPU8[$2 + 6 | 0], HEAP32[$2 + 8 >> 2]);
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP8[$0 + 10 | 0] = HEAPU8[$0 + 10 | 0] - HEAPU8[$2 + 7 | 0];
 }
 global$0 = $2 + 16 | 0;
 return HEAPU8[$2 + 7 | 0];
}
function jswrap_atob_decode($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] & 255;
 label$1 : {
  if (!(HEAP32[$1 + 8 >> 2] < 65 | HEAP32[$1 + 8 >> 2] > 90)) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] - 65;
   break label$1;
  }
  if (!(HEAP32[$1 + 8 >> 2] < 97 | HEAP32[$1 + 8 >> 2] > 122)) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] + -71;
   break label$1;
  }
  if (!(HEAP32[$1 + 8 >> 2] < 48 | HEAP32[$1 + 8 >> 2] > 57)) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] + 4;
   break label$1;
  }
  if (HEAP32[$1 + 8 >> 2] == 43) {
   HEAP32[$1 + 12 >> 2] = 62;
   break label$1;
  }
  if (HEAP32[$1 + 8 >> 2] == 47) {
   HEAP32[$1 + 12 >> 2] = 63;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = -1;
 }
 return HEAP32[$1 + 12 >> 2];
}
function tflite__ComputeOutSize_28TfLitePadding_2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 32 | 0;
 HEAP32[$5 + 24 >> 2] = $0;
 HEAP32[$5 + 20 >> 2] = $1;
 HEAP32[$5 + 16 >> 2] = $2;
 HEAP32[$5 + 12 >> 2] = $3;
 HEAP32[$5 + 8 >> 2] = $4;
 HEAP32[$5 + 4 >> 2] = Math_imul(HEAP32[$5 + 8 >> 2], HEAP32[$5 + 16 >> 2] + -1 | 0) + 1;
 $0 = HEAP32[$5 + 24 >> 2] + -1 | 0;
 label$1 : {
  if ($0 >>> 0 <= 1) {
   if ($0 - 1) {
    HEAP32[$5 + 28 >> 2] = ((HEAP32[$5 + 20 >> 2] + HEAP32[$5 + 12 >> 2] | 0) - 1 | 0) / HEAP32[$5 + 12 >> 2];
    break label$1;
   }
   HEAP32[$5 + 28 >> 2] = ((HEAP32[$5 + 20 >> 2] + HEAP32[$5 + 12 >> 2] | 0) - HEAP32[$5 + 4 >> 2] | 0) / HEAP32[$5 + 12 >> 2];
   break label$1;
  }
  HEAP32[$5 + 28 >> 2] = 0;
 }
 return HEAP32[$5 + 28 >> 2];
}
function jswrap_date_toUTCString($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $1 = global$0 - 96 | 0;
 global$0 = $1;
 $2 = $1 + 40 | 0;
 HEAP32[$1 + 92 >> 2] = $0;
 getTimeFromDateVar($1 - -64 | 0, HEAP32[$1 + 92 >> 2], 1);
 getCalendarDate($2, HEAP32[$1 + 64 >> 2]);
 $0 = HEAP32[13354] + (HEAP32[$1 + 56 >> 2] << 2) | 0;
 $2 = HEAP32[$1 + 44 >> 2];
 $3 = HEAP32[13353];
 $4 = HEAP32[$1 + 48 >> 2] << 2;
 $5 = HEAP32[$1 + 52 >> 2];
 $6 = HEAP32[$1 + 80 >> 2];
 $7 = HEAP32[$1 + 76 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 72 >> 2];
 HEAP32[$1 + 20 >> 2] = $7;
 HEAP32[$1 + 16 >> 2] = $6;
 HEAP32[$1 + 12 >> 2] = $5;
 HEAP32[$1 + 8 >> 2] = $3 + $4;
 HEAP32[$1 + 4 >> 2] = $2;
 HEAP32[$1 >> 2] = $0;
 $0 = jsvVarPrintf(31449, $1);
 global$0 = $1 + 96 | 0;
 return $0 | 0;
}
function jsvArrayBufferIteratorClone($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 $0 = HEAP32[$3 + 8 >> 2];
 $2 = HEAP32[$0 + 4 >> 2];
 $1 = HEAP32[$3 + 12 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$1 + 4 >> 2] = $2;
 $2 = HEAP32[$0 + 36 >> 2];
 HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 32 >> 2];
 HEAP32[$1 + 36 >> 2] = $2;
 $2 = HEAP32[$0 + 28 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 24 >> 2];
 HEAP32[$1 + 28 >> 2] = $2;
 $2 = HEAP32[$0 + 20 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
 HEAP32[$1 + 20 >> 2] = $2;
 $2 = HEAP32[$0 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = $2;
 jsvStringIteratorClone(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
 global$0 = $3 + 16 | 0;
}
function _jswrap_drawImageLayerSetStart($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 24 >> 2] - HEAP32[HEAP32[$3 + 28 >> 2] >> 2];
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[HEAP32[$3 + 28 >> 2] + 4 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 HEAP32[$0 + 128 >> 2] = HEAP32[$0 + 128 >> 2] + (Math_imul(HEAP32[HEAP32[$3 + 28 >> 2] + 120 >> 2], HEAP32[$3 + 16 >> 2]) + Math_imul(HEAP32[HEAP32[$3 + 28 >> 2] + 124 >> 2], HEAP32[$3 + 12 >> 2]) | 0);
 $0 = HEAP32[$3 + 28 >> 2];
 HEAP32[$0 + 132 >> 2] = HEAP32[$0 + 132 >> 2] + (Math_imul(HEAP32[HEAP32[$3 + 28 >> 2] + 120 >> 2], HEAP32[$3 + 12 >> 2]) - Math_imul(HEAP32[HEAP32[$3 + 28 >> 2] + 124 >> 2], HEAP32[$3 + 16 >> 2]) | 0);
}
function jswrap_graphics_clearRect($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = global$0 - 96 | 0;
 global$0 = $5;
 HEAP32[$5 + 88 >> 2] = $0;
 HEAP32[$5 + 84 >> 2] = $1;
 HEAP32[$5 + 80 >> 2] = $2;
 HEAP32[$5 + 76 >> 2] = $3;
 HEAP32[$5 + 72 >> 2] = $4;
 label$1 : {
  if (!(graphicsGetFromVar($5, HEAP32[$5 + 88 >> 2]) & 1)) {
   HEAP32[$5 + 92 >> 2] = 0;
   break label$1;
  }
  graphicsFillRect($5, HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2], HEAP32[$5 + 72 >> 2], HEAPU8[$5 + 21 | 0] | HEAPU8[$5 + 22 | 0] << 8 | (HEAPU8[$5 + 23 | 0] << 16 | HEAPU8[$5 + 24 | 0] << 24));
  graphicsSetVar($5);
  HEAP32[$5 + 92 >> 2] = jsvLockAgain(HEAP32[$5 + 88 >> 2]);
 }
 global$0 = $5 + 96 | 0;
 return HEAP32[$5 + 92 >> 2];
}
function jswrap_graphics_fillRect($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = global$0 - 96 | 0;
 global$0 = $5;
 HEAP32[$5 + 88 >> 2] = $0;
 HEAP32[$5 + 84 >> 2] = $1;
 HEAP32[$5 + 80 >> 2] = $2;
 HEAP32[$5 + 76 >> 2] = $3;
 HEAP32[$5 + 72 >> 2] = $4;
 label$1 : {
  if (!(graphicsGetFromVar($5, HEAP32[$5 + 88 >> 2]) & 1)) {
   HEAP32[$5 + 92 >> 2] = 0;
   break label$1;
  }
  graphicsFillRect($5, HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2], HEAP32[$5 + 72 >> 2], HEAPU8[$5 + 17 | 0] | HEAPU8[$5 + 18 | 0] << 8 | (HEAPU8[$5 + 19 | 0] << 16 | HEAPU8[$5 + 20 | 0] << 24));
  graphicsSetVar($5);
  HEAP32[$5 + 92 >> 2] = jsvLockAgain(HEAP32[$5 + 88 >> 2]);
 }
 global$0 = $5 + 96 | 0;
 return HEAP32[$5 + 92 >> 2];
}
function jswrap_string_fromCharCode($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = jsvNewFromEmptyString();
 label$1 : {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($1 + 16 | 0) & 1) {
    $0 = $1 + 15 | 0;
    $2 = $1 + 16 | 0;
    HEAP8[$1 + 15 | 0] = jsvGetIntegerAndUnLock(jsvObjectIteratorGetValue($2));
    jsvAppendStringBuf(HEAP32[$1 + 20 >> 2], $0, 1);
    jsvObjectIteratorNext($2);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($1 + 16 | 0);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function jswrap_banglejs_lcdWr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $3 = global$0 - 16 | 0;
 $2 = $3;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 >> 2] = jsvGetDataPointer(HEAP32[$2 + 8 >> 2], $2 + 4 | 0);
 if (!HEAP32[$2 >> 2]) {
  HEAP32[$2 + 4 >> 2] = jsvIterateCallbackCount(HEAP32[$2 + 8 >> 2]);
  label$2 : {
   if (HEAP32[$2 + 4 >> 2] + 256 >>> 0 > 1e6) {
    jsExceptionHere(1, 28386, 0);
    break label$2;
   }
   $0 = $3 - (HEAP32[$2 + 4 >> 2] + 15 & -16) | 0;
   global$0 = $0;
   HEAP32[$2 >> 2] = $0;
   jsvIterateCallbackToBytes(HEAP32[$2 + 8 >> 2], HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]);
  }
 }
 lcdST7789_cmd(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 >> 2]);
 global$0 = $2 + 16 | 0;
}
function jspGetException() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 8 >> 2] = jsvFindChildFromString(HEAP32[23775], 3753, 0);
 label$1 : {
  if (HEAP32[$0 + 8 >> 2]) {
   HEAP32[$0 + 4 >> 2] = jsvSkipName(HEAP32[$0 + 8 >> 2]);
   jsvRemoveChild(HEAP32[23775], HEAP32[$0 + 8 >> 2]);
   jsvUnLock(HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 >> 2] = jspGetStackTrace();
   label$3 : {
    if (!HEAP32[$0 >> 2]) {
     break label$3;
    }
    if (!(jsvHasChildren(HEAP32[$0 + 4 >> 2]) & 1)) {
     break label$3;
    }
    jsvObjectSetChild(HEAP32[$0 + 4 >> 2], 3772, HEAP32[$0 >> 2]);
   }
   jsvUnLock(HEAP32[$0 >> 2]);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function jspGetBuiltinPrototype($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 4 >> 2] = jspFindPrototypeFor(4772);
   if (HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
    break label$1;
   }
  }
  label$4 : {
   if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
    if (!(jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1)) {
     break label$4;
    }
   }
   HEAP32[$1 >> 2] = jspFindPrototypeFor(3694);
   if (HEAP32[$1 >> 2] == HEAP32[$1 + 8 >> 2]) {
    jsvUnLock(HEAP32[$1 >> 2]);
    HEAP32[$1 >> 2] = 0;
   }
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jstBufferTaskChecker($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1 : {
  if (!(HEAPU8[HEAP32[$2 + 8 >> 2] + 28 | 0] == 3 | HEAPU8[HEAP32[$2 + 8 >> 2] + 28 | 0] == 4 | (HEAPU8[HEAP32[$2 + 8 >> 2] + 28 | 0] == 5 | HEAPU8[HEAP32[$2 + 8 >> 2] + 28 | 0] == 6))) {
   HEAP8[$2 + 15 | 0] = 0;
   break label$1;
  }
  HEAP16[$2 + 2 >> 1] = HEAPU16[HEAP32[$2 + 4 >> 2] >> 1];
  $0 = $2;
  $1 = HEAP32[$2 + 8 >> 2];
  if (HEAPU16[$2 + 2 >> 1] != (HEAPU8[$1 + 16 | 0] | HEAPU8[$1 + 17 | 0] << 8)) {
   $1 = HEAP32[$2 + 8 >> 2];
   $1 = HEAPU16[$2 + 2 >> 1] == (HEAPU8[$1 + 18 | 0] | HEAPU8[$1 + 19 | 0] << 8);
  } else {
   $1 = 1;
  }
  HEAP8[$0 + 15 | 0] = $1;
 }
 return HEAP8[$2 + 15 | 0] & 1;
}
function jswrap_banglejs_getLCDMode() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 8 >> 2] = 0;
 $1 = HEAP32[24392];
 label$1 : {
  if ($1 >>> 0 > 4) {
   break label$1;
  }
  label$2 : {
   switch ($1 - 1 | 0) {
   default:
    HEAP32[$0 + 8 >> 2] = 28030;
    break label$1;
   case 0:
    HEAP32[$0 + 8 >> 2] = 28023;
    break label$1;
   case 1:
    HEAP32[$0 + 8 >> 2] = 28035;
    break label$1;
   case 2:
    HEAP32[$0 + 8 >> 2] = 28050;
    break label$1;
   case 3:
    break label$2;
   }
  }
  HEAP32[$0 + 8 >> 2] = 28058;
 }
 label$7 : {
  if (!HEAP32[$0 + 8 >> 2]) {
   HEAP32[$0 + 12 >> 2] = 0;
   break label$7;
  }
  HEAP32[$0 + 12 >> 2] = jsvNewFromString(HEAP32[$0 + 8 >> 2]);
 }
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function jsvIsInstanceOf($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = 37405;
 HEAP8[$1 + 19 | 0] = 0;
 label$1 : {
  if (!(jsvHasChildren(HEAP32[$1 + 24 >> 2]) & 1)) {
   HEAP8[$1 + 31 | 0] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvObjectGetChild(HEAP32[$1 + 24 >> 2], 3316, 0);
  if (jsvIsObject(HEAP32[$1 + 12 >> 2]) & 1) {
   HEAP32[$1 + 8 >> 2] = jsvObjectGetChild(HEAP32[$1 + 12 >> 2], 3326, 0);
   if (HEAP32[$1 + 8 >> 2]) {
    HEAP8[$1 + 19 | 0] = jspIsConstructor(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 20 >> 2]) & 1;
   }
   jsvUnLock(HEAP32[$1 + 8 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 12 >> 2]);
  HEAP8[$1 + 31 | 0] = HEAP8[$1 + 19 | 0] & 1;
 }
 global$0 = $1 + 32 | 0;
 return HEAP8[$1 + 31 | 0] & 1;
}
function jsvArrayBufferIteratorNext($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 32 >> 2] + 1;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 28 >> 2] + (HEAPU16[HEAP32[$1 + 12 >> 2] + 20 >> 1] & 15);
 label$1 : {
  if (!(HEAP8[HEAP32[$1 + 12 >> 2] + 36 | 0] & 1)) {
   HEAP32[$1 + 8 >> 2] = HEAPU16[HEAP32[$1 + 12 >> 2] + 20 >> 1] & 15;
   while (1) {
    label$4 : {
     $0 = HEAP32[$1 + 8 >> 2];
     HEAP32[$1 + 8 >> 2] = $0 + -1;
     if (!$0) {
      break label$4;
     }
     jsvStringIteratorNext(HEAP32[$1 + 12 >> 2]);
     continue;
    }
    break;
   }
   break label$1;
  }
  HEAP8[HEAP32[$1 + 12 >> 2] + 36 | 0] = 0;
 }
 global$0 = $1 + 16 | 0;
}
function jswrap_array_join($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1 : {
  if (!(jsvIsIterable(HEAP32[$2 + 8 >> 2]) & 1)) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  label$3 : {
   if (jsvIsUndefined(HEAP32[$2 + 4 >> 2]) & 1) {
    HEAP32[$2 + 4 >> 2] = jsvNewFromString(30496);
    break label$3;
   }
   HEAP32[$2 + 4 >> 2] = jsvAsString(HEAP32[$2 + 4 >> 2]);
  }
  if (!HEAP32[$2 + 4 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 >> 2] = jsvArrayJoin(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
  jsvUnLock(HEAP32[$2 + 4 >> 2]);
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function st_backref_index_lsb($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP8[$1 + 7 | 0] = 8;
 $0 = $1;
 $3 = HEAP32[$1 + 8 >> 2];
 if (HEAPU8[$1 + 7 | 0] < 8) {
  $2 = HEAPU8[$1 + 7 | 0];
 } else {
  $2 = 8;
 }
 HEAP16[$0 + 4 >> 1] = get_bits($3, $2);
 label$3 : {
  if (HEAPU16[$1 + 4 >> 1] == 65535) {
   HEAP32[$1 + 12 >> 2] = 3;
   break label$3;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP16[$0 + 6 >> 1] = HEAPU16[$1 + 4 >> 1] | HEAPU16[$0 + 6 >> 1];
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP16[$0 + 6 >> 1] = HEAPU16[$0 + 6 >> 1] + 1;
  HEAP8[$1 + 3 | 0] = 6;
  HEAP16[HEAP32[$1 + 8 >> 2] + 4 >> 1] = 0;
  HEAP32[$1 + 12 >> 2] = HEAPU8[$1 + 3 | 0] > 8 ? 4 : 5;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function scalbnf($0, $1) {
 var $2 = 0;
 label$1 : {
  if (($1 | 0) >= 128) {
   $0 = Math_fround($0 * Math_fround(1.7014118346046923e+38));
   $2 = $1 + -127 | 0;
   if (($2 | 0) < 128) {
    $1 = $2;
    break label$1;
   }
   $0 = Math_fround($0 * Math_fround(1.7014118346046923e+38));
   $1 = (($1 | 0) < 381 ? $1 : 381) + -254 | 0;
   break label$1;
  }
  if (($1 | 0) > -127) {
   break label$1;
  }
  $0 = Math_fround($0 * Math_fround(1.1754943508222875e-38));
  $2 = $1 + 126 | 0;
  if (($2 | 0) > -127) {
   $1 = $2;
   break label$1;
  }
  $0 = Math_fround($0 * Math_fround(1.1754943508222875e-38));
  $1 = (($1 | 0) > -378 ? $1 : -378) + 252 | 0;
 }
 return Math_fround($0 * (wasm2js_scratch_store_i32(0, ($1 << 23) + 1065353216 | 0), wasm2js_scratch_load_f32()));
}
function jsvGetMemoryUsage() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 1;
 while (1) {
  if (HEAPU32[$0 + 8 >> 2] <= HEAPU32[13337]) {
   HEAP32[$0 + 4 >> 2] = jsvGetAddressOf(HEAP32[$0 + 8 >> 2] & 65535);
   if (HEAPU16[HEAP32[$0 + 4 >> 2] + 14 >> 1] & 63) {
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
    if (jsvIsFlatString(HEAP32[$0 + 4 >> 2]) & 1) {
     HEAP32[$0 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 4 >> 2]);
     HEAP32[$0 + 8 >> 2] = HEAP32[$0 >> 2] + HEAP32[$0 + 8 >> 2];
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 >> 2] + HEAP32[$0 + 12 >> 2];
    }
   }
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function jsiDumpJSON($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = jsvGetIndexOf(HEAP32[23774], HEAP32[$4 + 20 >> 2], 1);
 label$1 : {
  label$2 : {
   if (!HEAP32[$4 + 12 >> 2]) {
    break label$2;
   }
   if (!(jsvIsString(HEAP32[$4 + 12 >> 2]) & 1) | HEAP32[$4 + 12 >> 2] == HEAP32[$4 + 16 >> 2]) {
    break label$2;
   }
   $0 = HEAP32[$4 + 28 >> 2];
   $1 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$4 + 12 >> 2];
   cbprintf($0, $1, 5305, $4);
   break label$1;
  }
  jsfGetJSONWithCallback(HEAP32[$4 + 20 >> 2], 0, 37, 0, HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2]);
 }
 global$0 = $4 + 32 | 0;
}
function jsvArrayBufferIteratorGetIntegerValue($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!HEAPU16[HEAP32[$1 + 8 >> 2] + 20 >> 1]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  jsvArrayBufferIteratorGetValueData(HEAP32[$1 + 8 >> 2], $1);
  if (HEAPU16[HEAP32[$1 + 8 >> 2] + 20 >> 1] & 32) {
   $0 = $1;
   $2 = jsvArrayBufferIteratorDataToFloat(HEAP32[$1 + 8 >> 2], $1);
   label$4 : {
    if (Math_abs($2) < 2147483648) {
     $3 = ~~$2;
     break label$4;
    }
    $3 = -2147483648;
   }
   HEAP32[$0 + 12 >> 2] = $3;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvArrayBufferIteratorDataToInt(HEAP32[$1 + 8 >> 2], $1);
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsspiSend4bit($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP8[$4 + 15 | 0] = $0;
 HEAP8[$4 + 14 | 0] = $1;
 HEAP32[$4 + 8 >> 2] = $2;
 HEAP32[$4 + 4 >> 2] = $3;
 HEAP8[$4 | 0] = HEAP32[$4 + 8 >> 2] | HEAP32[$4 + 8 >> 2] << 4;
 HEAP8[$4 + 1 | 0] = HEAP32[$4 + 4 >> 2] | HEAP32[$4 + 8 >> 2] << 4;
 HEAP8[$4 + 2 | 0] = HEAP32[$4 + 8 >> 2] | HEAP32[$4 + 4 >> 2] << 4;
 HEAP8[$4 + 3 | 0] = HEAP32[$4 + 4 >> 2] | HEAP32[$4 + 4 >> 2] << 4;
 jshUSARTSetup(HEAPU8[$4 + 15 | 0], HEAPU8[(HEAPU8[$4 + 14 | 0] >> 4 & 3) + $4 | 0] | HEAPU8[(HEAPU8[$4 + 14 | 0] >> 6) + $4 | 0] << 8);
 jshUSARTSetup(HEAPU8[$4 + 15 | 0], HEAPU8[(HEAPU8[$4 + 14 | 0] & 3) + $4 | 0] | HEAPU8[(HEAPU8[$4 + 14 | 0] >> 2 & 3) + $4 | 0] << 8);
 global$0 = $4 + 16 | 0;
}
function tflite__PreprocessSoftmaxScaling_28double_2c_20double_2c_20int_2c_20int__2c_20int__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 + -64 | 0;
 global$0 = $4;
 HEAPF64[$4 + 56 >> 3] = $0;
 HEAPF64[$4 + 48 >> 3] = $1;
 HEAP32[$4 + 44 >> 2] = 5;
 HEAP32[$4 + 40 >> 2] = $2;
 HEAP32[$4 + 36 >> 2] = $3;
 HEAPF64[$4 + 16 >> 3] = HEAPF64[$4 + 56 >> 3] * HEAPF64[$4 + 48 >> 3] * +(1 << 31 - HEAP32[$4 + 44 >> 2]);
 HEAPF64[$4 + 8 >> 3] = 2147483647;
 HEAPF64[$4 + 24 >> 3] = HEAPF64[double_20const__20std____2__min_double__28double_20const__2c_20double_20const__29($4 + 16 | 0, $4 + 8 | 0) >> 3];
 tflite__QuantizeMultiplierGreaterThanOne_28double_2c_20int__2c_20int__29(HEAPF64[$4 + 24 >> 3], HEAP32[$4 + 40 >> 2], HEAP32[$4 + 36 >> 2]);
 global$0 = $4 - -64 | 0;
}
function jswrap_banglejs_gps_character($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 14 | 0] = $0;
 label$1 : {
  if (HEAP8[$1 + 14 | 0] == 13) {
   break label$1;
  }
  if (HEAPU8[251248] >= 82) {
   HEAP8[251248] = 0;
  }
  $0 = HEAPU8[$1 + 14 | 0];
  $2 = HEAPU8[251248];
  HEAP8[251248] = $2 + 1;
  HEAP8[$2 + 251952 | 0] = $0;
  if (HEAP8[$1 + 14 | 0] != 10) {
   break label$1;
  }
  if (HEAPU8[251248] > 1) {
   memcpy(251424, 251952, HEAPU8[251248]);
   HEAP8[(HEAPU8[251248] - 1 | 0) + 251424 | 0] = 0;
   HEAP32[62816] = HEAP32[62816] | 32;
   if (nmea_decode() & 1) {
    HEAP32[62816] = HEAP32[62816] | 16;
   }
  }
  HEAP8[251248] = 0;
 }
 HEAP8[$1 + 15 | 0] = 1;
 global$0 = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}
function jslNeedSpaceBetween($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 label$1 : {
  if (HEAPU8[$2 + 15 | 0] < 163) {
   $0 = 0;
   if (HEAPU8[$2 + 14 | 0] < 163) {
    break label$1;
   }
  }
  label$3 : {
   if (HEAPU8[$2 + 15 | 0] >= 163) {
    break label$3;
   }
   if (isAlpha(HEAP8[$2 + 15 | 0]) & 1) {
    break label$3;
   }
   $1 = !(isNumeric(HEAP8[$2 + 15 | 0]) & 1);
   $0 = 0;
   if ($1) {
    break label$1;
   }
  }
  $0 = 1;
  label$4 : {
   if (HEAPU8[$2 + 14 | 0] >= 163) {
    break label$4;
   }
   $1 = isAlpha(HEAP8[$2 + 14 | 0]) & 1;
   $0 = 1;
   if ($1) {
    break label$4;
   }
   $0 = isNumeric(HEAP8[$2 + 14 | 0]);
  }
 }
 global$0 = $2 + 16 | 0;
 return $0 & 1;
}
function jswrap_modules_removeCached($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1 : {
  if (!(jsvIsString(HEAP32[$1 + 12 >> 2]) & 1)) {
   jsExceptionHere(1, 34553, 0);
   break label$1;
  }
  HEAP32[$1 + 8 >> 2] = jswrap_modules_getModuleList();
  if (!HEAP32[$1 + 8 >> 2]) {
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = jsvFindChildFromVar(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2], 0);
  label$3 : {
   if (!HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 >> 2] = HEAP32[$1 + 12 >> 2];
    jsExceptionHere(1, 34599, $1);
    break label$3;
   }
   jsvRemoveChild(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]);
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
 }
 global$0 = $1 + 16 | 0;
}
function jslGetTokenString($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = 30;
 label$1 : {
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 128) {
   $0 = HEAP32[$1 + 28 >> 2];
   $2 = HEAP32[$1 + 24 >> 2];
   HEAP32[$1 >> 2] = jslGetTokenValueAsString();
   espruino_snprintf($0, $2, 1826, $1);
   break label$1;
  }
  label$3 : {
   if (HEAP16[HEAP32[13768] + 2 >> 1] == 131) {
    $0 = HEAP32[$1 + 28 >> 2];
    $2 = HEAP32[$1 + 24 >> 2];
    HEAP32[$1 + 16 >> 2] = jslGetTokenValueAsString();
    espruino_snprintf($0, $2, 1832, $1 + 16 | 0);
    break label$3;
   }
   jslTokenAsString(HEAP16[HEAP32[13768] + 2 >> 1], HEAP32[$1 + 28 >> 2], HEAP32[$1 + 24 >> 2]);
  }
 }
 global$0 = $1 + 32 | 0;
}
function lcdFillRect_ArrayBuffer_flat($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = global$0 - 32 | 0;
 global$0 = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 20 >> 2];
 while (1) {
  if (HEAP32[$6 + 4 >> 2] <= HEAP32[$6 + 12 >> 2]) {
   lcdSetPixels_ArrayBuffer_flat(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 4 >> 2], (HEAP32[$6 + 16 >> 2] + 1 | 0) - HEAP32[$6 + 24 >> 2] | 0, HEAP32[$6 + 8 >> 2]);
   HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $6 + 32 | 0;
}
function jswrap_string_charAt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 HEAP32[$2 + 36 >> 2] = jsvNewFromEmptyString();
 label$1 : {
  if (!HEAP32[$2 + 36 >> 2]) {
   break label$1;
  }
  if (!(jsvIsString(HEAP32[$2 + 44 >> 2]) & 1) | HEAP32[$2 + 40 >> 2] < 0) {
   break label$1;
  }
  $0 = $2 + 16 | 0;
  jsvStringIteratorNew($0, HEAP32[$2 + 44 >> 2], HEAP32[$2 + 40 >> 2]);
  if (jsvStringIteratorHasChar($0) & 1) {
   $0 = $2 + 15 | 0;
   HEAP8[$2 + 15 | 0] = jsvStringIteratorGetChar($2 + 16 | 0);
   jsvAppendStringBuf(HEAP32[$2 + 36 >> 2], $0, 1);
  }
  jsvStringIteratorFree($2 + 16 | 0);
 }
 global$0 = $2 + 48 | 0;
 return HEAP32[$2 + 36 >> 2];
}
function jswrap_storage_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 80 | 0;
 global$0 = $3;
 HEAP32[$3 + 76 >> 2] = $0;
 HEAP32[$3 + 72 >> 2] = $1;
 HEAP32[$3 + 68 >> 2] = $2;
 jsfNameFromVar($3 + 40 | 0, HEAP32[$3 + 76 >> 2]);
 $0 = HEAP32[$3 + 72 >> 2];
 $1 = HEAP32[$3 + 68 >> 2];
 HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 64 >> 2];
 $2 = HEAP32[$3 + 60 >> 2];
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 56 >> 2];
 HEAP32[$3 + 28 >> 2] = $2;
 $2 = HEAP32[$3 + 52 >> 2];
 HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 48 >> 2];
 HEAP32[$3 + 20 >> 2] = $2;
 $2 = HEAP32[$3 + 44 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 40 >> 2];
 HEAP32[$3 + 12 >> 2] = $2;
 $0 = jsfReadFile($3 + 8 | 0, $0, $1);
 global$0 = $3 + 80 | 0;
 return $0 | 0;
}
function tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $0 = $3;
 if (HEAP32[$3 + 20 >> 2] > 0) {
  $1 = HEAP32[$3 + 20 >> 2];
 } else {
  $1 = 0;
 }
 HEAP32[$0 + 16 >> 2] = $1;
 $0 = $3;
 if (HEAP32[$3 + 20 >> 2] > 0) {
  $1 = 0;
 } else {
  $1 = 0 - HEAP32[$3 + 20 >> 2] | 0;
 }
 HEAP32[$0 + 12 >> 2] = $1;
 $0 = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(int_20gemmlowp__SaturatingRoundingDoublingHighMul_int__28int_2c_20int_29(Math_imul(HEAP32[$3 + 28 >> 2], 1 << HEAP32[$3 + 16 >> 2]), HEAP32[$3 + 24 >> 2]), HEAP32[$3 + 12 >> 2]);
 global$0 = $3 + 32 | 0;
 return $0;
}
function OneWireRead($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jshPinSetState(HEAPU8[$2 + 15 | 0], 3);
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 >> 2] = 1;
 while (1) {
  label$2 : {
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP32[$2 + 8 >> 2] = $0 + -1;
   if (($0 | 0) <= 0) {
    break label$2;
   }
   jshPinSetValue(HEAPU8[$2 + 15 | 0], 0);
   do_indexing(3);
   jshPinSetValue(HEAPU8[$2 + 15 | 0], 1);
   do_indexing(10);
   if (jshPinGetValue(HEAPU8[$2 + 15 | 0]) & 1) {
    HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | HEAP32[$2 >> 2];
   }
   do_indexing(53);
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] << 1;
   continue;
  }
  break;
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 4 >> 2];
}
function lcdFillRect_ArrayBuffer($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = global$0 - 32 | 0;
 global$0 = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 20 >> 2];
 while (1) {
  if (HEAP32[$6 + 4 >> 2] <= HEAP32[$6 + 12 >> 2]) {
   lcdSetPixels_ArrayBuffer(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 4 >> 2], (HEAP32[$6 + 16 >> 2] + 1 | 0) - HEAP32[$6 + 24 >> 2] | 0, HEAP32[$6 + 8 >> 2]);
   HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $6 + 32 | 0;
}
function jswrap_date_toISOString($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $1 = global$0 - 96 | 0;
 global$0 = $1;
 $2 = $1 + 40 | 0;
 HEAP32[$1 + 92 >> 2] = $0;
 getTimeFromDateVar($1 - -64 | 0, HEAP32[$1 + 92 >> 2], 1);
 getCalendarDate($2, HEAP32[$1 + 64 >> 2]);
 $0 = HEAP32[$1 + 52 >> 2];
 $2 = HEAP32[$1 + 48 >> 2] + 1 | 0;
 $3 = HEAP32[$1 + 44 >> 2];
 $4 = HEAP32[$1 + 80 >> 2];
 $5 = HEAP32[$1 + 76 >> 2];
 $6 = HEAP32[$1 + 72 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 68 >> 2];
 HEAP32[$1 + 20 >> 2] = $6;
 HEAP32[$1 + 16 >> 2] = $5;
 HEAP32[$1 + 12 >> 2] = $4;
 HEAP32[$1 + 8 >> 2] = $3;
 HEAP32[$1 + 4 >> 2] = $2;
 HEAP32[$1 >> 2] = $0;
 $0 = jsvVarPrintf(31481, $1);
 global$0 = $1 + 96 | 0;
 return $0 | 0;
}
function jsvObjectAppendAll($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 jsvObjectIteratorNew($2 + 16 | 0, HEAP32[$2 + 24 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue($2 + 16 | 0) & 1) {
   HEAP32[$2 + 12 >> 2] = jsvObjectIteratorGetKey($2 + 16 | 0);
   HEAP32[$2 + 8 >> 2] = jsvSkipName(HEAP32[$2 + 12 >> 2]);
   if (!(jsvIsInternalObjectKey(HEAP32[$2 + 12 >> 2]) & 1)) {
    jsvObjectSetChildVar(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
   }
   $0 = $2 + 16 | 0;
   jsvUnLock2(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
   jsvObjectIteratorNext($0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree($2 + 16 | 0);
 global$0 = $2 + 32 | 0;
}
function jsfEraseFrom($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!(jshFlashGetPage(HEAP32[$1 + 8 >> 2], $1 + 4 | 0, $1) & 1)) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  while (1) {
   if (HEAPU32[$1 + 4 >> 2] < 134479872) {
    $0 = jspIsInterrupted() ^ -1;
   } else {
    $0 = 0;
   }
   if ($0 & 1) {
    if (!(jsfIsErased(HEAP32[$1 + 4 >> 2], HEAP32[$1 >> 2]) & 1)) {
     do_indexing(HEAP32[$1 + 4 >> 2]);
    }
    if (!(jshFlashGetPage(HEAP32[$1 + 4 >> 2] + HEAP32[$1 >> 2] | 0, $1 + 4 | 0, $1) & 1)) {
     HEAP8[$1 + 15 | 0] = 1;
     break label$1;
    }
    continue;
   }
   break;
  }
  HEAP8[$1 + 15 | 0] = (jspIsInterrupted() ^ -1) & 1;
 }
 global$0 = $1 + 16 | 0;
}
function jsvGetStringIndexOf($0) {
 var $1 = 0;
 $1 = global$0 - 48 | 0;
 global$0 = $1;
 HEAP32[$1 + 40 >> 2] = $0;
 HEAP8[$1 + 39 | 0] = 10;
 jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 40 >> 2], 0);
 label$1 : {
  while (1) {
   if (jsvStringIteratorHasChar($1 + 16 | 0) & 1) {
    if ((jsvStringIteratorGetChar($1 + 16 | 0) & 255) == HEAPU8[$1 + 39 | 0]) {
     $0 = $1 + 16 | 0;
     HEAP32[$1 + 12 >> 2] = jsvStringIteratorGetIndex($0);
     jsvStringIteratorFree($0);
     HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 12 >> 2];
     break label$1;
    }
    jsvStringIteratorNext($1 + 16 | 0);
    continue;
   }
   break;
  }
  jsvStringIteratorFree($1 + 16 | 0);
  HEAP32[$1 + 44 >> 2] = -1;
 }
 global$0 = $1 + 48 | 0;
 return HEAP32[$1 + 44 >> 2];
}
function jshGetDeviceObjectFor($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP16[$3 + 42 >> 1] = $0;
 HEAP16[$3 + 40 >> 1] = $1;
 HEAP8[$3 + 39 | 0] = $2;
 HEAP16[$3 + 36 >> 1] = jshGetDeviceFor(HEAPU16[$3 + 42 >> 1], HEAPU16[$3 + 40 >> 1], HEAPU8[$3 + 39 | 0]);
 label$1 : {
  if (!HEAPU16[$3 + 36 >> 1]) {
   HEAP32[$3 + 44 >> 2] = 0;
   break label$1;
  }
  $0 = $3 + 16 | 0;
  jshPinFunctionToString(HEAPU16[$3 + 36 >> 1], 19, $0);
  HEAP32[$3 + 12 >> 2] = jsvObjectGetChild(HEAP32[23774], $0, 0);
  if (HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 12 >> 2];
   break label$1;
  }
  HEAP32[$3 + 44 >> 2] = jswFindBuiltInFunction(0, $3 + 16 | 0);
 }
 global$0 = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}
function tflite__ComputePaddingWithOffset_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 32 | 0;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 HEAP32[$6 + 4 >> 2] = Math_imul(HEAP32[$6 + 24 >> 2], HEAP32[$6 + 16 >> 2] - 1 | 0) + 1;
 HEAP32[$6 >> 2] = (HEAP32[$6 + 4 >> 2] + Math_imul(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 12 >> 2] - 1 | 0) | 0) - HEAP32[$6 + 20 >> 2];
 $0 = $6;
 if (HEAP32[$6 >> 2] > 0) {
  $1 = HEAP32[$6 >> 2];
 } else {
  $1 = 0;
 }
 HEAP32[$0 >> 2] = $1;
 HEAP32[HEAP32[$6 + 8 >> 2] >> 2] = HEAP32[$6 >> 2] % 2;
 return HEAP32[$6 >> 2] / 2 | 0;
}
function jswrap_pipe_idle() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 HEAP8[$0 + 31 | 0] = 0;
 HEAP32[$0 + 24 >> 2] = pipeGetArray(0);
 if (HEAP32[$0 + 24 >> 2]) {
  jsvObjectIteratorNew($0 + 16 | 0, HEAP32[$0 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($0 + 16 | 0) & 1) {
    $1 = $0 + 16 | 0;
    HEAP32[$0 + 12 >> 2] = jsvObjectIteratorGetValue($1);
    HEAP8[$0 + 31 | 0] = (handlePipe(HEAP32[$0 + 24 >> 2], $1, HEAP32[$0 + 12 >> 2]) & 1 | HEAP8[$0 + 31 | 0] & 1) != 0;
    jsvUnLock(HEAP32[$0 + 12 >> 2]);
    jsvObjectIteratorNext($1);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($0 + 16 | 0);
  jsvUnLock(HEAP32[$0 + 24 >> 2]);
 }
 global$0 = $0 + 32 | 0;
 return HEAP8[$0 + 31 | 0] & 1;
}
function jspEvaluate($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP8[$1 + 23 | 0] = 1;
 label$1 : {
  if (HEAP8[$1 + 23 | 0] & 1) {
   HEAP32[$1 + 16 >> 2] = jsvNewNativeString(HEAP32[$1 + 24 >> 2], strlen(HEAP32[$1 + 24 >> 2]));
   break label$1;
  }
  HEAP32[$1 + 16 >> 2] = jsvNewFromString(HEAP32[$1 + 24 >> 2]);
 }
 label$3 : {
  if (!HEAP32[$1 + 16 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$3;
  }
  HEAP32[$1 + 12 >> 2] = 0;
  if (!((HEAPU16[27542] != 0 ^ -1) & 1)) {
   HEAP32[$1 + 12 >> 2] = jspEvaluateVar(HEAP32[$1 + 16 >> 2], 0, 0);
  }
  jsvUnLock(HEAP32[$1 + 16 >> 2]);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 12 >> 2];
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function long_20long_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__op_long_20long__28long_20long_2c_20long_20long_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $5 = global$0 - 16 | 0;
 $4 = $5;
 HEAP32[$4 + 8 >> 2] = $0;
 HEAP32[$4 + 12 >> 2] = $1;
 HEAP32[$4 >> 2] = $2;
 HEAP32[$4 + 4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 label$1 : {
  if (($0 | 0) < ($1 | 0) ? 1 : ($0 | 0) <= ($1 | 0) ? HEAPU32[$4 + 8 >> 2] >= HEAPU32[$4 >> 2] ? 0 : 1 : 0) {
   $1 = HEAP32[$5 + 12 >> 2];
   $0 = HEAP32[$5 + 8 >> 2];
   break label$1;
  }
  $1 = HEAP32[$5 + 4 >> 2];
  $0 = HEAP32[$5 >> 2];
 }
 i64toi32_i32$HIGH_BITS = $1;
 return $0 | 0;
}
function long_20long_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__op_long_20long__28long_20long_2c_20long_20long_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $5 = global$0 - 16 | 0;
 $4 = $5;
 HEAP32[$4 + 8 >> 2] = $0;
 HEAP32[$4 + 12 >> 2] = $1;
 HEAP32[$4 >> 2] = $2;
 HEAP32[$4 + 4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 label$1 : {
  if (($0 | 0) > ($1 | 0) ? 1 : ($0 | 0) >= ($1 | 0) ? HEAPU32[$4 + 8 >> 2] <= HEAPU32[$4 >> 2] ? 0 : 1 : 0) {
   $1 = HEAP32[$5 + 12 >> 2];
   $0 = HEAP32[$5 + 8 >> 2];
   break label$1;
  }
  $1 = HEAP32[$5 + 4 >> 2];
  $0 = HEAP32[$5 >> 2];
 }
 i64toi32_i32$HIGH_BITS = $1;
 return $0 | 0;
}
function _jswrap_serial_print($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP8[$4 + 23 | 0] = $2;
 HEAP8[$4 + 22 | 0] = $3;
 label$1 : {
  if (!(jsserialGetSendFunction(HEAP32[$4 + 28 >> 2], $4 + 16 | 0, $4) & 1)) {
   break label$1;
  }
  if (HEAP8[$4 + 23 | 0] & 1) {
   HEAP32[$4 + 24 >> 2] = jsvAsString(HEAP32[$4 + 24 >> 2]);
  }
  jsvIterateCallback(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 16 >> 2], $4);
  if (HEAP8[$4 + 23 | 0] & 1) {
   jsvUnLock(HEAP32[$4 + 24 >> 2]);
  }
  if (!(HEAP8[$4 + 22 | 0] & 1)) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[$4 + 16 >> 2]](13, $4);
  FUNCTION_TABLE[HEAP32[$4 + 16 >> 2]](10, $4);
 }
 global$0 = $4 + 32 | 0;
}
function jswrap_banglejs_getAccel() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = jsvNewWithFlags(5);
 if (HEAP32[$0 + 12 >> 2]) {
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 28425, jsvNewFromFloat(+HEAP16[125654] / 8192));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 28427, jsvNewFromFloat(+HEAP16[125655] / 8192));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 28429, jsvNewFromFloat(+HEAP16[125656] / 8192));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 28448, jsvNewFromFloat(Math_sqrt(+HEAP32[62829]) / 8192));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 28452, jsvNewFromFloat(Math_sqrt(+HEAP32[62830]) / 8192));
 }
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function jsvCreateNewChild($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = jsvAsName(HEAP32[$3 + 20 >> 2]);
 label$1 : {
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$3 + 16 >> 2]) {
   jsvSetValueOfName(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2]);
  }
  HEAP16[$3 + 10 >> 1] = jsvGetRef(jsvRef(jsvRef(HEAP32[$3 + 24 >> 2])));
  jsvSetNextSibling(HEAP32[$3 + 12 >> 2], HEAPU16[$3 + 10 >> 1]);
  jsvSetPrevSibling(HEAP32[$3 + 12 >> 2], HEAPU16[$3 + 10 >> 1]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function jsfGetFlags() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 8 >> 2] = jsvNewWithFlags(5);
 label$1 : {
  if (!HEAP32[$0 + 8 >> 2]) {
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 4 >> 2] = HEAP32[13336];
  HEAP8[$0 + 3 | 0] = 1;
  while (1) {
   if (HEAPU8[HEAP32[$0 + 4 >> 2]]) {
    jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2], jsvNewFromInteger(jsfGetFlag(HEAPU8[$0 + 3 | 0]) & 1 ? 1 : 0));
    HEAP32[$0 + 4 >> 2] = (strlen(HEAP32[$0 + 4 >> 2]) + 1 | 0) + HEAP32[$0 + 4 >> 2];
    HEAP8[$0 + 3 | 0] = HEAPU8[$0 + 3 | 0] << 1;
    continue;
   }
   break;
  }
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
 }
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function jsiHistoryAddLine($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1 : {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
  HEAP32[$1 + 8 >> 2] = jsvGetStringLength(HEAP32[$1 + 12 >> 2]);
  if (!HEAP32[$1 + 8 >> 2] | HEAPU32[$1 + 8 >> 2] > 500) {
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = jsiGetHistory();
  if (!HEAP32[$1 + 4 >> 2]) {
   break label$1;
  }
  HEAP32[$1 >> 2] = jsvGetIndexOf(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 12 >> 2], 0);
  if (HEAP32[$1 >> 2]) {
   jsvRemoveChild(HEAP32[$1 + 4 >> 2], HEAP32[$1 >> 2]);
   jsvUnLock(HEAP32[$1 >> 2]);
  }
  jsvArrayPush(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 12 >> 2]);
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
 }
 global$0 = $1 + 16 | 0;
}
function tflite__GreedyMemoryPlanner__DoesEntryOverlapInTime_28tflite__GreedyMemoryPlanner__ListEntry_20const__2c_20int_2c_20int_29_20const($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 HEAP32[$4 + 8 >> 2] = HEAP32[HEAP32[$4 + 24 >> 2] + 12 >> 2] + Math_imul(HEAP32[HEAP32[$4 + 20 >> 2] + 4 >> 2], 12);
 label$1 : {
  if (HEAP32[HEAP32[$4 + 8 >> 2] + 4 >> 2] > HEAP32[$4 + 12 >> 2]) {
   HEAP8[$4 + 31 | 0] = 0;
   break label$1;
  }
  if (HEAP32[$4 + 16 >> 2] > HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2]) {
   HEAP8[$4 + 31 | 0] = 0;
   break label$1;
  }
  HEAP8[$4 + 31 | 0] = 1;
 }
 return HEAP8[$4 + 31 | 0] & 1;
}
function jsvGetValueOf($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
   HEAP32[$1 + 12 >> 2] = jsvLockAgainSafe(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = jspGetNamedField(HEAP32[$1 + 8 >> 2], 2595, 0);
  if (!(jsvIsFunction(HEAP32[$1 + 4 >> 2]) & 1)) {
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 8 >> 2] = jspeFunctionCall(HEAP32[$1 + 4 >> 2], 0, HEAP32[$1 + 8 >> 2], 0, 0, 0);
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsfEraseFile($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 80 | 0;
 global$0 = $1;
 HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 24 >> 2];
 $2 = HEAP32[$0 + 20 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 16 >> 2];
 HEAP32[$1 + 28 >> 2] = $2;
 $2 = HEAP32[$0 + 12 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$1 + 20 >> 2] = $2;
 $2 = HEAP32[$0 + 4 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$1 + 12 >> 2] = $2;
 HEAP32[$1 + 36 >> 2] = jsfFindFile($1 + 8 | 0, $1 + 40 | 0);
 label$1 : {
  if (!HEAP32[$1 + 36 >> 2]) {
   HEAP8[$1 + 79 | 0] = 0;
   break label$1;
  }
  jsfEraseFileInternal(HEAP32[$1 + 36 >> 2], $1 + 40 | 0);
  HEAP8[$1 + 79 | 0] = 1;
 }
 global$0 = $1 + 80 | 0;
 return HEAP8[$1 + 79 | 0] & 1;
}
function tflite__ResetVariableTensor_28TfLiteTensor__29($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 HEAP32[$1 + 24 >> 2] = $0;
 if (HEAP8[HEAP32[$1 + 24 >> 2] + 45 | 0] & 1) {
  HEAP32[$1 + 20 >> 2] = 0;
  if (HEAP32[HEAP32[$1 + 24 >> 2] >> 2] == 9) {
   HEAP32[$1 + 20 >> 2] = HEAP32[HEAP32[$1 + 24 >> 2] + 16 >> 2];
  }
  HEAP32[$1 + 16 >> 2] = HEAP32[HEAP32[$1 + 24 >> 2] + 4 >> 2];
  HEAP32[$1 + 12 >> 2] = 0;
  while (1) {
   if (HEAPU32[$1 + 12 >> 2] < HEAPU32[HEAP32[$1 + 24 >> 2] + 24 >> 2]) {
    HEAP8[HEAP32[$1 + 16 >> 2]] = HEAP32[$1 + 20 >> 2];
    HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 16 >> 2] + 1;
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 HEAP32[$1 + 28 >> 2] = 0;
}
function jsiConsolePrintStringVarWithNewLineChar($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP8[$3 + 39 | 0] = $2;
 jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2]);
 while (1) {
  if (jsvStringIteratorHasChar($3 + 16 | 0) & 1) {
   HEAP8[$3 + 15 | 0] = jsvStringIteratorGetCharAndNext($3 + 16 | 0);
   if (HEAP8[$3 + 15 | 0] == 10) {
    jsiConsolePrintChar(13);
   }
   jsiConsolePrintChar(HEAP8[$3 + 15 | 0]);
   if (!(!HEAP8[$3 + 39 | 0] | HEAP8[$3 + 15 | 0] != 10)) {
    jsiConsolePrintChar(HEAP8[$3 + 39 | 0]);
   }
   continue;
  }
  break;
 }
 jsvStringIteratorFree($3 + 16 | 0);
 global$0 = $3 + 48 | 0;
}
function tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__OpContext__OpContext_28TfLiteContext__2c_20TfLiteNode__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
 HEAP32[$0 + 4 >> 2] = tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1);
 HEAP32[$0 + 8 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 16 | 0;
}
function jswrap_string_repeat($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1 : {
  if (HEAP32[$2 + 4 >> 2] < 0) {
   jsExceptionHere(1, 37434, 0);
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 >> 2] = jsvNewFromEmptyString();
  while (1) {
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$2 + 4 >> 2] = $0 + -1;
   if ($0) {
    $0 = jspIsInterrupted() ^ -1;
   } else {
    $0 = 0;
   }
   if ($0 & 1) {
    jsvAppendStringVarComplete(HEAP32[$2 >> 2], HEAP32[$2 + 8 >> 2]);
    continue;
   }
   break;
  }
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function jsvSkipToLastName($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
 while (1) {
  label$2 : {
   if (!(jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535)) {
    break label$2;
   }
   HEAP32[$1 + 4 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535);
   label$4 : {
    if (jsvIsName(HEAP32[$1 + 4 >> 2]) & 1) {
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
     HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 4 >> 2];
     break label$4;
    }
    jsvUnLock(HEAP32[$1 + 4 >> 2]);
    break label$2;
   }
   continue;
  }
  break;
 }
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsvArrayBufferIteratorGetValueAndRewind($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 $0 = $1 + 8 | 0;
 jsvStringIteratorClone($0, HEAP32[$1 + 28 >> 2]);
 HEAP32[$1 + 4 >> 2] = jsvArrayBufferIteratorGetValue(HEAP32[$1 + 28 >> 2]);
 jsvStringIteratorFree(HEAP32[$1 + 28 >> 2]);
 $4 = HEAP32[$0 + 4 >> 2];
 $3 = HEAP32[$1 + 28 >> 2];
 $2 = $3;
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 HEAP32[$2 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
 $2 = HEAP32[$0 + 12 >> 2];
 HEAP32[$3 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$3 + 12 >> 2] = $2;
 HEAP8[HEAP32[$1 + 28 >> 2] + 36 | 0] = 0;
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 4 >> 2];
}
function jsfSetFlags($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1 : {
  if (!(jsvIsObject(HEAP32[$1 + 12 >> 2]) & 1)) {
   break label$1;
  }
  HEAP32[$1 + 8 >> 2] = HEAP32[13336];
  HEAP8[$1 + 7 | 0] = 1;
  while (1) {
   if (!HEAPU8[HEAP32[$1 + 8 >> 2]]) {
    break label$1;
   }
   HEAP32[$1 >> 2] = jsvObjectGetChild(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2], 0);
   if (HEAP32[$1 >> 2]) {
    jsfSetFlag(HEAPU8[$1 + 7 | 0], jsvGetBoolAndUnLock(HEAP32[$1 >> 2]) & 1);
   }
   HEAP32[$1 + 8 >> 2] = (strlen(HEAP32[$1 + 8 >> 2]) + 1 | 0) + HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = HEAPU8[$1 + 7 | 0] << 1;
   continue;
  }
 }
 global$0 = $1 + 16 | 0;
}
function jswrap_parseFloat($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 112 | 0;
 global$0 = $1;
 HEAP32[$1 + 100 >> 2] = $0;
 $0 = $1 + 16 | 0;
 jsvGetString(HEAP32[$1 + 100 >> 2], $0, 70);
 label$1 : {
  if (!strcmp($0, 32852)) {
   HEAPF64[$1 + 104 >> 3] = infinity;
   break label$1;
  }
  if (!strcmp($1 + 16 | 0, 32861)) {
   HEAPF64[$1 + 104 >> 3] = -infinity;
   break label$1;
  }
  $0 = $1 + 16 | 0;
  HEAPF64[$1 >> 3] = stringToFloatWithRadix($0, 0, $1 + 12 | 0);
  if (HEAP32[$1 + 12 >> 2] == ($0 + 69 | 0)) {
   jsExceptionHere(1, 32871, 0);
   HEAPF64[$1 + 104 >> 3] = nan;
   break label$1;
  }
  HEAPF64[$1 + 104 >> 3] = HEAPF64[$1 >> 3];
 }
 global$0 = $1 + 112 | 0;
 return +HEAPF64[$1 + 104 >> 3];
}
function jswrap_date_setMinutes($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 48 | 0;
 global$0 = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP32[$4 + 32 >> 2] = $3;
 getTimeFromDateVar($4 + 8 | 0, HEAP32[$4 + 44 >> 2], 0);
 HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 40 >> 2];
 if (jsvIsNumeric(HEAP32[$4 + 36 >> 2]) & 1) {
  HEAP32[$4 + 16 >> 2] = jsvGetInteger(HEAP32[$4 + 36 >> 2]);
 }
 if (jsvIsNumeric(HEAP32[$4 + 32 >> 2]) & 1) {
  HEAP32[$4 + 12 >> 2] = jsvGetInteger(HEAP32[$4 + 32 >> 2]);
 }
 $5 = jswrap_date_setTime(HEAP32[$4 + 44 >> 2], fromTimeInDay($4 + 8 | 0));
 global$0 = $4 + 48 | 0;
 return +$5;
}
function tflite__ops__micro__activations__Softmax2DFloat_28TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteSoftmaxParams__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = HEAP32[HEAP32[HEAP32[$3 + 28 >> 2] + 8 >> 2] + 4 >> 2];
 HEAP32[$3 + 12 >> 2] = HEAP32[HEAP32[HEAP32[$3 + 28 >> 2] + 8 >> 2] + 8 >> 2];
 tflite__reference_ops__Softmax_28float_20const__2c_20int_2c_20int_2c_20float_2c_20float__29(HEAP32[HEAP32[$3 + 28 >> 2] + 4 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2], HEAPF32[HEAP32[$3 + 20 >> 2] >> 2], HEAP32[HEAP32[$3 + 24 >> 2] + 4 >> 2]);
 global$0 = $3 + 32 | 0;
}
function jswrap_terminal_idle() {
 var $0 = 0;
 $0 = global$0 - 80 | 0;
 global$0 = $0;
 if (HEAP8[252037] & 1) {
  if (terminalGetGFX($0 + 8 | 0) & 1) {
   HEAP32[$0 + 4 >> 2] = jsvObjectGetChild(HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24), 39525, 0);
   if (HEAP32[$0 + 4 >> 2]) {
    jsvUnLock2(jspExecuteFunction(HEAP32[$0 + 4 >> 2], HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24), 0, 0), HEAP32[$0 + 4 >> 2]);
   }
   jsvUnLock(HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24));
   HEAP8[252037] = 0;
  }
 }
 global$0 = $0 + 80 | 0;
 return 0;
}
function jswrap_regexp_hasFlag($0, $1) {
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP8[$2 + 43 | 0] = $1;
 HEAP32[$2 + 36 >> 2] = jsvObjectGetChild(HEAP32[$2 + 44 >> 2], 36794, 0);
 HEAP8[$2 + 35 | 0] = 0;
 if (jsvIsString(HEAP32[$2 + 36 >> 2]) & 1) {
  jsvStringIteratorNew($2 + 8 | 0, HEAP32[$2 + 36 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar($2 + 8 | 0) & 1) {
    HEAP8[$2 + 35 | 0] = ((jsvStringIteratorGetCharAndNext($2 + 8 | 0) & 255) == HEAPU8[$2 + 43 | 0] | HEAP8[$2 + 35 | 0] & 1) != 0;
    continue;
   }
   break;
  }
  jsvStringIteratorFree($2 + 8 | 0);
 }
 jsvUnLock(HEAP32[$2 + 36 >> 2]);
 global$0 = $2 + 48 | 0;
 return HEAP8[$2 + 35 | 0] & 1;
}
function jswrap_interactive_setTime($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAPF64[$1 + 24 >> 3] = $0;
 HEAP32[$1 + 16 >> 2] = jshGetTimeFromMilliseconds(HEAPF64[$1 + 24 >> 3] * 1e3);
 HEAP32[$1 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
 $2 = HEAP32[$1 + 20 >> 2];
 HEAP32[23796] = HEAP32[$1 + 16 >> 2];
 HEAP32[23797] = $2;
 HEAP32[$1 + 8 >> 2] = jshGetSystemTime();
 HEAP32[$1 + 12 >> 2] = i64toi32_i32$HIGH_BITS;
 jshSetSystemTime(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
 $2 = HEAP32[$1 + 16 >> 2];
 $3 = HEAP32[$1 + 8 >> 2];
 jstSystemTimeChanged($2 - $3 | 0, HEAP32[$1 + 20 >> 2] - (HEAP32[$1 + 12 >> 2] + ($2 >>> 0 < $3 >>> 0) | 0) | 0);
 global$0 = $1 + 32 | 0;
}
function jsfCompact() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 8 >> 2] = 134437888;
 label$1 : {
  while (1) {
   if (HEAP32[$0 + 8 >> 2]) {
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 >> 2] = jsfGetAllocatedSpace(HEAP32[$0 + 8 >> 2], $0 + 4 | 0);
    if (!HEAP32[$0 + 4 >> 2]) {
     HEAP8[$0 + 15 | 0] = 1;
     break label$1;
    }
    if (HEAP32[$0 >> 2] + 1024 >>> 0 < 1e6) {
     HEAP8[$0 + 15 | 0] = jsfCompactInternal(HEAP32[$0 + 8 >> 2], HEAP32[$0 >> 2]) & 1;
     break label$1;
    }
    HEAP32[$0 + 8 >> 2] = jsfGetAddressOfNextStartPage(HEAP32[$0 + 8 >> 2]);
    continue;
   }
   break;
  }
  HEAP8[$0 + 15 | 0] = 0;
 }
 global$0 = $0 + 16 | 0;
 return HEAP8[$0 + 15 | 0] & 1;
}
function heatshrink_decoder_finish($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = -1;
   break label$1;
  }
  $0 = HEAPU8[HEAP32[$1 + 8 >> 2] + 10 | 0];
  if ($0 >>> 0 <= 5) {
   label$4 : {
    switch ($0 - 1 | 0) {
    default:
     HEAP32[$1 + 12 >> 2] = HEAPU16[HEAP32[$1 + 8 >> 2] >> 1] ? 1 : 0;
     break label$1;
    case 1:
    case 2:
    case 3:
    case 4:
     HEAP32[$1 + 12 >> 2] = HEAPU16[HEAP32[$1 + 8 >> 2] >> 1] ? 1 : 0;
     break label$1;
    case 0:
     break label$4;
    }
   }
   HEAP32[$1 + 12 >> 2] = HEAPU16[HEAP32[$1 + 8 >> 2] >> 1] ? 1 : 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 1;
 }
}
function jsvExecuteGetter($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1 : {
  if (!(jsvIsGetterOrSetter(HEAP32[$2 + 20 >> 2]) & 1)) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = jsvObjectGetChild(HEAP32[$2 + 20 >> 2], 2767, 0);
  if (!(jsvIsFunction(HEAP32[$2 + 16 >> 2]) & 1)) {
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jspExecuteFunction(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 24 >> 2], 0, 0);
  jsvUnLock(HEAP32[$2 + 16 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function jsvIsChild($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP16[$2 + 18 >> 1] = jsvGetRef(HEAP32[$2 + 20 >> 2]);
 HEAP16[$2 + 16 >> 1] = jsvGetFirstChild(HEAP32[$2 + 24 >> 2]);
 label$1 : {
  while (1) {
   if (HEAPU16[$2 + 16 >> 1]) {
    if (HEAPU16[$2 + 16 >> 1] == HEAPU16[$2 + 18 >> 1]) {
     HEAP8[$2 + 31 | 0] = 1;
     break label$1;
    }
    HEAP32[$2 + 12 >> 2] = jsvLock(HEAPU16[$2 + 16 >> 1]);
    HEAP16[$2 + 16 >> 1] = jsvGetNextSibling(HEAP32[$2 + 12 >> 2]);
    jsvUnLock(HEAP32[$2 + 12 >> 2]);
    continue;
   }
   break;
  }
  HEAP8[$2 + 31 | 0] = 0;
 }
 global$0 = $2 + 32 | 0;
 return HEAP8[$2 + 31 | 0] & 1;
}
function jsvArrayBufferIteratorDataToInt($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = HEAPU16[HEAP32[$2 + 28 >> 2] + 20 >> 1] & 15;
 HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 20 >> 2] << 3;
 $0 = HEAP32[$2 + 16 >> 2];
 HEAP32[$2 + 12 >> 2] = (32 <= ($0 & 63) >>> 0 ? 0 : 1 << ($0 & 31)) - 1;
 HEAP32[$2 + 8 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] & HEAP32[$2 + 12 >> 2];
 if (!(!(HEAPU16[HEAP32[$2 + 28 >> 2] + 20 >> 1] & 16) | !(HEAP32[$2 + 8 >> 2] & 1 << HEAP32[$2 + 16 >> 2] - 1))) {
  HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | HEAP32[$2 + 12 >> 2] ^ -1;
 }
 return HEAP32[$2 + 8 >> 2];
}
function i2c_initstruct($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[HEAP32[$2 + 12 >> 2] + 1 | 0] = HEAPU8[HEAP32[$2 + 8 >> 2] + 5 | 0];
 HEAP8[HEAP32[$2 + 12 >> 2]] = HEAPU8[HEAP32[$2 + 8 >> 2] + 4 | 0];
 HEAP8[HEAP32[$2 + 12 >> 2] + 2 | 0] = HEAP8[HEAP32[$2 + 8 >> 2] + 6 | 0] & 1;
 $0 = HEAP32[$2 + 8 >> 2];
 HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = 25e4 / (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24));
 if (HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] < 2) {
  HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = 0;
 }
 HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = HEAP8[HEAP32[$2 + 8 >> 2] + 7 | 0] & 1 ? 1e5 : 0;
}
function tflite__GetOptionalInputTensor_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP8[$3 + 15 | 0] = HEAP32[(HEAP32[HEAP32[$3 + 20 >> 2] >> 2] + 4 | 0) + (HEAP32[$3 + 16 >> 2] << 2) >> 2] != -1;
 label$1 : {
  if (HEAP8[$3 + 15 | 0] & 1) {
   HEAP32[$3 + 28 >> 2] = HEAP32[HEAP32[$3 + 24 >> 2] + 8 >> 2] + Math_imul(jshFlashGetMemMapAddress(HEAP32[(HEAP32[HEAP32[$3 + 20 >> 2] >> 2] + 4 | 0) + (HEAP32[$3 + 16 >> 2] << 2) >> 2]), 56);
   break label$1;
  }
  HEAP32[$3 + 28 >> 2] = 0;
 }
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function jsvCompareInteger($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1 : {
  label$2 : {
   if (!(jsvIsInt(HEAP32[$2 + 8 >> 2]) & 1)) {
    break label$2;
   }
   if (!(jsvIsInt(HEAP32[$2 + 4 >> 2]) & 1)) {
    break label$2;
   }
   HEAP32[$2 + 12 >> 2] = jsvGetInteger(HEAP32[$2 + 8 >> 2]) - jsvGetInteger(HEAP32[$2 + 4 >> 2]);
   break label$1;
  }
  if (jsvIsInt(HEAP32[$2 + 8 >> 2]) & 1) {
   HEAP32[$2 + 12 >> 2] = -1;
   break label$1;
  }
  if (jsvIsInt(HEAP32[$2 + 4 >> 2]) & 1) {
   HEAP32[$2 + 12 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 HEAP32[$2 + 4 >> 2] = flatbuffers__Table__GetVTable_28_29_20const(HEAP32[$2 + 12 >> 2]);
 HEAP16[$2 + 2 >> 1] = unsigned_20short_20flatbuffers__ReadScalar_unsigned_20short__28void_20const__29(HEAP32[$2 + 4 >> 2]);
 label$1 : {
  if (HEAPU16[$2 + 10 >> 1] < HEAPU16[$2 + 2 >> 1]) {
   $0 = unsigned_20short_20flatbuffers__ReadScalar_unsigned_20short__28void_20const__29(HEAP32[$2 + 4 >> 2] + HEAPU16[$2 + 10 >> 1] | 0) & 65535;
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $2 + 16 | 0;
 return $0 & 65535;
}
function strlen($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 label$1 : {
  label$2 : {
   $1 = $0;
   if (!($1 & 3)) {
    break label$2;
   }
   if (!HEAPU8[$0 | 0]) {
    break label$1;
   }
   while (1) {
    $1 = $1 + 1 | 0;
    if (!($1 & 3)) {
     break label$2;
    }
    if (HEAPU8[$1 | 0]) {
     continue;
    }
    break;
   }
   break label$1;
  }
  while (1) {
   $2 = $1;
   $1 = $1 + 4 | 0;
   $3 = HEAP32[$2 >> 2];
   if (!(($3 ^ -1) & $3 + -16843009 & -2139062144)) {
    continue;
   }
   break;
  }
  if (!($3 & 255)) {
   $1 = $2;
   break label$1;
  }
  while (1) {
   $3 = HEAPU8[$2 + 1 | 0];
   $1 = $2 + 1 | 0;
   $2 = $1;
   if ($3) {
    continue;
   }
   break;
  }
 }
 return $1 - $0 | 0;
}
function save_backlog($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = get_input_buffer_size(HEAP32[$1 + 12 >> 2]) & 65535;
 HEAP16[$1 + 6 >> 1] = HEAPU16[HEAP32[$1 + 12 >> 2] + 2 >> 1];
 HEAP16[$1 + 4 >> 1] = HEAP32[$1 + 8 >> 2] - HEAPU16[$1 + 6 >> 1];
 HEAP16[$1 + 2 >> 1] = HEAP32[$1 + 8 >> 2] + HEAPU16[$1 + 4 >> 1];
 memmove(HEAP32[$1 + 12 >> 2] + 15 | 0, HEAP32[$1 + 12 >> 2] + 15 + (HEAP32[$1 + 8 >> 2] - HEAPU16[$1 + 4 >> 1]) | 0, HEAPU16[$1 + 2 >> 1]);
 HEAP16[HEAP32[$1 + 12 >> 2] + 2 >> 1] = 0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP16[$0 >> 1] = HEAPU16[$0 >> 1] - (HEAP32[$1 + 8 >> 2] - HEAPU16[$1 + 4 >> 1] | 0);
 global$0 = $1 + 16 | 0;
}
function jswrap_flash_getPage($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1 : {
  if (!(jshFlashGetPage(HEAP32[$1 + 24 >> 2], $1 + 20 | 0, $1 + 16 | 0) & 1)) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvNewWithFlags(5);
  if (!HEAP32[$1 + 12 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 32647, jsvNewFromInteger(HEAP32[$1 + 20 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 32652, jsvNewFromInteger(HEAP32[$1 + 16 >> 2]));
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 12 >> 2];
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function jsiDumpEvent($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 32 | 0;
 global$0 = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 HEAP32[$5 + 8 >> 2] = jsvNewFromStringVar(HEAP32[$5 + 16 >> 2], 3, 2147483647);
 $0 = HEAP32[$5 + 28 >> 2];
 $1 = HEAP32[$5 + 24 >> 2];
 $2 = HEAP32[$5 + 20 >> 2];
 HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$5 >> 2] = $2;
 cbprintf($0, $1, 7275, $5);
 jsvUnLock(HEAP32[$5 + 8 >> 2]);
 jsiDumpJSON(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 12 >> 2], 0);
 FUNCTION_TABLE[HEAP32[$5 + 28 >> 2]](5379, HEAP32[$5 + 24 >> 2]);
 global$0 = $5 + 32 | 0;
}
function jsGfxGetPtr($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (HEAP8[97556] & 1) {
   if (!(HEAP32[$1 + 8 >> 2] < 200 ? HEAP32[$1 + 8 >> 2] >= 40 : 0)) {
    HEAP32[$1 + 12 >> 2] = 0;
    break label$1;
   }
  }
  HEAP32[$1 + 8 >> 2] = HEAP32[24388] + HEAP32[$1 + 8 >> 2];
  if (HEAP8[97556] & 1) {
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] - 40;
  }
  if (HEAP32[$1 + 8 >> 2] < 0) {
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 320;
  }
  if (HEAP32[$1 + 8 >> 2] >= 320) {
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] - 320;
  }
  HEAP32[$1 + 12 >> 2] = (Math_imul(HEAP32[$1 + 8 >> 2], 240) << 1) + 97616;
 }
 return HEAP32[$1 + 12 >> 2];
}
function scalbn($0, $1) {
 var $2 = 0;
 label$1 : {
  if (($1 | 0) >= 1024) {
   $0 = $0 * 8.98846567431158e+307;
   $2 = $1 + -1023 | 0;
   if (($2 | 0) < 1024) {
    $1 = $2;
    break label$1;
   }
   $0 = $0 * 8.98846567431158e+307;
   $1 = (($1 | 0) < 3069 ? $1 : 3069) + -2046 | 0;
   break label$1;
  }
  if (($1 | 0) > -1023) {
   break label$1;
  }
  $0 = $0 * 2.2250738585072014e-308;
  $2 = $1 + 1022 | 0;
  if (($2 | 0) > -1023) {
   $1 = $2;
   break label$1;
  }
  $0 = $0 * 2.2250738585072014e-308;
  $1 = (($1 | 0) > -3066 ? $1 : -3066) + 2044 | 0;
 }
 $1 = $1 + 1023 << 20;
 wasm2js_scratch_store_i32(0, 0);
 wasm2js_scratch_store_i32(1, $1 | 0);
 return $0 * +wasm2js_scratch_load_f64();
}
function jswrap_graphics_asURL($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = jswrap_graphics_asBMP(HEAP32[$1 + 24 >> 2]);
 label$1 : {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 16 >> 2] = jswrap_btoa(HEAP32[$1 + 20 >> 2]);
  jsvUnLock(HEAP32[$1 + 20 >> 2]);
  if (!HEAP32[$1 + 16 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$1 + 12 >> 2] = jsvVarPrintf(39310, $1);
  jsvUnLock(HEAP32[$1 + 16 >> 2]);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 12 >> 2];
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function jswrap_graphics_fillEllipse($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = global$0 - 96 | 0;
 global$0 = $5;
 HEAP32[$5 + 88 >> 2] = $0;
 HEAP32[$5 + 84 >> 2] = $1;
 HEAP32[$5 + 80 >> 2] = $2;
 HEAP32[$5 + 76 >> 2] = $3;
 HEAP32[$5 + 72 >> 2] = $4;
 label$1 : {
  if (!(graphicsGetFromVar($5, HEAP32[$5 + 88 >> 2]) & 1)) {
   HEAP32[$5 + 92 >> 2] = 0;
   break label$1;
  }
  graphicsFillEllipse($5, HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2], HEAP32[$5 + 72 >> 2]);
  graphicsSetVar($5);
  HEAP32[$5 + 92 >> 2] = jsvLockAgain(HEAP32[$5 + 88 >> 2]);
 }
 global$0 = $5 + 96 | 0;
 return HEAP32[$5 + 92 >> 2];
}
function jswrap_graphics_drawEllipse($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = global$0 - 96 | 0;
 global$0 = $5;
 HEAP32[$5 + 88 >> 2] = $0;
 HEAP32[$5 + 84 >> 2] = $1;
 HEAP32[$5 + 80 >> 2] = $2;
 HEAP32[$5 + 76 >> 2] = $3;
 HEAP32[$5 + 72 >> 2] = $4;
 label$1 : {
  if (!(graphicsGetFromVar($5, HEAP32[$5 + 88 >> 2]) & 1)) {
   HEAP32[$5 + 92 >> 2] = 0;
   break label$1;
  }
  graphicsDrawEllipse($5, HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2], HEAP32[$5 + 72 >> 2]);
  graphicsSetVar($5);
  HEAP32[$5 + 92 >> 2] = jsvLockAgain(HEAP32[$5 + 88 >> 2]);
 }
 global$0 = $5 + 96 | 0;
 return HEAP32[$5 + 92 >> 2];
}
function getMonth($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = 0;
 label$1 : {
  while (1) {
   if (HEAP32[$1 + 4 >> 2] < 12) {
    if (!(HEAP8[HEAP32[$1 + 8 >> 2]] != HEAP8[HEAP32[13353] + (HEAP32[$1 + 4 >> 2] << 2) | 0] | HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] != HEAP8[HEAP32[13353] + ((HEAP32[$1 + 4 >> 2] << 2) + 1 | 0) | 0] | HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] != HEAP8[HEAP32[13353] + ((HEAP32[$1 + 4 >> 2] << 2) + 2 | 0) | 0])) {
     HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
     break label$1;
    }
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$1 + 12 >> 2] = -1;
 }
 return HEAP32[$1 + 12 >> 2];
}
function fmt_u($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 label$1 : {
  if (($1 | 0) == 1 & $0 >>> 0 < 0 | $1 >>> 0 < 1) {
   $3 = $0;
   break label$1;
  }
  while (1) {
   $2 = $2 + -1 | 0;
   $3 = __wasm_i64_udiv($0, $1, 10, 0);
   $4 = i64toi32_i32$HIGH_BITS;
   $5 = $4;
   $4 = __wasm_i64_mul($3, $4, 10, 0);
   HEAP8[$2 | 0] = $0 - $4 | 48;
   $4 = ($1 | 0) == 9 & $0 >>> 0 > 4294967295 | $1 >>> 0 > 9;
   $0 = $3;
   $1 = $5;
   if ($4) {
    continue;
   }
   break;
  }
 }
 if ($3) {
  while (1) {
   $2 = $2 + -1 | 0;
   $0 = ($3 >>> 0) / 10 | 0;
   HEAP8[$2 | 0] = $3 - Math_imul($0, 10) | 48;
   $1 = $3 >>> 0 > 9;
   $3 = $0;
   if ($1) {
    continue;
   }
   break;
  }
 }
 return $2;
}
function jswrap_graphics_drawRect($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = global$0 - 96 | 0;
 global$0 = $5;
 HEAP32[$5 + 88 >> 2] = $0;
 HEAP32[$5 + 84 >> 2] = $1;
 HEAP32[$5 + 80 >> 2] = $2;
 HEAP32[$5 + 76 >> 2] = $3;
 HEAP32[$5 + 72 >> 2] = $4;
 label$1 : {
  if (!(graphicsGetFromVar($5, HEAP32[$5 + 88 >> 2]) & 1)) {
   HEAP32[$5 + 92 >> 2] = 0;
   break label$1;
  }
  graphicsDrawRect($5, HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2], HEAP32[$5 + 72 >> 2]);
  graphicsSetVar($5);
  HEAP32[$5 + 92 >> 2] = jsvLockAgain(HEAP32[$5 + 88 >> 2]);
 }
 global$0 = $5 + 96 | 0;
 return HEAP32[$5 + 92 >> 2];
}
function jswrap_graphics_drawLine($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = global$0 - 96 | 0;
 global$0 = $5;
 HEAP32[$5 + 88 >> 2] = $0;
 HEAP32[$5 + 84 >> 2] = $1;
 HEAP32[$5 + 80 >> 2] = $2;
 HEAP32[$5 + 76 >> 2] = $3;
 HEAP32[$5 + 72 >> 2] = $4;
 label$1 : {
  if (!(graphicsGetFromVar($5, HEAP32[$5 + 88 >> 2]) & 1)) {
   HEAP32[$5 + 92 >> 2] = 0;
   break label$1;
  }
  graphicsDrawLine($5, HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2], HEAP32[$5 + 72 >> 2]);
  graphicsSetVar($5);
  HEAP32[$5 + 92 >> 2] = jsvLockAgain(HEAP32[$5 + 88 >> 2]);
 }
 global$0 = $5 + 96 | 0;
 return HEAP32[$5 + 92 >> 2];
}
function jsvNewFromLongInteger($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1 : {
  label$2 : {
   $0 = HEAP32[$2 + 4 >> 2];
   if (($0 | 0) < -1 ? 1 : ($0 | 0) <= -1 ? HEAPU32[$2 >> 2] >= 2147483648 ? 0 : 1 : 0) {
    break label$2;
   }
   $0 = HEAP32[$2 + 4 >> 2];
   if (($0 | 0) > 0 ? 1 : ($0 | 0) >= 0 ? HEAPU32[$2 >> 2] <= 2147483647 ? 0 : 1 : 0) {
    break label$2;
   }
   HEAP32[$2 + 12 >> 2] = jsvNewFromInteger(HEAP32[$2 >> 2]);
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvNewFromFloat(+HEAPU32[$2 >> 2] + 4294967296 * +HEAP32[$2 + 4 >> 2]);
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function jshPushEvent($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = HEAPU8[95202] + 1;
 label$1 : {
  if (HEAPU8[95203] == HEAPU8[$1 + 11 | 0]) {
   HEAP8[95095] = HEAPU8[95095] | 1;
   break label$1;
  }
  $0 = Math_imul(HEAPU8[95202], 5) + 95792 | 0;
  $2 = HEAP32[$1 + 12 >> 2];
  $3 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
  HEAP8[$0 | 0] = $3;
  HEAP8[$0 + 1 | 0] = $3 >>> 8;
  HEAP8[$0 + 2 | 0] = $3 >>> 16;
  HEAP8[$0 + 3 | 0] = $3 >>> 24;
  HEAP8[$0 + 4 | 0] = HEAPU8[$2 + 4 | 0];
  HEAP8[95202] = HEAPU8[$1 + 11 | 0];
 }
 global$0 = $1 + 16 | 0;
}
function unsigned_20char_20const__20std____2__min_unsigned_20char_2c_20std____2____less_unsigned_20char_2c_20unsigned_20char__20__28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20std____2____less_unsigned_20char_2c_20unsigned_20char__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1 : {
  if (std____2____less_unsigned_20char_2c_20unsigned_20char___operator_28_29_28unsigned_20char_20const__2c_20unsigned_20char_20const__29_20const($2 + 8 | 0, HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function unsigned_20char_20const__20std____2__max_unsigned_20char_2c_20std____2____less_unsigned_20char_2c_20unsigned_20char__20__28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20std____2____less_unsigned_20char_2c_20unsigned_20char__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1 : {
  if (std____2____less_unsigned_20char_2c_20unsigned_20char___operator_28_29_28unsigned_20char_20const__2c_20unsigned_20char_20const__29_20const($2 + 8 | 0, HEAP32[$2 + 4 >> 2], HEAP32[$2 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const($0) >> 2];
 HEAP32[std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const($0) >> 2] = 0;
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function st_yield_tag_bit($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1 : {
  if (can_take_byte(HEAP32[$2 + 4 >> 2])) {
   if (!HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1]) {
    add_tag_bit(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2], 1);
    HEAP32[$2 + 12 >> 2] = 4;
    break label$1;
   }
   add_tag_bit(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2], 0);
   HEAP16[HEAP32[$2 + 8 >> 2] + 8 >> 1] = HEAPU16[HEAP32[$2 + 8 >> 2] + 6 >> 1] - 1;
   HEAP8[HEAP32[$2 + 8 >> 2] + 10 | 0] = 8;
   HEAP32[$2 + 12 >> 2] = 5;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 3;
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function jsvInitJsVars($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP16[$1 + 14 >> 1] = 1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP16[$1 + 6 >> 1] = HEAPU16[$1 + 14 >> 1];
 while (1) {
  if (HEAPU16[$1 + 6 >> 1] < HEAPU16[$1 + 14 >> 1] + HEAP32[$1 + 8 >> 2] >>> 0) {
   HEAP32[$1 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 6 >> 1]);
   HEAP16[HEAP32[$1 >> 2] + 14 >> 1] = 0;
   jsvSetNextSibling(HEAP32[$1 >> 2], HEAPU16[$1 + 6 >> 1] + 1 & 65535);
   HEAP16[$1 + 6 >> 1] = HEAPU16[$1 + 6 >> 1] + 1;
   continue;
  }
  break;
 }
 jsvSetNextSibling(jsvGetAddressOf((HEAPU16[$1 + 14 >> 1] + HEAP32[$1 + 8 >> 2] | 0) - 1 & 65535), 0);
 global$0 = $1 + 16 | 0;
 return HEAPU16[$1 + 14 >> 1];
}
function jspeStatementReturn() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 jslGetNextToken();
 if (!(HEAP16[HEAP32[13768] + 2 >> 1] == 59 | HEAP16[HEAP32[13768] + 2 >> 1] == 125)) {
  HEAP32[$0 + 12 >> 2] = jsvSkipNameAndUnLock(jspeExpression());
 }
 if ((HEAP32[23778] & 63) == 1) {
  HEAP32[$0 + 8 >> 2] = jspeiFindInScopes(4037);
  label$3 : {
   if (HEAP32[$0 + 8 >> 2]) {
    jsvReplaceWith(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2]);
    jsvUnLock(HEAP32[$0 + 8 >> 2]);
    HEAP32[23778] = HEAP32[23778] | 8;
    break label$3;
   }
   jsExceptionHere(2, 4900, 0);
  }
 }
 jsvUnLock(HEAP32[$0 + 12 >> 2]);
 global$0 = $0 + 16 | 0;
 return 0;
}
function jswrap_graphics_moveTo($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP32[$3 + 80 >> 2] = $2;
 label$1 : {
  if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  $0 = HEAP32[$3 + 84 >> 2];
  HEAP8[$3 + 35 | 0] = $0;
  HEAP8[$3 + 36 | 0] = $0 >>> 8;
  $0 = HEAP32[$3 + 80 >> 2];
  HEAP8[$3 + 37 | 0] = $0;
  HEAP8[$3 + 38 | 0] = $0 >>> 8;
  graphicsSetVar($3 + 8 | 0);
  HEAP32[$3 + 92 >> 2] = jsvLockAgain(HEAP32[$3 + 88 >> 2]);
 }
 global$0 = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}
function jswrap_graphics_getColorX($0, $1) {
 var $2 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP8[$2 + 71 | 0] = $1;
 label$1 : {
  if (!(graphicsGetFromVar($2, HEAP32[$2 + 72 >> 2]) & 1)) {
   HEAP32[$2 + 76 >> 2] = 0;
   break label$1;
  }
  $0 = $2;
  if (HEAP8[$2 + 71 | 0] & 1) {
   $1 = HEAPU8[$2 + 17 | 0] | HEAPU8[$2 + 18 | 0] << 8 | (HEAPU8[$2 + 19 | 0] << 16 | HEAPU8[$2 + 20 | 0] << 24);
  } else {
   $1 = HEAPU8[$2 + 21 | 0] | HEAPU8[$2 + 22 | 0] << 8 | (HEAPU8[$2 + 23 | 0] << 16 | HEAPU8[$2 + 24 | 0] << 24);
  }
  HEAP32[$0 + 76 >> 2] = $1 & (1 << HEAPU8[$2 + 16 | 0]) - 1;
 }
 global$0 = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}
function tflite__NumElements_28TfLiteIntArray_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 16 >> 2] = 1;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 12 >> 2] < HEAP32[HEAP32[$1 + 28 >> 2] >> 2]) {
   $0 = HEAP32[(HEAP32[$1 + 28 >> 2] + 4 | 0) + (HEAP32[$1 + 12 >> 2] << 2) >> 2];
   HEAP32[$1 + 16 >> 2] = __wasm_i64_mul(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2], $0, $0 >> 31);
   HEAP32[$1 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 20 >> 2];
 return HEAP32[$1 + 16 >> 2];
}
function unsigned_20char_20flatbuffers__Table__GetField_unsigned_20char__28unsigned_20short_2c_20unsigned_20char_29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP16[$3 + 10 >> 1] = $1;
 HEAP8[$3 + 9 | 0] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP16[$3 + 6 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$3 + 10 >> 1]);
 label$1 : {
  if (HEAPU16[$3 + 6 >> 1]) {
   $0 = unsigned_20char_20flatbuffers__ReadScalar_unsigned_20char__28void_20const__29($0 + HEAPU16[$3 + 6 >> 1] | 0);
   break label$1;
  }
  $0 = HEAPU8[$3 + 9 | 0];
 }
 global$0 = $3 + 16 | 0;
 return $0 & 255;
}
function st_backref_count_lsb($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP8[$1 + 7 | 0] = 6;
 $0 = $1;
 $3 = HEAP32[$1 + 8 >> 2];
 if (HEAPU8[$1 + 7 | 0] < 8) {
  $2 = HEAPU8[$1 + 7 | 0];
 } else {
  $2 = 8;
 }
 HEAP16[$0 + 4 >> 1] = get_bits($3, $2);
 label$3 : {
  if (HEAPU16[$1 + 4 >> 1] == 65535) {
   HEAP32[$1 + 12 >> 2] = 5;
   break label$3;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP16[$0 + 4 >> 1] = HEAPU16[$1 + 4 >> 1] | HEAPU16[$0 + 4 >> 1];
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] + 1;
  HEAP32[$1 + 12 >> 2] = 6;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsvObjectSetChild($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1 : {
  if (!(jsvHasChildren(HEAP32[$3 + 24 >> 2]) & 1)) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvFindChildFromString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], 1);
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  jsvSetValueOfName(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2]);
  jsvUnLock(HEAP32[$3 + 12 >> 2]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 16 >> 2];
 }
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function jsfGetSpaceLeftInPage($0) {
 var $1 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 label$1 : {
  if (!(jshFlashGetPage(HEAP32[$1 + 56 >> 2], $1 + 52 | 0, $1 + 48 | 0) & 1)) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 52 >> 2] + HEAP32[$1 + 48 >> 2];
  label$3 : {
   if (HEAPU32[$1 + 44 >> 2] >= 134479872) {
    break label$3;
   }
   if (jsfGetFileHeader(HEAP32[$1 + 44 >> 2], $1 + 8 | 0, 0) & 1) {
    break label$3;
   }
   HEAP32[$1 + 44 >> 2] = 134479872;
  }
  HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 44 >> 2] - HEAP32[$1 + 56 >> 2];
 }
 global$0 = $1 - -64 | 0;
 return HEAP32[$1 + 60 >> 2];
}
function tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29__$_0__operator_28_29_28float_29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $1 = float_20tflite__TfLiteRound_float__28float_29(Math_fround(HEAPF32[$2 + 8 >> 2] / HEAPF32[$0 >> 2]));
 label$1 : {
  if (Math_fround(Math_abs($1)) < Math_fround(2147483648)) {
   $0 = ~~$1;
   break label$1;
  }
  $0 = -2147483648;
 }
 global$0 = $2 + 16 | 0;
 return $0 + $3 | 0;
}
function st_flush_bit_buffer($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1 : {
  if (HEAPU8[HEAP32[$2 + 8 >> 2] + 14 | 0] == 128) {
   HEAP32[$2 + 12 >> 2] = 9;
   break label$1;
  }
  if (can_take_byte(HEAP32[$2 + 4 >> 2])) {
   $1 = HEAPU8[HEAP32[$2 + 8 >> 2] + 13 | 0];
   $4 = HEAP32[HEAP32[$2 + 4 >> 2] >> 2];
   $3 = HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2];
   $0 = HEAP32[$3 >> 2];
   HEAP32[$3 >> 2] = $0 + 1;
   HEAP8[$0 + $4 | 0] = $1;
   HEAP32[$2 + 12 >> 2] = 9;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 8;
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP16[$3 + 10 >> 1] = $1;
 HEAP8[$3 + 9 | 0] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP16[$3 + 6 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$3 + 10 >> 1]);
 label$1 : {
  if (HEAPU16[$3 + 6 >> 1]) {
   $0 = signed_20char_20flatbuffers__ReadScalar_signed_20char__28void_20const__29($0 + HEAPU16[$3 + 6 >> 1] | 0);
   break label$1;
  }
  $0 = HEAPU8[$3 + 9 | 0];
 }
 global$0 = $3 + 16 | 0;
 return $0 << 24 >> 24;
}
function jsvMathsOpSkipNames($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = jsvSkipName(HEAP32[$3 + 28 >> 2]);
 HEAP32[$3 + 12 >> 2] = jsvSkipName(HEAP32[$3 + 24 >> 2]);
 HEAP32[$3 + 8 >> 2] = jsvGetValueOf(HEAP32[$3 + 16 >> 2]);
 HEAP32[$3 + 4 >> 2] = jsvGetValueOf(HEAP32[$3 + 12 >> 2]);
 jsvUnLock2(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2]);
 HEAP32[$3 >> 2] = jsvMathsOp(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], HEAP32[$3 + 20 >> 2]);
 jsvUnLock2(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 >> 2];
}
function isIDString($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!(isAlpha(HEAP8[HEAP32[$1 + 8 >> 2]]) & 1)) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  while (1) {
   if (HEAPU8[HEAP32[$1 + 8 >> 2]]) {
    label$5 : {
     if (isAlpha(HEAP8[HEAP32[$1 + 8 >> 2]]) & 1) {
      break label$5;
     }
     if (isNumeric(HEAP8[HEAP32[$1 + 8 >> 2]]) & 1) {
      break label$5;
     }
     HEAP8[$1 + 15 | 0] = 0;
     break label$1;
    }
    HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP8[$1 + 15 | 0] = 1;
 }
 global$0 = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}
function jsvNewArray($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = jsvNewWithFlags(3);
 label$1 : {
  if (!HEAP32[$2 + 16 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 12 >> 2] < HEAP32[$2 + 20 >> 2]) {
    jsvArrayPush(HEAP32[$2 + 16 >> 2], HEAP32[HEAP32[$2 + 24 >> 2] + (HEAP32[$2 + 12 >> 2] << 2) >> 2]);
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function jswrap_onewire_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 HEAP8[$3 + 6 | 0] = onewire_getpin(HEAP32[$3 + 12 >> 2]);
 label$1 : {
  if (!(jshIsPinValid(HEAPU8[$3 + 6 | 0]) & 1)) {
   break label$1;
  }
  jsvIterateCallback(HEAP32[$3 + 8 >> 2], 515, $3 + 6 | 0);
  if (HEAP8[$3 + 7 | 0] & 1) {
   jshPinSetValue(HEAPU8[$3 + 6 | 0], 1);
   jshPinSetState(HEAPU8[$3 + 6 | 0], 1);
   break label$1;
  }
  jshPinSetState(HEAPU8[$3 + 6 | 0], 4);
  jshPinSetValue(HEAPU8[$3 + 6 | 0], 1);
 }
 global$0 = $3 + 16 | 0;
}
function jspSetException($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvFindChildFromString(HEAP32[23775], 3753, 1);
 if (HEAP32[$1 + 8 >> 2]) {
  jsvSetValueOfName(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
 }
 HEAP32[23778] = HEAP32[23778] | 32;
 if (HEAP32[13768]) {
  HEAP32[$1 + 4 >> 2] = jsvObjectGetChild(HEAP32[23775], 3760, 27);
  if (HEAP32[$1 + 4 >> 2]) {
   jsvAppendPrintf(HEAP32[$1 + 4 >> 2], 3767, 0);
   jspAppendStackTrace(HEAP32[$1 + 4 >> 2]);
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   HEAP32[23778] = HEAP32[23778] | 128;
  }
 }
 global$0 = $1 + 16 | 0;
}
function flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = $0 + HEAPU16[$2 + 8 >> 1];
 label$1 : {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + flatbuffers__Vector_int___size_28_29_20const(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function signed_20char_20const__20std____2__min_signed_20char_2c_20std____2____less_signed_20char_2c_20signed_20char__20__28signed_20char_20const__2c_20signed_20char_20const__2c_20std____2____less_signed_20char_2c_20signed_20char__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1 : {
  if (std____2____less_signed_20char_2c_20signed_20char___operator_28_29_28signed_20char_20const__2c_20signed_20char_20const__29_20const($2 + 8 | 0, HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function signed_20char_20const__20std____2__max_signed_20char_2c_20std____2____less_signed_20char_2c_20signed_20char__20__28signed_20char_20const__2c_20signed_20char_20const__2c_20std____2____less_signed_20char_2c_20signed_20char__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1 : {
  if (std____2____less_signed_20char_2c_20signed_20char___operator_28_29_28signed_20char_20const__2c_20signed_20char_20const__29_20const($2 + 8 | 0, HEAP32[$2 + 4 >> 2], HEAP32[$2 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function jsvNewArrayBufferFromString($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = jsvNewWithFlags(4);
 label$1 : {
  if (!HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  jsvSetFirstChild(HEAP32[$2 >> 2], jsvGetRef(jsvRef(HEAP32[$2 + 8 >> 2])) & 65535);
  HEAP16[HEAP32[$2 >> 2] + 4 >> 1] = 129;
  if (!HEAP32[$2 + 4 >> 2]) {
   HEAP32[$2 + 4 >> 2] = jsvGetStringLength(HEAP32[$2 + 8 >> 2]);
  }
  HEAP16[HEAP32[$2 >> 2] + 2 >> 1] = HEAP32[$2 + 4 >> 2];
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function wrapAround($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 HEAPF64[$2 + 16 >> 3] = $0;
 HEAPF64[$2 + 8 >> 3] = $1;
 label$1 : {
  if (HEAPF64[$2 + 8 >> 3] < 0) {
   HEAPF64[$2 + 24 >> 3] = 0;
   break label$1;
  }
  HEAPF64[$2 + 16 >> 3] = HEAPF64[$2 + 16 >> 3] / HEAPF64[$2 + 8 >> 3];
  $4 = $2;
  $1 = HEAPF64[$2 + 16 >> 3];
  $0 = HEAPF64[$2 + 16 >> 3];
  label$3 : {
   if (Math_abs($0) < 2147483648) {
    $3 = ~~$0;
    break label$3;
   }
   $3 = -2147483648;
  }
  HEAPF64[$4 + 16 >> 3] = $1 - +($3 | 0);
  HEAPF64[$2 + 24 >> 3] = HEAPF64[$2 + 16 >> 3] * HEAPF64[$2 + 8 >> 3];
 }
 return +HEAPF64[$2 + 24 >> 3];
}
function jspeParseFunctionCallBrackets() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 label$1 : {
  if (!(jslMatch(40) & 1)) {
   break label$1;
  }
  while (1) {
   if (HEAP32[23778] & 80 ? 0 : HEAP16[HEAP32[13768] + 2 >> 1] != 41) {
    jsvUnLock(__jspeAssignmentExpression(jspeConditionalExpression()));
    if (HEAP16[HEAP32[13768] + 2 >> 1] == 162) {
     jsvUnLock(jspeArrowFunction(0, 0));
    }
    if (HEAP16[HEAP32[13768] + 2 >> 1] != 41) {
     if (!(jslMatch(44) & 1)) {
      break label$1;
     }
    }
    continue;
   }
   break;
  }
  if (!(HEAP32[23778] & 80)) {
   jslMatch(41);
  }
 }
 HEAP8[$0 + 15 | 0] = 0;
 global$0 = $0 + 16 | 0;
}
function i2c_get_address($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP8[HEAP32[$2 + 4 >> 2]] = 1;
 label$1 : {
  if (jsvIsObject(HEAP32[$2 + 8 >> 2]) & 1) {
   HEAP32[$2 >> 2] = jsvObjectGetChild(HEAP32[$2 + 8 >> 2], 37327, 0);
   if (HEAP32[$2 >> 2]) {
    $0 = jsvGetBoolAndUnLock(HEAP32[$2 >> 2]);
    HEAP8[HEAP32[$2 + 4 >> 2]] = $0 & 1;
   }
   HEAP32[$2 + 12 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$2 + 8 >> 2], 37332, 0));
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvGetInteger(HEAP32[$2 + 8 >> 2]);
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function jswrap_date_setMonth($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 + -64 | 0;
 global$0 = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 HEAP32[$3 + 52 >> 2] = $2;
 getTimeFromDateVar($3 + 24 | 0, HEAP32[$3 + 60 >> 2], 0);
 getCalendarDate($3, HEAP32[$3 + 24 >> 2]);
 HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 56 >> 2];
 if (jsvIsNumeric(HEAP32[$3 + 52 >> 2]) & 1) {
  HEAP32[$3 + 4 >> 2] = jsvGetInteger(HEAP32[$3 + 52 >> 2]);
 }
 $0 = $3 + 24 | 0;
 HEAP32[$3 + 24 >> 2] = fromCalenderDate($3);
 $4 = jswrap_date_setTime(HEAP32[$3 + 60 >> 2], fromTimeInDay($0));
 global$0 = $3 - -64 | 0;
 return +$4;
}
function jsiChangeToHistory($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = $0;
 HEAP32[$1 + 8 >> 2] = jsiGetHistoryLine(HEAP8[$1 + 15 | 0] & 1);
 label$1 : {
  if (HEAP32[$1 + 8 >> 2]) {
   jsiReplaceInputLine(HEAP32[$1 + 8 >> 2]);
   jsvUnLock(HEAP32[$1 + 8 >> 2]);
   HEAP8[95149] = 1;
   break label$1;
  }
  if (!(HEAP8[$1 + 15 | 0] & 1)) {
   if (jsiShowInputLine() & 1) {
    jsiMoveCursorChar(HEAP32[23784], HEAP32[23786], 0);
    jsiConsolePrintString(5202);
   }
   jsiInputLineCursorMoved();
   jsvUnLock(HEAP32[23784]);
   HEAP32[23784] = jsvNewFromEmptyString();
   HEAP32[23786] = 0;
  }
 }
 global$0 = $1 + 16 | 0;
}
function gemmlowp__FixedPoint_int_2c_205__20gemmlowp__operator__int_2c_205__28gemmlowp__FixedPoint_int_2c_205__2c_20gemmlowp__FixedPoint_int_2c_205__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $3 = $2 + 8 | 0;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[jshFlashGetMemMapAddress($2 + 16 | 0) >> 2];
 $3 = HEAP32[jshFlashGetMemMapAddress($3) >> 2];
 $0 = global$0 - 16 | 0;
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$2 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(HEAP32[$0 + 12 >> 2] - HEAP32[$0 + 8 >> 2] | 0);
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}
function graphicsSetVar($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = jsvFindChildFromString(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 27636, 1);
 HEAP32[$1 + 4 >> 2] = jsvSkipName(HEAP32[$1 + 8 >> 2]);
 if (!HEAP32[$1 + 4 >> 2]) {
  HEAP32[$1 + 4 >> 2] = jsvNewStringOfLength(44, 0);
  jsvSetValueOfName(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]);
 }
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 jsvSetString(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 12 >> 2] + 4 | 0, 44);
 jsvUnLock(HEAP32[$1 + 4 >> 2]);
 global$0 = $1 + 16 | 0;
}
function _jswrap_error_constructor($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = jspNewObject(0, HEAP32[$2 + 4 >> 2]);
 label$1 : {
  if (!HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$2 + 8 >> 2]) {
   HEAP32[$2 + 8 >> 2] = jsvAsString(HEAP32[$2 + 8 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$2 >> 2], 31519, HEAP32[$2 + 8 >> 2]);
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 >> 2], 31527, jsvNewFromString(HEAP32[$2 + 4 >> 2]));
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_3__operator_28_29_28tflite__CombinerType_29_20const($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 4 >> 2];
 label$1 : {
  if ($0 >>> 0 <= 2) {
   label$3 : {
    switch ($0 - 1 | 0) {
    case 0:
     HEAP32[$2 + 12 >> 2] = 1;
     break label$1;
    case 1:
     HEAP32[$2 + 12 >> 2] = 2;
     break label$1;
    default:
     break label$3;
    }
   }
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 return HEAP32[$2 + 12 >> 2];
}
function tflite__GetTensorShape_28TfLiteTensor_20const__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1 : {
  if (!HEAP32[$2 + 24 >> 2]) {
   $1 = global$0 - 16 | 0;
   HEAP32[$1 + 12 >> 2] = $0;
   HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 8 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] >> 2];
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 20 >> 2] + 4;
  tflite__RuntimeShape__RuntimeShape_28int_2c_20int_20const__29($0, HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2]);
 }
 global$0 = $2 + 32 | 0;
}
function espruino_snprintf_va($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 >> 2] = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 24 >> 2];
 vcbprintf(10, $4, HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
 label$1 : {
  if (HEAPU32[$4 + 4 >> 2] < HEAPU32[$4 + 8 >> 2]) {
   HEAP8[HEAP32[$4 >> 2] + HEAP32[$4 + 4 >> 2] | 0] = 0;
   break label$1;
  }
  HEAP8[HEAP32[$4 >> 2] + (HEAP32[$4 + 8 >> 2] - 1 | 0) | 0] = 0;
 }
 global$0 = $4 + 32 | 0;
 return HEAP32[$4 + 4 >> 2];
}
function tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 label$1 : {
  if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]) | 0)) {
   break label$1;
  }
 }
 $0 = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2]);
 global$0 = $4 + 16 | 0;
 return $0;
}
function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $4 = $3 + 8 | 0;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29(HEAP32[$3 + 4 >> 2], HEAP32[jshFlashGetMemMapAddress($3 + 16 | 0) >> 2], HEAP32[jshFlashGetMemMapAddress($4) >> 2]));
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 24 >> 2];
}
function jsiExecuteEventCallbackName($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP8[$4 + 15 | 0] = 0;
 if (jsvHasChildren(HEAP32[$4 + 28 >> 2]) & 1) {
  HEAP32[$4 + 8 >> 2] = jsvObjectGetChild(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], 0);
  if (HEAP32[$4 + 8 >> 2]) {
   jsiExecuteEventCallback(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
   HEAP8[$4 + 15 | 0] = 1;
  }
  jsvUnLock(HEAP32[$4 + 8 >> 2]);
 }
 global$0 = $4 + 32 | 0;
 return HEAP8[$4 + 15 | 0] & 1;
}
function jshPopIOEvent($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (HEAPU8[95202] == HEAPU8[95203]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  $2 = Math_imul(HEAPU8[95203], 5) + 95792 | 0;
  $3 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
  HEAP8[$0 | 0] = $3;
  HEAP8[$0 + 1 | 0] = $3 >>> 8;
  HEAP8[$0 + 2 | 0] = $3 >>> 16;
  HEAP8[$0 + 3 | 0] = $3 >>> 24;
  HEAP8[$0 + 4 | 0] = HEAPU8[$2 + 4 | 0];
  HEAP8[95203] = HEAPU8[95203] + 1;
  HEAP8[$1 + 15 | 0] = 1;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}
function tflite__RuntimeShape__RuntimeShape_28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = 1;
 $0 = HEAP32[$2 + 24 >> 2];
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$0 >> 2] = 0;
 tflite__RuntimeShape__Resize_28int_29($0, HEAP32[$2 + 20 >> 2]);
 HEAP32[$2 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 12 >> 2] < HEAP32[$2 + 20 >> 2]) {
   tflite__RuntimeShape__SetDim_28int_2c_20int_29($0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $2 + 32 | 0;
}
function jsvArrayBufferIteratorGetFloatValue($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 20 >> 2] = $0;
 label$1 : {
  if (!HEAPU16[HEAP32[$1 + 20 >> 2] + 20 >> 1]) {
   HEAPF64[$1 + 24 >> 3] = 0;
   break label$1;
  }
  jsvArrayBufferIteratorGetValueData(HEAP32[$1 + 20 >> 2], $1 + 12 | 0);
  if (HEAPU16[HEAP32[$1 + 20 >> 2] + 20 >> 1] & 32) {
   HEAPF64[$1 + 24 >> 3] = jsvArrayBufferIteratorDataToFloat(HEAP32[$1 + 20 >> 2], $1 + 12 | 0);
   break label$1;
  }
  HEAPF64[$1 + 24 >> 3] = jsvArrayBufferIteratorDataToInt(HEAP32[$1 + 20 >> 2], $1 + 12 | 0) | 0;
 }
 global$0 = $1 + 32 | 0;
 return HEAPF64[$1 + 24 >> 3];
}
function jsvObjectSetChildVar($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1 : {
  if (!(jsvHasChildren(HEAP32[$3 + 24 >> 2]) & 1)) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvFindChildFromVar(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], 1);
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  jsvSetValueOfName(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2]);
  jsvUnLock(HEAP32[$3 + 12 >> 2]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 16 >> 2];
 }
 global$0 = $3 + 32 | 0;
}
function graphicsFillRect($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0;
 $6 = global$0 - 32 | 0;
 global$0 = $6;
 $7 = $6 + 16 | 0;
 $8 = $6 + 12 | 0;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 graphicsToDeviceCoordinates(HEAP32[$6 + 28 >> 2], $6 + 24 | 0, $6 + 20 | 0);
 graphicsToDeviceCoordinates(HEAP32[$6 + 28 >> 2], $7, $8);
 graphicsFillRectDevice(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], HEAP32[$6 + 8 >> 2]);
 global$0 = $6 + 32 | 0;
}
function float_20flatbuffers__Table__GetField_float__28unsigned_20short_2c_20float_29_20const($0, $1) {
 var $2 = 0, $3 = Math_fround(0);
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 HEAPF32[$2 + 4 >> 2] = 0;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 2 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 label$1 : {
  if (HEAPU16[$2 + 2 >> 1]) {
   $3 = float_20flatbuffers__ReadScalar_float__28void_20const__29($0 + HEAPU16[$2 + 2 >> 1] | 0);
   break label$1;
  }
  $3 = HEAPF32[$2 + 4 >> 2];
 }
 global$0 = $2 + 16 | 0;
 return $3;
}
function jswrap_banglejs_setPollInterval($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAPF64[$1 + 24 >> 3] = $0;
 $2 = __DOUBLE_BITS(HEAPF64[$1 + 24 >> 3]);
 $3 = i64toi32_i32$HIGH_BITS & 2147483647;
 label$1 : {
  if (!(HEAPF64[$1 + 24 >> 3] > 5e3 ? 0 : !(($3 | 0) == 2146435072 & $2 >>> 0 >= 0 | $3 >>> 0 > 2146435072 | HEAPF64[$1 + 24 >> 3] < 10))) {
   jsExceptionHere(1, 28138, 0);
   break label$1;
  }
  $0 = HEAPF64[$1 + 24 >> 3];
  label$5 : {
   if ($0 < 4294967296 & $0 >= 0) {
    $2 = ~~$0 >>> 0;
    break label$5;
   }
   $2 = 0;
  }
  HEAP16[125643] = $2;
 }
 global$0 = $1 + 32 | 0;
}
function jsvMoreFreeVariablesThan() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 8 >> 2] = 125;
 label$1 : {
  if (!HEAP32[$0 + 8 >> 2]) {
   HEAP8[$0 + 15 | 0] = 0;
   break label$1;
  }
  HEAP16[$0 + 6 >> 1] = HEAPU16[27542];
  while (1) {
   if (HEAPU16[$0 + 6 >> 1]) {
    $1 = HEAP32[$0 + 8 >> 2];
    HEAP32[$0 + 8 >> 2] = $1 + -1;
    if (!$1) {
     HEAP8[$0 + 15 | 0] = 1;
     break label$1;
    }
    HEAP16[$0 + 6 >> 1] = jsvGetNextSibling(jsvGetAddressOf(HEAPU16[$0 + 6 >> 1]));
    continue;
   }
   break;
  }
  HEAP8[$0 + 15 | 0] = 0;
 }
 global$0 = $0 + 16 | 0;
 return HEAP8[$0 + 15 | 0] & 1;
}
function jsserialCheckForCharacter($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAPU8[HEAP32[$1 + 12 >> 2] + 88 | 0] >= HEAPU8[HEAP32[$1 + 12 >> 2] + 89 | 0]) {
  HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 84 >> 2] >>> 1 & 255;
  if (HEAPU8[HEAP32[$1 + 12 >> 2] + 64 | 0] < 64) {
   $3 = HEAP32[$1 + 8 >> 2];
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = HEAPU8[$0 + 64 | 0];
   HEAP8[$0 + 64 | 0] = $2 + 1;
   HEAP8[$0 + $2 | 0] = $3;
   jshHasEvents();
  }
  HEAP8[HEAP32[$1 + 12 >> 2] + 88 | 0] = 0;
  HEAP32[HEAP32[$1 + 12 >> 2] + 84 >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
}
function jslInit($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvLockAgain(HEAP32[$1 + 12 >> 2]);
 HEAP32[HEAP32[13768] + 104 >> 2] = $0;
 HEAP16[HEAP32[13768] + 2 >> 1] = 0;
 HEAP32[HEAP32[13768] + 16 >> 2] = 0;
 HEAP8[HEAP32[13768] + 24 | 0] = 0;
 HEAP32[HEAP32[13768] + 28 >> 2] = 0;
 HEAP8[HEAP32[13768] + 100 | 0] = 0;
 HEAP32[HEAP32[13768] + 96 >> 2] = 0;
 HEAP16[HEAP32[13768] + 102 >> 1] = 0;
 jsvStringIteratorNew(HEAP32[13768] + 108 | 0, HEAP32[HEAP32[13768] + 104 >> 2], 0);
 jsvUnLock(HEAP32[HEAP32[13768] + 120 >> 2]);
 jslGetNextCh();
 jslGetNextToken();
 global$0 = $1 + 16 | 0;
}
function unsigned_20int_20flatbuffers__Table__GetField_unsigned_20int__28unsigned_20short_2c_20unsigned_20int_29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP16[$3 + 10 >> 1] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP16[$3 + 2 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$3 + 10 >> 1]);
 label$1 : {
  if (HEAPU16[$3 + 2 >> 1]) {
   $0 = flatbuffers__Vector_int___size_28_29_20const($0 + HEAPU16[$3 + 2 >> 1] | 0);
   break label$1;
  }
  $0 = HEAP32[$3 + 4 >> 2];
 }
 global$0 = $3 + 16 | 0;
 return $0;
}
function tflite__CalculateActivationRangeInt8_28TfLiteFusedActivation_2c_20TfLiteTensor__2c_20int__2c_20int__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = -128;
 HEAP32[$4 + 8 >> 2] = 127;
 tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29(HEAP32[$4 + 28 >> 2], -128, 127, HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
 global$0 = $4 + 32 | 0;
}
function st_yield_br_length($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1 : {
  if (can_take_byte(HEAP32[$2 + 4 >> 2])) {
   if ((push_outgoing_bits(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]) & 255) > 0) {
    HEAP32[$2 + 12 >> 2] = 6;
    break label$1;
   }
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP16[$0 + 2 >> 1] = HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1] + HEAPU16[$0 + 2 >> 1];
   HEAP16[HEAP32[$2 + 8 >> 2] + 4 >> 1] = 0;
   HEAP32[$2 + 12 >> 2] = 2;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 6;
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function jswrap_array_shift($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = jsvNewFromInteger(1);
 HEAP32[$1 + 20 >> 2] = jsvNewWithFlags(3);
 HEAP32[$1 + 16 >> 2] = jswrap_array_splice(HEAP32[$1 + 28 >> 2], 0, HEAP32[$1 + 24 >> 2], HEAP32[$1 + 20 >> 2]);
 jsvUnLock2(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 24 >> 2]);
 HEAP32[$1 + 12 >> 2] = 0;
 if (jsvIsArray(HEAP32[$1 + 16 >> 2]) & 1) {
  HEAP32[$1 + 12 >> 2] = jsvSkipNameAndUnLock(jsvArrayPop(HEAP32[$1 + 16 >> 2]));
 }
 jsvUnLock(HEAP32[$1 + 16 >> 2]);
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function heatshrink_decoder_reset($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 256;
 HEAP32[$1 + 4 >> 2] = 32;
 memset(HEAP32[$1 + 12 >> 2] + 13 | 0, 0, HEAP32[$1 + 8 >> 2] + HEAP32[$1 + 4 >> 2] | 0);
 HEAP8[HEAP32[$1 + 12 >> 2] + 10 | 0] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] >> 1] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 2 >> 1] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 12 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 11 | 0] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 4 >> 1] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 6 >> 1] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 8 >> 1] = 0;
 global$0 = $1 + 16 | 0;
}
function tflite__CalculateActivationRangeUint8_28TfLiteFusedActivation_2c_20TfLiteTensor__2c_20int__2c_20int__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 255;
 tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29(HEAP32[$4 + 28 >> 2], 0, 255, HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
 global$0 = $4 + 32 | 0;
}
function jswrap_btoa_encode($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] & 63;
 label$1 : {
  if (HEAP32[$1 + 8 >> 2] < 26) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] + 65;
   break label$1;
  }
  if (HEAP32[$1 + 8 >> 2] < 52) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] + 71;
   break label$1;
  }
  if (HEAP32[$1 + 8 >> 2] < 62) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] + -4;
   break label$1;
  }
  if (HEAP32[$1 + 8 >> 2] == 62) {
   HEAP32[$1 + 12 >> 2] = 43;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 47;
 }
 return HEAP32[$1 + 12 >> 2];
}
function jsiHandlePageUpDown($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP8[$1 + 31 | 0] = $0;
 jsvGetLineAndCol(HEAP32[23784], HEAP32[23786], $1 + 20 | 0, $1 + 24 | 0);
 label$1 : {
  if (!(HEAP8[$1 + 31 | 0] & 1)) {
   HEAP32[23786] = 0;
   break label$1;
  }
  HEAP32[23786] = jsvGetStringLength(HEAP32[23784]);
 }
 HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 24 >> 2];
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 20 >> 2];
 jsvGetLineAndCol(HEAP32[23784], HEAP32[23786], $1 + 12 | 0, $1 + 16 | 0);
 jsiMoveCursor(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2], HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 32 | 0;
}
function jspeSkipBlock() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 1;
 while (1) {
  label$2 : {
   if (!(HEAP16[HEAP32[13768] + 2 >> 1] ? HEAP32[$0 + 12 >> 2] != 0 : 0)) {
    break label$2;
   }
   label$5 : {
    if (HEAP16[HEAP32[13768] + 2 >> 1] == 123) {
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
     break label$5;
    }
    if (HEAP16[HEAP32[13768] + 2 >> 1] == 125) {
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + -1;
     if (!HEAP32[$0 + 12 >> 2]) {
      break label$2;
     }
    }
   }
   jslGetNextToken();
   continue;
  }
  break;
 }
 global$0 = $0 + 16 | 0;
}
function jslIsToken($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = 1;
 HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
 label$1 : {
  while (1) {
   if (HEAP32[$1 >> 2] < HEAPU8[HEAP32[13768] + 100 | 0]) {
    if (HEAP8[HEAP32[$1 >> 2] + (HEAP32[13768] + 32 | 0) | 0] != HEAP8[HEAP32[$1 + 8 >> 2] + HEAP32[$1 >> 2] | 0]) {
     HEAP8[$1 + 15 | 0] = 0;
     break label$1;
    } else {
     HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  HEAP8[$1 + 15 | 0] = !HEAP8[HEAP32[$1 + 8 >> 2] + HEAPU8[HEAP32[13768] + 100 | 0] | 0];
 }
 return HEAP8[$1 + 15 | 0] & 1;
}
function jshPushIOCharEvent($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 label$1 : {
  if (jshPushIOCharEventHandler(HEAPU8[$2 + 15 | 0], HEAP8[$2 + 14 | 0]) & 1) {
   break label$1;
  }
  if (jshPushIOCharEventAppend(HEAPU8[$2 + 15 | 0], HEAP8[$2 + 14 | 0]) & 1) {
   break label$1;
  }
  HEAP8[$2 + 8 | 0] = HEAPU8[$2 + 15 | 0];
  HEAP8[$2 + 8 | 0] = HEAPU8[$2 + 8 | 0] & 159;
  HEAP8[$2 + 9 | 0] = HEAPU8[$2 + 14 | 0];
  jshPushEvent($2 + 8 | 0);
  jshPushIOCharEventFlowControl(HEAPU8[$2 + 15 | 0]);
 }
 global$0 = $2 + 16 | 0;
}
function jsvArrayPush($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = jsvGetArrayLength(HEAP32[$2 + 24 >> 2]);
 HEAP32[$2 + 12 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(HEAP32[$2 + 16 >> 2]), HEAP32[$2 + 20 >> 2]);
 label$1 : {
  if (!HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  jsvAddName(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 12 >> 2]);
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  HEAP32[$2 + 28 >> 2] = jsvGetArrayLength(HEAP32[$2 + 24 >> 2]);
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function gemmlowp__FixedPoint_int_2c_20_280_29_20__20_280_29__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $3 = $2 + 24 | 0;
 $4 = $2 + 8 | 0;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20gemmlowp__SaturatingRoundingDoublingHighMul_int__28int_2c_20int_29(HEAP32[jshFlashGetMemMapAddress($2 + 16 | 0) >> 2], HEAP32[jshFlashGetMemMapAddress($4) >> 2]);
 HEAP32[jshFlashGetMemMapAddress($3) >> 2] = $0;
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}
function heatshrink_encoder_reset($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 512;
 memset(HEAP32[$1 + 12 >> 2] + 15 | 0, 0, HEAP32[$1 + 8 >> 2]);
 HEAP16[HEAP32[$1 + 12 >> 2] >> 1] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 12 | 0] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 2 >> 1] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 11 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 14 | 0] = 128;
 HEAP8[HEAP32[$1 + 12 >> 2] + 13 | 0] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 4 >> 1] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 8 >> 1] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 10 | 0] = 0;
 global$0 = $1 + 16 | 0;
}
function espruino_snprintf_cb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 while (1) {
  if (HEAPU8[HEAP32[$2 + 12 >> 2]]) {
   if (HEAPU32[HEAP32[$2 + 4 >> 2] + 4 >> 2] < HEAPU32[HEAP32[$2 + 4 >> 2] + 8 >> 2]) {
    HEAP8[HEAP32[HEAP32[$2 + 4 >> 2] >> 2] + HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2] | 0] = HEAPU8[HEAP32[$2 + 12 >> 2]];
   }
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
}
function tflite__ops__micro__ActivationValFloat_28TfLiteFusedActivation_2c_20float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAPF32[$2 + 4 >> 2] = $1;
 label$1 : {
  $0 = HEAP32[$2 + 8 >> 2];
  if ($0 >>> 0 <= 1) {
   if ($0 - 1) {
    HEAPF32[$2 + 12 >> 2] = HEAPF32[$2 + 4 >> 2];
    break label$1;
   }
   $0 = $2;
   if (HEAPF32[$2 + 4 >> 2] < Math_fround(0)) {
    $1 = Math_fround(0);
   } else {
    $1 = HEAPF32[$2 + 4 >> 2];
   }
   HEAPF32[$0 + 12 >> 2] = $1;
   break label$1;
  }
  exit(1);
  abort();
 }
 global$0 = $2 + 16 | 0;
 return HEAPF32[$2 + 12 >> 2];
}
function tflite__SubscriptToIndex_28tflite__NdArrayDesc_4__20const__2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 32 | 0;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 return ((Math_imul(HEAP32[$5 + 24 >> 2], HEAP32[HEAP32[$5 + 28 >> 2] + 16 >> 2]) + Math_imul(HEAP32[$5 + 20 >> 2], HEAP32[HEAP32[$5 + 28 >> 2] + 20 >> 2]) | 0) + Math_imul(HEAP32[$5 + 16 >> 2], HEAP32[HEAP32[$5 + 28 >> 2] + 24 >> 2]) | 0) + Math_imul(HEAP32[$5 + 12 >> 2], HEAP32[HEAP32[$5 + 28 >> 2] + 28 >> 2]) | 0;
}
function jsvIteratorFree($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[HEAP32[$1 + 12 >> 2] >> 2] + -1 | 0;
 label$1 : {
  if ($0 >>> 0 > 3) {
   break label$1;
  }
  label$2 : {
   switch ($0 - 1 | 0) {
   case 2:
    jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2]);
   case 0:
    jsvObjectIteratorFree(HEAP32[$1 + 12 >> 2] + 4 | 0);
    break label$1;
   default:
    jsvStringIteratorFree(HEAP32[$1 + 12 >> 2] + 4 | 0);
    break label$1;
   case 1:
    break label$2;
   }
  }
  jsvArrayBufferIteratorFree(HEAP32[$1 + 12 >> 2] + 4 | 0);
 }
 global$0 = $1 + 16 | 0;
}
function jsvGetNativeFunctionPtr($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jsvFindChildFromString(HEAP32[$1 + 8 >> 2], 2524, 0);
 label$1 : {
  if (HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 4 >> 2] = jsvSkipNameAndUnLock(HEAP32[$1 + 4 >> 2]);
   HEAP32[$1 >> 2] = HEAP32[HEAP32[$1 + 8 >> 2] >> 2] + jsvGetFlatStringPointer(HEAP32[$1 + 4 >> 2]);
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 8 >> 2] >> 2];
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jslPrintPosition($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = 4;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 jsvGetLineAndCol(HEAP32[HEAP32[13768] + 104 >> 2], HEAP32[$2 + 20 >> 2], $2 + 16 | 0, $2 + 12 | 0);
 if (HEAPU16[HEAP32[13768] + 102 >> 1]) {
  HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] + (HEAPU16[HEAP32[13768] + 102 >> 1] - 1 | 0);
 }
 $0 = HEAP32[$2 + 28 >> 2];
 $1 = HEAP32[$2 + 24 >> 2];
 $3 = HEAP32[$2 + 16 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 >> 2] = $3;
 cbprintf($0, $1, 1846, $2);
 global$0 = $2 + 32 | 0;
}
function fputc($0) {
 var $1 = 0;
 if (HEAP32[$0 + 76 >> 2] < 0) {
  label$2 : {
   if (HEAP8[$0 + 75 | 0] == 10) {
    break label$2;
   }
   $1 = HEAP32[$0 + 20 >> 2];
   if ($1 >>> 0 >= HEAPU32[$0 + 16 >> 2]) {
    break label$2;
   }
   HEAP32[$0 + 20 >> 2] = $1 + 1;
   HEAP8[$1 | 0] = 10;
   return;
  }
  __overflow($0);
  return;
 }
 label$3 : {
  label$4 : {
   if (HEAP8[$0 + 75 | 0] == 10) {
    break label$4;
   }
   $1 = HEAP32[$0 + 20 >> 2];
   if ($1 >>> 0 >= HEAPU32[$0 + 16 >> 2]) {
    break label$4;
   }
   HEAP32[$0 + 20 >> 2] = $1 + 1;
   HEAP8[$1 | 0] = 10;
   break label$3;
  }
  __overflow($0);
 }
}
function tflite__QuantizeMultiplierSmallerThanOneExp_28double_2c_20int__2c_20int__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAPF64[$3 + 24 >> 3] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 if (!(HEAPF64[$3 + 24 >> 3] < 1)) {
  abort();
  abort();
 }
 if (!(HEAPF64[$3 + 24 >> 3] > 0)) {
  abort();
  abort();
 }
 tflite__QuantizeMultiplier_28double_2c_20int__2c_20int__29(HEAPF64[$3 + 24 >> 3], HEAP32[$3 + 20 >> 2], $3 + 12 | 0);
 if (HEAP32[$3 + 12 >> 2] > 0) {
  abort();
  abort();
 }
 HEAP32[HEAP32[$3 + 16 >> 2] >> 2] = HEAP32[$3 + 12 >> 2];
 global$0 = $3 + 32 | 0;
}
function jsfGetFileHeader($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP8[$3 + 3 | 0] = $2;
 label$1 : {
  if (!HEAP32[$3 + 8 >> 2]) {
   HEAP8[$3 + 15 | 0] = 0;
   break label$1;
  }
  jshFlashRead(HEAP32[$3 + 4 >> 2], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 3 | 0] & 1 ? 32 : 8);
  $0 = $3;
  if (HEAP32[HEAP32[$3 + 4 >> 2] >> 2] != -1) {
   $1 = (HEAP32[$3 + 8 >> 2] + 32 | 0) + jsfGetFileSize(HEAP32[$3 + 4 >> 2]) >>> 0 < 134479872;
  } else {
   $1 = 0;
  }
  HEAP8[$0 + 15 | 0] = $1;
 }
 global$0 = $3 + 16 | 0;
 return HEAP8[$3 + 15 | 0] & 1;
}
function jsvReplaceWithOrAddToRoot($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 label$1 : {
  if (jsvGetRefs(HEAP32[$2 + 12 >> 2]) & 65535) {
   break label$1;
  }
  if (!(jsvIsName(HEAP32[$2 + 12 >> 2]) & 1)) {
   break label$1;
  }
  label$2 : {
   if (jsvIsArrayBufferName(HEAP32[$2 + 12 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsNewChild(HEAP32[$2 + 12 >> 2]) & 1) {
    break label$2;
   }
   jsvAddName(HEAP32[23774], HEAP32[$2 + 12 >> 2]);
  }
 }
 jsvReplaceWith(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
}
function frexp($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 wasm2js_scratch_store_f64(+$0);
 $2 = wasm2js_scratch_load_i32(1) | 0;
 $3 = wasm2js_scratch_load_i32(0) | 0;
 $4 = $2;
 $2 = $2 >>> 20 & 2047;
 if (($2 | 0) != 2047) {
  if (!$2) {
   $2 = $1;
   if ($0 == 0) {
    $1 = 0;
   } else {
    $0 = frexp($0 * 0x10000000000000000, $1);
    $1 = HEAP32[$1 >> 2] + -64 | 0;
   }
   HEAP32[$2 >> 2] = $1;
   return $0;
  }
  HEAP32[$1 >> 2] = $2 + -1022;
  $1 = $4 & -2146435073 | 1071644672;
  wasm2js_scratch_store_i32(0, $3 | 0);
  wasm2js_scratch_store_i32(1, $1 | 0);
  $0 = +wasm2js_scratch_load_f64();
 }
 return $0;
}
function jswrap_banglejs_setLCDTimeout($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAPF64[$1 + 24 >> 3] = $0;
 $2 = __DOUBLE_BITS(HEAPF64[$1 + 24 >> 3]);
 $3 = i64toi32_i32$HIGH_BITS & 2147483647;
 label$1 : {
  if (($3 | 0) == 2146435072 & $2 >>> 0 >= 0 | $3 >>> 0 > 2146435072) {
   HEAP32[62813] = 0;
   break label$1;
  }
  $0 = HEAPF64[$1 + 24 >> 3] * 1e3;
  label$3 : {
   if (Math_abs($0) < 2147483648) {
    $2 = ~~$0;
    break label$3;
   }
   $2 = -2147483648;
  }
  HEAP32[62813] = $2;
 }
 if (HEAP32[62813] < 0) {
  HEAP32[62813] = 0;
 }
 global$0 = $1 + 32 | 0;
}
function jsvSetArrayItem($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = jsvGetArrayIndex(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
 label$1 : {
  if (HEAP32[$3 >> 2]) {
   jsvSetValueOfName(HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2]);
   break label$1;
  }
  HEAP32[$3 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(HEAP32[$3 + 8 >> 2]), HEAP32[$3 + 4 >> 2]);
  if (HEAP32[$3 >> 2]) {
   jsvAddName(HEAP32[$3 + 12 >> 2], HEAP32[$3 >> 2]);
  }
 }
 jsvUnLock(HEAP32[$3 >> 2]);
 global$0 = $3 + 16 | 0;
}
function jsvExecuteSetter($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1 : {
  if (!(jsvIsGetterOrSetter(HEAP32[$3 + 8 >> 2]) & 1)) {
   break label$1;
  }
  HEAP32[$3 >> 2] = jsvObjectGetChild(HEAP32[$3 + 8 >> 2], 2771, 0);
  if (!(jsvIsFunction(HEAP32[$3 >> 2]) & 1)) {
   jsvUnLock(HEAP32[$3 >> 2]);
   break label$1;
  }
  if (!HEAP32[$3 >> 2]) {
   break label$1;
  }
  jsvUnLock2(jspExecuteFunction(HEAP32[$3 >> 2], HEAP32[$3 + 12 >> 2], 1, $3 + 4 | 0), HEAP32[$3 >> 2]);
 }
 global$0 = $3 + 16 | 0;
}
function jsvVarPrintf($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = jsvNewFromEmptyString();
 label$1 : {
  if (!HEAP32[$2 + 36 >> 2]) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  $3 = $2 + 12 | 0;
  $0 = $2 + 16 | 0;
  jsvStringIteratorNew($0, HEAP32[$2 + 36 >> 2], 0);
  jsvStringIteratorGotoEnd($0);
  HEAP32[$3 >> 2] = $1;
  vcbprintf(4, $0, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 12 >> 2]);
  jsvStringIteratorFree($0);
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 36 >> 2];
 }
 global$0 = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}
function jshUSARTInitInfo($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 | 0] = 9600;
 HEAP8[$0 + 1 | 0] = 37;
 HEAP8[$0 + 2 | 0] = 0;
 HEAP8[$0 + 3 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 4 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 5 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 6 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 7 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 8 | 0] = 8;
 HEAP8[HEAP32[$1 + 12 >> 2] + 9 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 10 | 0] = 1;
 HEAP8[HEAP32[$1 + 12 >> 2] + 11 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 12 | 0] = 0;
}
function tflite__RuntimeShape__SetDim_28int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 label$1 : {
  if (HEAP32[$3 + 8 >> 2] < 0) {
   break label$1;
  }
 }
 label$2 : {
  if (HEAP32[$3 + 8 >> 2] >= HEAP32[$0 >> 2]) {
   break label$2;
  }
 }
 label$3 : {
  if (HEAP32[$0 >> 2] > 4) {
   HEAP32[HEAP32[$0 + 4 >> 2] + (HEAP32[$3 + 8 >> 2] << 2) >> 2] = HEAP32[$3 + 4 >> 2];
   break label$3;
  }
  HEAP32[($0 + 4 | 0) + (HEAP32[$3 + 8 >> 2] << 2) >> 2] = HEAP32[$3 + 4 >> 2];
 }
}
function int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
 $2 = int_20gemmlowp__BitAnd_int__28int_2c_20int_29(int_20gemmlowp__BitNot_int__28int_29(HEAP32[$3 + 12 >> 2]), HEAP32[$3 + 4 >> 2]);
 $0 = global$0 - 16 | 0;
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $2;
 global$0 = $3 + 16 | 0;
 return HEAP32[$0 + 12 >> 2] ^ HEAP32[$0 + 8 >> 2];
}
function jswrap_banglejs_dbg() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 8 >> 2] = jsvNewWithFlags(5);
 label$1 : {
  if (!HEAP32[$0 + 8 >> 2]) {
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], 28936, jsvNewFromInteger(HEAPU8[251777]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], 28950, jsvNewFromInteger(HEAPU8[252034]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], 28966, jsvNewFromInteger(HEAPU8[252035]));
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
 }
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function jsvAsName($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  if (!(jsvGetRefs(HEAP32[$1 + 8 >> 2]) & 65535)) {
   if (!(jsvIsName(HEAP32[$1 + 8 >> 2]) & 1)) {
    HEAP32[$1 + 8 >> 2] = jsvMakeIntoVariableName(HEAP32[$1 + 8 >> 2], 0);
   }
   HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvMakeIntoVariableName(jsvCopy(HEAP32[$1 + 8 >> 2], 0), 0);
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jshSPIInitInfo($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 | 0] = 1e5;
 HEAP8[$0 + 1 | 0] = 390;
 HEAP8[$0 + 2 | 0] = 1;
 HEAP8[$0 + 3 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 4 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 5 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 6 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 7 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 8 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 9 | 0] = 1;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 10 | 0] = 8;
 HEAP8[$0 + 11 | 0] = 0;
 HEAP8[$0 + 12 | 0] = 0;
 HEAP8[$0 + 13 | 0] = 0;
}
function tflite__ops__micro__activations__Softmax1DFloat_28TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteSoftmaxParams__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = HEAP32[HEAP32[HEAP32[$3 + 12 >> 2] + 8 >> 2] + 4 >> 2];
 tflite__reference_ops__Softmax_28float_20const__2c_20int_2c_20int_2c_20float_2c_20float__29(HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2], HEAP32[$3 >> 2], 1, HEAPF32[HEAP32[$3 + 4 >> 2] >> 2], HEAP32[HEAP32[$3 + 8 >> 2] + 4 >> 2]);
 global$0 = $3 + 16 | 0;
}
function st_yield_br_index($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1 : {
  if (can_take_byte(HEAP32[$2 + 4 >> 2])) {
   if ((push_outgoing_bits(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]) & 255) > 0) {
    HEAP32[$2 + 12 >> 2] = 5;
    break label$1;
   }
   HEAP16[HEAP32[$2 + 8 >> 2] + 8 >> 1] = HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1] - 1;
   HEAP8[HEAP32[$2 + 8 >> 2] + 10 | 0] = 6;
   HEAP32[$2 + 12 >> 2] = 6;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 5;
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function jswGetBuiltInLibrary($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!strcmp(HEAP32[$1 + 8 >> 2], 17337)) {
   HEAP32[$1 + 12 >> 2] = 42;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 17343)) {
   HEAP32[$1 + 12 >> 2] = 50;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 17351)) {
   HEAP32[$1 + 12 >> 2] = 52;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 17362)) {
   HEAP32[$1 + 12 >> 2] = 54;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function tflite__strided_slice__Clamp_28int_2c_20int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 label$1 : {
  if (HEAP32[$3 >> 2] < HEAP32[$3 + 4 >> 2]) {
   break label$1;
  }
 }
 label$2 : {
  if (HEAP32[$3 >> 2] < HEAP32[$3 + 8 >> 2]) {
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 >> 2];
   break label$2;
  }
  if (HEAP32[$3 + 8 >> 2] < HEAP32[$3 + 4 >> 2]) {
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 4 >> 2];
   break label$2;
  }
  HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 8 >> 2];
 }
 return HEAP32[$3 + 12 >> 2];
}
function tflite__SymmetricDequantize_28signed_20char_20const__2c_20int_2c_20float_2c_20float__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAPF32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 12 >> 2] < HEAP32[$4 + 24 >> 2]) {
   HEAPF32[HEAP32[$4 + 16 >> 2] + (HEAP32[$4 + 12 >> 2] << 2) >> 2] = Math_fround(HEAP8[HEAP32[$4 + 28 >> 2] + HEAP32[$4 + 12 >> 2] | 0]) * HEAPF32[$4 + 20 >> 2];
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
}
function jspeFactorTypeOf() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 jslGetNextToken();
 HEAP32[$0 + 12 >> 2] = jspeUnaryExpression();
 HEAP32[$0 + 8 >> 2] = 0;
 if ((HEAP32[23778] & 63) == 1) {
  label$2 : {
   if (!(jsvIsVariableDefined(HEAP32[$0 + 12 >> 2]) & 1)) {
    HEAP32[$0 + 8 >> 2] = jsvNewFromString(4374);
    break label$2;
   }
   HEAP32[$0 + 12 >> 2] = jsvSkipNameAndUnLock(HEAP32[$0 + 12 >> 2]);
   HEAP32[$0 + 8 >> 2] = jsvNewFromString(jsvGetTypeOf(HEAP32[$0 + 12 >> 2]));
  }
 }
 jsvUnLock(HEAP32[$0 + 12 >> 2]);
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 8 >> 2];
}
function jswrap_array_indexOf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = jsvGetIndexOfFull(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], 0, 1, HEAP32[$3 + 16 >> 2]);
 label$1 : {
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = jsvNewFromInteger(-1);
   break label$1;
  }
  HEAP32[$3 + 28 >> 2] = jsvNewFromInteger(jsvGetIntegerAndUnLock(HEAP32[$3 + 12 >> 2]));
 }
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function jsvStringIteratorGoto($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1 : {
  if (HEAPU32[$3 + 4 >> 2] >= HEAPU32[HEAP32[$3 + 12 >> 2] + 8 >> 2]) {
   HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = HEAP32[$3 + 4 >> 2] - HEAP32[HEAP32[$3 + 12 >> 2] + 8 >> 2];
   jsvStringIteratorCatchUp(HEAP32[$3 + 12 >> 2]);
   break label$1;
  }
  jsvStringIteratorFree(HEAP32[$3 + 12 >> 2]);
  jsvStringIteratorNew(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 }
 global$0 = $3 + 16 | 0;
}
function jsiAtEndOfInputLine() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 8 >> 2] = HEAP32[23786];
 HEAP32[$0 + 4 >> 2] = jsvGetStringLength(HEAP32[23784]);
 label$1 : {
  while (1) {
   if (HEAPU32[$0 + 8 >> 2] < HEAPU32[$0 + 4 >> 2]) {
    if (isWhitespace(jsvGetCharInString(HEAP32[23784], HEAP32[$0 + 8 >> 2]) << 24 >> 24) & 1) {
     HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
     continue;
    } else {
     HEAP8[$0 + 15 | 0] = 0;
     break label$1;
    }
   }
   break;
  }
  HEAP8[$0 + 15 | 0] = 1;
 }
 global$0 = $0 + 16 | 0;
 return HEAP8[$0 + 15 | 0] & 1;
}
function jswrap_espruino_toUint8Array($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 HEAP32[$1 + 52 >> 2] = jsvNewTypedArray(1, jsvIterateCallbackCount(HEAP32[$1 + 56 >> 2]));
 label$1 : {
  if (!HEAP32[$1 + 52 >> 2]) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  $0 = $1 + 8 | 0;
  jsvArrayBufferIteratorNew($0, HEAP32[$1 + 52 >> 2], 0);
  jsvIterateCallback(HEAP32[$1 + 56 >> 2], 512, $0);
  jsvArrayBufferIteratorFree($0);
  HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 52 >> 2];
 }
 global$0 = $1 - -64 | 0;
 return HEAP32[$1 + 60 >> 2];
}
function jsvArrayBufferIteratorIntToData($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 if (HEAP32[$4 + 4 >> 2] & 64) {
  if (HEAP32[$4 >> 2] < 0) {
   HEAP32[$4 >> 2] = 0;
  }
  if (HEAP32[$4 >> 2] > 255) {
   HEAP32[$4 >> 2] = 255;
  }
 }
 label$4 : {
  if (HEAP32[$4 + 8 >> 2] == 8) {
   $0 = HEAP32[$4 + 12 >> 2];
   $1 = HEAP32[$4 >> 2];
   HEAP32[$0 >> 2] = $1;
   HEAP32[$0 + 4 >> 2] = $1 >> 31;
   break label$4;
  }
  HEAP32[HEAP32[$4 + 12 >> 2] >> 2] = HEAP32[$4 >> 2];
 }
}
function jswrap_waveform_stop($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jsvGetBoolAndUnLock(jsvObjectGetChild(HEAP32[$1 + 12 >> 2], 37459, 0)) & 1;
 label$1 : {
  if (!(HEAP8[$1 + 11 | 0] & 1)) {
   jsExceptionHere(1, 37681, 0);
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = jswrap_waveform_getBuffer(HEAP32[$1 + 12 >> 2], 0, 0);
  if (!(jstStopBufferTimerTask(HEAP32[$1 + 4 >> 2]) & 1)) {
   jsExceptionHere(1, 37516, 0);
  }
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  jswrap_waveform_idle();
 }
 global$0 = $1 + 16 | 0;
}
function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__AddSaturatingIf16Bit_int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $3 = $2 + 8 | 0;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(int_20gemmlowp__AddSaturatingIf16Bit_int__28int_2c_20int_29(HEAP32[jshFlashGetMemMapAddress($2 + 16 | 0) >> 2], HEAP32[jshFlashGetMemMapAddress($3) >> 2]));
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}
function jsvHasChildren($0) {
 var $1 = 0, $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 $0 = jsvIsFunction(HEAP32[$2 + 12 >> 2]) & 1;
 $1 = 1;
 label$1 : {
  if ($0) {
   break label$1;
  }
  $0 = jsvIsObject(HEAP32[$2 + 12 >> 2]) & 1;
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = jsvIsArray(HEAP32[$2 + 12 >> 2]) & 1;
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = jsvIsRoot(HEAP32[$2 + 12 >> 2]) & 1;
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $1 = jsvIsGetterOrSetter(HEAP32[$2 + 12 >> 2]);
 }
 $0 = $1;
 global$0 = $2 + 16 | 0;
 return $0 & 1;
}
function jsvIsIterable($0) {
 var $1 = 0, $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 $0 = jsvIsArray(HEAP32[$2 + 12 >> 2]) & 1;
 $1 = 1;
 label$1 : {
  if ($0) {
   break label$1;
  }
  $0 = jsvIsObject(HEAP32[$2 + 12 >> 2]) & 1;
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = jsvIsFunction(HEAP32[$2 + 12 >> 2]) & 1;
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $0 = jsvIsString(HEAP32[$2 + 12 >> 2]) & 1;
  $1 = 1;
  if ($0) {
   break label$1;
  }
  $1 = jsvIsArrayBuffer(HEAP32[$2 + 12 >> 2]);
 }
 $0 = $1;
 global$0 = $2 + 16 | 0;
 return $0 & 1;
}
function jswrap_stream_available($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = jsvObjectGetChild(HEAP32[$1 + 8 >> 2], 37340, 0);
  HEAP32[$1 >> 2] = 0;
  if (jsvIsString(HEAP32[$1 + 4 >> 2]) & 1) {
   HEAP32[$1 >> 2] = jsvGetStringLength(HEAP32[$1 + 4 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jspeExpression() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 label$1 : {
  while (1) {
   if (((HEAP32[23778] & 80) != 0 ^ -1) & 1) {
    HEAP32[$0 + 8 >> 2] = __jspeAssignmentExpression(jspeConditionalExpression());
    if (HEAP16[HEAP32[13768] + 2 >> 1] != 44) {
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
     break label$1;
    }
    jsvCheckReferenceError(HEAP32[$0 + 8 >> 2]);
    jsvUnLock(HEAP32[$0 + 8 >> 2]);
    jslGetNextToken();
    continue;
   }
   break;
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function jsonNewLine($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 cbprintf(HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2], 34266, 0);
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 28 >> 2] >>> 12;
 while (1) {
  label$2 : {
   $0 = HEAP32[$4 + 12 >> 2];
   HEAP32[$4 + 12 >> 2] = $0 + -1;
   if (!$0) {
    break label$2;
   }
   cbprintf(HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[$4 + 24 >> 2], 0);
   continue;
  }
  break;
 }
 global$0 = $4 + 32 | 0;
}
function tflite__ops__micro__elementwise___28anonymous_20namespace_29__EvalNumeric_28TfLiteContext__2c_20TfLiteNode__2c_20float_20_28__29_28float_29_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = TfLiteStatus_20tflite__ops__micro__elementwise___28anonymous_20namespace_29__EvalImpl_float__28TfLiteContext__2c_20TfLiteNode__2c_20float_20_28__29_28float_29_2c_20TfLiteType_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 16 | 0;
 return $0;
}
function tflite__RuntimeShape__FlatSize_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = 1;
 HEAP32[$1 + 4 >> 2] = tflite__RuntimeShape__DimsData_28_29_20const($0);
 HEAP32[$1 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 >> 2] < HEAP32[$0 >> 2]) {
   HEAP32[$1 + 8 >> 2] = Math_imul(HEAP32[HEAP32[$1 + 4 >> 2] + (HEAP32[$1 >> 2] << 2) >> 2], HEAP32[$1 + 8 >> 2]);
   HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1;
   continue;
  }
  break;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function lcdST7789_scroll($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 if (HEAP32[24392] == 1) {
  HEAP32[24390] = HEAP32[24390] - HEAP32[$3 + 4 >> 2];
  while (1) {
   if (HEAP32[24390] < 0) {
    HEAP32[24390] = HEAP32[24390] + 320;
    continue;
   }
   break;
  }
  while (1) {
   if (HEAP32[24390] >= 320) {
    HEAP32[24390] = HEAP32[24390] - 320;
    continue;
   }
   break;
  }
  lcdST7789_scrollCmd();
 }
 global$0 = $3 + 16 | 0;
}
function jsvIsInt($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 1;
 label$2 : {
  if ((HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) == 9) {
   break label$2;
  }
  $0 = 1;
  if ((HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) == 12) {
   break label$2;
  }
  $0 = 1;
  if ((HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) == 14) {
   break label$2;
  }
  $0 = 1;
  if ((HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) == 15) {
   break label$2;
  }
  $0 = (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) == 16;
 }
 return (HEAP32[$1 + 12 >> 2] ? $0 : 0) & 1;
}
function double_20const__20std____2__min_double_2c_20std____2____less_double_2c_20double__20__28double_20const__2c_20double_20const__2c_20std____2____less_double_2c_20double__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1 : {
  if (std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($2 + 8 | 0, HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function jswrap_graphics_scroll($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP32[$3 + 80 >> 2] = $2;
 label$1 : {
  if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  $0 = $3 + 8 | 0;
  graphicsScroll($0, HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2]);
  graphicsSetVar($0);
  HEAP32[$3 + 92 >> 2] = jsvLockAgain(HEAP32[$3 + 88 >> 2]);
 }
 global$0 = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}
function jsvNewFromFloat($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAPF64[$1 + 16 >> 3] = $0;
 HEAP32[$1 + 12 >> 2] = jsvNewWithFlags(10);
 label$1 : {
  if (!HEAP32[$1 + 12 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  $2 = HEAP32[$1 + 12 >> 2];
  wasm2js_scratch_store_f64(+HEAPF64[$1 + 16 >> 3]);
  $3 = wasm2js_scratch_load_i32(1) | 0;
  HEAP32[$2 >> 2] = wasm2js_scratch_load_i32(0);
  HEAP32[$2 + 4 >> 2] = $3;
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 12 >> 2];
 }
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}
function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__RoundingHalfSum_int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $3 = $2 + 8 | 0;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(int_20gemmlowp__RoundingHalfSum_int__28int_2c_20int_29(HEAP32[jshFlashGetMemMapAddress($2 + 16 | 0) >> 2], HEAP32[jshFlashGetMemMapAddress($3) >> 2]));
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}
function _jswrap_io_peek($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1 : {
  if (HEAP32[$2 + 4 >> 2] == 1) {
   HEAP32[$2 + 12 >> 2] = HEAPU8[HEAP32[$2 + 8 >> 2]];
   break label$1;
  }
  if (HEAP32[$2 + 4 >> 2] == 2) {
   HEAP32[$2 + 12 >> 2] = HEAPU8[HEAP32[$2 + 8 >> 2]] | HEAPU8[HEAP32[$2 + 8 >> 2] + 1 | 0] << 8;
   break label$1;
  }
  if (HEAP32[$2 + 4 >> 2] == 4) {
   HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 return HEAP32[$2 + 12 >> 2];
}
function tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_2__operator_28_29_28tflite__LSHProjectionType_29_20const($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 4 >> 2] + -1 | 0;
 label$1 : {
  if ($0 >>> 0 <= 1) {
   if ($0 - 1) {
    HEAP32[$2 + 12 >> 2] = 1;
    break label$1;
   }
   HEAP32[$2 + 12 >> 2] = 2;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 return HEAP32[$2 + 12 >> 2];
}
function jsvStringIteratorClone($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $1 = HEAP32[$2 + 12 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$1 + 4 >> 2] = $3;
 HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
 $3 = HEAP32[$0 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = $3;
 if (HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]) {
  jsvLockAgain(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]);
 }
 global$0 = $2 + 16 | 0;
}
function __fflush_unlocked($0) {
 var $1 = 0, $2 = 0;
 label$1 : {
  if (HEAPU32[$0 + 20 >> 2] <= HEAPU32[$0 + 28 >> 2]) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
  if (HEAP32[$0 + 20 >> 2]) {
   break label$1;
  }
  return -1;
 }
 $1 = HEAP32[$0 + 4 >> 2];
 $2 = HEAP32[$0 + 8 >> 2];
 if ($1 >>> 0 < $2 >>> 0) {
  $1 = $1 - $2 | 0;
  FUNCTION_TABLE[HEAP32[$0 + 40 >> 2]]($0, $1, $1 >> 31, 1) | 0;
 }
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 return 0;
}
function jswrap_banglejs_setLCDBrightness($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $3 = $1;
 $0 = HEAPF64[$1 + 8 >> 3] * 256 + .5;
 label$1 : {
  if (Math_abs($0) < 2147483648) {
   $2 = ~~$0;
   break label$1;
  }
  $2 = -2147483648;
 }
 HEAP32[$3 + 4 >> 2] = $2;
 if (HEAP32[$1 + 4 >> 2] < 0) {
  HEAP32[$1 + 4 >> 2] = 0;
 }
 if (HEAP32[$1 + 4 >> 2] > 255) {
  HEAP32[$1 + 4 >> 2] = 255;
 }
 HEAP8[251284] = HEAP32[$1 + 4 >> 2];
 if (HEAP8[251256] & 1) {
  jshUSARTKick(1);
 }
 global$0 = $1 + 16 | 0;
}
function jspGetConstructor($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jspGetPrototype(HEAP32[$1 + 8 >> 2]);
 label$1 : {
  if (HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 >> 2] = jsvObjectGetChild(HEAP32[$1 + 4 >> 2], 4362, 0);
   if (jsvIsFunction(HEAP32[$1 >> 2]) & 1) {
    jsvUnLock(HEAP32[$1 + 4 >> 2]);
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
    break label$1;
   }
   jsvUnLock2(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2]);
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsvSetString($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 44 >> 2], 0);
 HEAP32[$3 + 12 >> 2] = 0;
 while (1) {
  if (HEAPU32[$3 + 12 >> 2] < HEAPU32[$3 + 36 >> 2]) {
   jsvStringIteratorSetCharAndNext($3 + 16 | 0, HEAP8[HEAP32[$3 + 40 >> 2] + HEAP32[$3 + 12 >> 2] | 0]);
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 jsvStringIteratorFree($3 + 16 | 0);
 global$0 = $3 + 48 | 0;
}
function jslMatchError($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 96 | 0;
 global$0 = $1;
 $2 = $1 + 16 | 0;
 HEAP32[$1 + 92 >> 2] = $0;
 $0 = $1 + 48 | 0;
 jslGetTokenString($0);
 jslTokenAsString(HEAP32[$1 + 92 >> 2], $2, 30);
 HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[13768] + 28 >> 2];
 $3 = jsvStringIteratorGetIndex(HEAP32[13768] + 4 | 0);
 HEAP32[HEAP32[13768] + 28 >> 2] = $3 - 1;
 HEAP32[$1 + 4 >> 2] = $2;
 HEAP32[$1 >> 2] = $0;
 jsExceptionHere(2, 1881, $1);
 HEAP32[HEAP32[13768] + 28 >> 2] = HEAP32[$1 + 12 >> 2];
 jslGetNextToken();
 global$0 = $1 + 96 | 0;
}
function jswrap_graphics_fillCircle($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 jswrap_graphics_fillEllipse(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2] - HEAP32[$4 >> 2] | 0, HEAP32[$4 + 4 >> 2] - HEAP32[$4 >> 2] | 0, HEAP32[$4 + 8 >> 2] + HEAP32[$4 >> 2] | 0, HEAP32[$4 + 4 >> 2] + HEAP32[$4 >> 2] | 0);
 $0 = jsvLockAgain(HEAP32[$4 + 12 >> 2]);
 global$0 = $4 + 16 | 0;
 return $0 | 0;
}
function jswrap_graphics_drawCircle($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 jswrap_graphics_drawEllipse(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2] - HEAP32[$4 >> 2] | 0, HEAP32[$4 + 4 >> 2] - HEAP32[$4 >> 2] | 0, HEAP32[$4 + 8 >> 2] + HEAP32[$4 >> 2] | 0, HEAP32[$4 + 4 >> 2] + HEAP32[$4 >> 2] | 0);
 $0 = jsvLockAgain(HEAP32[$4 + 12 >> 2]);
 global$0 = $4 + 16 | 0;
 return $0 | 0;
}
function jswrap_storage_erase($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 + -64 | 0;
 global$0 = $1;
 HEAP32[$1 + 60 >> 2] = $0;
 jsfNameFromVar($1 + 32 | 0, HEAP32[$1 + 60 >> 2]);
 HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 56 >> 2];
 $0 = HEAP32[$1 + 52 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 48 >> 2];
 HEAP32[$1 + 20 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 40 >> 2];
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 36 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$1 + 32 >> 2];
 HEAP32[$1 + 4 >> 2] = $0;
 jsfEraseFile($1);
 global$0 = $1 - -64 | 0;
}
function unsigned_20char_20const__20std____2__min_unsigned_20char__28unsigned_20char_20const__2c_20unsigned_20char_20const__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = unsigned_20char_20const__20std____2__min_unsigned_20char_2c_20std____2____less_unsigned_20char_2c_20unsigned_20char__20__28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20std____2____less_unsigned_20char_2c_20unsigned_20char__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0;
}
function unsigned_20char_20const__20std____2__max_unsigned_20char__28unsigned_20char_20const__2c_20unsigned_20char_20const__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = unsigned_20char_20const__20std____2__max_unsigned_20char_2c_20std____2____less_unsigned_20char_2c_20unsigned_20char__20__28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20std____2____less_unsigned_20char_2c_20unsigned_20char__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0;
}
function float_20const__20std____2__min_float_2c_20std____2____less_float_2c_20float__20__28float_20const__2c_20float_20const__2c_20std____2____less_float_2c_20float__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1 : {
  if (std____2____less_float_2c_20float___operator_28_29_28float_20const__2c_20float_20const__29_20const($2 + 8 | 0, HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function float_20const__20std____2__max_float_2c_20std____2____less_float_2c_20float__20__28float_20const__2c_20float_20const__2c_20std____2____less_float_2c_20float__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1 : {
  if (std____2____less_float_2c_20float___operator_28_29_28float_20const__2c_20float_20const__29_20const($2 + 8 | 0, HEAP32[$2 + 4 >> 2], HEAP32[$2 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function gemmlowp__FixedPoint_int_2c_205__20gemmlowp__operator__int_2c_205__28gemmlowp__FixedPoint_int_2c_205__2c_20gemmlowp__FixedPoint_int_2c_205__29_1($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $3 = $2 + 8 | 0;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[jshFlashGetMemMapAddress($2 + 16 | 0) >> 2], HEAP32[jshFlashGetMemMapAddress($3) >> 2]));
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}
function gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__operator__int_2c_2012__28gemmlowp__FixedPoint_int_2c_2012__2c_20gemmlowp__FixedPoint_int_2c_2012__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 $3 = $2 + 8 | 0;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(int_20gemmlowp__Add_int__28int_2c_20int_29(HEAP32[jshFlashGetMemMapAddress($2 + 16 | 0) >> 2], HEAP32[jshFlashGetMemMapAddress($3) >> 2]));
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}
function tflite__ops__micro__elementwise___28anonymous_20namespace_29__SquareEval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $2;
 $0 = tflite__ops__micro__elementwise___28anonymous_20namespace_29__EvalNumeric_28TfLiteContext__2c_20TfLiteNode__2c_20float_20_28__29_28float_29_29($0, $1, 635);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function jsvStringIteratorGetPtrAndNext($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 16 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2];
 HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2] - HEAP32[HEAP32[$3 + 12 >> 2] >> 2];
 HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2] - 1;
 jsvStringIteratorNextInline(HEAP32[$3 + 12 >> 2]);
 global$0 = $3 + 16 | 0;
}
function tflite__ops__micro__elementwise___28anonymous_20namespace_29__RsqrtEval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $2;
 $0 = tflite__ops__micro__elementwise___28anonymous_20namespace_29__EvalNumeric_28TfLiteContext__2c_20TfLiteNode__2c_20float_20_28__29_28float_29_29($0, $1, 634);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function jswrap_isFinite($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAPF64[$1 + 16 >> 3] = jsvGetFloat(HEAP32[$1 + 28 >> 2]);
 $0 = __DOUBLE_BITS(HEAPF64[$1 + 16 >> 3]);
 $2 = i64toi32_i32$HIGH_BITS & 2147483647;
 $2 = ($2 | 0) == 2146435072 & $0 >>> 0 > 0 | $2 >>> 0 > 2146435072;
 $0 = 0;
 label$1 : {
  if ($2) {
   break label$1;
  }
  $0 = 0;
  if (HEAPF64[$1 + 16 >> 3] == infinity) {
   break label$1;
  }
  $0 = HEAPF64[$1 + 16 >> 3] != -infinity;
 }
 global$0 = $1 + 32 | 0;
 return $0 | 0;
}
function tf_invoke($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 24 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 20 >> 2];
 HEAP32[$1 + 12 >> 2] = tflite__MicroInterpreter__Invoke_28_29(HEAP32[$1 + 20 >> 2] + 4108 | 0);
 label$1 : {
  if (HEAP32[$1 + 12 >> 2]) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$1 + 16 >> 2], 49688, 0);
   HEAP8[$1 + 31 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 31 | 0] = 1;
 }
 global$0 = $1 + 32 | 0;
 return HEAP8[$1 + 31 | 0] & 1;
}
function chtod($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP8[$1 + 11 | 0] = $0;
 label$1 : {
  if (!(HEAP8[$1 + 11 | 0] < 48 | HEAP8[$1 + 11 | 0] > 57)) {
   HEAP32[$1 + 12 >> 2] = HEAP8[$1 + 11 | 0] - 48;
   break label$1;
  }
  if (!(HEAP8[$1 + 11 | 0] < 97 | HEAP8[$1 + 11 | 0] > 122)) {
   HEAP32[$1 + 12 >> 2] = HEAP8[$1 + 11 | 0] + -87;
   break label$1;
  }
  if (!(HEAP8[$1 + 11 | 0] < 65 | HEAP8[$1 + 11 | 0] > 90)) {
   HEAP32[$1 + 12 >> 2] = HEAP8[$1 + 11 | 0] + -55;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = -1;
 }
 return HEAP32[$1 + 12 >> 2];
}
function lcdSetPixel_ArrayBuffer_flat8($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP8[$1 + (HEAP32[$4 + 8 >> 2] + Math_imul(HEAP32[$4 + 4 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) | 0) | 0] = HEAP32[$4 >> 2];
}
function i2c_rd($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 4 >> 2] < 8) {
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] << 1 | (i2c_rd_bit(HEAP32[$2 + 12 >> 2]) & 1 ? 1 : 0);
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 i2c_wr_bit(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
 jshPinSetValue(HEAPU8[HEAP32[$2 + 12 >> 2] + 1 | 0], 1);
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 >> 2];
}
function TfLiteIntArrayEqual($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1 : {
  if (HEAP32[$2 + 8 >> 2] == HEAP32[$2 + 4 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 1;
   break label$1;
  }
  if (!(HEAP32[$2 + 4 >> 2] ? HEAP32[$2 + 8 >> 2] : 0)) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = TfLiteIntArrayEqualsArray(HEAP32[$2 + 8 >> 2], HEAP32[HEAP32[$2 + 4 >> 2] >> 2], HEAP32[$2 + 4 >> 2] + 4 | 0);
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function jswrap_date_setSeconds($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 getTimeFromDateVar($3 + 8 | 0, HEAP32[$3 + 44 >> 2], 0);
 HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 40 >> 2];
 if (jsvIsNumeric(HEAP32[$3 + 36 >> 2]) & 1) {
  HEAP32[$3 + 12 >> 2] = jsvGetInteger(HEAP32[$3 + 36 >> 2]);
 }
 $4 = jswrap_date_setTime(HEAP32[$3 + 44 >> 2], fromTimeInDay($3 + 8 | 0));
 global$0 = $3 + 48 | 0;
 return +$4;
}
function jswrap_graphics_drawCString($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = 8;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = jsvNewFromString(HEAP32[$3 + 16 >> 2]);
 $0 = HEAP32[$3 + 28 >> 2];
 jsvUnLock2(jswrap_graphics_drawString(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), HEAP32[$3 + 12 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], 0), HEAP32[$3 + 12 >> 2]);
 global$0 = $3 + 32 | 0;
}
function jsiMoveCursorChar($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 if (HEAP32[$3 + 24 >> 2] != HEAP32[$3 + 20 >> 2]) {
  $0 = $3 + 4 | 0;
  $1 = $3 + 8 | 0;
  jsvGetLineAndCol(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], $3 + 12 | 0, $3 + 16 | 0);
  jsvGetLineAndCol(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 20 >> 2], $0, $1);
  jsiMoveCursor(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 }
 global$0 = $3 + 32 | 0;
}
function tflite__ParseOpData_28tflite__Operator_20const__2c_20tflite__BuiltinOperator_2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29__$_0__operator_28_29_28tflite__Padding_29_20const($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 4 >> 2];
 label$1 : {
  if ($0 >>> 0 <= 1) {
   if ($0 - 1) {
    HEAP32[$2 + 12 >> 2] = 1;
    break label$1;
   }
   HEAP32[$2 + 12 >> 2] = 2;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 return HEAP32[$2 + 12 >> 2];
}
function _jswrap_banglejs_setVibration() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 if (HEAP32[62815] & 64) {
  HEAP32[$0 + 12 >> 2] = HEAPU16[125666];
 }
 label$2 : {
  if (!(HEAPU8[251330] | HEAP32[$0 + 12 >> 2])) {
   jshPinOutput(13, 0);
   break label$2;
  }
  label$4 : {
   if (!HEAP32[$0 + 12 >> 2]) {
    jshPinAnalogOutput(13, .4 + +HEAPU8[251330] * .6 / 255, 1e3, 0);
    break label$4;
   }
   jshPinAnalogOutput(13, .2 + +HEAPU8[251330] * .6 / 255, +HEAP32[$0 + 12 >> 2], 0);
  }
 }
 global$0 = $0 + 16 | 0;
}
function jsvNewNativeString($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 if (HEAPU32[$2 + 4 >> 2] > 4294967295) {
  HEAP32[$2 + 4 >> 2] = -1;
 }
 HEAP32[$2 >> 2] = jsvNewWithFlags(39);
 label$2 : {
  if (!HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$2;
  }
  HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[HEAP32[$2 >> 2] + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function lcdST7789_scrollCmd() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = HEAP32[24390] + HEAP32[24391];
 if (HEAP32[24392] == 2) {
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 120;
 }
 if (HEAP32[$0 + 12 >> 2] >= 320) {
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] - 320;
 }
 if (HEAP32[$0 + 12 >> 2] < 0) {
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 320;
 }
 HEAP8[$0 + 10 | 0] = HEAP32[$0 + 12 >> 2] >> 8;
 HEAP8[$0 + 11 | 0] = HEAP32[$0 + 12 >> 2];
 lcdST7789_cmd(55, 2, $0 + 10 | 0);
 global$0 = $0 + 16 | 0;
}
function jsvGetConstString($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (jsvIsUndefined(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 2529;
   break label$1;
  }
  if (jsvIsNull(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 2539;
   break label$1;
  }
  if (jsvIsBoolean(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvGetBool(HEAP32[$1 + 8 >> 2]) & 1 ? 2544 : 2549;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsiFreeMoreMemory() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 jsvObjectRemoveChild(HEAP32[23775], 5721);
 HEAP32[$0 + 8 >> 2] = jsvObjectGetChild(HEAP32[23775], 5729, 0);
 label$1 : {
  if (!HEAP32[$0 + 8 >> 2]) {
   HEAP8[$0 + 15 | 0] = 0;
   break label$1;
  }
  HEAP32[$0 + 4 >> 2] = jsvArrayPopFirst(HEAP32[$0 + 8 >> 2]);
  HEAP8[$0 + 3 | 0] = HEAP32[$0 + 4 >> 2] != 0;
  jsvUnLock2(HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2]);
  HEAP8[$0 + 15 | 0] = HEAP8[$0 + 3 | 0] & 1;
 }
 global$0 = $0 + 16 | 0;
 return HEAP8[$0 + 15 | 0] & 1;
}
function isValidBPP($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 1;
 label$1 : {
  if (HEAP32[$1 + 12 >> 2] == 1) {
   break label$1;
  }
  $0 = 1;
  if (HEAP32[$1 + 12 >> 2] == 2) {
   break label$1;
  }
  $0 = 1;
  if (HEAP32[$1 + 12 >> 2] == 4) {
   break label$1;
  }
  $0 = 1;
  if (HEAP32[$1 + 12 >> 2] == 8) {
   break label$1;
  }
  $0 = 1;
  if (HEAP32[$1 + 12 >> 2] == 16) {
   break label$1;
  }
  $0 = 1;
  if (HEAP32[$1 + 12 >> 2] == 24) {
   break label$1;
  }
  $0 = HEAP32[$1 + 12 >> 2] == 32;
 }
 return $0;
}
function tflite___28anonymous_20namespace_29__ReportOpError_28TfLiteContext__2c_20char_20const__2c_20____29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2];
 HEAP32[$3 >> 2] = $2;
 $0 = tflite__MicroInterpreter__error_reporter_28_29(HEAP32[$3 + 4 >> 2]);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$3 + 8 >> 2], HEAP32[$3 >> 2]) | 0;
 global$0 = $3 + 16 | 0;
}
function jswrap_graphics_clear($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP8[$2 + 71 | 0] = $1;
 if (HEAP8[$2 + 71 | 0] & 1) {
  jsvUnLock(jswrap_graphics_reset(HEAP32[$2 + 72 >> 2]));
 }
 label$2 : {
  if (!(graphicsGetFromVar($2, HEAP32[$2 + 72 >> 2]) & 1)) {
   HEAP32[$2 + 76 >> 2] = 0;
   break label$2;
  }
  graphicsClear($2);
  graphicsSetVar($2);
  HEAP32[$2 + 76 >> 2] = jsvLockAgain(HEAP32[$2 + 72 >> 2]);
 }
 global$0 = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}
function jswrap_arguments() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 8 >> 2] = 0;
 if (HEAP32[23776]) {
  HEAP32[$0 + 8 >> 2] = jsvGetLastArrayItem(HEAP32[23776]);
 }
 label$2 : {
  if (!(jsvIsFunction(HEAP32[$0 + 8 >> 2]) & 1)) {
   jsExceptionHere(1, 32755, 0);
   HEAP32[$0 + 12 >> 2] = 0;
   break label$2;
  }
  HEAP32[$0 + 4 >> 2] = jsvGetFunctionArgumentLength(HEAP32[$0 + 8 >> 2]);
  jsvUnLock(HEAP32[$0 + 8 >> 2]);
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
 }
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function jsvFindOrCreateRoot() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP16[$0 + 10 >> 1] = 1;
 label$1 : {
  while (1) {
   if (HEAPU16[$0 + 10 >> 1] <= HEAPU32[13337]) {
    if (jsvIsRoot(jsvGetAddressOf(HEAPU16[$0 + 10 >> 1])) & 1) {
     HEAP32[$0 + 12 >> 2] = jsvLock(HEAPU16[$0 + 10 >> 1]);
     break label$1;
    } else {
     HEAP16[$0 + 10 >> 1] = HEAPU16[$0 + 10 >> 1] + 1;
     continue;
    }
   }
   break;
  }
  HEAP32[$0 + 12 >> 2] = jsvRef(jsvNewWithFlags(1));
 }
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function jsvSetCharInString($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP8[$3 + 23 | 0] = $2;
 HEAP8[$3 + 22 | 0] = 1;
 if (jsvIsString(HEAP32[$3 + 28 >> 2]) & 1) {
  jsvStringIteratorNew($3, HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2]);
  if (HEAP8[$3 + 22 | 0] & 1) {
   HEAP8[$3 + 23 | 0] = jsvStringIteratorGetChar($3) << 24 >> 24 | HEAP8[$3 + 23 | 0];
  }
  jsvStringIteratorSetChar($3, HEAP8[$3 + 23 | 0]);
  jsvStringIteratorFree($3);
 }
 global$0 = $3 + 32 | 0;
}
function jsvNewTypedArray($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP16[$2 + 26 >> 1] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = jsvNewFromInteger(HEAP32[$2 + 20 >> 2]);
 label$1 : {
  if (!HEAP32[$2 + 16 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jswrap_typedarray_constructor(HEAPU16[$2 + 26 >> 1], HEAP32[$2 + 16 >> 2], 0, 0);
  jsvUnLock(HEAP32[$2 + 16 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function __overflow($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = 10;
 $2 = HEAP32[$0 + 16 >> 2];
 label$1 : {
  if (!$2) {
   if (__towrite($0)) {
    break label$1;
   }
   $2 = HEAP32[$0 + 16 >> 2];
  }
  $3 = HEAP32[$0 + 20 >> 2];
  if (!(HEAP8[$0 + 75 | 0] == 10 | $3 >>> 0 >= $2 >>> 0)) {
   HEAP32[$0 + 20 >> 2] = $3 + 1;
   HEAP8[$3 | 0] = 10;
   break label$1;
  }
  if ((FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, $1 + 15 | 0, 1) | 0) != 1) {
   break label$1;
  }
 }
 global$0 = $1 + 16 | 0;
}
function jsvAppendStringBuf($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 jsvStringIteratorNew($3, HEAP32[$3 + 28 >> 2], 0);
 jsvStringIteratorGotoEnd($3);
 while (1) {
  if (HEAP32[$3 + 20 >> 2]) {
   $0 = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 24 >> 2] = $0 + 1;
   jsvStringIteratorAppend($3, HEAP8[$0 | 0]);
   HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] + -1;
   continue;
  }
  break;
 }
 jsvStringIteratorFree($3);
 global$0 = $3 + 32 | 0;
}
function jslSeekToP($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[HEAP32[13768] + 120 >> 2]) {
  jsvLockAgain(HEAP32[HEAP32[13768] + 120 >> 2]);
 }
 jsvStringIteratorFree(HEAP32[13768] + 108 | 0);
 jsvStringIteratorClone(HEAP32[13768] + 108 | 0, HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[HEAP32[13768] + 120 >> 2]);
 HEAP8[HEAP32[13768]] = HEAPU8[HEAP32[$1 + 12 >> 2] + 20 | 0];
 HEAP32[HEAP32[13768] + 16 >> 2] = 0;
 HEAP8[HEAP32[13768] + 24 | 0] = 0;
 jslGetNextToken();
 global$0 = $1 + 16 | 0;
}
function signed_20char_20const__20std____2__min_signed_20char__28signed_20char_20const__2c_20signed_20char_20const__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = signed_20char_20const__20std____2__min_signed_20char_2c_20std____2____less_signed_20char_2c_20signed_20char__20__28signed_20char_20const__2c_20signed_20char_20const__2c_20std____2____less_signed_20char_2c_20signed_20char__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0;
}
function signed_20char_20const__20std____2__max_signed_20char__28signed_20char_20const__2c_20signed_20char_20const__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = signed_20char_20const__20std____2__max_signed_20char_2c_20std____2____less_signed_20char_2c_20signed_20char__20__28signed_20char_20const__2c_20signed_20char_20const__2c_20std____2____less_signed_20char_2c_20signed_20char__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0;
}
function int_20const__20std____2__min_int_2c_20std____2____less_int_2c_20int__20__28int_20const__2c_20int_20const__2c_20std____2____less_int_2c_20int__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1 : {
  if (std____2____less_int_2c_20int___operator_28_29_28int_20const__2c_20int_20const__29_20const($2 + 8 | 0, HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function int_20const__20std____2__max_int_2c_20std____2____less_int_2c_20int__20__28int_20const__2c_20int_20const__2c_20std____2____less_int_2c_20int__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1 : {
  if (std____2____less_int_2c_20int___operator_28_29_28int_20const__2c_20int_20const__29_20const($2 + 8 | 0, HEAP32[$2 + 4 >> 2], HEAP32[$2 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 global$0 = $2 + 16 | 0;
 return $0;
}
function jsiIsInHistory($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = jsiGetHistory();
 label$1 : {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP8[$1 + 31 | 0] = 0;
   break label$1;
  }
  HEAP32[$1 + 16 >> 2] = jsvGetIndexOf(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 24 >> 2], 1);
  HEAP8[$1 + 15 | 0] = HEAP32[$1 + 16 >> 2] != 0;
  jsvUnLock2(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
  HEAP8[$1 + 31 | 0] = HEAP8[$1 + 15 | 0] & 1;
 }
 global$0 = $1 + 32 | 0;
 return HEAP8[$1 + 31 | 0] & 1;
}
function lcd_flip($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 80 | 0;
 global$0 = $1;
 HEAP32[$1 + 76 >> 2] = $0;
 if (!(!HEAP32[62813] | HEAP8[251256] & 1)) {
  jswrap_banglejs_setLCDPower(1);
 }
 HEAP16[125629] = 0;
 HEAP32[$1 + 72 >> 2] = jsvObjectGetChild(HEAP32[23775], 28e3, 0);
 label$2 : {
  if (!HEAP32[$1 + 72 >> 2]) {
   break label$2;
  }
  if (!(graphicsGetFromVar($1, HEAP32[$1 + 72 >> 2]) & 1)) {
   break label$2;
  }
  lcdST7789_flip($1);
  graphicsSetVar($1);
  jsvUnLock(HEAP32[$1 + 72 >> 2]);
 }
 global$0 = $1 + 80 | 0;
}
function jswrap_object_keys_or_property_names($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP8[$2 + 7 | 0] = $1;
 HEAP8[$2 + 6 | 0] = 0;
 HEAP32[$2 >> 2] = jsvNewWithFlags(3);
 label$1 : {
  if (!HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  jswrap_object_keys_or_property_names_cb(HEAP32[$2 + 8 >> 2], HEAP8[$2 + 7 | 0] & 1, HEAP8[$2 + 6 | 0] & 1, 514, HEAP32[$2 >> 2]);
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function jsvAddNamedChild($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = jsvMakeIntoVariableName(jsvNewFromString(HEAP32[$3 + 16 >> 2]), HEAP32[$3 + 20 >> 2]);
 label$1 : {
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  jsvAddName(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 12 >> 2]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}
function jswrap_pin_writeAtTime($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 $4 = $3 + 15 | 0;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP8[$3 + 27 | 0] = $1;
 HEAPF64[$3 + 16 >> 3] = $2;
 HEAP8[$3 + 15 | 0] = jshGetPinFromVar(HEAP32[$3 + 28 >> 2]);
 HEAP32[$3 >> 2] = jshGetTimeFromMilliseconds(HEAPF64[$3 + 16 >> 3] * 1e3);
 HEAP32[$3 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
 jstPinOutputAtTime(HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2], $4, HEAP8[$3 + 27 | 0] & 1);
 global$0 = $3 + 32 | 0;
}
function jswrap_pin_toggle($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP8[$1 + 7 | 0] = jshGetPinFromVar(HEAP32[$1 + 8 >> 2]);
 label$1 : {
  if (!(jshIsPinValid(HEAPU8[$1 + 7 | 0]) & 1)) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 6 | 0] = ((jshPinGetState(HEAPU8[$1 + 7 | 0]) & 16) != 0 ^ -1) & 1;
  jshPinOutput(HEAPU8[$1 + 7 | 0], HEAP8[$1 + 6 | 0] & 1);
  HEAP8[$1 + 15 | 0] = HEAP8[$1 + 6 | 0] & 1;
 }
 global$0 = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}
function jspeArrowFunction($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jslGetNextToken();
 HEAP32[$2 + 12 >> 2] = jspeAddNamedFunctionParameter(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 HEAP8[$2 + 7 | 0] = HEAP16[HEAP32[13768] + 2 >> 1] != 123;
 jspeFunctionDefinitionInternal(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 7 | 0] & 1);
 if (HEAP32[23777]) {
  jsvObjectSetChild(HEAP32[$2 + 12 >> 2], 3990, HEAP32[23777]);
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function jspeAddNamedFunctionParameter($0, $1) {
 var $2 = 0;
 $2 = global$0 - 96 | 0;
 global$0 = $2;
 HEAP32[$2 + 92 >> 2] = $0;
 HEAP32[$2 + 88 >> 2] = $1;
 if (!HEAP32[$2 + 92 >> 2]) {
  HEAP32[$2 + 92 >> 2] = jsvNewWithFlags(7);
 }
 HEAP8[$2 + 16 | 0] = 255;
 $0 = $2 + 16 | 0;
 jsvGetString(HEAP32[$2 + 88 >> 2], $0 + 1 | 0, 64);
 HEAP32[$2 + 12 >> 2] = jsvAddNamedChild(HEAP32[$2 + 92 >> 2], 0, $0);
 jsvMakeFunctionParameter(HEAP32[$2 + 12 >> 2]);
 jsvUnLock(HEAP32[$2 + 12 >> 2]);
 global$0 = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}
function lcdInit_JS($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 jsvObjectSetChild(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 27671, HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 jsvObjectSetChild(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 27681, HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 16 | 0;
}
function jswrap_object_addEventListener($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP16[$4 + 18 >> 1] = $3;
 HEAP32[$4 + 12 >> 2] = jsvNewFromString(HEAP32[$4 + 24 >> 2]);
 HEAP32[$4 + 8 >> 2] = jsvNewNativeFunction(HEAP32[$4 + 20 >> 2], HEAPU16[$4 + 18 >> 1]);
 jswrap_object_on(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2]);
 jsvUnLock2(HEAP32[$4 + 8 >> 2], HEAP32[$4 + 12 >> 2]);
 global$0 = $4 + 32 | 0;
}
function jsfSaveToFlash_finish($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 while (1) {
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 140 >> 2] & 3) {
   $3 = HEAP32[$1 + 12 >> 2];
   $2 = HEAP32[$1 + 12 >> 2];
   $0 = HEAP32[$2 + 140 >> 2];
   HEAP32[$2 + 140 >> 2] = $0 + 1;
   HEAP8[$0 + ($3 + 12 | 0) | 0] = 255;
   continue;
  }
  break;
 }
 jshFlashRead(HEAP32[$1 + 12 >> 2] + 12 | 0, HEAP32[HEAP32[$1 + 12 >> 2] >> 2], HEAP32[HEAP32[$1 + 12 >> 2] + 140 >> 2]);
 global$0 = $1 + 16 | 0;
}
function getDay($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = 0;
 label$1 : {
  while (1) {
   if (HEAP32[$1 + 4 >> 2] < 7) {
    if (strcmp(HEAP32[$1 + 8 >> 2], HEAP32[13354] + (HEAP32[$1 + 4 >> 2] << 2) | 0)) {
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
     continue;
    } else {
     HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
     break label$1;
    }
   }
   break;
  }
  HEAP32[$1 + 12 >> 2] = -1;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jswrap_graphics_getWidthOrHeight($0, $1) {
 var $2 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP8[$2 + 71 | 0] = $1;
 label$1 : {
  if (!(graphicsGetFromVar($2, HEAP32[$2 + 72 >> 2]) & 1)) {
   HEAP32[$2 + 76 >> 2] = 0;
   break label$1;
  }
  $0 = $2;
  label$3 : {
   if (HEAP8[$2 + 71 | 0] & 1) {
    $1 = graphicsGetHeight($2) & 65535;
    break label$3;
   }
   $1 = graphicsGetWidth($2) & 65535;
  }
  HEAP32[$0 + 76 >> 2] = $1;
 }
 global$0 = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}
function jsiExecuteEventCallbackOn($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = jsvObjectGetChild(HEAP32[23774], HEAP32[$4 + 28 >> 2], 0);
 HEAP8[$4 + 11 | 0] = jsiExecuteEventCallbackName(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]) & 1;
 jsvUnLock(HEAP32[$4 + 12 >> 2]);
 global$0 = $4 + 32 | 0;
 return HEAP8[$4 + 11 | 0] & 1;
}
function jsiHandleEnd() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = jsvGetStringLength(HEAP32[23784]);
 while (1) {
  if (HEAPU32[23786] < HEAPU32[$0 + 12 >> 2]) {
   $1 = (jsvGetCharInString(HEAP32[23784], HEAP32[23786]) & 255) != 10;
  } else {
   $1 = 0;
  }
  if ($1) {
   if (jsiShowInputLine() & 1) {
    jsiConsolePrintChar(jsvGetCharInString(HEAP32[23784], HEAP32[23786]) << 24 >> 24);
   }
   HEAP32[23786] = HEAP32[23786] + 1;
   continue;
  }
  break;
 }
 global$0 = $0 + 16 | 0;
}
function jsvGetCharInString($0, $1) {
 var $2 = 0;
 $2 = global$0 - 48 | 0;
 global$0 = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1 : {
  if (!(jsvIsString(HEAP32[$2 + 40 >> 2]) & 1)) {
   HEAP8[$2 + 47 | 0] = 0;
   break label$1;
  }
  $0 = $2 + 16 | 0;
  jsvStringIteratorNew($0, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
  HEAP8[$2 + 15 | 0] = jsvStringIteratorGetChar($0);
  jsvStringIteratorFree($0);
  HEAP8[$2 + 47 | 0] = HEAPU8[$2 + 15 | 0];
 }
 global$0 = $2 + 48 | 0;
 return HEAP8[$2 + 47 | 0];
}
function jspIsConstructor($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = jsvObjectGetChild(HEAP32[23774], HEAP32[$2 + 20 >> 2], 0);
 label$1 : {
  if (!HEAP32[$2 + 16 >> 2]) {
   HEAP8[$2 + 31 | 0] = 0;
   break label$1;
  }
  HEAP8[$2 + 15 | 0] = HEAP32[$2 + 16 >> 2] == HEAP32[$2 + 24 >> 2];
  jsvUnLock(HEAP32[$2 + 16 >> 2]);
  HEAP8[$2 + 31 | 0] = HEAP8[$2 + 15 | 0] & 1;
 }
 global$0 = $2 + 32 | 0;
 return HEAP8[$2 + 31 | 0] & 1;
}
function jspGetPrototype($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = jsvObjectGetChild(HEAP32[$1 + 8 >> 2], 3684, 0);
  if (jsvIsObject(HEAP32[$1 + 4 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
   break label$1;
  }
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  HEAP32[$1 + 12 >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function graphicsClear($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - 1 | 0;
 $0 = HEAP32[$1 + 12 >> 2];
 $3 = (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) - 1 | 0;
 $0 = HEAP32[$1 + 12 >> 2];
 graphicsFillRectDevice(HEAP32[$1 + 12 >> 2], 0, 0, $2, $3, HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
 global$0 = $1 + 16 | 0;
}
function jsiShouldExecuteWatch($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP32[$2 + 4 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$2 + 12 >> 2], 6014, 0));
 global$0 = $2 + 16 | 0;
 $0 = 1;
 label$1 : {
  if (!HEAP32[$2 + 4 >> 2]) {
   break label$1;
  }
  if (HEAP8[$2 + 11 | 0] & 1) {
   $0 = 1;
   if (HEAP32[$2 + 4 >> 2] > 0) {
    break label$1;
   }
  }
  $0 = HEAP8[$2 + 11 | 0] & 1 ? 0 : HEAP32[$2 + 4 >> 2] < 0;
 }
 return $0 & 1;
}
function tflite__RuntimeShape__Dims_28int_29_20const($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 label$1 : {
  if (HEAP32[$2 + 8 >> 2] < 0) {
   break label$1;
  }
 }
 label$2 : {
  if (HEAP32[$2 + 8 >> 2] >= HEAP32[$0 >> 2]) {
   break label$2;
  }
 }
 if (HEAP32[$0 >> 2] > 4) {
  $0 = HEAP32[HEAP32[$0 + 4 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) >> 2];
 } else {
  $0 = HEAP32[($0 + 4 | 0) + (HEAP32[$2 + 8 >> 2] << 2) >> 2];
 }
 return $0;
}
function tflite___28anonymous_20namespace_29__OpNameFromRegistration_28TfLiteRegistration_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (HEAP32[HEAP32[$1 + 8 >> 2] + 20 >> 2] == 32) {
   HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 8 >> 2] + 24 >> 2];
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = tflite__EnumNameBuiltinOperator_28tflite__BuiltinOperator_29(HEAP32[HEAP32[$1 + 8 >> 2] + 20 >> 2]);
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsvCheckReferenceError($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1 : {
  if (!(jsvIsName(HEAP32[$1 + 12 >> 2]) & 1)) {
   break label$1;
  }
  if (jsvGetRefs(HEAP32[$1 + 12 >> 2]) & 65535) {
   break label$1;
  }
  if (jsvIsNewChild(HEAP32[$1 + 12 >> 2]) & 1) {
   break label$1;
  }
  if (jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535) {
   break label$1;
  }
  HEAP32[$1 >> 2] = HEAP32[$1 + 12 >> 2];
  jsExceptionHere(5, 2889, $1);
 }
 global$0 = $1 + 16 | 0;
}
function jshPinSetValue($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 if (HEAPU8[Math_imul(HEAPU8[$2 + 15 | 0], 3) + 27904 | 0] & 16) {
  HEAP8[$2 + 14 | 0] = (HEAPU8[$2 + 14 | 0] ^ -1) & 1;
 }
 HEAP8[$2 + 11 | 0] = 105;
 HEAP8[$2 + 12 | 0] = 105;
 HEAP8[$2 + 13 | 0] = 0;
 $0 = HEAPU8[$2 + 15 | 0];
 HEAP32[$2 + 4 >> 2] = HEAP8[$2 + 14 | 0] & 1;
 HEAP32[$2 >> 2] = $0;
 emscripten_asm_const_iii(27803, $2 + 11 | 0, $2 | 0) | 0;
 global$0 = $2 + 16 | 0;
}
function jswrap_date_setDate($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 $3 = $2 + 8 | 0;
 HEAP32[$2 + 60 >> 2] = $0;
 HEAP32[$2 + 56 >> 2] = $1;
 $0 = $2 + 32 | 0;
 getTimeFromDateVar($0, HEAP32[$2 + 60 >> 2], 0);
 getCalendarDate($3, HEAP32[$2 + 32 >> 2]);
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 56 >> 2];
 HEAP32[$2 + 32 >> 2] = fromCalenderDate($3);
 $4 = jswrap_date_setTime(HEAP32[$2 + 60 >> 2], fromTimeInDay($0));
 global$0 = $2 - -64 | 0;
 return +$4;
}
function _jswrap_io_poke($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1 : {
  if (HEAP32[$3 + 4 >> 2] == 1) {
   HEAP8[HEAP32[$3 + 12 >> 2]] = HEAP32[$3 + 8 >> 2];
   break label$1;
  }
  label$3 : {
   if (HEAP32[$3 + 4 >> 2] == 2) {
    HEAP16[HEAP32[$3 + 12 >> 2] >> 1] = HEAP32[$3 + 8 >> 2];
    break label$3;
   }
   if (HEAP32[$3 + 4 >> 2] == 4) {
    HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = HEAP32[$3 + 8 >> 2];
   }
  }
 }
}
function jsvAddFunctionParameter($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 if (!HEAP32[$3 + 8 >> 2]) {
  HEAP32[$3 + 8 >> 2] = jsvNewFromEmptyString();
 }
 if (HEAP32[$3 + 8 >> 2]) {
  jsvMakeFunctionParameter(HEAP32[$3 + 8 >> 2]);
  jsvSetValueOfName(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  jsvAddName(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
  jsvUnLock(HEAP32[$3 + 8 >> 2]);
 }
 global$0 = $3 + 16 | 0;
}
function jsvGetChildren($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP16[$1 + 6 >> 1] = jsvGetFirstChild(HEAP32[$1 + 12 >> 2]);
 while (1) {
  if (HEAPU16[$1 + 6 >> 1]) {
   HEAP32[$1 >> 2] = jsvLock(HEAPU16[$1 + 6 >> 1]);
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
   HEAP16[$1 + 6 >> 1] = jsvGetNextSibling(HEAP32[$1 >> 2]);
   jsvUnLock(HEAP32[$1 >> 2]);
   continue;
  }
  break;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function jsiSetTimeout($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAPF64[$2 + 16 >> 3] = $1;
 HEAP32[$2 + 12 >> 2] = jsvNewNativeFunction(HEAP32[$2 + 24 >> 2], 0);
 label$1 : {
  if (!HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 8 >> 2] = jswrap_interface_setTimeout(HEAP32[$2 + 12 >> 2], HEAPF64[$2 + 16 >> 3], 0);
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
 }
 global$0 = $2 + 32 | 0;
}
function lcdST7789_setPixel($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 HEAP32[$4 + 4 >> 2] = HEAP32[24390] + HEAP32[$4 + 4 >> 2];
 if (HEAP32[$4 + 4 >> 2] >= 320) {
  HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] - 320;
 }
 HEAP16[(HEAP32[$4 + 8 >> 2] + Math_imul(HEAP32[$4 + 4 >> 2], 240) << 1) + 97616 >> 1] = HEAP32[$4 >> 2];
 HEAP8[97557] = 1;
}
function jshPushIOCharEventHandler($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 14 | 0] = $0;
 HEAP8[$2 + 13 | 0] = $1;
 label$1 : {
  if (!(HEAP8[$2 + 13 | 0] != 3 | HEAPU8[$2 + 14 | 0] != HEAPU8[53360])) {
   if (!(jsiPasswordProtected() & 1)) {
    HEAP32[23778] = HEAP32[23778] | 2048;
   }
   HEAP8[$2 + 15 | 0] = 1;
   break label$1;
  }
  HEAP8[$2 + 15 | 0] = jswOnCharEvent(HEAPU8[$2 + 14 | 0], HEAP8[$2 + 13 | 0]) & 1;
 }
 global$0 = $2 + 16 | 0;
 return HEAP8[$2 + 15 | 0] & 1;
}
function jswrap_graphics_getPixel($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 96 | 0;
 global$0 = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP32[$3 + 80 >> 2] = $2;
 label$1 : {
  if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 92 >> 2] = graphicsGetPixel($3 + 8 | 0, HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2]);
 }
 global$0 = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}
function __stdio_seek($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 label$1 : {
  if (!__wasi_syscall_ret(legalimport$__wasi_fd_seek(HEAP32[$0 + 60 >> 2], $1 | 0, $2 | 0, $3 & 255, $4 + 8 | 0) | 0)) {
   $1 = HEAP32[$4 + 12 >> 2];
   $0 = HEAP32[$4 + 8 >> 2];
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = -1;
  HEAP32[$4 + 12 >> 2] = -1;
  $1 = -1;
  $0 = -1;
 }
 global$0 = $4 + 16 | 0;
 i64toi32_i32$HIGH_BITS = $1;
 return $0 | 0;
}
function jsvObjectIteratorRemoveAndGotoNext($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAP32[HEAP32[$2 + 12 >> 2] >> 2]) {
  HEAP16[$2 + 6 >> 1] = jsvGetNextSibling(HEAP32[HEAP32[$2 + 12 >> 2] >> 2]);
  jsvRemoveChild(HEAP32[$2 + 8 >> 2], HEAP32[HEAP32[$2 + 12 >> 2] >> 2]);
  jsvUnLock(HEAP32[HEAP32[$2 + 12 >> 2] >> 2]);
  $0 = jsvLockSafe(HEAPU16[$2 + 6 >> 1]);
  HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = $0;
 }
 global$0 = $2 + 16 | 0;
}
function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $4 = $2 >>> 16;
 $5 = $0 >>> 16;
 $9 = Math_imul($4, $5);
 $6 = $2 & 65535;
 $7 = $0 & 65535;
 $8 = Math_imul($6, $7);
 $5 = ($8 >>> 16) + Math_imul($5, $6) | 0;
 $4 = ($5 & 65535) + Math_imul($4, $7) | 0;
 $0 = (((Math_imul($1, $2) + $9 | 0) + Math_imul($0, $3) | 0) + ($5 >>> 16) | 0) + ($4 >>> 16) | 0;
 $1 = $8 & 65535 | $4 << 16;
 i64toi32_i32$HIGH_BITS = $0;
 return $1;
}
function lcdGetPixel_ArrayBuffer_flat8($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
 $0 = HEAP32[$3 + 12 >> 2];
 return HEAPU8[$1 + (HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) | 0) | 0];
}
function flatbuffers__IndirectHelper_long_20long___Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 3) | 0;
 $3 = HEAP32[$1 + 4 >> 2];
 $0 = global$0 - 16 | 0;
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 12 >> 2] = $3;
 global$0 = $2 + 16 | 0;
 i64toi32_i32$HIGH_BITS = HEAP32[$0 + 12 >> 2];
 return HEAP32[$0 + 8 >> 2];
}
function jsvArrayBufferIteratorHasElement($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!HEAPU16[HEAP32[$1 + 8 >> 2] + 20 >> 1]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  if (HEAP8[HEAP32[$1 + 8 >> 2] + 36 | 0] & 1) {
   HEAP8[$1 + 15 | 0] = 1;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAP32[HEAP32[$1 + 8 >> 2] + 28 >> 2] + (HEAPU16[HEAP32[$1 + 8 >> 2] + 20 >> 1] & 15) >>> 0 <= HEAPU32[HEAP32[$1 + 8 >> 2] + 24 >> 2];
 }
 return HEAP8[$1 + 15 | 0] & 1;
}
function jsfGetAddressOfNextPage($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!(jshFlashGetPage(HEAP32[$1 + 8 >> 2], $1 + 4 | 0, $1) & 1)) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 4 >> 2] + HEAP32[$1 >> 2];
  if (HEAPU32[$1 + 8 >> 2] >= 134479872) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function heatshrink_ptr_input_cb($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 8 >> 2];
 label$1 : {
  if (!HEAP32[HEAP32[$1 + 4 >> 2] + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = -1;
   break label$1;
  }
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = HEAP32[$2 >> 2];
  HEAP32[$2 >> 2] = $0 + 1;
  HEAP32[$1 + 12 >> 2] = HEAPU8[$0 | 0];
 }
 return HEAP32[$1 + 12 >> 2];
}
function jshGetPinFromVar($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!(!(jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) | HEAP8[HEAP32[$1 + 8 >> 2] + 5 | 0])) {
   HEAP8[$1 + 15 | 0] = jshGetPinFromString(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  if (jsvIsInt(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP8[$1 + 15 | 0] = jsvGetInteger(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = 255;
 }
 global$0 = $1 + 16 | 0;
 return HEAPU8[$1 + 15 | 0];
}
function jsvSetNamedChild($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = 37088;
 HEAP32[$2 + 12 >> 2] = jsvFindChildFromString(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 16 >> 2], 1);
 label$1 : {
  if (HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 28 >> 2] = jsvSetValueOfName(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2]);
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 global$0 = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}
function jswrap_espruino_setBootCode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 label$1 : {
  if (jsvIsString(HEAP32[$2 + 12 >> 2]) & 1) {
   HEAP32[$2 + 12 >> 2] = jsvLockAgain(HEAP32[$2 + 12 >> 2]);
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvNewFromEmptyString();
 }
 jsfSaveBootCodeToFlash(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
 jsvUnLock(HEAP32[$2 + 12 >> 2]);
 global$0 = $2 + 16 | 0;
}
function jsvArrayBufferIteratorDataToFloat($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = HEAPU16[HEAP32[$2 + 28 >> 2] + 20 >> 1] & 15;
 HEAPF64[$2 + 8 >> 3] = 0;
 label$1 : {
  if (HEAP32[$2 + 20 >> 2] == 4) {
   HEAPF64[$2 + 8 >> 3] = HEAPF32[HEAP32[$2 + 24 >> 2] >> 2];
   break label$1;
  }
  if (HEAP32[$2 + 20 >> 2] == 8) {
   HEAPF64[$2 + 8 >> 3] = HEAPF64[HEAP32[$2 + 24 >> 2] >> 3];
  }
 }
 return HEAPF64[$2 + 8 >> 3];
}
function jsiHandleIOEventForConsole($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = ((HEAPU8[HEAP32[$1 + 12 >> 2]] & 96) >> 5) + 1;
 jsiSetBusy(1, 1);
 HEAP32[$1 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 8 >> 2] < HEAP32[$1 + 4 >> 2]) {
   jsiHandleChar(HEAP8[HEAP32[$1 + 8 >> 2] + (HEAP32[$1 + 12 >> 2] + 1 | 0) | 0]);
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 jsiSetBusy(1, 0);
 global$0 = $1 + 16 | 0;
}
function jsvIsInternalObjectKey($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = jsvIsString(HEAP32[$1 + 12 >> 2]) & 1;
 $0 = 0;
 if ($2) {
  $0 = 1;
  label$2 : {
   if (HEAP8[HEAP32[$1 + 12 >> 2]] == -1) {
    break label$2;
   }
   $2 = jsvIsStringEqual(HEAP32[$1 + 12 >> 2], 3316) & 1;
   $0 = 1;
   if ($2) {
    break label$2;
   }
   $0 = jsvIsStringEqual(HEAP32[$1 + 12 >> 2], 3326);
  }
 }
 global$0 = $1 + 16 | 0;
 return $0 & 1;
}
function jswrap_tfmicrointerpreter_getOutput($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jswrap_tfmicrointerpreter_getTFMI(HEAP32[$1 + 8 >> 2]);
 label$1 : {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jswrap_tfmicrointerpreter_tensorToArrayBuffer(HEAP32[$1 + 8 >> 2], tf_get_output(HEAP32[$1 + 4 >> 2]));
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsiExecuteObjectCallbacks($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = jsvObjectGetChild(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2], 0);
 if (HEAP32[$2 + 12 >> 2]) {
  jsiExecuteEventCallback(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2]);
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
 }
 global$0 = $2 + 32 | 0;
}
function fflush($0) {
 $0 = $0 | 0;
 var $1 = 0;
 if ($0) {
  if (HEAP32[$0 + 76 >> 2] <= -1) {
   return __fflush_unlocked($0) | 0;
  }
  return __fflush_unlocked($0) | 0;
 }
 if (HEAP32[13668]) {
  $1 = fflush(HEAP32[13668]);
 }
 __lock(253080);
 $0 = HEAP32[63272];
 if ($0) {
  while (1) {
   if (HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2]) {
    $1 = __fflush_unlocked($0) | $1;
   }
   $0 = HEAP32[$0 + 56 >> 2];
   if ($0) {
    continue;
   }
   break;
  }
 }
 __unlock(253080);
 return $1 | 0;
}
function jsiQueueObjectCallbacks($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = jsvObjectGetChild(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], 0);
 if (HEAP32[$4 + 12 >> 2]) {
  jsiQueueEvents(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 12 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
  jsvUnLock(HEAP32[$4 + 12 >> 2]);
 }
 global$0 = $4 + 32 | 0;
}
function jswrap_tfmicrointerpreter_getInput($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jswrap_tfmicrointerpreter_getTFMI(HEAP32[$1 + 8 >> 2]);
 label$1 : {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jswrap_tfmicrointerpreter_tensorToArrayBuffer(HEAP32[$1 + 8 >> 2], tf_get_input(HEAP32[$1 + 4 >> 2]));
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jswrap_array_findIndex($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = _jswrap_array_iterate_with_callback(30522, HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2], 0, 3, 1, 1);
 label$1 : {
  if (HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvNewFromInteger(-1);
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function tflite__ops__micro__elementwise___28anonymous_20namespace_29__SqrtEval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = tflite__ops__micro__elementwise___28anonymous_20namespace_29__EvalNumeric_28TfLiteContext__2c_20TfLiteNode__2c_20float_20_28__29_28float_29_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 633);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function tflite__ops__micro__elementwise___28anonymous_20namespace_29__SinEval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = tflite__ops__micro__elementwise___28anonymous_20namespace_29__EvalNumeric_28TfLiteContext__2c_20TfLiteNode__2c_20float_20_28__29_28float_29_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 630);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function tflite__ops__micro__elementwise___28anonymous_20namespace_29__LogEval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = tflite__ops__micro__elementwise___28anonymous_20namespace_29__EvalNumeric_28TfLiteContext__2c_20TfLiteNode__2c_20float_20_28__29_28float_29_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 632);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function tflite__ops__micro__elementwise___28anonymous_20namespace_29__CosEval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = tflite__ops__micro__elementwise___28anonymous_20namespace_29__EvalNumeric_28TfLiteContext__2c_20TfLiteNode__2c_20float_20_28__29_28float_29_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 631);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function tflite__ops__micro__elementwise___28anonymous_20namespace_29__AbsEval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = tflite__ops__micro__elementwise___28anonymous_20namespace_29__EvalNumeric_28TfLiteContext__2c_20TfLiteNode__2c_20float_20_28__29_28float_29_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 629);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function tflite__ActivationFunctionWithMinMax_28float_2c_20float_2c_20float_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 $4 = $3 + 4 | 0;
 HEAPF32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $0 = HEAPF32[float_20const__20std____2__min_float__28float_20const__2c_20float_20const__29(float_20const__20std____2__max_float__28float_20const__2c_20float_20const__29($3 + 12 | 0, $3 + 8 | 0), $4) >> 2];
 global$0 = $3 + 16 | 0;
 return $0;
}
function tflite__QuantizeMultiplierGreaterThanOne_28double_2c_20int__2c_20int__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAPF64[$3 + 8 >> 3] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 if (!(HEAPF64[$3 + 8 >> 3] > 1)) {
  abort();
  abort();
 }
 tflite__QuantizeMultiplier_28double_2c_20int__2c_20int__29(HEAPF64[$3 + 8 >> 3], HEAP32[$3 + 4 >> 2], HEAP32[$3 >> 2]);
 if (HEAP32[HEAP32[$3 >> 2] >> 2] < 0) {
  abort();
  abort();
 }
 global$0 = $3 + 16 | 0;
}
function push_literal_byte($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP16[$2 + 6 >> 1] = HEAPU16[HEAP32[$2 + 12 >> 2] + 2 >> 1] - 1;
 HEAP16[$2 + 4 >> 1] = (get_input_offset(HEAP32[$2 + 12 >> 2]) & 65535) + HEAPU16[$2 + 6 >> 1];
 HEAP8[$2 + 3 | 0] = HEAPU8[HEAPU16[$2 + 4 >> 1] + (HEAP32[$2 + 12 >> 2] + 15 | 0) | 0];
 push_bits(HEAP32[$2 + 12 >> 2], 8, HEAPU8[$2 + 3 | 0], HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
}
function jspGetStackTrace() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 8 >> 2] = jsvFindChildFromString(HEAP32[23775], 3760, 0);
 label$1 : {
  if (HEAP32[$0 + 8 >> 2]) {
   HEAP32[$0 + 4 >> 2] = jsvSkipName(HEAP32[$0 + 8 >> 2]);
   jsvRemoveChild(HEAP32[23775], HEAP32[$0 + 8 >> 2]);
   jsvUnLock(HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function tflite__RuntimeShape__operator___28tflite__RuntimeShape_20const__29_20const($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = 0;
 $1 = HEAP32[$2 + 12 >> 2];
 if (HEAP32[$1 >> 2] == HEAP32[HEAP32[$2 + 8 >> 2] >> 2]) {
  $0 = !memcmp(tflite__RuntimeShape__DimsData_28_29_20const($1), tflite__RuntimeShape__DimsData_28_29_20const(HEAP32[$2 + 8 >> 2]), HEAP32[$1 >> 2] << 2);
 }
 global$0 = $2 + 16 | 0;
 return $0 & 1;
}
function tflite__ElementCount_28TfLiteIntArray_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 1;
 HEAP32[$1 + 4 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 4 >> 2] < HEAP32[HEAP32[$1 + 12 >> 2] >> 2]) {
   HEAP32[$1 + 8 >> 2] = Math_imul(HEAP32[(HEAP32[$1 + 12 >> 2] + 4 | 0) + (HEAP32[$1 + 4 >> 2] << 2) >> 2], HEAP32[$1 + 8 >> 2]);
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 return HEAP32[$1 + 8 >> 2];
}
function terminalGetGFX($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jswrap_graphics_getInstance();
 label$1 : {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  if (graphicsGetFromVar(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]) & 1) {
   HEAP8[$1 + 15 | 0] = 1;
   break label$1;
  }
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  HEAP8[$1 + 15 | 0] = 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}
function jshGetEventFlagsForPin($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP8[$1 + 14 | 0] = $0;
 HEAP32[$1 + 8 >> 2] = 0;
 label$1 : {
  while (1) {
   if (HEAP32[$1 + 8 >> 2] < 16) {
    if (HEAPU8[HEAP32[$1 + 8 >> 2] + 251232 | 0] == HEAPU8[$1 + 14 | 0]) {
     HEAP8[$1 + 15 | 0] = HEAP32[$1 + 8 >> 2] + 1;
     break label$1;
    } else {
     HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  HEAP8[$1 + 15 | 0] = 0;
 }
 return HEAPU8[$1 + 15 | 0];
}
function jsvStringIteratorAppendString($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 jsvStringIteratorNew($3, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
 while (1) {
  if (jsvStringIteratorHasChar($3) & 1) {
   jsvStringIteratorAppend(HEAP32[$3 + 28 >> 2], jsvStringIteratorGetCharAndNext($3) << 24 >> 24);
   continue;
  }
  break;
 }
 jsvStringIteratorFree($3);
 global$0 = $3 + 32 | 0;
}
function jswrap_promise_then($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 _jswrap_promise_add(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 1);
 if (HEAP32[$3 + 4 >> 2]) {
  _jswrap_promise_add(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 4 >> 2], 0);
 }
 $0 = jswrap_promise_get_chained_promise(HEAP32[$3 + 12 >> 2]);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function jspFindPrototypeFor($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jsvObjectGetChild(HEAP32[23774], HEAP32[$1 + 8 >> 2], 0);
 label$1 : {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 >> 2] = jsvObjectGetChild(HEAP32[$1 + 4 >> 2], 3674, 0);
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsiReplaceInputLine($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (jsiShowInputLine() & 1) {
  jsiMoveCursorChar(HEAP32[23784], HEAP32[23786], 0);
  jsiConsolePrintString(5202);
  jsiConsolePrintStringVarWithNewLineChar(HEAP32[$1 + 12 >> 2], 0, 58);
 }
 jsiInputLineCursorMoved();
 jsvUnLock(HEAP32[23784]);
 HEAP32[23784] = jsvLockAgain(HEAP32[$1 + 12 >> 2]);
 HEAP32[23786] = jsvGetStringLength(HEAP32[23784]);
 global$0 = $1 + 16 | 0;
}
function jsvNewNativeFunction($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP16[$2 + 6 >> 1] = $1;
 HEAP32[$2 >> 2] = jsvNewWithFlags(71);
 label$1 : {
  if (!HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP16[HEAP32[$2 >> 2] + 4 >> 1] = HEAPU16[$2 + 6 >> 1];
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function jsvIsIntegerish($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvIsInt(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = 1;
 label$1 : {
  if ($0) {
   break label$1;
  }
  $0 = jsvIsPin(HEAP32[$1 + 12 >> 2]) & 1;
  $2 = 1;
  if ($0) {
   break label$1;
  }
  $0 = jsvIsBoolean(HEAP32[$1 + 12 >> 2]) & 1;
  $2 = 1;
  if ($0) {
   break label$1;
  }
  $2 = jsvIsNull(HEAP32[$1 + 12 >> 2]);
 }
 $0 = $2;
 global$0 = $1 + 16 | 0;
 return $0 & 1;
}
function tflite__MultiplyByQuantizedMultiplierSmallerThanOneExp_28int_2c_20int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(int_20gemmlowp__SaturatingRoundingDoublingHighMul_int__28int_2c_20int_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]), 0 - HEAP32[$3 + 4 >> 2] | 0);
 global$0 = $3 + 16 | 0;
 return $0;
}
function jsvArrayBufferIteratorSetValueAndRewind($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 jsvStringIteratorClone($2, HEAP32[$2 + 28 >> 2]);
 jsvArrayBufferIteratorSetValue(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]);
 jsvStringIteratorFree(HEAP32[$2 + 28 >> 2]);
 jsvStringIteratorClone(HEAP32[$2 + 28 >> 2], $2);
 jsvStringIteratorFree($2);
 HEAP8[HEAP32[$2 + 28 >> 2] + 36 | 0] = 0;
 global$0 = $2 + 32 | 0;
}
function _jswrap_promise_queueresolve($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvNewNativeFunction(539, 32776);
 if (HEAP32[$2 + 4 >> 2]) {
  $0 = $2 + 8 | 0;
  jsvObjectSetChild(HEAP32[$2 + 4 >> 2], 36555, HEAP32[$2 + 12 >> 2]);
  jsiQueueEvents(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], $0, 1);
  jsvUnLock(HEAP32[$2 + 4 >> 2]);
 }
 global$0 = $2 + 16 | 0;
}
function jsvIsNewChild($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = !(jsvIsName(HEAP32[$1 + 12 >> 2]) & 1);
 $2 = 0;
 label$1 : {
  if ($0) {
   break label$1;
  }
  $0 = !(jsvGetNextSibling(HEAP32[$1 + 12 >> 2]) & 65535);
  $2 = 0;
  if ($0) {
   break label$1;
  }
  $2 = (jsvGetNextSibling(HEAP32[$1 + 12 >> 2]) & 65535) == (jsvGetPrevSibling(HEAP32[$1 + 12 >> 2]) & 65535);
 }
 $0 = $2;
 global$0 = $1 + 16 | 0;
 return $0 & 1;
}
function _jswrap_promise_queuereject($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvNewNativeFunction(538, 32776);
 if (HEAP32[$2 + 4 >> 2]) {
  $0 = $2 + 8 | 0;
  jsvObjectSetChild(HEAP32[$2 + 4 >> 2], 36555, HEAP32[$2 + 12 >> 2]);
  jsiQueueEvents(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], $0, 1);
  jsvUnLock(HEAP32[$2 + 4 >> 2]);
 }
 global$0 = $2 + 16 | 0;
}
function jswrap_espruino_memoryArea($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1 : {
  if (HEAP32[$2 + 4 >> 2] < 0) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 >> 2] = jshFlashGetMemMapAddress(HEAP32[$2 + 8 >> 2]);
  HEAP32[$2 + 12 >> 2] = jsvNewNativeString(HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]);
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function jspExecuteJSFunction($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = 0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = jspEvaluate(HEAP32[$3 + 28 >> 2]);
 HEAP32[$3 + 8 >> 2] = jspExecuteFunction(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
 jsvUnLock(HEAP32[$3 + 12 >> 2]);
 global$0 = $3 + 32 | 0;
 return HEAP32[$3 + 8 >> 2];
}
function jshSleep($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $1;
 HEAPF64[$2 >> 3] = jshGetMillisecondsFromTime(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
 if (HEAPF64[$2 >> 3] > 2147483647) {
  HEAPF64[$2 >> 3] = 2147483647;
 }
 $3 = HEAPF64[$2 >> 3];
 label$2 : {
  if (Math_abs($3) < 2147483648) {
   $0 = ~~$3;
   break label$2;
  }
  $0 = -2147483648;
 }
 HEAP32[13342] = $0;
 global$0 = $2 + 16 | 0;
}
function hexToByte($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 11 | 0] = $0;
 HEAP8[$2 + 10 | 0] = $1;
 HEAP32[$2 + 4 >> 2] = chtod(HEAP8[$2 + 11 | 0]);
 HEAP32[$2 >> 2] = chtod(HEAP8[$2 + 10 | 0]);
 label$1 : {
  if (!(HEAP32[$2 >> 2] >= 0 ? HEAP32[$2 + 4 >> 2] >= 0 : 0)) {
   HEAP32[$2 + 12 >> 2] = -1;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2] | HEAP32[$2 + 4 >> 2] << 4;
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function tflite__ops__micro__elementwise___28anonymous_20namespace_29__RsqrtEval_28TfLiteContext__2c_20TfLiteNode__29__$_0____invoke_28float_29($0) {
 $0 = Math_fround($0);
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAPF32[$1 + 12 >> 2] = $0;
 $0 = tflite__ops__micro__elementwise___28anonymous_20namespace_29__RsqrtEval_28TfLiteContext__2c_20TfLiteNode__29__$_0__operator_28_29_28float_29_20const(HEAPF32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return Math_fround($0);
}
function jsvIterateCallbackToBytesCb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 if (HEAPU32[HEAP32[$2 + 4 >> 2] + 4 >> 2] < HEAPU32[HEAP32[$2 + 4 >> 2] + 8 >> 2]) {
  HEAP8[HEAP32[HEAP32[$2 + 4 >> 2] >> 2] + HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2] | 0] = HEAP32[$2 + 12 >> 2];
 }
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
}
function jsiAppendToInputLine($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (!HEAP32[23793]) {
  jsvStringIteratorNew(95160, HEAP32[23784], 0);
  jsvStringIteratorGotoEnd(95160);
 }
 while (1) {
  if (HEAPU8[HEAP32[$1 + 12 >> 2]]) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$1 + 12 >> 2] = $0 + 1;
   jsvStringIteratorAppend(95160, HEAP8[$0 | 0]);
   HEAP32[13341] = HEAP32[13341] + 1;
   continue;
  }
  break;
 }
 global$0 = $1 + 16 | 0;
}
function st_tag_bit($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = get_bits(HEAP32[$1 + 8 >> 2], 1) & 65535;
 label$1 : {
  if (HEAP32[$1 + 4 >> 2] == 65535) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 1;
   break label$1;
  }
  HEAP16[HEAP32[$1 + 8 >> 2] + 6 >> 1] = 0;
  HEAP32[$1 + 12 >> 2] = 3;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jswrap_regexp_test($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jswrap_regexp_exec(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2;
 if (HEAP32[$2 + 4 >> 2]) {
  $1 = jsvIsNull(HEAP32[$2 + 4 >> 2]) ^ -1;
 } else {
  $1 = 0;
 }
 HEAP8[$0 + 3 | 0] = $1 & 1;
 jsvUnLock(HEAP32[$2 + 4 >> 2]);
 global$0 = $2 + 16 | 0;
 return HEAP8[$2 + 3 | 0] & 1;
}
function jswrap_banglejs_setCompassPower($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = $0;
 HEAP8[251288] = HEAP8[$1 + 15 | 0] & 1;
 jswrap_banglejs_compassWr(49, HEAP8[$1 + 15 | 0] & 1 ? 8 : 0);
 HEAP16[125645] = 0;
 HEAP16[125646] = 0;
 HEAP16[125647] = 0;
 HEAP16[125648] = 32767;
 HEAP16[125649] = 32767;
 HEAP16[125650] = 32767;
 HEAP16[125651] = 32768;
 HEAP16[125652] = 32768;
 HEAP16[125653] = 32768;
 global$0 = $1 + 16 | 0;
}
function jshGetTimeFromMilliseconds($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = HEAPF64[$1 + 8 >> 3] * 1e3;
 label$1 : {
  if (Math_abs($0) < 0x8000000000000000) {
   $2 = Math_abs($0) >= 1 ? $0 > 0 ? ~~Math_min(Math_floor($0 / 4294967296), 4294967295) >>> 0 : ~~Math_ceil(($0 - +(~~$0 >>> 0 >>> 0)) / 4294967296) >>> 0 : 0;
   $1 = ~~$0 >>> 0;
   break label$1;
  }
  $2 = -2147483648;
  $1 = 0;
 }
 i64toi32_i32$HIGH_BITS = $2;
 return $1;
}
function std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 global$0 = $1 + 16 | 0;
 return $0;
}
function jswrap_eval($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = jsvAsString(HEAP32[$1 + 8 >> 2]);
  HEAP32[$1 >> 2] = jspEvaluateVar(HEAP32[$1 + 4 >> 2], HEAP32[23777], 0);
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function st_backref_index_msb($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP8[$1 + 7 | 0] = 8;
 HEAP16[$1 + 4 >> 1] = get_bits(HEAP32[$1 + 8 >> 2], HEAPU8[$1 + 7 | 0] - 8 & 255);
 label$1 : {
  if (HEAPU16[$1 + 4 >> 1] == 65535) {
   HEAP32[$1 + 12 >> 2] = 2;
   break label$1;
  }
  HEAP16[HEAP32[$1 + 8 >> 2] + 6 >> 1] = HEAPU16[$1 + 4 >> 1] << 8;
  HEAP32[$1 + 12 >> 2] = 3;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function st_backref_count_msb($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP8[$1 + 7 | 0] = 6;
 HEAP16[$1 + 4 >> 1] = get_bits(HEAP32[$1 + 8 >> 2], HEAPU8[$1 + 7 | 0] - 8 & 255);
 label$1 : {
  if (HEAPU16[$1 + 4 >> 1] == 65535) {
   HEAP32[$1 + 12 >> 2] = 4;
   break label$1;
  }
  HEAP16[HEAP32[$1 + 8 >> 2] + 4 >> 1] = HEAPU16[$1 + 4 >> 1] << 8;
  HEAP32[$1 + 12 >> 2] = 5;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph__20___Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__Operator__20___Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_int___Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0;
}
function jsvGetLinesInString($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = 1;
 jsvStringIteratorNew($1, HEAP32[$1 + 28 >> 2], 0);
 while (1) {
  if (jsvStringIteratorHasChar($1) & 1) {
   if ((jsvStringIteratorGetCharAndNext($1) & 255) == 10) {
    HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + 1;
   }
   continue;
  }
  break;
 }
 jsvStringIteratorFree($1);
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 24 >> 2];
}
function jshPinInput($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = $0;
 HEAP8[$1 + 14 | 0] = 0;
 label$1 : {
  if (jshIsPinValid(HEAPU8[$1 + 15 | 0]) & 1) {
   if (!(jshGetPinStateIsManual(HEAPU8[$1 + 15 | 0]) & 1)) {
    jshPinSetState(HEAPU8[$1 + 15 | 0], 4);
   }
   HEAP8[$1 + 14 | 0] = jshPinGetValue(HEAPU8[$1 + 15 | 0]) & 1;
   break label$1;
  }
  jsExceptionHere(1, 5070, 0);
 }
 global$0 = $1 + 16 | 0;
 return HEAP8[$1 + 14 | 0] & 1;
}
function isWhitespace($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = 1;
 label$1 : {
  if (HEAP8[$1 + 15 | 0] == 9) {
   break label$1;
  }
  $0 = 1;
  if (HEAP8[$1 + 15 | 0] == 11) {
   break label$1;
  }
  $0 = 1;
  if (HEAP8[$1 + 15 | 0] == 12) {
   break label$1;
  }
  $0 = 1;
  if (HEAP8[$1 + 15 | 0] == 32) {
   break label$1;
  }
  $0 = 1;
  if (HEAP8[$1 + 15 | 0] == 10) {
   break label$1;
  }
  $0 = HEAP8[$1 + 15 | 0] == 13;
 }
 return $0;
}
function tflite__RuntimeShape__ReplaceWith_28int_2c_20int_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 tflite__RuntimeShape__Resize_28int_29($0, HEAP32[$3 + 8 >> 2]);
 HEAP32[$3 >> 2] = tflite__RuntimeShape__DimsData_28_29_20const($0);
 memcpy(HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2], HEAP32[$3 + 8 >> 2] << 2);
 global$0 = $3 + 16 | 0;
}
function jspGetPrototypeOwner($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  label$2 : {
   if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
    if (!(jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1)) {
     break label$2;
    }
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipNameAndUnLock(jsvObjectGetChild(HEAP32[$1 + 8 >> 2], 4362, 0));
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jswrap_json_parse($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 160 | 0;
 global$0 = $1;
 $2 = $1 + 24 | 0;
 HEAP32[$1 + 156 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = jsvAsString(HEAP32[$1 + 156 >> 2]);
 HEAP32[$1 + 16 >> 2] = jslSetLex($2);
 jslInit(HEAP32[$1 + 20 >> 2]);
 jsvUnLock(HEAP32[$1 + 20 >> 2]);
 HEAP32[$1 + 12 >> 2] = jswrap_json_parse_internal();
 jslKill();
 jslSetLex(HEAP32[$1 + 16 >> 2]);
 global$0 = $1 + 160 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsvGetArrayBufferBackingString($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvLockAgain(HEAP32[$1 + 12 >> 2]);
 while (1) {
  if (jsvIsArrayBuffer(HEAP32[$1 + 12 >> 2]) & 1) {
   HEAP32[$1 + 8 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535);
   jsvUnLock(HEAP32[$1 + 12 >> 2]);
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
   continue;
  }
  break;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function tflite__ops__micro__elementwise___28anonymous_20namespace_29__SquareEval_28TfLiteContext__2c_20TfLiteNode__29__$_1____invoke_28float_29($0) {
 $0 = Math_fround($0);
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAPF32[$1 + 12 >> 2] = $0;
 $0 = HEAPF32[$1 + 12 >> 2];
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAPF32[$2 + 8 >> 2] = $0;
 global$0 = $1 + 16 | 0;
 return Math_fround(Math_fround(HEAPF32[$2 + 8 >> 2] * HEAPF32[$2 + 8 >> 2]));
}
function jswIdle() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP8[$0 + 15 | 0] = 0;
 if (jswrap_banglejs_idle() & 1) {
  HEAP8[$0 + 15 | 0] = 1;
 }
 if (jswrap_pipe_idle() & 1) {
  HEAP8[$0 + 15 | 0] = 1;
 }
 if (jsserialEventCallbackIdle() & 1) {
  HEAP8[$0 + 15 | 0] = 1;
 }
 if (jswrap_waveform_idle() & 1) {
  HEAP8[$0 + 15 | 0] = 1;
 }
 if (jswrap_terminal_idle() & 1) {
  HEAP8[$0 + 15 | 0] = 1;
 }
 global$0 = $0 + 16 | 0;
 return HEAP8[$0 + 15 | 0] & 1;
}
function pad($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = global$0 - 256 | 0;
 global$0 = $5;
 if (!($4 & 73728 | ($2 | 0) <= ($3 | 0))) {
  $4 = $2 - $3 | 0;
  $6 = $4 >>> 0 < 256;
  memset($5, $1, $6 ? $4 : 256);
  $1 = $0;
  $7 = $5;
  if (!$6) {
   $2 = $2 - $3 | 0;
   while (1) {
    out($0, $5, 256);
    $4 = $4 + -256 | 0;
    if ($4 >>> 0 > 255) {
     continue;
    }
    break;
   }
   $4 = $2 & 255;
  }
  out($1, $7, $4);
 }
 global$0 = $5 + 256 | 0;
}
function _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = $1 >> 31;
 $0 = $0 ^ $3;
 $5 = $0 - $3 | 0;
 $4 = $1 >> 31;
 $3 = ($4 ^ $1) - (($0 >>> 0 < $3 >>> 0) + $4 | 0) | 0;
 $0 = $2;
 $2 = __wasm_i64_udiv($5, $3, $0, 0 - ($0 >>> 0 < 0) | 0);
 $0 = $1 >> 31;
 $2 = $2 ^ $0;
 $3 = $2 - $0 | 0;
 $1 = $1 >> 31;
 i64toi32_i32$HIGH_BITS = ($1 ^ i64toi32_i32$HIGH_BITS) - (($2 >>> 0 < $0 >>> 0) + $1 | 0) | 0;
 return $3;
}
function tflite__ops__micro__conv__RuntimePaddingType_28TfLitePadding_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 label$1 : {
  if ($0 >>> 0 <= 2) {
   label$3 : {
    switch ($0 - 1 | 0) {
    case 0:
     HEAP8[$1 + 15 | 0] = 1;
     break label$1;
    case 1:
     HEAP8[$1 + 15 | 0] = 2;
     break label$1;
    default:
     break label$3;
    }
   }
  }
  HEAP8[$1 + 15 | 0] = 0;
 }
 return HEAPU8[$1 + 15 | 0];
}
function jswrap_serial_setConsole($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP8[$2 + 10 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 12 >> 2]);
 label$1 : {
  if (!(HEAPU8[$2 + 10 | 0] < 17 | HEAPU8[$2 + 10 | 0] > 22)) {
   jsiSetConsoleDevice(HEAPU8[$2 + 10 | 0], HEAP8[$2 + 11 | 0] & 1);
   break label$1;
  }
  jsExceptionHere(1, 36822, 0);
 }
 global$0 = $2 + 16 | 0;
}
function jswrap_onewire_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 11 | 0] = $0;
 HEAP32[$1 + 4 >> 2] = jspNewObject(0, 35845);
 label$1 : {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 4 >> 2], 35853, jsvNewFromPin(HEAPU8[$1 + 11 | 0]));
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 global$0 = $2 + 16 | 0;
 return $0;
}
function jswrap_promise_all_reject($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvObjectGetChild(HEAP32[$2 + 12 >> 2], 36612, 0);
 if (HEAP32[$2 + 4 >> 2]) {
  jsvUnLock(HEAP32[$2 + 4 >> 2]);
  jsvObjectRemoveChild(HEAP32[$2 + 12 >> 2], 36612);
  _jswrap_promise_queuereject(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 }
 global$0 = $2 + 16 | 0;
}
function tflite__EnumNameBuiltinOperator_28tflite__BuiltinOperator_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!(HEAP32[$1 + 8 >> 2] <= 121 ? HEAP32[$1 + 8 >> 2] >= 0 : 0)) {
   HEAP32[$1 + 12 >> 2] = 40311;
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAP32[(HEAP32[$1 + 4 >> 2] << 2) + 40320 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsvAppendString($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 jsvStringIteratorNew($2, HEAP32[$2 + 28 >> 2], 0);
 jsvStringIteratorGotoEnd($2);
 while (1) {
  if (HEAPU8[HEAP32[$2 + 24 >> 2]]) {
   $0 = HEAP32[$2 + 24 >> 2];
   HEAP32[$2 + 24 >> 2] = $0 + 1;
   jsvStringIteratorAppend($2, HEAP8[$0 | 0]);
   continue;
  }
  break;
 }
 jsvStringIteratorFree($2);
 global$0 = $2 + 32 | 0;
}
function jshPinGetValue($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = $0;
 HEAP8[$1 + 12 | 0] = 105;
 HEAP8[$1 + 13 | 0] = 0;
 HEAP32[$1 >> 2] = HEAPU8[$1 + 15 | 0];
 HEAP8[$1 + 14 | 0] = (emscripten_asm_const_iii(27828, $1 + 12 | 0, $1 | 0) | 0) != 0;
 if (HEAPU8[Math_imul(HEAPU8[$1 + 15 | 0], 3) + 27904 | 0] & 16) {
  HEAP8[$1 + 14 | 0] = (HEAPU8[$1 + 14 | 0] ^ -1) & 1;
 }
 global$0 = $1 + 16 | 0;
 return HEAP8[$1 + 14 | 0] & 1;
}
function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SaturatingRoundingMultiplyByPOT__2_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(int_20gemmlowp__SaturatingRoundingMultiplyByPOT__2_2c_20int__28int_29(HEAP32[jshFlashGetMemMapAddress($1) >> 2]));
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SaturatingRoundingMultiplyByPOT__1_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(int_20gemmlowp__SaturatingRoundingMultiplyByPOT__1_2c_20int__28int_29(HEAP32[jshFlashGetMemMapAddress($1) >> 2]));
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function jsfGetJSONWhitespace($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 48 | 0;
 global$0 = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP32[$4 + 32 >> 2] = $3;
 $0 = $4 + 8 | 0;
 jsvStringIteratorNew($0, HEAP32[$4 + 40 >> 2], 0);
 jsvStringIteratorGotoEnd($0);
 jsfGetJSONWithCallback(HEAP32[$4 + 44 >> 2], 0, HEAP32[$4 + 36 >> 2], HEAP32[$4 + 32 >> 2], 4, $0);
 jsvStringIteratorFree($0);
 global$0 = $4 + 48 | 0;
}
function jswrap_number_toFixed($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 80 | 0;
 global$0 = $2;
 HEAP32[$2 + 76 >> 2] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 if (HEAP32[$2 + 72 >> 2] < 0) {
  HEAP32[$2 + 72 >> 2] = 0;
 }
 if (HEAP32[$2 + 72 >> 2] > 20) {
  HEAP32[$2 + 72 >> 2] = 20;
 }
 ftoa_bounded_extra(jsvGetFloat(HEAP32[$2 + 76 >> 2]), $2, 70, 10, HEAP32[$2 + 72 >> 2]);
 $0 = jsvNewFromString($2);
 global$0 = $2 + 80 | 0;
 return $0 | 0;
}
function i2c_wr($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 4 >> 2] < 8) {
   i2c_wr_bit(HEAP32[$2 + 12 >> 2], (HEAP32[$2 + 8 >> 2] & 128) != 0);
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] << 1;
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 i2c_rd_bit(HEAP32[$2 + 12 >> 2]);
 global$0 = $2 + 16 | 0;
}
function int_20tflite__reference_ops__depthwise_conv__DepthwiseConvRound__28tflite__DepthwiseConvOutputRounding_291__28int_2c_20int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 16 | 0;
 return $0;
}
function flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__Operator__20___Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2);
 $0 = HEAP32[$2 + 12 >> 2] + flatbuffers__Vector_int___size_28_29_20const(HEAP32[$2 + 12 >> 2]) | 0;
 global$0 = $2 + 16 | 0;
 return $0;
}
function graphicsGetHeight($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 16) {
   $0 = HEAP32[$1 + 12 >> 2];
   $0 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8;
   break label$1;
  }
  $0 = HEAP32[$1 + 12 >> 2];
  $0 = HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8;
 }
 return $0;
}
function double_20const__20std____2__min_double__28double_20const__2c_20double_20const__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = double_20const__20std____2__min_double_2c_20std____2____less_double_2c_20double__20__28double_20const__2c_20double_20const__2c_20std____2____less_double_2c_20double__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0;
}
function jswrap_waveform_startInput($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP8[$4 + 27 | 0] = $1;
 HEAPF64[$4 + 16 >> 3] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 if (!(jshPinAnalog(HEAPU8[$4 + 27 | 0]) < 0)) {
  jswrap_waveform_start(HEAP32[$4 + 28 >> 2], HEAPU8[$4 + 27 | 0], HEAPF64[$4 + 16 >> 3], HEAP32[$4 + 12 >> 2], 0);
 }
 global$0 = $4 + 32 | 0;
}
function graphicsGetWidth($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 16) {
   $0 = HEAP32[$1 + 12 >> 2];
   $0 = HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8;
   break label$1;
  }
  $0 = HEAP32[$1 + 12 >> 2];
  $0 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8;
 }
 return $0;
}
function tflite__EspruinoErrorReporter__Report_28char_20const__2c_20void__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 288 | 0;
 global$0 = $3;
 HEAP32[$3 + 284 >> 2] = $0;
 HEAP32[$3 + 280 >> 2] = $1;
 HEAP32[$3 + 276 >> 2] = $2;
 $0 = $3 + 16 | 0;
 espruino_snprintf_va($0, 256, HEAP32[$3 + 280 >> 2], HEAP32[$3 + 276 >> 2]);
 HEAP32[$3 >> 2] = $0;
 jsExceptionHere(1, 49744, $3);
 global$0 = $3 + 288 | 0;
 return 0;
}
function jswrap_interface_setSleepIndicator($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = HEAPU8[53362];
 HEAP8[53362] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
 if (HEAPU8[53362] != HEAPU8[$1 + 11 | 0]) {
  if (HEAPU8[$1 + 11 | 0] != 255) {
   jshPinOutput(HEAPU8[$1 + 11 | 0], 0);
  }
  if (HEAPU8[53362] != 255) {
   jshPinOutput(HEAPU8[53362], 1);
  }
 }
 global$0 = $1 + 16 | 0;
}
function lcdST7789_blitStartRaw($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 HEAP32[24393] = -1;
 HEAP32[24394] = -1;
 HEAP32[24395] = HEAP32[$4 + 12 >> 2];
 HEAP32[24396] = HEAP32[$4 + 8 >> 2];
 HEAP32[24397] = HEAP32[$4 + 12 >> 2];
 HEAP32[24398] = HEAP32[$4 + 8 >> 2];
 HEAP32[24399] = HEAP32[$4 + 4 >> 2];
 HEAP32[24400] = HEAP32[$4 >> 2];
}
function jswrap_interface_setBusyIndicator($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = HEAPU8[53361];
 HEAP8[53361] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
 if (HEAPU8[53361] != HEAPU8[$1 + 11 | 0]) {
  if (HEAPU8[$1 + 11 | 0] != 255) {
   jshPinOutput(HEAPU8[$1 + 11 | 0], 0);
  }
  if (HEAPU8[53361] != 255) {
   jshPinOutput(HEAPU8[53361], 1);
  }
 }
 global$0 = $1 + 16 | 0;
}
function heatshrink_decode($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = HEAP32[$3 + 4 >> 2];
 $1 = HEAP32[$3 + 12 >> 2];
 $2 = HEAP32[$3 + 8 >> 2];
 $4 = HEAP32[$3 + 4 >> 2] ? 482 : 0;
 if (HEAP32[$3 + 4 >> 2]) {
  $0 = $3;
 } else {
  $0 = 0;
 }
 $0 = heatshrink_decode_cb($1, $2, $4, $0);
 global$0 = $3 + 16 | 0;
 return $0;
}
function jswrap_graphics_reset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 80 | 0;
 global$0 = $1;
 HEAP32[$1 + 72 >> 2] = $0;
 label$1 : {
  if (!(graphicsGetFromVar($1, HEAP32[$1 + 72 >> 2]) & 1)) {
   HEAP32[$1 + 76 >> 2] = 0;
   break label$1;
  }
  graphicsStructResetState($1);
  graphicsSetVar($1);
  HEAP32[$1 + 76 >> 2] = jswrap_graphics_setFontSizeX(HEAP32[$1 + 72 >> 2], 8193, 0);
 }
 global$0 = $1 + 80 | 0;
 return HEAP32[$1 + 76 >> 2];
}
function tflite__GetTemporary_28TfLiteContext__2c_20TfLiteNode__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[HEAP32[$3 + 12 >> 2] + 8 >> 2];
 $1 = jshFlashGetMemMapAddress(HEAP32[(HEAP32[HEAP32[$3 + 8 >> 2] + 12 >> 2] + 4 | 0) + (HEAP32[$3 + 4 >> 2] << 2) >> 2]);
 global$0 = $3 + 16 | 0;
 return $0 + Math_imul($1, 56) | 0;
}
function jsvStringIteratorGetCharOrMinusOne($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!(HEAPU32[HEAP32[$1 + 8 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 8 >> 2] + 4 >> 2] ? HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] : 0)) {
   HEAP32[$1 + 12 >> 2] = -1;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
 }
 return HEAP32[$1 + 12 >> 2];
}
function jslFunctionCharAsString($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = 32;
 label$1 : {
  if (HEAPU8[$2 + 15 | 0] >= 128) {
   jslTokenAsString(HEAPU8[$2 + 15 | 0], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
   break label$1;
  }
  HEAP8[HEAP32[$2 + 8 >> 2]] = HEAPU8[$2 + 15 | 0];
  HEAP8[HEAP32[$2 + 8 >> 2] + 1 | 0] = 0;
 }
 global$0 = $2 + 16 | 0;
}
function jshPinOutput($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 label$1 : {
  if (jshIsPinValid(HEAPU8[$2 + 15 | 0]) & 1) {
   jshPinSetValue(HEAPU8[$2 + 15 | 0], HEAP8[$2 + 14 | 0] & 1);
   if (!(jshGetPinStateIsManual(HEAPU8[$2 + 15 | 0]) & 1)) {
    jshPinSetState(HEAPU8[$2 + 15 | 0], 1);
   }
   break label$1;
  }
  jsExceptionHere(1, 5070, 0);
 }
 global$0 = $2 + 16 | 0;
}
function gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__Rescale_12_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $2 = $1 + 8 | 0;
 HEAP32[$1 >> 2] = $0;
 $0 = int_20gemmlowp__SaturatingRoundingMultiplyByPOT__12_2c_20int__28int_29(HEAP32[jshFlashGetMemMapAddress($1) >> 2]);
 HEAP32[jshFlashGetMemMapAddress($2) >> 2] = $0;
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function float_20const__20std____2__min_float__28float_20const__2c_20float_20const__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = float_20const__20std____2__min_float_2c_20std____2____less_float_2c_20float__20__28float_20const__2c_20float_20const__2c_20std____2____less_float_2c_20float__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0;
}
function float_20const__20std____2__max_float__28float_20const__2c_20float_20const__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = float_20const__20std____2__max_float_2c_20std____2____less_float_2c_20float__20__28float_20const__2c_20float_20const__2c_20std____2____less_float_2c_20float__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0;
}
function lcdInit_ArrayBuffer($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jswrap_arraybuffer_constructor(graphicsGetMemoryRequired(HEAP32[$1 + 12 >> 2]));
 $0 = HEAP32[$1 + 12 >> 2];
 jsvUnLock2(jsvAddNamedChild(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), HEAP32[$1 + 8 >> 2], 27664), HEAP32[$1 + 8 >> 2]);
 global$0 = $1 + 16 | 0;
}
function heatshrink_encoder_finish($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = -1;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$0 + 11 | 0] = HEAPU8[$0 + 11 | 0] | 1;
  if (!HEAPU8[HEAP32[$1 + 8 >> 2] + 12 | 0]) {
   HEAP8[HEAP32[$1 + 8 >> 2] + 12 | 0] = 1;
  }
  HEAP32[$1 + 12 >> 2] = HEAPU8[HEAP32[$1 + 8 >> 2] + 12 | 0] == 9 ? 0 : 1;
 }
}
function gemmlowp__FixedPoint_int_2c_202__20gemmlowp__Rescale_2_2c_20int_2c_204__28gemmlowp__FixedPoint_int_2c_204__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $2 = $1 + 8 | 0;
 HEAP32[$1 >> 2] = $0;
 $0 = int_20gemmlowp__SaturatingRoundingMultiplyByPOT_2_2c_20int__28int_29(HEAP32[jshFlashGetMemMapAddress($1) >> 2]);
 HEAP32[jshFlashGetMemMapAddress($2) >> 2] = $0;
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__Rescale_0_2c_20int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $2 = $1 + 8 | 0;
 HEAP32[$1 >> 2] = $0;
 $0 = int_20gemmlowp__SaturatingRoundingMultiplyByPOT_5_2c_20int__28int_29(HEAP32[jshFlashGetMemMapAddress($1) >> 2]);
 HEAP32[jshFlashGetMemMapAddress($2) >> 2] = $0;
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__Rescale_0_2c_20int_2c_201__28gemmlowp__FixedPoint_int_2c_201__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $2 = $1 + 8 | 0;
 HEAP32[$1 >> 2] = $0;
 $0 = int_20gemmlowp__SaturatingRoundingMultiplyByPOT_1_2c_20int__28int_29(HEAP32[jshFlashGetMemMapAddress($1) >> 2]);
 HEAP32[jshFlashGetMemMapAddress($2) >> 2] = $0;
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function std____2____compressed_pair_elem_TfLiteResizeNearestNeighborParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteResizeNearestNeighborParams___2c_20void__28TfLiteResizeNearestNeighborParams___29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = HEAP32[jshFlashGetMemMapAddress(HEAP32[$2 + 8 >> 2]) >> 2];
 global$0 = $2 + 16 | 0;
}
function jslKill() {
 HEAP16[HEAP32[13768] + 2 >> 1] = 0;
 if (HEAP32[HEAP32[13768] + 120 >> 2]) {
  jsvLockAgain(HEAP32[HEAP32[13768] + 120 >> 2]);
 }
 jsvStringIteratorFree(HEAP32[13768] + 108 | 0);
 if (HEAP32[HEAP32[13768] + 96 >> 2]) {
  jsvUnLock(HEAP32[HEAP32[13768] + 96 >> 2]);
  HEAP32[HEAP32[13768] + 96 >> 2] = 0;
 }
 jsvUnLock(HEAP32[HEAP32[13768] + 104 >> 2]);
 HEAP32[HEAP32[13768] + 16 >> 2] = 0;
 HEAP8[HEAP32[13768] + 24 | 0] = 0;
}
function lcdST7789_cmd($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 if (HEAP32[$3 + 12 >> 2] == 55) {
  HEAP32[24388] = HEAPU8[HEAP32[$3 + 4 >> 2] + 1 | 0] | HEAPU8[HEAP32[$3 + 4 >> 2]] << 8;
  if (HEAP8[97556] & 1) {
   HEAP32[24388] = HEAP32[24388] + 40;
  }
  if (HEAP32[24388] >= 320) {
   HEAP32[24388] = HEAP32[24388] - 320;
  }
  HEAP8[97557] = 1;
 }
}
function jsspiHardwareFunc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP8[$4 + 15 | 0] = HEAPU8[HEAP32[$4 + 16 >> 2]];
 jshSPISendMany(HEAPU8[$4 + 15 | 0], HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2]);
 global$0 = $4 + 32 | 0;
}
function std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteConvParams__29(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
}
function jsvArrayBufferIteratorFloatToData($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAPF64[$4 + 8 >> 3] = $3;
 label$1 : {
  if (HEAP32[$4 + 24 >> 2] == 4) {
   HEAPF32[HEAP32[$4 + 28 >> 2] >> 2] = HEAPF64[$4 + 8 >> 3];
   break label$1;
  }
  if (HEAP32[$4 + 24 >> 2] == 8) {
   HEAPF64[HEAP32[$4 + 28 >> 2] >> 3] = HEAPF64[$4 + 8 >> 3];
  }
 }
}
function tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = 0;
 $0 = HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2];
 $1 = jshFlashGetMemMapAddress(HEAP32[(HEAP32[HEAP32[$2 + 8 >> 2] + 4 >> 2] + 4 | 0) + (HEAP32[$2 + 4 >> 2] << 2) >> 2]);
 global$0 = $2 + 16 | 0;
 return $0 + Math_imul($1, 56) | 0;
}
function tflite__GetInput_28TfLiteContext__2c_20TfLiteNode__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[HEAP32[$3 + 12 >> 2] + 8 >> 2];
 $1 = jshFlashGetMemMapAddress(HEAP32[(HEAP32[HEAP32[$3 + 8 >> 2] >> 2] + 4 | 0) + (HEAP32[$3 + 4 >> 2] << 2) >> 2]);
 global$0 = $3 + 16 | 0;
 return $0 + Math_imul($1, 56) | 0;
}
function jswrap_espruino_getAddressOf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP8[$2 + 7 | 0] = $1;
 label$1 : {
  if (HEAP8[$2 + 7 | 0] & 1) {
   HEAP32[$2 >> 2] = 0;
   HEAP32[$2 + 12 >> 2] = jsvGetDataPointer(HEAP32[$2 + 8 >> 2], $2);
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 8 >> 2];
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function jsvArrayAddUnique($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvGetIndexOf(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
 label$1 : {
  if (!HEAP32[$2 + 4 >> 2]) {
   jsvArrayPush(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
   break label$1;
  }
  jsvUnLock(HEAP32[$2 + 4 >> 2]);
 }
 global$0 = $2 + 16 | 0;
}
function lcdST7789_blitPixel($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP16[(HEAP32[24395] + Math_imul(HEAP32[24396], 240) << 1) + 97616 >> 1] = HEAP32[$1 + 12 >> 2];
 HEAP8[97557] = 1;
 HEAP32[24395] = HEAP32[24395] + 1;
 if (HEAP32[24395] > HEAP32[24399]) {
  HEAP32[24395] = HEAP32[24397];
  HEAP32[24396] = HEAP32[24396] + 1;
  if (HEAP32[24396] > HEAP32[24400]) {
   HEAP32[24396] = HEAP32[24398];
  }
 }
}
function jswrap_espruino_clip($0, $1, $2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 HEAPF64[$3 + 24 >> 3] = $0;
 HEAPF64[$3 + 16 >> 3] = $1;
 HEAPF64[$3 + 8 >> 3] = $2;
 if (HEAPF64[$3 + 24 >> 3] < HEAPF64[$3 + 16 >> 3]) {
  HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 16 >> 3];
 }
 if (HEAPF64[$3 + 24 >> 3] > HEAPF64[$3 + 8 >> 3]) {
  HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 8 >> 3];
 }
 return +HEAPF64[$3 + 24 >> 3];
}
function jsfEraseFileInternal($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] - 32;
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + ((HEAP32[$2 + 8 >> 2] + 4 | 0) - HEAP32[$2 + 8 >> 2] | 0);
 HEAP32[HEAP32[$2 + 8 >> 2] + 4 >> 2] = 0;
 jshFlashRead(HEAP32[$2 + 8 >> 2] + 4 | 0, HEAP32[$2 + 12 >> 2], 4);
 global$0 = $2 + 16 | 0;
}
function jsvIsVariableDefined($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = !(jsvIsName(HEAP32[$1 + 12 >> 2]) & 1);
 $2 = 1;
 label$1 : {
  if ($0) {
   break label$1;
  }
  $0 = jsvIsNameWithValue(HEAP32[$1 + 12 >> 2]) & 1;
  $2 = 1;
  if ($0) {
   break label$1;
  }
  $2 = (jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535) != 0;
 }
 $0 = $2;
 global$0 = $1 + 16 | 0;
 return $0 & 1;
}
function jslGetTokenValueAsVar() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 label$1 : {
  if (HEAP32[HEAP32[13768] + 96 >> 2]) {
   HEAP32[$0 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[13768] + 96 >> 2]);
   break label$1;
  }
  HEAP8[HEAPU8[HEAP32[13768] + 100 | 0] + (HEAP32[13768] + 32 | 0) | 0] = 0;
  HEAP32[$0 + 12 >> 2] = jsvNewFromString(HEAP32[13768] + 32 | 0);
 }
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function jswrap_e_dumpStr() {
 var $0 = 0;
 $0 = global$0 - 32 | 0;
 global$0 = $0;
 HEAP32[$0 + 24 >> 2] = jsvNewFromEmptyString();
 label$1 : {
  if (!HEAP32[$0 + 24 >> 2]) {
   HEAP32[$0 + 28 >> 2] = 0;
   break label$1;
  }
  jsvStringIteratorNew($0, HEAP32[$0 + 24 >> 2], 0);
  jsiDumpState(4, $0);
  jsvStringIteratorFree($0);
  HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
 }
 global$0 = $0 + 32 | 0;
 return HEAP32[$0 + 28 >> 2];
}
function jswrap_tfmicrointerpreter_getTFMI($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $2 = $1 + 4 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvObjectGetChild(HEAP32[$1 + 12 >> 2], 39691, 0);
 HEAP32[$1 >> 2] = jsvGetDataPointer(HEAP32[$1 + 8 >> 2], $2);
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 if (!HEAP32[$1 >> 2]) {
  jsExceptionHere(1, 39694, 0);
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 >> 2];
}
function jsiConsoleReturnInputLine() {
 if (HEAP8[95140] & 1) {
  HEAP8[95140] = 0;
  if (jsiEcho() & 1) {
   if (HEAPU16[47566] & 8) {
    jsiConsolePrintString(5222);
   }
   if (jsiPasswordProtected() & 1) {
    jsiConsolePrintString(5228);
   }
   jsiConsolePrintChar(62);
   jsiConsolePrintStringVarWithNewLineChar(HEAP32[23784], 0, 58);
   jsiMoveCursorChar(HEAP32[23784], jsvGetStringLength(HEAP32[23784]), HEAP32[23786]);
  }
 }
}
function heatshrink_var_input_cb($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 4 >> 2] = -1;
 if (jsvIteratorHasElement(HEAP32[$1 + 8 >> 2]) & 1) {
  HEAP32[$1 + 4 >> 2] = jsvIteratorGetIntegerValue(HEAP32[$1 + 8 >> 2]) & 255;
 }
 jsvIteratorNext(HEAP32[$1 + 8 >> 2]);
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 4 >> 2];
}
function jsiSetBusy($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 label$1 : {
  if (HEAP8[$2 + 11 | 0] & 1) {
   HEAP32[23788] = HEAP32[$2 + 12 >> 2] | HEAP32[23788];
   break label$1;
  }
  HEAP32[23788] = HEAP32[23788] & (HEAP32[$2 + 12 >> 2] ^ -1);
 }
 if (HEAPU8[53361] != 255) {
  jshPinOutput(HEAPU8[53361], HEAP32[23788] != 0);
 }
 global$0 = $2 + 16 | 0;
}
function jshFlashGetPage($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 8 >> 2];
 $4 = Math_floor(+(HEAP32[$3 + 12 >> 2] >>> 12 >>> 0)) * 4096;
 label$1 : {
  if ($4 < 4294967296 & $4 >= 0) {
   $1 = ~~$4 >>> 0;
   break label$1;
  }
  $1 = 0;
 }
 HEAP32[$0 >> 2] = $1;
 HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = 4096;
 return 1;
}
function tflite__MultiplyByQuantizedMultiplierGreaterThanOne_28int_2c_20int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = int_20gemmlowp__SaturatingRoundingDoublingHighMul_int__28int_2c_20int_29(Math_imul(HEAP32[$3 + 12 >> 2], 1 << HEAP32[$3 + 4 >> 2]), HEAP32[$3 + 8 >> 2]);
 global$0 = $3 + 16 | 0;
 return $0;
}
function jswrap_promise_reject($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jspromise_create();
 label$1 : {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  jspromise_reject(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsvNewFromBool($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 11 | 0] = $0;
 HEAP32[$1 + 4 >> 2] = jsvNewWithFlags(11);
 label$1 : {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[HEAP32[$1 + 4 >> 2] >> 2] = HEAP8[$1 + 11 | 0] & 1 ? 1 : 0;
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jspEvaluateExpressionVar($0) {
 var $1 = 0;
 $1 = global$0 - 144 | 0;
 global$0 = $1;
 HEAP32[$1 + 140 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jslSetLex($1 + 8 | 0);
 jslInit(HEAP32[$1 + 140 >> 2]);
 HEAP16[$1 + 110 >> 1] = HEAPU16[HEAP32[$1 + 4 >> 2] + 102 >> 1];
 HEAP32[$1 >> 2] = jspeExpression();
 jslKill();
 jslSetLex(HEAP32[$1 + 4 >> 2]);
 $0 = jsvSkipNameAndUnLock(HEAP32[$1 >> 2]);
 global$0 = $1 + 144 | 0;
 return $0;
}
function jsvStringIteratorPrintfCallback($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 while (1) {
  if (HEAPU8[HEAP32[$2 + 12 >> 2]]) {
   $0 = HEAP32[$2 + 8 >> 2];
   $1 = HEAP32[$2 + 12 >> 2];
   HEAP32[$2 + 12 >> 2] = $1 + 1;
   jsvStringIteratorAppend($0, HEAP8[$1 | 0]);
   continue;
  }
  break;
 }
 global$0 = $2 + 16 | 0;
}
function jsiGetClassNameFromDevice($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 11 | 0] = $0;
 HEAP32[$1 + 4 >> 2] = jshGetDeviceString(HEAPU8[$1 + 11 | 0]);
 label$1 : {
  if (!HEAPU8[HEAP32[$1 + 4 >> 2]]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvFindChildFromString(HEAP32[23774], HEAP32[$1 + 4 >> 2], 0);
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function flatbuffers__Vector_float___Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0, $3 = Math_fround(0);
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = flatbuffers__IndirectHelper_float___Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_int___Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $3;
}
function jspeBlockOrStatement() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 label$1 : {
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 123) {
   jspeBlock();
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 8 >> 2] = jspeStatement();
  if (HEAP16[HEAP32[13768] + 2 >> 1] == 59) {
   jslGetNextToken();
  }
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
 }
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function gen_jswrap_Graphics_setBgColor($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = jswrap_graphics_setColorX(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2], 0);
 global$0 = $4 + 16 | 0;
 return $0 | 0;
}
function tflite__MicroInterpreter__AllocateTensors_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 4 >> 2] = tflite__MicroAllocator__AllocateTensors_28_29($0 + 68 | 0);
 label$1 : {
  if (HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 1;
   break label$1;
  }
  HEAP8[$0 + 112 | 0] = 1;
  HEAP32[$1 + 12 >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
}
function jsiHandleIOEventForUSART($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 >> 2] = jsiExtractIOEventData(HEAP32[$2 + 8 >> 2], $2 + 4 | 0);
 if (HEAP32[$2 >> 2]) {
  jswrap_stream_pushData(HEAP32[$2 + 12 >> 2], HEAP32[$2 >> 2]);
  jsvUnLock(HEAP32[$2 >> 2]);
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 4 >> 2];
}
function int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20const__20std____2__min_int_2c_20std____2____less_int_2c_20int__20__28int_20const__2c_20int_20const__2c_20std____2____less_int_2c_20int__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0;
}
function int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20const__20std____2__max_int_2c_20std____2____less_int_2c_20int__20__28int_20const__2c_20int_20const__2c_20std____2____less_int_2c_20int__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0;
}
function unsigned_20char_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__op_unsigned_20char__28unsigned_20char_2c_20unsigned_20char_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 if (HEAPU8[$2 + 15 | 0] < HEAPU8[$2 + 14 | 0]) {
  $0 = HEAPU8[$2 + 15 | 0];
 } else {
  $0 = HEAPU8[$2 + 14 | 0];
 }
 return $0 | 0;
}
function unsigned_20char_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__op_unsigned_20char__28unsigned_20char_2c_20unsigned_20char_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 if (HEAPU8[$2 + 15 | 0] > HEAPU8[$2 + 14 | 0]) {
  $0 = HEAPU8[$2 + 15 | 0];
 } else {
  $0 = HEAPU8[$2 + 14 | 0];
 }
 return $0 | 0;
}
function jsiConsoleRemoveInputLine() {
 if (!(HEAP8[95140] & 1)) {
  HEAP8[95140] = 1;
  if (!(!(jsiEcho() & 1) | !HEAP32[23784])) {
   jsiMoveCursorChar(HEAP32[23784], HEAP32[23786], 0);
   jsiConsolePrintChar(13);
   jsiConsolePrintString(5202);
   if (HEAPU16[47566] & 8) {
    jsiConsolePrintChar(8);
    jsiConsolePrintChar(8);
    jsiConsolePrintChar(8);
    jsiConsolePrintChar(8);
    jsiConsolePrintChar(8);
   }
  }
 }
}
function gen_jswrap_Graphics_setColor($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = jswrap_graphics_setColorX(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2], 1);
 global$0 = $4 + 16 | 0;
 return $0 | 0;
}
function heatshrink_encode($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 24 >> 2];
 $0 = heatshrink_encode_cb(481, $4 + 8 | 0, HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
 global$0 = $4 + 32 | 0;
 return $0;
}
function signed_20char_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__op_signed_20char__28signed_20char_2c_20signed_20char_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 if (HEAP8[$2 + 15 | 0] < HEAP8[$2 + 14 | 0]) {
  $0 = HEAPU8[$2 + 15 | 0];
 } else {
  $0 = HEAPU8[$2 + 14 | 0];
 }
 return $0 << 24 >> 24;
}
function signed_20char_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__op_signed_20char__28signed_20char_2c_20signed_20char_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 if (HEAP8[$2 + 15 | 0] > HEAP8[$2 + 14 | 0]) {
  $0 = HEAPU8[$2 + 15 | 0];
 } else {
  $0 = HEAPU8[$2 + 14 | 0];
 }
 return $0 << 24 >> 24;
}
function jswrap_array_unshift($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvNewFromInteger(0);
 jsvUnLock2(jswrap_array_splice(HEAP32[$2 + 12 >> 2], 0, HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2]), HEAP32[$2 + 4 >> 2]);
 $0 = jsvGetLength(HEAP32[$2 + 12 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function jsvNewFromInteger($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jsvNewWithFlags(9);
 label$1 : {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[HEAP32[$1 + 4 >> 2] >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function float_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__op_float__28float_2c_20float_29($0, $1) {
 $0 = Math_fround($0);
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAPF32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 if (HEAPF32[$2 + 12 >> 2] < HEAPF32[$2 + 8 >> 2]) {
  $0 = HEAPF32[$2 + 12 >> 2];
 } else {
  $0 = HEAPF32[$2 + 8 >> 2];
 }
 return Math_fround($0);
}
function float_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__op_float__28float_2c_20float_29($0, $1) {
 $0 = Math_fround($0);
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAPF32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 if (HEAPF32[$2 + 12 >> 2] > HEAPF32[$2 + 8 >> 2]) {
  $0 = HEAPF32[$2 + 12 >> 2];
 } else {
  $0 = HEAPF32[$2 + 8 >> 2];
 }
 return Math_fround($0);
}
function jsvArrayBufferGetFromName($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvGetInteger(HEAP32[$1 + 12 >> 2]);
 HEAP32[$1 + 4 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535);
 HEAP32[$1 >> 2] = jsvArrayBufferGet(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
 jsvUnLock(HEAP32[$1 + 4 >> 2]);
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 >> 2];
}
function jswrap_pin_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP8[$1 + 7 | 0] = jshGetPinFromVar(HEAP32[$1 + 8 >> 2]);
 label$1 : {
  if (!(jshIsPinValid(HEAPU8[$1 + 7 | 0]) & 1)) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvNewFromPin(HEAPU8[$1 + 7 | 0]);
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsvResetVariable($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 HEAP32[$2 + 4 >> 2] = 0;
 while (1) {
  if (HEAPU32[$2 + 4 >> 2] < 4) {
   HEAP32[HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 4 >> 2] << 2) >> 2] = 0;
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP16[HEAP32[$2 + 12 >> 2] + 14 >> 1] = HEAPU16[$2 + 10 >> 1] | 512;
}
function jsvObjectSetOrRemoveChild($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 28084;
 HEAP32[$1 + 4 >> 2] = 0;
 label$1 : {
  if (HEAP32[$1 + 4 >> 2]) {
   jsvObjectSetChild(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]);
   break label$1;
  }
  jsvObjectRemoveChild(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2]);
 }
 global$0 = $1 + 16 | 0;
}
function jsvGetInternalFunctionCheckerFor($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 5;
   break label$1;
  }
  if (jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 6;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function flatbuffers__Vector_long_20long___Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__IndirectHelper_long_20long___Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_int___Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_UnidirectionalSequenceLSTMOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 71) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_LocalResponseNormalizationOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 13) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function jsvUnLock($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1 : {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP16[$0 + 14 >> 1] = HEAPU16[$0 + 14 >> 1] - 512;
  if (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 7680) {
   break label$1;
  }
  jsvUnLockFreeIfNeeded(HEAP32[$1 + 12 >> 2]);
 }
 global$0 = $1 + 16 | 0;
}
function tflite__Operator__builtin_options_as_BidirectionalSequenceLSTMOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 69) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function jswrap_onewire_reset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP8[$1 + 7 | 0] = onewire_getpin(HEAP32[$1 + 8 >> 2]);
 label$1 : {
  if (!(jshIsPinValid(HEAPU8[$1 + 7 | 0]) & 1)) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = OneWireReset(HEAPU8[$1 + 7 | 0]) & 1;
 }
 global$0 = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}
function tflite__Operator__builtin_options_as_BidirectionalSequenceRNNOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 70) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function jswrap_object_valueOf($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 8 >> 2];
   jsExceptionHere(3, 34740, $1);
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsvRemoveAllChildren($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 while (1) {
  if (jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535) {
   HEAP32[$1 + 8 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535);
   jsvRemoveChild(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2]);
   jsvUnLock(HEAP32[$1 + 8 >> 2]);
   continue;
  }
  break;
 }
 global$0 = $1 + 16 | 0;
}
function tflite___28anonymous_20namespace_29__StackDataAllocator__Allocate_28unsigned_20long_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 label$1 : {
  if (HEAPU32[$2 + 4 >> 2] > 128) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = $0 + 4;
 }
 return HEAP32[$2 + 12 >> 2];
}
function jsiConsolePrintString($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 while (1) {
  if (HEAPU8[HEAP32[$1 + 12 >> 2]]) {
   if (HEAP8[HEAP32[$1 + 12 >> 2]] == 10) {
    jsiConsolePrintChar(13);
   }
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$1 + 12 >> 2] = $0 + 1;
   jsiConsolePrintChar(HEAP8[$0 | 0]);
   continue;
  }
  break;
 }
 global$0 = $1 + 16 | 0;
}
function jshPushIOEvent($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP8[$3 + 31 | 0] = $0;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP8[$3 + 8 | 0] = HEAPU8[$3 + 31 | 0];
 $0 = HEAP32[$3 + 16 >> 2];
 HEAP8[$3 + 9 | 0] = $0;
 HEAP8[$3 + 10 | 0] = $0 >>> 8;
 HEAP8[$3 + 11 | 0] = $0 >>> 16;
 HEAP8[$3 + 12 | 0] = $0 >>> 24;
 jshPushEvent($3 + 8 | 0);
 global$0 = $3 + 32 | 0;
}
function tflite__Operator__builtin_options_as_ResizeNearestNeighborOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 74) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_EmbeddingLookupSparseOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 20) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function jsonNeedsNewLine($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvIsUndefined(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = 1;
 label$1 : {
  if ($0) {
   break label$1;
  }
  $0 = jsvIsNull(HEAP32[$1 + 12 >> 2]) & 1;
  $2 = 1;
  if ($0) {
   break label$1;
  }
  $2 = jsvIsNumeric(HEAP32[$1 + 12 >> 2]);
 }
 $0 = $2;
 global$0 = $1 + 16 | 0;
 return ($0 ^ -1) & 1;
}
function jswrap_string_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!jsvGetArrayLength(HEAP32[$1 + 8 >> 2])) {
   HEAP32[$1 + 12 >> 2] = jsvNewFromEmptyString();
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvAsStringAndUnLock(jsvGetArrayItem(HEAP32[$1 + 8 >> 2], 0));
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsvGetMaxCharactersInVar($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (jsvIsStringExt(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 12;
   break label$1;
  }
  if (jsvIsName(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 4;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 10;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsvAppendPrintf($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 48 | 0;
 global$0 = $3;
 $4 = $3 + 12 | 0;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 $0 = $3 + 16 | 0;
 jsvStringIteratorNew($0, HEAP32[$3 + 44 >> 2], 0);
 jsvStringIteratorGotoEnd($0);
 HEAP32[$4 >> 2] = $2;
 vcbprintf(4, $0, HEAP32[$3 + 40 >> 2], HEAP32[$3 + 12 >> 2]);
 jsvStringIteratorFree($0);
 global$0 = $3 + 48 | 0;
}
function fromTimeInDay($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return +(HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] + Math_imul(HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + Math_imul((HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2] + Math_imul(HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2], 60) | 0) - HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2] | 0, 60) | 0, 1e3) | 0) + +HEAP32[HEAP32[$1 + 12 >> 2] >> 2] * 864e5;
}
function tflite__ops__micro__arg_min_max__ArgMinEval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = tflite__ops__micro__arg_min_max__Eval_28TfLiteContext__2c_20TfLiteNode__2c_20bool_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function tflite__ops__micro__arg_min_max__ArgMaxEval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = tflite__ops__micro__arg_min_max__Eval_28TfLiteContext__2c_20TfLiteNode__2c_20bool_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function jsnCallFunction($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 32 | 0;
 global$0 = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP16[$5 + 26 >> 1] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $0 = jswCallFunctionHack(HEAP32[$5 + 28 >> 2], HEAPU16[$5 + 26 >> 1], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2]);
 global$0 = $5 + 32 | 0;
 return $0;
}
function flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph__20___operator_5b_5d_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph__20___Get_28unsigned_20int_29_20const(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0;
}
function jswrap_tfmicrointerpreter_invoke($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jswrap_tfmicrointerpreter_getTFMI(HEAP32[$1 + 12 >> 2]);
 label$1 : {
  if (!HEAP32[$1 + 8 >> 2]) {
   break label$1;
  }
  if (tf_invoke(HEAP32[$1 + 8 >> 2]) & 1) {
   break label$1;
  }
  jsExceptionHere(3, 39794, 0);
 }
 global$0 = $1 + 16 | 0;
}
function jshGetPinString($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP8[HEAP32[$2 + 12 >> 2]] = 0;
 label$1 : {
  if (HEAPU8[$2 + 11 | 0] < 32) {
   HEAP8[HEAP32[$2 + 12 >> 2]] = 68;
   itostr(HEAPU8[$2 + 11 | 0], HEAP32[$2 + 12 >> 2] + 1 | 0, 10);
   break label$1;
  }
  strcpy(HEAP32[$2 + 12 >> 2], 5060);
 }
 global$0 = $2 + 16 | 0;
}
function OneWireReset($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = $0;
 jshPinSetState(HEAPU8[$1 + 15 | 0], 3);
 jshPinSetValue(HEAPU8[$1 + 15 | 0], 0);
 do_indexing(500);
 jshPinSetValue(HEAPU8[$1 + 15 | 0], 1);
 do_indexing(80);
 HEAP8[$1 + 14 | 0] = (jshPinGetValue(HEAPU8[$1 + 15 | 0]) ^ -1) & 1;
 do_indexing(420);
 global$0 = $1 + 16 | 0;
 return HEAP8[$1 + 14 | 0] & 1;
}
function jswrap_waveform_startOutput($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP8[$4 + 27 | 0] = $1;
 HEAPF64[$4 + 16 >> 3] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 jswrap_waveform_start(HEAP32[$4 + 28 >> 2], HEAPU8[$4 + 27 | 0], HEAPF64[$4 + 16 >> 3], HEAP32[$4 + 12 >> 2], 1);
 global$0 = $4 + 32 | 0;
}
function jswrap_banglejs_kill() {
 jsvUnLock(HEAP32[62834]);
 HEAP32[62834] = 0;
 jsvUnLock(HEAP32[62835]);
 HEAP32[62835] = 0;
 jshSetPinShouldStayWatched(24, 0);
 jshSetPinShouldStayWatched(22, 0);
 jshSetPinShouldStayWatched(23, 0);
 jshSetPinShouldStayWatched(11, 0);
 jshSetPinShouldStayWatched(16, 0);
 jshPinWatch(24, 0);
 jshPinWatch(22, 0);
 jshPinWatch(23, 0);
 jshPinWatch(11, 0);
 jshPinWatch(16, 0);
}
function gen_jswrap_DataView_setFloat64($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 40, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 global$0 = $4 + 16 | 0;
}
function gen_jswrap_DataView_setFloat32($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 36, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 global$0 = $4 + 16 | 0;
}
function tflite__Operator__builtin_options_as_ReverseSequenceOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 87) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function lcdSetPixel_ArrayBuffer_flat($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 lcdSetPixels_ArrayBuffer_flat(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], 1, HEAP32[$4 >> 2]);
 global$0 = $4 + 16 | 0;
}
function jsvObjectGetChildI($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1 : {
  if (!HEAP32[$2 + 8 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromStringI(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]));
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function tflite__Operator__builtin_options_as_ResizeBilinearOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 15) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_DepthwiseConv2DOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 2) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function jswrap_promise_get_chained_promise($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvObjectGetChild(HEAP32[$1 + 12 >> 2], 36549, 0);
 if (!HEAP32[$1 + 8 >> 2]) {
  HEAP32[$1 + 8 >> 2] = jspNewObject(0, 36617);
  jsvObjectSetChild(HEAP32[$1 + 12 >> 2], 36549, HEAP32[$1 + 8 >> 2]);
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function gen_jswrap_DataView_setUint32($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 4, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 global$0 = $4 + 16 | 0;
}
function gen_jswrap_DataView_setUint16($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 2, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 global$0 = $4 + 16 | 0;
}
function gen_jswrap_DataView_setInt32($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 20, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 global$0 = $4 + 16 | 0;
}
function gen_jswrap_DataView_setInt16($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 18, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 global$0 = $4 + 16 | 0;
}
function tflite__Operator__builtin_options_as_TransposeConvOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 49) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_SparseToDenseOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 50) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_FullyConnectedOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 8) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_ConcatenationOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 10) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function graphicsSetPixel($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 graphicsToDeviceCoordinates(HEAP32[$4 + 12 >> 2], $4 + 8 | 0, $4 + 4 | 0);
 graphicsSetPixelDevice(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 global$0 = $4 + 16 | 0;
}
function gen_jswrap_DataView_setUint8($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 1, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 global$0 = $4 + 16 | 0;
}
function gen_jswrap_DataView_setInt8($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 17, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 global$0 = $4 + 16 | 0;
}
function tflite__Operator__builtin_options_as_StridedSliceOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 32) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_SpaceToDepthOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 19) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_LSHProjectionOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 4) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_DepthToSpaceOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 94) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function jsvStringIteratorSetCharAndNext($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 if (jsvStringIteratorHasChar(HEAP32[$2 + 12 >> 2]) & 1) {
  HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0] = HEAPU8[$2 + 11 | 0];
 }
 jsvStringIteratorNextInline(HEAP32[$2 + 12 >> 2]);
 global$0 = $2 + 16 | 0;
}
function tflite__Operator__builtin_options_as_SequenceRNNOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 31) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function jsvGetLastArrayItem($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP16[$1 + 6 >> 1] = jsvGetLastChild(HEAP32[$1 + 8 >> 2]);
 label$1 : {
  if (!HEAPU16[$1 + 6 >> 1]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipNameAndUnLock(jsvLock(HEAPU16[$1 + 6 >> 1]));
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function gemmlowp__FixedPoint_int_2c_20_28_1_29_20__20_282_29__20gemmlowp__ExactMulByPot__1_2c_20int_2c_202__28gemmlowp__FixedPoint_int_2c_202__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $2 = $1 + 8 | 0;
 HEAP32[$1 >> 2] = $0;
 $0 = HEAP32[jshFlashGetMemMapAddress($1) >> 2];
 HEAP32[jshFlashGetMemMapAddress($2) >> 2] = $0;
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function flatbuffers__Vector_int___Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__IndirectHelper_int___Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_int___Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0;
}
function _jsiInitNamedArray($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvObjectGetChild(HEAP32[23775], HEAP32[$1 + 12 >> 2], 3);
 HEAP16[$1 + 6 >> 1] = 0;
 if (HEAP32[$1 + 8 >> 2]) {
  HEAP16[$1 + 6 >> 1] = jsvGetRef(jsvRef(HEAP32[$1 + 8 >> 2]));
 }
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 global$0 = $1 + 16 | 0;
 return HEAPU16[$1 + 6 >> 1];
}
function tflite__Operator__builtin_options_as_MirrorPadOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 77) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_LeakyReluOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 75) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_FakeQuantOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 58) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function isHexadecimal($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 label$1 : {
  if (HEAP8[$1 + 15 | 0] >= 48) {
   $0 = 1;
   if (HEAP8[$1 + 15 | 0] <= 57) {
    break label$1;
   }
  }
  if (HEAP8[$1 + 15 | 0] >= 97) {
   $0 = 1;
   if (HEAP8[$1 + 15 | 0] <= 102) {
    break label$1;
   }
  }
  $0 = HEAP8[$1 + 15 | 0] >= 65 ? HEAP8[$1 + 15 | 0] <= 70 : 0;
 }
 return $0 & 1;
}
function tflite__RuntimeShape__RuntimeShape_28int_2c_20int_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 tflite__RuntimeShape__ReplaceWith_28int_2c_20int_20const__29($0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 16 | 0;
}
function tflite__Operator__builtin_options_as_SkipGramOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 18) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function jsiIsAboutToEditInputLine() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 if (HEAP8[95149] & 1) {
  HEAP8[95149] = 0;
  if (jsiIsInHistory(HEAP32[23784]) & 1) {
   HEAP32[$0 + 12 >> 2] = jsvCopy(HEAP32[23784], 0);
   if (HEAP32[$0 + 12 >> 2]) {
    jsiInputLineCursorMoved();
    jsvUnLock(HEAP32[23784]);
    HEAP32[23784] = HEAP32[$0 + 12 >> 2];
   }
  }
 }
 global$0 = $0 + 16 | 0;
}
function tflite__Operator__builtin_options_as_SqueezeOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 30) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_ReshapeOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 17) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_ReducerOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 27) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_UnpackOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 64) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_UniqueOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 80) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_SplitVOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 79) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_SoftmaxOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 9) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_OneHotOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 61) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_L2NormOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 12) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_GatherOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 23) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_ArgMinOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 57) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_ArgMaxOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 40) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function jsvNewFromStringVar($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = jsvNewFromEmptyString();
 if (HEAP32[$3 >> 2]) {
  jsvAppendStringVar(HEAP32[$3 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 }
 global$0 = $3 + 16 | 0;
 return HEAP32[$3 >> 2];
}
function tflite__Operator__builtin_options_as_WhileOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 93) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_SplitOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 35) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_ShapeOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 55) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_Pool2DOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 5) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_Conv2DOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 1) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function st_yield_literal($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1 : {
  if (can_take_byte(HEAP32[$2 + 4 >> 2])) {
   push_literal_byte(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
   HEAP32[$2 + 12 >> 2] = 2;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 4;
 }
 global$0 = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function lcdSetPixel_ArrayBuffer($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 lcdSetPixels_ArrayBuffer(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], 1, HEAP32[$4 >> 2]);
 global$0 = $4 + 16 | 0;
}
function tflite__Operator__builtin_options_as_PackOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 59) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_LSTMOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 14) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_CastOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 37) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function jswrap_espruino_setTimeZone($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $3 = HEAP32[23775];
 $0 = HEAPF64[$1 + 8 >> 3] * 60;
 label$1 : {
  if (Math_abs($0) < 2147483648) {
   $2 = ~~$0;
   break label$1;
  }
  $2 = -2147483648;
 }
 jsvObjectSetChildAndUnLock($3, 32310, jsvNewFromInteger($2));
 global$0 = $1 + 16 | 0;
}
function jsvObjectIteratorNext($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[HEAP32[$1 + 12 >> 2] >> 2]) {
  HEAP16[$1 + 10 >> 1] = jsvGetNextSibling(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  $0 = jsvLockSafe(HEAPU16[$1 + 10 >> 1]);
  HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = $0;
 }
 global$0 = $1 + 16 | 0;
}
function flatbuffers__IndirectHelper_float___Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0, $3 = Math_fround(0);
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = float_20flatbuffers__EndianScalar_float__28float_29(HEAPF32[HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) >> 2]);
 global$0 = $2 + 16 | 0;
 return $3;
}
function tflite__RuntimeShape__ExtendedShape_28int_2c_20tflite__RuntimeShape_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 tflite__RuntimeShape__RuntimeShape_28int_2c_20tflite__RuntimeShape_20const__2c_20int_29($0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 16 | 0;
}
function tflite__Operator__builtin_options_as_SubOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 28) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_SVDFOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 6) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_MulOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 21) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_DivOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 29) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_AddOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 11) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function jspParse() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[23778] & 80 ? 0 : HEAP16[HEAP32[13768] + 2 >> 1]) {
   jsvUnLock(HEAP32[$0 + 12 >> 2]);
   HEAP32[$0 + 12 >> 2] = jspeBlockOrStatement();
   jsvCheckReferenceError(HEAP32[$0 + 12 >> 2]);
   continue;
  }
  break;
 }
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function jshSetPinShouldStayWatched($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 $0 = (HEAPU8[$2 + 15 | 0] >> 5 << 2) + 95120 | 0;
 if (HEAP8[$2 + 14 | 0] & 1) {
  $1 = 1 << (HEAPU8[$2 + 15 | 0] & 31);
 } else {
  $1 = 0;
 }
 HEAP32[$0 >> 2] = $1 | HEAP32[(HEAPU8[$2 + 15 | 0] >> 5 << 2) + 95120 >> 2] & (1 << (HEAPU8[$2 + 15 | 0] & 31) ^ -1);
}
function tflite__Operator__builtin_options_as_RNNOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 7) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__builtin_options_as_IfOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 92) {
   $0 = tflite__Model__buffers_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function jspeiGetTopScope() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 label$1 : {
  if (HEAP32[23776]) {
   HEAP32[$0 + 8 >> 2] = jsvGetLastArrayItem(HEAP32[23776]);
   if (HEAP32[$0 + 8 >> 2]) {
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
    break label$1;
   }
  }
  HEAP32[$0 + 12 >> 2] = jsvLockAgain(HEAP32[23774]);
 }
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function strcmp($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = HEAPU8[$0 | 0];
 $3 = HEAPU8[$1 | 0];
 label$1 : {
  if (!$2 | ($3 | 0) != ($2 | 0)) {
   break label$1;
  }
  while (1) {
   $3 = HEAPU8[$1 + 1 | 0];
   $2 = HEAPU8[$0 + 1 | 0];
   if (!$2) {
    break label$1;
   }
   $1 = $1 + 1 | 0;
   $0 = $0 + 1 | 0;
   if (($2 | 0) == ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 return $2 - $3 | 0;
}
function jspeiAddScope($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 if (!HEAP32[23776]) {
  HEAP32[23776] = jsvNewWithFlags(3);
 }
 label$2 : {
  if (!HEAP32[23776]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$2;
  }
  jsvArrayPush(HEAP32[23776], HEAP32[$1 + 8 >> 2]);
  HEAP8[$1 + 15 | 0] = 1;
 }
 global$0 = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}
function jswrap_object_removeAllListeners_cstr($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvNewFromString(HEAP32[$2 + 8 >> 2]);
 if (HEAP32[$2 + 4 >> 2]) {
  jswrap_object_removeAllListeners(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2]);
  jsvUnLock(HEAP32[$2 + 4 >> 2]);
 }
 global$0 = $2 + 16 | 0;
}
function jspAppendStackTrace($0) {
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 $0 = $1 + 8 | 0;
 jsvStringIteratorNew($0, HEAP32[$1 + 28 >> 2], 0);
 jsvStringIteratorGotoEnd($0);
 jslPrintPosition($0, HEAP32[HEAP32[13768] + 28 >> 2]);
 jslPrintTokenLineMarker(4, $0, HEAP32[HEAP32[13768] + 28 >> 2], 0);
 jsvStringIteratorFree($0);
 global$0 = $1 + 32 | 0;
}
function jsiObjectHasCallbacks($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvObjectGetChild(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
 HEAP8[$2 + 3 | 0] = (jsvIsUndefined(HEAP32[$2 + 4 >> 2]) ^ -1) & 1;
 jsvUnLock(HEAP32[$2 + 4 >> 2]);
 global$0 = $2 + 16 | 0;
 return HEAP8[$2 + 3 | 0] & 1;
}
function jshSetPinStateIsManual($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 $0 = (HEAPU8[$2 + 15 | 0] >> 5 << 2) + 95116 | 0;
 if (HEAP8[$2 + 14 | 0] & 1) {
  $1 = 1 << (HEAPU8[$2 + 15 | 0] & 31);
 } else {
  $1 = 0;
 }
 HEAP32[$0 >> 2] = $1 | HEAP32[(HEAPU8[$2 + 15 | 0] >> 5 << 2) + 95116 >> 2] & (1 << (HEAPU8[$2 + 15 | 0] & 31) ^ -1);
}
function tflite__IsHybridOp_28TfLiteTensor_20const__2c_20TfLiteTensor_20const__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 label$1 : {
  if (HEAP32[HEAP32[$2 + 8 >> 2] >> 2] != 3) {
   $0 = 0;
   if (HEAP32[HEAP32[$2 + 8 >> 2] >> 2] != 9) {
    break label$1;
   }
  }
  $0 = HEAP32[HEAP32[$2 + 12 >> 2] >> 2] == 1;
 }
 return $0;
}
function jswrap_date_setMilliseconds($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 getTimeFromDateVar($2, HEAP32[$2 + 28 >> 2], 0);
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 24 >> 2];
 $3 = jswrap_date_setTime(HEAP32[$2 + 28 >> 2], fromTimeInDay($2));
 global$0 = $2 + 32 | 0;
 return +$3;
}
function gen_jswrap_Uint8ClampedArray_Uint8ClampedArray($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(65, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function jsvObjectRemoveChild($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvFindChildFromString(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
 if (HEAP32[$2 + 4 >> 2]) {
  jsvRemoveChild(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2]);
  jsvUnLock(HEAP32[$2 + 4 >> 2]);
 }
 global$0 = $2 + 16 | 0;
}
function jswrap_serial_inject($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[$2 + 7 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 12 >> 2]);
 if (!(HEAPU8[$2 + 7 | 0] < 17 | HEAPU8[$2 + 7 | 0] > 22)) {
  jsvIterateCallback(HEAP32[$2 + 8 >> 2], 542, $2 + 7 | 0);
 }
 global$0 = $2 + 16 | 0;
}
function jswrap_graphics_getFontHeight($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 80 | 0;
 global$0 = $1;
 HEAP32[$1 + 72 >> 2] = $0;
 label$1 : {
  if (!(graphicsGetFromVar($1, HEAP32[$1 + 72 >> 2]) & 1)) {
   HEAP32[$1 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 76 >> 2] = jswrap_graphics_getFontHeightInternal($1);
 }
 global$0 = $1 + 80 | 0;
 return HEAP32[$1 + 76 >> 2];
}
function jsvArrayBufferSet($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 + -64 | 0;
 global$0 = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 HEAP32[$3 + 52 >> 2] = $2;
 $0 = $3 + 8 | 0;
 jsvArrayBufferIteratorNew($0, HEAP32[$3 + 60 >> 2], HEAP32[$3 + 56 >> 2]);
 jsvArrayBufferIteratorSetValue($0, HEAP32[$3 + 52 >> 2]);
 jsvArrayBufferIteratorFree($0);
 global$0 = $3 - -64 | 0;
}
function jsvArrayBufferGet($0, $1) {
 var $2 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 HEAP32[$2 + 60 >> 2] = $0;
 HEAP32[$2 + 56 >> 2] = $1;
 $0 = $2 + 16 | 0;
 jsvArrayBufferIteratorNew($0, HEAP32[$2 + 60 >> 2], HEAP32[$2 + 56 >> 2]);
 HEAP32[$2 + 12 >> 2] = jsvArrayBufferIteratorGetValue($0);
 jsvArrayBufferIteratorFree($0);
 global$0 = $2 - -64 | 0;
 return HEAP32[$2 + 12 >> 2];
}
function jspeiRemoveScope() {
 label$1 : {
  label$2 : {
   if (HEAP32[23776]) {
    if (jsvGetArrayLength(HEAP32[23776])) {
     break label$2;
    }
   }
   jsExceptionHere(4, 3650, 0);
   jspSetError();
   break label$1;
  }
  jsvUnLock(jsvArrayPop(HEAP32[23776]));
  if (jsvGetFirstChild(HEAP32[23776]) & 65535) {
   break label$1;
  }
  jsvUnLock(HEAP32[23776]);
  HEAP32[23776] = 0;
 }
}
function jshI2CInitInfo($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 4 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 5 | 0] = 255;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 | 0] = 1e5;
 HEAP8[$0 + 1 | 0] = 390;
 HEAP8[$0 + 2 | 0] = 1;
 HEAP8[$0 + 3 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 6 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 7 | 0] = 1;
}
function jshSetFlowControlAllReady() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 if (HEAP8[97072] & 1) {
  HEAP32[$0 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$0 + 12 >> 2] < 2) {
    jshSetFlowControlXON(HEAP32[$0 + 12 >> 2] + 21 & 255, 1);
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP8[97072] = 0;
 }
 global$0 = $0 + 16 | 0;
}
function jsvGetPathTo($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = 4;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = 0;
 $0 = jsvGetPathTo_int(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2], $3 + 12 | 0);
 global$0 = $3 + 32 | 0;
 return $0;
}
function jswrap_espruino_toArrayBuffer($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!(jsvIsString(HEAP32[$1 + 8 >> 2]) & 1)) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvNewArrayBufferFromString(HEAP32[$1 + 8 >> 2], 0);
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function getBuildHash() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = global$0 - 16 | 0;
 HEAP32[$0 + 12 >> 2] = 2515;
 HEAP32[$0 + 8 >> 2] = 0;
 while (1) {
  if (HEAPU8[HEAP32[$0 + 12 >> 2]]) {
   $2 = HEAP32[$0 + 8 >> 2];
   $1 = HEAP32[$0 + 12 >> 2];
   HEAP32[$0 + 12 >> 2] = $1 + 1;
   HEAP32[$0 + 8 >> 2] = HEAPU8[$1 | 0] ^ $2 << 1;
   continue;
  }
  break;
 }
 return HEAP32[$0 + 8 >> 2];
}
function void_20tflite__SetActivationParams_tflite__ArithmeticParams__28float_2c_20float_2c_20tflite__ArithmeticParams__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAPF32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAPF32[HEAP32[$3 + 4 >> 2] + 52 >> 2] = HEAPF32[$3 + 12 >> 2];
 HEAPF32[HEAP32[$3 + 4 >> 2] + 56 >> 2] = HEAPF32[$3 + 8 >> 2];
}
function jsvUnLockFreeIfNeeded($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1 : {
  if (jsvGetRefs(HEAP32[$1 + 12 >> 2]) & 65535) {
   break label$1;
  }
  if (!(jsvHasRef(HEAP32[$1 + 12 >> 2]) & 1) | !(HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63)) {
   break label$1;
  }
  jsvFreePtr(HEAP32[$1 + 12 >> 2]);
 }
 global$0 = $1 + 16 | 0;
}
function jsvIterateCallbackToBytes($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 24 >> 2];
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 20 >> 2];
 jsvIterateCallback(HEAP32[$3 + 28 >> 2], 8, $3 + 8 | 0);
 global$0 = $3 + 32 | 0;
}
function jshGetEventDataPin($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP8[$1 + 14 | 0] = $0;
 HEAP32[$1 + 8 >> 2] = HEAPU8[$1 + 14 | 0] - 1;
 label$1 : {
  if ((HEAP32[(HEAP32[$1 + 8 >> 2] << 2) + 95216 >> 2] & -256) == -256) {
   HEAP8[$1 + 15 | 0] = HEAP32[(HEAP32[$1 + 8 >> 2] << 2) + 95216 >> 2];
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = 255;
 }
 return HEAPU8[$1 + 15 | 0];
}
function jswrap_interface_setInterval($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAPF64[$3 + 16 >> 3] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $0 = _jswrap_interface_setTimeoutOrInterval(HEAP32[$3 + 28 >> 2], HEAPF64[$3 + 16 >> 3], HEAP32[$3 + 12 >> 2], 0);
 global$0 = $3 + 32 | 0;
 return $0 | 0;
}
function jsiGetDeviceFromClass($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!(HEAP8[HEAP32[$1 + 8 >> 2]] != 68 | HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] != 69 | HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] != 86)) {
   HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[$1 + 8 >> 2] + 3 | 0];
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = 0;
 }
 return HEAPU8[$1 + 15 | 0];
}
function __sin($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = $0 * $0;
 $5 = $3 * ($3 * $3) * ($3 * 1.58969099521155e-10 + -2.5050760253406863e-8) + ($3 * ($3 * 27557313707070068e-22 + -.0001984126982985795) + .00833333333332249);
 $4 = $3 * $0;
 if (!$2) {
  return $4 * ($3 * $5 + -.16666666666666632) + $0;
 }
 return $0 - ($3 * ($1 * .5 - $4 * $5) - $1 + $4 * .16666666666666632);
}
function jswrap_interface_setTimeout($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 32 | 0;
 global$0 = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAPF64[$3 + 16 >> 3] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $0 = _jswrap_interface_setTimeoutOrInterval(HEAP32[$3 + 28 >> 2], HEAPF64[$3 + 16 >> 3], HEAP32[$3 + 12 >> 2], 1);
 global$0 = $3 + 32 | 0;
 return $0 | 0;
}
function int_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__op_int__28int_2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAP32[$2 + 12 >> 2] < HEAP32[$2 + 8 >> 2]) {
  $0 = HEAP32[$2 + 12 >> 2];
 } else {
  $0 = HEAP32[$2 + 8 >> 2];
 }
 return $0 | 0;
}
function int_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__op_int__28int_2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAP32[$2 + 12 >> 2] > HEAP32[$2 + 8 >> 2]) {
  $0 = HEAP32[$2 + 12 >> 2];
 } else {
  $0 = HEAP32[$2 + 8 >> 2];
 }
 return $0 | 0;
}
function tflite__ops__micro__elementwise___28anonymous_20namespace_29__RsqrtEval_28TfLiteContext__2c_20TfLiteNode__29__$_0__operator_28_29_28float_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAPF32[$1 + 8 >> 2] = $0;
 $0 = Math_fround(Math_fround(1) / sqrt_28float_29(HEAPF32[$1 + 8 >> 2]));
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 16 | 0;
}
function jswrap_array_filter($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = _jswrap_array_iterate_with_callback(30510, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1, 1, 1);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function jsvTraceLockInfo($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvGetRef(HEAP32[$1 + 12 >> 2]) & 65535;
 $2 = jsvGetRefs(HEAP32[$1 + 12 >> 2]) & 65535;
 HEAP32[$1 + 8 >> 2] = jsvGetLocks(HEAP32[$1 + 12 >> 2]) & 255;
 HEAP32[$1 + 4 >> 2] = $2;
 HEAP32[$1 >> 2] = $0;
 jsiConsolePrintf(2988, $1);
 global$0 = $1 + 16 | 0;
}
function jswrap_espruino_getConsole() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP8[$0 + 11 | 0] = HEAPU8[53360];
 label$1 : {
  if (!HEAPU8[$0 + 11 | 0]) {
   HEAP32[$0 + 12 >> 2] = jsvNewWithFlags(2);
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = jsvNewFromString(jshGetDeviceString(HEAPU8[$0 + 11 | 0]));
 }
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function jswrap_array_every($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = _jswrap_array_iterate_with_callback(30537, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0, 1, 1);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function gen_jswrap_Float64Array_Float64Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(40, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function gen_jswrap_Float32Array_Float32Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(36, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function tflite__AlignPointerUp_28unsigned_20char__2c_20unsigned_20long_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 16;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 >> 2] = Math_imul(HEAP32[$1 + 8 >> 2], (HEAP32[$1 + 4 >> 2] + (HEAP32[$1 + 8 >> 2] - 1 | 0) >>> 0) / HEAPU32[$1 + 8 >> 2] | 0);
 return HEAP32[$1 >> 2];
}
function jswrap_array_some($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = _jswrap_array_iterate_with_callback(30532, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0, 1, 0);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function graphicsGetPixel($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 graphicsToDeviceCoordinates(HEAP32[$3 + 12 >> 2], $3 + 8 | 0, $3 + 4 | 0);
 $0 = graphicsGetPixelDevice(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 16 | 0;
 return $0;
}
function jswrap_array_map($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = _jswrap_array_iterate_with_callback(30498, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1, 0, 0);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function __towrite($0) {
 var $1 = 0;
 $1 = HEAPU8[$0 + 74 | 0];
 HEAP8[$0 + 74 | 0] = $1 + -1 | $1;
 $1 = HEAP32[$0 >> 2];
 if ($1 & 8) {
  HEAP32[$0 >> 2] = $1 | 32;
  return -1;
 }
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $1 = HEAP32[$0 + 44 >> 2];
 HEAP32[$0 + 28 >> 2] = $1;
 HEAP32[$0 + 20 >> 2] = $1;
 HEAP32[$0 + 16 >> 2] = $1 + HEAP32[$0 + 48 >> 2];
 return 0;
}
function gen_jswrap_Uint32Array_Uint32Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(4, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function gen_jswrap_Uint24Array_Uint24Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(3, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function gen_jswrap_Uint16Array_Uint16Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(2, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function jsvUnLockMany($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 while (1) {
  if (HEAP32[$2 + 12 >> 2]) {
   $0 = HEAP32[$2 + 8 >> 2];
   $1 = HEAP32[$2 + 12 >> 2] + -1 | 0;
   HEAP32[$2 + 12 >> 2] = $1;
   jsvUnLock(HEAP32[$0 + ($1 << 2) >> 2]);
   continue;
  }
  break;
 }
 global$0 = $2 + 16 | 0;
}
function gen_jswrap_Int32Array_Int32Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(20, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function gen_jswrap_Int16Array_Int16Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(18, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__operator_28_29_28void__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[HEAP32[$2 + 12 >> 2] >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
}
function jspNewBuiltin($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jswFindBuiltInFunction(0, HEAP32[$1 + 8 >> 2]);
 label$1 : {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function gen_jswrap_Uint8Array_Uint8Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(1, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function void_20tflite__SetActivationParams_tflite__ArithmeticParams__28int_2c_20int_2c_20tflite__ArithmeticParams__29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[HEAP32[$3 + 4 >> 2] + 44 >> 2] = HEAP32[$3 + 12 >> 2];
 HEAP32[HEAP32[$3 + 4 >> 2] + 48 >> 2] = HEAP32[$3 + 8 >> 2];
}
function gen_jswrap_Int8Array_Int8Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(17, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function tflite__SimpleMemoryAllocator__SimpleMemoryAllocator_28unsigned_20char__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
}
function jsiClearInputLine($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = $0;
 if (!(jsvIsEmptyString(HEAP32[23784]) & 1)) {
  if (HEAP8[$1 + 15 | 0] & 1) {
   jsiConsoleRemoveInputLine();
  }
  jsiInputLineCursorMoved();
  jsvUnLock(HEAP32[23784]);
  HEAP32[23784] = jsvNewFromEmptyString();
  HEAP32[23786] = 0;
 }
 global$0 = $1 + 16 | 0;
}
function jsvIsInternalFunctionKey($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1 : {
  if (jsvIsString(HEAP32[$1 + 12 >> 2]) & 1) {
   $0 = 1;
   if (HEAP8[HEAP32[$1 + 12 >> 2]] == -1) {
    break label$1;
   }
  }
  $0 = jsvIsFunctionParameter(HEAP32[$1 + 12 >> 2]);
 }
 global$0 = $1 + 16 | 0;
 return $0 & 1;
}
function jslMatch($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (HEAP16[HEAP32[13768] + 2 >> 1] != HEAP32[$1 + 8 >> 2]) {
   jslMatchError(HEAP32[$1 + 8 >> 2]);
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  jslGetNextToken();
  HEAP8[$1 + 15 | 0] = 1;
 }
 global$0 = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}
function gen_jswrap_String_includes($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_string_indexOf(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
 global$0 = $3 + 16 | 0;
 return ($0 | 0) >= 0 | 0;
}
function jswOnCharEvent($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 14 | 0] = $0;
 HEAP8[$2 + 13 | 0] = $1;
 label$1 : {
  if (HEAPU8[$2 + 14 | 0] == 22) {
   HEAP8[$2 + 15 | 0] = jswrap_banglejs_gps_character(HEAP8[$2 + 13 | 0]) & 1;
   break label$1;
  }
  HEAP8[$2 + 15 | 0] = 0;
 }
 global$0 = $2 + 16 | 0;
 return HEAP8[$2 + 15 | 0] & 1;
}
function jsvStringIteratorCatchUp($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 while (1) {
  if (HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] > 0 ? HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] >= HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2] : 0) {
   jsvStringIteratorLoadInline(HEAP32[$1 + 12 >> 2]);
   continue;
  }
  break;
 }
 global$0 = $1 + 16 | 0;
}
function jspeiFindNameOnTop($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = 1;
 HEAP32[$1 + 4 >> 2] = jspeiGetTopScope();
 HEAP32[$1 >> 2] = jsvFindChildFromVar(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 12 >> 2], HEAP8[$1 + 11 | 0] & 1);
 jsvUnLock(HEAP32[$1 + 4 >> 2]);
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 >> 2];
}
function jswrap_flash_erasePage($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1 : {
  if (!(jsvIsInt(HEAP32[$1 + 12 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 12 >> 2];
   jsExceptionHere(1, 32659, $1);
   break label$1;
  }
  do_indexing(jsvGetInteger(HEAP32[$1 + 12 >> 2]));
 }
 global$0 = $1 + 16 | 0;
}
function jspeiFindOnTop($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = 1;
 HEAP32[$1 + 4 >> 2] = jspeiGetTopScope();
 HEAP32[$1 >> 2] = jsvFindChildFromString(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 12 >> 2], HEAP8[$1 + 11 | 0] & 1);
 jsvUnLock(HEAP32[$1 + 4 >> 2]);
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 >> 2];
}
function memcmp($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  while (1) {
   $3 = HEAPU8[$0 | 0];
   $4 = HEAPU8[$1 | 0];
   if (($3 | 0) == ($4 | 0)) {
    $1 = $1 + 1 | 0;
    $0 = $0 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue;
    }
    break label$1;
   }
   break;
  }
  $5 = $3 - $4 | 0;
 }
 return $5;
}
function jswrap_spi_write_cb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 FUNCTION_TABLE[HEAP32[HEAP32[$3 + 4 >> 2] >> 2]](HEAP32[$3 + 12 >> 2], 0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2] + 4 | 0);
 global$0 = $3 + 16 | 0;
}
function tflite__MicroMutableOpResolver__MicroMutableOpResolver_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = global$0 - 16 | 0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = 47196;
 HEAP32[$0 >> 2] = 39872;
 HEAP32[$0 + 4100 >> 2] = 0;
 global$0 = $1 + 16 | 0;
}
function jswrap_espruino_toJS($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 704;
 HEAP32[$1 + 4 >> 2] = jsvNewFromEmptyString();
 if (HEAP32[$1 + 4 >> 2]) {
  jsfGetJSON(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 4 >> 2];
}
function jsvIsFunctionParameter($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 0;
 label$1 : {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
  $0 = 0;
  if (!(HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 64)) {
   break label$1;
  }
  $0 = jsvIsString(HEAP32[$1 + 12 >> 2]);
 }
 global$0 = $1 + 16 | 0;
 return $0 & 1;
}
function espruino_snprintf($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 global$0 = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = espruino_snprintf_va(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
 global$0 = $4 + 32 | 0;
}
function tflite__RuntimeShape__Resize_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAP32[$0 >> 2] > 4) {
  abort();
  abort();
 }
 HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
 if (HEAP32[$2 + 8 >> 2] > 4) {
  abort();
  abort();
 }
 global$0 = $2 + 16 | 0;
}
function jswrap_graphics_dump($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jswrap_graphics_asURL(HEAP32[$1 + 12 >> 2]);
 if (HEAP32[$1 + 8 >> 2]) {
  jsiConsolePrintStringVar(HEAP32[$1 + 8 >> 2]);
 }
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 jsiConsolePrintString(39335);
 global$0 = $1 + 16 | 0;
}
function tflite__strided_slice__LoopCondition_28int_2c_20int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 if (HEAP32[$3 + 4 >> 2] > 0) {
  $0 = HEAP32[$3 + 12 >> 2] >= HEAP32[$3 + 8 >> 2];
 } else {
  $0 = HEAP32[$3 + 12 >> 2] <= HEAP32[$3 + 8 >> 2];
 }
 return $0;
}
function gen_jswrap_String_lastIndexOf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_string_indexOf(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function gen_jswrap_DataView_getFloat64($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 40, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function gen_jswrap_DataView_getFloat32($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 36, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function tflite__UnidirectionalSequenceLSTMOptions__time_major_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20char_20flatbuffers__Table__GetField_unsigned_20char__28unsigned_20short_2c_20unsigned_20char_29_20const(HEAP32[$1 + 12 >> 2], 10, 0);
 global$0 = $1 + 16 | 0;
 return ($0 & 255) != 0;
}
function tflite__BidirectionalSequenceRNNOptions__merge_outputs_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20char_20flatbuffers__Table__GetField_unsigned_20char__28unsigned_20short_2c_20unsigned_20char_29_20const(HEAP32[$1 + 12 >> 2], 8, 0);
 global$0 = $1 + 16 | 0;
 return ($0 & 255) != 0;
}
function jswrap_storagefile_read($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAP32[$2 + 8 >> 2] < 0) {
  HEAP32[$2 + 8 >> 2] = 0;
 }
 $0 = jswrap_storagefile_read_internal(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function gen_jswrap_DataView_getUint32($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 4, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function gen_jswrap_DataView_getUint16($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 2, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function gen_jswrap_DataView_getInt32($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 20, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function gen_jswrap_DataView_getInt16($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 18, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function tflite__BidirectionalSequenceLSTMOptions__time_major_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20char_20flatbuffers__Table__GetField_unsigned_20char__28unsigned_20short_2c_20unsigned_20char_29_20const(HEAP32[$1 + 12 >> 2], 12, 1);
 global$0 = $1 + 16 | 0;
 return ($0 & 255) != 0;
}
function jswrap_banglejs_getLogo() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 1440 | 0;
 global$0 = $0;
 $1 = $0 + 16 | 0;
 memcpy($1, 29056, 1419);
 HEAP32[$0 + 12 >> 2] = jsvNewNativeString($1, 1419);
 HEAP32[$0 + 8 >> 2] = jswrap_heatshrink_decompress(HEAP32[$0 + 12 >> 2]);
 jsvUnLock(HEAP32[$0 + 12 >> 2]);
 global$0 = $0 + 1440 | 0;
 return HEAP32[$0 + 8 >> 2];
}
function jswrap_array_forEach($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 _jswrap_array_iterate_with_callback(30502, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0, 0, 0);
 global$0 = $3 + 16 | 0;
}
function isAlpha($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 label$1 : {
  if (HEAP8[$1 + 15 | 0] >= 97) {
   $0 = 1;
   if (HEAP8[$1 + 15 | 0] <= 122) {
    break label$1;
   }
  }
  if (HEAP8[$1 + 15 | 0] >= 65) {
   $0 = 1;
   if (HEAP8[$1 + 15 | 0] <= 90) {
    break label$1;
   }
  }
  $0 = HEAP8[$1 + 15 | 0] == 95;
 }
 return $0;
}
function gen_jswrap_DataView_getUint8($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 1, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function gen_jswrap_DataView_getInt8($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 17, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function jsvHasSingleChild($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = jsvIsArrayBuffer(HEAP32[$1 + 12 >> 2]) & 1;
 $0 = 1;
 if (!$2) {
  if (jsvIsName(HEAP32[$1 + 12 >> 2]) & 1) {
   $0 = jsvIsNameWithValue(HEAP32[$1 + 12 >> 2]) ^ -1;
  } else {
   $0 = 0;
  }
 }
 global$0 = $1 + 16 | 0;
 return $0 & 1;
}
function gen_jswrap_String_indexOf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_string_indexOf(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
 global$0 = $3 + 16 | 0;
 return $0 | 0;
}
function _jswrap_promise_is_promise($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jspGetConstructor(HEAP32[$1 + 12 >> 2]);
 HEAP8[$1 + 7 | 0] = HEAP32[$1 + 8 >> 2] ? HEAP32[HEAP32[$1 + 8 >> 2] >> 2] == 30 : 0;
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 global$0 = $1 + 16 | 0;
 return HEAP8[$1 + 7 | 0] & 1;
}
function tflite___28anonymous_20namespace_29__StackDataAllocator__StackDataAllocator_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = global$0 - 16 | 0;
 $2 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = 42104;
 HEAP32[$2 >> 2] = 42080;
 global$0 = $1 + 16 | 0;
}
function tflite__DepthwiseConv2DOptions__fused_activation_function_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 12, 0);
 global$0 = $1 + 16 | 0;
 return $0 << 24 >> 24;
}
function jsvNegateAndUnLock($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvNewFromInteger(0);
 HEAP32[$1 + 4 >> 2] = jsvMathsOpSkipNames(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2], 45);
 jsvUnLock2(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 4 >> 2];
}
function jsvGetLongIntegerAndUnLock($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 >> 2] = jsvGetLongInteger(HEAP32[$1 + 12 >> 2]);
 HEAP32[$1 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}
function std____2____compressed_pair_TfLiteResizeNearestNeighborParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jshFlashGetMemMapAddress(HEAP32[$1 + 12 >> 2] + 4 | 0);
 global$0 = $1 + 16 | 0;
 return $0;
}
function jsvTrace($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = HEAP32[13770];
 HEAP32[13770] = 0;
 _jsvTrace(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2], 0);
 HEAP32[13770] = HEAP32[$1 + 4 >> 2];
 jsiConsolePrintf(3311, 0);
 global$0 = $1 + 16 | 0;
}
function __cos($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = $0 * $0;
 $3 = $2 * .5;
 $4 = 1 - $3;
 $5 = 1 - $4 - $3;
 $3 = $2 * $2;
 return $4 + ($5 + ($2 * ($2 * ($2 * ($2 * 2480158728947673e-20 + -.001388888888887411) + .0416666666666666) + $3 * $3 * ($2 * ($2 * -1.1359647557788195e-11 + 2.087572321298175e-9) + -2.7557314351390663e-7)) - $0 * $1));
}
function jsvIsEmptyString($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!(jsvHasCharacterData(HEAP32[$1 + 8 >> 2]) & 1)) {
   HEAP8[$1 + 15 | 0] = 1;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = !jsvGetCharactersInVar(HEAP32[$1 + 8 >> 2]);
 }
 global$0 = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}
function jshPushIOCharEventFlowControl($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = $0;
 label$1 : {
  if (HEAPU8[$1 + 15 | 0] < 21 | HEAPU8[$1 + 15 | 0] > 22) {
   break label$1;
  }
  if ((jshGetEventsUsed() | 0) <= 191) {
   break label$1;
  }
  jshSetFlowControlXON(HEAPU8[$1 + 15 | 0], 0);
 }
 global$0 = $1 + 16 | 0;
}
function jsvStringIteratorNextInline($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
 if (HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] >= HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) {
  jsvStringIteratorLoadInline(HEAP32[$1 + 12 >> 2]);
 }
 global$0 = $1 + 16 | 0;
}
function jsvObjectIteratorGetValue($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsvObjectIteratorGetKey($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200__20__28int_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(HEAP32[$1 + 12 >> 2], 0);
 global$0 = $1 + 16 | 0;
 return $0;
}
function _jswrap_espruino_toUint8Array_char($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsvArrayBufferIteratorSetByteValue(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2] << 24 >> 24);
 jsvArrayBufferIteratorNext(HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
}
function tflite__HaveSameShapes_28TfLiteTensor_20const__2c_20TfLiteTensor_20const__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = TfLiteIntArrayEqual(HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2], HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return ($0 | 0) != 0;
}
function sbrk($0) {
 var $1 = 0;
 $1 = HEAP32[63420];
 $0 = $1 + $0 | 0;
 if (($0 | 0) <= -1) {
  HEAP32[63273] = 48;
  return -1;
 }
 label$2 : {
  if ($0 >>> 0 <= __wasm_memory_size() << 16 >>> 0) {
   break label$2;
  }
  if (emscripten_resize_heap($0 | 0)) {
   break label$2;
  }
  HEAP32[63273] = 48;
  return -1;
 }
 HEAP32[63420] = $0;
 return $1;
}
function graphicsGetMemoryRequired($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8;
 $0 = HEAP32[$1 + 12 >> 2];
 return Math_imul(HEAPU8[HEAP32[$1 + 12 >> 2] + 16 | 0], Math_imul($2, HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8)) + 7 >>> 3;
}
function jsvStringIteratorGetChar($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
 }
 return HEAP8[$1 + 15 | 0];
}
function tflite__Pool2DOptions__fused_activation_function_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 14, 0);
 global$0 = $1 + 16 | 0;
 return $0 << 24 >> 24;
}
function tflite__Conv2DOptions__fused_activation_function_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 10, 0);
 global$0 = $1 + 16 | 0;
 return $0 << 24 >> 24;
}
function jsvNewFromPin($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvNewFromInteger(HEAP32[$1 + 12 >> 2]);
 if (HEAP32[$1 + 8 >> 2]) {
  HEAP16[HEAP32[$1 + 8 >> 2] + 14 >> 1] = HEAPU16[HEAP32[$1 + 8 >> 2] + 14 >> 1] & -64 | 12;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function TfLiteBidirectionalSequenceRNNParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteBidirectionalSequenceRNNParams__28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 12) | 0;
 global$0 = $1 + 16 | 0;
 return $0;
}
function jsvUnLock4($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 jsvUnLock(HEAP32[$4 + 12 >> 2]);
 jsvUnLock(HEAP32[$4 + 8 >> 2]);
 jsvUnLock(HEAP32[$4 + 4 >> 2]);
 jsvUnLock(HEAP32[$4 >> 2]);
 global$0 = $4 + 16 | 0;
}
function tflite__SequenceRNNOptions__time_major_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20char_20flatbuffers__Table__GetField_unsigned_20char__28unsigned_20short_2c_20unsigned_20char_29_20const(HEAP32[$1 + 12 >> 2], 4, 0);
 global$0 = $1 + 16 | 0;
 return ($0 & 255) != 0;
}
function tflite__AlignPointerDown_28unsigned_20char__2c_20unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 >> 2] = Math_imul(HEAP32[$2 + 8 >> 2], HEAPU32[$2 + 4 >> 2] / HEAPU32[$2 + 8 >> 2] | 0);
 return HEAP32[$2 >> 2];
}
function jswrap_promise_catch($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_promise_add(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
 $0 = jswrap_promise_get_chained_promise(HEAP32[$2 + 12 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function jswrap_espruino_memoryMap($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 $0 = jspExecuteJSFunction(32313, 2, $2);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function jsvStringIteratorSetChar($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 if (jsvStringIteratorHasChar(HEAP32[$2 + 12 >> 2]) & 1) {
  HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0] = HEAPU8[$2 + 11 | 0];
 }
 global$0 = $2 + 16 | 0;
}
function flatbuffers__IndirectHelper_int___Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jshFlashGetMemMapAddress(HEAP32[HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) >> 2]);
 global$0 = $2 + 16 | 0;
 return $0;
}
function std____2____less_unsigned_20char_2c_20unsigned_20char___operator_28_29_28unsigned_20char_20const__2c_20unsigned_20char_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return HEAPU8[HEAP32[$3 + 8 >> 2]] < HEAPU8[HEAP32[$3 + 4 >> 2]];
}
function int_20gemmlowp__AddSaturatingIf16Bit_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = gemmlowp__AddSaturatingIf16BitImpl_int_2c_20false___Run_28int_2c_20int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0;
}
function strncat($0, $1, $2) {
 var $3 = 0;
 $0 = strlen($0) + $0 | 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  while (1) {
   $3 = HEAPU8[$1 | 0];
   if (!$3) {
    break label$1;
   }
   HEAP8[$0 | 0] = $3;
   $0 = $0 + 1 | 0;
   $1 = $1 + 1 | 0;
   $2 = $2 + -1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 HEAP8[$0 | 0] = 0;
}
function jswrap_date_setTime($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF64[$2 >> 3] = $1;
 if (HEAP32[$2 + 12 >> 2]) {
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 31409, jsvNewFromFloat(HEAPF64[$2 >> 3]));
 }
 global$0 = $2 + 16 | 0;
 return +HEAPF64[$2 >> 3];
}
function gen_jswrap_E_showPrompt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 $0 = jspExecuteJSFunction(22700, 2, $2);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function gen_jswrap_E_showAlert($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 $0 = jspExecuteJSFunction(19880, 2, $2);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function tflite__Operator__custom_options_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 14);
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__DepthwiseConv2DOptions__dilation_h_factor_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__Table__GetField_unsigned_20int__28unsigned_20short_2c_20unsigned_20int_29_20const(HEAP32[$1 + 12 >> 2], 16, 1);
 global$0 = $1 + 16 | 0;
 return $0;
}
function jsvGetFlatStringPointer($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!(jsvIsFlatString(HEAP32[$1 + 8 >> 2]) & 1)) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] + 16;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jshInit() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$0 + 12 >> 2] < 16) {
   HEAP8[HEAP32[$0 + 12 >> 2] + 251232 | 0] = 255;
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 jshResetDevices();
 HEAP8[53372] = 1;
 global$0 = $0 + 16 | 0;
}
function bool_20tflite__ops__micro__Greater__operator_28_29_unsigned_20char__28unsigned_20char_20const__2c_20unsigned_20char_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return HEAPU8[HEAP32[$3 + 8 >> 2]] > HEAPU8[HEAP32[$3 + 4 >> 2]];
}
function jspeStatementThrow() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 jslGetNextToken();
 HEAP32[$0 + 12 >> 2] = jsvSkipNameAndUnLock(jspeExpression());
 if ((HEAP32[23778] & 63) == 1) {
  jspSetException(HEAP32[$0 + 12 >> 2]);
 }
 jsvUnLock(HEAP32[$0 + 12 >> 2]);
 global$0 = $0 + 16 | 0;
 return 0;
}
function _jswrap_drawImageLayerNextX($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 136 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 120 >> 2] + HEAP32[$0 + 136 >> 2];
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 140 >> 2] = HEAP32[$0 + 140 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 124 >> 2];
}
function tflite__Operator__builtin_options_type_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20char_20flatbuffers__Table__GetField_unsigned_20char__28unsigned_20short_2c_20unsigned_20char_29_20const(HEAP32[$1 + 12 >> 2], 10, 0);
 global$0 = $1 + 16 | 0;
 return $0 & 255;
}
function jsvIsNameWithValue($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 0;
 label$1 : {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
  $0 = 0;
  if ((HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) < 15) {
   break label$1;
  }
  $0 = (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) <= 21;
 }
 return $0;
}
function tflite__Model__20flatbuffers__GetMutableRoot_tflite__Model__28void__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[(global$0 - 16 | 0) + 12 >> 2] = 1;
 $0 = HEAP32[$1 + 12 >> 2] + jshFlashGetMemMapAddress(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]) | 0;
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__AlignSizeUp_28unsigned_20long_2c_20unsigned_20long_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 16;
 HEAP32[$1 + 4 >> 2] = Math_imul(HEAP32[$1 + 8 >> 2], (HEAP32[$1 + 12 >> 2] + (HEAP32[$1 + 8 >> 2] - 1 | 0) >>> 0) / HEAPU32[$1 + 8 >> 2] | 0);
 return HEAP32[$1 + 4 >> 2];
}
function std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jshFlashGetMemMapAddress(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0;
}
function jsvObjectIteratorClone($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 if (HEAP32[HEAP32[$2 + 12 >> 2] >> 2]) {
  jsvLockAgain(HEAP32[HEAP32[$2 + 12 >> 2] >> 2]);
 }
 global$0 = $2 + 16 | 0;
}
function tflite__Model__operator_codes_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 6);
 global$0 = $1 + 16 | 0;
 return $0;
}
function jsvIsBasicString($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 0;
 label$1 : {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
  $0 = 0;
  if ((HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) < 27) {
   break label$1;
  }
  $0 = (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) <= 37;
 }
 return $0;
}
function tflite__SubGraph__operators_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 10);
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__UniqueOptions__idx_out_type_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 4, 2);
 global$0 = $1 + 16 | 0;
 return $0 << 24 >> 24;
}
function tflite__Tensor__is_variable_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20char_20flatbuffers__Table__GetField_unsigned_20char__28unsigned_20short_2c_20unsigned_20char_29_20const(HEAP32[$1 + 12 >> 2], 14, 0);
 global$0 = $1 + 16 | 0;
 return ($0 & 255) != 0;
}
function tflite__EspruinoErrorReporter__EspruinoErrorReporter_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = global$0 - 16 | 0;
 $2 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = 49732;
 HEAP32[$2 >> 2] = 49712;
 global$0 = $1 + 16 | 0;
}
function lcdST7789_setYOffset($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2] < -80) {
  HEAP32[$1 + 12 >> 2] = -80;
 }
 if (HEAP32[$1 + 12 >> 2] > 80) {
  HEAP32[$1 + 12 >> 2] = 80;
 }
 HEAP32[24391] = HEAP32[$1 + 12 >> 2];
 lcdST7789_scrollCmd();
 global$0 = $1 + 16 | 0;
}
function jswrap_object_clone($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvCopy(HEAP32[$1 + 8 >> 2], 1);
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsvIsStringExt($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 0;
 label$1 : {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
  $0 = 0;
  if ((HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) < 40) {
   break label$1;
  }
  $0 = (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) <= 52;
 }
 return $0;
}
function jsvIsBasicName($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 0;
 label$1 : {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
  $0 = 0;
  if ((HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) < 22) {
   break label$1;
  }
  $0 = (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) <= 26;
 }
 return $0;
}
function std____2____less_signed_20char_2c_20signed_20char___operator_28_29_28signed_20char_20const__2c_20signed_20char_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return HEAP8[HEAP32[$3 + 8 >> 2]] < HEAP8[HEAP32[$3 + 4 >> 2]];
}
function jsvMathsOpError($0, $1) {
 var $2 = 0;
 $2 = global$0 + -64 | 0;
 global$0 = $2;
 HEAP32[$2 + 60 >> 2] = $0;
 HEAP32[$2 + 56 >> 2] = $1;
 $0 = $2 + 16 | 0;
 jslTokenAsString(HEAP32[$2 + 60 >> 2], $0, 32);
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 56 >> 2];
 HEAP32[$2 >> 2] = $0;
 jsError(2907, $2);
 global$0 = $2 - -64 | 0;
 return 0;
}
function gen_jswrap_E_showMessage($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 jsvUnLock(jspExecuteJSFunction(22316, 2, $2));
 global$0 = $2 + 16 | 0;
}
function jsvIsStringEqualOrStartsWith($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jsvIsStringEqualOrStartsWithOffset(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1, 0);
 global$0 = $3 + 16 | 0;
 return $0 & 1;
}
function bool_20tflite__ops__micro__Greater__operator_28_29_signed_20char__28signed_20char_20const__2c_20signed_20char_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return HEAP8[HEAP32[$3 + 8 >> 2]] > HEAP8[HEAP32[$3 + 4 >> 2]];
}
function TfLiteLocalResponseNormParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteLocalResponseNormParams__28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 16) | 0;
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Model__subgraphs_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 8);
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Conv2DOptions__dilation_w_factor_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__Table__GetField_unsigned_20int__28unsigned_20short_2c_20unsigned_20int_29_20const(HEAP32[$1 + 12 >> 2], 12, 1);
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Conv2DOptions__dilation_h_factor_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__Table__GetField_unsigned_20int__28unsigned_20short_2c_20unsigned_20int_29_20const(HEAP32[$1 + 12 >> 2], 14, 1);
 global$0 = $1 + 16 | 0;
 return $0;
}
function push_byte($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $1 = HEAPU8[$3 + 7 | 0];
 $2 = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
 $3 = HEAP32[HEAP32[$3 + 8 >> 2] + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = $0 + 1;
 HEAP8[$0 + $2 | 0] = $1;
}
function jsvMakeFunctionParameter($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (!(jsvIsName(HEAP32[$1 + 12 >> 2]) & 1)) {
  jsvMakeIntoVariableName(HEAP32[$1 + 12 >> 2], 0);
 }
 HEAP16[HEAP32[$1 + 12 >> 2] + 14 >> 1] = HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] | 64;
 global$0 = $1 + 16 | 0;
}
function jsvIsString($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 0;
 label$1 : {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
  $0 = 0;
  if ((HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) < 17) {
   break label$1;
  }
  $0 = (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) <= 39;
 }
 return $0;
}
function jsvIsNumeric($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 0;
 label$1 : {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
  $0 = 0;
  if ((HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) < 9) {
   break label$1;
  }
  $0 = (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) <= 16;
 }
 return $0;
}
function tflite__Model__buffers_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 12);
 global$0 = $1 + 16 | 0;
 return $0;
}
function gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $2 = $1 + 8 | 0;
 HEAP32[$1 + 4 >> 2] = $0;
 $0 = jshFlashGetMemMapAddress(HEAP32[$1 + 4 >> 2]);
 HEAP32[jshFlashGetMemMapAddress($2) >> 2] = $0;
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function tflite__LocalResponseNormalizationOptions__beta_28_29_20const($0) {
 var $1 = 0, $2 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = float_20flatbuffers__Table__GetField_float__28unsigned_20short_2c_20float_29_20const(HEAP32[$1 + 12 >> 2], 10);
 global$0 = $1 + 16 | 0;
 return $2;
}
function tflite__LocalResponseNormalizationOptions__alpha_28_29_20const($0) {
 var $1 = 0, $2 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = float_20flatbuffers__Table__GetField_float__28unsigned_20short_2c_20float_29_20const(HEAP32[$1 + 12 >> 2], 8);
 global$0 = $1 + 16 | 0;
 return $2;
}
function tflite__Conv2DOptions__padding_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 4, 0);
 global$0 = $1 + 16 | 0;
 return $0 << 24 >> 24;
}
function jsvIsName($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 0;
 label$1 : {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
  $0 = 0;
  if ((HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) < 13) {
   break label$1;
  }
  $0 = (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) <= 26;
 }
 return $0;
}
function tflite__Tensor__shape_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 4);
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__LocalResponseNormalizationOptions__bias_28_29_20const($0) {
 var $1 = 0, $2 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = float_20flatbuffers__Table__GetField_float__28unsigned_20short_2c_20float_29_20const(HEAP32[$1 + 12 >> 2], 6);
 global$0 = $1 + 16 | 0;
 return $2;
}
function terminalSetGFX($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 graphicsSetVar(HEAP32[$1 + 12 >> 2]);
 HEAP8[252037] = 1;
 $0 = HEAP32[$1 + 12 >> 2];
 jsvUnLock(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24));
 global$0 = $1 + 16 | 0;
}
function jstGetLastBufferTimerTask($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $2 + 6 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP16[$2 + 6 >> 1] = jsvGetRef(HEAP32[$2 + 12 >> 2]);
 $0 = utilTimerGetLastTask(15, $3, HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0 & 1;
}
function jsError($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $2 + 8 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 jsiConsoleRemoveInputLine();
 jsiConsolePrintString(3596);
 HEAP32[$3 >> 2] = $1;
 vcbprintf(9, 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 jsiConsolePrintString(3604);
 global$0 = $2 + 16 | 0;
}
function tflite__Pool2DOptions__filter_height_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__Table__GetField_unsigned_20int__28unsigned_20short_2c_20unsigned_20int_29_20const(HEAP32[$1 + 12 >> 2], 12, 0);
 global$0 = $1 + 16 | 0;
 return $0;
}
function jsiHandleHome() {
 var $0 = 0;
 while (1) {
  if (HEAPU32[23786] > 0) {
   $0 = (jsvGetCharInString(HEAP32[23784], HEAP32[23786] - 1 | 0) & 255) != 10;
  } else {
   $0 = 0;
  }
  if ($0) {
   if (jsiShowInputLine() & 1) {
    jsiConsolePrintChar(8);
   }
   HEAP32[23786] = HEAP32[23786] + -1;
   continue;
  }
  break;
 }
}
function jsWarn($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 $3 = $2 + 8 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 jsiConsoleRemoveInputLine();
 jsiConsolePrintString(3606);
 HEAP32[$3 >> 2] = $1;
 vcbprintf(9, 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 jsiConsolePrintString(3604);
 global$0 = $2 + 16 | 0;
}
function tflite__Pool2DOptions__filter_width_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__Table__GetField_unsigned_20int__28unsigned_20short_2c_20unsigned_20int_29_20const(HEAP32[$1 + 12 >> 2], 10, 0);
 global$0 = $1 + 16 | 0;
 return $0;
}
function jsvIterateCallbackCountCb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = HEAP32[$3 + 4 >> 2];
 $0 = HEAP32[$3 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$0 >> 2];
}
function jsiTimerAdd($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvLock(HEAPU16[47564]);
 HEAP32[$1 + 4 >> 2] = jsvArrayAddToEnd(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]) - 1;
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 4 >> 2];
}
function jshIsTopEvent($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP8[$1 + 14 | 0] = $0;
 label$1 : {
  if (HEAPU8[95202] == HEAPU8[95203]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAPU8[$1 + 14 | 0] == (HEAPU8[Math_imul(HEAPU8[95203], 5) + 95792 | 0] & 31);
 }
 return HEAP8[$1 + 15 | 0] & 1;
}
function heatshrink_ptr_output_cb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 $1 = HEAPU8[$2 + 15 | 0];
 $2 = HEAP32[$2 + 4 >> 2];
 $0 = HEAP32[$2 >> 2];
 HEAP32[$2 >> 2] = $0 + 1;
 HEAP8[$0 | 0] = $1;
}
function gemmlowp__AddSaturatingIf16BitImpl_int_2c_20false___Run_28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20gemmlowp__Add_int__28int_2c_20int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0;
}
function jswrap_espruino_setPassword($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  HEAP32[$1 + 12 >> 2] = jsvAsString(HEAP32[$1 + 12 >> 2]);
 }
 jsvUnLock(jsvObjectSetChild(HEAP32[23775], 32306, HEAP32[$1 + 12 >> 2]));
 global$0 = $1 + 16 | 0;
}
function _jswrap_serial_inject_cb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[$2 + 7 | 0] = HEAPU8[HEAP32[$2 + 8 >> 2]];
 jshPushIOCharEvent(HEAPU8[$2 + 7 | 0], HEAP32[$2 + 12 >> 2] << 24 >> 24);
 global$0 = $2 + 16 | 0;
}
function TfLiteResizeBilinearParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteResizeBilinearParams__28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 1) | 0;
 global$0 = $1 + 16 | 0;
 return $0;
}
function __wasm_call_ctors() {}
function nmea_next_comma($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 while (1) {
  if (HEAP8[HEAP32[$1 + 12 >> 2]] ? HEAP8[HEAP32[$1 + 12 >> 2]] != 44 : 0) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 return HEAP32[$1 + 12 >> 2];
}
function TfLiteDepthwiseConvParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteDepthwiseConvParams__28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 28) | 0;
 global$0 = $1 + 16 | 0;
 return $0;
}
function TfLiteLSHProjectionParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteLSHProjectionParams__28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 4) | 0;
 global$0 = $1 + 16 | 0;
 return $0;
}
function bool_20tflite__ops__micro__Greater__operator_28_29_float__28float_20const__2c_20float_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return HEAPF32[HEAP32[$3 + 8 >> 2] >> 2] > HEAPF32[HEAP32[$3 + 4 >> 2] >> 2];
}
function TfLiteStridedSliceParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteStridedSliceParams__28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 20) | 0;
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Conv2DOptions__stride_w_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__Table__GetField_unsigned_20int__28unsigned_20short_2c_20unsigned_20int_29_20const(HEAP32[$1 + 12 >> 2], 6, 0);
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Operator__opcode_index_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__Table__GetField_unsigned_20int__28unsigned_20short_2c_20unsigned_20int_29_20const(HEAP32[$1 + 12 >> 2], 4, 0);
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__Tensor__type_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 6, 0);
 global$0 = $1 + 16 | 0;
 return $0 << 24 >> 24;
}
function tflite__OperatorCode__version_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__Table__GetField_unsigned_20int__28unsigned_20short_2c_20unsigned_20int_29_20const(HEAP32[$1 + 12 >> 2], 8, 1);
 global$0 = $1 + 16 | 0;
 return $0;
}
function std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return HEAPF64[HEAP32[$3 + 8 >> 2] >> 3] < HEAPF64[HEAP32[$3 + 4 >> 2] >> 3];
}
function heatshrink_var_output_cb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 jsvStringIteratorSetCharAndNext(HEAP32[$2 + 4 >> 2], HEAP8[$2 + 15 | 0]);
 global$0 = $2 + 16 | 0;
}
function std____2____less_float_2c_20float___operator_28_29_28float_20const__2c_20float_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return HEAPF32[HEAP32[$3 + 8 >> 2] >> 2] < HEAPF32[HEAP32[$3 + 4 >> 2] >> 2];
}
function nmea_decode_float($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[HEAP32[$2 + 8 >> 2]] = 0;
 HEAPF64[$2 >> 3] = stringToFloat(HEAP32[$2 + 12 >> 2]);
 HEAP8[HEAP32[$2 + 8 >> 2]] = 44;
 global$0 = $2 + 16 | 0;
 return HEAPF64[$2 >> 3];
}
function jswrap_array_find($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = _jswrap_array_iterate_with_callback(30517, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0, 2, 1, 1);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function jsvLockSafe($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP16[$1 + 10 >> 1] = $0;
 label$1 : {
  if (!HEAPU16[$1 + 10 >> 1]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLock(HEAPU16[$1 + 10 >> 1]);
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsvArrayBufferIteratorSetByteValue($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 if ((HEAPU16[HEAP32[$2 + 12 >> 2] + 20 >> 1] & 15) == 1) {
  jsvStringIteratorSetChar(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0]);
 }
 global$0 = $2 + 16 | 0;
}
function jswrap_pin_write($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP8[$2 + 10 | 0] = jshGetPinFromVar(HEAP32[$2 + 12 >> 2]);
 jshPinOutput(HEAPU8[$2 + 10 | 0], HEAP8[$2 + 11 | 0] & 1);
 global$0 = $2 + 16 | 0;
}
function unsigned_20short_20flatbuffers__ReadScalar_unsigned_20short__28void_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = global$0 - 16 | 0;
 HEAP16[$0 + 14 >> 1] = HEAPU16[HEAP32[$1 + 12 >> 2] >> 1];
 global$0 = $1 + 16 | 0;
 return HEAPU16[$0 + 14 >> 1];
}
function tflite__Tensor__buffer_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__Table__GetField_unsigned_20int__28unsigned_20short_2c_20unsigned_20int_29_20const(HEAP32[$1 + 12 >> 2], 8, 0);
 global$0 = $1 + 16 | 0;
 return $0;
}
function jswGetBuiltInJSLibrary($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!strcmp(HEAP32[$1 + 8 >> 2], 17373)) {
   HEAP32[$1 + 12 >> 2] = 17380;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function TfLiteReshapeParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteReshapeParams__28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 36) | 0;
 global$0 = $1 + 16 | 0;
 return $0;
}
function int_20gemmlowp__SaturatingRoundingMultiplyByPOT__12_2c_20int__28int_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = gemmlowp__ImplSaturatingRoundingMultiplyByPOT__12_2c_20int_2c_20_1___eval_28int_29(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0;
}
function int_20gemmlowp__MaskIfGreaterThan_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(HEAP32[$2 + 12 >> 2] > HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0;
}
function jshGetDeviceToTransmit() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 label$1 : {
  if (!(jshHasTransmitData() & 1)) {
   HEAP8[$0 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$0 + 15 | 0] = HEAPU8[(HEAPU8[95201] << 1) + 95280 | 0] & 31;
 }
 global$0 = $0 + 16 | 0;
 return HEAPU8[$0 + 15 | 0];
}
function tflite__SoftmaxOptions__beta_28_29_20const($0) {
 var $1 = 0, $2 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = float_20flatbuffers__Table__GetField_float__28unsigned_20short_2c_20float_29_20const(HEAP32[$1 + 12 >> 2], 4);
 global$0 = $1 + 16 | 0;
 return $2;
}
function jslCharPosClone($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsvStringIteratorClone(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 HEAP8[HEAP32[$2 + 12 >> 2] + 20 | 0] = HEAPU8[HEAP32[$2 + 8 >> 2] + 20 | 0];
 global$0 = $2 + 16 | 0;
}
function int_20gemmlowp__SaturatingRoundingMultiplyByPOT__2_2c_20int__28int_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = gemmlowp__ImplSaturatingRoundingMultiplyByPOT__2_2c_20int_2c_20_1___eval_28int_29(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0;
}
function int_20gemmlowp__SaturatingRoundingMultiplyByPOT__1_2c_20int__28int_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = gemmlowp__ImplSaturatingRoundingMultiplyByPOT__1_2c_20int_2c_20_1___eval_28int_29(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0;
}
function getint($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 if (isdigit(HEAP8[HEAP32[$0 >> 2]])) {
  while (1) {
   $1 = HEAP32[$0 >> 2];
   $3 = HEAP8[$1 | 0];
   HEAP32[$0 >> 2] = $1 + 1;
   $2 = (Math_imul($2, 10) + $3 | 0) + -48 | 0;
   if (isdigit(HEAP8[$1 + 1 | 0])) {
    continue;
   }
   break;
  }
 }
 return $2;
}
function tflite__Model_20const__20flatbuffers__GetRoot_tflite__Model__28void_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = tflite__Model__20flatbuffers__GetMutableRoot_tflite__Model__28void__29(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__MicroMutableOpResolver___MicroMutableOpResolver_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__MicroMutableOpResolver___MicroMutableOpResolver_28_29($0);
 do_indexing($0);
 global$0 = $1 + 16 | 0;
}
function jswrap_onewire_skip($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = onewire_getpin(HEAP32[$1 + 12 >> 2]);
 if (jshIsPinValid(HEAPU8[$1 + 11 | 0]) & 1) {
  OneWireWrite(HEAPU8[$1 + 11 | 0], 8, 204, 0);
 }
 global$0 = $1 + 16 | 0;
}
function int_20gemmlowp__MaskIfLessThan_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(HEAP32[$2 + 12 >> 2] < HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0;
}
function jsvFreePtrInternal($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 14 >> 1] = 0;
 jsvSetNextSibling(HEAP32[$1 + 12 >> 2], HEAPU16[27542]);
 HEAP16[27542] = jsvGetRef(HEAP32[$1 + 12 >> 2]);
 HEAP8[55077] = 1;
 global$0 = $1 + 16 | 0;
}
function gen_jswrap_Graphics_setFontVector($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jswrap_graphics_setFontSizeX(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function cbprintf($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 global$0 = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 vcbprintf(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 global$0 = $4 + 16 | 0;
}
function tf_get_output($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 12 >> 2];
 $0 = tflite__MicroInterpreter__output_28unsigned_20long_29(HEAP32[$1 + 4 >> 2] + 4108 | 0);
 global$0 = $1 + 16 | 0;
 return $0;
}
function int_20gemmlowp__SaturatingRoundingMultiplyByPOT_5_2c_20int__28int_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = gemmlowp__ImplSaturatingRoundingMultiplyByPOT_5_2c_20int_2c_201___eval_28int_29(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0;
}
function int_20gemmlowp__SaturatingRoundingMultiplyByPOT_2_2c_20int__28int_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = gemmlowp__ImplSaturatingRoundingMultiplyByPOT_2_2c_20int_2c_201___eval_28int_29(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0;
}
function int_20gemmlowp__SaturatingRoundingMultiplyByPOT_1_2c_20int__28int_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = gemmlowp__ImplSaturatingRoundingMultiplyByPOT_1_2c_20int_2c_201___eval_28int_29(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0;
}
function TfLitePoolParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLitePoolParams__28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 40) | 0;
 global$0 = $1 + 16 | 0;
 return $0;
}
function TfLiteConvParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteConvParams__28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 24) | 0;
 global$0 = $1 + 16 | 0;
 return $0;
}
function std____2____less_int_2c_20int___operator_28_29_28int_20const__2c_20int_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return HEAP32[HEAP32[$3 + 8 >> 2] >> 2] < HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
}
function jslGetLineNumber() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 $1 = $0 + 12 | 0;
 $2 = $0 + 8 | 0;
 jsvGetLineAndCol(HEAP32[HEAP32[13768] + 104 >> 2], jsvStringIteratorGetIndex(HEAP32[13768] + 4 | 0) - 1 | 0, $1, $2);
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function tf_get_input($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 12 >> 2];
 $0 = tflite__MicroInterpreter__input_28unsigned_20long_29(HEAP32[$1 + 4 >> 2] + 4108 | 0);
 global$0 = $1 + 16 | 0;
 return $0;
}
function jswrap_interface_trace($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1 : {
  if (jsvIsUndefined(HEAP32[$1 + 12 >> 2]) & 1) {
   jsvTrace(HEAP32[23774]);
   break label$1;
  }
  jsvTrace(HEAP32[$1 + 12 >> 2]);
 }
 global$0 = $1 + 16 | 0;
}
function jswrap_espruino_reverseByte($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 12 >> 2] & 255;
 return Math_imul(Math_imul(HEAP32[$1 + 8 >> 2], 2050) & 139536 | Math_imul(HEAP32[$1 + 8 >> 2], 32800) & 558144, 65793) >>> 16 & 255;
}
function int_20gemmlowp__MaskIfZero_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = int_20gemmlowp__MaskIfZero_int__28int_29(HEAP32[jshFlashGetMemMapAddress($1 + 8 | 0) >> 2]);
 global$0 = $1 + 16 | 0;
 return $0;
}
function gemmlowp__ImplSaturatingRoundingMultiplyByPOT__12_2c_20int_2c_20_1___eval_28int_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(HEAP32[$1 + 12 >> 2], 12);
 global$0 = $1 + 16 | 0;
 return $0;
}
function float_20flatbuffers__ReadScalar_float__28void_20const__29($0) {
 var $1 = 0, $2 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = float_20flatbuffers__EndianScalar_float__28float_29(HEAPF32[HEAP32[$1 + 12 >> 2] >> 2]);
 global$0 = $1 + 16 | 0;
 return $2;
}
function jsvIsNameInt($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return (HEAP32[$1 + 12 >> 2] ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) != 15 ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) >= 17 ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) <= 21 : 0 : 1 : 0) & 1;
}
function gemmlowp__ImplSaturatingRoundingMultiplyByPOT__2_2c_20int_2c_20_1___eval_28int_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(HEAP32[$1 + 12 >> 2], 2);
 global$0 = $1 + 16 | 0;
 return $0;
}
function gemmlowp__ImplSaturatingRoundingMultiplyByPOT__1_2c_20int_2c_20_1___eval_28int_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(HEAP32[$1 + 12 >> 2], 1);
 global$0 = $1 + 16 | 0;
 return $0;
}
function TfLiteIfParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteIfParams__28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 8) | 0;
 global$0 = $1 + 16 | 0;
 return $0;
}
function unsigned_20char_20flatbuffers__ReadScalar_unsigned_20char__28void_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = global$0 - 16 | 0;
 HEAP8[$0 + 15 | 0] = HEAPU8[HEAP32[$1 + 12 >> 2]];
 global$0 = $1 + 16 | 0;
 return HEAPU8[$0 + 15 | 0];
}
function tflite__ops__micro__AllOpsResolver___AllOpsResolver_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__ops__micro__AllOpsResolver___AllOpsResolver_28_29($0);
 do_indexing($0);
 global$0 = $1 + 16 | 0;
}
function tflite__ops__micro__AllOpsResolver___AllOpsResolver_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__MicroMutableOpResolver___MicroMutableOpResolver_28_29($0);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function jsvObjectSetChildAndUnLock($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jsvUnLock(jsvObjectSetChild(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]));
 global$0 = $3 + 16 | 0;
}
function jsfSetFlag($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 label$1 : {
  if (HEAP8[$2 + 14 | 0] & 1) {
   HEAP8[55076] = HEAPU8[$2 + 15 | 0] | HEAPU8[55076];
   break label$1;
  }
  HEAP8[55076] = HEAPU8[55076] & (HEAPU8[$2 + 15 | 0] ^ -1);
 }
}
function jsvGetIndexOf($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jsvGetIndexOfFull(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1, 0, 0);
 global$0 = $3 + 16 | 0;
 return $0;
}
function jsserialHardwareFunc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[$2 + 7 | 0] = HEAPU8[HEAP32[$2 + 8 >> 2]];
 jshTransmit(HEAPU8[$2 + 7 | 0], HEAPU8[$2 + 15 | 0]);
 global$0 = $2 + 16 | 0;
}
function jsSendPinWatchEvent($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jshGetEventFlagsForPin(HEAP32[$1 + 12 >> 2] & 255);
 if (HEAPU8[$1 + 11 | 0]) {
  jshPushIOWatchEvent(HEAPU8[$1 + 11 | 0]);
 }
 global$0 = $1 + 16 | 0;
}
function int_20gemmlowp__MaskIfNonZero_int__28int_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1 : {
  if (HEAP32[$1 + 12 >> 2]) {
   $0 = int_20gemmlowp__BitNot_int__28int_29(0);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0;
}
function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__FixedPoint_int_2c_200___ConstantPOT__3__28_29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29(268435456);
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 8 >> 2];
}
function jsvStringIteratorGetCharAndNext($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jsvStringIteratorGetChar(HEAP32[$1 + 12 >> 2]);
 jsvStringIteratorNextInline(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return HEAP8[$1 + 11 | 0];
}
function jsvCountJsVarsUsed($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = _jsvCountJsVarsUsedRecursive(HEAP32[$1 + 12 >> 2], 0);
 _jsvCountJsVarsUsedRecursive(HEAP32[$1 + 12 >> 2], 1);
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function gemmlowp__FixedPoint_int_2c_205__20gemmlowp__FixedPoint_int_2c_205___ConstantPOT__2__28_29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29(16777216);
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 8 >> 2];
}
function jslTokenAppendChar($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 if (HEAPU8[HEAP32[13768] + 100 | 0] < 63) {
  $2 = HEAPU8[$1 + 15 | 0];
  $0 = HEAP32[13768];
  $1 = HEAPU8[$0 + 100 | 0];
  HEAP8[$0 + 100 | 0] = $1 + 1;
  HEAP8[$1 + ($0 + 32 | 0) | 0] = $2;
 }
}
function jsvLock($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP16[$1 + 14 >> 1] = $0;
 HEAP32[$1 + 8 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 14 >> 1]);
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP16[$0 + 14 >> 1] = HEAPU16[$0 + 14 >> 1] + 512;
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function jsvObjectIteratorSetValue($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAP32[HEAP32[$2 + 12 >> 2] >> 2]) {
  jsvSetValueOfName(HEAP32[HEAP32[$2 + 12 >> 2] >> 2], HEAP32[$2 + 8 >> 2]);
 }
 global$0 = $2 + 16 | 0;
}
function _jswrap_espruino_toString_char($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsvStringIteratorSetCharAndNext(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2] << 24 >> 24);
 global$0 = $2 + 16 | 0;
}
function signed_20char_20flatbuffers__ReadScalar_signed_20char__28void_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = global$0 - 16 | 0;
 HEAP8[$0 + 15 | 0] = HEAP8[HEAP32[$1 + 12 >> 2]];
 global$0 = $1 + 16 | 0;
 return HEAP8[$0 + 15 | 0];
}
function jshGetEventsUsed() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = global$0 - 16 | 0;
 $2 = $0;
 if (HEAPU8[95202] >= HEAPU8[95203]) {
  $1 = HEAPU8[95202] - HEAPU8[95203] | 0;
 } else {
  $1 = (HEAPU8[95202] + 256 | 0) - HEAPU8[95203] | 0;
 }
 HEAP32[$2 + 12 >> 2] = $1;
 return HEAP32[$0 + 12 >> 2];
}
function jswrap_espruino_lockConsole() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = jsvObjectGetChild(HEAP32[23775], 32306, 0);
 if (HEAP32[$0 + 12 >> 2]) {
  HEAP16[47566] = HEAPU16[47566] | 1024;
 }
 jsvUnLock(HEAP32[$0 + 12 >> 2]);
 global$0 = $0 + 16 | 0;
}
function jsvUnLock3($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jsvUnLock(HEAP32[$3 + 12 >> 2]);
 jsvUnLock(HEAP32[$3 + 8 >> 2]);
 jsvUnLock(HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 16 | 0;
}
function btn5Handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 if (!(btnTouchHandler() & 1)) {
  btnHandlerCommon(5, HEAP8[$2 + 15 | 0] & 1, HEAPU8[$2 + 14 | 0]);
 }
 global$0 = $2 + 16 | 0;
}
function btn4Handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 if (!(btnTouchHandler() & 1)) {
  btnHandlerCommon(4, HEAP8[$2 + 15 | 0] & 1, HEAPU8[$2 + 14 | 0]);
 }
 global$0 = $2 + 16 | 0;
}
function tflite__ops__micro__activations___28anonymous_20namespace_29__OpData__OpData_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
}
function tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = HEAP32[$2 + 8 >> 2];
}
function jswrap_string_charCodeAt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jsvGetCharInString(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0 & 255;
}
function jswrap_math_sqrt($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 label$1 : {
  if (HEAPF64[$1 + 8 >> 3] >= 0) {
   $0 = exp(log(HEAPF64[$1 + 8 >> 3]) * .5);
   break label$1;
  }
  $0 = nan;
 }
 global$0 = $1 + 16 | 0;
 return +$0;
}
function jswrap_date_from_milliseconds($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAP32[$1 + 4 >> 2] = jspNewObject(0, 31345);
 jswrap_date_setTime(HEAP32[$1 + 4 >> 2], HEAPF64[$1 + 8 >> 3]);
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 4 >> 2];
}
function jshIsEventForPin($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 $0 = HEAPU8[HEAP32[$2 + 12 >> 2]] & 31;
 $1 = jshGetEventFlagsForPin(HEAPU8[$2 + 11 | 0]);
 global$0 = $2 + 16 | 0;
 return ($0 | 0) == ($1 & 255);
}
function _jswrap_promise_resolve($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_promise_resolve_or_reject_chain(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
 global$0 = $2 + 16 | 0;
}
function jswrap_modules_removeAllCached() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = jswrap_modules_getModuleList();
 if (HEAP32[$0 + 12 >> 2]) {
  jsvRemoveAllChildren(HEAP32[$0 + 12 >> 2]);
  jsvUnLock(HEAP32[$0 + 12 >> 2]);
 }
 global$0 = $0 + 16 | 0;
}
function _jswrap_promise_reject($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_promise_resolve_or_reject_chain(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
 global$0 = $2 + 16 | 0;
}
function jsvLockAgainSafe($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1 : {
  if (HEAP32[$1 + 12 >> 2]) {
   $0 = jsvLockAgain(HEAP32[$1 + 12 >> 2]);
   break label$1;
  }
  $0 = 0;
 }
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function jsiGetPreferredConsoleDevice() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP8[$0 + 15 | 0] = 21;
 if (!(jshIsDeviceInitialised(HEAPU8[$0 + 15 | 0]) & 1)) {
  HEAP8[$0 + 15 | 0] = 20;
 }
 HEAP8[$0 + 15 | 0] = 21;
 global$0 = $0 + 16 | 0;
 return HEAPU8[$0 + 15 | 0];
}
function terminalScroll() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 80 | 0;
 global$0 = $0;
 HEAP8[53496] = HEAPU8[53496] + -1;
 if (terminalGetGFX($0 + 8 | 0) & 1) {
  $1 = $0 + 8 | 0;
  graphicsScroll($1, 0, -8);
  terminalSetGFX($1);
  jswrap_terminal_idle();
 }
 global$0 = $0 + 80 | 0;
}
function jsvArrayPushAndUnLock($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvArrayPush(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 jsvUnLock(HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
}
function getCalendarDateFromDateVar($0, $1) {
 var $2 = 0;
 $2 = global$0 - 32 | 0;
 global$0 = $2;
 HEAP32[$2 + 28 >> 2] = $1;
 HEAP8[$2 + 27 | 0] = 0;
 getTimeFromDateVar($2, HEAP32[$2 + 28 >> 2], HEAP8[$2 + 27 | 0] & 1);
 getCalendarDate($0, HEAP32[$2 >> 2]);
 global$0 = $2 + 32 | 0;
}
function jswrap_pin_mode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jswrap_io_pinMode(jshGetPinFromVar(HEAP32[$2 + 12 >> 2]) & 255, HEAP32[$2 + 8 >> 2], 0);
 global$0 = $2 + 16 | 0;
}
function fminf($0, $1) {
 if (((wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0)) & 2147483647) >>> 0 <= 2139095040) {
  return ((wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(0)) & 2147483647) >>> 0 > 2139095040 ? $0 : Math_fround(Math_min($0, $1));
 }
 return $1;
}
function fmaxf($0, $1) {
 if (((wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0)) & 2147483647) >>> 0 <= 2139095040) {
  return ((wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(0)) & 2147483647) >>> 0 > 2139095040 ? $0 : Math_fround(Math_max($0, $1));
 }
 return $1;
}
function jspeiGetScopesAsVar() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 label$1 : {
  if (!HEAP32[23776]) {
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = jsvCopy(HEAP32[23776], 1);
 }
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function jsfGetJSON($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jsfGetJSONWhitespace(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
 global$0 = $3 + 16 | 0;
}
function itoch($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (HEAP32[$1 + 8 >> 2] < 10) {
   HEAP8[$1 + 15 | 0] = HEAP32[$1 + 8 >> 2] + 48;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAP32[$1 + 8 >> 2] + 87;
 }
 return HEAP8[$1 + 15 | 0];
}
function gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[jshFlashGetMemMapAddress($1 + 8 | 0) >> 2] = $0;
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function jsvGetArrayLength($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 8 >> 2] >> 2];
 }
 return HEAP32[$1 + 12 >> 2];
}
function jsvGetRef($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1 : {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP16[$1 + 14 >> 1] = 0;
   break label$1;
  }
  HEAP16[$1 + 14 >> 1] = (HEAP32[$1 + 8 >> 2] - 55088 >> 4) + 1;
 }
 return HEAPU16[$1 + 14 >> 1];
}
function gen_jswrap_peek32($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jswrap_io_peek(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 4);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function gen_jswrap_peek16($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jswrap_io_peek(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 2);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function jsvHasCharacterData($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = jsvIsString(HEAP32[$1 + 12 >> 2]);
 $0 = 1;
 if (!($2 & 1)) {
  $0 = jsvIsStringExt(HEAP32[$1 + 12 >> 2]);
 }
 global$0 = $1 + 16 | 0;
 return $0 & 1;
}
function gen_jswrap_peek8($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jswrap_io_peek(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
 global$0 = $2 + 16 | 0;
 return $0 | 0;
}
function ftoa_bounded($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAPF64[$3 + 8 >> 3] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 ftoa_bounded_extra(HEAPF64[$3 + 8 >> 3], HEAP32[$3 + 4 >> 2], HEAP32[$3 >> 2], 10, -1);
 global$0 = $3 + 16 | 0;
}
function tflite__RuntimeShape__DimsData_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if (HEAP32[$0 >> 2] > 4) {
   $0 = HEAP32[$0 + 4 >> 2];
   break label$1;
  }
  $0 = $0 + 4 | 0;
 }
 return $0;
}
function jsvRefRef($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP16[$1 + 14 >> 1] = $0;
 HEAP32[$1 + 8 >> 2] = jsvLock(HEAPU16[$1 + 14 >> 1]);
 jsvRef(HEAP32[$1 + 8 >> 2]);
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 global$0 = $1 + 16 | 0;
 return HEAPU16[$1 + 14 >> 1];
}
function jsvObjectIteratorNew($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jsvLockSafe(jsvGetFirstChild(HEAP32[$2 + 8 >> 2]) & 65535);
 HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = $0;
 global$0 = $2 + 16 | 0;
}
function gen_jswrap_Math_asin($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = jswrap_math_atan(HEAPF64[$1 + 8 >> 3] / jswrap_math_sqrt(1 - HEAPF64[$1 + 8 >> 3] * HEAPF64[$1 + 8 >> 3]));
 global$0 = $1 + 16 | 0;
 return +$0;
}
function gen_jswrap_Math_acos($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = jswrap_math_atan(jswrap_math_sqrt(1 - HEAPF64[$1 + 8 >> 3] * HEAPF64[$1 + 8 >> 3]) / HEAPF64[$1 + 8 >> 3]);
 global$0 = $1 + 16 | 0;
 return +$0;
}
function tflite__GetModel_28void_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = tflite__Model_20const__20flatbuffers__GetRoot_tflite__Model__28void_20const__29(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0;
}
function _jswrap_onewire_write_cb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 OneWireWrite(HEAPU8[HEAP32[$2 + 8 >> 2]], 8, HEAP32[$2 + 12 >> 2], 0);
 global$0 = $2 + 16 | 0;
}
function _jswrap_drawImageLayerStartX($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[HEAP32[$1 + 12 >> 2] + 136 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 128 >> 2];
 HEAP32[HEAP32[$1 + 12 >> 2] + 140 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 132 >> 2];
}
function tflite__NumElements_28TfLiteTensor_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = tflite__NumElements_28TfLiteIntArray_20const__29(HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0;
}
function jswrap_banglejs_beep_callback() {
 HEAP16[125666] = 0;
 label$1 : {
  if (HEAP32[62815] & 64) {
   _jswrap_banglejs_setVibration();
   break label$1;
  }
  jshPinSetState(18, 4);
 }
 jspromise_resolve(HEAP32[62834], 0);
 jsvUnLock(HEAP32[62834]);
 HEAP32[62834] = 0;
}
function jstStopBufferTimerTask($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 $2 = $1 + 10 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP16[$1 + 10 >> 1] = jsvGetRef(HEAP32[$1 + 12 >> 2]);
 $0 = utilTimerRemoveTask($2);
 global$0 = $1 + 16 | 0;
 return $0 & 1;
}
function jspeiLoadScopesFromVar($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[23776]);
 HEAP32[23776] = 0;
 if (HEAP32[$1 + 12 >> 2]) {
  HEAP32[23776] = jsvCopy(HEAP32[$1 + 12 >> 2], 1);
 }
 global$0 = $1 + 16 | 0;
}
function jswrap_serial_println($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_serial_print(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1, 1);
 global$0 = $2 + 16 | 0;
}
function tflite__MicroMutableOpResolver___MicroMutableOpResolver_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 jshFlashGetMemMapAddress($0);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function jswrap_serial_write($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_serial_print(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0, 0);
 global$0 = $2 + 16 | 0;
}
function jswrap_serial_print($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_serial_print(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1, 0);
 global$0 = $2 + 16 | 0;
}
function jshGetPinFromVarAndUnLock($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return HEAPU8[$1 + 11 | 0];
}
function itostr($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 itostr_extra(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 1, HEAP32[$3 + 4 >> 2]);
 global$0 = $3 + 16 | 0;
}
function jsvAsArrayIndexAndUnLock($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvAsArrayIndex(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function getTimeFromDateVar($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP8[$3 + 11 | 0] = $2;
 getTimeFromMilliSeconds($0, jswrap_date_getTime(HEAP32[$3 + 12 >> 2]), HEAP8[$3 + 11 | 0] & 1);
 global$0 = $3 + 16 | 0;
}
function gen_jswrap_Math_tan($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = jswrap_math_sin(HEAPF64[$1 + 8 >> 3]) / jswrap_math_sin(HEAPF64[$1 + 8 >> 3] + 1.5707963267948966);
 global$0 = $1 + 16 | 0;
 return +$0;
}
function add_tag_bit($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 global$0 = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 push_bits(HEAP32[$3 + 12 >> 2], 1, HEAPU8[$3 + 7 | 0], HEAP32[$3 + 8 >> 2]);
 global$0 = $3 + 16 | 0;
}
function tflite__SizeOfDimension_28TfLiteTensor_20const__2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[(HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] + 4 | 0) + (HEAP32[$2 + 8 >> 2] << 2) >> 2];
}
function jsvIsBasic($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = jsvIsNumeric(HEAP32[$1 + 12 >> 2]);
 $0 = 1;
 if (!($2 & 1)) {
  $0 = jsvIsString(HEAP32[$1 + 12 >> 2]);
 }
 global$0 = $1 + 16 | 0;
 return $0 & 1;
}
function flatbuffers__Table__GetVTable_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = $0 - flatbuffers__Vector_int___size_28_29_20const($0) | 0;
 global$0 = $1 + 16 | 0;
 return $0;
}
function tflite__GreedyMemoryPlanner___GreedyMemoryPlanner_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 FUNCTION_TABLE[650]($0) | 0;
 do_indexing($0);
 global$0 = $1 + 16 | 0;
}
function jswrap_pin_read($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
 $0 = jshPinInput(HEAPU8[$1 + 11 | 0]);
 global$0 = $1 + 16 | 0;
 return $0 & 1;
}
function jsvSkipOneNameAndUnLock($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvSkipOneName(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function jsvGetArrayItem($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jsvSkipNameAndUnLock(jsvGetArrayIndex(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]));
 global$0 = $2 + 16 | 0;
 return $0;
}
function jswrap_interface_load($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP16[47566] = HEAPU16[47566] | 64;
 jsvObjectSetChildAndUnLock(HEAP32[23775], 32995, HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
}
function gen_jswrap_E_showMenu($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
 $0 = jspExecuteJSFunction(19945, 1, $1 + 8 | 0);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function _jsvGetIntegerAndUnLock($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvGetInteger(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function _jsvGetBoolAndUnLock($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jsvGetBool(HEAP32[$1 + 12 >> 2]) & 1;
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return HEAP8[$1 + 11 | 0] & 1;
}
function jsvIsStringEqual($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jsvIsStringEqualOrStartsWith(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
 global$0 = $2 + 16 | 0;
 return $0 & 1;
}
function pop_arg_long_double($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = $1;
 $1 = HEAP32[$1 >> 2] + 15 & -16;
 HEAP32[$2 >> 2] = $1 + 16;
 HEAPF64[$0 >> 3] = __trunctfdf2(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
}
function jsvIterateCallbackCount($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 0;
 jsvIterateBufferCallback(HEAP32[$1 + 12 >> 2], 7, $1 + 8 | 0);
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function flatbuffers__Vector_unsigned_20char___data_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int___Data_28_29_20const(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0;
}
function jswrap_flash_getFree() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = jshFlashGetFree();
 if (!HEAP32[$0 + 12 >> 2]) {
  HEAP32[$0 + 12 >> 2] = jsvNewWithFlags(3);
 }
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function jswrap_espruino_getErrorFlags() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP8[$0 + 15 | 0] = HEAPU8[95095];
 HEAP8[95095] = 0;
 $1 = jswrap_espruino_getErrorFlagArray(HEAPU8[$0 + 15 | 0]);
 global$0 = $0 + 16 | 0;
 return $1 | 0;
}
function jsvSkipNameAndUnLock($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvSkipName(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function jsvAsStringAndUnLock($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvAsString(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function jsvAsNumberAndUnLock($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvAsNumber(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function int_20gemmlowp__MaskIfZero_int__28int_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29((HEAP32[$1 + 12 >> 2] != 0 ^ -1) & 1);
 global$0 = $1 + 16 | 0;
 return $0;
}
function jswrap_pipe_kill() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = pipeGetArray(0);
 if (HEAP32[$0 + 12 >> 2]) {
  jsvRemoveAllChildren(HEAP32[$0 + 12 >> 2]);
  jsvUnLock(HEAP32[$0 + 12 >> 2]);
 }
 global$0 = $0 + 16 | 0;
}
function jswrap_interface_echo($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 label$1 : {
  if (HEAP8[$1 + 15 | 0] & 1) {
   HEAP16[47566] = HEAPU16[47566] & -2;
   break label$1;
  }
  HEAP16[47566] = HEAPU16[47566] | 1;
 }
}
function jsiLoop() {
 jshIdle();
 jsiIdle();
 jsiCheckErrors();
 if (HEAP32[23778] & 6144) {
  HEAP32[23778] = HEAP32[23778] & -6145;
  if (jsvIsEmptyString(HEAP32[23784]) & 1) {
   HEAP32[23798] = 0;
  }
  jsiClearInputLine(1);
 }
 jsiConsoleReturnInputLine();
}
function gen_jswrap_poke32($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jswrap_io_poke(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 4);
 global$0 = $2 + 16 | 0;
}
function gen_jswrap_poke16($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jswrap_io_poke(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 2);
 global$0 = $2 + 16 | 0;
}
function gen_jswrap_poke8($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jswrap_io_poke(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
 global$0 = $2 + 16 | 0;
}
function nmea_decode_2($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = Math_imul(chtod(HEAP8[HEAP32[$1 + 12 >> 2]]), 10) + chtod(HEAP8[HEAP32[$1 + 12 >> 2] + 1 | 0]) | 0;
 global$0 = $1 + 16 | 0;
 return $0 & 255;
}
function jsvStringCharToUpper($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 if (HEAP8[$1 + 15 | 0] < 97 | HEAP8[$1 + 15 | 0] > 122) {
  $0 = HEAP8[$1 + 15 | 0];
 } else {
  $0 = HEAP8[$1 + 15 | 0] - 32 | 0;
 }
 return $0 << 24 >> 24;
}
function jsvAppendStringVarComplete($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsvAppendStringVar(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0, 2147483647);
 global$0 = $2 + 16 | 0;
}
function gen_jswrap_Object_getOwnPropertyNames($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_object_keys_or_property_names(HEAP32[$1 + 12 >> 2], 1);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function gemmlowp__FixedPoint_int_2c_200___One_28_29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29(2147483647);
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 8 >> 2];
}
function fmt_x($0, $1, $2, $3) {
 if ($0 | $1) {
  while (1) {
   $2 = $2 + -1 | 0;
   HEAP8[$2 | 0] = HEAPU8[($0 & 15) + 50240 | 0] | $3;
   $0 = ($1 & 15) << 28 | $0 >>> 4;
   $1 = $1 >>> 4;
   if ($0 | $1) {
    continue;
   }
   break;
  }
 }
 return $2;
}
function _jsvGetFloatAndUnLock($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAPF64[$1 >> 3] = jsvGetFloat(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return HEAPF64[$1 >> 3];
}
function jswrap_interface_reset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = $0;
 HEAP16[47566] = HEAPU16[47566] | 128;
 if (HEAP8[$1 + 15 | 0] & 1) {
  jsfRemoveCodeFromFlash();
 }
 global$0 = $1 + 16 | 0;
}
function jsvStringCharToLower($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 if (HEAP8[$1 + 15 | 0] < 65 | HEAP8[$1 + 15 | 0] > 90) {
  $0 = HEAP8[$1 + 15 | 0];
 } else {
  $0 = HEAP8[$1 + 15 | 0] + 32 | 0;
 }
 return $0 << 24 >> 24;
}
function gemmlowp__FixedPoint_int_2c_202___One_28_29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29(536870912);
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 8 >> 2];
}
function btn3Handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 btnHandlerCommon(3, HEAP8[$2 + 15 | 0] & 1, HEAPU8[$2 + 14 | 0]);
 global$0 = $2 + 16 | 0;
}
function btn2Handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 btnHandlerCommon(2, HEAP8[$2 + 15 | 0] & 1, HEAPU8[$2 + 14 | 0]);
 global$0 = $2 + 16 | 0;
}
function btn1Handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 btnHandlerCommon(1, HEAP8[$2 + 15 | 0] & 1, HEAPU8[$2 + 14 | 0]);
 global$0 = $2 + 16 | 0;
}
function jswrap_math_atan2($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAPF64[$2 + 8 >> 3] = $0;
 HEAPF64[$2 >> 3] = $1;
 $0 = atan2(HEAPF64[$2 + 8 >> 3], HEAPF64[$2 >> 3]);
 global$0 = $2 + 16 | 0;
 return +$0;
}
function jswrap_date_getTime($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = jsvGetFloatAndUnLock(jsvObjectGetChild(HEAP32[$1 + 12 >> 2], 31409, 0));
 global$0 = $1 + 16 | 0;
 return +$2;
}
function jstGetLastPinTimerTask($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = utilTimerGetLastTask(14, $2 + 15 | 0, HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
 return $0 & 1;
}
function srand($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[13338] = HEAP32[$1 + 12 >> 2] & 65535 | HEAP32[$1 + 12 >> 2] << 16;
 HEAP32[13339] = HEAP32[$1 + 12 >> 2] & -65536 | HEAP32[$1 + 12 >> 2] >>> 16;
}
function flatbuffers__Vector_int___Length_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int___size_28_29_20const(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0;
}
function jswrap_pin_reset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
 jshPinOutput(HEAPU8[$1 + 11 | 0], 0);
 global$0 = $1 + 16 | 0;
}
function jswrap_date_getTimezoneOffset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
 global$0 = $1 + 32 | 0;
 return 0 - HEAP32[$1 + 20 >> 2] | 0;
}
function jsvUnRefRef($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP16[$1 + 14 >> 1] = $0;
 HEAP32[$1 + 8 >> 2] = jsvLock(HEAPU16[$1 + 14 >> 1]);
 jsvUnRef(HEAP32[$1 + 8 >> 2]);
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 global$0 = $1 + 16 | 0;
}
function jswrap_date_getFullYear($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getCalendarDateFromDateVar($1 + 8 | 0, HEAP32[$1 + 28 >> 2]);
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 20 >> 2];
}
function gen_jswrap_Graphics_setFontBitmap($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_graphics_setFontSizeX(HEAP32[$1 + 12 >> 2], 8193, 0);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function jswrap_pin_set($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
 jshPinOutput(HEAPU8[$1 + 11 | 0], 1);
 global$0 = $1 + 16 | 0;
}
function gemmlowp__FixedPoint_int_2c_2012___Zero_28_29() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29(0);
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 8 >> 2];
}
function tflite__ops__micro__pack___28anonymous_20namespace_29__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return 0;
}
function graphicsFallbackSetPixel($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
}
function jswrap_date_getMonth($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getCalendarDateFromDateVar($1 + 8 | 0, HEAP32[$1 + 28 >> 2]);
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 16 >> 2];
}
function jsvRef($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvSetRefs(HEAP32[$1 + 12 >> 2], (jsvGetRefs(HEAP32[$1 + 12 >> 2]) & 65535) + 1 & 65535);
 global$0 = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function jsiOneSecondAfterStartup() {
 label$1 : {
  if (HEAPU8[53360] == 19) {
   HEAP8[53360] = jsiGetPreferredConsoleDevice();
   jshTransmitMove(HEAPU8[53360]);
   jshUSARTKick(HEAPU8[53360]);
   break label$1;
  }
  jshTransmitClearDevice();
 }
}
function jswrap_date_getDate($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getCalendarDateFromDateVar($1 + 8 | 0, HEAP32[$1 + 28 >> 2]);
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function gen_jswrap_ArrayBufferView_buffer($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvLock(jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function jswrap_referenceerror_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = _jswrap_error_constructor(HEAP32[$1 + 12 >> 2], 31574);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function jswrap_date_getDay($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getCalendarDateFromDateVar($1 + 8 | 0, HEAP32[$1 + 28 >> 2]);
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 24 >> 2];
}
function jsvIsBoolean($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return (HEAP32[$1 + 12 >> 2] ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) != 11 ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) == 16 : 1 : 0) & 1;
}
function float__20tflite__GetTensorData_float__28TfLiteTensor__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
 } else {
  $0 = 0;
 }
 return $0;
}
function jswrap_internalerror_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = _jswrap_error_constructor(HEAP32[$1 + 12 >> 2], 31560);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function jsvIsFunction($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return (HEAP32[$1 + 12 >> 2] ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) != 7 ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) == 8 : 1 : 0) & 1;
}
function jsvArrayBufferIteratorFree($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAPU16[HEAP32[$1 + 12 >> 2] + 20 >> 1]) {
  jsvStringIteratorFree(HEAP32[$1 + 12 >> 2]);
 }
 global$0 = $1 + 16 | 0;
}
function gen_jswrap_Graphics_getHeight($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_graphics_getWidthOrHeight(HEAP32[$1 + 12 >> 2], 1);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function jswrap_storagefile_readLine($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_storagefile_read_internal(HEAP32[$1 + 12 >> 2], -1);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function jsfPrintJSON($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsfGetJSONWithCallback(HEAP32[$2 + 12 >> 2], 0, HEAP32[$2 + 8 >> 2], 0, 9, 0);
 global$0 = $2 + 16 | 0;
}
function gen_jswrap_Graphics_getWidth($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_graphics_getWidthOrHeight(HEAP32[$1 + 12 >> 2], 0);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function flatbuffers__Vector_int___size_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jshFlashGetMemMapAddress(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 global$0 = $1 + 16 | 0;
 return $0;
}
function jswrap_syntaxerror_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = _jswrap_error_constructor(HEAP32[$1 + 12 >> 2], 31538);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function jswrap_pin_getMode($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_io_getPinMode(jshGetPinFromVar(HEAP32[$1 + 12 >> 2]) & 255);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function jsvIsObject($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return (HEAP32[$1 + 12 >> 2] ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) != 5 ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) == 1 : 1 : 0) & 1;
}
function jspromise_resolve($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_promise_queueresolve(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
}
function jspSetInterrupted($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 label$1 : {
  if (HEAP8[$1 + 15 | 0] & 1) {
   HEAP32[23778] = HEAP32[23778] | 16;
   break label$1;
  }
  HEAP32[23778] = HEAP32[23778] & -17;
 }
}
function jshTransmitClearDevice() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP8[$0 + 15 | 0] = 19;
 while (1) {
  if ((jshGetCharToTransmit(HEAPU8[$0 + 15 | 0]) | 0) >= 0) {
   continue;
  }
  break;
 }
 global$0 = $0 + 16 | 0;
}
function gen_jswrap_String_toUpperCase($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_string_toUpperLowerCase(HEAP32[$1 + 12 >> 2], 1);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function gen_jswrap_String_toLowerCase($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_string_toUpperLowerCase(HEAP32[$1 + 12 >> 2], 0);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function jsiShowInputLine() {
 var $0 = 0, $1 = 0;
 $1 = !(jsiEcho() & 1);
 $0 = 0;
 label$1 : {
  if ($1) {
   break label$1;
  }
  $0 = 0;
  if (HEAP8[95140] & 1) {
   break label$1;
  }
  $0 = jsiPasswordProtected() ^ -1;
 }
 return $0 & 1;
}
function gen_jswrap_Object_keys($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_object_keys_or_property_names(HEAP32[$1 + 12 >> 2], 0);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function rand() {
 HEAP32[13339] = Math_imul(HEAP32[13339] & 65535, 36969) + (HEAP32[13339] >>> 16);
 HEAP32[13338] = Math_imul(HEAP32[13338] & 65535, 18e3) + (HEAP32[13338] >>> 16);
 return HEAP32[13338] + (HEAP32[13339] << 16) & 2147483647;
}
function jswrap_typeerror_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = _jswrap_error_constructor(HEAP32[$1 + 12 >> 2], 31550);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function jswrap_date_getMilliseconds($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 4 >> 2];
}
function jspromise_reject($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_promise_queuereject(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
}
function jsserialGetSerialList($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = jsvObjectGetChild(HEAP32[23775], 7708, (HEAP8[$1 + 15 | 0] & 1 ? 3 : 0) & 65535);
 global$0 = $1 + 16 | 0;
 return $0;
}
function gen_jswrap_Graphics_getBgColor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_graphics_getColorX(HEAP32[$1 + 12 >> 2], 0);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function gen_jswrap_ArrayBufferView_byteLength($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_imul(HEAPU16[HEAP32[$1 + 12 >> 2] + 2 >> 1], HEAPU16[HEAP32[$1 + 12 >> 2] + 4 >> 1] & 15) | 0;
}
function onewire_getpin($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jshGetPinFromVarAndUnLock(jsvObjectGetChild(HEAP32[$1 + 12 >> 2], 35853, 0));
 global$0 = $1 + 16 | 0;
 return $0 & 255;
}
function jswrap_error_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = _jswrap_error_constructor(HEAP32[$1 + 12 >> 2], 31532);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function jswrap_date_getMinutes($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 12 >> 2];
}
function gen_jswrap_Graphics_getColor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_graphics_getColorX(HEAP32[$1 + 12 >> 2], 1);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function jswrap_date_getSeconds($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function jshGetSystemTime() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP8[$0 + 15 | 0] = 0;
 $1 = jshGetTimeFromMilliseconds(+emscripten_asm_const_dii(27857, $0 + 15 | 0, 0));
 global$0 = $0 + 16 | 0;
 return $1;
}
function jswrap_object_getPrototypeOf($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jspGetNamedField(HEAP32[$1 + 12 >> 2], 34780, 0);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function jswrap_date_getHours($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 32 | 0;
 global$0 = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
 global$0 = $1 + 32 | 0;
 return HEAP32[$1 + 16 >> 2];
}
function gen_jswrap_Array_pop($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvSkipNameAndUnLock(jsvArrayPop(HEAP32[$1 + 12 >> 2]));
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function tflite__RuntimeShape___RuntimeShape_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[HEAP32[$1 + 12 >> 2] >> 2] > 4) {
  abort();
  abort();
 }
 global$0 = $1 + 16 | 0;
}
function jswrap_interface_clearInterval($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _jswrap_interface_clearTimeoutOrInterval(HEAP32[$1 + 12 >> 2], 0);
 global$0 = $1 + 16 | 0;
}
function pipeGetArray($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = jsvObjectGetChild(HEAP32[23775], 36233, (HEAP8[$1 + 15 | 0] & 1 ? 3 : 0) & 65535);
 global$0 = $1 + 16 | 0;
 return $0;
}
function jswrap_interface_clearTimeout($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _jswrap_interface_clearTimeoutOrInterval(HEAP32[$1 + 12 >> 2], 1);
 global$0 = $1 + 16 | 0;
}
function gen_jswrap_Serial_find($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = jshGetDeviceObjectFor(768, 848, HEAPU8[$1 + 15 | 0]);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function jswrap_espruino_asm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsExceptionHere(1, 32491, 0);
 global$0 = $2 + 16 | 0;
}
function jshGetWatchedPinState($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = jshPinGetValue(HEAPU8[(HEAPU8[$1 + 15 | 0] - 1 | 0) + 251232 | 0]);
 global$0 = $1 + 16 | 0;
 return $0 & 1;
}
function gen_jswrap_Math_cos($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = jswrap_math_sin(HEAPF64[$1 + 8 >> 3] + 1.5707963267948966);
 global$0 = $1 + 16 | 0;
 return +$0;
}
function jsvUnLock2($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsvUnLock(HEAP32[$2 + 12 >> 2]);
 jsvUnLock(HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
}
function jsiConsolePrintf($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 vcbprintf(9, 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 global$0 = $2 + 16 | 0;
}
function fmt_o($0, $1, $2) {
 if ($0 | $1) {
  while (1) {
   $2 = $2 + -1 | 0;
   HEAP8[$2 | 0] = $0 & 7 | 48;
   $0 = ($1 & 7) << 29 | $0 >>> 3;
   $1 = $1 >>> 3;
   if ($0 | $1) {
    continue;
   }
   break;
  }
 }
 return $2;
}
function jsvArrayBufferIteratorGetIndex($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvNewFromInteger(HEAP32[HEAP32[$1 + 12 >> 2] + 32 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0;
}
function jsvAppendCharacter($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 jsvAppendStringBuf(HEAP32[$2 + 12 >> 2], $2 + 11 | 0, 1);
 global$0 = $2 + 16 | 0;
}
function jspKill() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 jspSoftKill();
 HEAP32[$0 + 12 >> 2] = jsvFindOrCreateRoot();
 jsvUnRef(HEAP32[$0 + 12 >> 2]);
 jsvUnLock(HEAP32[$0 + 12 >> 2]);
 global$0 = $0 + 16 | 0;
}
function gen_jswrap_SPI_find($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = jshGetDeviceObjectFor(512, 544, HEAPU8[$1 + 15 | 0]);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function gen_jswrap_I2C_find($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = jshGetDeviceObjectFor(640, 688, HEAPU8[$1 + 15 | 0]);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function dly($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) {
  do_indexing(HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
 }
 global$0 = $1 + 16 | 0;
}
function __sindf($0) {
 var $1 = 0, $2 = 0;
 $1 = $0 * $0;
 $2 = $1 * $0;
 return Math_fround($2 * ($1 * $1) * ($1 * 2718311493989822e-21 + -.00019839334836096632) + ($2 * ($1 * .008333329385889463 + -.16666666641626524) + $0));
}
function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $0 = FUNCTION_TABLE[$0]($1, $2, $3, $4) | 0;
 setTempRet0(i64toi32_i32$HIGH_BITS | 0);
 return $0 | 0;
}
function gen_jswrap_Math_min($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = jswrap_math_minmax(HEAP32[$1 + 12 >> 2], 0);
 global$0 = $1 + 16 | 0;
 return +$2;
}
function gen_jswrap_Math_max($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = jswrap_math_minmax(HEAP32[$1 + 12 >> 2], 1);
 global$0 = $1 + 16 | 0;
 return +$2;
}
function float_20tflite__TfLiteRound_float__28float_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAPF32[$1 + 12 >> 2] = $0;
 $0 = round_28float_29(HEAPF32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0;
}
function legalstub$dynCall_jjj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $0 = FUNCTION_TABLE[$0]($1, $2, $3, $4) | 0;
 setTempRet0(i64toi32_i32$HIGH_BITS | 0);
 return $0 | 0;
}
function jsfNameFromVarAndUnLock($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 global$0 = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 jsfNameFromVar($0, HEAP32[$2 + 12 >> 2]);
 jsvUnLock(HEAP32[$2 + 12 >> 2]);
 global$0 = $2 + 16 | 0;
}
function jswrap_math_abs($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 if (HEAPF64[$1 + 8 >> 3] < 0) {
  $0 = -HEAPF64[$1 + 8 >> 3];
 } else {
  $0 = HEAPF64[$1 + 8 >> 3];
 }
 return +$0;
}
function jswrap_pipe_src_close_listener($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jswrap_pipe_close_listener(HEAP32[$1 + 12 >> 2], 36038);
 global$0 = $1 + 16 | 0;
}
function jswrap_pipe_dst_close_listener($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jswrap_pipe_close_listener(HEAP32[$1 + 12 >> 2], 36045);
 global$0 = $1 + 16 | 0;
}
function jsiInit() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP8[$0 + 15 | 0] = 1;
 HEAP16[47566] = 2048;
 HEAP8[53360] = 19;
 jsiSemiInit(HEAP8[$0 + 15 | 0] & 1);
 jsiSetBusy(1, 0);
 global$0 = $0 + 16 | 0;
}
function jswrap_espruino_setClock($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvIsFlashString(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function jsvUnRef($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvSetRefs(HEAP32[$1 + 12 >> 2], (jsvGetRefs(HEAP32[$1 + 12 >> 2]) & 65535) - 1 & 65535);
 global$0 = $1 + 16 | 0;
}
function jsvArrayIsEmpty($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvGetFirstChild(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return (($0 & 65535) != 0 ^ -1) & 1;
}
function sin_28float_29($0) {
 $0 = Math_fround($0);
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAPF32[$1 + 12 >> 2] = $0;
 $0 = sinf(HEAPF32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return Math_fround($0);
}
function log_28float_29($0) {
 $0 = Math_fround($0);
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAPF32[$1 + 12 >> 2] = $0;
 $0 = logf(HEAPF32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return Math_fround($0);
}
function jsvSkipName($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvSkipNameWithParent(HEAP32[$1 + 12 >> 2], 1, 0);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function graphicsFallbackGetPixel($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return 0;
}
function cos_28float_29($0) {
 $0 = Math_fround($0);
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAPF32[$1 + 12 >> 2] = $0;
 $0 = cosf(HEAPF32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return Math_fround($0);
}
function double_20tflite__TfLiteRound_double__28double_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = +round(+HEAPF64[$1 + 8 >> 3]);
 global$0 = $1 + 16 | 0;
 return $0;
}
function jswrap_boolean_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvGetBool(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0 & 1;
}
function jsiConsolePrintStringVar($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsiConsolePrintStringVarWithNewLineChar(HEAP32[$1 + 12 >> 2], 0, 0);
 global$0 = $1 + 16 | 0;
}
function gen_jswrap_Array_isArray($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvIsArray(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0 & 1;
}
function round_28float_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAPF32[$1 + 12 >> 2] = $0;
 $0 = Math_fround(roundf(Math_fround(HEAPF32[$1 + 12 >> 2])));
 global$0 = $1 + 16 | 0;
 return $0;
}
function jshGetMillisecondsFromTime($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $1;
 return (+HEAPU32[$2 + 8 >> 2] + 4294967296 * +HEAP32[$2 + 12 >> 2]) / 1e3;
}
function int_20gemmlowp__ShiftRight_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2] >> HEAP32[$2 + 8 >> 2];
}
function stringToFloat($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = stringToFloatWithRadix(HEAP32[$1 + 12 >> 2], 0, 0);
 global$0 = $1 + 16 | 0;
 return $2;
}
function jswrap_storage_list($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsfListFiles(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0 | 0;
}
function jsvGetFloatAndUnLock($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = _jsvGetFloatAndUnLock(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return $2;
}
function jswrap_date_now() {
 return +((+(jshGetSystemTime() >>> 0) + 4294967296 * +(i64toi32_i32$HIGH_BITS | 0)) / (+(jshGetTimeFromMilliseconds(1e3) >>> 0) + 4294967296 * +(i64toi32_i32$HIGH_BITS | 0)) * 1e3);
}
function jsvSetArrayLength($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[$2 + 7 | 0] = 0;
 HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = HEAP32[$2 + 8 >> 2];
}
function jslNextCh() {
 var $0 = 0;
 if (HEAP32[HEAP32[13768] + 124 >> 2]) {
  $0 = HEAPU8[HEAP32[HEAP32[13768] + 124 >> 2] + HEAP32[HEAP32[13768] + 108 >> 2] | 0];
 } else {
  $0 = 0;
 }
 return $0 << 24 >> 24;
}
function jshI2CWrite($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 16 | 0;
 HEAP8[$5 + 15 | 0] = $0;
 HEAP8[$5 + 14 | 0] = $1;
 HEAP32[$5 + 8 >> 2] = $2;
 HEAP32[$5 + 4 >> 2] = $3;
 HEAP8[$5 + 3 | 0] = $4;
}
function int_20gemmlowp__Add_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 8 >> 2] | 0;
}
function jswrap_banglejs_setLCDOffset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 lcdST7789_setYOffset(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
}
function jsvGetIntegerAndUnLock($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = _jsvGetIntegerAndUnLock(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0;
}
function jshGetPinShouldStayWatched($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 return (HEAP32[(HEAPU8[$1 + 15 | 0] >> 5 << 2) + 95120 >> 2] >>> (HEAPU8[$1 + 15 | 0] & 31) & 1) != 0;
}
function int_20gemmlowp__BitAnd_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2] & HEAP32[$2 + 8 >> 2];
}
function get_input_offset($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = get_input_buffer_size(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0 & 65535;
}
function gen_jswrap_getTime() {
 return +((+(jshGetSystemTime() >>> 0) + 4294967296 * +(i64toi32_i32$HIGH_BITS | 0)) / (+(jshGetTimeFromMilliseconds(1e3) >>> 0) + 4294967296 * +(i64toi32_i32$HIGH_BITS | 0)));
}
function dynCall_iiiiiii($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6) | 0;
}
function __DOUBLE_BITS($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}
function jsvGetBoolAndUnLock($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = _jsvGetBoolAndUnLock(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0 & 1;
}
function jshSetEventDataPin($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 HEAP32[(HEAPU8[$2 + 15 | 0] << 2) + 95212 >> 2] = HEAPU8[$2 + 14 | 0] | -256;
}
function jsvSkipOneName($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvSkipNameWithParent(HEAP32[$1 + 12 >> 2], 0, 0);
 global$0 = $1 + 16 | 0;
 return $0;
}
function jshGetPinStateIsManual($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 return (HEAP32[(HEAPU8[$1 + 15 | 0] >> 5 << 2) + 95116 >> 2] >>> (HEAPU8[$1 + 15 | 0] & 31) & 1) != 0;
}
function dynCall_iidiiii($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6) | 0;
}
function stringToInt($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = stringToIntWithRadix(HEAP32[$1 + 12 >> 2], 0, 0, 0);
 global$0 = $1 + 16 | 0;
 return $0;
}
function jsvLockAgain($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP16[$0 + 14 >> 1] = HEAPU16[$0 + 14 >> 1] + 512;
 return HEAP32[$1 + 12 >> 2];
}
function __cosdf($0) {
 var $1 = 0;
 $0 = $0 * $0;
 $1 = $0 * $0;
 return Math_fround($0 * -.499999997251031 + 1 + $1 * .04166662332373906 + $0 * $1 * ($0 * 2439044879627741e-20 + -.001388676377460993));
}
function jspSetError() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 HEAP8[$0 + 15 | 0] = 0;
 HEAP32[23778] = HEAP32[23778] & -2 | 64;
 if (HEAP8[$0 + 15 | 0] & 1) {
  HEAP32[23778] = HEAP32[23778] | 128;
 }
}
function jshSetEventCallback($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[(HEAPU8[$2 + 15 | 0] << 2) + 95212 >> 2] = HEAP32[$2 + 8 >> 2];
}
function jsvInit() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP16[27542] = jsvInitJsVars(HEAP32[13337]);
 jsvCreateEmptyVarList();
 global$0 = $0 + 16 | 0;
}
function jsvHasRef($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvIsStringExt(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return ($0 ^ -1) & 1;
}
function jshIsPinValid($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 return HEAPU8[$1 + 15 | 0] < 32 ? (HEAPU8[Math_imul(HEAPU8[$1 + 15 | 0], 3) + 27904 | 0] & 15) != 0 : 0;
}
function err($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 >> 2] = HEAP32[$1 + 12 >> 2];
 jsExceptionHere(1, 7472, $1);
 global$0 = $1 + 16 | 0;
}
function dynCall_viiiiii($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6);
}
function jswrap_math_atan($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = atan(HEAPF64[$1 + 8 >> 3]);
 global$0 = $1 + 16 | 0;
 return +$0;
}
function jslSetLex($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[13768];
 HEAP32[13768] = HEAP32[$1 + 12 >> 2];
 return HEAP32[$1 + 8 >> 2];
}
function can_take_byte($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}
function _jsvGetAddressOf($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP16[$1 + 14 >> 1] = $0;
 $0 = jsvGetAddressOf(HEAPU16[$1 + 14 >> 1]);
 global$0 = $1 + 16 | 0;
 return $0;
}
function nmea_decode_1($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = chtod(HEAP8[HEAP32[$1 + 12 >> 2]]);
 global$0 = $1 + 16 | 0;
 return $0 & 255;
}
function jsvStringIteratorNext($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvStringIteratorNextInline(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
}
function jsvStringIteratorFree($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 global$0 = $1 + 16 | 0;
}
function jswrap_math_sin($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = sin(HEAPF64[$1 + 8 >> 3]);
 global$0 = $1 + 16 | 0;
 return +$0;
}
function jsvSetPrevSibling($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 HEAP16[HEAP32[$2 + 12 >> 2] + 6 >> 1] = HEAPU16[$2 + 10 >> 1];
}
function jsvSetNextSibling($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 HEAP16[HEAP32[$2 + 12 >> 2] + 4 >> 1] = HEAPU16[$2 + 10 >> 1];
}
function jsvStringIteratorGetIndex($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
}
function jsvSetLastChild($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 HEAP16[HEAP32[$2 + 12 >> 2] + 12 >> 1] = HEAPU16[$2 + 10 >> 1];
}
function jsvSetFirstChild($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 HEAP16[HEAP32[$2 + 12 >> 2] + 8 >> 1] = HEAPU16[$2 + 10 >> 1];
}
function jshPinAnalogOutput($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 HEAP8[$4 + 31 | 0] = $0;
 HEAPF64[$4 + 16 >> 3] = $1;
 HEAPF64[$4 + 8 >> 3] = $2;
 HEAP32[$4 + 4 >> 2] = $3;
}
function jswrap_espruino_compiledC($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsExceptionHere(1, 32567, 0);
 global$0 = $1 + 16 | 0;
}
function jsvStringIteratorHasChar($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}
function jsvObjectIteratorFree($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 global$0 = $1 + 16 | 0;
}
function jsvIsNativeFunction($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 127) == 71 : 0;
}
function jsvIsArrayBufferName($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) == 13 : 0;
}
function tflite__NumDimensions_28TfLiteTensor_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] >> 2];
}
function jsiConsolePrintChar($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP8[$1 + 15 | 0] = $0;
 jshTransmit(HEAPU8[53360], HEAPU8[$1 + 15 | 0]);
 global$0 = $1 + 16 | 0;
}
function tflite__MicroInterpreter__error_reporter_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
}
function sqrt_28float_29($0) {
 $0 = Math_fround($0);
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAPF32[$1 + 12 >> 2] = $0;
 return Math_fround(Math_fround(Math_sqrt(HEAPF32[$1 + 12 >> 2])));
}
function jsvSetRefs($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 HEAP16[HEAP32[$2 + 12 >> 2] + 10 >> 1] = HEAPU16[$2 + 10 >> 1];
}
function jsvNewFromEmptyString() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = jsvNewWithFlags(27);
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function jsvIsGetterOrSetter($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) == 6 : 0;
}
function jsvIsFunctionReturn($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) == 8 : 0;
}
function jsvIsNativeString($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) == 39 : 0;
}
function fabs_28float_29($0) {
 $0 = Math_fround($0);
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAPF32[$1 + 12 >> 2] = $0;
 return Math_fround(Math_fround(Math_abs(HEAPF32[$1 + 12 >> 2])));
}
function jsvIsNameIntBool($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) == 16 : 0;
}
function jspeBlock() {
 if (jslMatch(123) & 1) {
  jspeBlockNoBrackets();
  if (!(HEAP32[23778] & 80)) {
   label$3 : {
    if (jslMatch(125) & 1) {
     break label$3;
    }
   }
  }
 }
}
function abort_message() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 $0 = HEAP32[12574];
 __vfprintf_internal($0);
 fputc($0);
 abort();
 abort();
}
function st_save_backlog($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 save_backlog(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return 0;
}
function jsvIsFlatString($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) == 38 : 0;
}
function jsvIsArrayBuffer($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) == 4 : 0;
}
function dynCall_iiiiii($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5) | 0;
}
function tflite__NumOutputs_28TfLiteNode_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] >> 2];
}
function exp_28float_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAPF32[$1 + 12 >> 2] = $0;
 $0 = expf(HEAPF32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
 return $0;
}
function jsvSetInteger($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = HEAP32[$2 + 8 >> 2];
}
function jsvIsSimpleInt($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) == 9 : 0;
}
function jslCharPosFree($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 global$0 = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvStringIteratorFree(HEAP32[$1 + 12 >> 2]);
 global$0 = $1 + 16 | 0;
}
function jshBusyIdle() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP8[$0 + 15 | 0] = 0;
 emscripten_asm_const_iii(27785, $0 + 15 | 0, 0) | 0;
 global$0 = $0 + 16 | 0;
}
function dynCall_diiiii($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5);
}
function jswrap_banglejs_buzz_callback() {
 HEAP8[251330] = 0;
 _jswrap_banglejs_setVibration();
 jspromise_resolve(HEAP32[62835], 0);
 jsvUnLock(HEAP32[62835]);
 HEAP32[62835] = 0;
}
function jshFlashGetFree() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[$0 + 12 >> 2] = jsvNewWithFlags(3);
 global$0 = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function tflite__SimpleMemoryAllocator__GetDataSize_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}
function jsvIsNative($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 64) != 0 : 0;
}
function jsvIsFloat($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) == 10 : 0;
}
function tflite__NumInputs_28TfLiteNode_20const__29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] >> 2];
}
function jsvIsArray($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) == 3 : 0;
}
function jsvIsRoot($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) == 1 : 0;
}
function jsvIsPin($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) == 12 : 0;
}
function jsvIsNull($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] ? (HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] & 63) == 2 : 0;
}
function lcdST7789_init($0) {
 HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0;
 HEAP32[24394] = -1;
 HEAP32[24393] = -1;
 HEAP32[24390] = 0;
 HEAP32[24391] = 0;
 HEAP32[24392] = 1;
}
function gen_jswrap_ArrayBufferView_byteOffset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU16[HEAP32[$1 + 12 >> 2] >> 1];
}
function jslIsIDOrReservedWord() {
 return (HEAP16[HEAP32[13768] + 2 >> 1] != 128 ? HEAP16[HEAP32[13768] + 2 >> 1] >= 163 ? HEAP16[HEAP32[13768] + 2 >> 1] <= 198 : 0 : 1) & 1;
}
function dynCall_viiiii($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4, $5);
}
function jspCheckStackPosition() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP8[$0 + 15 | 0] = 1;
 global$0 = $0 + 16 | 0;
 return HEAP8[$0 + 15 | 0] & 1;
}
function jsvGetArrayBufferLength($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU16[HEAP32[$1 + 12 >> 2] + 2 >> 1];
}
function jswrap_banglejs_compassWr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}
function jspSoftKill() {
 jsvUnLock(HEAP32[23776]);
 HEAP32[23776] = 0;
 jsvUnLock(HEAP32[23775]);
 HEAP32[23775] = 0;
 jsvUnLock(HEAP32[23774]);
 HEAP32[23774] = 0;
}
function float_20flatbuffers__EndianScalar_float__28float_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAPF32[$1 + 12 >> 2] = $0;
 return HEAPF32[$1 + 12 >> 2];
}
function flatbuffers__Vector_int___Data_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}
function dynCall_iiiii($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4) | 0;
}
function jsInit() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 global$0 = $0;
 HEAP32[62804] = $0 + 12;
 jshInit();
 jsvInit();
 jsiInit();
 global$0 = $0 + 16 | 0;
}
function jswrap_banglejs_ioWr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
}
function dynCall_diiii($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return +FUNCTION_TABLE[$0]($1, $2, $3, $4);
}
function utilTimerIsFull() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 HEAP8[$0 + 15 | 0] = HEAPU8[97073] + 1 & 15;
 return HEAPU8[$0 + 15 | 0] == HEAPU8[97074];
}
function jsvGetFlatStringBlocks($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] + 15 >>> 4;
}
function dynCall_fff($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = Math_fround($2);
 return Math_fround(Math_fround(FUNCTION_TABLE[$0]($1, $2)));
}
function jshPinAnalog($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 HEAPF64[$1 >> 3] = 0;
 return +HEAPF64[$1 >> 3];
}
function jshFlashRead($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
}
function jsvObjectIteratorHasValue($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}
function jsGfxChanged() {
 var $0 = 0;
 $0 = global$0 - 16 | 0;
 HEAP8[$0 + 15 | 0] = HEAP8[97557] & 1;
 HEAP8[97557] = 0;
 return HEAP8[$0 + 15 | 0] & 1;
}
function floor_28float_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAPF32[$1 + 12 >> 2] = $0;
 return Math_fround(Math_floor(HEAPF32[$1 + 12 >> 2]));
}
function isNumeric($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 return HEAP8[$1 + 15 | 0] >= 48 ? HEAP8[$1 + 15 | 0] <= 57 : 0;
}
function dynCall_idddi($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4) | 0;
}
function int_20gemmlowp__BitNot_int__28int_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] ^ -1;
}
function ceil_28float_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAPF32[$1 + 12 >> 2] = $0;
 return Math_fround(Math_ceil(HEAPF32[$1 + 12 >> 2]));
}
function jsvGetLocks($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU16[HEAP32[$1 + 12 >> 2] + 14 >> 1] >> 9 & 15;
}
function dynCall_viiii($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4);
}
function jsvGetFirstChildSigned($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP16[HEAP32[$1 + 12 >> 2] + 8 >> 1];
}
function jshSPISend($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP8[$2 + 11 | 0] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2];
}
function jshFlashGetMemMapAddress($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}
function jsfGetFileSize($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] & 16777215;
}
function jshPinPulse($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP8[$3 + 15 | 0] = $0;
 HEAP8[$3 + 14 | 0] = $1;
 HEAPF64[$3 >> 3] = $2;
}
function dynCall_viidi($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 $4 = $4 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4);
}
function dlmemalign($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if ($0 >>> 0 <= 8) {
  return dlmalloc($1) | 0;
 }
 return internal_memalign($0, $1) | 0;
}
function __emscripten_stdout_seek($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 i64toi32_i32$HIGH_BITS = 0;
 return 0;
}
function jsvGetPrevSibling($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU16[HEAP32[$1 + 12 >> 2] + 6 >> 1];
}
function jsvGetNextSibling($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU16[HEAP32[$1 + 12 >> 2] + 4 >> 1];
}
function jsvGetAddressOf($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP16[$1 + 14 >> 1] = $0;
 return (HEAPU16[$1 + 14 >> 1] << 4) + 55072 | 0;
}
function jsfGetFileFlags($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] >>> 24;
}
function jsvGetLastChild($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU16[HEAP32[$1 + 12 >> 2] + 12 >> 1];
}
function jsvGetFirstChild($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU16[HEAP32[$1 + 12 >> 2] + 8 >> 1];
}
function jslGetTokenValueAsString() {
 HEAP8[HEAPU8[HEAP32[13768] + 100 | 0] + (HEAP32[13768] + 32 | 0) | 0] = 0;
 return HEAP32[13768] + 32 | 0;
}
function jspSoftInit() {
 HEAP32[23774] = jsvFindOrCreateRoot();
 HEAP32[23775] = jsvObjectGetChild(HEAP32[23774], 5043, 5);
 HEAP32[23778] = 1;
}
function tflite__BuiltinDataAllocator___BuiltinDataAllocator_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0;
 abort();
}
function is_finishing($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP8[HEAP32[$1 + 12 >> 2] + 11 | 0] & 1;
}
function jsfGetFlag($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 return (HEAPU8[55076] & HEAPU8[$1 + 15 | 0]) != 0;
}
function __wasm_i64_udiv($0, $1, $2, $3) {
 $0 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2, $3);
 return $0;
}
function jsvGetRefs($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU16[HEAP32[$1 + 12 >> 2] + 10 >> 1];
}
function dynCall_iiii($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3) | 0;
}
function dynCall_iidi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3) | 0;
}
function dynCall_diii($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return +FUNCTION_TABLE[$0]($1, $2, $3);
}
function jsiInputLineCursorMoved() {
 if (HEAP32[23793]) {
  jsvStringIteratorFree(95160);
  HEAP32[23793] = 0;
 }
 HEAP32[13341] = -1;
}
function jsfAlignAddress($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 3 & -4;
}
function __wasm_i64_mul($0, $1, $2, $3) {
 $0 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3);
 return $0;
}
function __wasm_rotl_i32($0) {
 var $1 = 0;
 $1 = $0 & 31;
 $0 = 0 - $0 & 31;
 return (-1 >>> $1 & -2) << $1 | (-1 << $0 & -2) >>> $0;
}
function jshSetSystemTime($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $1;
}
function dynCall_viii($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3);
}
function dynCall_dddd($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 return +FUNCTION_TABLE[$0]($1, $2, $3);
}
function jsvIsUndefined($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return !HEAP32[$1 + 12 >> 2];
}
function setThrew($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if (!HEAP32[63416]) {
  HEAP32[63417] = $1;
  HEAP32[63416] = $0;
 }
}
function jspeConditionalExpression() {
 return __jspeConditionalExpression(__jspeBinaryExpression(jspeUnaryExpression(), 0));
}
function dynCall_viid($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = +$3;
 FUNCTION_TABLE[$0]($1, $2, $3);
}
function dynCall_vidi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3);
}
function dynCall_ff($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 return Math_fround(Math_fround(FUNCTION_TABLE[$0]($1)));
}
function jshUSARTSetup($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}
function jshPinSetState($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
}
function jspDebuggerLoopIfCtrlC() {
 if (!(!(HEAP32[23778] & 4096) | (HEAP32[23778] & 63) != 1)) {
  jsiDebuggerLoop();
 }
}
function __wasm_i64_sdiv($0, $1, $2) {
 return _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E($0, $1, $2);
}
function terminalControlCharsReset() {
 HEAP8[252038] = 0;
 HEAP8[252039] = 0;
 HEAP8[252040] = 0;
 HEAP8[252041] = 0;
}
function dynCall_iii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return FUNCTION_TABLE[$0]($1, $2) | 0;
}
function dynCall_iid($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 return FUNCTION_TABLE[$0]($1, $2) | 0;
}
function dynCall_dii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return +FUNCTION_TABLE[$0]($1, $2);
}
function legalfunc$wasm2js_scratch_store_i64($0, $1) {
 legalimport$wasm2js_scratch_store_i64($0 | 0, $1 | 0);
}
function dynCall_did($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 return +FUNCTION_TABLE[$0]($1, $2);
}
function dynCall_ddd($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 return +FUNCTION_TABLE[$0]($1, $2);
}
function jsiGetHistory() {
 return jsvObjectGetChild(HEAP32[23775], HEAPU16[47566] & 8 ? 5721 : 5729, 3);
}
function dynCall_vii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 FUNCTION_TABLE[$0]($1, $2);
}
function jsdGetTimeZone() {
 return jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[23775], 31342, 0));
}
function dynCall_vid($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 FUNCTION_TABLE[$0]($1, $2);
}
function dynCall_vdi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 FUNCTION_TABLE[$0]($1, $2);
}
function jsvIsFlashString($0) {
 $0 = $0 | 0;
 HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0;
 return 0;
}
function jslSingleChar() {
 HEAP16[HEAP32[13768] + 2 >> 1] = HEAPU8[HEAP32[13768]];
 jslGetNextCh();
}
function __wasm_ctz_i32($0) {
 if ($0) {
  return 31 - Math_clz32($0 + -1 ^ $0) | 0;
 }
 return 32;
}
function stackAlloc($0) {
 $0 = $0 | 0;
 $0 = global$0 - $0 & -16;
 global$0 = $0;
 return $0 | 0;
}
function jshIdle() {
 if (HEAP8[53372] & 1) {
  jsiOneSecondAfterStartup();
 }
 HEAP8[53372] = 0;
}
function __bswap_32($0) {
 return $0 << 8 & 16711680 | $0 << 24 | ($0 >>> 8 & 65280 | $0 >>> 24);
}
function jswrap_graphics_getInstance() {
 return jsvObjectGetChild(HEAP32[23775], 38464, 0) | 0;
}
function get_input_buffer_size($0) {
 HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0;
 return 256;
}
function jswrap_modules_getModuleList() {
 return jsvObjectGetChild(HEAP32[23775], 34692, 5);
}
function dynCall_ii($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return FUNCTION_TABLE[$0]($1) | 0;
}
function __wasi_syscall_ret($0) {
 if (!$0) {
  return 0;
 }
 HEAP32[63273] = $0;
 return -1;
}
function __stdio_close($0) {
 $0 = $0 | 0;
 return __wasi_fd_close(HEAP32[$0 + 60 >> 2]) | 0;
}
function jshIsDeviceInitialised($0) {
 HEAP8[(global$0 - 16 | 0) + 15 | 0] = $0;
 return 1;
}
function _parse_int() {
 return stringToIntWithRadix(jslGetTokenValueAsString(), 10, 0, 0);
}
function gen_jswrap_Bangle_showLauncher() {
 jsvUnLock(jspExecuteJSFunction(19638, 0, 0));
}
function dynCall_id($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 return FUNCTION_TABLE[$0]($1) | 0;
}
function dynCall_di($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return +FUNCTION_TABLE[$0]($1);
}
function gen_jswrap_Bangle_loadWidgets() {
 jsvUnLock(jspExecuteJSFunction(19506, 0, 0));
}
function gen_jswrap_Bangle_drawWidgets() {
 jsvUnLock(jspExecuteJSFunction(19076, 0, 0));
}
function dynCall_dd($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 return +FUNCTION_TABLE[$0]($1);
}
function out($0, $1, $2) {
 if (!(HEAPU8[$0 | 0] & 32)) {
  __fwritex($1, $2, $0);
 }
}
function jshUSARTKick($0) {
 $0 = $0 | 0;
 HEAP8[(global$0 - 16 | 0) + 15 | 0] = $0;
}
function jshPinGetState($0) {
 HEAP8[(global$0 - 16 | 0) + 15 | 0] = $0;
 return 0;
}
function dynCall_vi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[$0]($1);
}
function dynCall_vd($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 FUNCTION_TABLE[$0]($1);
}
function jswrap_espruino_reboot() {
 jsiKill();
 jsExceptionHere(1, 27880, 0);
}
function jswrap_banglejs_isCharging() {
 return (jshPinGetValue(12) ^ -1) & 1;
}
function wctomb($0, $1) {
 if (!$0) {
  return 0;
 }
 return wcrtomb($0, $1);
}
function jspeiClearScopes() {
 jsvUnLock(HEAP32[23776]);
 HEAP32[23776] = 0;
}
function gen_jswrap_process_version() {
 return jsvNewFromString(23994) | 0;
}
function jsIdle() {
 HEAP32[13342] = -1;
 jsiLoop();
 return HEAP32[13342];
}
function gen_jswrap_LED2() {
 return jspExecuteJSFunction(18788, 0, 0) | 0;
}
function gen_jswrap_LED1() {
 return jspExecuteJSFunction(18546, 0, 0) | 0;
}
function gen_jswrap_Math_random() {
 return +(+(rand() | 0) / 2147483647);
}
function gen_jswrap_Number_MIN_VALUE() {
 return 2.2250738585072014e-308;
}
function gen_jswrap_Number_MAX_VALUE() {
 return 1.7976931348623157e+308;
}
function gen_jswrap_LoopbackB() {
 return jspNewObject(19040, 17261) | 0;
}
function gen_jswrap_LoopbackA() {
 return jspNewObject(19030, 17261) | 0;
}
function gen_jswrap_Terminal() {
 return jspNewObject(19063, 17261) | 0;
}
function dynCall_i($0) {
 $0 = $0 | 0;
 return FUNCTION_TABLE[$0]() | 0;
}
function jsiPasswordProtected() {
 return (HEAPU16[47566] & 1024) != 0;
}
function jshHasTransmitData() {
 return HEAPU8[95200] != HEAPU8[95201];
}
function htons($0) {
 $0 = $0 | 0;
 return ($0 << 24 | $0 << 8) >>> 16;
}
function gen_jswrap_global() {
 return jsvLockAgain(HEAP32[23774]) | 0;
}
function gen_jswrap_Serial1() {
 return jspNewObject(19055, 17261) | 0;
}
function do_indexing($0) {
 HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0;
}
function dynCall_d($0) {
 $0 = $0 | 0;
 return +FUNCTION_TABLE[$0]();
}
function gen_jswrap_SPI1() {
 return jspNewObject(19050, 17280) | 0;
}
function gen_jswrap_I2C1() {
 return jspNewObject(18541, 17284) | 0;
}
function gen_jswrap_USB() {
 return jspNewObject(19072, 17261) | 0;
}
function gen_jswrap_Number_NEGATIVE_INFINITY() {
 return -infinity;
}
function jswrap_storage_getFree() {
 return jsfGetFreeSpace() | 0;
}
function jspSetNoExecute() {
 HEAP32[23778] = HEAP32[23778] & -64;
}
function jsiTimersChanged() {
 HEAP16[47566] = HEAPU16[47566] | 4;
}
function gen_jswrap_save() {
 HEAP16[47566] = HEAPU16[47566] | 32;
}
function __growWasmMemory($0) {
 $0 = $0 | 0;
 return abort() | 0;
}
function jshHasEvents() {
 return HEAPU8[95202] != HEAPU8[95203];
}
function __emscripten_stdout_close($0) {
 $0 = $0 | 0;
 return 0;
}
function jspIsInterrupted() {
 return (HEAP32[23778] & 16) != 0;
}
function jswrap_banglejs_off() {
 jsExceptionHere(1, 29021, 0);
}
function jswrap_banglejs_isLCDOn() {
 return HEAP8[251256] & 1;
}
function gen_jswrap_Math_SQRT1_2() {
 return .7071067811865476;
}
function jswrap_storage_eraseAll() {
 jsfEraseFrom(134437888);
}
function htonl($0) {
 $0 = $0 | 0;
 return __bswap_32($0) | 0;
}
function gen_jswrap_Math_SQRT2() {
 return 1.4142135623730951;
}
function gen_jswrap_Math_LOG2E() {
 return 1.4426950408889634;
}
function gen_jswrap_Math_LOG10E() {
 return .4342944819032518;
}
function jspromise_create() {
 return jspNewObject(0, 36617);
}
function dynCall_v($0) {
 $0 = $0 | 0;
 FUNCTION_TABLE[$0]();
}
function jspHasError() {
 return (HEAP32[23778] & 112) != 0;
}
function gen_jswrap_Math_LN10() {
 return 2.302585092994046;
}
function gen_jswrap_Math_LN2() {
 return .6931471805599453;
}
function __cxa_pure_virtual() {
 abort_message();
 abort();
}
function gen_jswrap_StorageFile_StorageFile() {
 return 0;
}
function gen_jswrap_Math_PI() {
 return 3.141592653589793;
}
function stackRestore($0) {
 $0 = $0 | 0;
 global$0 = $0;
}
function jsvNewObject() {
 return jsvNewWithFlags(5) | 0;
}
function gen_jswrap_Math_E() {
 return 2.718281828459045;
}
function floor($0) {
 $0 = +$0;
 return +Math_floor($0);
}
function ceil($0) {
 $0 = +$0;
 return +Math_ceil($0);
}
function jsiEcho() {
 return !(HEAPU16[47566] & 3);
}
function jshGetRandomNumber() {
 return rand() | 0;
}
function isdigit($0) {
 return $0 + -48 >>> 0 < 10;
}
function jswrap_storage_compact() {
 jsfCompact();
}
function gen_jswrap_Infinity() {
 return infinity;
}
function gen_jswrap_dump() {
 jsiDumpState(9, 0);
}
function jsiKill() {
 jsiSoftKill();
 jspKill();
}
function __errno_location() {
 return 253092;
}
function strcpy($0, $1) {
 __stpcpy($0, $1);
}
function stackSave() {
 return global$0 | 0;
}
function gen_jswrap_VIBRATE() {
 return 13;
}
function gen_jswrap_NaN() {
 return nan;
}
function gen_jswrap_BTN5() {
 return 16;
}
function gen_jswrap_BTN4() {
 return 11;
}
function gen_jswrap_BTN3() {
 return 23;
}
function gen_jswrap_BTN2() {
 return 22;
}
function gen_jswrap_HIGH() {
 return 1;
}
function gen_jswrap_BTN() {
 return 24;
}
function jsKill() {
 jsiKill();
}

// EMSCRIPTEN_END_FUNCS

 FUNCTION_TABLE[1] = jsfSaveToFlash_writecb;
 FUNCTION_TABLE[2] = jsfLoadFromFlash_readcb;
 FUNCTION_TABLE[3] = jswrap_object_toString;
 FUNCTION_TABLE[4] = jsvStringIteratorPrintfCallback;
 FUNCTION_TABLE[5] = jsvIsInternalFunctionKey;
 FUNCTION_TABLE[6] = jsvIsInternalObjectKey;
 FUNCTION_TABLE[7] = jsvIterateCallbackCountCb;
 FUNCTION_TABLE[8] = jsvIterateCallbackToBytesCb;
 FUNCTION_TABLE[9] = jsiConsolePrintString;
 FUNCTION_TABLE[10] = espruino_snprintf_cb;
 FUNCTION_TABLE[11] = jswrap_eval;
 FUNCTION_TABLE[12] = jsiTabComplete_findCommon;
 FUNCTION_TABLE[13] = jsiTabComplete_printCommon;
 FUNCTION_TABLE[14] = jstPinTaskChecker;
 FUNCTION_TABLE[15] = jstBufferTaskChecker;
 FUNCTION_TABLE[16] = jsserialHardwareFunc;
 FUNCTION_TABLE[17] = jsserialSoftwareFunc;
 FUNCTION_TABLE[18] = jsserialEventCallback;
 FUNCTION_TABLE[19] = jsspiHardwareFunc;
 FUNCTION_TABLE[20] = jsspiFastSoftwareFunc;
 FUNCTION_TABLE[21] = jsspiSoftwareFunc;
 FUNCTION_TABLE[22] = jswrap_dataview_constructor;
 FUNCTION_TABLE[23] = jswrap_date_constructor;
 FUNCTION_TABLE[24] = jswrap_error_constructor;
 FUNCTION_TABLE[25] = jswrap_syntaxerror_constructor;
 FUNCTION_TABLE[26] = jswrap_typeerror_constructor;
 FUNCTION_TABLE[27] = jswrap_internalerror_constructor;
 FUNCTION_TABLE[28] = jswrap_referenceerror_constructor;
 FUNCTION_TABLE[29] = jswrap_onewire_constructor;
 FUNCTION_TABLE[30] = jswrap_promise_constructor;
 FUNCTION_TABLE[31] = jswrap_regexp_constructor;
 FUNCTION_TABLE[32] = jsvNewObject;
 FUNCTION_TABLE[33] = gen_jswrap_StorageFile_StorageFile;
 FUNCTION_TABLE[34] = jsvNewObject;
 FUNCTION_TABLE[35] = jsvNewObject;
 FUNCTION_TABLE[36] = jswrap_waveform_constructor;
 FUNCTION_TABLE[37] = gen_jswrap_StorageFile_StorageFile;
 FUNCTION_TABLE[38] = gen_jswrap_StorageFile_StorageFile;
 FUNCTION_TABLE[39] = gen_jswrap_StorageFile_StorageFile;
 FUNCTION_TABLE[40] = gen_jswrap_StorageFile_StorageFile;
 FUNCTION_TABLE[41] = jswrap_array_constructor;
 FUNCTION_TABLE[42] = gen_jswrap_StorageFile_StorageFile;
 FUNCTION_TABLE[43] = gen_jswrap_StorageFile_StorageFile;
 FUNCTION_TABLE[44] = gen_jswrap_StorageFile_StorageFile;
 FUNCTION_TABLE[45] = gen_jswrap_StorageFile_StorageFile;
 FUNCTION_TABLE[46] = jswrap_number_constructor;
 FUNCTION_TABLE[47] = jswrap_object_constructor;
 FUNCTION_TABLE[48] = gen_jswrap_StorageFile_StorageFile;
 FUNCTION_TABLE[49] = gen_jswrap_StorageFile_StorageFile;
 FUNCTION_TABLE[50] = gen_jswrap_StorageFile_StorageFile;
 FUNCTION_TABLE[51] = jswrap_string_constructor;
 FUNCTION_TABLE[52] = gen_jswrap_StorageFile_StorageFile;
 FUNCTION_TABLE[53] = gen_jswrap_StorageFile_StorageFile;
 FUNCTION_TABLE[54] = gen_jswrap_StorageFile_StorageFile;
 FUNCTION_TABLE[55] = jswrap_arraybuffer_constructor;
 FUNCTION_TABLE[56] = gen_jswrap_StorageFile_StorageFile;
 FUNCTION_TABLE[57] = jswrap_pin_constructor;
 FUNCTION_TABLE[58] = jswrap_function_constructor;
 FUNCTION_TABLE[59] = gen_jswrap_BTN;
 FUNCTION_TABLE[60] = gen_jswrap_BTN;
 FUNCTION_TABLE[61] = gen_jswrap_BTN2;
 FUNCTION_TABLE[62] = gen_jswrap_BTN3;
 FUNCTION_TABLE[63] = gen_jswrap_BTN4;
 FUNCTION_TABLE[64] = gen_jswrap_BTN5;
 FUNCTION_TABLE[65] = jswrap_boolean_constructor;
 FUNCTION_TABLE[66] = gen_jswrap_Float32Array_Float32Array;
 FUNCTION_TABLE[67] = gen_jswrap_Float64Array_Float64Array;
 FUNCTION_TABLE[68] = gen_jswrap_HIGH;
 FUNCTION_TABLE[69] = gen_jswrap_I2C1;
 FUNCTION_TABLE[70] = gen_jswrap_Infinity;
 FUNCTION_TABLE[71] = gen_jswrap_Int16Array_Int16Array;
 FUNCTION_TABLE[72] = gen_jswrap_Int32Array_Int32Array;
 FUNCTION_TABLE[73] = gen_jswrap_Int8Array_Int8Array;
 FUNCTION_TABLE[74] = gen_jswrap_LED1;
 FUNCTION_TABLE[75] = gen_jswrap_LED2;
 FUNCTION_TABLE[76] = gen_jswrap_StorageFile_StorageFile;
 FUNCTION_TABLE[77] = gen_jswrap_LoopbackA;
 FUNCTION_TABLE[78] = gen_jswrap_LoopbackB;
 FUNCTION_TABLE[79] = gen_jswrap_NaN;
 FUNCTION_TABLE[80] = gen_jswrap_SPI1;
 FUNCTION_TABLE[81] = gen_jswrap_Serial1;
 FUNCTION_TABLE[82] = gen_jswrap_Terminal;
 FUNCTION_TABLE[83] = gen_jswrap_USB;
 FUNCTION_TABLE[84] = gen_jswrap_Uint16Array_Uint16Array;
 FUNCTION_TABLE[85] = gen_jswrap_Uint24Array_Uint24Array;
 FUNCTION_TABLE[86] = gen_jswrap_Uint32Array_Uint32Array;
 FUNCTION_TABLE[87] = gen_jswrap_Uint8Array_Uint8Array;
 FUNCTION_TABLE[88] = gen_jswrap_Uint8ClampedArray_Uint8ClampedArray;
 FUNCTION_TABLE[89] = gen_jswrap_VIBRATE;
 FUNCTION_TABLE[90] = jshPinAnalog;
 FUNCTION_TABLE[91] = jswrap_io_analogWrite;
 FUNCTION_TABLE[92] = jswrap_arguments;
 FUNCTION_TABLE[93] = jswrap_atob;
 FUNCTION_TABLE[94] = jswrap_btoa;
 FUNCTION_TABLE[95] = jswrap_interface_changeInterval;
 FUNCTION_TABLE[96] = jswrap_interface_clearInterval;
 FUNCTION_TABLE[97] = jswrap_interface_clearTimeout;
 FUNCTION_TABLE[98] = jswrap_interface_clearWatch;
 FUNCTION_TABLE[99] = jswrap_decodeURIComponent;
 FUNCTION_TABLE[100] = jswrap_io_digitalPulse;
 FUNCTION_TABLE[101] = jswrap_io_digitalRead;
 FUNCTION_TABLE[102] = jswrap_io_digitalWrite;
 FUNCTION_TABLE[103] = gen_jswrap_dump;
 FUNCTION_TABLE[104] = jswrap_interface_echo;
 FUNCTION_TABLE[105] = jswrap_interface_edit;
 FUNCTION_TABLE[106] = jswrap_encodeURIComponent;
 FUNCTION_TABLE[107] = jswrap_io_getPinMode;
 FUNCTION_TABLE[108] = jswrap_interface_getSerial;
 FUNCTION_TABLE[109] = gen_jswrap_getTime;
 FUNCTION_TABLE[110] = gen_jswrap_global;
 FUNCTION_TABLE[111] = jswrap_isFinite;
 FUNCTION_TABLE[112] = jswrap_isNaN;
 FUNCTION_TABLE[113] = jswrap_interface_load;
 FUNCTION_TABLE[114] = jswrap_parseFloat;
 FUNCTION_TABLE[115] = jswrap_parseInt;
 FUNCTION_TABLE[116] = gen_jswrap_peek16;
 FUNCTION_TABLE[117] = gen_jswrap_peek32;
 FUNCTION_TABLE[118] = gen_jswrap_peek8;
 FUNCTION_TABLE[119] = jswrap_io_pinMode;
 FUNCTION_TABLE[120] = gen_jswrap_poke16;
 FUNCTION_TABLE[121] = gen_jswrap_poke32;
 FUNCTION_TABLE[122] = gen_jswrap_poke8;
 FUNCTION_TABLE[123] = jswrap_interface_print;
 FUNCTION_TABLE[124] = jswrap_require;
 FUNCTION_TABLE[125] = jswrap_interface_reset;
 FUNCTION_TABLE[126] = gen_jswrap_save;
 FUNCTION_TABLE[127] = jswrap_interface_setBusyIndicator;
 FUNCTION_TABLE[128] = jswrap_interface_setInterval;
 FUNCTION_TABLE[129] = jswrap_interface_setSleepIndicator;
 FUNCTION_TABLE[130] = jswrap_interactive_setTime;
 FUNCTION_TABLE[131] = jswrap_interface_setTimeout;
 FUNCTION_TABLE[132] = jswrap_interface_setWatch;
 FUNCTION_TABLE[133] = jswrap_io_shiftOut;
 FUNCTION_TABLE[134] = jswrap_interface_trace;
 FUNCTION_TABLE[135] = gen_jswrap_HIGH;
 FUNCTION_TABLE[136] = jsvIsFlashString;
 FUNCTION_TABLE[137] = jswrap_banglejs_compassWr;
 FUNCTION_TABLE[138] = jswrap_banglejs_beep;
 FUNCTION_TABLE[139] = jswrap_banglejs_buzz;
 FUNCTION_TABLE[140] = jswrap_banglejs_compassWr;
 FUNCTION_TABLE[141] = jswrap_banglejs_dbg;
 FUNCTION_TABLE[142] = gen_jswrap_Bangle_drawWidgets;
 FUNCTION_TABLE[143] = jswrap_banglejs_getAccel;
 FUNCTION_TABLE[144] = jswrap_banglejs_getCompass;
 FUNCTION_TABLE[145] = jswrap_banglejs_getLCDMode;
 FUNCTION_TABLE[146] = jswrap_banglejs_getLogo;
 FUNCTION_TABLE[147] = jswrap_banglejs_ioWr;
 FUNCTION_TABLE[148] = jswrap_banglejs_isCharging;
 FUNCTION_TABLE[149] = jswrap_banglejs_isLCDOn;
 FUNCTION_TABLE[150] = jswrap_banglejs_lcdWr;
 FUNCTION_TABLE[151] = gen_jswrap_Bangle_loadWidgets;
 FUNCTION_TABLE[152] = jswrap_banglejs_off;
 FUNCTION_TABLE[153] = jswrap_banglejs_project;
 FUNCTION_TABLE[154] = jswrap_banglejs_setCompassPower;
 FUNCTION_TABLE[155] = jshUSARTKick;
 FUNCTION_TABLE[156] = jshUSARTKick;
 FUNCTION_TABLE[157] = jswrap_banglejs_setLCDBrightness;
 FUNCTION_TABLE[158] = jswrap_banglejs_setLCDMode;
 FUNCTION_TABLE[159] = jswrap_banglejs_setLCDOffset;
 FUNCTION_TABLE[160] = jswrap_banglejs_setLCDPower;
 FUNCTION_TABLE[161] = jswrap_banglejs_setLCDTimeout;
 FUNCTION_TABLE[162] = jswrap_banglejs_setOptions;
 FUNCTION_TABLE[163] = jswrap_banglejs_setPollInterval;
 FUNCTION_TABLE[164] = gen_jswrap_Bangle_showLauncher;
 FUNCTION_TABLE[165] = jswrap_espruino_CRC32;
 FUNCTION_TABLE[166] = jswrap_espruino_FFT;
 FUNCTION_TABLE[167] = jswrap_espruino_HSBtoRGB;
 FUNCTION_TABLE[168] = jswrap_espruino_asm;
 FUNCTION_TABLE[169] = jswrap_espruino_clip;
 FUNCTION_TABLE[170] = jswrap_espruino_compiledC;
 FUNCTION_TABLE[171] = jswrap_espruino_convolve;
 FUNCTION_TABLE[172] = jsvDefragment;
 FUNCTION_TABLE[173] = jswrap_e_dumpFragmentation;
 FUNCTION_TABLE[174] = jswrap_e_dumpStr;
 FUNCTION_TABLE[175] = jswrap_e_dumpVariables;
 FUNCTION_TABLE[176] = jswrap_espruino_enableWatchdog;
 FUNCTION_TABLE[177] = jswrap_espruino_getAddressOf;
 FUNCTION_TABLE[178] = gen_jswrap_NaN;
 FUNCTION_TABLE[179] = gen_jswrap_StorageFile_StorageFile;
 FUNCTION_TABLE[180] = jswrap_espruino_getConsole;
 FUNCTION_TABLE[181] = jswrap_espruino_getErrorFlags;
 FUNCTION_TABLE[182] = jsfGetFlags;
 FUNCTION_TABLE[183] = jswrap_espruino_getSizeOf;
 FUNCTION_TABLE[184] = gen_jswrap_NaN;
 FUNCTION_TABLE[185] = jshGetRandomNumber;
 FUNCTION_TABLE[186] = __wasm_call_ctors;
 FUNCTION_TABLE[187] = jswrap_espruino_lockConsole;
 FUNCTION_TABLE[188] = jswrap_espruino_lookupNoCase;
 FUNCTION_TABLE[189] = jswrap_espruino_mapInPlace;
 FUNCTION_TABLE[190] = jswrap_espruino_memoryArea;
 FUNCTION_TABLE[191] = jswrap_espruino_memoryMap;
 FUNCTION_TABLE[192] = jswrap_espruino_nativeCall;
 FUNCTION_TABLE[193] = jswrap_pipe;
 FUNCTION_TABLE[194] = jswrap_espruino_reboot;
 FUNCTION_TABLE[195] = jswrap_espruino_reverseByte;
 FUNCTION_TABLE[196] = jswrap_espruino_setBootCode;
 FUNCTION_TABLE[197] = jswrap_espruino_setClock;
 FUNCTION_TABLE[198] = jswrap_espruino_setConsole;
 FUNCTION_TABLE[199] = jsfSetFlags;
 FUNCTION_TABLE[200] = jswrap_espruino_setPassword;
 FUNCTION_TABLE[201] = jswrap_espruino_setTimeZone;
 FUNCTION_TABLE[202] = gen_jswrap_E_showAlert;
 FUNCTION_TABLE[203] = gen_jswrap_E_showMenu;
 FUNCTION_TABLE[204] = gen_jswrap_E_showMessage;
 FUNCTION_TABLE[205] = gen_jswrap_E_showPrompt;
 FUNCTION_TABLE[206] = srand;
 FUNCTION_TABLE[207] = jswrap_espruino_sum;
 FUNCTION_TABLE[208] = jswrap_espruino_toArrayBuffer;
 FUNCTION_TABLE[209] = jswrap_espruino_toJS;
 FUNCTION_TABLE[210] = jswrap_espruino_toString;
 FUNCTION_TABLE[211] = jswrap_espruino_toUint8Array;
 FUNCTION_TABLE[212] = jswrap_espruino_variance;
 FUNCTION_TABLE[213] = jswrap_array_concat;
 FUNCTION_TABLE[214] = jswrap_array_every;
 FUNCTION_TABLE[215] = jswrap_array_fill;
 FUNCTION_TABLE[216] = jswrap_array_filter;
 FUNCTION_TABLE[217] = jswrap_array_find;
 FUNCTION_TABLE[218] = jswrap_array_findIndex;
 FUNCTION_TABLE[219] = jswrap_array_forEach;
 FUNCTION_TABLE[220] = jswrap_array_includes;
 FUNCTION_TABLE[221] = jswrap_array_indexOf;
 FUNCTION_TABLE[222] = jswrap_array_join;
 FUNCTION_TABLE[223] = jswrap_object_length;
 FUNCTION_TABLE[224] = jswrap_array_map;
 FUNCTION_TABLE[225] = gen_jswrap_Array_pop;
 FUNCTION_TABLE[226] = jswrap_array_push;
 FUNCTION_TABLE[227] = jswrap_array_reduce;
 FUNCTION_TABLE[228] = jswrap_array_reverse;
 FUNCTION_TABLE[229] = jswrap_array_shift;
 FUNCTION_TABLE[230] = jswrap_array_slice;
 FUNCTION_TABLE[231] = jswrap_array_some;
 FUNCTION_TABLE[232] = jswrap_array_sort;
 FUNCTION_TABLE[233] = jswrap_array_splice;
 FUNCTION_TABLE[234] = jswrap_array_unshift;
 FUNCTION_TABLE[235] = gen_jswrap_Array_isArray;
 FUNCTION_TABLE[236] = jsvGetArrayBufferLength;
 FUNCTION_TABLE[237] = gen_jswrap_ArrayBufferView_buffer;
 FUNCTION_TABLE[238] = gen_jswrap_ArrayBufferView_byteLength;
 FUNCTION_TABLE[239] = gen_jswrap_ArrayBufferView_byteOffset;
 FUNCTION_TABLE[240] = jswrap_arraybufferview_map;
 FUNCTION_TABLE[241] = jswrap_arraybufferview_set;
 FUNCTION_TABLE[242] = gen_jswrap_DataView_getFloat32;
 FUNCTION_TABLE[243] = gen_jswrap_DataView_getFloat64;
 FUNCTION_TABLE[244] = gen_jswrap_DataView_getInt16;
 FUNCTION_TABLE[245] = gen_jswrap_DataView_getInt32;
 FUNCTION_TABLE[246] = gen_jswrap_DataView_getInt8;
 FUNCTION_TABLE[247] = gen_jswrap_DataView_getUint16;
 FUNCTION_TABLE[248] = gen_jswrap_DataView_getUint32;
 FUNCTION_TABLE[249] = gen_jswrap_DataView_getUint8;
 FUNCTION_TABLE[250] = gen_jswrap_DataView_setFloat32;
 FUNCTION_TABLE[251] = gen_jswrap_DataView_setFloat64;
 FUNCTION_TABLE[252] = gen_jswrap_DataView_setInt16;
 FUNCTION_TABLE[253] = gen_jswrap_DataView_setInt32;
 FUNCTION_TABLE[254] = gen_jswrap_DataView_setInt8;
 FUNCTION_TABLE[255] = gen_jswrap_DataView_setUint16;
 FUNCTION_TABLE[256] = gen_jswrap_DataView_setUint32;
 FUNCTION_TABLE[257] = gen_jswrap_DataView_setUint8;
 FUNCTION_TABLE[258] = jswrap_date_now;
 FUNCTION_TABLE[259] = jswrap_date_parse;
 FUNCTION_TABLE[260] = jswrap_date_getDate;
 FUNCTION_TABLE[261] = jswrap_date_getDay;
 FUNCTION_TABLE[262] = jswrap_date_getFullYear;
 FUNCTION_TABLE[263] = jswrap_date_getHours;
 FUNCTION_TABLE[264] = jswrap_date_getMilliseconds;
 FUNCTION_TABLE[265] = jswrap_date_getMinutes;
 FUNCTION_TABLE[266] = jswrap_date_getMonth;
 FUNCTION_TABLE[267] = jswrap_date_getSeconds;
 FUNCTION_TABLE[268] = jswrap_date_getTime;
 FUNCTION_TABLE[269] = jswrap_date_getTimezoneOffset;
 FUNCTION_TABLE[270] = jswrap_date_setDate;
 FUNCTION_TABLE[271] = jswrap_date_setFullYear;
 FUNCTION_TABLE[272] = jswrap_date_setHours;
 FUNCTION_TABLE[273] = jswrap_date_setMilliseconds;
 FUNCTION_TABLE[274] = jswrap_date_setMinutes;
 FUNCTION_TABLE[275] = jswrap_date_setMonth;
 FUNCTION_TABLE[276] = jswrap_date_setSeconds;
 FUNCTION_TABLE[277] = jswrap_date_setTime;
 FUNCTION_TABLE[278] = jswrap_date_toISOString;
 FUNCTION_TABLE[279] = jswrap_date_toString;
 FUNCTION_TABLE[280] = jswrap_date_toUTCString;
 FUNCTION_TABLE[281] = jswrap_error_toString;
 FUNCTION_TABLE[282] = jswrap_flash_erasePage;
 FUNCTION_TABLE[283] = jswrap_flash_getFree;
 FUNCTION_TABLE[284] = jswrap_flash_getPage;
 FUNCTION_TABLE[285] = jswrap_flash_read;
 FUNCTION_TABLE[286] = jswrap_flash_write;
 FUNCTION_TABLE[287] = jswrap_json_parse;
 FUNCTION_TABLE[288] = jswrap_json_stringify;
 FUNCTION_TABLE[289] = jswrap_modules_addCached;
 FUNCTION_TABLE[290] = jswrap_modules_getCached;
 FUNCTION_TABLE[291] = jswrap_modules_removeAllCached;
 FUNCTION_TABLE[292] = jswrap_modules_removeCached;
 FUNCTION_TABLE[293] = jswrap_pin_getInfo;
 FUNCTION_TABLE[294] = jswrap_pin_getMode;
 FUNCTION_TABLE[295] = jswrap_pin_mode;
 FUNCTION_TABLE[296] = jswrap_pin_read;
 FUNCTION_TABLE[297] = jswrap_pin_reset;
 FUNCTION_TABLE[298] = jswrap_pin_set;
 FUNCTION_TABLE[299] = jswrap_pin_toggle;
 FUNCTION_TABLE[300] = jswrap_pin_write;
 FUNCTION_TABLE[301] = jswrap_pin_writeAtTime;
 FUNCTION_TABLE[302] = gen_jswrap_Number_MAX_VALUE;
 FUNCTION_TABLE[303] = gen_jswrap_Number_MIN_VALUE;
 FUNCTION_TABLE[304] = gen_jswrap_Number_NEGATIVE_INFINITY;
 FUNCTION_TABLE[305] = gen_jswrap_NaN;
 FUNCTION_TABLE[306] = gen_jswrap_Infinity;
 FUNCTION_TABLE[307] = jswrap_number_toFixed;
 FUNCTION_TABLE[308] = jswrap_object_clone;
 FUNCTION_TABLE[309] = jswrap_object_emit;
 FUNCTION_TABLE[310] = jswrap_object_hasOwnProperty;
 FUNCTION_TABLE[311] = jswrap_object_on;
 FUNCTION_TABLE[312] = jswrap_object_removeAllListeners;
 FUNCTION_TABLE[313] = jswrap_object_removeListener;
 FUNCTION_TABLE[314] = jswrap_object_valueOf;
 FUNCTION_TABLE[315] = jswrap_object_assign;
 FUNCTION_TABLE[316] = jswrap_object_create;
 FUNCTION_TABLE[317] = jswrap_object_defineProperties;
 FUNCTION_TABLE[318] = jswrap_object_defineProperty;
 FUNCTION_TABLE[319] = jswrap_object_getOwnPropertyDescriptor;
 FUNCTION_TABLE[320] = gen_jswrap_Object_getOwnPropertyNames;
 FUNCTION_TABLE[321] = jswrap_object_getPrototypeOf;
 FUNCTION_TABLE[322] = gen_jswrap_Object_keys;
 FUNCTION_TABLE[323] = jswrap_object_setPrototypeOf;
 FUNCTION_TABLE[324] = jswrap_function_apply_or_call;
 FUNCTION_TABLE[325] = jswrap_function_bind;
 FUNCTION_TABLE[326] = jswrap_function_replaceWith;
 FUNCTION_TABLE[327] = jswrap_onewire_read;
 FUNCTION_TABLE[328] = jswrap_onewire_reset;
 FUNCTION_TABLE[329] = jswrap_onewire_search;
 FUNCTION_TABLE[330] = jswrap_onewire_select;
 FUNCTION_TABLE[331] = jswrap_onewire_skip;
 FUNCTION_TABLE[332] = jswrap_onewire_write;
 FUNCTION_TABLE[333] = jswrap_process_env;
 FUNCTION_TABLE[334] = jswrap_process_memory;
 FUNCTION_TABLE[335] = gen_jswrap_process_version;
 FUNCTION_TABLE[336] = jswrap_promise_all;
 FUNCTION_TABLE[337] = jswrap_promise_reject;
 FUNCTION_TABLE[338] = jswrap_promise_resolve;
 FUNCTION_TABLE[339] = jswrap_promise_catch;
 FUNCTION_TABLE[340] = jswrap_promise_then;
 FUNCTION_TABLE[341] = jswrap_regexp_exec;
 FUNCTION_TABLE[342] = jswrap_regexp_test;
 FUNCTION_TABLE[343] = gen_jswrap_Serial_find;
 FUNCTION_TABLE[344] = jswrap_stream_available;
 FUNCTION_TABLE[345] = jswrap_serial_inject;
 FUNCTION_TABLE[346] = jswrap_serial_print;
 FUNCTION_TABLE[347] = jswrap_serial_println;
 FUNCTION_TABLE[348] = jswrap_stream_read;
 FUNCTION_TABLE[349] = jswrap_serial_setConsole;
 FUNCTION_TABLE[350] = jswrap_serial_setup;
 FUNCTION_TABLE[351] = jswrap_serial_unsetup;
 FUNCTION_TABLE[352] = jswrap_serial_write;
 FUNCTION_TABLE[353] = jswrap_storage_compact;
 FUNCTION_TABLE[354] = jswrap_storage_erase;
 FUNCTION_TABLE[355] = jswrap_storage_eraseAll;
 FUNCTION_TABLE[356] = jswrap_storage_getFree;
 FUNCTION_TABLE[357] = jswrap_storage_list;
 FUNCTION_TABLE[358] = jswrap_storage_open;
 FUNCTION_TABLE[359] = jswrap_storage_read;
 FUNCTION_TABLE[360] = jswrap_storage_readArrayBuffer;
 FUNCTION_TABLE[361] = jswrap_storage_readJSON;
 FUNCTION_TABLE[362] = jswrap_storage_write;
 FUNCTION_TABLE[363] = jswrap_storage_writeJSON;
 FUNCTION_TABLE[364] = jswrap_storagefile_erase;
 FUNCTION_TABLE[365] = jswrap_storagefile_getLength;
 FUNCTION_TABLE[366] = jswrap_storagefile_read;
 FUNCTION_TABLE[367] = jswrap_storagefile_readLine;
 FUNCTION_TABLE[368] = jswrap_storagefile_write;
 FUNCTION_TABLE[369] = gen_jswrap_SPI_find;
 FUNCTION_TABLE[370] = jswrap_spi_send;
 FUNCTION_TABLE[371] = jswrap_spi_send4bit;
 FUNCTION_TABLE[372] = jswrap_spi_send8bit;
 FUNCTION_TABLE[373] = jswrap_spi_setup;
 FUNCTION_TABLE[374] = jswrap_spi_write;
 FUNCTION_TABLE[375] = gen_jswrap_I2C_find;
 FUNCTION_TABLE[376] = jswrap_i2c_readFrom;
 FUNCTION_TABLE[377] = jswrap_i2c_setup;
 FUNCTION_TABLE[378] = jswrap_i2c_writeTo;
 FUNCTION_TABLE[379] = jswrap_string_charAt;
 FUNCTION_TABLE[380] = jswrap_string_charCodeAt;
 FUNCTION_TABLE[381] = jswrap_string_endsWith;
 FUNCTION_TABLE[382] = gen_jswrap_String_includes;
 FUNCTION_TABLE[383] = gen_jswrap_String_indexOf;
 FUNCTION_TABLE[384] = gen_jswrap_String_lastIndexOf;
 FUNCTION_TABLE[385] = jswrap_string_match;
 FUNCTION_TABLE[386] = jswrap_string_repeat;
 FUNCTION_TABLE[387] = jswrap_string_replace;
 FUNCTION_TABLE[388] = jswrap_string_slice;
 FUNCTION_TABLE[389] = jswrap_string_split;
 FUNCTION_TABLE[390] = jswrap_string_startsWith;
 FUNCTION_TABLE[391] = jswrap_string_substr;
 FUNCTION_TABLE[392] = jswrap_string_substring;
 FUNCTION_TABLE[393] = gen_jswrap_String_toLowerCase;
 FUNCTION_TABLE[394] = gen_jswrap_String_toUpperCase;
 FUNCTION_TABLE[395] = jswrap_string_trim;
 FUNCTION_TABLE[396] = jswrap_string_fromCharCode;
 FUNCTION_TABLE[397] = jswrap_waveform_startInput;
 FUNCTION_TABLE[398] = jswrap_waveform_startOutput;
 FUNCTION_TABLE[399] = jswrap_waveform_stop;
 FUNCTION_TABLE[400] = jswrap_heatshrink_compress;
 FUNCTION_TABLE[401] = jswrap_heatshrink_decompress;
 FUNCTION_TABLE[402] = gen_jswrap_Math_E;
 FUNCTION_TABLE[403] = gen_jswrap_Math_LN10;
 FUNCTION_TABLE[404] = gen_jswrap_Math_LN2;
 FUNCTION_TABLE[405] = gen_jswrap_Math_LOG10E;
 FUNCTION_TABLE[406] = gen_jswrap_Math_LOG2E;
 FUNCTION_TABLE[407] = gen_jswrap_Math_PI;
 FUNCTION_TABLE[408] = gen_jswrap_Math_SQRT1_2;
 FUNCTION_TABLE[409] = gen_jswrap_Math_SQRT2;
 FUNCTION_TABLE[410] = jswrap_math_abs;
 FUNCTION_TABLE[411] = gen_jswrap_Math_acos;
 FUNCTION_TABLE[412] = gen_jswrap_Math_asin;
 FUNCTION_TABLE[413] = jswrap_math_atan;
 FUNCTION_TABLE[414] = jswrap_math_atan2;
 FUNCTION_TABLE[415] = ceil;
 FUNCTION_TABLE[416] = jswrap_espruino_clip;
 FUNCTION_TABLE[417] = gen_jswrap_Math_cos;
 FUNCTION_TABLE[418] = exp;
 FUNCTION_TABLE[419] = floor;
 FUNCTION_TABLE[420] = log;
 FUNCTION_TABLE[421] = gen_jswrap_Math_max;
 FUNCTION_TABLE[422] = gen_jswrap_Math_min;
 FUNCTION_TABLE[423] = jswrap_math_pow;
 FUNCTION_TABLE[424] = gen_jswrap_Math_random;
 FUNCTION_TABLE[425] = jswrap_math_round;
 FUNCTION_TABLE[426] = jswrap_math_sin;
 FUNCTION_TABLE[427] = jswrap_math_sqrt;
 FUNCTION_TABLE[428] = gen_jswrap_Math_tan;
 FUNCTION_TABLE[429] = wrapAround;
 FUNCTION_TABLE[430] = jswrap_graphics_asBMP;
 FUNCTION_TABLE[431] = jswrap_graphics_asImage;
 FUNCTION_TABLE[432] = jswrap_graphics_asURL;
 FUNCTION_TABLE[433] = jswrap_graphics_clear;
 FUNCTION_TABLE[434] = jswrap_graphics_clearRect;
 FUNCTION_TABLE[435] = jswrap_graphics_drawCircle;
 FUNCTION_TABLE[436] = jswrap_graphics_drawEllipse;
 FUNCTION_TABLE[437] = jswrap_graphics_drawImage;
 FUNCTION_TABLE[438] = jswrap_graphics_drawImages;
 FUNCTION_TABLE[439] = jswrap_graphics_drawLine;
 FUNCTION_TABLE[440] = jswrap_graphics_drawPoly;
 FUNCTION_TABLE[441] = jswrap_graphics_drawRect;
 FUNCTION_TABLE[442] = jswrap_graphics_drawString;
 FUNCTION_TABLE[443] = jswrap_graphics_dump;
 FUNCTION_TABLE[444] = jswrap_graphics_fillCircle;
 FUNCTION_TABLE[445] = jswrap_graphics_fillEllipse;
 FUNCTION_TABLE[446] = jswrap_graphics_fillPoly;
 FUNCTION_TABLE[447] = jswrap_graphics_fillRect;
 FUNCTION_TABLE[448] = gen_jswrap_Graphics_getBgColor;
 FUNCTION_TABLE[449] = gen_jswrap_Graphics_getColor;
 FUNCTION_TABLE[450] = jswrap_graphics_getFont;
 FUNCTION_TABLE[451] = jswrap_graphics_getFontHeight;
 FUNCTION_TABLE[452] = jswrap_graphics_getFonts;
 FUNCTION_TABLE[453] = gen_jswrap_Graphics_getHeight;
 FUNCTION_TABLE[454] = jswrap_graphics_getModified;
 FUNCTION_TABLE[455] = jswrap_graphics_getPixel;
 FUNCTION_TABLE[456] = gen_jswrap_Graphics_getWidth;
 FUNCTION_TABLE[457] = jswrap_graphics_lineTo;
 FUNCTION_TABLE[458] = jswrap_graphics_moveTo;
 FUNCTION_TABLE[459] = jswrap_graphics_reset;
 FUNCTION_TABLE[460] = jswrap_graphics_scroll;
 FUNCTION_TABLE[461] = gen_jswrap_Graphics_setBgColor;
 FUNCTION_TABLE[462] = jswrap_graphics_setClipRect;
 FUNCTION_TABLE[463] = gen_jswrap_Graphics_setColor;
 FUNCTION_TABLE[464] = jswrap_graphics_setFont;
 FUNCTION_TABLE[465] = jswrap_graphics_setFontAlign;
 FUNCTION_TABLE[466] = gen_jswrap_Graphics_setFontBitmap;
 FUNCTION_TABLE[467] = jswrap_graphics_setFontCustom;
 FUNCTION_TABLE[468] = gen_jswrap_Graphics_setFontVector;
 FUNCTION_TABLE[469] = jswrap_graphics_setPixel;
 FUNCTION_TABLE[470] = jswrap_graphics_setRotation;
 FUNCTION_TABLE[471] = jswrap_graphics_stringWidth;
 FUNCTION_TABLE[472] = jswrap_graphics_toColor;
 FUNCTION_TABLE[473] = jswrap_graphics_createArrayBuffer;
 FUNCTION_TABLE[474] = jswrap_graphics_createCallback;
 FUNCTION_TABLE[475] = jswrap_graphics_createImage;
 FUNCTION_TABLE[476] = jswrap_graphics_getInstance;
 FUNCTION_TABLE[477] = jswrap_tensorflow_create;
 FUNCTION_TABLE[478] = jswrap_tfmicrointerpreter_getInput;
 FUNCTION_TABLE[479] = jswrap_tfmicrointerpreter_getOutput;
 FUNCTION_TABLE[480] = jswrap_tfmicrointerpreter_invoke;
 FUNCTION_TABLE[481] = heatshrink_ptr_input_cb;
 FUNCTION_TABLE[482] = heatshrink_ptr_output_cb;
 FUNCTION_TABLE[483] = graphicsFallbackScroll;
 FUNCTION_TABLE[484] = graphicsFallbackFillRect;
 FUNCTION_TABLE[485] = graphicsFallbackGetPixel;
 FUNCTION_TABLE[486] = graphicsFallbackSetPixel;
 FUNCTION_TABLE[487] = lcdFillRect_ArrayBuffer_flat1;
 FUNCTION_TABLE[488] = lcdGetPixel_ArrayBuffer_flat;
 FUNCTION_TABLE[489] = lcdSetPixel_ArrayBuffer_flat1;
 FUNCTION_TABLE[490] = lcdScroll_ArrayBuffer_flat8;
 FUNCTION_TABLE[491] = lcdFillRect_ArrayBuffer_flat8;
 FUNCTION_TABLE[492] = lcdGetPixel_ArrayBuffer_flat8;
 FUNCTION_TABLE[493] = lcdSetPixel_ArrayBuffer_flat8;
 FUNCTION_TABLE[494] = lcdFillRect_ArrayBuffer_flat;
 FUNCTION_TABLE[495] = lcdSetPixel_ArrayBuffer_flat;
 FUNCTION_TABLE[496] = lcdFillRect_ArrayBuffer;
 FUNCTION_TABLE[497] = lcdGetPixel_ArrayBuffer;
 FUNCTION_TABLE[498] = lcdSetPixel_ArrayBuffer;
 FUNCTION_TABLE[499] = lcdFillRect_JS;
 FUNCTION_TABLE[500] = lcdSetPixel_JS;
 FUNCTION_TABLE[501] = lcdST7789_scroll;
 FUNCTION_TABLE[502] = lcdST7789_setPixel;
 FUNCTION_TABLE[503] = lcd_flip;
 FUNCTION_TABLE[504] = btn1Handler;
 FUNCTION_TABLE[505] = btn2Handler;
 FUNCTION_TABLE[506] = btn3Handler;
 FUNCTION_TABLE[507] = btn4Handler;
 FUNCTION_TABLE[508] = btn5Handler;
 FUNCTION_TABLE[509] = jswrap_banglejs_beep_callback;
 FUNCTION_TABLE[510] = jswrap_banglejs_buzz_callback;
 FUNCTION_TABLE[511] = _jswrap_espruino_toString_char;
 FUNCTION_TABLE[512] = _jswrap_espruino_toUint8Array_char;
 FUNCTION_TABLE[513] = jswrap_io_shiftOutCallback;
 FUNCTION_TABLE[514] = jsvArrayAddUnique;
 FUNCTION_TABLE[515] = _jswrap_onewire_write_cb;
 FUNCTION_TABLE[516] = jswrap_pipe_dst_close_listener;
 FUNCTION_TABLE[517] = jswrap_pipe_drain_listener;
 FUNCTION_TABLE[518] = jswrap_pipe_src_close_listener;
 FUNCTION_TABLE[519] = jsvLockAgainSafe;
 FUNCTION_TABLE[520] = jsvUnLock;
 FUNCTION_TABLE[521] = jsvSkipName;
 FUNCTION_TABLE[522] = jsvMathsOp;
 FUNCTION_TABLE[523] = jsvNewWithFlags;
 FUNCTION_TABLE[524] = jsvNewFromFloat;
 FUNCTION_TABLE[525] = jsvNewFromInteger;
 FUNCTION_TABLE[526] = jsvNewFromString;
 FUNCTION_TABLE[527] = jsvNewFromBool;
 FUNCTION_TABLE[528] = jsvGetFloat;
 FUNCTION_TABLE[529] = jsvGetInteger;
 FUNCTION_TABLE[530] = jsvGetBool;
 FUNCTION_TABLE[531] = jsvReplaceWith;
 FUNCTION_TABLE[532] = jspeFunctionCall;
 FUNCTION_TABLE[533] = jspGetNamedVariable;
 FUNCTION_TABLE[534] = jspGetNamedField;
 FUNCTION_TABLE[535] = jspGetVarNamedField;
 FUNCTION_TABLE[536] = _jswrap_promise_queuereject;
 FUNCTION_TABLE[537] = _jswrap_promise_queueresolve;
 FUNCTION_TABLE[538] = _jswrap_promise_reject;
 FUNCTION_TABLE[539] = _jswrap_promise_resolve;
 FUNCTION_TABLE[540] = jswrap_promise_all_reject;
 FUNCTION_TABLE[541] = jswrap_promise_all_resolve;
 FUNCTION_TABLE[542] = _jswrap_serial_inject_cb;
 FUNCTION_TABLE[543] = jswrap_spi_send_cb;
 FUNCTION_TABLE[544] = jswrap_spi_write_cb;
 FUNCTION_TABLE[545] = heatshrink_var_input_cb;
 FUNCTION_TABLE[546] = heatshrink_var_output_cb;
 FUNCTION_TABLE[547] = tflite__MicroMutableOpResolver__FindOp_28tflite__BuiltinOperator_2c_20int_29_20const;
 FUNCTION_TABLE[548] = tflite__MicroMutableOpResolver__FindOp_28char_20const__2c_20int_29_20const;
 FUNCTION_TABLE[549] = tflite__MicroMutableOpResolver___MicroMutableOpResolver_28_29;
 FUNCTION_TABLE[550] = tflite__MicroMutableOpResolver___MicroMutableOpResolver_28_29_1;
 FUNCTION_TABLE[551] = tflite___28anonymous_20namespace_29__ReportOpError_28TfLiteContext__2c_20char_20const__2c_20____29;
 FUNCTION_TABLE[552] = tflite___28anonymous_20namespace_29__StackDataAllocator__Allocate_28unsigned_20long_29;
 FUNCTION_TABLE[553] = jswrap_banglejs_compassWr;
 FUNCTION_TABLE[554] = tflite__MicroMutableOpResolver___MicroMutableOpResolver_28_29;
 FUNCTION_TABLE[555] = tflite__MicroMutableOpResolver___MicroMutableOpResolver_28_29_1;
 FUNCTION_TABLE[556] = __cxa_pure_virtual;
 FUNCTION_TABLE[557] = jshFlashGetMemMapAddress;
 FUNCTION_TABLE[558] = tflite__BuiltinDataAllocator___BuiltinDataAllocator_28_29_1;
 FUNCTION_TABLE[559] = tflite__ops__micro__pack___28anonymous_20namespace_29__Prepare_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[560] = tflite__ops__micro__pack___28anonymous_20namespace_29__Eval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[561] = tflite__ops__micro__reshape__Prepare_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[562] = tflite__ops__micro__reshape__Eval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[563] = graphicsFallbackGetPixel;
 FUNCTION_TABLE[564] = jswrap_banglejs_compassWr;
 FUNCTION_TABLE[565] = tflite__ops__micro__pack___28anonymous_20namespace_29__Prepare_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[566] = tflite__ops__micro__depthwise_conv__Eval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[567] = graphicsFallbackGetPixel;
 FUNCTION_TABLE[568] = jswrap_banglejs_compassWr;
 FUNCTION_TABLE[569] = tflite__ops__micro__quantize__Prepare_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[570] = tflite__ops__micro__quantize__Eval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[571] = tflite__ops__micro__dequantize__Prepare_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[572] = tflite__ops__micro__dequantize__Eval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[573] = tflite__ops__micro__pack___28anonymous_20namespace_29__Prepare_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[574] = tflite__ops__micro__activations__Eval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[575] = graphicsFallbackGetPixel;
 FUNCTION_TABLE[576] = jswrap_banglejs_compassWr;
 FUNCTION_TABLE[577] = tflite__ops__micro__pack___28anonymous_20namespace_29__Prepare_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[578] = tflite__ops__micro__conv__Eval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[579] = graphicsFallbackGetPixel;
 FUNCTION_TABLE[580] = jswrap_banglejs_compassWr;
 FUNCTION_TABLE[581] = tflite__ops__micro__pack___28anonymous_20namespace_29__Prepare_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[582] = tflite__ops__micro__pooling__AverageEval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[583] = tflite__ops__micro__pooling__MaxEval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[584] = graphicsFallbackGetPixel;
 FUNCTION_TABLE[585] = jswrap_banglejs_compassWr;
 FUNCTION_TABLE[586] = tflite__ops__micro__pack___28anonymous_20namespace_29__Prepare_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[587] = tflite__ops__micro__activations__SoftmaxEval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[588] = tflite__ops__micro__pack___28anonymous_20namespace_29__Prepare_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[589] = tflite__ops__micro__activations__PreluEval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[590] = tflite__ops__micro__ceil__Prepare_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[591] = tflite__ops__micro__ceil__Eval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[592] = tflite__ops__micro__pack___28anonymous_20namespace_29__Prepare_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[593] = tflite__ops__micro__arg_min_max__ArgMaxEval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[594] = tflite__ops__micro__arg_min_max__ArgMinEval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[595] = tflite__ops__micro__pack___28anonymous_20namespace_29__Prepare_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[596] = tflite__ops__micro__unpack___28anonymous_20namespace_29__Eval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[597] = graphicsFallbackGetPixel;
 FUNCTION_TABLE[598] = jswrap_banglejs_compassWr;
 FUNCTION_TABLE[599] = tflite__ops__micro__pack___28anonymous_20namespace_29__Prepare_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[600] = tflite__ops__micro__add__Eval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[601] = tflite__ops__micro__pack___28anonymous_20namespace_29__Prepare_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[602] = tflite__ops__micro__split__Eval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[603] = tflite__ops__micro__neg__Eval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[604] = tflite__ops__micro__floor__Eval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[605] = graphicsFallbackGetPixel;
 FUNCTION_TABLE[606] = jswrap_banglejs_compassWr;
 FUNCTION_TABLE[607] = tflite__ops__micro__svdf__Prepare_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[608] = tflite__ops__micro__svdf__Eval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[609] = tflite__ops__micro__AllOpsResolver___AllOpsResolver_28_29;
 FUNCTION_TABLE[610] = tflite__ops__micro__AllOpsResolver___AllOpsResolver_28_29_1;
 FUNCTION_TABLE[611] = jshFlashGetMemMapAddress;
 FUNCTION_TABLE[612] = tflite__BuiltinDataAllocator___BuiltinDataAllocator_28_29_1;
 FUNCTION_TABLE[613] = graphicsFallbackGetPixel;
 FUNCTION_TABLE[614] = jswrap_banglejs_compassWr;
 FUNCTION_TABLE[615] = tflite__ops__micro__pack___28anonymous_20namespace_29__Prepare_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[616] = tflite__ops__micro__fully_connected__Eval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[617] = float_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__op_float__28float_2c_20float_29;
 FUNCTION_TABLE[618] = unsigned_20char_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__op_unsigned_20char__28unsigned_20char_2c_20unsigned_20char_29;
 FUNCTION_TABLE[619] = signed_20char_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__op_signed_20char__28signed_20char_2c_20signed_20char_29;
 FUNCTION_TABLE[620] = int_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__op_int__28int_2c_20int_29;
 FUNCTION_TABLE[621] = long_20long_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__op_long_20long__28long_20long_2c_20long_20long_29;
 FUNCTION_TABLE[622] = float_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__op_float__28float_2c_20float_29;
 FUNCTION_TABLE[623] = unsigned_20char_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__op_unsigned_20char__28unsigned_20char_2c_20unsigned_20char_29;
 FUNCTION_TABLE[624] = signed_20char_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__op_signed_20char__28signed_20char_2c_20signed_20char_29;
 FUNCTION_TABLE[625] = int_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__op_int__28int_2c_20int_29;
 FUNCTION_TABLE[626] = long_20long_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__op_long_20long__28long_20long_2c_20long_20long_29;
 FUNCTION_TABLE[627] = TfLiteStatus_20tflite__ops__micro__maximum_minimum__Eval__28tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__KernelType_290_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MaximumOp__28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[628] = TfLiteStatus_20tflite__ops__micro__maximum_minimum__Eval__28tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__KernelType_290_2c_20tflite__ops__micro__maximum_minimum___28anonymous_20namespace_29__MinimumOp__28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[629] = fabs_28float_29;
 FUNCTION_TABLE[630] = sin_28float_29;
 FUNCTION_TABLE[631] = cos_28float_29;
 FUNCTION_TABLE[632] = log_28float_29;
 FUNCTION_TABLE[633] = sqrt_28float_29;
 FUNCTION_TABLE[634] = tflite__ops__micro__elementwise___28anonymous_20namespace_29__RsqrtEval_28TfLiteContext__2c_20TfLiteNode__29__$_0____invoke_28float_29;
 FUNCTION_TABLE[635] = tflite__ops__micro__elementwise___28anonymous_20namespace_29__SquareEval_28TfLiteContext__2c_20TfLiteNode__29__$_1____invoke_28float_29;
 FUNCTION_TABLE[636] = TfLiteStatus_20tflite__ops__micro__elementwise___28anonymous_20namespace_29__GenericPrepare___28tflite__ops__micro__elementwise___28anonymous_20namespace_29__IsNumericSupportedType_28TfLiteType_29_29__28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[637] = tflite__ops__micro__elementwise___28anonymous_20namespace_29__AbsEval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[638] = tflite__ops__micro__elementwise___28anonymous_20namespace_29__SinEval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[639] = tflite__ops__micro__elementwise___28anonymous_20namespace_29__CosEval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[640] = tflite__ops__micro__elementwise___28anonymous_20namespace_29__LogEval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[641] = tflite__ops__micro__elementwise___28anonymous_20namespace_29__SqrtEval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[642] = tflite__ops__micro__elementwise___28anonymous_20namespace_29__RsqrtEval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[643] = tflite__ops__micro__elementwise___28anonymous_20namespace_29__SquareEval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[644] = tflite__ops__micro__strided_slice__Prepare_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[645] = TfLiteStatus_20tflite__ops__micro__strided_slice__Eval__28tflite__ops__micro__strided_slice__KernelType_290__28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[646] = tflite__ops__micro__round__Prepare_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[647] = tflite__ops__micro__round__Eval_28TfLiteContext__2c_20TfLiteNode__29;
 FUNCTION_TABLE[648] = jshFlashGetMemMapAddress;
 FUNCTION_TABLE[649] = tflite__BuiltinDataAllocator___BuiltinDataAllocator_28_29_1;
 FUNCTION_TABLE[650] = tflite__MicroMutableOpResolver___MicroMutableOpResolver_28_29;
 FUNCTION_TABLE[651] = tflite__GreedyMemoryPlanner___GreedyMemoryPlanner_28_29_1;
 FUNCTION_TABLE[652] = tflite__GreedyMemoryPlanner__AddBuffer_28tflite__ErrorReporter__2c_20int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[653] = tflite__GreedyMemoryPlanner__GetMaximumMemorySize_28_29;
 FUNCTION_TABLE[654] = tflite__MicroInterpreter__error_reporter_28_29;
 FUNCTION_TABLE[655] = tflite__GreedyMemoryPlanner__GetOffsetForBuffer_28tflite__ErrorReporter__2c_20int_2c_20int__29;
 FUNCTION_TABLE[656] = tflite__MicroMutableOpResolver___MicroMutableOpResolver_28_29;
 FUNCTION_TABLE[657] = tflite__MicroMutableOpResolver___MicroMutableOpResolver_28_29_1;
 FUNCTION_TABLE[658] = tflite__EspruinoErrorReporter__Report_28char_20const__2c_20void__29;
 FUNCTION_TABLE[659] = jshFlashGetMemMapAddress;
 FUNCTION_TABLE[660] = tflite__BuiltinDataAllocator___BuiltinDataAllocator_28_29_1;
 FUNCTION_TABLE[661] = __emscripten_stdout_close;
 FUNCTION_TABLE[662] = __stdio_write;
 FUNCTION_TABLE[663] = __emscripten_stdout_seek;
 FUNCTION_TABLE[664] = fmt_fp;
 FUNCTION_TABLE[665] = pop_arg_long_double;
 FUNCTION_TABLE[666] = __stdio_close;
 FUNCTION_TABLE[667] = __stdio_seek;
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
}
 
 return {
  "__wasm_call_ctors": __wasm_call_ctors, 
  "jshPushIOCharEvent": jshPushIOCharEvent, 
  "jshGetCharToTransmit": jshGetCharToTransmit, 
  "jshGetDeviceToTransmit": jshGetDeviceToTransmit, 
  "malloc": dlmalloc, 
  "free": dlfree, 
  "jsInit": jsInit, 
  "jsIdle": jsIdle, 
  "jsGfxChanged": jsGfxChanged, 
  "jsGfxGetPtr": jsGfxGetPtr, 
  "jsSendPinWatchEvent": jsSendPinWatchEvent, 
  "jsKill": jsKill, 
  "htons": htons, 
  "ntohs": htons, 
  "htonl": htonl, 
  "fflush": fflush, 
  "__errno_location": __errno_location, 
  "_ZSt18uncaught_exceptionv": gen_jswrap_StorageFile_StorageFile, 
  "setThrew": setThrew, 
  "emscripten_builtin_memalign": dlmemalign, 
  "stackSave": stackSave, 
  "stackAlloc": stackAlloc, 
  "stackRestore": stackRestore, 
  "__growWasmMemory": __growWasmMemory, 
  "dynCall_vii": dynCall_vii, 
  "dynCall_ii": dynCall_ii, 
  "dynCall_iii": dynCall_iii, 
  "dynCall_viii": dynCall_viii, 
  "dynCall_vi": dynCall_vi, 
  "dynCall_viiii": dynCall_viiii, 
  "dynCall_iiii": dynCall_iiii, 
  "dynCall_i": dynCall_i, 
  "dynCall_d": dynCall_d, 
  "dynCall_di": dynCall_di, 
  "dynCall_vidi": dynCall_vidi, 
  "dynCall_vid": dynCall_vid, 
  "dynCall_v": dynCall_v, 
  "dynCall_iidi": dynCall_iidi, 
  "dynCall_vd": dynCall_vd, 
  "dynCall_iid": dynCall_iid, 
  "dynCall_idddi": dynCall_idddi, 
  "dynCall_dddd": dynCall_dddd, 
  "dynCall_diii": dynCall_diii, 
  "dynCall_vdi": dynCall_vdi, 
  "dynCall_did": dynCall_did, 
  "dynCall_iiiii": dynCall_iiiii, 
  "dynCall_dii": dynCall_dii, 
  "dynCall_diiii": dynCall_diiii, 
  "dynCall_diiiii": dynCall_diiiii, 
  "dynCall_viid": dynCall_viid, 
  "dynCall_viiiii": dynCall_viiiii, 
  "dynCall_viidi": dynCall_viidi, 
  "dynCall_dd": dynCall_dd, 
  "dynCall_ddd": dynCall_ddd, 
  "dynCall_id": dynCall_id, 
  "dynCall_iiiiii": dynCall_iiiiii, 
  "dynCall_viiiiii": dynCall_viiiiii, 
  "dynCall_iiiiiii": dynCall_iiiiiii, 
  "dynCall_fff": dynCall_fff, 
  "dynCall_jjj": legalstub$dynCall_jjj, 
  "dynCall_ff": dynCall_ff, 
  "dynCall_jiji": legalstub$dynCall_jiji, 
  "dynCall_iidiiii": dynCall_iidiiii
};
}

var writeSegment = (
    function(mem) {
      var _mem = new Uint8Array(mem);
      return function(offset, s) {
        var bytes, i;
        if (typeof Buffer === 'undefined') {
          bytes = atob(s);
          for (i = 0; i < bytes.length; i++)
            _mem[offset + i] = bytes.charCodeAt(i);
        } else {
          bytes = Buffer.from(s, 'base64');
          for (i = 0; i < bytes.length; i++)
            _mem[offset + i] = bytes[i];
        }
      }
    }
  )(wasmMemory.buffer);
writeSegment(1024, "bGF0AGxvbgBhbHQAc3BlZWQAY291cnNlAHRpbWUAc2F0ZWxsaXRlcwBmaXgAAAAABAIDAAkHAgMDCgUDBgEMAQEBAQEBAQEBAQMDDQ4PAwM=");
writeSegment(1130, "AwMDCwAC");
writeSegment(1162, "");
writeSegment(7938, "EQApAAAABgAhADcAAAASAAEAOAAAACIABXA7AAAAJgAFcDwAAAArAAVwPQAAADAABXA+AAAANQAFcD8AAAA6AAVwQAAAAD8AAQAnAAAARgALAEEAAABOAAkJFgAAAFcAEQAXAAAAXAABACgAAABeAAkAGAAAAGQACQlCAAAAcQAJCUMAAAB+ABEAOgAAAIcAAQAlAAAAkAAEcEQAAACVAAAAIwAAAJkAAXBFAAAAngAGcEYAAACnAAkJRwAAALIACQlIAAAAvQAJCUkAAADHAAkAGwAAANUAAQAsAAAA2gABcEoAAADeAAFwSgAAAOMAAXBLAAAA6AAEcEwAAADsAAFwTQAAAPYAAXBOAAAAAAEBADUAAAAFAQEALQAAAA0BBnBPAAAAEQERAC4AAAAYAQkALwAAAB8BKQAdAAAAJwEJADkAAAArAQkAHgAAADMBCQAcAAAAQgFJAB8AAABJAQAAIgAAAE0BAXBQAAAAUgEAACAAAABZAQFwUQAAAGEBAQAhAAAAbQERADMAAAB0AQkAGQAAAIABAQAmAAAAkwEBcFIAAACcAQkAGgAAAKYBAXBTAAAAqgEJCVQAAAC2AQkJVQAAAMIBCQlWAAAAzgEJCVcAAADZAQkJWAAAAOsBBXBZAAAA8wFhACQAAAD8AS4AWgAAAAcCqANbAAAAEwIBcFwAAAAdAgkAXQAAACICCQBeAAAAJwKIAV8AAAA2AhAAYAAAAEQCEABhAAAAUQIQAGIAAABcAgEAKwAAAGQCCQBjAAAAdwLoAmQAAACEAgwAZQAAAJACCAFmAAAAnQIAAGcAAACiAhgAaAAAAKcCCABpAAAArAIJAGoAAAC/AgkACwAAAMQCAQAwAAAAxwIpAGsAAADSAgEAbAAAANwCBgBtAAAA5AIBcG4AAADrAgsAbwAAAPQCCwBwAAAA+gIIAHEAAAD/Ag4AcgAAAAoDSQBzAAAAEwMhAXQAAAAaAyEBdQAAACEDIQF2AAAAJwNoBncAAAAvA2AAeAAAADYDYAB5AAAAPQNgAHoAAABDAxAAewAAAEkDAQAxAAAAUQMJAHwAAABZAxgAfQAAAF8DAAB+AAAAZAMIAH8AAAB1A4kFgAAAAIEDCACBAAAAkwMwAIIAAACbA4kFgwAAAKYDSQOEAAAArwNIAoUAAAC4AwgAhg==");
writeSegment(8832, "QXJyYXkAQXJyYXlCdWZmZXIAQXJyYXlCdWZmZXJWaWV3AEJUTgBCVE4xAEJUTjIAQlROMwBCVE40AEJUTjUAQmFuZ2xlAEJvb2xlYW4ARGF0YVZpZXcARGF0ZQBFAEVycm9yAEZsb2F0MzJBcnJheQBGbG9hdDY0QXJyYXkARnVuY3Rpb24AR3JhcGhpY3MASElHSABJMkMASTJDMQBJbmZpbml0eQBJbnQxNkFycmF5AEludDMyQXJyYXkASW50OEFycmF5AEludGVybmFsRXJyb3IASlNPTgBMRUQATEVEMQBMRUQyAExPVwBMb29wYmFja0EATG9vcGJhY2tCAE1hdGgATW9kdWxlcwBOYU4ATnVtYmVyAE9iamVjdABPbmVXaXJlAFBpbgBQcm9taXNlAFJlZmVyZW5jZUVycm9yAFJlZ0V4cABTUEkAU1BJMQBTZXJpYWwAU2VyaWFsMQBTdG9yYWdlRmlsZQBTdHJpbmcAU3ludGF4RXJyb3IAVEZNaWNyb0ludGVycHJldGVyAFRlcm1pbmFsAFR5cGVFcnJvcgBVU0IAVWludDE2QXJyYXkAVWludDI0QXJyYXkAVWludDMyQXJyYXkAVWludDhBcnJheQBVaW50OENsYW1wZWRBcnJheQBWSUJSQVRFAFdhdmVmb3JtAGFuYWxvZ1JlYWQAYW5hbG9nV3JpdGUAYXJndW1lbnRzAGF0b2IAYnRvYQBjaGFuZ2VJbnRlcnZhbABjbGVhckludGVydmFsAGNsZWFyVGltZW91dABjbGVhcldhdGNoAGNvbnNvbGUAZGVjb2RlVVJJQ29tcG9uZW50AGRpZ2l0YWxQdWxzZQBkaWdpdGFsUmVhZABkaWdpdGFsV3JpdGUAZHVtcABlY2hvAGVkaXQAZW5jb2RlVVJJQ29tcG9uZW50AGV2YWwAZnMAZ2V0UGluTW9kZQBnZXRTZXJpYWwAZ2V0VGltZQBnbG9iYWwAaXNGaW5pdGUAaXNOYU4AbG9hZABwYXJzZUZsb2F0AHBhcnNlSW50AHBlZWsxNgBwZWVrMzIAcGVlazgAcGluTW9kZQBwb2tlMTYAcG9rZTMyAHBva2U4AHByaW50AHByb2Nlc3MAcmVxdWlyZQByZXNldABzYXZlAHNldEJ1c3lJbmRpY2F0b3IAc2V0SW50ZXJ2YWwAc2V0U2xlZXBJbmRpY2F0b3IAc2V0VGltZQBzZXRUaW1lb3V0AHNldFdhdGNoAHNoaWZ0T3V0AHRyYWNlAAAAAAADcIcAAAAKACQAiAAAABIAIAGJAAAAGgAhAYoAAAAfAKEBiwAAACQAIAGMAAAALgABAI0AAAAyAAAAjgAAAD4AAQCPAAAARwABAJAAAABSAAEAkQAAAF0AAQCSAAAAZQAgAZMAAABqAAMAlAAAAHUAAwCVAAAAfQBgAJYAAACDAAAAlwAAAI8AAACYAAAAkwAJAJkAAACbABgAmgAAAKsAGACbAAAAtwAYAJwAAADDADAAnQAAANQACACeAAAA3wAgAJ8AAADsABgAoAAAAPgAMAChAAAABgEIAKIAAAARATAAowAAACEBAACkAAAARl9CRUVQU0VUAGFjY2VsUmQAYWNjZWxXcgBiZWVwAGJ1enoAY29tcGFzc1dyAGRiZwBkcmF3V2lkZ2V0cwBnZXRBY2NlbABnZXRDb21wYXNzAGdldExDRE1vZGUAZ2V0TG9nbwBpb1dyAGlzQ2hhcmdpbmcAaXNMQ0RPbgBsY2RXcgBsb2FkV2lkZ2V0cwBvZmYAcHJvamVjdABzZXRDb21wYXNzUG93ZXIAc2V0R1BTUG93ZXIAc2V0SFJNUG93ZXIAc2V0TENEQnJpZ2h0bmVzcwBzZXRMQ0RNb2RlAHNldExDRE9mZnNldABzZXRMQ0RQb3dlcgBzZXRMQ0RUaW1lb3V0AHNldE9wdGlvbnMAc2V0UG9sbEludGVydmFsAHNob3dMYXVuY2hlcgAAAAAACQClAAAABgBIBqYAAAAKALE9pwAAABMAiACoAAAAFwC2DakAAAAcAAgAqgAAACYATgirAAAALwAAAKwAAAA2AAAArQAAAEgAAQCuAAAAUAAAAK8AAABeAHAAsAAAAG0AzACxAAAAegAGALIAAACIAAQAswAAAJMAAQC0AAAAngABALUAAACsAAEAtgAAALUACQG3AAAAvwAGALgAAADOAAQAuQAAANUAAAC6AAAA4gAAALsAAADuAEkGvAAAAPsASEK9AAAABgEhAb4AAAARAUkAvwAAABsBYQLAAAAAJgFIAsEAAAArAQAAwgAAADIBJADDAAAAPgHIAMQAAABKAQwAxQAAAFMBSADGAAAAXgEIAMcAAABnAQgAyAAAAHMBMADJAAAAfwFJAMoAAACJAQkAywAAAJIBSADMAAAAngFJAM0AAACpASAAzgAAAK8BDgDPAAAAswEJANAAAADBAQkA0QAAAMYBEQDSAAAAzwERANMAAADcAY4B1AAAAENSQzMyAEZGVABIU0J0b1JHQgBhc20AY2xpcABjb21waWxlZEMAY29udm9sdmUAZGVmcmFnAGR1bXBGcmFnbWVudGF0aW9uAGR1bXBTdHIAZHVtcFZhcmlhYmxlcwBlbmFibGVXYXRjaGRvZwBnZXRBZGRyZXNzT2YAZ2V0QW5hbG9nVlJlZgBnZXRCYXR0ZXJ5AGdldENvbnNvbGUAZ2V0RXJyb3JGbGFncwBnZXRGbGFncwBnZXRTaXplT2YAZ2V0VGVtcGVyYXR1cmUAaHdSYW5kAGtpY2tXYXRjaGRvZwBsb2NrQ29uc29sZQBsb29rdXBOb0Nhc2UAbWFwSW5QbGFjZQBtZW1vcnlBcmVhAG1lbW9yeU1hcABuYXRpdmVDYWxsAHBpcGUAcmVib290AHJldmVyc2VCeXRlAHNldEJvb3RDb2RlAHNldENsb2NrAHNldENvbnNvbGUAc2V0RmxhZ3MAc2V0UGFzc3dvcmQAc2V0VGltZVpvbmUAc2hvd0FsZXJ0AHNob3dNZW51AHNob3dNZXNzYWdlAHNob3dQcm9tcHQAc3JhbmQAc3VtAHRvQXJyYXlCdWZmZXIAdG9KUwB0b1N0cmluZwB0b1VpbnQ4QXJyYXkAdmFyaWFuY2U=");
writeSegment(11218, "EYDVAAAABwBJgNYAAAANAAmD1wAAABIASYDYAAAAGQAJgNkAAAAeAAmA2gAAACgASIDbAAAAMAALgdwAAAA5AAmB3QAAAEEACYDeAAAARgAB8N8AAABNAEmA4AAAAFEAAYDhAAAAVQAUgOIAAABaAEmA4wAAAGEAAYDkAAAAaQABgOUAAABvAGGA5gAAAHUASYDnAAAAegAJgOgAAAB/AGGE6QAAAIYACYADAAAAjwAUgOo=");
writeSegment(11408, "Y29uY2F0AGV2ZXJ5AGZpbGwAZmlsdGVyAGZpbmQAZmluZEluZGV4AGZvckVhY2gAaW5jbHVkZXMAaW5kZXhPZgBqb2luAGxlbmd0aABtYXAAcG9wAHB1c2gAcmVkdWNlAHJldmVyc2UAc2hpZnQAc2xpY2UAc29tZQBzb3J0AHNwbGljZQB0b1N0cmluZwB1bnNoaWZ0AAAAAAsA6wAAAGlzQXJyYXkAAAAAAAAABPDsAAAAYnl0ZUxlbmd0aAAAAAAB8O0AAAAHAATw7gAAABIABPDvAAAAHQAJg9cAAAAiAEmA2AAAACkACYDZAAAALgAJgNoAAAA4AEiA2wAAAEAAC4HcAAAASQAJgd0AAABRAAmA3gAAAFYASYDwAAAAWgBJgOMAAABhAAGA5AAAAGkACIHxAAAAbQBhgOYAAABzAAmA6A==");
writeSegment(11744, "YnVmZmVyAGJ5dGVMZW5ndGgAYnl0ZU9mZnNldABmaWxsAGZpbHRlcgBmaW5kAGZpbmRJbmRleABmb3JFYWNoAGluY2x1ZGVzAGluZGV4T2YAam9pbgBtYXAAcmVkdWNlAHJldmVyc2UAc2V0AHNsaWNlAHNvcnQ=");
writeSegment(11874, "4YDyAAAACwDhgPMAAAAWAOGA9AAAAB8A4YD1AAAAKADhgPYAAAAwAOGA9wAAADoA4YD4AAAARADhgPkAAABNAGCG+gAAAFgAYIb7AAAAYwBghvwAAABsAGCG/QAAAHUAYIb+AAAAfQBghv8AAACHAGCGAAEAAJEAYIYBAQAAZ2V0RmxvYXQzMgBnZXRGbG9hdDY0AGdldEludDE2AGdldEludDMyAGdldEludDgAZ2V0VWludDE2AGdldFVpbnQzMgBnZXRVaW50OABzZXRGbG9hdDMyAHNldEZsb2F0NjQAc2V0SW50MTYAc2V0SW50MzIAc2V0SW50OABzZXRVaW50MTYAc2V0VWludDMyAHNldFVpbnQ4");
writeSegment(12162, "BgACAQAABAAOAAMBAABub3cAcGFyc2U=");
writeSegment(12194, "BIAEAQAACAAEgAUBAAAPAASABgEAABsABIAHAQAAJAAEgAgBAAA0AASACQEAAD8ABIAKAQAASAAEgAsBAABTAAaADAEAAFsABIANAQAAbQAmgA4BAAB1AGaCDwEAAIEAZpIQAQAAigAmgBEBAACaAGaCEgEAAKUAZoATAQAArgBmgBQBAAC5ADaAFQEAAMEAAYAWAQAAzQABgBYBAADUAAGAFwEAAN0AAYAYAQAA6QAGgAwB");
writeSegment(12384, "Z2V0RGF0ZQBnZXREYXkAZ2V0RnVsbFllYXIAZ2V0SG91cnMAZ2V0TWlsbGlzZWNvbmRzAGdldE1pbnV0ZXMAZ2V0TW9udGgAZ2V0U2Vjb25kcwBnZXRUaW1lAGdldFRpbWV6b25lT2Zmc2V0AHNldERhdGUAc2V0RnVsbFllYXIAc2V0SG91cnMAc2V0TWlsbGlzZWNvbmRzAHNldE1pbnV0ZXMAc2V0TW9udGgAc2V0U2Vjb25kcwBzZXRUaW1lAHRvSVNPU3RyaW5nAHRvSlNPTgB0b1N0cmluZwB0b1VUQ1N0cmluZwB2YWx1ZU9mAAAAAAAAAYAZAQAAdG9TdHJpbmcAAAAAAAABgBkBAAB0b1N0cmluZwAAAAAAAAGAGQEAAHRvU3RyaW5nAAAAAAAAAYAZAQAAdG9TdHJpbmcAAAAAAAABgBkBAAB0b1N0cmluZw==");
writeSegment(12738, "CAAaAQAACgABABsBAAASACEAHAEAABoAIQEdAQAAHwAIAR4B");
writeSegment(12784, "ZXJhc2VQYWdlAGdldEZyZWUAZ2V0UGFnZQByZWFkAHdyaXRlAAAAAAAAEAB7AAAAbG9n");
writeSegment(12850, "CQAfAQAABgBJAiABAABwYXJzZQBzdHJpbmdpZnk=");
writeSegment(12898, "SAAhAQAACgABACIBAAAUAAAAIwEAACQACAAkAQAAYWRkQ2FjaGVkAGdldENhY2hlZAByZW1vdmVBbGxDYWNoZWQAcmVtb3ZlQ2FjaGVk");
writeSegment(12994, "AYAlAQAACAABgCYBAAAQAAiAJwEAABUAA4AoAQAAGgAAgCkBAAAgAACAKgEAACQAA4ArAQAAKwAYgCwBAAAxAJiBLQE=");
writeSegment(13072, "Z2V0SW5mbwBnZXRNb2RlAG1vZGUAcmVhZAByZXNldABzZXQAdG9nZ2xlAHdyaXRlAHdyaXRlQXRUaW1lAAAAAAAABnAuAQAACgAGcC8BAAAUAAZwMAEAACYABnAxAQAAKgAGcDIB");
writeSegment(13184, "TUFYX1ZBTFVFAE1JTl9WQUxVRQBORUdBVElWRV9JTkZJTklUWQBOYU4AUE9TSVRJVkVfSU5GSU5JVFkAAAAAAAAAIYAzAQAAdG9GaXhlZA==");
writeSegment(13282, "AYA0AQAABgCIgDUBAAALAAuANgEAABoAAfDfAAAAIQBIgDcBAAAkAAiAOAEAADcASIA5AQAARgAJgAMAAABPAAGAOgE=");
writeSegment(13360, "Y2xvbmUAZW1pdABoYXNPd25Qcm9wZXJ0eQBsZW5ndGgAb24AcmVtb3ZlQWxsTGlzdGVuZXJzAHJlbW92ZUxpc3RlbmVyAHRvU3RyaW5nAHZhbHVlT2Y=");
writeSegment(13458, "EQA7AQAABwBJADwBAAAOAEkAPQEAAB8ASQI+AQAALgBJAD8BAABHAAkAQAEAAFsACQBBAQAAagAJAEIBAABvAEkAQwE=");
writeSegment(13536, "YXNzaWduAGNyZWF0ZQBkZWZpbmVQcm9wZXJ0aWVzAGRlZmluZVByb3BlcnR5AGdldE93blByb3BlcnR5RGVzY3JpcHRvcgBnZXRPd25Qcm9wZXJ0eU5hbWVzAGdldFByb3RvdHlwZU9mAGtleXMAc2V0UHJvdG90eXBlT2YAAAAAAEmARAEAAAYAiYBFAQAACwCJgEQBAAAQAAiARgEAAGFwcGx5AGJpbmQAY2FsbAByZXBsYWNlV2l0aAAAAAAAAAAJgEcBAAAFAAOASAEAAAsAAYBJAQAAEgAhgEkBAAAZAAiASgEAACAAAIBLAQAAJQDIgEwB");
writeSegment(13792, "cmVhZAByZXNldABzZWFyY2gAc2VhcmNoAHNlbGVjdABza2lwAHdyaXRlAAAAAEgCwQAAAHBpcGU=");
writeSegment(13858, "AXBNAQAABAABAE4BAAALAAFwTwE=");
writeSegment(13888, "ZW52AG1lbW9yeQB2ZXJzaW9u");
writeSegment(13922, "CQBQAQAABAAJAFEBAAALAAkAUgE=");
writeSegment(13952, "YWxsAHJlamVjdAByZXNvbHZl");
writeSegment(13986, "CYBTAQAABgBJgFQBAABjYXRjaAB0aGVu");
writeSegment(14018, "CYBVAQAABQALgFYBAABleGVjAHRlc3QAAAAAACkAVwEAAGZpbmQ=");
writeSegment(14066, "BIBYAQAACgAQgFkBAAARAEiAwQAAABYACIBaAQAAHAAIgFsBAAAkACGAXAEAACkAGIBdAQAANABIgF4BAAA6AACAXwEAAEIAEIBgAQAAYXZhaWxhYmxlAGluamVjdABwaXBlAHByaW50AHByaW50bG4AcmVhZABzZXRDb25zb2xlAHNldHVwAHVuc2V0dXAAd3JpdGU=");
writeSegment(14228, "YQEAAAgACABiAQAADgAAAGMBAAAXAAQAZAEAAB8ACQBlAQAAJABJAGYBAAApAAkJZwEAAC4ACQBoAQAAPgDJAGkBAABHAEtIagEAAE0ASwBrAQ==");
writeSegment(14320, "Y29tcGFjdABlcmFzZQBlcmFzZUFsbABnZXRGcmVlAGxpc3QAb3BlbgByZWFkAHJlYWRBcnJheUJ1ZmZlcgByZWFkSlNPTgB3cml0ZQB3cml0ZUpTT04=");
writeSegment(14419, "gGwBAAAGAASAbQEAABAAIYBuAQAAFQABgG8BAAAeAAiAcAE=");
writeSegment(14464, "ZXJhc2UAZ2V0TGVuZ3RoAHJlYWQAcmVhZExpbmUAd3JpdGUAAAAAAAAAKQBxAQAAZmluZA==");
writeSegment(14530, "SYFyAQAABQAI2XMBAAAOAAjZdAEAABcACIB1AQAAHQAQgHYB");
writeSegment(14576, "c2VuZABzZW5kNGJpdABzZW5kOGJpdABzZXR1cAB3cml0ZQAAAAApAHcBAABmaW5k");
writeSegment(14642, "CYF4AQAACQAIgHkBAAAPAIiAegE=");
writeSegment(14672, "cmVhZEZyb20Ac2V0dXAAd3JpdGVUbw==");
writeSegment(14706, "IYB7AQAABwAkgHwBAAASAEuAfQEAABsAS4B+AQAAJABMgH8BAAAsAEyAgAEAADgAAfDfAAAAPwAJgIEBAABFACGAggEAAEwASYCDAQAAVABhgIQBAABaAAmAhQEAAGAAC4GGAQAAawBhgIcBAAByAGGAiAEAAHwAAYCJAQAAiAABgIoBAACUAAGAiwEAAGNoYXJBdABjaGFyQ29kZUF0AGVuZHNXaXRoAGluY2x1ZGVzAGluZGV4T2YAbGFzdEluZGV4T2YAbGVuZ3RoAG1hdGNoAHJlcGVhdAByZXBsYWNlAHNsaWNlAHNwbGl0AHN0YXJ0c1dpdGgAc3Vic3RyAHN1YnN0cmluZwB0b0xvd2VyQ2FzZQB0b1VwcGVyQ2FzZQB0cmltAAAAAAAAEQCMAQAAZnJvbUNoYXJDb2Rl");
writeSegment(15042, "qIONAQAACwCog44BAAAXAACAjwE=");
writeSegment(15072, "c3RhcnRJbnB1dABzdGFydE91dHB1dABzdG9wAAAAAAAAAAkAkAEAAAkACQCRAQAAY29tcHJlc3MAZGVjb21wcmVzcw==");
writeSegment(15154, "BnCSAQAAAgAGcJMBAAAHAAZwlAEAAAsABnCVAQAAEgAGcJYBAAAYAAZwlwEAABsABnCYAQAAIwAGcJkBAAApADYAmgEAAC0ANgCbAQAAMgA2AJwBAAA3ADYAnQEAADwAtgGeAQAAQgA2AJ8BAABHALYNoAEAAEwANgChAQAAUAA2AKIBAABUADYAowEAAFoANgCkAQAAXgAWAKUBAABiABYApgEAAGYAtgGnAQAAagAGAKgBAABxADEAqQEAAHcANgCqAQAAewA2AKsBAACAADYArAEAAIQAtgGtAQAARQBMTjEwAExOMgBMT0cxMEUATE9HMkUAUEkAU1FSVDFfMgBTUVJUMgBhYnMAYWNvcwBhc2luAGF0YW4AYXRhbjIAY2VpbABjbGlwAGNvcwBleHAAZmxvb3IAbG9nAG1heABtaW4AcG93AHJhbmRvbQByb3VuZABzaW4Ac3FydAB0YW4Ad3JhcA==");
writeSegment(15522, "AYCuAQAABgAJgK8BAAAOAAGAsAEAABQAGYCxAQAAGgAhybIBAAAkACGJswEAAC8AIcm0AQAAOwAJmbUBAABFAEmAtgEAAFAAIcm3AQAAWQDJgLgBAABiACHJuQEAAGsACbm6AQAAdgAAgLsBAAB7ACGJvAEAAIYAIcm9AQAAkgAJgL4BAACbACHJvwEAAKQABIDAAQAArwAEgMEBAAC4AAGAwgEAAMAABIDDAQAAzgABgMQBAADXAASAxQEAAOEAGYDGAQAA7QAkgccBAAD2AASAyAEAAP8AIYHJAQAABgEhgcoBAAANAQGAywEAABMBIYHMAQAAGgFJgs0BAAAlASHJzgEAADEBSYLPAQAAOgEJgdABAABCASGJ0QEAAE8BAYDSAQAAXQEJw9MBAABrASGA1AEAAHkBIYPVAQAAggHhgNYBAACOAQyA1wEAAJoBTILYAQ==");
writeSegment(15872, "YXNCTVAAYXNJbWFnZQBhc1VSTABjbGVhcgBjbGVhclJlY3QAZHJhd0NpcmNsZQBkcmF3RWxsaXBzZQBkcmF3SW1hZ2UAZHJhd0ltYWdlcwBkcmF3TGluZQBkcmF3UG9seQBkcmF3UmVjdABkcmF3U3RyaW5nAGR1bXAAZmlsbENpcmNsZQBmaWxsRWxsaXBzZQBmaWxsUG9seQBmaWxsUmVjdABnZXRCZ0NvbG9yAGdldENvbG9yAGdldEZvbnQAZ2V0Rm9udEhlaWdodABnZXRGb250cwBnZXRIZWlnaHQAZ2V0TW9kaWZpZWQAZ2V0UGl4ZWwAZ2V0V2lkdGgAbGluZVRvAG1vdmVUbwByZXNldABzY3JvbGwAc2V0QmdDb2xvcgBzZXRDbGlwUmVjdABzZXRDb2xvcgBzZXRGb250AHNldEZvbnRBbGlnbgBzZXRGb250Qml0bWFwAHNldEZvbnRDdXN0b20Ac2V0Rm9udFZlY3RvcgBzZXRQaXhlbABzZXRSb3RhdGlvbgBzdHJpbmdXaWR0aAB0b0NvbG9y");
writeSegment(16306, "IRnZAQAAEgAhGdoBAAAhAAkA2wEAAC0AAQDcAQAAY3JlYXRlQXJyYXlCdWZmZXIAY3JlYXRlQ2FsbGJhY2sAY3JlYXRlSW1hZ2UAZ2V0SW5zdGFuY2UAAAAAAABhAN0BAABjcmVhdGU=");
writeSegment(16418, "AYDeAQAACQABgN8BAAATAACA4AE=");
writeSegment(16448, "Z2V0SW5wdXQAZ2V0T3V0cHV0AGludm9rZQ==");
writeSegment(16481, "");
writeSegment(24016, "alXqH0ItwEdCXwAEliQWcwNTBgOHBAAAABAAEAIgx0ESRCAAkj11UpVUFXP6HQAA3yVkWnY0qRqWJAAAAAAAAJIuABGSLiAAlixpW3pN4FtaLQAA/lclWbV7JVs+VwAAT1mKeYp5anlXfwAAlWVvW29br28VVwAAe1tUW1J7UX/WVQAA7U9tSLooFRnVHwAAFwgpZAEQAXDHcQAARBDeJGV/ZSneJgAAoEQzUK1tq1TpVQYIBgCyZXpbelt/ZQBAAATrXrVVZVSjMwEAAABte70qf0d6cwAMk3eSfNZwknCTcQBwAwAEAAYABgAEAAMAQAGSCUQppxVEfSoIBChHGgSogiQA/LokBCg3GwAAAgBEIAAAhBAAAAQJRQAACUIAAIn/AQAJQgiAEEUIQCAAEAAEAAAACEccAIjJIgCQSgMfkEocgKBMIIAg9z8AQAAAAAAAAE588x3RQBQiRnkvHEGGSCLxx4giTjiHHA==");
writeSegment(24388, "DgABIJEQAhCREPQJDwAIBIEQ9AmOEAIQACABIMABAAAuEu84cZIYJaIqDyOkuggjYMYYJQRG7zjgAQAAAAAAAP+76A4QwkgCnMNPAhDeSCIQxkgiH7roHA==");
writeSegment(24484, "EcboPBLuHCMU1hojHMYZPRLGGCHxx+gg");
writeSegment(24516, "zrsfIzFCEiPROxIjMQYSFTJGEhUtOuIIAQAAAAAA4CAxxo8QUUWBEJUogghVEYQILhKIBCqSjwQAAOACjgAEIIIAAiBCAeA8QgEQIiIC8CICABAjAgDwPA58AAAggAMgIAAEIO45/zwwRhQjMH4UIzBC9CLvPRQiAADgAERABgAAQAIAzEWiPURIUiNEcFIjREhSI05EUyOAAwAAAAAAEAAAABDOP+s8McYMETFG6BDRPxgQDgboDwAG");
writeSegment(24712, "McYYPzFGFQVRVRIJUVX1EI+oGD4AAOAAg2AADIQQABKEEAA4mIwEEJiMCjiEEAkShBAADINgAAAADAAAABAACAAQAAgAOAA+ABAACICRDQiAkFQJAGEJCARkAgCEaAceXxEoKAQgRywEwIAoH+xIKARsJx4EAAAAgABAGOADgAhPAMAQlAAAABYBAAAUAgAA7wMAAAAAAABpAwAAMgEAGlsSACwAOAAAAHz3AQA4AAAAEAAAAAAAAIAAAAgfAAAAy0EFPguiCgTAEQsIICAKEMDDBT4AAAAAAAACABEAYgAREIciCgDKHQQQihQEkIccBBByIwAQAgCROOUYkUAQBYowUB0fSJAlBCSQHZ8YUAGEBBABgHjgAAAA9xkAgAgkBYAOJAqADRjUgw4ASoANAEWACAAAAAcAgDEBAEQIkh6EEJA6HwmQGsQx0AoEAKAKHwCACgAAAAsAEAYkADAJJAAQSSkMEKkIDDhWEgABoBaAAEAvAAMAIhICZhxSAQAAVBJCCIQBpRSLEuccKaEYI3LFGCMzOgAAVhEAGISA4z6EEBYhSikLOc45DiExRhohMcbrPgAAQABGAWYc/3/nHBBCQgicc0IIEEJCCBBCQgj/f+ccAAAAAApYZhSOReccROUYI6TXGCMkzRgjRMUYI45F5xwAAAAAVoHADM4BFyMxghkjMaoaIzGSGiMxqhwjzgHnHAAACABKEQAYMUbIADFGLx0xqkgDMZI4HzESHyPOEWgfAAAAAMRZpQAAAEAAzjnnPCGEEArvvfc+McYYKe+99xYAAAAAgBmlGAAAAADOOecYMMYYCdB77wkQQggJ7733HAQAAABGKWUZAAAGAIwx4R2EEBcjhJAYI4SQGCPOORcdAAAAAEZZBQAAAAACzjlHHDHGCCYxxvgrMcYIMs45RxwAAAAgzChFIAAAACAxxhgtMcYYMzHGGDMxxvgs770XIAAA4CAKAAAAAAAAABEAAAARAAAAEQAAAA8AAAABAAAADgAAAEFBQUFBQUFDRUVFRUlJSUlETk9PT09PeE9VVVVVWUlCYWFhYWFhYWNlZWVlaWlpaW9ub29vb28tb3V1dXV5bHkAMDEyMzQ1RSwwMTI0MDEyNC0zMDEyMzQgLzAxMjQxbyAwMTIzNDVlLDAxMjQwMTI0KzMwMTIzNDovMDEyNDFwNA==");
writeSegment(25616, "REZ4dv9JR3V3/3NGeXdmdf9TNVc5WXdVc/9zU1V1/ndXWXn/RUdYeIeFdXdXVf6FdFRF/wAFChEaJAAAAAAAAKGjw8H+AQODgf8BA0NB/gQGRkT/BAbEwv4ICsjG/nB7m5D+MTxcUf+DlLSigf5GNRUnSP4EBcXE/hQiQWJ0VEM0/lV1hpW1p4hn/wkLxML+MBEDIzJDY1H+NhUDIzRDY1X+l3hqipmqyrj+nXxqipuqyrz/Zlg5GAYmN0b+pqSTg3RmRlRigZGyxMb+xripa2mIpv4GFDNUyctWNSb/AQNDQf8mRGOTtNb25MKRYTIUBv8hQ2SUs9Hx48WWZjUTAf+EhgYE/iQSMUNRcmT+Jhg5R1l4Zv8kVFFxdKSmdnlZVib/4ePEpKLC/1FXd3H/oaPDwf8ICuPh/8TGuJk5GAYEJCY3l6ak/sSykTESBCQzk6T/BKShwcmppgb+IQQkQf8EJCY3R1aCocHJqaOzlGhJORgG/hIxMyQE/yQmN0dWVHR2h5empMTGuJmJaEk5GAYE/hIxMyQE/rKRk6TE/wZ2cZGWxsiYmXl4CP5xcwgG/3NxAQkpI1Nk/lJERlh5mbjGxKSml3dmZP6ykZOkxP9EUmRmd5empMTGuJl5WEb+BBIxkbLEpJNzZFMzJCYG/hg5NyYG/wEhJ8PFKQn/BBIxQWKBkbLExqakk4N0dlZUQzMkJgb+BiY3R1Z2h5emxriZiWhJORj/hnhmZFMzJCYGBBIxUXKE/sa4mTkYBiY3V2Z3l6akxP6ykZOkxP9BQ2Nh/qGjw8H/4ePEpKLC/kJEZGL/KWGpiWVJ/zE5WVH+cXmZkf8haaGBZUH/EjEzJAT+BCQmN0dWVWSEhnZoSTkYBv6kpsbE/2hndoaXmKq4t6WEdFVHSFr+S4ucu5iJeWhZSf769uTCkWEyFAYKKSc1RGOTtMXX2f7Zy93s+v4KHD5fj668u5yNbUw7Kf/DwQUH/gc2mMnL/nSTmXj/AcHDA/4jJjdHVlNzd4iYp6PDx7maimlYaEk5GAYD/ycmNFNzlKanyMWzooFBIhMFCP6nyLqrmf4nCBorOf8jJTdYeJelo8PGuKmKSikYBgP+AwHBw//JqaNzd1dTIykJAcH/AcHDc3dXUyMpCf8nJjRTc5Smp8jFs6KBQSITBQj+JzkrGgj+p5mJh2drq7rI/wHBw3N4WFMD/ggKysj/AgEhIqKhwcWlpCQlBQT/x8SykYOkk6Wm/gqaucemmKeICP8BwcODZWMD/ghjyMplCv8BwcmpowP/AQPDwf4MCsrM/qanhwND/qeGCkr/AQPDwf7IiAND/goIyMr/JyY0U3OUpqfIxbOigUEiEwUI/ic5WnqZp8i6q4xMKxoI/wHBwwP+IyY3V2Zjg4Z4WTkYBgP/CCc5WnqZp8jq3LqrjEwrGv4nJjRTc5Smp8jFs6KBQSITBQj/AcHDA/4jJjdXZmODhnhZORgGA/51yMp3/wQSMUFidHaHl6akxMa4mYloVlRDMyQmBv6TpMSykf43JgYYOf8BISXFxycrC/8IiKeYpse5mgr+x8SykQEDg6STpab/xccDAf7HxQkL/8TGAwH+zIsND/7KzAlI/saFBwn/AcnLA/4Lw8EJ/wt3x8V1Cf4BdXcD/wEJKaOpycGhJyH/AfH21tMjJgb/AwHo6v8G9vHR1CQhAf8FYWM1/gVpZzX/0dn58f8BA0ZE/2Vkc5OkpbfFxLKRcVJERVf+VkZIyMa2pZZ2Zf9kZXaWpaSyxMW3mHhXRURS/lMDAcHDs6STc2T/RVd4dmX+xcSykXFSREVlZHOTpKX+pZaYt8X/ZWRzk6Slt8XEspFxUkRFV/5WBgjIxrallnZl/0RFV3iYk3N2ZWT+ZHOTpKa3xcSykXFSRP/CYmFBQjITBQYmJTRERmZkxP/V1MPB4vT158g4NkZVZoaVpsb+VVRjg5SVp7W0ooFhQjQ1R/9kZXbGyHhXRURS/lMDAcHDc2T/QUPDwf4BAyMh/0XF5PLx0dLDQ/4DBSUj/wHBw6OFgwP+RoPGyIVI/wEDw8H/ZGV2xsh4aUVEUv5TQ0HBw3Nk/mlqe8vNfVxKSVf/ZGV2xsh4V0VEUv5TQ0HBw3Nk/2Vkc5OkpcXEspFxUkRF/mV2lqXFt5h4V0X/pKWWdmVkUkRFV3iYt8XEsv6z8/FBQ1Nkc5Ok/6Wkk3NkZVdFRFJxkbLExbf+tvb4SEZWZXaWpf9kZXZoV0VEUv5TQ0HBw3Nk/8W3mId1dGNzZGV3aFdFRFJxgpSVppalpJKhssT/AkJBYWKSs8XGpqWUZGZGRAT/paSTQ0GRssTFt/62xshIRpal/8TGQ0H+xsRHSf/ExkNB/sbERkj+yMpIRv7KyEtN/0FDycf+SUfBw/9KxuXz8tLTxEj+QcWmQ/9BSGikqMjBoWVh/wYUM1NyY3GBk4Kjw+T299fWxaWEc4N0VTUmJwf/AQPz8f8CFDVVdmV3h5WGpcXk8vHR0sOjhHWFdFMzIiEB/zRCYXFzY1T+NFRlhph4Z0b+WWl4mIprW///JyY0REZWVHR2hoSUpqfIxbOigoBwclJQQEIiEwUI/qfIuquZ/icIGis5////////////////////////////////////////////////////////////////AwUWNkVDMzUVE/5DMhID//9nZngAVW5rbm93biBncmFwaGljcyB0eXBlCgBidWZmZXIAaVNldFBpeGVsAGlGaWxsUmVjdABidWZmZXIATk9UWVBFAEZMT0FUMzIASU5UMTYASU5UMzIAVUlOVDgASU5UOABJTlQ2NABCT09MAENPTVBMRVg2NABTVFJJTkcARkxPQVQxNgBVbmtub3duIHR5cGUAeyBqc0hhbmRsZUlPKCk7IH0AeyBod1NldFBpblZhbHVlKCQwLCQxKSB9AHsgcmV0dXJuIGh3R2V0UGluVmFsdWUoJDApIH0AeyByZXR1cm4gRGF0ZS5ub3coKTsgfQBOb3QgaW1wbGVtZW50ZWQ=");
writeSegment(27904, "BAAABAEABAIgBAMhBAQiBAUjBAYABAcABAgABAkABAoAFAsABAwABA0ABA4ABA8AFBAABBEABBIABBMABBQABBUAFBYAFBcAFBgABBkABBoABBsABBwkBB0lBB4mBB8nZ2Z4AEJhbmdsZQAjb25sY2RQb3dlcgBkaXJlY3QAbnVsbABkb3VibGVidWZmZXJlZAAxMjB4MTIwADgweDgwAFVua25vd24gTENEIE1vZGUgJWoAYnVmZmVyAE5vdCBlbm91Z2ggbWVtb3J5IHRvIGFsbG9jYXRlIG9mZnNjcmVlbiBidWZmZXIASW52YWxpZCBpbnRlcnZhbABnZXN0dXJlU3RhcnRUaHJlc2gAZ2VzdHVyZUVuZFRocmVzaABnZXN0dXJlSW5hY3RpdmVDb3VudABnZXN0dXJlTWluTGVuZ3RoAHN0ZXBDb3VudGVyVGhyZXNob2xkTG93AHN0ZXBDb3VudGVyVGhyZXNob2xkSGlnaAB0d2lzdFRocmVzaG9sZAB0d2lzdFRpbWVvdXQAdHdpc3RNYXhZAHdha2VPbkJUTjEAd2FrZU9uQlROMgB3YWtlT25CVE4zAHdha2VPbkZhY2VVcAB3YWtlT25Ub3VjaAB3YWtlT25Ud2lzdABOb3QgZW5vdWdoIHN0YWNrIG1lbW9yeSB0byBkZWNvZGUgZGF0YQB4AHkAegBkeABkeQBkegBoZWFkaW5nAG1hZwBkaWZmAEdyYXBoaWNzAGcAZmxpcAAuc3BsYXNoAAAydjA1LjgyAENvcHlyaWdodCAyMDE5IEcuV2lsbGlhbXMAc2V0dGluZy5qc29uAGJlZXAAdmliAHZpYnJhdGUAI29uYWNjZWwAI29uZmFjZVVwAGZyb250AGJhY2sAYm90dG9tAHRvcAByaWdodABsZWZ0AGRpcgBkb3VibGUAI29udGFwACNvbkdQUwAjb25HUFMtcmF3ACNvbm1hZwBicG0AY29uZmlkZW5jZQByYXcAI29uSFJNACNvbmdlc3R1cmUAI29uYWlHZXN0dXJlAC50Zm1vZGVsAFRGIGVycm9yIC0gbm8gbW9kZWwKAChmdW5jdGlvbihhKSB7dmFyIG09MCxnO2ZvciAodmFyIGkgaW4gYSkgaWYgKGFbaV0+bSkgeyBtPWFbaV07Zz1pOyB9aWYgKGchPT11bmRlZmluZWQpIHt2YXIgbj1yZXF1aXJlKCdTdG9yYWdlJykucmVhZCgnLnRmbmFtZXMnKTtpZiAobikgZz1uLnNwbGl0KCcsJylbZ107fXJldHVybiBnO30pACNvbmNoYXJnaW5nACNvbnN0ZXAAI29udHdpc3QAI29uc3dpcGUAI29udG91Y2gAYWNjSGlzdG9yeUlkeABhY2NHZXN0dXJlQ291bnQAYWNjSWRsZUNvdW50AGxhdABsb24AQmVlcCBpbiBwcm9ncmVzcwBCdXp6IGluIHByb2dyZXNzAC5vZmYgbm90IGltcGxlbWVudGVkIG9uIGVtdWxhdG9yAAAA71ogQtqgX/AAf9MuE/G4nwG18LGwn/N2A2F+g2vh43FwBu1/Bu/N1v8N23AG10BN20fN2sCN20vG4vQG10DGwv9N18/G4vgN2v+N23wN2v/N19/N2sLN2w2G/A2uj43G4A2tgQ2G/oofg2ABxkvG43QG7+8BpkHGIP+ytqAgQ2fhbHMUoXgAwVvU0JuNGwK1Ejf//OQAoMPVwVAN0l/GwoVBGAjmDG65uMj42GBASnCh/q1W/cy5uMg//6AJGl//+gEB/A/CAYRuggP/+AIFiCvCJ4MPPYUvJA5ubv/8A4sPIIQKCNQe/N0UPZY0B8EAgbnCNwcDQAxubgSaCAAk8awX9NwsvoBuhv5bGh4rCBYRuDgI7DNz0PMQSlGPQQ0BGQY7DNzwqBSQylCIYZunn6lGhY+DBgTdmhalKPYZuDgZKGNzbQCUpCjB/huEv42VNxcv+ilKgG/4BuDh/QNzVayAKDgf/UpQNB/xuDg5yDNy0B///Dok/LQylEPgPwNwULHgIADi1QAwkVQ4kBtJuG343BUAcLZ4KlKJgLtBAARKEEAP0hYIB/AGBRAcHCgOAnxuDv/5gwQE/6xDUo7XB+kPG4YMDv5XC3oQBLwRFCGwX/wfgNwQgBKASRBA4LJGUopFBwH+1WqFQIpCl/+o3/7YHB//+q3/RIKGB8tb/xuDgYuCgLFDS4KlKbAWfJYUCFIULEAIsBNwTFBgbICv5ABhaEBNwW/WQfwAYMfAYQADsAGFTYJ+Dgf9HQICBHwRuCSIQFBj63Cj5lBNwMPagcvLQIaBF4oAGgb8COoZMBv5/ChY7BGYQKBTggGBNwUBagh/Cl5uFh43Gn5uEAwNAh5gCDgI0BEQUDIgQMCagRuBn4sEOYJuHVgxuGgItBF4QABNwSWCFYJ0DAgJuCD4QACYIRuGAA5uGFoMfVoguBBwUCEQJEEvxuDG4iKBbpNQNxUA3orCAAV9IAIOCl8AIgkDNwf61QAC1LdK37ODNw4iBYwkDNw0B+gNDnzdHAATdIl0fNxc+gZOEnpuGl9ANw7UHNw8DfoRuYgRuQgJuHngGEg5uGvxuNj5uHIApnDNw0BMwjjB9IHEhfQTAgGBNwoFDNwsfSocUAYReFNwMHDQkP/BfDAAP8Iwv9Nw0PFocHNwQRCO4RqCh/8NwsAgyAE/9AF4kvwApEj5uH3wUD/xuCg6dD34DDD4ZuCCIJnDj/wNwgdCDYcDNw8DKYcvNwcvJIIDBGQQaCNwsAngGCgX/ZAkBLIMDA4f/Nw4tDhZuDJwJHBj5EDn53DNwV0gZ3Dn/gNwgcDC4U/Nw69CKQRuDAoP6/5pDA4IRBNwcD8pEDhbrBL4YhBAgN/AYMv/ZuHgYlBgP/vxuDg///52BGAaODNwUfVwn/4EPC4IABIQQmBAAP83puHhYNC6fgg4MCgw2FSIK4CbocEAwcvGAI2DJQZzBRwMLNw60BBoPgnwvEAAyABNwoMHLAX+yALDG4KABvpPBYgUfBoUbGwMDXYQAJMIRuEAAn/PYgAWNxgqGNwsvdQoAVhZuMg6mENwoLFACVUAge8CRkv/gKIgKlXhYXDh/AUxp9Jn6lXn4DCgQcNTQJGIj4KJABoyE34TNFgJBJWJIANh/0ZwTCOv/9Kg///9AG61//NA146CABcB/62GBAP/KJwjKAAJdHThI3G3//KJw3MGx66BG4sBGwOZGy4ABtWkCSEv//+AoUGUjLyXGIPpq2vAgPgG1sCeQQADX6AAeUwIAFUt0BGw38N10PG42AG92/GwvwG10HNww2ugE/N2sDN3vgN2v+N23QG10CGwv9N18vG4vAG10BGwv8N18fN2sAN20PN3n4N22AN35utoA3v342E+A2vgZuFG18Aj42E6ALEASW52YWxpZCBhcnJheSBsZW5ndGgALABtYXAAZm9yRWFjaABmaWx0ZXIAZmluZABmaW5kSW5kZXgAc29tZQBldmVyeQByZWR1Y2UAQXJyYXkuJXMgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHNvbWV0aGluZyBpdGVyYWJsZQBBcnJheS4lcydzIGZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBhIGZ1bmN0aW9uAEFycmF5LiVzIHdpdGhvdXQgaW5pdGlhbCB2YWx1ZSByZXF1aXJlZCBub24tZW1wdHkgYXJyYXkARXhwZWN0aW5nIGNvbXBhcmUgZnVuY3Rpb24sIGdvdCAldABBcnJheS4lcydzIHNlY29uZCBhcmd1bWVudCBzaG91bGQgYmUgdW5kZWZpbmVkLCBvciBhbiBvYmplY3QASW52YWxpZCBsZW5ndGggZm9yIEFycmF5QnVmZmVyCgBBcnJheUJ1ZmZlciB0b28gbG9uZwoAVW5zdXBwb3J0ZWQgZmlyc3QgYXJndW1lbnQgb2YgdHlwZSAldAoARXhwZWN0aW5nIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGFuIGFycmF5LCBub3QgJXQAQXJyYXlCdWZmZXJWaWV3Lm1hcCBjYW4gb25seSBiZSBjYWxsZWQgb24gYW4gQXJyYXlCdWZmZXJWaWV3AEFycmF5QnVmZmVyVmlldy5tYXAncyBmaXJzdCBhcmd1bWVudCBzaG91bGQgYmUgYSBmdW5jdGlvbgBBcnJheUJ1ZmZlclZpZXcubWFwJ3Mgc2Vjb25kIGFyZ3VtZW50IHNob3VsZCBiZSB1bmRlZmluZWQsIG9yIGFuIG9iamVjdABFeHBlY3RpbmcgQXJyYXlCdWZmZXIsIGdvdCAldABEYXRhVmlldwBidWZmZXIAYnl0ZU9mZnNldABieXRlTGVuZ3RoAAAAAB8AOwBaAHgAlwC1ANQA8wARATABTgFtAQ==");
writeSegment(31234, "");
writeSegment(38430, "//8AACsAgQCsAHkATgAMABIAFwAEACcAtwCQAMAA0gDXAGdmeABJbnZhbGlkIFNpemUASW52YWxpZCBCUFAAR3JhcGhpY3MAemlnemFnAG1zYgBpbnRlcmxlYXZleAB2ZXJ0aWNhbF9ieXRlAHZlcnRpY2FsX2J5dGUgb25seSB3b3JrcyBmb3IgMWJwcCBBcnJheUJ1ZmZlcnMKAGhlaWdodCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgOCB3aGVuIHVzaW5nIHZlcnRpY2FsX2J5dGUKAGNvbG9yX29yZGVyAHJnYgBicmcAYmdyAGdicgBncmIAcmJnAGNvbG9yX29yZGVyIG11c3QgYmUgMyBjaGFyYWN0ZXJzAHNldFBpeGVsAGZpbGxSZWN0AEV4cGVjdGluZyBDYWxsYmFjayBGdW5jdGlvbiBvciBhbiBPYmplY3QgYnV0IGdvdCAldABFeHBlY3RpbmcgYSBTdHJpbmcAd2lkdGgAaGVpZ2h0AGJ1ZmZlcgBJZiBDb2xvciBpcyBhIFN0cmluZywgaXQgbXVzdCBiZSBvZiB0aGUgZm9ybSAnI3JyZ2diYicA/2ZuQgD/Zm5XAP9mbkgA/2ZuMQBGb250IGJpdG1hcCBtdXN0IGJlIGEgU3RyaW5nAEZpcnN0IGNoYXJhY3RlciBvdXQgb2YgcmFuZ2UARm9udCB3aWR0aCBtdXN0IGJlIGEgU3RyaW5nIG9yIGFuIGludGVnZXIAVmVjdG9yADR4NgA2eDgAc2V0Rm9udCV2AFVua25vd24gZm9udCAlagBWZWN0b3IlZABDdXN0b20Ac2V0Rm9udABNYXhpbXVtIG51bWJlciBvZiBwb2ludHMgKCVkKSBleGNlZWRlZCBmb3IgZmlsbFBvbHkAc2NhbGUAcm90YXRlAEV4cGVjdGluZyBhcnJheSBmb3IgZmlyc3QgYXJndW1lbnQgd2l0aCA8JWQgZW50cmllcwBpbWFnZQB4AHkAY2VudGVyAHJlcGVhdABub2JvdW5kcwBvYmplY3QAc3RyaW5nAFVua25vd24gaW1hZ2UgdHlwZSAlagBicHAAeDEAeTEAeDIAeTIAYXNCTVAvYXNVUkwgb25seSB3b3JrcyBvbiAxYnBwLzI0YnBwIEdyYXBoaWNzAGRhdGE6aW1hZ2UvYm1wO2Jhc2U2NCwldgAKAHRyYW5zcGFyZW50AHBhbGV0dGUAcGFsZXR0ZSBzcGVjaWZpZWQsIGJ1dCBtdXN0IGJlIGEgZmxhdCBVaW50MTZBcnJheSBvZiAyLDQsMTYsMjU2IGVsZW1lbnRzAEV4cGVjdGluZyBmaXJzdCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgb3IgYSBTdHJpbmcARXhwZWN0aW5nIGZpcnN0IGFyZ3VtZW50IHRvIGEgdmFsaWQgSW1hZ2UAZmxpcABJbnZhbGlkIEFyZW5hIFNpemUATW9kZWwgaXMgbm90IGEgRmxhdCBTdHJpbmcvQXJyYXlCdWZmZXIAVEZNaWNyb0ludGVycHJldGVyAFVuYWJsZSB0byBhbGxvY2F0ZSBlbm91Z2ggUkFNIGZvciBUZW5zb3JGbG93AE1pY3JvSW50ZXJwcmV0ZXIgY3JlYXRpb24gZmFpbGVkAG1vZGVsAG1pAFRGTWljcm9JbnRlcnByZXRlciBzdHJ1Y3R1cmUgY29ycnVwdGVkAFVuYWJsZSB0byBnZXQgdGVuc29yAFVuc3VwcG9ydGVkIFRlbnNvciBmb3JtYXQgVGZMaXRlVHlwZTolZABURk1pY3JvSW50ZXJwcmV0ZXIgaW52b2tlIGZhaWxlZABUeXBlICVzICglZCkgbm90IGlzIG5vdCBzdXBwb3J0ZWQ=");
writeSegment(39872, "IwIAACQCAAAlAgAAJgIAAE9ubHkgMSBzdWJncmFwaCBpcyBjdXJyZW50bHkgc3VwcG9ydGVkLgoASW52b2tlKCkgY2FsbGVkIGFmdGVyIGluaXRpYWxpemF0aW9uIGZhaWxlZAoATWlzc2luZyByZWdpc3RyYXRpb24gZm9yIG9wY29kZV9pbmRleCAlZAoAU2tpcHBpbmcgb3AgZm9yIG9wY29kZV9pbmRleCAlZAoAVW5zdXBwb3J0ZWQgYmVoYXZpb3I6IGZvdW5kIGJ1aWx0aW4gb3BlcmF0b3IgJXMgd2l0aCBjdXN0b20gb3B0aW9ucy4KAE5vZGUgJXMgKG51bWJlciAlZCkgZmFpbGVkIHRvIHByZXBhcmUgd2l0aCBzdGF0dXMgJWQATm9kZSAlcyAobnVtYmVyICVkKSBmYWlsZWQgdG8gaW52b2tlIHdpdGggc3RhdHVzICVkAElucHV0IGluZGV4ICVkIG91dCBvZiByYW5nZSAobGVuZ3RoIGlzICVkKQBPdXRwdXQgaW5kZXggJWQgb3V0IG9mIHJhbmdlIChsZW5ndGggaXMgJWQp");
writeSegment(40320, "bJ8AAHCfAACAnwAAjp8AAJafAAConwAAt58AAMKfAADTnwAA2Z8AAOmfAAD6nwAAC6AAABagAAAzoAAAPKAAAEugAABQoAAAXKAAAGCgAABloAAAcqAAAHigAACAoAAAkKAAAJSgAACcoAAAq6AAALCgAAC1oAAAx6AAANGgAADWoAAA3aAAAPWgAAD5oAAAFaEAAByhAAAuoQAAQKEAAEqhAABPoQAAU6EAAFehAABfoQAAfKEAAIqhAACloQAAqaEAALGhAAC3oQAAw6EAAMyhAADooQAA7aEAAPOhAAD7oQAAA6IAAAuiAAAQogAAFKIAABqiAAAiogAAMKIAADuiAABCogAASKIAAEyiAABbogAAa6IAAHCiAAB8ogAAgqIAAIyiAACQogAAlKIAAJmiAACfogAApaIAAKmiAACxogAAvKIAAMiiAADTogAA2KIAAOOiAADrogAA96IAAAOjAAAKowAAFaMAAB+jAAAqowAAMaMAADyjAABBowAAS6MAAFGjAABpowAAdKMAAIejAACSowAAlqMAAJ6jAAClowAAqqMAALWjAAC7owAAxaMAAMmjAADPowAA1KMAANijAADpowAA9aMAAP6jAAAOpAAAFKQAAB+kAAAipAAAKKQAAD+kAAAAAAAAQUREAEFWRVJBR0VfUE9PTF8yRABDT05DQVRFTkFUSU9OAENPTlZfMkQAREVQVEhXSVNFX0NPTlZfMkQAREVQVEhfVE9fU1BBQ0UAREVRVUFOVElaRQBFTUJFRERJTkdfTE9PS1VQAEZMT09SAEZVTExZX0NPTk5FQ1RFRABIQVNIVEFCTEVfTE9PS1VQAEwyX05PUk1BTElaQVRJT04ATDJfUE9PTF8yRABMT0NBTF9SRVNQT05TRV9OT1JNQUxJWkFUSU9OAExPR0lTVElDAExTSF9QUk9KRUNUSU9OAExTVE0ATUFYX1BPT0xfMkQATVVMAFJFTFUAUkVMVV9OMV9UT18xAFJFTFU2AFJFU0hBUEUAUkVTSVpFX0JJTElORUFSAFJOTgBTT0ZUTUFYAFNQQUNFX1RPX0RFUFRIAFNWREYAVEFOSABDT05DQVRfRU1CRURESU5HUwBTS0lQX0dSQU0AQ0FMTABDVVNUT00ARU1CRURESU5HX0xPT0tVUF9TUEFSU0UAUEFEAFVOSURJUkVDVElPTkFMX1NFUVVFTkNFX1JOTgBHQVRIRVIAQkFUQ0hfVE9fU1BBQ0VfTkQAU1BBQ0VfVE9fQkFUQ0hfTkQAVFJBTlNQT1NFAE1FQU4AU1VCAERJVgBTUVVFRVpFAFVOSURJUkVDVElPTkFMX1NFUVVFTkNFX0xTVE0AU1RSSURFRF9TTElDRQBCSURJUkVDVElPTkFMX1NFUVVFTkNFX1JOTgBFWFAAVE9QS19WMgBTUExJVABMT0dfU09GVE1BWABERUxFR0FURQBCSURJUkVDVElPTkFMX1NFUVVFTkNFX0xTVE0AQ0FTVABQUkVMVQBNQVhJTVVNAEFSR19NQVgATUlOSU1VTQBMRVNTAE5FRwBQQURWMgBHUkVBVEVSAEdSRUFURVJfRVFVQUwATEVTU19FUVVBTABTRUxFQ1QAU0xJQ0UAU0lOAFRSQU5TUE9TRV9DT05WAFNQQVJTRV9UT19ERU5TRQBUSUxFAEVYUEFORF9ESU1TAEVRVUFMAE5PVF9FUVVBTABMT0cAU1VNAFNRUlQAUlNRUlQAU0hBUEUAUE9XAEFSR19NSU4ARkFLRV9RVUFOVABSRURVQ0VfUFJPRABSRURVQ0VfTUFYAFBBQ0sATE9HSUNBTF9PUgBPTkVfSE9UAExPR0lDQUxfQU5EAExPR0lDQUxfTk9UAFVOUEFDSwBSRURVQ0VfTUlOAEZMT09SX0RJVgBSRURVQ0VfQU5ZAFNRVUFSRQBaRVJPU19MSUtFAEZJTEwARkxPT1JfTU9EAFJBTkdFAFJFU0laRV9ORUFSRVNUX05FSUdIQk9SAExFQUtZX1JFTFUAU1FVQVJFRF9ESUZGRVJFTkNFAE1JUlJPUl9QQUQAQUJTAFNQTElUX1YAVU5JUVVFAENFSUwAUkVWRVJTRV9WMgBBRERfTgBHQVRIRVJfTkQAQ09TAFdIRVJFAFJBTksARUxVAFJFVkVSU0VfU0VRVUVOQ0UATUFUUklYX0RJQUcAUVVBTlRJWkUATUFUUklYX1NFVF9ESUFHAFJPVU5EAEhBUkRfU1dJU0gASUYAV0hJTEUATk9OX01BWF9TVVBQUkVTU0lPTl9WNABOT05fTUFYX1NVUFBSRVNTSU9OX1Y1");
writeSegment(42080, "KAIAACkCAAAqAgAAKwI=");
writeSegment(42104, "LAIAACwCAAAtAgAALgIAAE9ubHkgMSBzdWJncmFwaCBpcyBjdXJyZW50bHkgc3VwcG9ydGVkLgoATG9naWMgZXJyb3IgaW4gbWVtb3J5IHBsYW5uZXIsIHRlbnNvciAlZCBoYXMgYW4gaW52YWxpZCBsaWZldGltZQBBcmVuYSBzaXplIGlzIHRvbyBzbWFsbCBmb3IgYWN0aXZhdGlvbiBidWZmZXJzLiBOZWVkZWQgJWQgYnV0IG9ubHkgJWQgd2FzIGF2YWlsYWJsZS4AVmFyaWFibGUgaXMgbm90IGFsbG9jYXRlZAA8Tm8gbmFtZT4AVHlwZSAnJXMnIGlzIG5vdCBzdXBwb3J0ZWQgYnkgcGFjay4AJXM6JWQgJXMgIT0gJXMgKCVkICE9ICVkKQAvaG9tZS9ndy93b3Jrc3BhY2UvRXNwcnVpbm8vbGlicy90ZW5zb3JmbG93L3RlbnNvcmZsb3cvbGl0ZS9leHBlcmltZW50YWwvbWljcm8va2VybmVscy9yZXNoYXBlLmNjAHN0cmV0Y2hfZGltAC0xAGlucHV0LT50eXBlAG91dHB1dC0+dHlwZQBudW1faW5wdXRfZWxlbWVudHMAbnVtX291dHB1dF9lbGVtZW50cwAlczolZCAlcyB3YXMgbm90IHRydWUuAE51bUlucHV0cyhub2RlKSA9PSAxIHx8IE51bUlucHV0cyhub2RlKSA9PSAyAE51bU91dHB1dHMobm9kZSkAMQAlczolZCAlcyAhPSAlcyAoJWQgIT0gJWQpAC9ob21lL2d3L3dvcmtzcGFjZS9Fc3BydWluby9saWJzL3RlbnNvcmZsb3cvdGVuc29yZmxvdy9saXRlL2V4cGVyaW1lbnRhbC9taWNyby9rZXJuZWxzL2RlcHRod2lzZV9jb252LmNjAGZpbHRlci0+cXVhbnRpemF0aW9uLnR5cGUAa1RmTGl0ZUFmZmluZVF1YW50aXphdGlvbgAlczolZCAlcyB3YXMgbm90IHRydWUuAGFmZmluZV9xdWFudGl6YXRpb24AYWZmaW5lX3F1YW50aXphdGlvbi0+c2NhbGUAVHlwZSAlcyAoJWQpIG5vdCBzdXBwb3J0ZWQuAGhhc19iaWFzIHx8IG5vZGUtPmlucHV0cy0+c2l6ZSA9PSAyAG5vZGUtPm91dHB1dHMtPnNpemUAMQAlczolZCAlcyAhPSAlcyAoJWQgIT0gJWQpAC9ob21lL2d3L3dvcmtzcGFjZS9Fc3BydWluby9saWJzL3RlbnNvcmZsb3cvdGVuc29yZmxvdy9saXRlL2V4cGVyaW1lbnRhbC9taWNyby9rZXJuZWxzL3F1YW50aXplLmNjAE51bUlucHV0cyhub2RlKQAxAE51bU91dHB1dHMobm9kZSkAb3V0cHV0LT5xdWFudGl6YXRpb24udHlwZQBrVGZMaXRlQWZmaW5lUXVhbnRpemF0aW9uACVzOiVkICVzIHdhcyBub3QgdHJ1ZS4AYWZmaW5lX3F1YW50aXphdGlvbgBhZmZpbmVfcXVhbnRpemF0aW9uLT5zY2FsZQBhZmZpbmVfcXVhbnRpemF0aW9uLT5zY2FsZS0+c2l6ZSA9PSAxAGlucHV0LT50eXBlID09IGtUZkxpdGVGbG9hdDMyAG91dHB1dC0+dHlwZSA9PSBrVGZMaXRlVUludDggfHwgb3V0cHV0LT50eXBlID09IGtUZkxpdGVJbnQ4AE91dHB1dCB0eXBlICVzICglZCkgbm90IHN1cHBvcnRlZACA////fwAAAAAAAAD/AAAAJXM6JWQgJXMgIT0gJXMgKCVkICE9ICVkKQAvaG9tZS9ndy93b3Jrc3BhY2UvRXNwcnVpbm8vbGlicy90ZW5zb3JmbG93L3RlbnNvcmZsb3cvbGl0ZS9leHBlcmltZW50YWwvbWljcm8va2VybmVscy9kZXF1YW50aXplLmNjAE51bUlucHV0cyhub2RlKQAxAE51bU91dHB1dHMobm9kZSkAJXM6JWQgJXMgd2FzIG5vdCB0cnVlLgBpbnB1dC0+dHlwZSA9PSBrVGZMaXRlVUludDggfHwgaW5wdXQtPnR5cGUgPT0ga1RmTGl0ZUludDgAb3V0cHV0LT50eXBlID09IGtUZkxpdGVGbG9hdDMyAFR5cGUgJXMgKCVkKSBub3Qgc3VwcG9ydGVkLgBPbmx5IGZsb2F0MzIgaXMgc3VwcG9ydGVkIGN1cnJlbnRseSwgZ290ICVzACVzOiVkICVzIHdhcyBub3QgdHJ1ZS4AL2hvbWUvZ3cvd29ya3NwYWNlL0VzcHJ1aW5vL2xpYnMvdGVuc29yZmxvdy90ZW5zb3JmbG93L2xpdGUvZXhwZXJpbWVudGFsL21pY3JvL2tlcm5lbHMvY29udi5jYwBoYXNfYmlhcyB8fCBub2RlLT5pbnB1dHMtPnNpemUgPT0gMgAlczolZCAlcyAhPSAlcyAoJWQgIT0gJWQpAG5vZGUtPm91dHB1dHMtPnNpemUAMQBmaWx0ZXItPnF1YW50aXphdGlvbi50eXBlAGtUZkxpdGVBZmZpbmVRdWFudGl6YXRpb24AYWZmaW5lX3F1YW50aXphdGlvbgBhZmZpbmVfcXVhbnRpemF0aW9uLT5zY2FsZQBUeXBlICVzICglZCkgbm90IHN1cHBvcnRlZC4ASW5wdXQgdHlwZSAlcyBpcyBub3QgY3VycmVudGx5IHN1cHBvcnRlZABUeXBlICVzIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkLgBPbmx5IDFELCAyRCBhbmQgNEQgdGVuc29ycyBzdXBwb3J0ZWQgY3VycmVudGx5LCBnb3QgJWRELgBPbmx5IDJEIGFuZCA0RCB0ZW5zb3JzIHN1cHBvcnRlZCBjdXJyZW50bHksIGdvdCAlZEQuAE9ubHkgZmxvYXQzMiwgaW50OF90IGFuZCB1aW50OF90IHN1cHBvcnRlZCBjdXJyZW50bHksIGdvdCAlcy4AJXM6JWQgJXMgIT0gJXMgKCVkICE9ICVkKQAvaG9tZS9ndy93b3Jrc3BhY2UvRXNwcnVpbm8vbGlicy90ZW5zb3JmbG93L3RlbnNvcmZsb3cvbGl0ZS9leHBlcmltZW50YWwvbWljcm8va2VybmVscy9zb2Z0bWF4LmNjAG91dHB1dC0+cGFyYW1zLnplcm9fcG9pbnQAMAAlczolZCAlcyB3YXMgbm90IHRydWUuAG91dHB1dC0+cGFyYW1zLnNjYWxlID09IDEuZiAvIDI1NgBPbmx5IGZsb2F0MzIgYW5kIHVpbnQ4IGFyZSBzdXBwb3J0ZWQgY3VycmVudGx5LCBnb3QgJWQuACVzOiVkICVzICE9ICVzICglZCAhPSAlZCkAL2hvbWUvZ3cvd29ya3NwYWNlL0VzcHJ1aW5vL2xpYnMvdGVuc29yZmxvdy90ZW5zb3JmbG93L2xpdGUvZXhwZXJpbWVudGFsL21pY3JvL2tlcm5lbHMvY2VpbC5jYwBOdW1JbnB1dHMobm9kZSkAMQBOdW1PdXRwdXRzKG5vZGUpAGlucHV0LT50eXBlAGtUZkxpdGVGbG9hdDMyAG91dHB1dC0+dHlwZQBvdXRwdXQtPmJ5dGVzAGlucHV0LT5ieXRlcwBvdXRwdXQtPmRpbXMtPnNpemUAaW5wdXQtPmRpbXMtPnNpemUAb3V0cHV0LT5kaW1zLT5kYXRhW2ldAGlucHV0LT5kaW1zLT5kYXRhW2ldAE9ubHkgZmxvYXQzMiwgdWludDggYW5kIGludDggYXJlIHN1cHBvcnRlZCBjdXJyZW50bHksIGdvdCAlcy4AT25seSBpbnQzMiBhcmUgc3VwcG9ydGVkIGN1cnJlbnRseSwgZ290ICVzLgBUeXBlICclcycgaXMgbm90IHN1cHBvcnRlZCBieSB1bnBhY2suAElucHV0cyBhbmQgb3V0cHV0cyBub3QgYWxsIGZsb2F0fHVpbnQ4fGludDggdHlwZXMuAC9ob21lL2d3L3dvcmtzcGFjZS9Fc3BydWluby9saWJzL3RlbnNvcmZsb3cvdGVuc29yZmxvdy9saXRlL2V4cGVyaW1lbnRhbC9taWNyby9rZXJuZWxzL3NwbGl0LmNjIE5vbiBjb25zdGFudCBheGlzIHRlbnNvciBub3Qgc3VwcG9ydGVkACVzOiVkICVzIHdhcyBub3QgdHJ1ZS4AL2hvbWUvZ3cvd29ya3NwYWNlL0VzcHJ1aW5vL2xpYnMvdGVuc29yZmxvdy90ZW5zb3JmbG93L2xpdGUvZXhwZXJpbWVudGFsL21pY3JvL2tlcm5lbHMvc3BsaXQuY2MAYXhpc192YWx1ZSA+PSAwAGF4aXNfdmFsdWUgPCBOdW1EaW1lbnNpb25zKGlucHV0KQBUeXBlICVzIGN1cnJlbnRseSBub3Qgc3VwcG9ydGVkLgBOZWcgb25seSBjdXJyZW50bHkgc3VwcG9ydHMgZmxvYXQzMiwgZ290ICVkLgAlczolZCAlcyAhPSAlcyAoJWQgIT0gJWQpAC9ob21lL2d3L3dvcmtzcGFjZS9Fc3BydWluby9saWJzL3RlbnNvcmZsb3cvdGVuc29yZmxvdy9saXRlL2V4cGVyaW1lbnRhbC9taWNyby9rZXJuZWxzL2Zsb29yLmNjAGlucHV0LT50eXBlAGtUZkxpdGVGbG9hdDMyACVzOiVkICVzICE9ICVzICglZCAhPSAlZCkAL2hvbWUvZ3cvd29ya3NwYWNlL0VzcHJ1aW5vL2xpYnMvdGVuc29yZmxvdy90ZW5zb3JmbG93L2xpdGUvZXhwZXJpbWVudGFsL21pY3JvL2tlcm5lbHMvc3ZkZi5jYwBub2RlLT5pbnB1dHMtPnNpemUANgBudW1fZmlsdGVycyAlIHJhbmsAMABpbnB1dC0+dHlwZQBrVGZMaXRlRmxvYXQzMgBOdW1EaW1lbnNpb25zKGlucHV0KQAyAE51bURpbWVuc2lvbnMod2VpZ2h0c19mZWF0dXJlKQB3ZWlnaHRzX2ZlYXR1cmUtPmRpbXMtPmRhdGFbMV0AaW5wdXRfc2l6ZQBOdW1EaW1lbnNpb25zKHdlaWdodHNfdGltZSkAd2VpZ2h0c190aW1lLT5kaW1zLT5kYXRhWzBdAG51bV9maWx0ZXJzAHdlaWdodHNfdGltZS0+ZGltcy0+ZGF0YVsxXQBtZW1vcnlfc2l6ZQBiaWFzLT5kaW1zLT5kYXRhWzBdAG51bV91bml0cwBiaWFzLT50eXBlAGFjdGl2YXRpb25fc3RhdGUtPnR5cGUATnVtRGltZW5zaW9ucyhhY3RpdmF0aW9uX3N0YXRlKQBhY3RpdmF0aW9uX3N0YXRlLT5kaW1zLT5kYXRhWzBdAGJhdGNoX3NpemUAYWN0aXZhdGlvbl9zdGF0ZS0+ZGltcy0+ZGF0YVsxXQBtZW1vcnlfc2l6ZSAqIG51bV9maWx0ZXJzAHNjcmF0Y2hfdGVuc29yLT50eXBlAE51bURpbWVuc2lvbnMoc2NyYXRjaF90ZW5zb3IpAHNjcmF0Y2hfdGVuc29yLT5kaW1zLT5kYXRhWzBdAHNjcmF0Y2hfdGVuc29yLT5kaW1zLT5kYXRhWzFdACVzOiVkICVzIHdhcyBub3QgdHJ1ZS4Ad2VpZ2h0c19mZWF0dXJlLT50eXBlID09IGtUZkxpdGVVSW50OCB8fCB3ZWlnaHRzX2ZlYXR1cmUtPnR5cGUgPT0ga1RmTGl0ZUludDgAd2VpZ2h0c190aW1lLT50eXBlID09IGtUZkxpdGVVSW50OCB8fCB3ZWlnaHRzX3RpbWUtPnR5cGUgPT0ga1RmTGl0ZUludDgAbm9kZS0+dGVtcG9yYXJpZXMtPnNpemUANABzY3JhdGNoX2lucHV0X3F1YW50aXplZC0+dHlwZSA9PSBrVGZMaXRlVUludDggfHwgc2NyYXRjaF9pbnB1dF9xdWFudGl6ZWQtPnR5cGUgPT0ga1RmTGl0ZUludDgAc2NyYXRjaF9pbnB1dF9xdWFudGl6ZWQtPmRpbXMtPmRhdGFbMF0Ac2NyYXRjaF9zY2FsaW5nX2ZhY3RvcnMtPnR5cGUATnVtRGltZW5zaW9ucyhzY3JhdGNoX3NjYWxpbmdfZmFjdG9ycykAMQBzY3JhdGNoX3NjYWxpbmdfZmFjdG9ycy0+ZGltcy0+ZGF0YVswXQBzY3JhdGNoX2Zsb2F0X3dlaWdodHNfdGltZS0+dHlwZQBOdW1EaW1lbnNpb25zKHNjcmF0Y2hfZmxvYXRfd2VpZ2h0c190aW1lKQBzY3JhdGNoX2Zsb2F0X3dlaWdodHNfdGltZS0+ZGltcy0+ZGF0YVswXQBzY3JhdGNoX2Zsb2F0X3dlaWdodHNfdGltZS0+ZGltcy0+ZGF0YVsxXQB3ZWlnaHRzX2ZlYXR1cmUtPnR5cGUAd2VpZ2h0c190aW1lLT50eXBlAG5vZGUtPm91dHB1dHMtPnNpemUAb3V0cHV0LT50eXBlAE51bURpbWVuc2lvbnMob3V0cHV0KQBvdXRwdXQtPmRpbXMtPmRhdGFbMF0Ab3V0cHV0LT5kaW1zLT5kYXRhWzFdAFR5cGUgJXMgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQu");
writeSegment(47172, "IwIAACQCAABhAgAAYgI=");
writeSegment(47196, "LAIAACwCAABjAgAAZAIAAFR5cGUgJWQgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQuAFF1YW50aXplZCBGdWxseUNvbm5lY3RlZCBleHBlY3RzIG91dHB1dCBkYXRhIHR5cGUgdWludDggb3IgaW50MTYAVHlwZSAlcyAoJWQpIGlzIG5vdCBzdXBwb3J0ZWQgYnkgTWF4aW11bS9NaW5pbXVtLgAlczolZCAlcyAhPSAlcyAoJWQgIT0gJWQpAC9ob21lL2d3L3dvcmtzcGFjZS9Fc3BydWluby9saWJzL3RlbnNvcmZsb3cvdGVuc29yZmxvdy9saXRlL2V4cGVyaW1lbnRhbC9taWNyby9rZXJuZWxzL2VsZW1lbnR3aXNlLmNjAGlucHV0LT50eXBlAGV4cGVjdGVkX3R5cGUATnVtSW5wdXRzKG5vZGUpADEATnVtT3V0cHV0cyhub2RlKQBvdXRwdXQtPnR5cGUASW5wdXQgZGF0YSB0eXBlICVzICglZCkgaXMgbm90IHN1cHBvcnRlZC4AL2hvbWUvZ3cvd29ya3NwYWNlL0VzcHJ1aW5vL2xpYnMvdGVuc29yZmxvdy90ZW5zb3JmbG93L2xpdGUvZXhwZXJpbWVudGFsL21pY3JvL2tlcm5lbHMvc3RyaWRlZF9zbGljZS5jYyBzdHJpZGUgdmFsdWUgaGFzIHRvIGJlIG5vbi16ZXJvACVzOiVkICVzICE9ICVzICglZCAhPSAlZCkAL2hvbWUvZ3cvd29ya3NwYWNlL0VzcHJ1aW5vL2xpYnMvdGVuc29yZmxvdy90ZW5zb3JmbG93L2xpdGUvZXhwZXJpbWVudGFsL21pY3JvL2tlcm5lbHMvc3RyaWRlZF9zbGljZS5jYwBvdXRwdXRfc2hhcGUtPmRhdGFbc2hhcGVfc2l6ZV0AZGltX3NoYXBlAG91dHB1dF9zaGFwZS0+c2l6ZQBzaGFwZV9zaXplAE51bUlucHV0cyhub2RlKQA0AE51bU91dHB1dHMobm9kZSkAMQAvaG9tZS9ndy93b3Jrc3BhY2UvRXNwcnVpbm8vbGlicy90ZW5zb3JmbG93L3RlbnNvcmZsb3cvbGl0ZS9leHBlcmltZW50YWwvbWljcm8va2VybmVscy9zdHJpZGVkX3NsaWNlLmNjIGlucHV0IGRpbSBzaG91bGQgbm90IGV4Y2VlZCA0AFR5cGUgJWQgaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQgYnkgU3RyaWRlZFNsaWNlLgAlczolZCAlcyAhPSAlcyAoJWQgIT0gJWQpAC9ob21lL2d3L3dvcmtzcGFjZS9Fc3BydWluby9saWJzL3RlbnNvcmZsb3cvdGVuc29yZmxvdy9saXRlL2V4cGVyaW1lbnRhbC9taWNyby9rZXJuZWxzL3JvdW5kLmNjAE51bUlucHV0cyhub2RlKQAxAE51bU91dHB1dHMobm9kZSkAaW5wdXQtPnR5cGUAa1RmTGl0ZUZsb2F0MzIAb3V0cHV0LT50eXBlAG91dHB1dC0+Ynl0ZXMAaW5wdXQtPmJ5dGVzAG91dHB1dC0+ZGltcy0+c2l6ZQBpbnB1dC0+ZGltcy0+c2l6ZQBvdXRwdXQtPmRpbXMtPmRhdGFbaV0AaW5wdXQtPmRpbXMtPmRhdGFbaV0=");
writeSegment(48476, "iAIAAIkCAAAsAgAALAIAACwCAAAsAg==");
writeSegment(48508, "igIAAIsCAACMAgAAjQIAAI4CAACPAgAAVG9vIG1hbnkgYnVmZmVycyAobWF4IGlzICVkKQBidWZmZXIgaW5kZXggJWQgaXMgb3V0c2lkZSByYW5nZSAwIHRvICVkAFVuc3VwcG9ydGVkIGRhdGEgdHlwZSAlZCBpbiB0ZW5zb3IKAFVuaGFuZGxlZCBmdWxseS1jb25uZWN0ZWQgd2VpZ2h0cyBmb3JtYXQuAFVuaGFuZGxlZCBMU1RNIGtlcm5lbCB0eXBlOiAlZABObyB2YWxpZCBMU1RNIGJ1aWx0aW4gb3B0aW9ucyBleGlzdAByZXNoYXBlAHNxdWVlemUAREVMRUdBVEUgb3Agc2hvdWxkbid0IGV4aXN0IGluIG1vZGVsLgBJbnB1dCBhcnJheSBub3QgcHJvdmlkZWQgZm9yIG9wZXJhdGlvbiAnJXMnLgoARm91bmQgdG9vIG1hbnkgZGltZW5zaW9ucyBpbiB0aGUgaW5wdXQgYXJyYXkgb2Ygb3BlcmF0aW9uICclcycuCgBPcCBidWlsdGluX2NvZGUgb3V0IG9mIHJhbmdlOiAlZC4gQXJlIHlvdSB1c2luZyBvbGQgVEZMaXRlIGJpbmFyeSB3aXRoIG5ld2VyIG1vZGVsPwBEaWRuJ3QgZmluZCBvcCBmb3IgYnVpbHRpbiBvcGNvZGUgJyVzJyB2ZXJzaW9uICclZCcKAE9wZXJhdG9yIHdpdGggQ1VTVE9NIGJ1aWx0aW5fY29kZSBoYXMgbm8gY3VzdG9tX2NvZGUuCgAlczolZCAlcyAhPSAlcyAoJWQgIT0gJWQpAC9ob21lL2d3L3dvcmtzcGFjZS9Fc3BydWluby9saWJzL3RlbnNvcmZsb3cvdGVuc29yZmxvdy9saXRlL2tlcm5lbHMva2VybmVsX3V0aWwuY2MAaW5wdXQtPnF1YW50aXphdGlvbi50eXBlAGtUZkxpdGVBZmZpbmVRdWFudGl6YXRpb24AZmlsdGVyLT5xdWFudGl6YXRpb24udHlwZQAlczolZCAlcyB3YXMgbm90IHRydWUuAGFmZmluZV9xdWFudGl6YXRpb24AYWZmaW5lX3F1YW50aXphdGlvbi0+c2NhbGUAaW5wdXQtPnR5cGUAa1RmTGl0ZUludDgAZmlsdGVyLT50eXBlAGFmZmluZV9xdWFudGl6YXRpb24tPnNjYWxlLT5zaXplAGZpbHRlci0+ZGltcy0+ZGF0YVthZmZpbmVfcXVhbnRpemF0aW9uLT5xdWFudGl6ZWRfZGltZW5zaW9uXQBzdGQ6OmFicyhpbnB1dF9wcm9kdWN0X3NjYWxlIC0gYmlhc19zY2FsZSkgPD0gMWUtNiAqIHN0ZDo6bWluKGlucHV0X3Byb2R1Y3Rfc2NhbGUsIGJpYXNfc2NhbGUpAGlucHV0X3Byb2R1Y3Rfc2NhbGUgPj0gMABmYWxzZQBNb2RlbCBwcm92aWRlZCBpcyBzY2hlbWEgdmVyc2lvbiAlZCBub3QgZXF1YWwgdG8gc3VwcG9ydGVkIHZlcnNpb24gJWQuAEludm9rZSBmYWlsZWQ=");
writeSegment(49712, "kAIAAJECAACSAg==");
writeSegment(49732, "kwIAAJQCAAAsAgAAJXMALSsgICAwWDB4AChudWxsKQ==");
writeSegment(49776, "EQAKABEREQAAAAAFAAAAAAAACQAAAAAL");
writeSegment(49808, "EQAPChEREQMKBwABEwkLCwAACQYLAAALAAYRAAAAERER");
writeSegment(49857, "Cw==");
writeSegment(49866, "EQAKChEREQAKAAACAAkLAAAACQALAAAL");
writeSegment(49915, "DA==");
writeSegment(49927, "DAAAAAAMAAAAAAkMAAAAAAAMAAAM");
writeSegment(49973, "Dg==");
writeSegment(49985, "DQAAAAQNAAAAAAkOAAAAAAAOAAAO");
writeSegment(50031, "EA==");
writeSegment(50043, "DwAAAAAPAAAAAAkQAAAAAAAQAAAQAAASAAAAEhIS");
writeSegment(50098, "EgAAABISEgAAAAAAAAk=");
writeSegment(50147, "Cw==");
writeSegment(50159, "CgAAAAAKAAAAAAkLAAAAAAALAAAL");
writeSegment(50205, "DA==");
writeSegment(50217, "DAAAAAAMAAAAAAkMAAAAAAAMAAAMAAAwMTIzNDU2Nzg5QUJDREVGLTBYKzBYIDBYLTB4KzB4IDB4AGluZgBJTkYAbmFuAE5BTgAuAAAAAIjWAABQdXJlIHZpcnR1YWwgZnVuY3Rpb24gY2FsbGVkIQAAAAAAAAADAAAABAAAAAQAAAAGAAAAg/miAERObgD8KRUA0VcnAN009QBi28AAPJmVAEGQQwBjUf4Au96rALdhxQA6biQA0k1CAEkG4AAJ6i4AHJLRAOsd/gApsRwA6D6nAPU1ggBEuy4AnOmEALQmcABBfl8A1pE5AFODOQCc9DkAi1+EACj5vQD4HzsA3v+XAA+YBQARL+8AClqLAG0fbQDPfjYACcsnAEZPtwCeZj8ALepfALondQDl68cAPXvxAPc5BwCSUooA+2vqAB+xXwAIXY0AMANWAHv8RgDwq2sAILzPADb0mgDjqR0AXmGRAAgb5gCFmWUAoBRfAI1AaACA2P8AJ3NNAAYGMQDKVhUAyahzAHviYABrjMAAGcRHAM1nwwAJ6NwAWYMqAIt2xACmHJYARK/dABlX0QClPgUABQf/ADN+PwDCMugAmE/eALt9MgAmPcMAHmvvAJ/4XgA1HzoAf/LKAPGHHQB8kCEAaiR8ANVu+gAwLXcAFTtDALUUxgDDGZ0ArcTCACxNQQAMAF0Ahn1GAONxLQCbxpoAM2IAALTSfAC0p5cAN1XVANc+9gCjEBgATXb8AGSdKgBw16sAY3z4AHqwVwAXFecAwElWADvW2QCnhDgAJCPLANaKdwBaVCMAAB+5APEKGwAZzt8AnzH/AGYeagCZV2EArPtHAH5/2AAiZbcAMuiJAOa/YADvxM0AbDYJAF0/1AAW3tcAWDveAN6bkgDSIigAKIboAOJYTQDGyjIACOMWAOB9ywAXwFAA8x2nABjgWwAuEzQAgxJiAINIAQD1jlsArbB/AB7p8gBISkMAEGfTAKrd2ACuX0IAamHOAAoopADTmbQABqbyAFx3fwCjwoMAYTyIAIpzeACvjFoAb9e9AC2mYwD0v8sAjYHvACbBZwBVykUAytk2ACio0gDCYY0AEsl3AAQmFAASRpsAxFnEAMjFRABNspEAABfzANRDrQApSeUA/dUQAAC+/AAelMwAcM7uABM+9QDs8YAAs+fDAMf4KACTBZQAwXE+AC4JswALRfMAiBKcAKsgewAutZ8AR5LCAHsyLwAMVW0AcqeQAGvnHwAxy5YAeRZKAEF54gD034kA6JSXAOLmhACZMZcAiO1rAF9fNgC7/Q4ASJq0AGekbABxckIAjV0yAJ8VuAC85QkAjTElAPd0OQAwBRwADQwBAEsIaAAs7lgAR6qQAHTnAgC91iQA932mAG5IcgCfFu8AjpSmALSR9gDRU1EAzwryACCYMwD1S34AsmNoAN0+XwBAXQMAhYl/AFVSKQA3ZMAAbdgQADJIMgBbTHUATnHUAEVUbgALCcEAKvVpABRm1QAnB50AXQRQALQ72wDqdsUAh/kXAElrfQAdJ7oAlmkpAMbMrACtFFQAkOJqAIjZiQAsclAABKS+AHcHlADzMHAAAPwnAOpxqABmwkkAZOA9AJfdgwCjP5cAQ5T9AA2GjAAxQd4AkjmdAN1wjAAXt+cACN87ABU3KwBcgKAAWoCTABARkgAP6NgAbICvANv/SwA4kA8AWRh2AGKlFQBhy7sAx4m5ABBAvQDS8gQASXUnAOu29gDbIrsAChSqAIkmLwBkg3YACTszAA6UGgBROqoAHaPCAK/trgBcJhIAbcJNAC16nADAVpcAAz+DAAnw9gArQIwAbTGZADm0BwAMIBUA2MNbAPWSxADGrUsATsqlAKc3zQDmqTYAq5KUAN1CaAAZY94AdozvAGiLUgD82zcArqGrAN8VMQAArqEADPvaAGRNZgDtBbcAKWUwAFdWvwBH/zoAavm5AHW+8wAok98Aq4AwAGaM9gAEyxUA+iIGANnkHQA9s6QAVxuPADbNCQBOQukAE76kADMjtQDwqhoAT2WoANLBpQALPw8AW3jNACP5dgB7iwQAiRdyAMamUwBvbuIA7+sAAJtKWADE2rcAqma6AHbPzwDRAh0AsfEtAIyZwQDDrXcAhkjaAPddoADGgPQArPAvAN3smgA/XLwA0N5tAJDHHwAq27YAoyU6AACvmgCtU5MAtlcEACkttABLgH4A2genAHaqDgB7WaEAFhIqANy3LQD65f0Aidv+AIm+/QDkdmwABqn8AD6AcACFbhUA/Yf/ACg+BwBhZzMAKhiGAE296gCz568Aj21uAJVnOQAxv1sAhNdIADDfFgDHLUMAJWE1AMlwzgAwy7gAv2z9AKQAogAFbOQAWt2gACFvRwBiEtIAuVyEAHBhSQBrVuAAmVIBAFBVNwAe1bcAM/HEABNuXwBdMOQAhS6pAB2ywwChMjYACLekAOqx1AAW9yEAj2nkACf/dwAMA4AAjUAtAE/NoAAgpZkAs6LTAC9dCgC0+UIAEdrLAH2+0ACb28EAqxe9AMqigQAIalwALlUXACcAVQB/FPAA4QeGABQLZACWQY0Ah77eANr9KgBrJbYAe4k0AAXz/gC5v54AaGpPAEoqqABPxFoALfi8ANdamAD0x5UADU2NACA6pgCkV18AFD+xAIA4lQDMIAEAcd2GAMnetgC/YPUATWURAAEHawCMsKwAssDQAFFVSAAe+w4AlXLDAKMGOwDAQDUABtx7AOBFzABOKfoA1srIAOjzQQB8ZN4Am2TYANm+MQCkl8MAd1jUAGnjxQDw2hMAujo8AEYYRgBVdV8A0r31AG6SxgCsLl0ADkTtABw+QgBhxIcAKf3pAOfW8wAifMoAb5E1AAjgxQD/140AbmriALD9xgCTCMEAfF10AGutsgDNbp0APnJ7AMYRagD3z6kAKXPfALXJugC3AFEA4rINAHS6JADlfWAAdNiKAA0VLACBGAwAfmaUAAEpFgCfenYA/f2+AFZF7wDZfjYA7NkTAIu6uQDEl/wAMagnAPFuwwCUxTYA2KhWALSotQDPzA4AEoktAG9XNAAsVokAmc7jANYguQBrXqoAPiqcABFfzAD9C0oA4fT7AI47bQDihiwA6dSEAPy0qQDv7tEALjXJAC85YQA4IUQAG9nIAIH8CgD7SmoALxzYAFO0hABOmYwAVCLMACpV3ADAxtYACxmWABpwuABplWQAJlpgAD9S7gB/EQ8A9LURAPzL9QA0vC0ANLzuAOhdzADdXmAAZ46bAJIz7wDJF7gAYVibAOFXvABRg8YA2D4QAN1xSAAtHN0ArxihACEsRgBZ89cA2XqYAJ5UwABPhvoAVgb8AOV5rgCJIjYAOK0iAGeT3ABV6KoAgiY4AMrnmwBRDaQAmTOxAKnXDgBpBUgAZbLwAH+IpwCITJcA+dE2ACGSswB7gkoAmM8hAECf3ADcR1UA4XQ6AGfrQgD+nd8AXtRfAHtnpAC6rHoAVfaiACuIIwBBulUAWW4IACEqhgA5R4MAiePmAOWe1ABJ+0AA/1bpABwPygDFWYoAlPorANPBxQAPxc8A21quAEfFhgCFQ2IAIYY7ACx5lAAQYYcAKkx7AIAsGgBDvxIAiCaQAHg8iQCoxOQA5dt7AMQ6wgAm9OoA92eKAA2SvwBloysAPZOxAL18CwCkUdwAJ91jAGnh3QCalBkAqCmVAGjOKAAJ7bQARJ8gAE6YygBwgmMAfnwjAA+5MgCn9Y4AFFbnACHxCAC1nSoAb35NAKUZUQC1+asAgt/WAJbdYQAWNgIAxDqfAIOioQBy7W0AOY16AIK4qQBrMlwARidbAAA07QDSAHcA/PRVAAFZTQDgcYA=");
writeSegment(53123, "QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNU+7YQVnrN0/GC1EVPsh6T+b9oHSC3PvPxgtRFT7Ifk/4mUvIn8rejwHXBQzJqaBPL3L8HqIB3A8B1wUMyamkTwYLURU+yHpPxgtRFT7Iem/0iEzf3zZAkDSITN/fNkCwA==");
writeSegment(53295, "gBgtRFT7IQlAGC1EVPshCcAAAAAAAADgPwAAAAAAAOC/AAAAPwAAAL8=");
writeSegment(53344, "bAcAAMQJAADvvq3evrr+yhX//wD//////////wEAAAAAxAkAAAk9AAQAAAAKAAAAABnsAwAZFAQgAwAA4Pz//+gDAAAiegAAUnoAAHeFAAAHAgAACAIAAAkCAAAKAgAACwIAAAwCAAANAgAADgIAAA8CAAAQAgAAEQIAABICAAATAgAAFAIAABUCAAAWAgAAFwIAAAAAAAAd");
writeSegment(53508, "LwIAADAC");
writeSegment(53540, "MQIAADIC");
writeSegment(53564, "MwIAADQCAAA1AgAANgI=");
writeSegment(53596, "NwIAADgCAAA5AgAAOgI=");
writeSegment(53636, "OwIAADwC");
writeSegment(53668, "PQIAAD4C");
writeSegment(53692, "PwIAAEACAABBAgAAQgI=");
writeSegment(53724, "QwIAAEQCAABFAgAARgI=");
writeSegment(53756, "QwIAAEQCAABFAgAARwI=");
writeSegment(53788, "SAIAAEkCAABKAgAASwI=");
writeSegment(53828, "TAIAAE0C");
writeSegment(53860, "TgIAAE8C");
writeSegment(53892, "UAIAAFEC");
writeSegment(53924, "UAIAAFIC");
writeSegment(53956, "UwIAAFQC");
writeSegment(53980, "VQIAAFYCAABXAgAAWAI=");
writeSegment(54020, "WQIAAFoC");
writeSegment(54056, "WwI=");
writeSegment(54088, "XAI=");
writeSegment(54108, "XQIAAF4CAABfAgAAYAI=");
writeSegment(54140, "ZQIAAGYCAABnAgAAaAI=");
writeSegment(54184, "cwI=");
writeSegment(54216, "dAI=");
writeSegment(54244, "fAIAAH0C");
writeSegment(54276, "fAIAAH4C");
writeSegment(54308, "fAIAAH8C");
writeSegment(54340, "fAIAAIAC");
writeSegment(54372, "fAIAAIEC");
writeSegment(54404, "fAIAAIIC");
writeSegment(54436, "fAIAAIMC");
writeSegment(54468, "hAIAAIUC");
writeSegment(54500, "hgIAAIcC");
writeSegment(54528, "BQ==");
writeSegment(54540, "lQI=");
writeSegment(54564, "lgIAAJcCAACY2AMAAAQ=");
writeSegment(54588, "AQ==");
writeSegment(54603, "Cv////8=");
writeSegment(54673, "1Q==");
writeSegment(54864, "0NwD");
writeSegment(54920, "BQ==");
writeSegment(54932, "mgI=");
writeSegment(54956, "lgIAAJsCAADw3AM=");
writeSegment(54980, "Ag==");
writeSegment(54995, "//////8=");
return asmFunc({
    'Int8Array': Int8Array,
    'Int16Array': Int16Array,
    'Int32Array': Int32Array,
    'Uint8Array': Uint8Array,
    'Uint16Array': Uint16Array,
    'Uint32Array': Uint32Array,
    'Float32Array': Float32Array,
    'Float64Array': Float64Array,
    'NaN': NaN,
    'Infinity': Infinity,
    'Math': Math
  },
  asmLibraryArg,
  wasmMemory.buffer
)

}// EMSCRIPTEN_END_ASM




)(asmLibraryArg, wasmMemory, wasmTable);
    return {
      'exports': exports
    };
  },

  instantiate: function(binary, info) {
    return {
      then: function(ok, err) {
        ok({
          'instance': new WebAssembly.Instance(new WebAssembly.Module(binary, info))
        });
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];




if (typeof WebAssembly !== 'object') {
  abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');
}


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.
var wasmTable = new WebAssembly.Table({
  'initial': 668,
  'maximum': 668 + 0,
  'element': 'anyfunc'
});


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}




// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 1024,
    STACK_BASE = 5496720,
    STACKTOP = STACK_BASE,
    STACK_MAX = 253840,
    DYNAMIC_BASE = 5496720,
    DYNAMICTOP_PTR = 253680;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'TOTAL_MEMORY')) Object.defineProperty(Module, 'TOTAL_MEMORY', { configurable: true, get: function() { abort('Module.TOTAL_MEMORY has been replaced with plain INITIAL_TOTAL_MEMORY') } });

assert(INITIAL_TOTAL_MEMORY >= TOTAL_STACK, 'TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');






// In standalone mode, the wasm creates the memory, and the user can't provide it.
// In non-standalone/normal mode, we create the memory here.

// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE
      ,
      'maximum': INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['TOTAL_MEMORY'].
INITIAL_TOTAL_MEMORY = buffer.byteLength;
assert(INITIAL_TOTAL_MEMORY % WASM_PAGE_SIZE === 0);
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;




// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  // The stack grows downwards
  HEAPU32[(STACK_MAX >> 2)+1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)+1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)+2];
  if (cookie1 != 0x02135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}




// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw new WebAssembly.RuntimeError(what);
}


var memoryInitializer = null;




// show errors on likely calls to FS when it was not included
var FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




var wasmBinaryFile = 'emulator_espruino.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    var binary = tryParseAsDataURI(wasmBinaryFile);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // if we don't have the binary yet, and have the Fetch api, use that
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_unstable': asmLibraryArg
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
   // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');


  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
      // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
      // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}


// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  27785: function() {jsHandleIO();},  
 27803: function($0, $1) {hwSetPinValue($0,$1)},  
 27828: function($0) {return hwGetPinValue($0)},  
 27857: function() {return Date.now();}
};

// Avoid creating a new array
var _readAsmConstArgsArray = [];

function readAsmConstArgs(sigPtr, buf) {
  var args = _readAsmConstArgsArray;
  args.length = 0;
  while (1) {
    var ch = HEAPU8[sigPtr++];
    if (!ch) return args;
    if (ch === 'd'.charCodeAt(0) || ch === 'f'.charCodeAt(0)) {
      buf = alignMemory(buf, 8);
      args.push(HEAPF64[(buf >> 3)]);
      buf += 8;
    } else if (ch === 'i'.charCodeAt(0)) {
      buf = alignMemory(buf, 4);
      args.push(HEAP32[(buf >> 2)]);
      buf += 4;
    } else abort("unexpected char in asm const signature " + ch);
  }
}


function _emscripten_asm_const_dii(code, sigPtr, argbuf) {
  var args = readAsmConstArgs(sigPtr, argbuf);
  return ASM_CONSTS[code].apply(null, args);
}

function _emscripten_asm_const_iii(code, sigPtr, argbuf) {
  var args = readAsmConstArgs(sigPtr, argbuf);
  return ASM_CONSTS[code].apply(null, args);
}



// STATICTOP = STATIC_BASE + 252816;
/* global initializers */  __ATINIT__.push({ func: function() { ___wasm_call_ctors() } });



/* no memory initializer */
// {{PRE_LIBRARY}}


  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error(0);
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___lock() {}

  function ___unlock() {}

  function _abort() {
      abort();
    }

  var _abs=Math_abs;

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

  function _emscripten_get_sbrk_ptr() {
      return 253680;
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }

  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};var SYSCALLS={buffers:[null,[],[]],printChar:function(stream, curr) {
        var buffer = SYSCALLS.buffers[stream];
        assert(buffer);
        if (curr === 0 || curr === 10) {
          (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
          buffer.length = 0;
        } else {
          buffer.push(curr);
        }
      },varargs:0,get:function(varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function() {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },get64:function() {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function() {
        assert(SYSCALLS.get() === 0);
      }};function _fd_close(fd) {try {
  
      abort('it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM');
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      abort('it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM');
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var buffers = SYSCALLS.buffers;
      if (buffers[1].length) SYSCALLS.printChar(1, 10);
      if (buffers[2].length) SYSCALLS.printChar(2, 10);
    }function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      // hack to support printf in SYSCALLS_REQUIRE_FILESYSTEM=0
      var num = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          SYSCALLS.printChar(fd, HEAPU8[ptr+j]);
        }
        num += len;
      }
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      var aligned_dest_end = 0;
      var block_aligned_dest_end = 0;
      var dest_end = 0;
      // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
      if ((num|0) >= 8192) {
        _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
        return dest|0;
      }
  
      ret = dest|0;
      dest_end = (dest + num)|0;
      if ((dest&3) == (src&3)) {
        // The initial unaligned < 4-byte front.
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        aligned_dest_end = (dest_end & -4)|0;
        block_aligned_dest_end = (aligned_dest_end - 64)|0;
        while ((dest|0) <= (block_aligned_dest_end|0) ) {
          HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
          HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
          HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
          HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
          HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
          HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
          HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
          HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
          HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
          HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
          HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
          HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
          HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
          HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
          HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
          HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
          dest = (dest+64)|0;
          src = (src+64)|0;
        }
        while ((dest|0) < (aligned_dest_end|0) ) {
          HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
          dest = (dest+4)|0;
          src = (src+4)|0;
        }
      } else {
        // In the unaligned copy case, unroll a bit as well.
        aligned_dest_end = (dest_end - 4)|0;
        while ((dest|0) < (aligned_dest_end|0) ) {
          HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
          HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
          HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
          HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
          dest = (dest+4)|0;
          src = (src+4)|0;
        }
      }
      // The remaining unaligned < 4 byte tail.
      while ((dest|0) < (dest_end|0)) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
      }
      return ret|0;
    }

  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
      end = (ptr + num)|0;
  
      value = value & 0xff;
      if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
        while ((ptr&3) != 0) {
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
  
        aligned_end = (end & -4)|0;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
  
        block_aligned_end = (aligned_end - 64)|0;
  
        while((ptr|0) <= (block_aligned_end|0)) {
          HEAP32[((ptr)>>2)]=value4;
          HEAP32[(((ptr)+(4))>>2)]=value4;
          HEAP32[(((ptr)+(8))>>2)]=value4;
          HEAP32[(((ptr)+(12))>>2)]=value4;
          HEAP32[(((ptr)+(16))>>2)]=value4;
          HEAP32[(((ptr)+(20))>>2)]=value4;
          HEAP32[(((ptr)+(24))>>2)]=value4;
          HEAP32[(((ptr)+(28))>>2)]=value4;
          HEAP32[(((ptr)+(32))>>2)]=value4;
          HEAP32[(((ptr)+(36))>>2)]=value4;
          HEAP32[(((ptr)+(40))>>2)]=value4;
          HEAP32[(((ptr)+(44))>>2)]=value4;
          HEAP32[(((ptr)+(48))>>2)]=value4;
          HEAP32[(((ptr)+(52))>>2)]=value4;
          HEAP32[(((ptr)+(56))>>2)]=value4;
          HEAP32[(((ptr)+(60))>>2)]=value4;
          ptr = (ptr + 64)|0;
        }
  
        while ((ptr|0) < (aligned_end|0) ) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      // The remaining bytes.
      while ((ptr|0) < (end|0)) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }
      return (end-num)|0;
    }

  
  function _round(d) {
      d = +d;
      return d >= +0 ? +Math_floor(d + +0.5) : +Math_ceil(d - +0.5);
    }

  function _roundf(d) {
      d = +d;
      return d >= +0 ? +Math_floor(d + +0.5) : +Math_ceil(d - +0.5);
    }

  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Int8Array,Int32Array,Math_floor,Math_ceil

var asmGlobalArg = {};
var asmLibraryArg = { "__lock": ___lock, "__unlock": ___unlock, "abort": _abort, "abs": _abs, "emscripten_asm_const_dii": _emscripten_asm_const_dii, "emscripten_asm_const_iii": _emscripten_asm_const_iii, "emscripten_get_sbrk_ptr": _emscripten_get_sbrk_ptr, "emscripten_memcpy_big": _emscripten_memcpy_big, "emscripten_resize_heap": _emscripten_resize_heap, "exit": _exit, "fd_close": _fd_close, "fd_seek": _fd_seek, "fd_write": _fd_write, "getTempRet0": getTempRet0, "memory": wasmMemory, "round": _round, "roundf": _roundf, "setTempRet0": setTempRet0, "table": wasmTable };
var asm = createWasm();
var real____wasm_call_ctors = asm["__wasm_call_ctors"];
asm["__wasm_call_ctors"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____wasm_call_ctors.apply(null, arguments);
};

var real__jshPushIOCharEvent = asm["jshPushIOCharEvent"];
asm["jshPushIOCharEvent"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__jshPushIOCharEvent.apply(null, arguments);
};

var real__jshGetCharToTransmit = asm["jshGetCharToTransmit"];
asm["jshGetCharToTransmit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__jshGetCharToTransmit.apply(null, arguments);
};

var real__jshGetDeviceToTransmit = asm["jshGetDeviceToTransmit"];
asm["jshGetDeviceToTransmit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__jshGetDeviceToTransmit.apply(null, arguments);
};

var real__malloc = asm["malloc"];
asm["malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__free = asm["free"];
asm["free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__jsInit = asm["jsInit"];
asm["jsInit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__jsInit.apply(null, arguments);
};

var real__jsIdle = asm["jsIdle"];
asm["jsIdle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__jsIdle.apply(null, arguments);
};

var real__jsGfxChanged = asm["jsGfxChanged"];
asm["jsGfxChanged"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__jsGfxChanged.apply(null, arguments);
};

var real__jsGfxGetPtr = asm["jsGfxGetPtr"];
asm["jsGfxGetPtr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__jsGfxGetPtr.apply(null, arguments);
};

var real__jsSendPinWatchEvent = asm["jsSendPinWatchEvent"];
asm["jsSendPinWatchEvent"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__jsSendPinWatchEvent.apply(null, arguments);
};

var real__jsKill = asm["jsKill"];
asm["jsKill"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__jsKill.apply(null, arguments);
};

var real__htons = asm["htons"];
asm["htons"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__htons.apply(null, arguments);
};

var real__ntohs = asm["ntohs"];
asm["ntohs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ntohs.apply(null, arguments);
};

var real__htonl = asm["htonl"];
asm["htonl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__htonl.apply(null, arguments);
};

var real__fflush = asm["fflush"];
asm["fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real____errno_location = asm["__errno_location"];
asm["__errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real___ZSt18uncaught_exceptionv = asm["_ZSt18uncaught_exceptionv"];
asm["_ZSt18uncaught_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt18uncaught_exceptionv.apply(null, arguments);
};

var real__setThrew = asm["setThrew"];
asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__setThrew.apply(null, arguments);
};

var real__emscripten_builtin_memalign = asm["emscripten_builtin_memalign"];
asm["emscripten_builtin_memalign"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_builtin_memalign.apply(null, arguments);
};

var real_stackSave = asm["stackSave"];
asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"];
asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"];
asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real___growWasmMemory = asm["__growWasmMemory"];
asm["__growWasmMemory"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___growWasmMemory.apply(null, arguments);
};

var real_dynCall_vii = asm["dynCall_vii"];
asm["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_vii.apply(null, arguments);
};

var real_dynCall_ii = asm["dynCall_ii"];
asm["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_ii.apply(null, arguments);
};

var real_dynCall_iii = asm["dynCall_iii"];
asm["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iii.apply(null, arguments);
};

var real_dynCall_viii = asm["dynCall_viii"];
asm["dynCall_viii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_viii.apply(null, arguments);
};

var real_dynCall_vi = asm["dynCall_vi"];
asm["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_vi.apply(null, arguments);
};

var real_dynCall_viiii = asm["dynCall_viiii"];
asm["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_viiii.apply(null, arguments);
};

var real_dynCall_iiii = asm["dynCall_iiii"];
asm["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iiii.apply(null, arguments);
};

var real_dynCall_i = asm["dynCall_i"];
asm["dynCall_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_i.apply(null, arguments);
};

var real_dynCall_d = asm["dynCall_d"];
asm["dynCall_d"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_d.apply(null, arguments);
};

var real_dynCall_di = asm["dynCall_di"];
asm["dynCall_di"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_di.apply(null, arguments);
};

var real_dynCall_vidi = asm["dynCall_vidi"];
asm["dynCall_vidi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_vidi.apply(null, arguments);
};

var real_dynCall_vid = asm["dynCall_vid"];
asm["dynCall_vid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_vid.apply(null, arguments);
};

var real_dynCall_v = asm["dynCall_v"];
asm["dynCall_v"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_v.apply(null, arguments);
};

var real_dynCall_iidi = asm["dynCall_iidi"];
asm["dynCall_iidi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iidi.apply(null, arguments);
};

var real_dynCall_vd = asm["dynCall_vd"];
asm["dynCall_vd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_vd.apply(null, arguments);
};

var real_dynCall_iid = asm["dynCall_iid"];
asm["dynCall_iid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iid.apply(null, arguments);
};

var real_dynCall_idddi = asm["dynCall_idddi"];
asm["dynCall_idddi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_idddi.apply(null, arguments);
};

var real_dynCall_dddd = asm["dynCall_dddd"];
asm["dynCall_dddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_dddd.apply(null, arguments);
};

var real_dynCall_diii = asm["dynCall_diii"];
asm["dynCall_diii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_diii.apply(null, arguments);
};

var real_dynCall_vdi = asm["dynCall_vdi"];
asm["dynCall_vdi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_vdi.apply(null, arguments);
};

var real_dynCall_did = asm["dynCall_did"];
asm["dynCall_did"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_did.apply(null, arguments);
};

var real_dynCall_iiiii = asm["dynCall_iiiii"];
asm["dynCall_iiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iiiii.apply(null, arguments);
};

var real_dynCall_dii = asm["dynCall_dii"];
asm["dynCall_dii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_dii.apply(null, arguments);
};

var real_dynCall_diiii = asm["dynCall_diiii"];
asm["dynCall_diiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_diiii.apply(null, arguments);
};

var real_dynCall_diiiii = asm["dynCall_diiiii"];
asm["dynCall_diiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_diiiii.apply(null, arguments);
};

var real_dynCall_viid = asm["dynCall_viid"];
asm["dynCall_viid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_viid.apply(null, arguments);
};

var real_dynCall_viiiii = asm["dynCall_viiiii"];
asm["dynCall_viiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_viiiii.apply(null, arguments);
};

var real_dynCall_viidi = asm["dynCall_viidi"];
asm["dynCall_viidi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_viidi.apply(null, arguments);
};

var real_dynCall_dd = asm["dynCall_dd"];
asm["dynCall_dd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_dd.apply(null, arguments);
};

var real_dynCall_ddd = asm["dynCall_ddd"];
asm["dynCall_ddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_ddd.apply(null, arguments);
};

var real_dynCall_id = asm["dynCall_id"];
asm["dynCall_id"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_id.apply(null, arguments);
};

var real_dynCall_iiiiii = asm["dynCall_iiiiii"];
asm["dynCall_iiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iiiiii.apply(null, arguments);
};

var real_dynCall_viiiiii = asm["dynCall_viiiiii"];
asm["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_viiiiii.apply(null, arguments);
};

var real_dynCall_iiiiiii = asm["dynCall_iiiiiii"];
asm["dynCall_iiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iiiiiii.apply(null, arguments);
};

var real_dynCall_fff = asm["dynCall_fff"];
asm["dynCall_fff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_fff.apply(null, arguments);
};

var real_dynCall_jjj = asm["dynCall_jjj"];
asm["dynCall_jjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_jjj.apply(null, arguments);
};

var real_dynCall_ff = asm["dynCall_ff"];
asm["dynCall_ff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_ff.apply(null, arguments);
};

var real_dynCall_jiji = asm["dynCall_jiji"];
asm["dynCall_jiji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_jiji.apply(null, arguments);
};

var real_dynCall_iidiiii = asm["dynCall_iidiiii"];
asm["dynCall_iidiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_dynCall_iidiiii.apply(null, arguments);
};

Module["asm"] = asm;
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__wasm_call_ctors"].apply(null, arguments)
};

var _jshPushIOCharEvent = Module["_jshPushIOCharEvent"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["jshPushIOCharEvent"].apply(null, arguments)
};

var _jshGetCharToTransmit = Module["_jshGetCharToTransmit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["jshGetCharToTransmit"].apply(null, arguments)
};

var _jshGetDeviceToTransmit = Module["_jshGetDeviceToTransmit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["jshGetDeviceToTransmit"].apply(null, arguments)
};

var _malloc = Module["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["malloc"].apply(null, arguments)
};

var _free = Module["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["free"].apply(null, arguments)
};

var _jsInit = Module["_jsInit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["jsInit"].apply(null, arguments)
};

var _jsIdle = Module["_jsIdle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["jsIdle"].apply(null, arguments)
};

var _jsGfxChanged = Module["_jsGfxChanged"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["jsGfxChanged"].apply(null, arguments)
};

var _jsGfxGetPtr = Module["_jsGfxGetPtr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["jsGfxGetPtr"].apply(null, arguments)
};

var _jsSendPinWatchEvent = Module["_jsSendPinWatchEvent"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["jsSendPinWatchEvent"].apply(null, arguments)
};

var _jsKill = Module["_jsKill"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["jsKill"].apply(null, arguments)
};

var _htons = Module["_htons"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["htons"].apply(null, arguments)
};

var _ntohs = Module["_ntohs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ntohs"].apply(null, arguments)
};

var _htonl = Module["_htonl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["htonl"].apply(null, arguments)
};

var _fflush = Module["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fflush"].apply(null, arguments)
};

var ___errno_location = Module["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__errno_location"].apply(null, arguments)
};

var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZSt18uncaught_exceptionv"].apply(null, arguments)
};

var _setThrew = Module["_setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setThrew"].apply(null, arguments)
};

var _emscripten_builtin_memalign = Module["_emscripten_builtin_memalign"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emscripten_builtin_memalign"].apply(null, arguments)
};

var stackSave = Module["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackSave"].apply(null, arguments)
};

var stackAlloc = Module["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackAlloc"].apply(null, arguments)
};

var stackRestore = Module["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackRestore"].apply(null, arguments)
};

var __growWasmMemory = Module["__growWasmMemory"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__growWasmMemory"].apply(null, arguments)
};

var dynCall_vii = Module["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vii"].apply(null, arguments)
};

var dynCall_ii = Module["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ii"].apply(null, arguments)
};

var dynCall_iii = Module["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iii"].apply(null, arguments)
};

var dynCall_viii = Module["dynCall_viii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viii"].apply(null, arguments)
};

var dynCall_vi = Module["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vi"].apply(null, arguments)
};

var dynCall_viiii = Module["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiii"].apply(null, arguments)
};

var dynCall_iiii = Module["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiii"].apply(null, arguments)
};

var dynCall_i = Module["dynCall_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_i"].apply(null, arguments)
};

var dynCall_d = Module["dynCall_d"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_d"].apply(null, arguments)
};

var dynCall_di = Module["dynCall_di"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_di"].apply(null, arguments)
};

var dynCall_vidi = Module["dynCall_vidi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vidi"].apply(null, arguments)
};

var dynCall_vid = Module["dynCall_vid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vid"].apply(null, arguments)
};

var dynCall_v = Module["dynCall_v"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_v"].apply(null, arguments)
};

var dynCall_iidi = Module["dynCall_iidi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iidi"].apply(null, arguments)
};

var dynCall_vd = Module["dynCall_vd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vd"].apply(null, arguments)
};

var dynCall_iid = Module["dynCall_iid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iid"].apply(null, arguments)
};

var dynCall_idddi = Module["dynCall_idddi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_idddi"].apply(null, arguments)
};

var dynCall_dddd = Module["dynCall_dddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_dddd"].apply(null, arguments)
};

var dynCall_diii = Module["dynCall_diii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diii"].apply(null, arguments)
};

var dynCall_vdi = Module["dynCall_vdi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vdi"].apply(null, arguments)
};

var dynCall_did = Module["dynCall_did"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_did"].apply(null, arguments)
};

var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiii"].apply(null, arguments)
};

var dynCall_dii = Module["dynCall_dii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_dii"].apply(null, arguments)
};

var dynCall_diiii = Module["dynCall_diiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diiii"].apply(null, arguments)
};

var dynCall_diiiii = Module["dynCall_diiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diiiii"].apply(null, arguments)
};

var dynCall_viid = Module["dynCall_viid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viid"].apply(null, arguments)
};

var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiii"].apply(null, arguments)
};

var dynCall_viidi = Module["dynCall_viidi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viidi"].apply(null, arguments)
};

var dynCall_dd = Module["dynCall_dd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_dd"].apply(null, arguments)
};

var dynCall_ddd = Module["dynCall_ddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ddd"].apply(null, arguments)
};

var dynCall_id = Module["dynCall_id"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_id"].apply(null, arguments)
};

var dynCall_iiiiii = Module["dynCall_iiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiii"].apply(null, arguments)
};

var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiii"].apply(null, arguments)
};

var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiii"].apply(null, arguments)
};

var dynCall_fff = Module["dynCall_fff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_fff"].apply(null, arguments)
};

var dynCall_jjj = Module["dynCall_jjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_jjj"].apply(null, arguments)
};

var dynCall_ff = Module["dynCall_ff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ff"].apply(null, arguments)
};

var dynCall_jiji = Module["dynCall_jiji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_jiji"].apply(null, arguments)
};

var dynCall_iidiiii = Module["dynCall_iidiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iidiiii"].apply(null, arguments)
};




// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getMemory")) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "establishStackSpace")) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Pointer_stringify")) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
Module["abortStackOverflow"] = abortStackOverflow;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "calledRun")) Object.defineProperty(Module, "calledRun", { configurable: true, get: function() { abort("'calledRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") } });



var calledRun;


/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};





/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
    warnOnce('(this may also be due to not including full filesystem support - try building with -s FORCE_FILESYSTEM=1)');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}



